
ELEC3730Ass3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001659c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000046cc  08016730  08016730  00026730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801adfc  0801adfc  00030294  2**0
                  CONTENTS
  4 .ARM          00000008  0801adfc  0801adfc  0002adfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ae04  0801ae04  00030294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ae04  0801ae04  0002ae04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ae08  0801ae08  0002ae08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  0801ae0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030294  2**0
                  CONTENTS
 10 .bss          00005984  20000298  20000298  00030298  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005c1c  20005c1c  00030298  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030294  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ba9e  00000000  00000000  000302c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000074e9  00000000  00000000  0005bd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002508  00000000  00000000  00063250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002138  00000000  00000000  00065758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d0d3  00000000  00000000  00067890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035cb8  00000000  00000000  00094963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e62bb  00000000  00000000  000ca61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b08d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ab04  00000000  00000000  001b0928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  001bb42c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000003c  00000000  00000000  001bb450  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000298 	.word	0x20000298
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016714 	.word	0x08016714

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000029c 	.word	0x2000029c
 80001cc:	08016714 	.word	0x08016714

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <HAL_DCMI_FrameEventCallback>:

/*
 * Entire frame is scanned
 */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	FrameXferCplt = 1;
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <HAL_DCMI_FrameEventCallback+0x1c>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000534 	.word	0x20000534

08000f0c <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	FrameXferCplt = 1;
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_DCMI_VsyncEventCallback+0x1c>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000534 	.word	0x20000534

08000f2c <HAL_DCMI_LineEventCallback>:

/*
 * Entire line is scanned
 */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	LineXferCplt = 1;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_DCMI_LineEventCallback+0x2c>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
	LineCounter++;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_DCMI_LineEventCallback+0x30>)
 8000f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	3301      	adds	r3, #1
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <HAL_DCMI_LineEventCallback+0x30>)
 8000f4a:	801a      	strh	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	20000535 	.word	0x20000535
 8000f5c:	20000536 	.word	0x20000536

08000f60 <DMA_IT_Callback_Fn>:

void DMA_IT_Callback_Fn(DMA_HandleTypeDef *_hdma)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	//osSignalSet(cameraTaskHandle, 1);
	dma_done = 1;
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <DMA_IT_Callback_Fn+0x1c>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000000 	.word	0x20000000

08000f80 <StartCameraTask>:
//	hdma_dcmi.Init.Mode = DMA_NORMAL;
//	HAL_DMA_Init(&hdma_dcmi);
//}

void StartCameraTask(void const * argument)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6178      	str	r0, [r7, #20]
	osSemaphoreWait(startSemHandle, osWaitForever);
 8000f88:	4b38      	ldr	r3, [pc, #224]	; (800106c <StartCameraTask+0xec>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00e febd 	bl	800fd10 <osSemaphoreWait>

	// Prepare to write GRAM (0x22)
	LCD_IO_WriteReg(LCD_REG_34);
 8000f96:	2022      	movs	r0, #34	; 0x22
 8000f98:	f002 fa40 	bl	800341c <LCD_IO_WriteReg>

	// Register the callback function
	HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_CPLT_CB_ID, DMA_IT_Callback_Fn);
 8000f9c:	4a34      	ldr	r2, [pc, #208]	; (8001070 <StartCameraTask+0xf0>)
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4834      	ldr	r0, [pc, #208]	; (8001074 <StartCameraTask+0xf4>)
 8000fa2:	f004 ff37 	bl	8005e14 <HAL_DMA_RegisterCallback>

	// Start camera capture
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)camera_buffer, CAM_BUFFER_LENGTH / 2);
 8000fa6:	4a34      	ldr	r2, [pc, #208]	; (8001078 <StartCameraTask+0xf8>)
 8000fa8:	23a0      	movs	r3, #160	; 0xa0
 8000faa:	2100      	movs	r1, #0
 8000fac:	4833      	ldr	r0, [pc, #204]	; (800107c <StartCameraTask+0xfc>)
 8000fae:	f004 fa3d 	bl	800542c <HAL_DCMI_Start_DMA>

	// Change update direction
	ili9325_WriteReg(LCD_REG_3, 0x1020);
 8000fb2:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f002 fbfb 	bl	80037b2 <ili9325_WriteReg>

	while (1) {
		if (osMutexWait(lcdMutexHandle, osWaitForever) == osOK) {
 8000fbc:	4b30      	ldr	r3, [pc, #192]	; (8001080 <StartCameraTask+0x100>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f00e fded 	bl	800fba4 <osMutexWait>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d14a      	bne.n	8001066 <StartCameraTask+0xe6>
			// Check if line transfer has been complete
			if (LineXferCplt) {
 8000fd0:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <StartCameraTask+0x104>)
 8000fd2:	f993 3000 	ldrsb.w	r3, [r3]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d040      	beq.n	800105c <StartCameraTask+0xdc>
				// Check if end of the frame, if so reset the cursor, frame complete, and line counter
				if (FrameXferCplt) {
 8000fda:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <StartCameraTask+0x108>)
 8000fdc:	f993 3000 	ldrsb.w	r3, [r3]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d005      	beq.n	8000ff0 <StartCameraTask+0x70>
					FrameXferCplt = 0;
 8000fe4:	4b28      	ldr	r3, [pc, #160]	; (8001088 <StartCameraTask+0x108>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
					LineCounter = 0;
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <StartCameraTask+0x10c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	801a      	strh	r2, [r3, #0]
				}
				if (LineCounter < CAM_HEIGHT/2) {
 8000ff0:	4b26      	ldr	r3, [pc, #152]	; (800108c <StartCameraTask+0x10c>)
 8000ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff6:	2b77      	cmp	r3, #119	; 0x77
 8000ff8:	dc27      	bgt.n	800104a <StartCameraTask+0xca>
					// Set start of line and get ready to write to LCD GRAM
					ili9325_SetCursor(10 + LineCounter, 10);
 8000ffa:	4b24      	ldr	r3, [pc, #144]	; (800108c <StartCameraTask+0x10c>)
 8000ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001000:	b29b      	uxth	r3, r3
 8001002:	330a      	adds	r3, #10
 8001004:	b29b      	uxth	r3, r3
 8001006:	210a      	movs	r1, #10
 8001008:	4618      	mov	r0, r3
 800100a:	f002 fb84 	bl	8003716 <ili9325_SetCursor>
					LCD_IO_WriteReg(LCD_REG_34);
 800100e:	2022      	movs	r0, #34	; 0x22
 8001010:	f002 fa04 	bl	800341c <LCD_IO_WriteReg>
					//		(uint32_t) &LCD_RAM, CAM_BUFFER_LENGTH/2) != HAL_OK)
					//	printf("Error.\n");
					//HAL_DMA_PollForTransfer(&hdma_memtomem_dma2_stream0, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);

					// 3. Interrupt Mode DMA
					while (dma_done == 0) { }
 8001014:	bf00      	nop
 8001016:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <StartCameraTask+0x110>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0fb      	beq.n	8001016 <StartCameraTask+0x96>
					dma_done = 0;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <StartCameraTask+0x110>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
					if (HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, (uint32_t)camera_buffer,
 8001024:	4914      	ldr	r1, [pc, #80]	; (8001078 <StartCameraTask+0xf8>)
 8001026:	23a0      	movs	r3, #160	; 0xa0
 8001028:	4a1a      	ldr	r2, [pc, #104]	; (8001094 <StartCameraTask+0x114>)
 800102a:	4812      	ldr	r0, [pc, #72]	; (8001074 <StartCameraTask+0xf4>)
 800102c:	f004 fcee 	bl	8005a0c <HAL_DMA_Start_IT>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <StartCameraTask+0xbc>
							(uint32_t)&LCD_RAM, CAM_BUFFER_LENGTH/2) != HAL_OK)
						printf("Error.\n");
 8001036:	4818      	ldr	r0, [pc, #96]	; (8001098 <StartCameraTask+0x118>)
 8001038:	f013 fa7a 	bl	8014530 <puts>
					osSignalWait(1, osWaitForever);		// TODO: Replace with semaphore
 800103c:	463b      	mov	r3, r7
 800103e:	f04f 32ff 	mov.w	r2, #4294967295
 8001042:	2101      	movs	r1, #1
 8001044:	4618      	mov	r0, r3
 8001046:	f00e fd49 	bl	800fadc <osSignalWait>

				}
				// Converts uint16_t camera_buffer to uint32_t, so the actual length is BUFFER_LEN / 2
				HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)camera_buffer, CAM_BUFFER_LENGTH / 2);
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <StartCameraTask+0xf8>)
 800104c:	23a0      	movs	r3, #160	; 0xa0
 800104e:	2100      	movs	r1, #0
 8001050:	480a      	ldr	r0, [pc, #40]	; (800107c <StartCameraTask+0xfc>)
 8001052:	f004 f9eb 	bl	800542c <HAL_DCMI_Start_DMA>
				LineXferCplt = 0;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <StartCameraTask+0x104>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
			}
			//osDelay(100);
			osMutexRelease(lcdMutexHandle);
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <StartCameraTask+0x100>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f00e fded 	bl	800fc40 <osMutexRelease>
		}
		osThreadYield();
 8001066:	f00e fc5f 	bl	800f928 <osThreadYield>
		if (osMutexWait(lcdMutexHandle, osWaitForever) == osOK) {
 800106a:	e7a7      	b.n	8000fbc <StartCameraTask+0x3c>
 800106c:	20000d0c 	.word	0x20000d0c
 8001070:	08000f61 	.word	0x08000f61
 8001074:	20000c74 	.word	0x20000c74
 8001078:	200002b4 	.word	0x200002b4
 800107c:	20000bd4 	.word	0x20000bd4
 8001080:	20000d04 	.word	0x20000d04
 8001084:	20000535 	.word	0x20000535
 8001088:	20000534 	.word	0x20000534
 800108c:	20000536 	.word	0x20000536
 8001090:	20000000 	.word	0x20000000
 8001094:	60020000 	.word	0x60020000
 8001098:	08016730 	.word	0x08016730

0800109c <StartControlTask>:
Button btn_register = {190, 90, 100, 30, "Register"};
Button btn_login = {190, 140, 100, 30, "Login"};
Button key_display = {200, 90, 80, 20, ""};

void StartControlTask(void const * argument)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	osEvent event;												// Event structure to receive message from queue
	while(1) {
		event = osMessageGet(stateQueueHandle, osWaitForever);	// Wait and get message
 80010a4:	4b87      	ldr	r3, [pc, #540]	; (80012c4 <StartControlTask+0x228>)
 80010a6:	6819      	ldr	r1, [r3, #0]
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	4618      	mov	r0, r3
 80010b2:	f00e ff2d 	bl	800ff10 <osMessageGet>
		if (event.status == 0x10) {
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2b10      	cmp	r3, #16
 80010ba:	f040 80fe 	bne.w	80012ba <StartControlTask+0x21e>
			switch (event.value.v) {
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	2b11      	cmp	r3, #17
 80010c2:	f200 80fb 	bhi.w	80012bc <StartControlTask+0x220>
 80010c6:	a201      	add	r2, pc, #4	; (adr r2, 80010cc <StartControlTask+0x30>)
 80010c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010cc:	08001115 	.word	0x08001115
 80010d0:	08001137 	.word	0x08001137
 80010d4:	0800115f 	.word	0x0800115f
 80010d8:	08001177 	.word	0x08001177
 80010dc:	0800118f 	.word	0x0800118f
 80010e0:	080011af 	.word	0x080011af
 80010e4:	080011c7 	.word	0x080011c7
 80010e8:	080011e7 	.word	0x080011e7
 80010ec:	08001207 	.word	0x08001207
 80010f0:	08001219 	.word	0x08001219
 80010f4:	0800122b 	.word	0x0800122b
 80010f8:	0800123d 	.word	0x0800123d
 80010fc:	0800124f 	.word	0x0800124f
 8001100:	08001261 	.word	0x08001261
 8001104:	08001273 	.word	0x08001273
 8001108:	08001285 	.word	0x08001285
 800110c:	08001297 	.word	0x08001297
 8001110:	080012a9 	.word	0x080012a9
				case (FINISHED):
					osTimerStop(messageTimerHandle);					// Stop the message timer
 8001114:	4b6c      	ldr	r3, [pc, #432]	; (80012c8 <StartControlTask+0x22c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f00e fca3 	bl	800fa64 <osTimerStop>
					osMessagePut(renderQueueHandle, FINISHED, osWaitForever);
 800111e:	4b6b      	ldr	r3, [pc, #428]	; (80012cc <StartControlTask+0x230>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f04f 32ff 	mov.w	r2, #4294967295
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f00e feb1 	bl	800fe90 <osMessagePut>
					state = WELCOME;
 800112e:	4b68      	ldr	r3, [pc, #416]	; (80012d0 <StartControlTask+0x234>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
					break;
 8001134:	e0c2      	b.n	80012bc <StartControlTask+0x220>
				case (REG_ID):
					osMessagePut(renderQueueHandle, REG_ID, osWaitForever);
 8001136:	4b65      	ldr	r3, [pc, #404]	; (80012cc <StartControlTask+0x230>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f04f 32ff 	mov.w	r2, #4294967295
 800113e:	2101      	movs	r1, #1
 8001140:	4618      	mov	r0, r3
 8001142:	f00e fea5 	bl	800fe90 <osMessagePut>
					osMessagePut(fileSystemQueueHandle, CHECK_REGISTER_ID, osWaitForever);
 8001146:	4b63      	ldr	r3, [pc, #396]	; (80012d4 <StartControlTask+0x238>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f04f 32ff 	mov.w	r2, #4294967295
 800114e:	2102      	movs	r1, #2
 8001150:	4618      	mov	r0, r3
 8001152:	f00e fe9d 	bl	800fe90 <osMessagePut>
					state = REGISTER_ID;
 8001156:	4b5e      	ldr	r3, [pc, #376]	; (80012d0 <StartControlTask+0x234>)
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
					break;
 800115c:	e0ae      	b.n	80012bc <StartControlTask+0x220>
				case (REG_PIN):
					osMessagePut(renderQueueHandle, REG_PIN, osWaitForever);
 800115e:	4b5b      	ldr	r3, [pc, #364]	; (80012cc <StartControlTask+0x230>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f04f 32ff 	mov.w	r2, #4294967295
 8001166:	2102      	movs	r1, #2
 8001168:	4618      	mov	r0, r3
 800116a:	f00e fe91 	bl	800fe90 <osMessagePut>
					state = REGISTER_PIN;
 800116e:	4b58      	ldr	r3, [pc, #352]	; (80012d0 <StartControlTask+0x234>)
 8001170:	2202      	movs	r2, #2
 8001172:	701a      	strb	r2, [r3, #0]
					break;
 8001174:	e0a2      	b.n	80012bc <StartControlTask+0x220>
				case (LOG_ID):
					osMessagePut(renderQueueHandle, LOG_ID, osWaitForever);
 8001176:	4b55      	ldr	r3, [pc, #340]	; (80012cc <StartControlTask+0x230>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f04f 32ff 	mov.w	r2, #4294967295
 800117e:	2103      	movs	r1, #3
 8001180:	4618      	mov	r0, r3
 8001182:	f00e fe85 	bl	800fe90 <osMessagePut>
					state = LOGIN_ID;
 8001186:	4b52      	ldr	r3, [pc, #328]	; (80012d0 <StartControlTask+0x234>)
 8001188:	2203      	movs	r2, #3
 800118a:	701a      	strb	r2, [r3, #0]
					break;
 800118c:	e096      	b.n	80012bc <StartControlTask+0x220>
				// Display error message for id not registered and change state to welcome
				case (LOG_ID_ERR):
					osMessagePut(renderQueueHandle, LOG_ID_ERR, osWaitForever);
 800118e:	4b4f      	ldr	r3, [pc, #316]	; (80012cc <StartControlTask+0x230>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f04f 32ff 	mov.w	r2, #4294967295
 8001196:	2104      	movs	r1, #4
 8001198:	4618      	mov	r0, r3
 800119a:	f00e fe79 	bl	800fe90 <osMessagePut>
					osTimerStart(messageTimerHandle, 2000);			// Start the message timer
 800119e:	4b4a      	ldr	r3, [pc, #296]	; (80012c8 <StartControlTask+0x22c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f00e fc18 	bl	800f9dc <osTimerStart>
					break;
 80011ac:	e086      	b.n	80012bc <StartControlTask+0x220>
				// Display login screen with prompt to enter Pin and change state to login
				case (LOG_ID_OK):
					osMessagePut(renderQueueHandle, LOG_ID_OK, osWaitForever);
 80011ae:	4b47      	ldr	r3, [pc, #284]	; (80012cc <StartControlTask+0x230>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f04f 32ff 	mov.w	r2, #4294967295
 80011b6:	2105      	movs	r1, #5
 80011b8:	4618      	mov	r0, r3
 80011ba:	f00e fe69 	bl	800fe90 <osMessagePut>
					state = LOGIN_PIN;
 80011be:	4b44      	ldr	r3, [pc, #272]	; (80012d0 <StartControlTask+0x234>)
 80011c0:	2204      	movs	r2, #4
 80011c2:	701a      	strb	r2, [r3, #0]
					break;
 80011c4:	e07a      	b.n	80012bc <StartControlTask+0x220>
				// Display "Access Denied" for 2 seconds then change state to welcome
				case (LOG_AUTH_ERR):
					osMessagePut(renderQueueHandle, LOG_AUTH_ERR, osWaitForever);
 80011c6:	4b41      	ldr	r3, [pc, #260]	; (80012cc <StartControlTask+0x230>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f04f 32ff 	mov.w	r2, #4294967295
 80011ce:	2106      	movs	r1, #6
 80011d0:	4618      	mov	r0, r3
 80011d2:	f00e fe5d 	bl	800fe90 <osMessagePut>
					osTimerStart(messageTimerHandle, 2000);			// Start the message timer
 80011d6:	4b3c      	ldr	r3, [pc, #240]	; (80012c8 <StartControlTask+0x22c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80011de:	4618      	mov	r0, r3
 80011e0:	f00e fbfc 	bl	800f9dc <osTimerStart>
					break;
 80011e4:	e06a      	b.n	80012bc <StartControlTask+0x220>
				// Display "Access Granted" for 2 seconds then change state to welcome
				case (LOG_AUTH_OK):
					osMessagePut(renderQueueHandle, LOG_AUTH_OK, osWaitForever);
 80011e6:	4b39      	ldr	r3, [pc, #228]	; (80012cc <StartControlTask+0x230>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f04f 32ff 	mov.w	r2, #4294967295
 80011ee:	2107      	movs	r1, #7
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00e fe4d 	bl	800fe90 <osMessagePut>
					osTimerStart(messageTimerHandle, 2000);			// Start the message timer
 80011f6:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <StartControlTask+0x22c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80011fe:	4618      	mov	r0, r3
 8001200:	f00e fbec 	bl	800f9dc <osTimerStart>
					break;
 8001204:	e05a      	b.n	80012bc <StartControlTask+0x220>
				case (KEY_0):
					osMessagePut(renderQueueHandle, KEY_0, osWaitForever);
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <StartControlTask+0x230>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f04f 32ff 	mov.w	r2, #4294967295
 800120e:	2108      	movs	r1, #8
 8001210:	4618      	mov	r0, r3
 8001212:	f00e fe3d 	bl	800fe90 <osMessagePut>
					break;
 8001216:	e051      	b.n	80012bc <StartControlTask+0x220>
				case (KEY_1):
					osMessagePut(renderQueueHandle, KEY_1, osWaitForever);
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <StartControlTask+0x230>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	2109      	movs	r1, #9
 8001222:	4618      	mov	r0, r3
 8001224:	f00e fe34 	bl	800fe90 <osMessagePut>
					break;
 8001228:	e048      	b.n	80012bc <StartControlTask+0x220>
				case (KEY_2):
					osMessagePut(renderQueueHandle, KEY_2, osWaitForever);
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <StartControlTask+0x230>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f04f 32ff 	mov.w	r2, #4294967295
 8001232:	210a      	movs	r1, #10
 8001234:	4618      	mov	r0, r3
 8001236:	f00e fe2b 	bl	800fe90 <osMessagePut>
					break;
 800123a:	e03f      	b.n	80012bc <StartControlTask+0x220>
				case (KEY_3):
					osMessagePut(renderQueueHandle, KEY_3, osWaitForever);
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <StartControlTask+0x230>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	210b      	movs	r1, #11
 8001246:	4618      	mov	r0, r3
 8001248:	f00e fe22 	bl	800fe90 <osMessagePut>
					break;
 800124c:	e036      	b.n	80012bc <StartControlTask+0x220>
				case (KEY_4):
					osMessagePut(renderQueueHandle, KEY_4, osWaitForever);
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <StartControlTask+0x230>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f04f 32ff 	mov.w	r2, #4294967295
 8001256:	210c      	movs	r1, #12
 8001258:	4618      	mov	r0, r3
 800125a:	f00e fe19 	bl	800fe90 <osMessagePut>
					break;
 800125e:	e02d      	b.n	80012bc <StartControlTask+0x220>
				case (KEY_5):
					osMessagePut(renderQueueHandle, KEY_5, osWaitForever);
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <StartControlTask+0x230>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f04f 32ff 	mov.w	r2, #4294967295
 8001268:	210d      	movs	r1, #13
 800126a:	4618      	mov	r0, r3
 800126c:	f00e fe10 	bl	800fe90 <osMessagePut>
					break;
 8001270:	e024      	b.n	80012bc <StartControlTask+0x220>
				case (KEY_6):
					osMessagePut(renderQueueHandle, KEY_6, osWaitForever);
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <StartControlTask+0x230>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f04f 32ff 	mov.w	r2, #4294967295
 800127a:	210e      	movs	r1, #14
 800127c:	4618      	mov	r0, r3
 800127e:	f00e fe07 	bl	800fe90 <osMessagePut>
					break;
 8001282:	e01b      	b.n	80012bc <StartControlTask+0x220>
				case (KEY_7):
					osMessagePut(renderQueueHandle, KEY_7, osWaitForever);
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <StartControlTask+0x230>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	210f      	movs	r1, #15
 800128e:	4618      	mov	r0, r3
 8001290:	f00e fdfe 	bl	800fe90 <osMessagePut>
					break;
 8001294:	e012      	b.n	80012bc <StartControlTask+0x220>
				case (KEY_8):
					osMessagePut(renderQueueHandle, KEY_8, osWaitForever);
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <StartControlTask+0x230>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f04f 32ff 	mov.w	r2, #4294967295
 800129e:	2110      	movs	r1, #16
 80012a0:	4618      	mov	r0, r3
 80012a2:	f00e fdf5 	bl	800fe90 <osMessagePut>
					break;
 80012a6:	e009      	b.n	80012bc <StartControlTask+0x220>
				case (KEY_9):
					osMessagePut(renderQueueHandle, KEY_9, osWaitForever);
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <StartControlTask+0x230>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	2111      	movs	r1, #17
 80012b2:	4618      	mov	r0, r3
 80012b4:	f00e fdec 	bl	800fe90 <osMessagePut>
					break;
 80012b8:	e000      	b.n	80012bc <StartControlTask+0x220>
			}
		}
 80012ba:	bf00      	nop
		osDelay(100);
 80012bc:	2064      	movs	r0, #100	; 0x64
 80012be:	f00e fb45 	bl	800f94c <osDelay>
		event = osMessageGet(stateQueueHandle, osWaitForever);	// Wait and get message
 80012c2:	e6ef      	b.n	80010a4 <StartControlTask+0x8>
 80012c4:	20000cf0 	.word	0x20000cf0
 80012c8:	20000d00 	.word	0x20000d00
 80012cc:	20000cf4 	.word	0x20000cf4
 80012d0:	20000538 	.word	0x20000538
 80012d4:	20000cfc 	.word	0x20000cfc

080012d8 <StartKeypadTask>:
 */

#include "Ass-03.h"

void StartKeypadTask(void const * argument)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	for(;;) {
		osDelay(100);
 80012e0:	2064      	movs	r0, #100	; 0x64
 80012e2:	f00e fb33 	bl	800f94c <osDelay>
 80012e6:	e7fb      	b.n	80012e0 <StartKeypadTask+0x8>

080012e8 <get_text_pos>:
char id[4];
char pin[5];
uint8_t counter;

uint16_t get_text_pos(const char* str)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	uint16_t charCount = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	81fb      	strh	r3, [r7, #14]
	for (const char* p = str; *p != '\0'; p++)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	e005      	b.n	8001306 <get_text_pos+0x1e>
		charCount++;
 80012fa:	89fb      	ldrh	r3, [r7, #14]
 80012fc:	3301      	adds	r3, #1
 80012fe:	81fb      	strh	r3, [r7, #14]
	for (const char* p = str; *p != '\0'; p++)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	3301      	adds	r3, #1
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f5      	bne.n	80012fa <get_text_pos+0x12>
	return LCD_X_CENTRE - (charCount * BSP_LCD_GetFont()->Width) / 2;
 800130e:	89fc      	ldrh	r4, [r7, #14]
 8001310:	f002 fc2a 	bl	8003b68 <BSP_LCD_GetFont>
 8001314:	4603      	mov	r3, r0
 8001316:	889b      	ldrh	r3, [r3, #4]
 8001318:	fb04 f303 	mul.w	r3, r4, r3
 800131c:	0fda      	lsrs	r2, r3, #31
 800131e:	4413      	add	r3, r2
 8001320:	105b      	asrs	r3, r3, #1
 8001322:	425b      	negs	r3, r3
 8001324:	b29b      	uxth	r3, r3
 8001326:	33f0      	adds	r3, #240	; 0xf0
 8001328:	b29b      	uxth	r3, r3
}
 800132a:	4618      	mov	r0, r3
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	bd90      	pop	{r4, r7, pc}

08001332 <get_btntext_pos>:

uint16_t get_btntext_pos(const char* str, uint16_t position, uint16_t dimension, uint16_t font_size)
{
 8001332:	b480      	push	{r7}
 8001334:	b087      	sub	sp, #28
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	4608      	mov	r0, r1
 800133c:	4611      	mov	r1, r2
 800133e:	461a      	mov	r2, r3
 8001340:	4603      	mov	r3, r0
 8001342:	817b      	strh	r3, [r7, #10]
 8001344:	460b      	mov	r3, r1
 8001346:	813b      	strh	r3, [r7, #8]
 8001348:	4613      	mov	r3, r2
 800134a:	80fb      	strh	r3, [r7, #6]
	uint16_t charCount = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	82fb      	strh	r3, [r7, #22]
	for (const char* p = str; *p != '\0'; p++)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	e005      	b.n	8001362 <get_btntext_pos+0x30>
		charCount++;
 8001356:	8afb      	ldrh	r3, [r7, #22]
 8001358:	3301      	adds	r3, #1
 800135a:	82fb      	strh	r3, [r7, #22]
	for (const char* p = str; *p != '\0'; p++)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	3301      	adds	r3, #1
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f5      	bne.n	8001356 <get_btntext_pos+0x24>
	return (position + dimension) / 2 - (charCount * font_size) / 2;
 800136a:	897a      	ldrh	r2, [r7, #10]
 800136c:	893b      	ldrh	r3, [r7, #8]
 800136e:	4413      	add	r3, r2
 8001370:	0fda      	lsrs	r2, r3, #31
 8001372:	4413      	add	r3, r2
 8001374:	105b      	asrs	r3, r3, #1
 8001376:	b29a      	uxth	r2, r3
 8001378:	8afb      	ldrh	r3, [r7, #22]
 800137a:	88f9      	ldrh	r1, [r7, #6]
 800137c:	fb01 f303 	mul.w	r3, r1, r3
 8001380:	0fd9      	lsrs	r1, r3, #31
 8001382:	440b      	add	r3, r1
 8001384:	105b      	asrs	r3, r3, #1
 8001386:	425b      	negs	r3, r3
 8001388:	b29b      	uxth	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
}
 800138e:	4618      	mov	r0, r3
 8001390:	371c      	adds	r7, #28
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <draw_button_bev>:
	BSP_LCD_DisplayStringAt(get_btntext_pos(text, x, width, BSP_LCD_GetFont()->Width), get_btntext_pos(text, y, height, BSP_LCD_GetFont()->Height), (uint8_t *)text, LEFT_MODE);
	//BSP_LCD_DisplayStringAt(x + BTN_WIDTH/2 - get_string_width(text)/2, y + BTN_HEIGHT/2 - BSP_LCD_GetFont()->Height/2, (uint8_t *)text, LEFT_MODE);
}
*/

void draw_button_bev(Button btn) {
 800139a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	ili9325_WriteReg(LCD_REG_3, 0x1028);
 80013a8:	f241 0128 	movw	r1, #4136	; 0x1028
 80013ac:	2003      	movs	r0, #3
 80013ae:	f002 fa00 	bl	80037b2 <ili9325_WriteReg>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);  // Set the button color
 80013b2:	f244 2008 	movw	r0, #16904	; 0x4208
 80013b6:	f002 fbb7 	bl	8003b28 <BSP_LCD_SetTextColor>

	// Draw the button body
	BSP_LCD_FillRect(btn.x_pos , btn.y_pos, btn.width, btn.height);
 80013ba:	88b8      	ldrh	r0, [r7, #4]
 80013bc:	88f9      	ldrh	r1, [r7, #6]
 80013be:	893a      	ldrh	r2, [r7, #8]
 80013c0:	897b      	ldrh	r3, [r7, #10]
 80013c2:	f002 ff1f 	bl	8004204 <BSP_LCD_FillRect>

	// Draw the top bevel
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 80013c6:	f24d 609a 	movw	r0, #54938	; 0xd69a
 80013ca:	f002 fbad 	bl	8003b28 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(btn.x_pos , btn.y_pos, btn.x_pos  + btn.width - 1, btn.y_pos);
 80013ce:	88b8      	ldrh	r0, [r7, #4]
 80013d0:	88f9      	ldrh	r1, [r7, #6]
 80013d2:	88ba      	ldrh	r2, [r7, #4]
 80013d4:	893b      	ldrh	r3, [r7, #8]
 80013d6:	4413      	add	r3, r2
 80013d8:	b29b      	uxth	r3, r3
 80013da:	3b01      	subs	r3, #1
 80013dc:	b29a      	uxth	r2, r3
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	f002 fd46 	bl	8003e70 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(btn.x_pos , btn.y_pos + 1, btn.x_pos  + btn.width - 2, btn.y_pos + 1);
 80013e4:	88b8      	ldrh	r0, [r7, #4]
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	3301      	adds	r3, #1
 80013ea:	b299      	uxth	r1, r3
 80013ec:	88ba      	ldrh	r2, [r7, #4]
 80013ee:	893b      	ldrh	r3, [r7, #8]
 80013f0:	4413      	add	r3, r2
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	3b02      	subs	r3, #2
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	3301      	adds	r3, #1
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	f002 fd37 	bl	8003e70 <BSP_LCD_DrawLine>

	// Draw the left bevel
	BSP_LCD_DrawLine(btn.x_pos , btn.y_pos, btn.x_pos , btn.y_pos + btn.height - 1);
 8001402:	88b8      	ldrh	r0, [r7, #4]
 8001404:	88f9      	ldrh	r1, [r7, #6]
 8001406:	88bc      	ldrh	r4, [r7, #4]
 8001408:	88fa      	ldrh	r2, [r7, #6]
 800140a:	897b      	ldrh	r3, [r7, #10]
 800140c:	4413      	add	r3, r2
 800140e:	b29b      	uxth	r3, r3
 8001410:	3b01      	subs	r3, #1
 8001412:	b29b      	uxth	r3, r3
 8001414:	4622      	mov	r2, r4
 8001416:	f002 fd2b 	bl	8003e70 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(btn.x_pos  + 1, btn.y_pos, btn.x_pos  + 1, btn.y_pos + btn.height - 2);
 800141a:	88bb      	ldrh	r3, [r7, #4]
 800141c:	3301      	adds	r3, #1
 800141e:	b298      	uxth	r0, r3
 8001420:	88f9      	ldrh	r1, [r7, #6]
 8001422:	88bb      	ldrh	r3, [r7, #4]
 8001424:	3301      	adds	r3, #1
 8001426:	b29c      	uxth	r4, r3
 8001428:	88fa      	ldrh	r2, [r7, #6]
 800142a:	897b      	ldrh	r3, [r7, #10]
 800142c:	4413      	add	r3, r2
 800142e:	b29b      	uxth	r3, r3
 8001430:	3b02      	subs	r3, #2
 8001432:	b29b      	uxth	r3, r3
 8001434:	4622      	mov	r2, r4
 8001436:	f002 fd1b 	bl	8003e70 <BSP_LCD_DrawLine>

	// Draw the bottom bevel
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800143a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800143e:	f002 fb73 	bl	8003b28 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(btn.x_pos , btn.y_pos + btn.height - 1, btn.x_pos  + btn.width - 1, btn.y_pos + btn.height - 1);
 8001442:	88b8      	ldrh	r0, [r7, #4]
 8001444:	88fa      	ldrh	r2, [r7, #6]
 8001446:	897b      	ldrh	r3, [r7, #10]
 8001448:	4413      	add	r3, r2
 800144a:	b29b      	uxth	r3, r3
 800144c:	3b01      	subs	r3, #1
 800144e:	b299      	uxth	r1, r3
 8001450:	88ba      	ldrh	r2, [r7, #4]
 8001452:	893b      	ldrh	r3, [r7, #8]
 8001454:	4413      	add	r3, r2
 8001456:	b29b      	uxth	r3, r3
 8001458:	3b01      	subs	r3, #1
 800145a:	b29c      	uxth	r4, r3
 800145c:	88fa      	ldrh	r2, [r7, #6]
 800145e:	897b      	ldrh	r3, [r7, #10]
 8001460:	4413      	add	r3, r2
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29b      	uxth	r3, r3
 8001468:	4622      	mov	r2, r4
 800146a:	f002 fd01 	bl	8003e70 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(btn.x_pos , btn.y_pos + btn.height - 2, btn.x_pos  + btn.width - 2, btn.y_pos + btn.height - 2);
 800146e:	88b8      	ldrh	r0, [r7, #4]
 8001470:	88fa      	ldrh	r2, [r7, #6]
 8001472:	897b      	ldrh	r3, [r7, #10]
 8001474:	4413      	add	r3, r2
 8001476:	b29b      	uxth	r3, r3
 8001478:	3b02      	subs	r3, #2
 800147a:	b299      	uxth	r1, r3
 800147c:	88ba      	ldrh	r2, [r7, #4]
 800147e:	893b      	ldrh	r3, [r7, #8]
 8001480:	4413      	add	r3, r2
 8001482:	b29b      	uxth	r3, r3
 8001484:	3b02      	subs	r3, #2
 8001486:	b29c      	uxth	r4, r3
 8001488:	88fa      	ldrh	r2, [r7, #6]
 800148a:	897b      	ldrh	r3, [r7, #10]
 800148c:	4413      	add	r3, r2
 800148e:	b29b      	uxth	r3, r3
 8001490:	3b02      	subs	r3, #2
 8001492:	b29b      	uxth	r3, r3
 8001494:	4622      	mov	r2, r4
 8001496:	f002 fceb 	bl	8003e70 <BSP_LCD_DrawLine>

	// Draw the right bevel
	BSP_LCD_DrawLine(btn.x_pos  + btn.width - 1, btn.y_pos, btn.x_pos  + btn.width - 1, btn.y_pos + btn.height - 1);
 800149a:	88ba      	ldrh	r2, [r7, #4]
 800149c:	893b      	ldrh	r3, [r7, #8]
 800149e:	4413      	add	r3, r2
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b298      	uxth	r0, r3
 80014a6:	88f9      	ldrh	r1, [r7, #6]
 80014a8:	88ba      	ldrh	r2, [r7, #4]
 80014aa:	893b      	ldrh	r3, [r7, #8]
 80014ac:	4413      	add	r3, r2
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	3b01      	subs	r3, #1
 80014b2:	b29c      	uxth	r4, r3
 80014b4:	88fa      	ldrh	r2, [r7, #6]
 80014b6:	897b      	ldrh	r3, [r7, #10]
 80014b8:	4413      	add	r3, r2
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	3b01      	subs	r3, #1
 80014be:	b29b      	uxth	r3, r3
 80014c0:	4622      	mov	r2, r4
 80014c2:	f002 fcd5 	bl	8003e70 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(btn.x_pos  + btn.width - 2, btn.y_pos, btn.x_pos  + btn.width - 2, btn.y_pos + btn.height - 2);
 80014c6:	88ba      	ldrh	r2, [r7, #4]
 80014c8:	893b      	ldrh	r3, [r7, #8]
 80014ca:	4413      	add	r3, r2
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	3b02      	subs	r3, #2
 80014d0:	b298      	uxth	r0, r3
 80014d2:	88f9      	ldrh	r1, [r7, #6]
 80014d4:	88ba      	ldrh	r2, [r7, #4]
 80014d6:	893b      	ldrh	r3, [r7, #8]
 80014d8:	4413      	add	r3, r2
 80014da:	b29b      	uxth	r3, r3
 80014dc:	3b02      	subs	r3, #2
 80014de:	b29c      	uxth	r4, r3
 80014e0:	88fa      	ldrh	r2, [r7, #6]
 80014e2:	897b      	ldrh	r3, [r7, #10]
 80014e4:	4413      	add	r3, r2
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	3b02      	subs	r3, #2
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	4622      	mov	r2, r4
 80014ee:	f002 fcbf 	bl	8003e70 <BSP_LCD_DrawLine>

	// Add the text
	BSP_LCD_DisplayStringAt(get_btntext_pos(btn.text, btn.x_pos , btn.width, BSP_LCD_GetFont()->Width), get_btntext_pos(btn.text, btn.y_pos, btn.height, BSP_LCD_GetFont()->Height), (uint8_t *)btn.text, LEFT_MODE);
 80014f2:	68fc      	ldr	r4, [r7, #12]
 80014f4:	88bd      	ldrh	r5, [r7, #4]
 80014f6:	893e      	ldrh	r6, [r7, #8]
 80014f8:	f002 fb36 	bl	8003b68 <BSP_LCD_GetFont>
 80014fc:	4603      	mov	r3, r0
 80014fe:	889b      	ldrh	r3, [r3, #4]
 8001500:	4632      	mov	r2, r6
 8001502:	4629      	mov	r1, r5
 8001504:	4620      	mov	r0, r4
 8001506:	f7ff ff14 	bl	8001332 <get_btntext_pos>
 800150a:	4603      	mov	r3, r0
 800150c:	4698      	mov	r8, r3
 800150e:	68fc      	ldr	r4, [r7, #12]
 8001510:	88fd      	ldrh	r5, [r7, #6]
 8001512:	897e      	ldrh	r6, [r7, #10]
 8001514:	f002 fb28 	bl	8003b68 <BSP_LCD_GetFont>
 8001518:	4603      	mov	r3, r0
 800151a:	88db      	ldrh	r3, [r3, #6]
 800151c:	4632      	mov	r2, r6
 800151e:	4629      	mov	r1, r5
 8001520:	4620      	mov	r0, r4
 8001522:	f7ff ff06 	bl	8001332 <get_btntext_pos>
 8001526:	4603      	mov	r3, r0
 8001528:	4619      	mov	r1, r3
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	2303      	movs	r3, #3
 800152e:	4640      	mov	r0, r8
 8001530:	f002 fb84 	bl	8003c3c <BSP_LCD_DisplayStringAt>
	//BSP_LCD_DisplayStringAt(x + BTN_WIDTH/2 - get_string_width(text)/2, y + BTN_HEIGHT/2 - BSP_LCD_GetFont()->Height/2, (uint8_t *)text, LEFT_MODE);
}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800153e <draw_button>:

void draw_button(Button btn, uint16_t radius) {
 800153e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	1d3c      	adds	r4, r7, #4
 8001548:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800154c:	807b      	strh	r3, [r7, #2]
    ili9325_WriteReg(LCD_REG_3, 0x1028);
 800154e:	f241 0128 	movw	r1, #4136	; 0x1028
 8001552:	2003      	movs	r0, #3
 8001554:	f002 f92d 	bl	80037b2 <ili9325_WriteReg>
	BSP_LCD_FillCircle(btn.x_pos + radius, btn.y_pos + radius, radius);
 8001558:	88ba      	ldrh	r2, [r7, #4]
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	4413      	add	r3, r2
 800155e:	b298      	uxth	r0, r3
 8001560:	88fa      	ldrh	r2, [r7, #6]
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	4413      	add	r3, r2
 8001566:	b29b      	uxth	r3, r3
 8001568:	887a      	ldrh	r2, [r7, #2]
 800156a:	4619      	mov	r1, r3
 800156c:	f002 fe74 	bl	8004258 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(btn.x_pos + radius, btn.y_pos + btn.height - radius - 1, radius);
 8001570:	88ba      	ldrh	r2, [r7, #4]
 8001572:	887b      	ldrh	r3, [r7, #2]
 8001574:	4413      	add	r3, r2
 8001576:	b298      	uxth	r0, r3
 8001578:	88fa      	ldrh	r2, [r7, #6]
 800157a:	897b      	ldrh	r3, [r7, #10]
 800157c:	4413      	add	r3, r2
 800157e:	b29a      	uxth	r2, r3
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	b29b      	uxth	r3, r3
 8001586:	3b01      	subs	r3, #1
 8001588:	b29b      	uxth	r3, r3
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	4619      	mov	r1, r3
 800158e:	f002 fe63 	bl	8004258 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(btn.x_pos + btn.width - radius - 1, btn.y_pos + radius, radius);
 8001592:	88ba      	ldrh	r2, [r7, #4]
 8001594:	893b      	ldrh	r3, [r7, #8]
 8001596:	4413      	add	r3, r2
 8001598:	b29a      	uxth	r2, r3
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	b29b      	uxth	r3, r3
 80015a0:	3b01      	subs	r3, #1
 80015a2:	b298      	uxth	r0, r3
 80015a4:	88fa      	ldrh	r2, [r7, #6]
 80015a6:	887b      	ldrh	r3, [r7, #2]
 80015a8:	4413      	add	r3, r2
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	887a      	ldrh	r2, [r7, #2]
 80015ae:	4619      	mov	r1, r3
 80015b0:	f002 fe52 	bl	8004258 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(btn.x_pos + btn.width - radius - 1, btn.y_pos + btn.height - radius - 1, radius);
 80015b4:	88ba      	ldrh	r2, [r7, #4]
 80015b6:	893b      	ldrh	r3, [r7, #8]
 80015b8:	4413      	add	r3, r2
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	887b      	ldrh	r3, [r7, #2]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	3b01      	subs	r3, #1
 80015c4:	b298      	uxth	r0, r3
 80015c6:	88fa      	ldrh	r2, [r7, #6]
 80015c8:	897b      	ldrh	r3, [r7, #10]
 80015ca:	4413      	add	r3, r2
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	3b01      	subs	r3, #1
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	887a      	ldrh	r2, [r7, #2]
 80015da:	4619      	mov	r1, r3
 80015dc:	f002 fe3c 	bl	8004258 <BSP_LCD_FillCircle>

    BSP_LCD_FillRect(btn.x_pos + radius, btn.y_pos, btn.width - 2 * radius, btn.height);
 80015e0:	88ba      	ldrh	r2, [r7, #4]
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	4413      	add	r3, r2
 80015e6:	b298      	uxth	r0, r3
 80015e8:	88f9      	ldrh	r1, [r7, #6]
 80015ea:	893a      	ldrh	r2, [r7, #8]
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	897b      	ldrh	r3, [r7, #10]
 80015f8:	f002 fe04 	bl	8004204 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(btn.x_pos, btn.y_pos + radius, btn.width, btn.height - 2 * radius);
 80015fc:	88b8      	ldrh	r0, [r7, #4]
 80015fe:	88fa      	ldrh	r2, [r7, #6]
 8001600:	887b      	ldrh	r3, [r7, #2]
 8001602:	4413      	add	r3, r2
 8001604:	b299      	uxth	r1, r3
 8001606:	893c      	ldrh	r4, [r7, #8]
 8001608:	897a      	ldrh	r2, [r7, #10]
 800160a:	887b      	ldrh	r3, [r7, #2]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	b29b      	uxth	r3, r3
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	b29b      	uxth	r3, r3
 8001614:	4622      	mov	r2, r4
 8001616:	f002 fdf5 	bl	8004204 <BSP_LCD_FillRect>

    // Add the text
	BSP_LCD_DisplayStringAt(get_btntext_pos(btn.text, btn.x_pos, btn.width, BSP_LCD_GetFont()->Width), get_btntext_pos(btn.text, btn.y_pos, btn.height, BSP_LCD_GetFont()->Height), (uint8_t *)btn.text, LEFT_MODE);
 800161a:	68fc      	ldr	r4, [r7, #12]
 800161c:	88bd      	ldrh	r5, [r7, #4]
 800161e:	893e      	ldrh	r6, [r7, #8]
 8001620:	f002 faa2 	bl	8003b68 <BSP_LCD_GetFont>
 8001624:	4603      	mov	r3, r0
 8001626:	889b      	ldrh	r3, [r3, #4]
 8001628:	4632      	mov	r2, r6
 800162a:	4629      	mov	r1, r5
 800162c:	4620      	mov	r0, r4
 800162e:	f7ff fe80 	bl	8001332 <get_btntext_pos>
 8001632:	4603      	mov	r3, r0
 8001634:	4698      	mov	r8, r3
 8001636:	68fc      	ldr	r4, [r7, #12]
 8001638:	88fd      	ldrh	r5, [r7, #6]
 800163a:	897e      	ldrh	r6, [r7, #10]
 800163c:	f002 fa94 	bl	8003b68 <BSP_LCD_GetFont>
 8001640:	4603      	mov	r3, r0
 8001642:	88db      	ldrh	r3, [r3, #6]
 8001644:	4632      	mov	r2, r6
 8001646:	4629      	mov	r1, r5
 8001648:	4620      	mov	r0, r4
 800164a:	f7ff fe72 	bl	8001332 <get_btntext_pos>
 800164e:	4603      	mov	r3, r0
 8001650:	4619      	mov	r1, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	2303      	movs	r3, #3
 8001656:	4640      	mov	r0, r8
 8001658:	f002 faf0 	bl	8003c3c <BSP_LCD_DisplayStringAt>
	//BSP_LCD_DisplayStringAt(btn.x_pos + BTN_WIDTH/2 - get_string_width(text)/2, btn.y_pos + BTN_HEIGHT/2 - BSP_LCD_GetFont()->Height/2, (uint8_t *)text, LEFT_MODE);
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001668 <display_welcome>:

void display_welcome(Button btn_register, Button btn_login)
{
 8001668:	b082      	sub	sp, #8
 800166a:	b590      	push	{r4, r7, lr}
 800166c:	b085      	sub	sp, #20
 800166e:	af00      	add	r7, sp, #0
 8001670:	1d3c      	adds	r4, r7, #4
 8001672:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
	BSP_LCD_Clear(LCD_COLOR_WHITE);										// Clear the LCD and set background to white
 8001678:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800167c:	f002 fa80 	bl	8003b80 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font20);											// Set the font to be used
 8001680:	4812      	ldr	r0, [pc, #72]	; (80016cc <display_welcome+0x64>)
 8001682:	f002 fa61 	bl	8003b48 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);								// Set the text colour to black
 8001686:	2000      	movs	r0, #0
 8001688:	f002 fa4e 	bl	8003b28 <BSP_LCD_SetTextColor>
	//BSP_LCD_DisplayStringAt(191, 20, (uint8_t*)"WELCOME", LEFT_MODE);	// Display welcome statement
	BSP_LCD_DisplayStringAt(get_text_pos("WELCOME"), TITLE_Y_POS, (uint8_t*)"WELCOME", LEFT_MODE);	// Display welcome statement
 800168c:	4810      	ldr	r0, [pc, #64]	; (80016d0 <display_welcome+0x68>)
 800168e:	f7ff fe2b 	bl	80012e8 <get_text_pos>
 8001692:	4603      	mov	r3, r0
 8001694:	4618      	mov	r0, r3
 8001696:	2303      	movs	r3, #3
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <display_welcome+0x68>)
 800169a:	2114      	movs	r1, #20
 800169c:	f002 face 	bl	8003c3c <BSP_LCD_DisplayStringAt>


	BSP_LCD_SetFont(&Font16);											// Set the font to be used for buttons
 80016a0:	480c      	ldr	r0, [pc, #48]	; (80016d4 <display_welcome+0x6c>)
 80016a2:	f002 fa51 	bl	8003b48 <BSP_LCD_SetFont>

	//draw_button_bev(BTN_REGISTER_X_POS, BTN_REGISTER_Y_POS, BTN_WIDTH, BTN_HEIGHT, "Register");
	//draw_button_bev(BTN_LOGIN_X_POS, BTN_LOGIN_Y_POS, BTN_WIDTH, BTN_HEIGHT, "Login");
	draw_button_bev(btn_register);
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016ac:	f7ff fe75 	bl	800139a <draw_button_bev>
	draw_button_bev(btn_login);
 80016b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016b8:	f7ff fe6f 	bl	800139a <draw_button_bev>


}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80016c6:	b002      	add	sp, #8
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	200000a0 	.word	0x200000a0
 80016d0:	08016760 	.word	0x08016760
 80016d4:	20000098 	.word	0x20000098

080016d8 <display_keypad>:

void display_keypad(Button key_display)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08e      	sub	sp, #56	; 0x38
 80016dc:	af00      	add	r7, sp, #0
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//draw_button(KEY_DISPLAY_X_POS, KEY_DISPLAY_Y_POS, KEY_DISPLAY_WIDTH, KEY_DISPLAY_HEIGHT, 5, "");
	draw_button(key_display, 5);
 80016e4:	2305      	movs	r3, #5
 80016e6:	1d3a      	adds	r2, r7, #4
 80016e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ea:	f7ff ff28 	bl	800153e <draw_button>

	//uint16_t y_pos = KEY_BTN_Y_POS;
	uint16_t y_pos = key_display.y_pos;
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	86fb      	strh	r3, [r7, #54]	; 0x36
	char btn_number = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	for (int row = 1; row <= 3; row++) {
 80016f8:	2301      	movs	r3, #1
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
 80016fc:	e029      	b.n	8001752 <display_keypad+0x7a>
		//uint16_t x_pos = KEY_BTN_X_POS;
		uint16_t x_pos = key_display.x_pos;
 80016fe:	88bb      	ldrh	r3, [r7, #4]
 8001700:	85fb      	strh	r3, [r7, #46]	; 0x2e
		for (int column = 1; column <= 3; column++) {
 8001702:	2301      	movs	r3, #1
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
 8001706:	e01b      	b.n	8001740 <display_keypad+0x68>
			Button key = {x_pos, y_pos, 20, 20, ++btn_number};
 8001708:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800170a:	823b      	strh	r3, [r7, #16]
 800170c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800170e:	827b      	strh	r3, [r7, #18]
 8001710:	2314      	movs	r3, #20
 8001712:	82bb      	strh	r3, [r7, #20]
 8001714:	2314      	movs	r3, #20
 8001716:	82fb      	strh	r3, [r7, #22]
 8001718:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800171c:	3301      	adds	r3, #1
 800171e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001722:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001726:	61bb      	str	r3, [r7, #24]
			//draw_button(x_pos, y_pos, KEY_BTN_SIZE, KEY_BTN_SIZE, 2, ++btn_number);
			draw_button(key, 2);
 8001728:	2302      	movs	r3, #2
 800172a:	f107 0210 	add.w	r2, r7, #16
 800172e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001730:	f7ff ff05 	bl	800153e <draw_button>
			x_pos += 30;
 8001734:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001736:	331e      	adds	r3, #30
 8001738:	85fb      	strh	r3, [r7, #46]	; 0x2e
		for (int column = 1; column <= 3; column++) {
 800173a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173c:	3301      	adds	r3, #1
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001742:	2b03      	cmp	r3, #3
 8001744:	dde0      	ble.n	8001708 <display_keypad+0x30>
		}
		y_pos += 30;
 8001746:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001748:	331e      	adds	r3, #30
 800174a:	86fb      	strh	r3, [r7, #54]	; 0x36
	for (int row = 1; row <= 3; row++) {
 800174c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800174e:	3301      	adds	r3, #1
 8001750:	633b      	str	r3, [r7, #48]	; 0x30
 8001752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001754:	2b03      	cmp	r3, #3
 8001756:	ddd2      	ble.n	80016fe <display_keypad+0x26>
	}
	Button key = {230, 210, 20, 20, '0'};
 8001758:	4a07      	ldr	r2, [pc, #28]	; (8001778 <display_keypad+0xa0>)
 800175a:	f107 031c 	add.w	r3, r7, #28
 800175e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001760:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	draw_button(key, 2);
 8001764:	2302      	movs	r3, #2
 8001766:	f107 021c 	add.w	r2, r7, #28
 800176a:	ca07      	ldmia	r2, {r0, r1, r2}
 800176c:	f7ff fee7 	bl	800153e <draw_button>
}
 8001770:	bf00      	nop
 8001772:	3738      	adds	r7, #56	; 0x38
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	08016768 	.word	0x08016768

0800177c <get_next_user>:

/*
 * TODO: Move to SDTask
 */
uint16_t get_next_user()
{
 800177c:	b580      	push	{r7, lr}
 800177e:	f5ad 7d4e 	sub.w	sp, sp, #824	; 0x338
 8001782:	af00      	add	r7, sp, #0
	uint16_t line_count = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	f8a7 3336 	strh.w	r3, [r7, #822]	; 0x336
	char rtext[256]; 					// File read buffer
	FIL MyFile; 						// File object
	FRESULT res; 						// FatFs function common result code
	// Open the text file object for reading
	if ((res = f_open(&MyFile, "storage_file.txt", FA_READ)) != FR_OK)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2201      	movs	r2, #1
 800178e:	4917      	ldr	r1, [pc, #92]	; (80017ec <get_next_user+0x70>)
 8001790:	4618      	mov	r0, r3
 8001792:	f00c fd4b 	bl	800e22c <f_open>
 8001796:	4603      	mov	r3, r0
 8001798:	f887 3335 	strb.w	r3, [r7, #821]	; 0x335
 800179c:	f897 3335 	ldrb.w	r3, [r7, #821]	; 0x335
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00c      	beq.n	80017be <get_next_user+0x42>
		printf("ERROR: %s file Open for read Error: %d\r\n", "storage_file.txt", res);
 80017a4:	f897 3335 	ldrb.w	r3, [r7, #821]	; 0x335
 80017a8:	461a      	mov	r2, r3
 80017aa:	4910      	ldr	r1, [pc, #64]	; (80017ec <get_next_user+0x70>)
 80017ac:	4810      	ldr	r0, [pc, #64]	; (80017f0 <get_next_user+0x74>)
 80017ae:	f012 fe39 	bl	8014424 <iprintf>
	// Read the file line by line
	while (f_gets(rtext, sizeof(rtext), &MyFile) != NULL)
 80017b2:	e004      	b.n	80017be <get_next_user+0x42>
		line_count++;
 80017b4:	f8b7 3336 	ldrh.w	r3, [r7, #822]	; 0x336
 80017b8:	3301      	adds	r3, #1
 80017ba:	f8a7 3336 	strh.w	r3, [r7, #822]	; 0x336
	while (f_gets(rtext, sizeof(rtext), &MyFile) != NULL)
 80017be:	1d3a      	adds	r2, r7, #4
 80017c0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80017c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c8:	4618      	mov	r0, r3
 80017ca:	f00d fe67 	bl	800f49c <f_gets>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1ef      	bne.n	80017b4 <get_next_user+0x38>
	// Close the file
	f_close(&MyFile);
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4618      	mov	r0, r3
 80017d8:	f00d fb82 	bl	800eee0 <f_close>
	return line_count;
 80017dc:	f8b7 3336 	ldrh.w	r3, [r7, #822]	; 0x336
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	f507 774e 	add.w	r7, r7, #824	; 0x338
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	08016790 	.word	0x08016790
 80017f0:	080167a4 	.word	0x080167a4

080017f4 <display_registration>:

void display_registration(bool hasTakenPhoto, Button btn_photo, Button btn_cancel, Button key_display)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4604      	mov	r4, r0
 80017fc:	4638      	mov	r0, r7
 80017fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001802:	4623      	mov	r3, r4
 8001804:	73fb      	strb	r3, [r7, #15]
	BSP_LCD_Clear(LCD_COLOR_WHITE);										// Clear the LCD and set background to white
 8001806:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800180a:	f002 f9b9 	bl	8003b80 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font20);											// Set the font to be used
 800180e:	4821      	ldr	r0, [pc, #132]	; (8001894 <display_registration+0xa0>)
 8001810:	f002 f99a 	bl	8003b48 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);								// Set the text colour to black
 8001814:	2000      	movs	r0, #0
 8001816:	f002 f987 	bl	8003b28 <BSP_LCD_SetTextColor>
	//BSP_LCD_DisplayStringAt(184, 20, (uint8_t*)"REGISTER", LEFT_MODE);			// Display register statement
	BSP_LCD_DisplayStringAt(get_text_pos("REGISTER"), TITLE_Y_POS, (uint8_t*)"REGISTER", LEFT_MODE);	// Display welcome statement
 800181a:	481f      	ldr	r0, [pc, #124]	; (8001898 <display_registration+0xa4>)
 800181c:	f7ff fd64 	bl	80012e8 <get_text_pos>
 8001820:	4603      	mov	r3, r0
 8001822:	4618      	mov	r0, r3
 8001824:	2303      	movs	r3, #3
 8001826:	4a1c      	ldr	r2, [pc, #112]	; (8001898 <display_registration+0xa4>)
 8001828:	2114      	movs	r1, #20
 800182a:	f002 fa07 	bl	8003c3c <BSP_LCD_DisplayStringAt>


	BSP_LCD_SetFont(&Font16);											// Set the font to be used for buttons
 800182e:	481b      	ldr	r0, [pc, #108]	; (800189c <display_registration+0xa8>)
 8001830:	f002 f98a 	bl	8003b48 <BSP_LCD_SetFont>

	// TODO: Read SD to get user ID
	char id[4];
	sprintf(id, "%03d", get_next_user());
 8001834:	f7ff ffa2 	bl	800177c <get_next_user>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4917      	ldr	r1, [pc, #92]	; (80018a0 <display_registration+0xac>)
 8001842:	4618      	mov	r0, r3
 8001844:	f012 fe8c 	bl	8014560 <siprintf>
	//BSP_LCD_DisplayStringAt(240 - get_string_width(id)/2, 50, (uint8_t*)id, LEFT_MODE);			// Display User ID
	BSP_LCD_DisplayStringAt(get_text_pos(id), PROMPT_Y_POS, (uint8_t*)id, LEFT_MODE);			// Display User ID
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fd4b 	bl	80012e8 <get_text_pos>
 8001852:	4603      	mov	r3, r0
 8001854:	4618      	mov	r0, r3
 8001856:	f107 0214 	add.w	r2, r7, #20
 800185a:	2303      	movs	r3, #3
 800185c:	2132      	movs	r1, #50	; 0x32
 800185e:	f002 f9ed 	bl	8003c3c <BSP_LCD_DisplayStringAt>

	//draw_button(BTN_CANCEL_X_POS, BTN_CANCEL_Y_POS, BTN_WIDTH, BTN_HEIGHT, 5, "Cancel");
	draw_button(btn_cancel, 5);
 8001862:	2305      	movs	r3, #5
 8001864:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001868:	ca07      	ldmia	r2, {r0, r1, r2}
 800186a:	f7ff fe68 	bl	800153e <draw_button>


	if (hasTakenPhoto)
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <display_registration+0x8e>
		display_keypad(key_display);
 8001874:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001878:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800187c:	f7ff ff2c 	bl	80016d8 <display_keypad>
	else
		//draw_button(BTN_PHOTO_X_POS, BTN_PHOTO_Y_POS, BTN_WIDTH, BTN_HEIGHT, 5, "Photo");
		draw_button(btn_photo, 5);

}
 8001880:	e004      	b.n	800188c <display_registration+0x98>
		draw_button(btn_photo, 5);
 8001882:	2305      	movs	r3, #5
 8001884:	463a      	mov	r2, r7
 8001886:	ca07      	ldmia	r2, {r0, r1, r2}
 8001888:	f7ff fe59 	bl	800153e <draw_button>
}
 800188c:	bf00      	nop
 800188e:	371c      	adds	r7, #28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd90      	pop	{r4, r7, pc}
 8001894:	200000a0 	.word	0x200000a0
 8001898:	080167d0 	.word	0x080167d0
 800189c:	20000098 	.word	0x20000098
 80018a0:	080167dc 	.word	0x080167dc

080018a4 <display_login>:

void display_login(const char* text, Button btn_cancel, Button key_display)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	4638      	mov	r0, r7
 80018ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	BSP_LCD_Clear(LCD_COLOR_WHITE);										// Clear the LCD and set background to white
 80018b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018b6:	f002 f963 	bl	8003b80 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font20);											// Set the font to be used
 80018ba:	4816      	ldr	r0, [pc, #88]	; (8001914 <display_login+0x70>)
 80018bc:	f002 f944 	bl	8003b48 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);								// Set the text colour to black
 80018c0:	2000      	movs	r0, #0
 80018c2:	f002 f931 	bl	8003b28 <BSP_LCD_SetTextColor>
	//BSP_LCD_DisplayStringAt(205, 20, (uint8_t*)"LOGIN", LEFT_MODE);		// Display login statement
	BSP_LCD_DisplayStringAt(get_text_pos("LOGIN"), TITLE_Y_POS, (uint8_t*)"LOGIN", LEFT_MODE);		// Display login statement
 80018c6:	4814      	ldr	r0, [pc, #80]	; (8001918 <display_login+0x74>)
 80018c8:	f7ff fd0e 	bl	80012e8 <get_text_pos>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4618      	mov	r0, r3
 80018d0:	2303      	movs	r3, #3
 80018d2:	4a11      	ldr	r2, [pc, #68]	; (8001918 <display_login+0x74>)
 80018d4:	2114      	movs	r1, #20
 80018d6:	f002 f9b1 	bl	8003c3c <BSP_LCD_DisplayStringAt>


	BSP_LCD_SetFont(&Font16);											// Set the font to be used for buttons
 80018da:	4810      	ldr	r0, [pc, #64]	; (800191c <display_login+0x78>)
 80018dc:	f002 f934 	bl	8003b48 <BSP_LCD_SetFont>
	//BSP_LCD_DisplayStringAt(240 - get_string_width(text)/2, 50, (uint8_t*)text, LEFT_MODE);
	BSP_LCD_DisplayStringAt(get_text_pos(text), PROMPT_Y_POS, (uint8_t*)text, LEFT_MODE);
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f7ff fd01 	bl	80012e8 <get_text_pos>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4618      	mov	r0, r3
 80018ea:	2303      	movs	r3, #3
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	2132      	movs	r1, #50	; 0x32
 80018f0:	f002 f9a4 	bl	8003c3c <BSP_LCD_DisplayStringAt>
	display_keypad(key_display);
 80018f4:	f107 0318 	add.w	r3, r7, #24
 80018f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018fc:	f7ff feec 	bl	80016d8 <display_keypad>
	//draw_button(BTN_CANCEL_X_POS, BTN_CANCEL_Y_POS, BTN_WIDTH, BTN_HEIGHT, 5, "Cancel");
	draw_button(btn_cancel, 5);
 8001900:	2305      	movs	r3, #5
 8001902:	463a      	mov	r2, r7
 8001904:	ca07      	ldmia	r2, {r0, r1, r2}
 8001906:	f7ff fe1a 	bl	800153e <draw_button>
}
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200000a0 	.word	0x200000a0
 8001918:	080167e4 	.word	0x080167e4
 800191c:	20000098 	.word	0x20000098

08001920 <StartLCDTask>:

void StartLCDTask(void const * argument)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b08d      	sub	sp, #52	; 0x34
 8001924:	af06      	add	r7, sp, #24
 8001926:	6078      	str	r0, [r7, #4]
	BSP_LCD_Init();							// Initialize the LCD
 8001928:	f002 f8ac 	bl	8003a84 <BSP_LCD_Init>
	BSP_LCD_DisplayOn();					// Enable the LCD
 800192c:	f002 fd26 	bl	800437c <BSP_LCD_DisplayOn>
	osEvent event;							// Event structure to receive message from queue
	osSemaphoreWait(startSemHandle, osWaitForever);
 8001930:	4b91      	ldr	r3, [pc, #580]	; (8001b78 <StartLCDTask+0x258>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f04f 31ff 	mov.w	r1, #4294967295
 8001938:	4618      	mov	r0, r3
 800193a:	f00e f9e9 	bl	800fd10 <osSemaphoreWait>
	display_welcome(btn_register, btn_login);
 800193e:	4b8f      	ldr	r3, [pc, #572]	; (8001b7c <StartLCDTask+0x25c>)
 8001940:	4a8f      	ldr	r2, [pc, #572]	; (8001b80 <StartLCDTask+0x260>)
 8001942:	466c      	mov	r4, sp
 8001944:	1d19      	adds	r1, r3, #4
 8001946:	c903      	ldmia	r1, {r0, r1}
 8001948:	e884 0003 	stmia.w	r4, {r0, r1}
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001950:	f7ff fe8a 	bl	8001668 <display_welcome>
	while(1) {
		event = osMessageGet(renderQueueHandle, osWaitForever);
 8001954:	4b8b      	ldr	r3, [pc, #556]	; (8001b84 <StartLCDTask+0x264>)
 8001956:	6819      	ldr	r1, [r3, #0]
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	4618      	mov	r0, r3
 8001962:	f00e fad5 	bl	800ff10 <osMessageGet>
		if (event.status == 0x10) {
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2b10      	cmp	r3, #16
 800196a:	f040 8100 	bne.w	8001b6e <StartLCDTask+0x24e>
			if (osMutexWait(lcdMutexHandle, osWaitForever) == osOK) {
 800196e:	4b86      	ldr	r3, [pc, #536]	; (8001b88 <StartLCDTask+0x268>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f04f 31ff 	mov.w	r1, #4294967295
 8001976:	4618      	mov	r0, r3
 8001978:	f00e f914 	bl	800fba4 <osMutexWait>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	f040 80f5 	bne.w	8001b6e <StartLCDTask+0x24e>
				switch (event.value.v) {
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	2b11      	cmp	r3, #17
 8001988:	f200 80ec 	bhi.w	8001b64 <StartLCDTask+0x244>
 800198c:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <StartLCDTask+0x74>)
 800198e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001992:	bf00      	nop
 8001994:	080019dd 	.word	0x080019dd
 8001998:	080019f5 	.word	0x080019f5
 800199c:	08001a17 	.word	0x08001a17
 80019a0:	08001a39 	.word	0x08001a39
 80019a4:	08001a51 	.word	0x08001a51
 80019a8:	08001a69 	.word	0x08001a69
 80019ac:	08001a81 	.word	0x08001a81
 80019b0:	08001a99 	.word	0x08001a99
 80019b4:	08001ab1 	.word	0x08001ab1
 80019b8:	08001ac3 	.word	0x08001ac3
 80019bc:	08001ad5 	.word	0x08001ad5
 80019c0:	08001ae7 	.word	0x08001ae7
 80019c4:	08001af9 	.word	0x08001af9
 80019c8:	08001b0b 	.word	0x08001b0b
 80019cc:	08001b1d 	.word	0x08001b1d
 80019d0:	08001b2f 	.word	0x08001b2f
 80019d4:	08001b41 	.word	0x08001b41
 80019d8:	08001b53 	.word	0x08001b53
					case (FINISHED):
						display_welcome(btn_register, btn_login);
 80019dc:	4b67      	ldr	r3, [pc, #412]	; (8001b7c <StartLCDTask+0x25c>)
 80019de:	4a68      	ldr	r2, [pc, #416]	; (8001b80 <StartLCDTask+0x260>)
 80019e0:	466c      	mov	r4, sp
 80019e2:	1d19      	adds	r1, r3, #4
 80019e4:	c903      	ldmia	r1, {r0, r1}
 80019e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80019ee:	f7ff fe3b 	bl	8001668 <display_welcome>
						break;
 80019f2:	e0b7      	b.n	8001b64 <StartLCDTask+0x244>
					case (REG_ID):
						display_registration(0, btn_cancel, btn_photo, key_display);
 80019f4:	4c65      	ldr	r4, [pc, #404]	; (8001b8c <StartLCDTask+0x26c>)
 80019f6:	4a66      	ldr	r2, [pc, #408]	; (8001b90 <StartLCDTask+0x270>)
 80019f8:	ab03      	add	r3, sp, #12
 80019fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80019fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a00:	4a64      	ldr	r2, [pc, #400]	; (8001b94 <StartLCDTask+0x274>)
 8001a02:	466b      	mov	r3, sp
 8001a04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a0a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff fef0 	bl	80017f4 <display_registration>
						break;
 8001a14:	e0a6      	b.n	8001b64 <StartLCDTask+0x244>
					case (REG_PIN):
						display_registration(1, btn_cancel, btn_photo, key_display);
 8001a16:	4c5d      	ldr	r4, [pc, #372]	; (8001b8c <StartLCDTask+0x26c>)
 8001a18:	4a5d      	ldr	r2, [pc, #372]	; (8001b90 <StartLCDTask+0x270>)
 8001a1a:	ab03      	add	r3, sp, #12
 8001a1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a22:	4a5c      	ldr	r2, [pc, #368]	; (8001b94 <StartLCDTask+0x274>)
 8001a24:	466b      	mov	r3, sp
 8001a26:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a2c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001a30:	2001      	movs	r0, #1
 8001a32:	f7ff fedf 	bl	80017f4 <display_registration>
						break;
 8001a36:	e095      	b.n	8001b64 <StartLCDTask+0x244>
					case (LOG_ID):
						display_login("Enter ID:", btn_cancel, key_display);
 8001a38:	4c54      	ldr	r4, [pc, #336]	; (8001b8c <StartLCDTask+0x26c>)
 8001a3a:	4a55      	ldr	r2, [pc, #340]	; (8001b90 <StartLCDTask+0x270>)
 8001a3c:	466b      	mov	r3, sp
 8001a3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a44:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001a48:	4853      	ldr	r0, [pc, #332]	; (8001b98 <StartLCDTask+0x278>)
 8001a4a:	f7ff ff2b 	bl	80018a4 <display_login>
						break;
 8001a4e:	e089      	b.n	8001b64 <StartLCDTask+0x244>
					case (LOG_ID_ERR):
						display_login("Invalid ID", btn_cancel, key_display);
 8001a50:	4c4e      	ldr	r4, [pc, #312]	; (8001b8c <StartLCDTask+0x26c>)
 8001a52:	4a4f      	ldr	r2, [pc, #316]	; (8001b90 <StartLCDTask+0x270>)
 8001a54:	466b      	mov	r3, sp
 8001a56:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a5c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001a60:	484e      	ldr	r0, [pc, #312]	; (8001b9c <StartLCDTask+0x27c>)
 8001a62:	f7ff ff1f 	bl	80018a4 <display_login>
						break;
 8001a66:	e07d      	b.n	8001b64 <StartLCDTask+0x244>
					case (LOG_ID_OK):
						display_login("Enter PIN:", btn_cancel, key_display);
 8001a68:	4c48      	ldr	r4, [pc, #288]	; (8001b8c <StartLCDTask+0x26c>)
 8001a6a:	4a49      	ldr	r2, [pc, #292]	; (8001b90 <StartLCDTask+0x270>)
 8001a6c:	466b      	mov	r3, sp
 8001a6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a74:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001a78:	4849      	ldr	r0, [pc, #292]	; (8001ba0 <StartLCDTask+0x280>)
 8001a7a:	f7ff ff13 	bl	80018a4 <display_login>
						break;
 8001a7e:	e071      	b.n	8001b64 <StartLCDTask+0x244>
					case (LOG_AUTH_ERR):
						display_login("Access Denied", btn_cancel, key_display);
 8001a80:	4c42      	ldr	r4, [pc, #264]	; (8001b8c <StartLCDTask+0x26c>)
 8001a82:	4a43      	ldr	r2, [pc, #268]	; (8001b90 <StartLCDTask+0x270>)
 8001a84:	466b      	mov	r3, sp
 8001a86:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a8c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001a90:	4844      	ldr	r0, [pc, #272]	; (8001ba4 <StartLCDTask+0x284>)
 8001a92:	f7ff ff07 	bl	80018a4 <display_login>
						break;
 8001a96:	e065      	b.n	8001b64 <StartLCDTask+0x244>
					case (LOG_AUTH_OK):
						display_login("Access Granted", btn_cancel, key_display);
 8001a98:	4c3c      	ldr	r4, [pc, #240]	; (8001b8c <StartLCDTask+0x26c>)
 8001a9a:	4a3d      	ldr	r2, [pc, #244]	; (8001b90 <StartLCDTask+0x270>)
 8001a9c:	466b      	mov	r3, sp
 8001a9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aa0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001aa4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001aa8:	483f      	ldr	r0, [pc, #252]	; (8001ba8 <StartLCDTask+0x288>)
 8001aaa:	f7ff fefb 	bl	80018a4 <display_login>
						break;
 8001aae:	e059      	b.n	8001b64 <StartLCDTask+0x244>
					case (KEY_0):
						osMessagePut(renderQueueHandle, KEY_0, osWaitForever);
 8001ab0:	4b34      	ldr	r3, [pc, #208]	; (8001b84 <StartLCDTask+0x264>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	2108      	movs	r1, #8
 8001aba:	4618      	mov	r0, r3
 8001abc:	f00e f9e8 	bl	800fe90 <osMessagePut>
						break;
 8001ac0:	e050      	b.n	8001b64 <StartLCDTask+0x244>
					case (KEY_1):
						osMessagePut(renderQueueHandle, KEY_1, osWaitForever);
 8001ac2:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <StartLCDTask+0x264>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aca:	2109      	movs	r1, #9
 8001acc:	4618      	mov	r0, r3
 8001ace:	f00e f9df 	bl	800fe90 <osMessagePut>
						break;
 8001ad2:	e047      	b.n	8001b64 <StartLCDTask+0x244>
					case (KEY_2):
						osMessagePut(renderQueueHandle, KEY_2, osWaitForever);
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <StartLCDTask+0x264>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8001adc:	210a      	movs	r1, #10
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f00e f9d6 	bl	800fe90 <osMessagePut>
						break;
 8001ae4:	e03e      	b.n	8001b64 <StartLCDTask+0x244>
					case (KEY_3):
						osMessagePut(renderQueueHandle, KEY_3, osWaitForever);
 8001ae6:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <StartLCDTask+0x264>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f04f 32ff 	mov.w	r2, #4294967295
 8001aee:	210b      	movs	r1, #11
 8001af0:	4618      	mov	r0, r3
 8001af2:	f00e f9cd 	bl	800fe90 <osMessagePut>
						break;
 8001af6:	e035      	b.n	8001b64 <StartLCDTask+0x244>
					case (KEY_4):
						osMessagePut(renderQueueHandle, KEY_4, osWaitForever);
 8001af8:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <StartLCDTask+0x264>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295
 8001b00:	210c      	movs	r1, #12
 8001b02:	4618      	mov	r0, r3
 8001b04:	f00e f9c4 	bl	800fe90 <osMessagePut>
						break;
 8001b08:	e02c      	b.n	8001b64 <StartLCDTask+0x244>
					case (KEY_5):
						osMessagePut(renderQueueHandle, KEY_5, osWaitForever);
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <StartLCDTask+0x264>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b12:	210d      	movs	r1, #13
 8001b14:	4618      	mov	r0, r3
 8001b16:	f00e f9bb 	bl	800fe90 <osMessagePut>
						break;
 8001b1a:	e023      	b.n	8001b64 <StartLCDTask+0x244>
					case (KEY_6):
						osMessagePut(renderQueueHandle, KEY_6, osWaitForever);
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <StartLCDTask+0x264>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295
 8001b24:	210e      	movs	r1, #14
 8001b26:	4618      	mov	r0, r3
 8001b28:	f00e f9b2 	bl	800fe90 <osMessagePut>
						break;
 8001b2c:	e01a      	b.n	8001b64 <StartLCDTask+0x244>
					case (KEY_7):
						osMessagePut(renderQueueHandle, KEY_7, osWaitForever);
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <StartLCDTask+0x264>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f04f 32ff 	mov.w	r2, #4294967295
 8001b36:	210f      	movs	r1, #15
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f00e f9a9 	bl	800fe90 <osMessagePut>
						break;
 8001b3e:	e011      	b.n	8001b64 <StartLCDTask+0x244>
					case (KEY_8):
						osMessagePut(renderQueueHandle, KEY_8, osWaitForever);
 8001b40:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <StartLCDTask+0x264>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295
 8001b48:	2110      	movs	r1, #16
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f00e f9a0 	bl	800fe90 <osMessagePut>
						break;
 8001b50:	e008      	b.n	8001b64 <StartLCDTask+0x244>
					case (KEY_9):
						osMessagePut(renderQueueHandle, KEY_9, osWaitForever);
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <StartLCDTask+0x264>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5a:	2111      	movs	r1, #17
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f00e f997 	bl	800fe90 <osMessagePut>
						break;
 8001b62:	bf00      	nop
				}
			osMutexRelease(lcdMutexHandle);
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <StartLCDTask+0x268>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f00e f869 	bl	800fc40 <osMutexRelease>
			}
		}
		osDelay(100);
 8001b6e:	2064      	movs	r0, #100	; 0x64
 8001b70:	f00d feec 	bl	800f94c <osDelay>
		event = osMessageGet(renderQueueHandle, osWaitForever);
 8001b74:	e6ee      	b.n	8001954 <StartLCDTask+0x34>
 8001b76:	bf00      	nop
 8001b78:	20000d0c 	.word	0x20000d0c
 8001b7c:	20000028 	.word	0x20000028
 8001b80:	2000001c 	.word	0x2000001c
 8001b84:	20000cf4 	.word	0x20000cf4
 8001b88:	20000d04 	.word	0x20000d04
 8001b8c:	20000010 	.word	0x20000010
 8001b90:	20000034 	.word	0x20000034
 8001b94:	20000004 	.word	0x20000004
 8001b98:	080167ec 	.word	0x080167ec
 8001b9c:	080167f8 	.word	0x080167f8
 8001ba0:	08016804 	.word	0x08016804
 8001ba4:	08016810 	.word	0x08016810
 8001ba8:	08016820 	.word	0x08016820

08001bac <MessageTimerCallback>:
 */

#include "Ass-03.h"

void MessageTimerCallback(void const * argument)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	osMessagePut(stateQueueHandle, FINISHED, osWaitForever);
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <MessageTimerCallback+0x20>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f00e f966 	bl	800fe90 <osMessagePut>
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000cf0 	.word	0x20000cf0

08001bd0 <initialise>:
char rtext[256]; 					// File read buffer

uint32_t current_user_id = 0;

void initialise()
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) != 0)							// Card detection status
 8001bd4:	2108      	movs	r1, #8
 8001bd6:	4812      	ldr	r0, [pc, #72]	; (8001c20 <initialise+0x50>)
 8001bd8:	f005 fd80 	bl	80076dc <HAL_GPIO_ReadPin>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <initialise+0x18>
		printf("ERROR: No card detect\n");
 8001be2:	4810      	ldr	r0, [pc, #64]	; (8001c24 <initialise+0x54>)
 8001be4:	f012 fca4 	bl	8014530 <puts>
	if (retSD != 0)															// SD link I/O driver link status
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <initialise+0x58>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <initialise+0x26>
		printf("ERROR: Linking of SD disk I/O driver failed\n");
 8001bf0:	480e      	ldr	r0, [pc, #56]	; (8001c2c <initialise+0x5c>)
 8001bf2:	f012 fc9d 	bl	8014530 <puts>
	if ((res = f_mount(&SDFatFs, (TCHAR const*)SDPath, 1)) != FR_OK)		// Register the file system object to the module
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	490d      	ldr	r1, [pc, #52]	; (8001c30 <initialise+0x60>)
 8001bfa:	480e      	ldr	r0, [pc, #56]	; (8001c34 <initialise+0x64>)
 8001bfc:	f00c fab2 	bl	800e164 <f_mount>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <initialise+0x68>)
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <initialise+0x68>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <initialise+0x4c>
		printf("ERROR: Could not mount SD card (%d).\n", res);
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <initialise+0x68>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4619      	mov	r1, r3
 8001c16:	4809      	ldr	r0, [pc, #36]	; (8001c3c <initialise+0x6c>)
 8001c18:	f012 fc04 	bl	8014424 <iprintf>
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40020c00 	.word	0x40020c00
 8001c24:	08016844 	.word	0x08016844
 8001c28:	20001c90 	.word	0x20001c90
 8001c2c:	0801685c 	.word	0x0801685c
 8001c30:	20001c94 	.word	0x20001c94
 8001c34:	20000548 	.word	0x20000548
 8001c38:	20000ac8 	.word	0x20000ac8
 8001c3c:	08016888 	.word	0x08016888

08001c40 <read_user>:
	f_close(&MyFile);

}

void read_user()
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
	if ((res = f_stat(id, &fno)) == FR_OK) {
 8001c44:	491c      	ldr	r1, [pc, #112]	; (8001cb8 <read_user+0x78>)
 8001c46:	481d      	ldr	r0, [pc, #116]	; (8001cbc <read_user+0x7c>)
 8001c48:	f00d fbcc 	bl	800f3e4 <f_stat>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <read_user+0x80>)
 8001c52:	701a      	strb	r2, [r3, #0]
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <read_user+0x80>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d108      	bne.n	8001c6e <read_user+0x2e>
		osMessagePut(stateQueueHandle, LOG_ID_OK, osWaitForever);
 8001c5c:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <read_user+0x84>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f04f 32ff 	mov.w	r2, #4294967295
 8001c64:	2105      	movs	r1, #5
 8001c66:	4618      	mov	r0, r3
 8001c68:	f00e f912 	bl	800fe90 <osMessagePut>
	}
	else {
		printf("Error checking file for user: %d\r\n", res);
		osMessagePut(stateQueueHandle, LOG_ID_ERR, osWaitForever);
	}
}
 8001c6c:	e022      	b.n	8001cb4 <read_user+0x74>
	else if ((res = f_stat(id, &fno)) == FR_NO_FILE) {
 8001c6e:	4912      	ldr	r1, [pc, #72]	; (8001cb8 <read_user+0x78>)
 8001c70:	4812      	ldr	r0, [pc, #72]	; (8001cbc <read_user+0x7c>)
 8001c72:	f00d fbb7 	bl	800f3e4 <f_stat>
 8001c76:	4603      	mov	r3, r0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <read_user+0x80>)
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <read_user+0x80>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d108      	bne.n	8001c98 <read_user+0x58>
		osMessagePut(stateQueueHandle, LOG_ID_ERR, osWaitForever);
 8001c86:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <read_user+0x84>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8e:	2104      	movs	r1, #4
 8001c90:	4618      	mov	r0, r3
 8001c92:	f00e f8fd 	bl	800fe90 <osMessagePut>
}
 8001c96:	e00d      	b.n	8001cb4 <read_user+0x74>
		printf("Error checking file for user: %d\r\n", res);
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <read_user+0x80>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	480a      	ldr	r0, [pc, #40]	; (8001cc8 <read_user+0x88>)
 8001ca0:	f012 fbc0 	bl	8014424 <iprintf>
		osMessagePut(stateQueueHandle, LOG_ID_ERR, osWaitForever);
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <read_user+0x84>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cac:	2104      	movs	r1, #4
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f00e f8ee 	bl	800fe90 <osMessagePut>
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200009b0 	.word	0x200009b0
 8001cbc:	2000053c 	.word	0x2000053c
 8001cc0:	20000ac8 	.word	0x20000ac8
 8001cc4:	20000cf0 	.word	0x20000cf0
 8001cc8:	080168fc 	.word	0x080168fc

08001ccc <read_user_pin>:

void read_user_pin()
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
	char info[5];
	if((res = f_open(&MyFile, id, FA_READ)) != FR_OK)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	491a      	ldr	r1, [pc, #104]	; (8001d40 <read_user_pin+0x74>)
 8001cd6:	481b      	ldr	r0, [pc, #108]	; (8001d44 <read_user_pin+0x78>)
 8001cd8:	f00c faa8 	bl	800e22c <f_open>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <read_user_pin+0x7c>)
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <read_user_pin+0x7c>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d007      	beq.n	8001cfc <read_user_pin+0x30>
		printf("ERROR: %s file Open for read Error: %d\r\n", file, res);
 8001cec:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <read_user_pin+0x80>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a15      	ldr	r2, [pc, #84]	; (8001d48 <read_user_pin+0x7c>)
 8001cf2:	7812      	ldrb	r2, [r2, #0]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4816      	ldr	r0, [pc, #88]	; (8001d50 <read_user_pin+0x84>)
 8001cf8:	f012 fb94 	bl	8014424 <iprintf>
	res = f_read(&MyFile, info, 4, (void *)&bytesread);
 8001cfc:	4639      	mov	r1, r7
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <read_user_pin+0x88>)
 8001d00:	2204      	movs	r2, #4
 8001d02:	4810      	ldr	r0, [pc, #64]	; (8001d44 <read_user_pin+0x78>)
 8001d04:	f00c fd51 	bl	800e7aa <f_read>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <read_user_pin+0x7c>)
 8001d0e:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK) {
 8001d10:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <read_user_pin+0x7c>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d006      	beq.n	8001d26 <read_user_pin+0x5a>
		printf("Error reading file: %d\r\n", res);
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <read_user_pin+0x7c>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	480e      	ldr	r0, [pc, #56]	; (8001d58 <read_user_pin+0x8c>)
 8001d20:	f012 fb80 	bl	8014424 <iprintf>
		osMessagePut(stateQueueHandle, LOG_AUTH_ERR, osWaitForever);
	}
	else {
		osMessagePut(stateQueueHandle, LOG_AUTH_OK, osWaitForever);
	}
}
 8001d24:	e007      	b.n	8001d36 <read_user_pin+0x6a>
		osMessagePut(stateQueueHandle, LOG_AUTH_ERR, osWaitForever);
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <read_user_pin+0x90>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2e:	2106      	movs	r1, #6
 8001d30:	4618      	mov	r0, r3
 8001d32:	f00e f8ad 	bl	800fe90 <osMessagePut>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000053c 	.word	0x2000053c
 8001d44:	20000780 	.word	0x20000780
 8001d48:	20000ac8 	.word	0x20000ac8
 8001d4c:	20000040 	.word	0x20000040
 8001d50:	080168b0 	.word	0x080168b0
 8001d54:	20000ad0 	.word	0x20000ad0
 8001d58:	08016920 	.word	0x08016920
 8001d5c:	20000cf0 	.word	0x20000cf0

08001d60 <set_user_pin>:

void set_user_pin()
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	// Open the text file object for writing
	if ((res = f_open(&MyFile, id, FA_CREATE_ALWAYS | FA_WRITE)) != FR_OK)
 8001d64:	220a      	movs	r2, #10
 8001d66:	4917      	ldr	r1, [pc, #92]	; (8001dc4 <set_user_pin+0x64>)
 8001d68:	4817      	ldr	r0, [pc, #92]	; (8001dc8 <set_user_pin+0x68>)
 8001d6a:	f00c fa5f 	bl	800e22c <f_open>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <set_user_pin+0x6c>)
 8001d74:	701a      	strb	r2, [r3, #0]
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <set_user_pin+0x6c>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d005      	beq.n	8001d8a <set_user_pin+0x2a>
		printf("ERROR: File Open for write Error: %d\r\n", res);
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <set_user_pin+0x6c>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	4619      	mov	r1, r3
 8001d84:	4812      	ldr	r0, [pc, #72]	; (8001dd0 <set_user_pin+0x70>)
 8001d86:	f012 fb4d 	bl	8014424 <iprintf>

	// Write data to the file
	res = f_write(&MyFile, pin, sizeof(pin), (void *)&byteswritten);
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <set_user_pin+0x74>)
 8001d8c:	2205      	movs	r2, #5
 8001d8e:	4912      	ldr	r1, [pc, #72]	; (8001dd8 <set_user_pin+0x78>)
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <set_user_pin+0x68>)
 8001d92:	f00c fe78 	bl	800ea86 <f_write>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <set_user_pin+0x6c>)
 8001d9c:	701a      	strb	r2, [r3, #0]
	if ((byteswritten < sizeof(pin)) || (res != FR_OK))
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <set_user_pin+0x74>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d903      	bls.n	8001dae <set_user_pin+0x4e>
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <set_user_pin+0x6c>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <set_user_pin+0x5a>
		printf("ERROR: File Write or EOF Error: %d\r\n", res);
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <set_user_pin+0x6c>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	4619      	mov	r1, r3
 8001db4:	4809      	ldr	r0, [pc, #36]	; (8001ddc <set_user_pin+0x7c>)
 8001db6:	f012 fb35 	bl	8014424 <iprintf>

	// Close the open text file
	f_close(&MyFile);
 8001dba:	4803      	ldr	r0, [pc, #12]	; (8001dc8 <set_user_pin+0x68>)
 8001dbc:	f00d f890 	bl	800eee0 <f_close>
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	2000053c 	.word	0x2000053c
 8001dc8:	20000780 	.word	0x20000780
 8001dcc:	20000ac8 	.word	0x20000ac8
 8001dd0:	0801693c 	.word	0x0801693c
 8001dd4:	20000acc 	.word	0x20000acc
 8001dd8:	20000540 	.word	0x20000540
 8001ddc:	08016964 	.word	0x08016964

08001de0 <set_next_user>:

void set_next_user()
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
	if((res = f_open(&MyFile, file, FA_READ)) != FR_OK)
 8001de6:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <set_next_user+0x94>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2201      	movs	r2, #1
 8001dec:	4619      	mov	r1, r3
 8001dee:	4822      	ldr	r0, [pc, #136]	; (8001e78 <set_next_user+0x98>)
 8001df0:	f00c fa1c 	bl	800e22c <f_open>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <set_next_user+0x9c>)
 8001dfa:	701a      	strb	r2, [r3, #0]
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <set_next_user+0x9c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d007      	beq.n	8001e14 <set_next_user+0x34>
		printf("ERROR: %s file Open for read Error: %d\r\n", file, res);
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <set_next_user+0x94>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1c      	ldr	r2, [pc, #112]	; (8001e7c <set_next_user+0x9c>)
 8001e0a:	7812      	ldrb	r2, [r2, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	481c      	ldr	r0, [pc, #112]	; (8001e80 <set_next_user+0xa0>)
 8001e10:	f012 fb08 	bl	8014424 <iprintf>

	// Navigate to the end of the file
	f_lseek(&MyFile, f_size(&MyFile) - 1);
 8001e14:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <set_next_user+0x98>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4816      	ldr	r0, [pc, #88]	; (8001e78 <set_next_user+0x98>)
 8001e1e:	f00d f88e 	bl	800ef3e <f_lseek>

	int index = 4 - 1;
 8001e22:	2303      	movs	r3, #3
 8001e24:	607b      	str	r3, [r7, #4]
	//char line[4] = {0};

	while ((res = f_read(&MyFile, rtext, 3, (void *)&bytesread)) == FR_OK) {
 8001e26:	e00d      	b.n	8001e44 <set_next_user+0x64>
		if (rtext[0] == '\n')
 8001e28:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <set_next_user+0xa4>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b0a      	cmp	r3, #10
 8001e2e:	d018      	beq.n	8001e62 <set_next_user+0x82>
			break;
		id[index] = rtext[0];
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <set_next_user+0xa4>)
 8001e32:	7819      	ldrb	r1, [r3, #0]
 8001e34:	4a14      	ldr	r2, [pc, #80]	; (8001e88 <set_next_user+0xa8>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	460a      	mov	r2, r1
 8001e3c:	701a      	strb	r2, [r3, #0]
		index--;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	607b      	str	r3, [r7, #4]
	while ((res = f_read(&MyFile, rtext, 3, (void *)&bytesread)) == FR_OK) {
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <set_next_user+0xac>)
 8001e46:	2203      	movs	r2, #3
 8001e48:	490e      	ldr	r1, [pc, #56]	; (8001e84 <set_next_user+0xa4>)
 8001e4a:	480b      	ldr	r0, [pc, #44]	; (8001e78 <set_next_user+0x98>)
 8001e4c:	f00c fcad 	bl	800e7aa <f_read>
 8001e50:	4603      	mov	r3, r0
 8001e52:	461a      	mov	r2, r3
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <set_next_user+0x9c>)
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <set_next_user+0x9c>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0e3      	beq.n	8001e28 <set_next_user+0x48>
 8001e60:	e000      	b.n	8001e64 <set_next_user+0x84>
			break;
 8001e62:	bf00      	nop
	}
	f_close(&MyFile);
 8001e64:	4804      	ldr	r0, [pc, #16]	; (8001e78 <set_next_user+0x98>)
 8001e66:	f00d f83b 	bl	800eee0 <f_close>
	//id = line;
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000040 	.word	0x20000040
 8001e78:	20000780 	.word	0x20000780
 8001e7c:	20000ac8 	.word	0x20000ac8
 8001e80:	080168b0 	.word	0x080168b0
 8001e84:	20000ad4 	.word	0x20000ad4
 8001e88:	2000053c 	.word	0x2000053c
 8001e8c:	20000ad0 	.word	0x20000ad0

08001e90 <StartFileSystemTask>:
	// Read the image data from the file

}

void StartFileSystemTask(void const * argument)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	osSemaphoreWait(startSemHandle, osWaitForever);
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <StartFileSystemTask+0x70>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f00d ff35 	bl	800fd10 <osSemaphoreWait>
	initialise();
 8001ea6:	f7ff fe93 	bl	8001bd0 <initialise>
	osEvent event;												// Event structure to receive message from queue

	while(1) {
		event = osMessageGet(fileSystemQueueHandle, osWaitForever);	// Wait and get message
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <StartFileSystemTask+0x74>)
 8001eac:	6819      	ldr	r1, [r3, #0]
 8001eae:	f107 030c 	add.w	r3, r7, #12
 8001eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f00e f82a 	bl	800ff10 <osMessageGet>
		if (event.status == 0x10) {
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b10      	cmp	r3, #16
 8001ec0:	d11a      	bne.n	8001ef8 <StartFileSystemTask+0x68>
			switch (event.value.v) {
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d818      	bhi.n	8001efa <StartFileSystemTask+0x6a>
 8001ec8:	a201      	add	r2, pc, #4	; (adr r2, 8001ed0 <StartFileSystemTask+0x40>)
 8001eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ece:	bf00      	nop
 8001ed0:	08001eed 	.word	0x08001eed
 8001ed4:	08001ef3 	.word	0x08001ef3
 8001ed8:	08001ee1 	.word	0x08001ee1
 8001edc:	08001ee7 	.word	0x08001ee7
			case (CHECK_REGISTER_ID):		// Get latest ID
				set_next_user();
 8001ee0:	f7ff ff7e 	bl	8001de0 <set_next_user>
				break;
 8001ee4:	e009      	b.n	8001efa <StartFileSystemTask+0x6a>
			case (SET_REGISTER_PIN):		// Write file for PIN
				set_user_pin();
 8001ee6:	f7ff ff3b 	bl	8001d60 <set_user_pin>
				break;
 8001eea:	e006      	b.n	8001efa <StartFileSystemTask+0x6a>
			case (CHECK_LOGIN_ID):			// Read ID
				read_user();
 8001eec:	f7ff fea8 	bl	8001c40 <read_user>
				break;
 8001ef0:	e003      	b.n	8001efa <StartFileSystemTask+0x6a>
			case (CHECK_LOGIN_PIN):			// Read PIN
				read_user_pin();
 8001ef2:	f7ff feeb 	bl	8001ccc <read_user_pin>
				break;
 8001ef6:	e000      	b.n	8001efa <StartFileSystemTask+0x6a>
			}
		}
 8001ef8:	bf00      	nop
		osThreadYield();
 8001efa:	f00d fd15 	bl	800f928 <osThreadYield>
		event = osMessageGet(fileSystemQueueHandle, osWaitForever);	// Wait and get message
 8001efe:	e7d4      	b.n	8001eaa <StartFileSystemTask+0x1a>
 8001f00:	20000d0c 	.word	0x20000d0c
 8001f04:	20000cfc 	.word	0x20000cfc

08001f08 <is_btn_touched>:
extern Button btn_register;
extern Button btn_login;
extern Button key_display;

bool is_btn_touched(uint16_t corr_x_pos, uint16_t corr_y_pos, Button btn)
{
 8001f08:	b082      	sub	sp, #8
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	f107 0c10 	add.w	ip, r7, #16
 8001f14:	e88c 000c 	stmia.w	ip, {r2, r3}
 8001f18:	4603      	mov	r3, r0
 8001f1a:	80fb      	strh	r3, [r7, #6]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	80bb      	strh	r3, [r7, #4]
	return (corr_x_pos >= btn.x_pos && corr_x_pos <= btn.x_pos + btn.width &&
 8001f20:	8a3b      	ldrh	r3, [r7, #16]
			corr_y_pos >= btn.y_pos && corr_y_pos <= btn.y_pos + btn.height);
 8001f22:	88fa      	ldrh	r2, [r7, #6]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d313      	bcc.n	8001f50 <is_btn_touched+0x48>
	return (corr_x_pos >= btn.x_pos && corr_x_pos <= btn.x_pos + btn.width &&
 8001f28:	88fa      	ldrh	r2, [r7, #6]
 8001f2a:	8a3b      	ldrh	r3, [r7, #16]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	8abb      	ldrh	r3, [r7, #20]
 8001f30:	440b      	add	r3, r1
 8001f32:	429a      	cmp	r2, r3
 8001f34:	dc0c      	bgt.n	8001f50 <is_btn_touched+0x48>
			corr_y_pos >= btn.y_pos && corr_y_pos <= btn.y_pos + btn.height);
 8001f36:	8a7b      	ldrh	r3, [r7, #18]
	return (corr_x_pos >= btn.x_pos && corr_x_pos <= btn.x_pos + btn.width &&
 8001f38:	88ba      	ldrh	r2, [r7, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d308      	bcc.n	8001f50 <is_btn_touched+0x48>
			corr_y_pos >= btn.y_pos && corr_y_pos <= btn.y_pos + btn.height);
 8001f3e:	88ba      	ldrh	r2, [r7, #4]
 8001f40:	8a7b      	ldrh	r3, [r7, #18]
 8001f42:	4619      	mov	r1, r3
 8001f44:	8afb      	ldrh	r3, [r7, #22]
 8001f46:	440b      	add	r3, r1
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	dc01      	bgt.n	8001f50 <is_btn_touched+0x48>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <is_btn_touched+0x4a>
 8001f50:	2300      	movs	r3, #0
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	b2db      	uxtb	r3, r3
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	b002      	add	sp, #8
 8001f64:	4770      	bx	lr
	...

08001f68 <touch_keypad>:
	}
}
*/

void touch_keypad(uint16_t x, uint16_t y)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	460a      	mov	r2, r1
 8001f72:	80fb      	strh	r3, [r7, #6]
 8001f74:	4613      	mov	r3, r2
 8001f76:	80bb      	strh	r3, [r7, #4]
	switch (x) {
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8001f7e:	f300 809e 	bgt.w	80020be <touch_keypad+0x156>
 8001f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f86:	da6b      	bge.n	8002060 <touch_keypad+0xf8>
 8001f88:	2bdc      	cmp	r3, #220	; 0xdc
 8001f8a:	dc02      	bgt.n	8001f92 <touch_keypad+0x2a>
 8001f8c:	2bc8      	cmp	r3, #200	; 0xc8
 8001f8e:	da05      	bge.n	8001f9c <touch_keypad+0x34>
					osMessagePut(stateQueueHandle, KEY_9, osWaitForever);
					break;
			}
			break;
	}
}
 8001f90:	e095      	b.n	80020be <touch_keypad+0x156>
 8001f92:	3be6      	subs	r3, #230	; 0xe6
	switch (x) {
 8001f94:	2b14      	cmp	r3, #20
 8001f96:	f200 8092 	bhi.w	80020be <touch_keypad+0x156>
 8001f9a:	e02a      	b.n	8001ff2 <touch_keypad+0x8a>
			switch (y) {
 8001f9c:	88bb      	ldrh	r3, [r7, #4]
 8001f9e:	2bc8      	cmp	r3, #200	; 0xc8
 8001fa0:	f300 8088 	bgt.w	80020b4 <touch_keypad+0x14c>
 8001fa4:	2bb4      	cmp	r3, #180	; 0xb4
 8001fa6:	da1a      	bge.n	8001fde <touch_keypad+0x76>
 8001fa8:	2b8c      	cmp	r3, #140	; 0x8c
 8001faa:	dc02      	bgt.n	8001fb2 <touch_keypad+0x4a>
 8001fac:	2b78      	cmp	r3, #120	; 0x78
 8001fae:	da04      	bge.n	8001fba <touch_keypad+0x52>
			break;
 8001fb0:	e080      	b.n	80020b4 <touch_keypad+0x14c>
 8001fb2:	3b96      	subs	r3, #150	; 0x96
 8001fb4:	2b14      	cmp	r3, #20
 8001fb6:	d87d      	bhi.n	80020b4 <touch_keypad+0x14c>
 8001fb8:	e008      	b.n	8001fcc <touch_keypad+0x64>
					osMessagePut(stateQueueHandle, KEY_1, osWaitForever);
 8001fba:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <touch_keypad+0x160>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc2:	2109      	movs	r1, #9
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f00d ff63 	bl	800fe90 <osMessagePut>
					break;
 8001fca:	e011      	b.n	8001ff0 <touch_keypad+0x88>
					osMessagePut(stateQueueHandle, KEY_4, osWaitForever);
 8001fcc:	4b3e      	ldr	r3, [pc, #248]	; (80020c8 <touch_keypad+0x160>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	210c      	movs	r1, #12
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f00d ff5a 	bl	800fe90 <osMessagePut>
					break;
 8001fdc:	e008      	b.n	8001ff0 <touch_keypad+0x88>
					osMessagePut(stateQueueHandle, KEY_7, osWaitForever);
 8001fde:	4b3a      	ldr	r3, [pc, #232]	; (80020c8 <touch_keypad+0x160>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f00d ff51 	bl	800fe90 <osMessagePut>
					break;
 8001fee:	bf00      	nop
			break;
 8001ff0:	e060      	b.n	80020b4 <touch_keypad+0x14c>
			switch (y) {
 8001ff2:	88bb      	ldrh	r3, [r7, #4]
 8001ff4:	2be6      	cmp	r3, #230	; 0xe6
 8001ff6:	dc5f      	bgt.n	80020b8 <touch_keypad+0x150>
 8001ff8:	2bd2      	cmp	r3, #210	; 0xd2
 8001ffa:	da27      	bge.n	800204c <touch_keypad+0xe4>
 8001ffc:	2bc8      	cmp	r3, #200	; 0xc8
 8001ffe:	dc5b      	bgt.n	80020b8 <touch_keypad+0x150>
 8002000:	2bb4      	cmp	r3, #180	; 0xb4
 8002002:	da1a      	bge.n	800203a <touch_keypad+0xd2>
 8002004:	2b8c      	cmp	r3, #140	; 0x8c
 8002006:	dc02      	bgt.n	800200e <touch_keypad+0xa6>
 8002008:	2b78      	cmp	r3, #120	; 0x78
 800200a:	da04      	bge.n	8002016 <touch_keypad+0xae>
			break;
 800200c:	e054      	b.n	80020b8 <touch_keypad+0x150>
 800200e:	3b96      	subs	r3, #150	; 0x96
 8002010:	2b14      	cmp	r3, #20
 8002012:	d851      	bhi.n	80020b8 <touch_keypad+0x150>
 8002014:	e008      	b.n	8002028 <touch_keypad+0xc0>
					osMessagePut(stateQueueHandle, KEY_2, osWaitForever);
 8002016:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <touch_keypad+0x160>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f04f 32ff 	mov.w	r2, #4294967295
 800201e:	210a      	movs	r1, #10
 8002020:	4618      	mov	r0, r3
 8002022:	f00d ff35 	bl	800fe90 <osMessagePut>
					break;
 8002026:	e01a      	b.n	800205e <touch_keypad+0xf6>
					osMessagePut(stateQueueHandle, KEY_5, osWaitForever);
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <touch_keypad+0x160>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	210d      	movs	r1, #13
 8002032:	4618      	mov	r0, r3
 8002034:	f00d ff2c 	bl	800fe90 <osMessagePut>
					break;
 8002038:	e011      	b.n	800205e <touch_keypad+0xf6>
					osMessagePut(stateQueueHandle, KEY_8, osWaitForever);
 800203a:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <touch_keypad+0x160>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f04f 32ff 	mov.w	r2, #4294967295
 8002042:	2110      	movs	r1, #16
 8002044:	4618      	mov	r0, r3
 8002046:	f00d ff23 	bl	800fe90 <osMessagePut>
					break;
 800204a:	e008      	b.n	800205e <touch_keypad+0xf6>
					osMessagePut(stateQueueHandle, KEY_0, osWaitForever);
 800204c:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <touch_keypad+0x160>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f04f 32ff 	mov.w	r2, #4294967295
 8002054:	2108      	movs	r1, #8
 8002056:	4618      	mov	r0, r3
 8002058:	f00d ff1a 	bl	800fe90 <osMessagePut>
					break;
 800205c:	bf00      	nop
			break;
 800205e:	e02b      	b.n	80020b8 <touch_keypad+0x150>
			switch (y) {
 8002060:	88bb      	ldrh	r3, [r7, #4]
 8002062:	2bc8      	cmp	r3, #200	; 0xc8
 8002064:	dc2a      	bgt.n	80020bc <touch_keypad+0x154>
 8002066:	2bb4      	cmp	r3, #180	; 0xb4
 8002068:	da1a      	bge.n	80020a0 <touch_keypad+0x138>
 800206a:	2b8c      	cmp	r3, #140	; 0x8c
 800206c:	dc02      	bgt.n	8002074 <touch_keypad+0x10c>
 800206e:	2b78      	cmp	r3, #120	; 0x78
 8002070:	da04      	bge.n	800207c <touch_keypad+0x114>
			break;
 8002072:	e023      	b.n	80020bc <touch_keypad+0x154>
 8002074:	3b96      	subs	r3, #150	; 0x96
 8002076:	2b14      	cmp	r3, #20
 8002078:	d820      	bhi.n	80020bc <touch_keypad+0x154>
 800207a:	e008      	b.n	800208e <touch_keypad+0x126>
					osMessagePut(stateQueueHandle, KEY_3, osWaitForever);
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <touch_keypad+0x160>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f04f 32ff 	mov.w	r2, #4294967295
 8002084:	210b      	movs	r1, #11
 8002086:	4618      	mov	r0, r3
 8002088:	f00d ff02 	bl	800fe90 <osMessagePut>
					break;
 800208c:	e011      	b.n	80020b2 <touch_keypad+0x14a>
					osMessagePut(stateQueueHandle, KEY_6, osWaitForever);
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <touch_keypad+0x160>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f04f 32ff 	mov.w	r2, #4294967295
 8002096:	210e      	movs	r1, #14
 8002098:	4618      	mov	r0, r3
 800209a:	f00d fef9 	bl	800fe90 <osMessagePut>
					break;
 800209e:	e008      	b.n	80020b2 <touch_keypad+0x14a>
					osMessagePut(stateQueueHandle, KEY_9, osWaitForever);
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <touch_keypad+0x160>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	2111      	movs	r1, #17
 80020aa:	4618      	mov	r0, r3
 80020ac:	f00d fef0 	bl	800fe90 <osMessagePut>
					break;
 80020b0:	bf00      	nop
			break;
 80020b2:	e003      	b.n	80020bc <touch_keypad+0x154>
			break;
 80020b4:	bf00      	nop
 80020b6:	e002      	b.n	80020be <touch_keypad+0x156>
			break;
 80020b8:	bf00      	nop
 80020ba:	e000      	b.n	80020be <touch_keypad+0x156>
			break;
 80020bc:	bf00      	nop
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000cf0 	.word	0x20000cf0

080020cc <StartTouchPanelTask>:

void StartTouchPanelTask(void const * argument)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	6078      	str	r0, [r7, #4]
	TouchPanel_Calibrate();					// Touch Panel configuration
 80020d4:	f003 f802 	bl	80050dc <TouchPanel_Calibrate>
	osSemaphoreRelease(startSemHandle);
 80020d8:	4b4b      	ldr	r3, [pc, #300]	; (8002208 <StartTouchPanelTask+0x13c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f00d fe65 	bl	800fdac <osSemaphoreRelease>
	while (1) {
		getDisplayPoint(&display, Read_Ads7846(), &matrix);
 80020e2:	f002 fc8f 	bl	8004a04 <Read_Ads7846>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4a48      	ldr	r2, [pc, #288]	; (800220c <StartTouchPanelTask+0x140>)
 80020ea:	4619      	mov	r1, r3
 80020ec:	4848      	ldr	r0, [pc, #288]	; (8002210 <StartTouchPanelTask+0x144>)
 80020ee:	f002 ff52 	bl	8004f96 <getDisplayPoint>
		switch (state) {
 80020f2:	4b48      	ldr	r3, [pc, #288]	; (8002214 <StartTouchPanelTask+0x148>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	f300 8082 	bgt.w	8002200 <StartTouchPanelTask+0x134>
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	da5c      	bge.n	80021ba <StartTouchPanelTask+0xee>
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <StartTouchPanelTask+0x3e>
 8002104:	2b01      	cmp	r3, #1
 8002106:	d02c      	beq.n	8002162 <StartTouchPanelTask+0x96>
 8002108:	e07a      	b.n	8002200 <StartTouchPanelTask+0x134>
			case (WELCOME):
				if (is_btn_touched(display.x, display.y, btn_register))		// Tell Control Task that register button has been pressed
 800210a:	4b41      	ldr	r3, [pc, #260]	; (8002210 <StartTouchPanelTask+0x144>)
 800210c:	8818      	ldrh	r0, [r3, #0]
 800210e:	4b40      	ldr	r3, [pc, #256]	; (8002210 <StartTouchPanelTask+0x144>)
 8002110:	8859      	ldrh	r1, [r3, #2]
 8002112:	4b41      	ldr	r3, [pc, #260]	; (8002218 <StartTouchPanelTask+0x14c>)
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	9200      	str	r2, [sp, #0]
 8002118:	cb0c      	ldmia	r3, {r2, r3}
 800211a:	f7ff fef5 	bl	8001f08 <is_btn_touched>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <StartTouchPanelTask+0x6a>
					osMessagePut(stateQueueHandle, REG_ID, osWaitForever);
 8002124:	4b3d      	ldr	r3, [pc, #244]	; (800221c <StartTouchPanelTask+0x150>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f04f 32ff 	mov.w	r2, #4294967295
 800212c:	2101      	movs	r1, #1
 800212e:	4618      	mov	r0, r3
 8002130:	f00d feae 	bl	800fe90 <osMessagePut>
				else if (is_btn_touched(display.x, display.y, btn_login))		// Tell Control Task that login button has been pressed
					osMessagePut(stateQueueHandle, LOG_ID, osWaitForever);
				break;
 8002134:	e05f      	b.n	80021f6 <StartTouchPanelTask+0x12a>
				else if (is_btn_touched(display.x, display.y, btn_login))		// Tell Control Task that login button has been pressed
 8002136:	4b36      	ldr	r3, [pc, #216]	; (8002210 <StartTouchPanelTask+0x144>)
 8002138:	8818      	ldrh	r0, [r3, #0]
 800213a:	4b35      	ldr	r3, [pc, #212]	; (8002210 <StartTouchPanelTask+0x144>)
 800213c:	8859      	ldrh	r1, [r3, #2]
 800213e:	4b38      	ldr	r3, [pc, #224]	; (8002220 <StartTouchPanelTask+0x154>)
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	9200      	str	r2, [sp, #0]
 8002144:	cb0c      	ldmia	r3, {r2, r3}
 8002146:	f7ff fedf 	bl	8001f08 <is_btn_touched>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d052      	beq.n	80021f6 <StartTouchPanelTask+0x12a>
					osMessagePut(stateQueueHandle, LOG_ID, osWaitForever);
 8002150:	4b32      	ldr	r3, [pc, #200]	; (800221c <StartTouchPanelTask+0x150>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f04f 32ff 	mov.w	r2, #4294967295
 8002158:	2103      	movs	r1, #3
 800215a:	4618      	mov	r0, r3
 800215c:	f00d fe98 	bl	800fe90 <osMessagePut>
				break;
 8002160:	e049      	b.n	80021f6 <StartTouchPanelTask+0x12a>
			case (REGISTER_ID):
				if (is_btn_touched(display.x, display.y, btn_photo))				// Tell Control Task that photo button has been pressed
 8002162:	4b2b      	ldr	r3, [pc, #172]	; (8002210 <StartTouchPanelTask+0x144>)
 8002164:	8818      	ldrh	r0, [r3, #0]
 8002166:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <StartTouchPanelTask+0x144>)
 8002168:	8859      	ldrh	r1, [r3, #2]
 800216a:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <StartTouchPanelTask+0x158>)
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	9200      	str	r2, [sp, #0]
 8002170:	cb0c      	ldmia	r3, {r2, r3}
 8002172:	f7ff fec9 	bl	8001f08 <is_btn_touched>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <StartTouchPanelTask+0xc2>
					osMessagePut(stateQueueHandle, REG_PIN, osWaitForever);
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <StartTouchPanelTask+0x150>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f04f 32ff 	mov.w	r2, #4294967295
 8002184:	2102      	movs	r1, #2
 8002186:	4618      	mov	r0, r3
 8002188:	f00d fe82 	bl	800fe90 <osMessagePut>
				else if (is_btn_touched(display.x, display.y, btn_cancel))		// Tell Control Task that cancel button has been pressed
					osMessagePut(stateQueueHandle, FINISHED, osWaitForever);
				break;
 800218c:	e035      	b.n	80021fa <StartTouchPanelTask+0x12e>
				else if (is_btn_touched(display.x, display.y, btn_cancel))		// Tell Control Task that cancel button has been pressed
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <StartTouchPanelTask+0x144>)
 8002190:	8818      	ldrh	r0, [r3, #0]
 8002192:	4b1f      	ldr	r3, [pc, #124]	; (8002210 <StartTouchPanelTask+0x144>)
 8002194:	8859      	ldrh	r1, [r3, #2]
 8002196:	4b24      	ldr	r3, [pc, #144]	; (8002228 <StartTouchPanelTask+0x15c>)
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	9200      	str	r2, [sp, #0]
 800219c:	cb0c      	ldmia	r3, {r2, r3}
 800219e:	f7ff feb3 	bl	8001f08 <is_btn_touched>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d028      	beq.n	80021fa <StartTouchPanelTask+0x12e>
					osMessagePut(stateQueueHandle, FINISHED, osWaitForever);
 80021a8:	4b1c      	ldr	r3, [pc, #112]	; (800221c <StartTouchPanelTask+0x150>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f04f 32ff 	mov.w	r2, #4294967295
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f00d fe6c 	bl	800fe90 <osMessagePut>
				break;
 80021b8:	e01f      	b.n	80021fa <StartTouchPanelTask+0x12e>
			case (REGISTER_PIN):
			case (LOGIN_ID):
			case (LOGIN_PIN):
				touch_keypad(display.x, display.y);
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <StartTouchPanelTask+0x144>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	4a14      	ldr	r2, [pc, #80]	; (8002210 <StartTouchPanelTask+0x144>)
 80021c0:	8852      	ldrh	r2, [r2, #2]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fecf 	bl	8001f68 <touch_keypad>
				if (is_btn_touched(display.x, display.y, btn_cancel))			// Tell Control Task that cancel button has been pressed
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <StartTouchPanelTask+0x144>)
 80021cc:	8818      	ldrh	r0, [r3, #0]
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <StartTouchPanelTask+0x144>)
 80021d0:	8859      	ldrh	r1, [r3, #2]
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <StartTouchPanelTask+0x15c>)
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	9200      	str	r2, [sp, #0]
 80021d8:	cb0c      	ldmia	r3, {r2, r3}
 80021da:	f7ff fe95 	bl	8001f08 <is_btn_touched>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00c      	beq.n	80021fe <StartTouchPanelTask+0x132>
					osMessagePut(stateQueueHandle, FINISHED, osWaitForever);
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <StartTouchPanelTask+0x150>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f00d fe4e 	bl	800fe90 <osMessagePut>
				break;
 80021f4:	e003      	b.n	80021fe <StartTouchPanelTask+0x132>
				break;
 80021f6:	bf00      	nop
 80021f8:	e002      	b.n	8002200 <StartTouchPanelTask+0x134>
				break;
 80021fa:	bf00      	nop
 80021fc:	e000      	b.n	8002200 <StartTouchPanelTask+0x134>
				break;
 80021fe:	bf00      	nop
		}
		osDelay(100);
 8002200:	2064      	movs	r0, #100	; 0x64
 8002202:	f00d fba3 	bl	800f94c <osDelay>
		getDisplayPoint(&display, Read_Ads7846(), &matrix);
 8002206:	e76c      	b.n	80020e2 <StartTouchPanelTask+0x16>
 8002208:	20000d0c 	.word	0x20000d0c
 800220c:	20001c40 	.word	0x20001c40
 8002210:	20001c78 	.word	0x20001c78
 8002214:	20000538 	.word	0x20000538
 8002218:	2000001c 	.word	0x2000001c
 800221c:	20000cf0 	.word	0x20000cf0
 8002220:	20000028 	.word	0x20000028
 8002224:	20000004 	.word	0x20000004
 8002228:	20000010 	.word	0x20000010

0800222c <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8002230:	4b10      	ldr	r3, [pc, #64]	; (8002274 <MX_DCMI_Init+0x48>)
 8002232:	4a11      	ldr	r2, [pc, #68]	; (8002278 <MX_DCMI_Init+0x4c>)
 8002234:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8002236:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <MX_DCMI_Init+0x48>)
 8002238:	2200      	movs	r2, #0
 800223a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800223c:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <MX_DCMI_Init+0x48>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <MX_DCMI_Init+0x48>)
 8002244:	2280      	movs	r2, #128	; 0x80
 8002246:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <MX_DCMI_Init+0x48>)
 800224a:	2240      	movs	r2, #64	; 0x40
 800224c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <MX_DCMI_Init+0x48>)
 8002250:	2200      	movs	r2, #0
 8002252:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002254:	4b07      	ldr	r3, [pc, #28]	; (8002274 <MX_DCMI_Init+0x48>)
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <MX_DCMI_Init+0x48>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002260:	4804      	ldr	r0, [pc, #16]	; (8002274 <MX_DCMI_Init+0x48>)
 8002262:	f003 fab7 	bl	80057d4 <HAL_DCMI_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 800226c:	f000 fd82 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20000bd4 	.word	0x20000bd4
 8002278:	50050000 	.word	0x50050000

0800227c <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	; 0x30
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a68      	ldr	r2, [pc, #416]	; (800243c <HAL_DCMI_MspInit+0x1c0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	f040 80ca 	bne.w	8002434 <HAL_DCMI_MspInit+0x1b8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
 80022a4:	4b66      	ldr	r3, [pc, #408]	; (8002440 <HAL_DCMI_MspInit+0x1c4>)
 80022a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a8:	4a65      	ldr	r2, [pc, #404]	; (8002440 <HAL_DCMI_MspInit+0x1c4>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6353      	str	r3, [r2, #52]	; 0x34
 80022b0:	4b63      	ldr	r3, [pc, #396]	; (8002440 <HAL_DCMI_MspInit+0x1c4>)
 80022b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	4b5f      	ldr	r3, [pc, #380]	; (8002440 <HAL_DCMI_MspInit+0x1c4>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	4a5e      	ldr	r2, [pc, #376]	; (8002440 <HAL_DCMI_MspInit+0x1c4>)
 80022c6:	f043 0310 	orr.w	r3, r3, #16
 80022ca:	6313      	str	r3, [r2, #48]	; 0x30
 80022cc:	4b5c      	ldr	r3, [pc, #368]	; (8002440 <HAL_DCMI_MspInit+0x1c4>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	4b58      	ldr	r3, [pc, #352]	; (8002440 <HAL_DCMI_MspInit+0x1c4>)
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	4a57      	ldr	r2, [pc, #348]	; (8002440 <HAL_DCMI_MspInit+0x1c4>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6313      	str	r3, [r2, #48]	; 0x30
 80022e8:	4b55      	ldr	r3, [pc, #340]	; (8002440 <HAL_DCMI_MspInit+0x1c4>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	4b51      	ldr	r3, [pc, #324]	; (8002440 <HAL_DCMI_MspInit+0x1c4>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	4a50      	ldr	r2, [pc, #320]	; (8002440 <HAL_DCMI_MspInit+0x1c4>)
 80022fe:	f043 0304 	orr.w	r3, r3, #4
 8002302:	6313      	str	r3, [r2, #48]	; 0x30
 8002304:	4b4e      	ldr	r3, [pc, #312]	; (8002440 <HAL_DCMI_MspInit+0x1c4>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002310:	2300      	movs	r3, #0
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	4b4a      	ldr	r3, [pc, #296]	; (8002440 <HAL_DCMI_MspInit+0x1c4>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	4a49      	ldr	r2, [pc, #292]	; (8002440 <HAL_DCMI_MspInit+0x1c4>)
 800231a:	f043 0302 	orr.w	r3, r3, #2
 800231e:	6313      	str	r3, [r2, #48]	; 0x30
 8002320:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_DCMI_MspInit+0x1c4>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 800232c:	2373      	movs	r3, #115	; 0x73
 800232e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800233c:	230d      	movs	r3, #13
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002340:	f107 031c 	add.w	r3, r7, #28
 8002344:	4619      	mov	r1, r3
 8002346:	483f      	ldr	r0, [pc, #252]	; (8002444 <HAL_DCMI_MspInit+0x1c8>)
 8002348:	f005 f82c 	bl	80073a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_10;
 800234c:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8002350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	2300      	movs	r3, #0
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800235e:	230d      	movs	r3, #13
 8002360:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002362:	f107 031c 	add.w	r3, r7, #28
 8002366:	4619      	mov	r1, r3
 8002368:	4837      	ldr	r0, [pc, #220]	; (8002448 <HAL_DCMI_MspInit+0x1cc>)
 800236a:	f005 f81b 	bl	80073a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800236e:	2340      	movs	r3, #64	; 0x40
 8002370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002372:	2302      	movs	r3, #2
 8002374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800237e:	230d      	movs	r3, #13
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002382:	f107 031c 	add.w	r3, r7, #28
 8002386:	4619      	mov	r1, r3
 8002388:	4830      	ldr	r0, [pc, #192]	; (800244c <HAL_DCMI_MspInit+0x1d0>)
 800238a:	f005 f80b 	bl	80073a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800238e:	23c0      	movs	r3, #192	; 0xc0
 8002390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239a:	2300      	movs	r3, #0
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800239e:	230d      	movs	r3, #13
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a2:	f107 031c 	add.w	r3, r7, #28
 80023a6:	4619      	mov	r1, r3
 80023a8:	4829      	ldr	r0, [pc, #164]	; (8002450 <HAL_DCMI_MspInit+0x1d4>)
 80023aa:	f004 fffb 	bl	80073a4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80023ae:	4b29      	ldr	r3, [pc, #164]	; (8002454 <HAL_DCMI_MspInit+0x1d8>)
 80023b0:	4a29      	ldr	r2, [pc, #164]	; (8002458 <HAL_DCMI_MspInit+0x1dc>)
 80023b2:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80023b4:	4b27      	ldr	r3, [pc, #156]	; (8002454 <HAL_DCMI_MspInit+0x1d8>)
 80023b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ba:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023bc:	4b25      	ldr	r3, [pc, #148]	; (8002454 <HAL_DCMI_MspInit+0x1d8>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c2:	4b24      	ldr	r3, [pc, #144]	; (8002454 <HAL_DCMI_MspInit+0x1d8>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80023c8:	4b22      	ldr	r3, [pc, #136]	; (8002454 <HAL_DCMI_MspInit+0x1d8>)
 80023ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ce:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023d0:	4b20      	ldr	r3, [pc, #128]	; (8002454 <HAL_DCMI_MspInit+0x1d8>)
 80023d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023d6:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023d8:	4b1e      	ldr	r3, [pc, #120]	; (8002454 <HAL_DCMI_MspInit+0x1d8>)
 80023da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023de:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80023e0:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <HAL_DCMI_MspInit+0x1d8>)
 80023e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023e6:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023e8:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <HAL_DCMI_MspInit+0x1d8>)
 80023ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80023ee:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80023f0:	4b18      	ldr	r3, [pc, #96]	; (8002454 <HAL_DCMI_MspInit+0x1d8>)
 80023f2:	2204      	movs	r2, #4
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80023f6:	4b17      	ldr	r3, [pc, #92]	; (8002454 <HAL_DCMI_MspInit+0x1d8>)
 80023f8:	2203      	movs	r2, #3
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80023fc:	4b15      	ldr	r3, [pc, #84]	; (8002454 <HAL_DCMI_MspInit+0x1d8>)
 80023fe:	2200      	movs	r2, #0
 8002400:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <HAL_DCMI_MspInit+0x1d8>)
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002408:	4812      	ldr	r0, [pc, #72]	; (8002454 <HAL_DCMI_MspInit+0x1d8>)
 800240a:	f003 fa51 	bl	80058b0 <HAL_DMA_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_DCMI_MspInit+0x19c>
    {
      Error_Handler();
 8002414:	f000 fcae 	bl	8002d74 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a0e      	ldr	r2, [pc, #56]	; (8002454 <HAL_DCMI_MspInit+0x1d8>)
 800241c:	639a      	str	r2, [r3, #56]	; 0x38
 800241e:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <HAL_DCMI_MspInit+0x1d8>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	2105      	movs	r1, #5
 8002428:	204e      	movs	r0, #78	; 0x4e
 800242a:	f002 ffd5 	bl	80053d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800242e:	204e      	movs	r0, #78	; 0x4e
 8002430:	f002 ffee 	bl	8005410 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8002434:	bf00      	nop
 8002436:	3730      	adds	r7, #48	; 0x30
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	50050000 	.word	0x50050000
 8002440:	40023800 	.word	0x40023800
 8002444:	40021000 	.word	0x40021000
 8002448:	40020000 	.word	0x40020000
 800244c:	40020800 	.word	0x40020800
 8002450:	40020400 	.word	0x40020400
 8002454:	20000c14 	.word	0x20000c14
 8002458:	40026428 	.word	0x40026428

0800245c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	4b2d      	ldr	r3, [pc, #180]	; (800251c <MX_DMA_Init+0xc0>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a2c      	ldr	r2, [pc, #176]	; (800251c <MX_DMA_Init+0xc0>)
 800246c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	4b2a      	ldr	r3, [pc, #168]	; (800251c <MX_DMA_Init+0xc0>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800247e:	4b28      	ldr	r3, [pc, #160]	; (8002520 <MX_DMA_Init+0xc4>)
 8002480:	4a28      	ldr	r2, [pc, #160]	; (8002524 <MX_DMA_Init+0xc8>)
 8002482:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002484:	4b26      	ldr	r3, [pc, #152]	; (8002520 <MX_DMA_Init+0xc4>)
 8002486:	2200      	movs	r2, #0
 8002488:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800248a:	4b25      	ldr	r3, [pc, #148]	; (8002520 <MX_DMA_Init+0xc4>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8002490:	4b23      	ldr	r3, [pc, #140]	; (8002520 <MX_DMA_Init+0xc4>)
 8002492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002496:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_DISABLE;
 8002498:	4b21      	ldr	r3, [pc, #132]	; (8002520 <MX_DMA_Init+0xc4>)
 800249a:	2200      	movs	r2, #0
 800249c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <MX_DMA_Init+0xc4>)
 80024a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024a4:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024a6:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <MX_DMA_Init+0xc4>)
 80024a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024ac:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80024ae:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <MX_DMA_Init+0xc4>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 80024b4:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <MX_DMA_Init+0xc4>)
 80024b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024ba:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80024bc:	4b18      	ldr	r3, [pc, #96]	; (8002520 <MX_DMA_Init+0xc4>)
 80024be:	2204      	movs	r2, #4
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80024c2:	4b17      	ldr	r3, [pc, #92]	; (8002520 <MX_DMA_Init+0xc4>)
 80024c4:	2203      	movs	r2, #3
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80024c8:	4b15      	ldr	r3, [pc, #84]	; (8002520 <MX_DMA_Init+0xc4>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80024ce:	4b14      	ldr	r3, [pc, #80]	; (8002520 <MX_DMA_Init+0xc4>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80024d4:	4812      	ldr	r0, [pc, #72]	; (8002520 <MX_DMA_Init+0xc4>)
 80024d6:	f003 f9eb 	bl	80058b0 <HAL_DMA_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_DMA_Init+0x88>
  {
    Error_Handler();
 80024e0:	f000 fc48 	bl	8002d74 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80024e4:	2200      	movs	r2, #0
 80024e6:	2105      	movs	r1, #5
 80024e8:	2039      	movs	r0, #57	; 0x39
 80024ea:	f002 ff75 	bl	80053d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80024ee:	2039      	movs	r0, #57	; 0x39
 80024f0:	f002 ff8e 	bl	8005410 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80024f4:	2200      	movs	r2, #0
 80024f6:	2105      	movs	r1, #5
 80024f8:	203b      	movs	r0, #59	; 0x3b
 80024fa:	f002 ff6d 	bl	80053d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80024fe:	203b      	movs	r0, #59	; 0x3b
 8002500:	f002 ff86 	bl	8005410 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002504:	2200      	movs	r2, #0
 8002506:	2105      	movs	r1, #5
 8002508:	2045      	movs	r0, #69	; 0x45
 800250a:	f002 ff65 	bl	80053d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800250e:	2045      	movs	r0, #69	; 0x45
 8002510:	f002 ff7e 	bl	8005410 <HAL_NVIC_EnableIRQ>

}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40023800 	.word	0x40023800
 8002520:	20000c74 	.word	0x20000c74
 8002524:	40026410 	.word	0x40026410

08002528 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4a07      	ldr	r2, [pc, #28]	; (8002554 <vApplicationGetIdleTaskMemory+0x2c>)
 8002538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	4a06      	ldr	r2, [pc, #24]	; (8002558 <vApplicationGetIdleTaskMemory+0x30>)
 800253e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2280      	movs	r2, #128	; 0x80
 8002544:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000d10 	.word	0x20000d10
 8002558:	20000d64 	.word	0x20000d64

0800255c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4a07      	ldr	r2, [pc, #28]	; (8002588 <vApplicationGetTimerTaskMemory+0x2c>)
 800256c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4a06      	ldr	r2, [pc, #24]	; (800258c <vApplicationGetTimerTaskMemory+0x30>)
 8002572:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	20000f64 	.word	0x20000f64
 800258c:	20000fb8 	.word	0x20000fb8

08002590 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002590:	b5b0      	push	{r4, r5, r7, lr}
 8002592:	b0ca      	sub	sp, #296	; 0x128
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of lcdMutex */
  osMutexDef(lcdMutex);
 8002596:	2300      	movs	r3, #0
 8002598:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  lcdMutexHandle = osMutexCreate(osMutex(lcdMutex));
 80025a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80025a6:	4618      	mov	r0, r3
 80025a8:	f00d fae4 	bl	800fb74 <osMutexCreate>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4a7d      	ldr	r2, [pc, #500]	; (80027a4 <MX_FREERTOS_Init+0x214>)
 80025b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of sdMutex */
  osMutexDef(sdMutex);
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80025b8:	2300      	movs	r3, #0
 80025ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  sdMutexHandle = osMutexCreate(osMutex(sdMutex));
 80025be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025c2:	4618      	mov	r0, r3
 80025c4:	f00d fad6 	bl	800fb74 <osMutexCreate>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4a77      	ldr	r2, [pc, #476]	; (80027a8 <MX_FREERTOS_Init+0x218>)
 80025cc:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of startSem */
  osSemaphoreDef(startSem);
 80025ce:	2300      	movs	r3, #0
 80025d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  startSemHandle = osSemaphoreCreate(osSemaphore(startSem), 1);
 80025da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025de:	2101      	movs	r1, #1
 80025e0:	4618      	mov	r0, r3
 80025e2:	f00d fb63 	bl	800fcac <osSemaphoreCreate>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4a70      	ldr	r2, [pc, #448]	; (80027ac <MX_FREERTOS_Init+0x21c>)
 80025ea:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of messageTimer */
  osTimerDef(messageTimer, MessageTimerCallback);
 80025ec:	4b70      	ldr	r3, [pc, #448]	; (80027b0 <MX_FREERTOS_Init+0x220>)
 80025ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  messageTimerHandle = osTimerCreate(osTimer(messageTimer), osTimerOnce, NULL);
 80025f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80025fc:	2200      	movs	r2, #0
 80025fe:	2100      	movs	r1, #0
 8002600:	4618      	mov	r0, r3
 8002602:	f00d f9b7 	bl	800f974 <osTimerCreate>
 8002606:	4603      	mov	r3, r0
 8002608:	4a6a      	ldr	r2, [pc, #424]	; (80027b4 <MX_FREERTOS_Init+0x224>)
 800260a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of stateQueue */
  osMessageQDef(stateQueue, 16, uint16_t);
 800260c:	4b6a      	ldr	r3, [pc, #424]	; (80027b8 <MX_FREERTOS_Init+0x228>)
 800260e:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8002612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002614:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  stateQueueHandle = osMessageCreate(osMessageQ(stateQueue), NULL);
 8002618:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f00d fc0d 	bl	800fe3e <osMessageCreate>
 8002624:	4603      	mov	r3, r0
 8002626:	4a65      	ldr	r2, [pc, #404]	; (80027bc <MX_FREERTOS_Init+0x22c>)
 8002628:	6013      	str	r3, [r2, #0]

  /* definition and creation of renderQueue */
  osMessageQDef(renderQueue, 16, uint16_t);
 800262a:	4b63      	ldr	r3, [pc, #396]	; (80027b8 <MX_FREERTOS_Init+0x228>)
 800262c:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 8002630:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002632:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  renderQueueHandle = osMessageCreate(osMessageQ(renderQueue), NULL);
 8002636:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f00d fbfe 	bl	800fe3e <osMessageCreate>
 8002642:	4603      	mov	r3, r0
 8002644:	4a5e      	ldr	r2, [pc, #376]	; (80027c0 <MX_FREERTOS_Init+0x230>)
 8002646:	6013      	str	r3, [r2, #0]

  /* definition and creation of keypadQueue */
  osMessageQDef(keypadQueue, 4, uint16_t);
 8002648:	4b5e      	ldr	r3, [pc, #376]	; (80027c4 <MX_FREERTOS_Init+0x234>)
 800264a:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 800264e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002650:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  keypadQueueHandle = osMessageCreate(osMessageQ(keypadQueue), NULL);
 8002654:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f00d fbef 	bl	800fe3e <osMessageCreate>
 8002660:	4603      	mov	r3, r0
 8002662:	4a59      	ldr	r2, [pc, #356]	; (80027c8 <MX_FREERTOS_Init+0x238>)
 8002664:	6013      	str	r3, [r2, #0]

  /* definition and creation of fileSystemQueue */
  osMessageQDef(fileSystemQueue, 16, uint16_t);
 8002666:	4b54      	ldr	r3, [pc, #336]	; (80027b8 <MX_FREERTOS_Init+0x228>)
 8002668:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800266c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800266e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  fileSystemQueueHandle = osMessageCreate(osMessageQ(fileSystemQueue), NULL);
 8002672:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f00d fbe0 	bl	800fe3e <osMessageCreate>
 800267e:	4603      	mov	r3, r0
 8002680:	4a52      	ldr	r2, [pc, #328]	; (80027cc <MX_FREERTOS_Init+0x23c>)
 8002682:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002684:	4b52      	ldr	r3, [pc, #328]	; (80027d0 <MX_FREERTOS_Init+0x240>)
 8002686:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800268a:	461d      	mov	r5, r3
 800268c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800268e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002698:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800269c:	2100      	movs	r1, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	f00d f8f5 	bl	800f88e <osThreadCreate>
 80026a4:	4603      	mov	r3, r0
 80026a6:	4a4b      	ldr	r2, [pc, #300]	; (80027d4 <MX_FREERTOS_Init+0x244>)
 80026a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of controlTask */
  osThreadDef(controlTask, StartControlTask, osPriorityNormal, 0, 128);
 80026aa:	4b4b      	ldr	r3, [pc, #300]	; (80027d8 <MX_FREERTOS_Init+0x248>)
 80026ac:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80026b0:	461d      	mov	r5, r3
 80026b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 80026be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f00d f8e2 	bl	800f88e <osThreadCreate>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4a43      	ldr	r2, [pc, #268]	; (80027dc <MX_FREERTOS_Init+0x24c>)
 80026ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdTask */
  osThreadDef(lcdTask, StartLCDTask, osPriorityNormal, 0, 128);
 80026d0:	4b43      	ldr	r3, [pc, #268]	; (80027e0 <MX_FREERTOS_Init+0x250>)
 80026d2:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80026d6:	461d      	mov	r5, r3
 80026d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 80026e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f00d f8cf 	bl	800f88e <osThreadCreate>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4a3c      	ldr	r2, [pc, #240]	; (80027e4 <MX_FREERTOS_Init+0x254>)
 80026f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of touchPanelTask */
  osThreadDef(touchPanelTask, StartTouchPanelTask, osPriorityNormal, 0, 128);
 80026f6:	4b3c      	ldr	r3, [pc, #240]	; (80027e8 <MX_FREERTOS_Init+0x258>)
 80026f8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80026fc:	461d      	mov	r5, r3
 80026fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002702:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002706:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  touchPanelTaskHandle = osThreadCreate(osThread(touchPanelTask), NULL);
 800270a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f00d f8bc 	bl	800f88e <osThreadCreate>
 8002716:	4603      	mov	r3, r0
 8002718:	4a34      	ldr	r2, [pc, #208]	; (80027ec <MX_FREERTOS_Init+0x25c>)
 800271a:	6013      	str	r3, [r2, #0]

  /* definition and creation of keypadTask */
  osThreadDef(keypadTask, StartKeypadTask, osPriorityNormal, 0, 128);
 800271c:	4b34      	ldr	r3, [pc, #208]	; (80027f0 <MX_FREERTOS_Init+0x260>)
 800271e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002722:	461d      	mov	r5, r3
 8002724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002728:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800272c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  keypadTaskHandle = osThreadCreate(osThread(keypadTask), NULL);
 8002730:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f00d f8a9 	bl	800f88e <osThreadCreate>
 800273c:	4603      	mov	r3, r0
 800273e:	4a2d      	ldr	r2, [pc, #180]	; (80027f4 <MX_FREERTOS_Init+0x264>)
 8002740:	6013      	str	r3, [r2, #0]

  /* definition and creation of fileSystemTask */
  osThreadDef(fileSystemTask, StartFileSystemTask, osPriorityNormal, 0, 128);
 8002742:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800274a:	4a2b      	ldr	r2, [pc, #172]	; (80027f8 <MX_FREERTOS_Init+0x268>)
 800274c:	461c      	mov	r4, r3
 800274e:	4615      	mov	r5, r2
 8002750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002754:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002758:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  fileSystemTaskHandle = osThreadCreate(osThread(fileSystemTask), NULL);
 800275c:	f107 0320 	add.w	r3, r7, #32
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f00d f893 	bl	800f88e <osThreadCreate>
 8002768:	4603      	mov	r3, r0
 800276a:	4a24      	ldr	r2, [pc, #144]	; (80027fc <MX_FREERTOS_Init+0x26c>)
 800276c:	6013      	str	r3, [r2, #0]

  /* definition and creation of cameraTask */
  osThreadDef(cameraTask, StartCameraTask, osPriorityNormal, 0, 128);
 800276e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002772:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002776:	4a22      	ldr	r2, [pc, #136]	; (8002800 <MX_FREERTOS_Init+0x270>)
 8002778:	461c      	mov	r4, r3
 800277a:	4615      	mov	r5, r2
 800277c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800277e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002780:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002784:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cameraTaskHandle = osThreadCreate(osThread(cameraTask), NULL);
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f00d f87e 	bl	800f88e <osThreadCreate>
 8002792:	4603      	mov	r3, r0
 8002794:	4a1b      	ldr	r2, [pc, #108]	; (8002804 <MX_FREERTOS_Init+0x274>)
 8002796:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002798:	bf00      	nop
 800279a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800279e:	46bd      	mov	sp, r7
 80027a0:	bdb0      	pop	{r4, r5, r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000d04 	.word	0x20000d04
 80027a8:	20000d08 	.word	0x20000d08
 80027ac:	20000d0c 	.word	0x20000d0c
 80027b0:	08001bad 	.word	0x08001bad
 80027b4:	20000d00 	.word	0x20000d00
 80027b8:	080169e4 	.word	0x080169e4
 80027bc:	20000cf0 	.word	0x20000cf0
 80027c0:	20000cf4 	.word	0x20000cf4
 80027c4:	080169f4 	.word	0x080169f4
 80027c8:	20000cf8 	.word	0x20000cf8
 80027cc:	20000cfc 	.word	0x20000cfc
 80027d0:	08016a04 	.word	0x08016a04
 80027d4:	20000cd4 	.word	0x20000cd4
 80027d8:	08016a20 	.word	0x08016a20
 80027dc:	20000cd8 	.word	0x20000cd8
 80027e0:	08016a3c 	.word	0x08016a3c
 80027e4:	20000cdc 	.word	0x20000cdc
 80027e8:	08016a58 	.word	0x08016a58
 80027ec:	20000ce0 	.word	0x20000ce0
 80027f0:	08016a74 	.word	0x08016a74
 80027f4:	20000ce4 	.word	0x20000ce4
 80027f8:	08016a90 	.word	0x08016a90
 80027fc:	20000ce8 	.word	0x20000ce8
 8002800:	08016aac 	.word	0x08016aac
 8002804:	20000cec 	.word	0x20000cec

08002808 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void const * argument)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002810:	2001      	movs	r0, #1
 8002812:	f00d f89b 	bl	800f94c <osDelay>
 8002816:	e7fb      	b.n	8002810 <StartDefaultTask+0x8>

08002818 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
 800282c:	615a      	str	r2, [r3, #20]
 800282e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <MX_FSMC_Init+0xb8>)
 8002832:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002836:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002838:	4b25      	ldr	r3, [pc, #148]	; (80028d0 <MX_FSMC_Init+0xb8>)
 800283a:	4a26      	ldr	r2, [pc, #152]	; (80028d4 <MX_FSMC_Init+0xbc>)
 800283c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800283e:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <MX_FSMC_Init+0xb8>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002844:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <MX_FSMC_Init+0xb8>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800284a:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <MX_FSMC_Init+0xb8>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002850:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <MX_FSMC_Init+0xb8>)
 8002852:	2210      	movs	r2, #16
 8002854:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002856:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <MX_FSMC_Init+0xb8>)
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800285c:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <MX_FSMC_Init+0xb8>)
 800285e:	2200      	movs	r2, #0
 8002860:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002862:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <MX_FSMC_Init+0xb8>)
 8002864:	2200      	movs	r2, #0
 8002866:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <MX_FSMC_Init+0xb8>)
 800286a:	2200      	movs	r2, #0
 800286c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <MX_FSMC_Init+0xb8>)
 8002870:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002874:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002876:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <MX_FSMC_Init+0xb8>)
 8002878:	2200      	movs	r2, #0
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800287c:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <MX_FSMC_Init+0xb8>)
 800287e:	2200      	movs	r2, #0
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002882:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <MX_FSMC_Init+0xb8>)
 8002884:	2200      	movs	r2, #0
 8002886:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <MX_FSMC_Init+0xb8>)
 800288a:	2200      	movs	r2, #0
 800288c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800288e:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <MX_FSMC_Init+0xb8>)
 8002890:	2200      	movs	r2, #0
 8002892:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 4;
 8002894:	2304      	movs	r3, #4
 8002896:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002898:	230f      	movs	r3, #15
 800289a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 40;
 800289c:	2328      	movs	r3, #40	; 0x28
 800289e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80028a4:	2310      	movs	r3, #16
 80028a6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80028a8:	2311      	movs	r3, #17
 80028aa:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	2200      	movs	r2, #0
 80028b4:	4619      	mov	r1, r3
 80028b6:	4806      	ldr	r0, [pc, #24]	; (80028d0 <MX_FSMC_Init+0xb8>)
 80028b8:	f007 fe5a 	bl	800a570 <HAL_SRAM_Init>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80028c2:	f000 fa57 	bl	8002d74 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80028c6:	bf00      	nop
 80028c8:	3720      	adds	r7, #32
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200013b8 	.word	0x200013b8
 80028d4:	a0000104 	.word	0xa0000104

080028d8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80028ec:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <HAL_FSMC_MspInit+0x88>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d131      	bne.n	8002958 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80028f4:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <HAL_FSMC_MspInit+0x88>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	603b      	str	r3, [r7, #0]
 80028fe:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_FSMC_MspInit+0x8c>)
 8002900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002902:	4a18      	ldr	r2, [pc, #96]	; (8002964 <HAL_FSMC_MspInit+0x8c>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6393      	str	r3, [r2, #56]	; 0x38
 800290a:	4b16      	ldr	r3, [pc, #88]	; (8002964 <HAL_FSMC_MspInit+0x8c>)
 800290c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002916:	f64f 7380 	movw	r3, #65408	; 0xff80
 800291a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002924:	2303      	movs	r3, #3
 8002926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002928:	230c      	movs	r3, #12
 800292a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800292c:	1d3b      	adds	r3, r7, #4
 800292e:	4619      	mov	r1, r3
 8002930:	480d      	ldr	r0, [pc, #52]	; (8002968 <HAL_FSMC_MspInit+0x90>)
 8002932:	f004 fd37 	bl	80073a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002936:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800293a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2302      	movs	r3, #2
 800293e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002944:	2303      	movs	r3, #3
 8002946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002948:	230c      	movs	r3, #12
 800294a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	4619      	mov	r1, r3
 8002950:	4806      	ldr	r0, [pc, #24]	; (800296c <HAL_FSMC_MspInit+0x94>)
 8002952:	f004 fd27 	bl	80073a4 <HAL_GPIO_Init>
 8002956:	e000      	b.n	800295a <HAL_FSMC_MspInit+0x82>
    return;
 8002958:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20001408 	.word	0x20001408
 8002964:	40023800 	.word	0x40023800
 8002968:	40021000 	.word	0x40021000
 800296c:	40020c00 	.word	0x40020c00

08002970 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002978:	f7ff ffae 	bl	80028d8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800297c:	bf00      	nop
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08c      	sub	sp, #48	; 0x30
 8002988:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298a:	f107 031c 	add.w	r3, r7, #28
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	60da      	str	r2, [r3, #12]
 8002998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	4b63      	ldr	r3, [pc, #396]	; (8002b2c <MX_GPIO_Init+0x1a8>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a62      	ldr	r2, [pc, #392]	; (8002b2c <MX_GPIO_Init+0x1a8>)
 80029a4:	f043 0310 	orr.w	r3, r3, #16
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b60      	ldr	r3, [pc, #384]	; (8002b2c <MX_GPIO_Init+0x1a8>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	4b5c      	ldr	r3, [pc, #368]	; (8002b2c <MX_GPIO_Init+0x1a8>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a5b      	ldr	r2, [pc, #364]	; (8002b2c <MX_GPIO_Init+0x1a8>)
 80029c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b59      	ldr	r3, [pc, #356]	; (8002b2c <MX_GPIO_Init+0x1a8>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	4b55      	ldr	r3, [pc, #340]	; (8002b2c <MX_GPIO_Init+0x1a8>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a54      	ldr	r2, [pc, #336]	; (8002b2c <MX_GPIO_Init+0x1a8>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b52      	ldr	r3, [pc, #328]	; (8002b2c <MX_GPIO_Init+0x1a8>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	4b4e      	ldr	r3, [pc, #312]	; (8002b2c <MX_GPIO_Init+0x1a8>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a4d      	ldr	r2, [pc, #308]	; (8002b2c <MX_GPIO_Init+0x1a8>)
 80029f8:	f043 0304 	orr.w	r3, r3, #4
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b4b      	ldr	r3, [pc, #300]	; (8002b2c <MX_GPIO_Init+0x1a8>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	4b47      	ldr	r3, [pc, #284]	; (8002b2c <MX_GPIO_Init+0x1a8>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	4a46      	ldr	r2, [pc, #280]	; (8002b2c <MX_GPIO_Init+0x1a8>)
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1a:	4b44      	ldr	r3, [pc, #272]	; (8002b2c <MX_GPIO_Init+0x1a8>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	4b40      	ldr	r3, [pc, #256]	; (8002b2c <MX_GPIO_Init+0x1a8>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	4a3f      	ldr	r2, [pc, #252]	; (8002b2c <MX_GPIO_Init+0x1a8>)
 8002a30:	f043 0308 	orr.w	r3, r3, #8
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	4b3d      	ldr	r3, [pc, #244]	; (8002b2c <MX_GPIO_Init+0x1a8>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCDTP_CS_GPIO_Port, LCDTP_CS_Pin, GPIO_PIN_RESET);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2110      	movs	r1, #16
 8002a46:	483a      	ldr	r0, [pc, #232]	; (8002b30 <MX_GPIO_Init+0x1ac>)
 8002a48:	f004 fe60 	bl	800770c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BL_PWM_GPIO_Port, BL_PWM_Pin, GPIO_PIN_RESET);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2101      	movs	r1, #1
 8002a50:	4838      	ldr	r0, [pc, #224]	; (8002b34 <MX_GPIO_Init+0x1b0>)
 8002a52:	f004 fe5b 	bl	800770c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002a56:	2200      	movs	r2, #0
 8002a58:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002a5c:	4836      	ldr	r0, [pc, #216]	; (8002b38 <MX_GPIO_Init+0x1b4>)
 8002a5e:	f004 fe55 	bl	800770c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a62:	2301      	movs	r3, #1
 8002a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002a66:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a70:	f107 031c 	add.w	r3, r7, #28
 8002a74:	4619      	mov	r1, r3
 8002a76:	4831      	ldr	r0, [pc, #196]	; (8002b3c <MX_GPIO_Init+0x1b8>)
 8002a78:	f004 fc94 	bl	80073a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCDTP_CS_Pin;
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a80:	2301      	movs	r3, #1
 8002a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a84:	2302      	movs	r3, #2
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCDTP_CS_GPIO_Port, &GPIO_InitStruct);
 8002a8c:	f107 031c 	add.w	r3, r7, #28
 8002a90:	4619      	mov	r1, r3
 8002a92:	4827      	ldr	r0, [pc, #156]	; (8002b30 <MX_GPIO_Init+0x1ac>)
 8002a94:	f004 fc86 	bl	80073a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCDTP_IRQ_Pin;
 8002a98:	2320      	movs	r3, #32
 8002a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCDTP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002aa4:	f107 031c 	add.w	r3, r7, #28
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4821      	ldr	r0, [pc, #132]	; (8002b30 <MX_GPIO_Init+0x1ac>)
 8002aac:	f004 fc7a 	bl	80073a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BL_PWM_Pin;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 8002ac0:	f107 031c 	add.w	r3, r7, #28
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	481b      	ldr	r0, [pc, #108]	; (8002b34 <MX_GPIO_Init+0x1b0>)
 8002ac8:	f004 fc6c 	bl	80073a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8002acc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	2300      	movs	r3, #0
 8002adc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ade:	f107 031c 	add.w	r3, r7, #28
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4814      	ldr	r0, [pc, #80]	; (8002b38 <MX_GPIO_Init+0x1b4>)
 8002ae6:	f004 fc5d 	bl	80073a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af0:	2302      	movs	r3, #2
 8002af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	2300      	movs	r3, #0
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002afc:	2300      	movs	r3, #0
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b00:	f107 031c 	add.w	r3, r7, #28
 8002b04:	4619      	mov	r1, r3
 8002b06:	480d      	ldr	r0, [pc, #52]	; (8002b3c <MX_GPIO_Init+0x1b8>)
 8002b08:	f004 fc4c 	bl	80073a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8002b0c:	2308      	movs	r3, #8
 8002b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8002b18:	f107 031c 	add.w	r3, r7, #28
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4806      	ldr	r0, [pc, #24]	; (8002b38 <MX_GPIO_Init+0x1b4>)
 8002b20:	f004 fc40 	bl	80073a4 <HAL_GPIO_Init>

}
 8002b24:	bf00      	nop
 8002b26:	3730      	adds	r7, #48	; 0x30
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40020800 	.word	0x40020800
 8002b34:	40020400 	.word	0x40020400
 8002b38:	40020c00 	.word	0x40020c00
 8002b3c:	40020000 	.word	0x40020000

08002b40 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <MX_I2C2_Init+0x50>)
 8002b46:	4a13      	ldr	r2, [pc, #76]	; (8002b94 <MX_I2C2_Init+0x54>)
 8002b48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002b4a:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <MX_I2C2_Init+0x50>)
 8002b4c:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <MX_I2C2_Init+0x58>)
 8002b4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <MX_I2C2_Init+0x50>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <MX_I2C2_Init+0x50>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <MX_I2C2_Init+0x50>)
 8002b5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b62:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b64:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <MX_I2C2_Init+0x50>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <MX_I2C2_Init+0x50>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <MX_I2C2_Init+0x50>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <MX_I2C2_Init+0x50>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b7c:	4804      	ldr	r0, [pc, #16]	; (8002b90 <MX_I2C2_Init+0x50>)
 8002b7e:	f001 fd37 	bl	80045f0 <HAL_I2C_Init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002b88:	f000 f8f4 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	2000140c 	.word	0x2000140c
 8002b94:	40005800 	.word	0x40005800
 8002b98:	000186a0 	.word	0x000186a0

08002b9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	; 0x28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a19      	ldr	r2, [pc, #100]	; (8002c20 <HAL_I2C_MspInit+0x84>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d12c      	bne.n	8002c18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <HAL_I2C_MspInit+0x88>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <HAL_I2C_MspInit+0x88>)
 8002bc8:	f043 0302 	orr.w	r3, r3, #2
 8002bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bce:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <HAL_I2C_MspInit+0x88>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_SIOC_Pin|I2C_SIOD_Pin;
 8002bda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002be0:	2312      	movs	r3, #18
 8002be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002be4:	2301      	movs	r3, #1
 8002be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be8:	2303      	movs	r3, #3
 8002bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002bec:	2304      	movs	r3, #4
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	480c      	ldr	r0, [pc, #48]	; (8002c28 <HAL_I2C_MspInit+0x8c>)
 8002bf8:	f004 fbd4 	bl	80073a4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <HAL_I2C_MspInit+0x88>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <HAL_I2C_MspInit+0x88>)
 8002c06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_I2C_MspInit+0x88>)
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002c18:	bf00      	nop
 8002c1a:	3728      	adds	r7, #40	; 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40005800 	.word	0x40005800
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020400 	.word	0x40020400

08002c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8002c30:	f010 fd44 	bl	80136bc <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c34:	f002 fab2 	bl	800519c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c38:	f000 f816 	bl	8002c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c3c:	f7ff fea2 	bl	8002984 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c40:	f7ff fc0c 	bl	800245c <MX_DMA_Init>
  MX_FSMC_Init();
 8002c44:	f7ff fde8 	bl	8002818 <MX_FSMC_Init>
  MX_DCMI_Init();
 8002c48:	f7ff faf0 	bl	800222c <MX_DCMI_Init>
  MX_I2C2_Init();
 8002c4c:	f7ff ff78 	bl	8002b40 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8002c50:	f000 f896 	bl	8002d80 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8002c54:	f000 f9bc 	bl	8002fd0 <MX_SPI2_Init>
  MX_FATFS_Init();
 8002c58:	f008 fdcc 	bl	800b7f4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002c5c:	f7ff fc98 	bl	8002590 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002c60:	f00c fdf2 	bl	800f848 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c64:	e7fe      	b.n	8002c64 <main+0x38>
	...

08002c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b094      	sub	sp, #80	; 0x50
 8002c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c6e:	f107 0320 	add.w	r3, r7, #32
 8002c72:	2230      	movs	r2, #48	; 0x30
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f010 fecd 	bl	8013a16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c7c:	f107 030c 	add.w	r3, r7, #12
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <SystemClock_Config+0xe0>)
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	4a2c      	ldr	r2, [pc, #176]	; (8002d48 <SystemClock_Config+0xe0>)
 8002c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9c:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <SystemClock_Config+0xe0>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ca8:	2300      	movs	r3, #0
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	4b27      	ldr	r3, [pc, #156]	; (8002d4c <SystemClock_Config+0xe4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a26      	ldr	r2, [pc, #152]	; (8002d4c <SystemClock_Config+0xe4>)
 8002cb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <SystemClock_Config+0xe4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc0:	607b      	str	r3, [r7, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cd2:	2310      	movs	r3, #16
 8002cd4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002ce4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002ce8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cea:	2302      	movs	r3, #2
 8002cec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002cee:	2307      	movs	r3, #7
 8002cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cf2:	f107 0320 	add.w	r3, r7, #32
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f004 fd22 	bl	8007740 <HAL_RCC_OscConfig>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002d02:	f000 f837 	bl	8002d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d06:	230f      	movs	r3, #15
 8002d08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d1e:	f107 030c 	add.w	r3, r7, #12
 8002d22:	2105      	movs	r1, #5
 8002d24:	4618      	mov	r0, r3
 8002d26:	f004 ff83 	bl	8007c30 <HAL_RCC_ClockConfig>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002d30:	f000 f820 	bl	8002d74 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8002d34:	2200      	movs	r2, #0
 8002d36:	2100      	movs	r1, #0
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f005 f85f 	bl	8007dfc <HAL_RCC_MCOConfig>
}
 8002d3e:	bf00      	nop
 8002d40:	3750      	adds	r7, #80	; 0x50
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40007000 	.word	0x40007000

08002d50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d62:	f002 fa3d 	bl	80051e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40001000 	.word	0x40001000

08002d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d78:	b672      	cpsid	i
}
 8002d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d7c:	e7fe      	b.n	8002d7c <Error_Handler+0x8>
	...

08002d80 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002d84:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <MX_SDIO_SD_Init+0x5c>)
 8002d86:	4a16      	ldr	r2, [pc, #88]	; (8002de0 <MX_SDIO_SD_Init+0x60>)
 8002d88:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002d8a:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <MX_SDIO_SD_Init+0x5c>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002d90:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <MX_SDIO_SD_Init+0x5c>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002d96:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <MX_SDIO_SD_Init+0x5c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <MX_SDIO_SD_Init+0x5c>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002da2:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <MX_SDIO_SD_Init+0x5c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <MX_SDIO_SD_Init+0x5c>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  if (HAL_SD_Init(&hsd) != HAL_OK) {
 8002dae:	480b      	ldr	r0, [pc, #44]	; (8002ddc <MX_SDIO_SD_Init+0x5c>)
 8002db0:	f005 f9e4 	bl	800817c <HAL_SD_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <MX_SDIO_SD_Init+0x40>
	  printf("ERROR: SD Init error\n");
 8002dba:	480a      	ldr	r0, [pc, #40]	; (8002de4 <MX_SDIO_SD_Init+0x64>)
 8002dbc:	f011 fbb8 	bl	8014530 <puts>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK) {
 8002dc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002dc4:	4805      	ldr	r0, [pc, #20]	; (8002ddc <MX_SDIO_SD_Init+0x5c>)
 8002dc6:	f005 ffb1 	bl	8008d2c <HAL_SD_ConfigWideBusOperation>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <MX_SDIO_SD_Init+0x56>
	  printf("ERROR: WideBus Config error\n");
 8002dd0:	4805      	ldr	r0, [pc, #20]	; (8002de8 <MX_SDIO_SD_Init+0x68>)
 8002dd2:	f011 fbad 	bl	8014530 <puts>
  }
  /* USER CODE END SDIO_Init 2 */

}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20001460 	.word	0x20001460
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	08016ac8 	.word	0x08016ac8
 8002de8:	08016ae0 	.word	0x08016ae0

08002dec <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	; 0x28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a69      	ldr	r2, [pc, #420]	; (8002fb0 <HAL_SD_MspInit+0x1c4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	f040 80cb 	bne.w	8002fa6 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002e10:	2300      	movs	r3, #0
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	4b67      	ldr	r3, [pc, #412]	; (8002fb4 <HAL_SD_MspInit+0x1c8>)
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	4a66      	ldr	r2, [pc, #408]	; (8002fb4 <HAL_SD_MspInit+0x1c8>)
 8002e1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e1e:	6453      	str	r3, [r2, #68]	; 0x44
 8002e20:	4b64      	ldr	r3, [pc, #400]	; (8002fb4 <HAL_SD_MspInit+0x1c8>)
 8002e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	4b60      	ldr	r3, [pc, #384]	; (8002fb4 <HAL_SD_MspInit+0x1c8>)
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	4a5f      	ldr	r2, [pc, #380]	; (8002fb4 <HAL_SD_MspInit+0x1c8>)
 8002e36:	f043 0304 	orr.w	r3, r3, #4
 8002e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3c:	4b5d      	ldr	r3, [pc, #372]	; (8002fb4 <HAL_SD_MspInit+0x1c8>)
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	4b59      	ldr	r3, [pc, #356]	; (8002fb4 <HAL_SD_MspInit+0x1c8>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	4a58      	ldr	r2, [pc, #352]	; (8002fb4 <HAL_SD_MspInit+0x1c8>)
 8002e52:	f043 0308 	orr.w	r3, r3, #8
 8002e56:	6313      	str	r3, [r2, #48]	; 0x30
 8002e58:	4b56      	ldr	r3, [pc, #344]	; (8002fb4 <HAL_SD_MspInit+0x1c8>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002e64:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e72:	2303      	movs	r3, #3
 8002e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002e76:	230c      	movs	r3, #12
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e7a:	f107 0314 	add.w	r3, r7, #20
 8002e7e:	4619      	mov	r1, r3
 8002e80:	484d      	ldr	r0, [pc, #308]	; (8002fb8 <HAL_SD_MspInit+0x1cc>)
 8002e82:	f004 fa8f 	bl	80073a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e86:	2304      	movs	r3, #4
 8002e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e92:	2303      	movs	r3, #3
 8002e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002e96:	230c      	movs	r3, #12
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e9a:	f107 0314 	add.w	r3, r7, #20
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4846      	ldr	r0, [pc, #280]	; (8002fbc <HAL_SD_MspInit+0x1d0>)
 8002ea2:	f004 fa7f 	bl	80073a4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002ea6:	4b46      	ldr	r3, [pc, #280]	; (8002fc0 <HAL_SD_MspInit+0x1d4>)
 8002ea8:	4a46      	ldr	r2, [pc, #280]	; (8002fc4 <HAL_SD_MspInit+0x1d8>)
 8002eaa:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002eac:	4b44      	ldr	r3, [pc, #272]	; (8002fc0 <HAL_SD_MspInit+0x1d4>)
 8002eae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002eb2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eb4:	4b42      	ldr	r3, [pc, #264]	; (8002fc0 <HAL_SD_MspInit+0x1d4>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eba:	4b41      	ldr	r3, [pc, #260]	; (8002fc0 <HAL_SD_MspInit+0x1d4>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ec0:	4b3f      	ldr	r3, [pc, #252]	; (8002fc0 <HAL_SD_MspInit+0x1d4>)
 8002ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ec6:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ec8:	4b3d      	ldr	r3, [pc, #244]	; (8002fc0 <HAL_SD_MspInit+0x1d4>)
 8002eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ece:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ed0:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_SD_MspInit+0x1d4>)
 8002ed2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ed6:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002ed8:	4b39      	ldr	r3, [pc, #228]	; (8002fc0 <HAL_SD_MspInit+0x1d4>)
 8002eda:	2220      	movs	r2, #32
 8002edc:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ede:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <HAL_SD_MspInit+0x1d4>)
 8002ee0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ee4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002ee6:	4b36      	ldr	r3, [pc, #216]	; (8002fc0 <HAL_SD_MspInit+0x1d4>)
 8002ee8:	2204      	movs	r2, #4
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002eec:	4b34      	ldr	r3, [pc, #208]	; (8002fc0 <HAL_SD_MspInit+0x1d4>)
 8002eee:	2203      	movs	r2, #3
 8002ef0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002ef2:	4b33      	ldr	r3, [pc, #204]	; (8002fc0 <HAL_SD_MspInit+0x1d4>)
 8002ef4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ef8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002efa:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <HAL_SD_MspInit+0x1d4>)
 8002efc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002f02:	482f      	ldr	r0, [pc, #188]	; (8002fc0 <HAL_SD_MspInit+0x1d4>)
 8002f04:	f002 fcd4 	bl	80058b0 <HAL_DMA_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8002f0e:	f7ff ff31 	bl	8002d74 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a2a      	ldr	r2, [pc, #168]	; (8002fc0 <HAL_SD_MspInit+0x1d4>)
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
 8002f18:	4a29      	ldr	r2, [pc, #164]	; (8002fc0 <HAL_SD_MspInit+0x1d4>)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002f1e:	4b2a      	ldr	r3, [pc, #168]	; (8002fc8 <HAL_SD_MspInit+0x1dc>)
 8002f20:	4a2a      	ldr	r2, [pc, #168]	; (8002fcc <HAL_SD_MspInit+0x1e0>)
 8002f22:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002f24:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <HAL_SD_MspInit+0x1dc>)
 8002f26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f2a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f2c:	4b26      	ldr	r3, [pc, #152]	; (8002fc8 <HAL_SD_MspInit+0x1dc>)
 8002f2e:	2240      	movs	r2, #64	; 0x40
 8002f30:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f32:	4b25      	ldr	r3, [pc, #148]	; (8002fc8 <HAL_SD_MspInit+0x1dc>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f38:	4b23      	ldr	r3, [pc, #140]	; (8002fc8 <HAL_SD_MspInit+0x1dc>)
 8002f3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f3e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f40:	4b21      	ldr	r3, [pc, #132]	; (8002fc8 <HAL_SD_MspInit+0x1dc>)
 8002f42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f46:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f48:	4b1f      	ldr	r3, [pc, #124]	; (8002fc8 <HAL_SD_MspInit+0x1dc>)
 8002f4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f4e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002f50:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <HAL_SD_MspInit+0x1dc>)
 8002f52:	2220      	movs	r2, #32
 8002f54:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f56:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <HAL_SD_MspInit+0x1dc>)
 8002f58:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f5c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <HAL_SD_MspInit+0x1dc>)
 8002f60:	2204      	movs	r2, #4
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002f64:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <HAL_SD_MspInit+0x1dc>)
 8002f66:	2203      	movs	r2, #3
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002f6a:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <HAL_SD_MspInit+0x1dc>)
 8002f6c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002f70:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <HAL_SD_MspInit+0x1dc>)
 8002f74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f78:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002f7a:	4813      	ldr	r0, [pc, #76]	; (8002fc8 <HAL_SD_MspInit+0x1dc>)
 8002f7c:	f002 fc98 	bl	80058b0 <HAL_DMA_Init>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8002f86:	f7ff fef5 	bl	8002d74 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a0e      	ldr	r2, [pc, #56]	; (8002fc8 <HAL_SD_MspInit+0x1dc>)
 8002f8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f90:	4a0d      	ldr	r2, [pc, #52]	; (8002fc8 <HAL_SD_MspInit+0x1dc>)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8002f96:	2200      	movs	r2, #0
 8002f98:	2105      	movs	r1, #5
 8002f9a:	2031      	movs	r0, #49	; 0x31
 8002f9c:	f002 fa1c 	bl	80053d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002fa0:	2031      	movs	r0, #49	; 0x31
 8002fa2:	f002 fa35 	bl	8005410 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	3728      	adds	r7, #40	; 0x28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40012c00 	.word	0x40012c00
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40020800 	.word	0x40020800
 8002fbc:	40020c00 	.word	0x40020c00
 8002fc0:	200014e4 	.word	0x200014e4
 8002fc4:	40026458 	.word	0x40026458
 8002fc8:	20001544 	.word	0x20001544
 8002fcc:	400264a0 	.word	0x400264a0

08002fd0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002fd4:	4b17      	ldr	r3, [pc, #92]	; (8003034 <MX_SPI2_Init+0x64>)
 8002fd6:	4a18      	ldr	r2, [pc, #96]	; (8003038 <MX_SPI2_Init+0x68>)
 8002fd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <MX_SPI2_Init+0x64>)
 8002fdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fe0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002fe2:	4b14      	ldr	r3, [pc, #80]	; (8003034 <MX_SPI2_Init+0x64>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fe8:	4b12      	ldr	r3, [pc, #72]	; (8003034 <MX_SPI2_Init+0x64>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <MX_SPI2_Init+0x64>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <MX_SPI2_Init+0x64>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ffa:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <MX_SPI2_Init+0x64>)
 8002ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003000:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003002:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <MX_SPI2_Init+0x64>)
 8003004:	2220      	movs	r2, #32
 8003006:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <MX_SPI2_Init+0x64>)
 800300a:	2200      	movs	r2, #0
 800300c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <MX_SPI2_Init+0x64>)
 8003010:	2200      	movs	r2, #0
 8003012:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003014:	4b07      	ldr	r3, [pc, #28]	; (8003034 <MX_SPI2_Init+0x64>)
 8003016:	2200      	movs	r2, #0
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <MX_SPI2_Init+0x64>)
 800301c:	220a      	movs	r2, #10
 800301e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003020:	4804      	ldr	r0, [pc, #16]	; (8003034 <MX_SPI2_Init+0x64>)
 8003022:	f006 fbde 	bl	80097e2 <HAL_SPI_Init>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800302c:	f7ff fea2 	bl	8002d74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	200015a4 	.word	0x200015a4
 8003038:	40003800 	.word	0x40003800

0800303c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003044:	f107 0314 	add.w	r3, r7, #20
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	60da      	str	r2, [r3, #12]
 8003052:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <HAL_SPI_MspInit+0x94>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d134      	bne.n	80030c8 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	4b1c      	ldr	r3, [pc, #112]	; (80030d4 <HAL_SPI_MspInit+0x98>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	4a1b      	ldr	r2, [pc, #108]	; (80030d4 <HAL_SPI_MspInit+0x98>)
 8003068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800306c:	6413      	str	r3, [r2, #64]	; 0x40
 800306e:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_SPI_MspInit+0x98>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <HAL_SPI_MspInit+0x98>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	4a14      	ldr	r2, [pc, #80]	; (80030d4 <HAL_SPI_MspInit+0x98>)
 8003084:	f043 0302 	orr.w	r3, r3, #2
 8003088:	6313      	str	r3, [r2, #48]	; 0x30
 800308a:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_SPI_MspInit+0x98>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCDTP_CLK_Pin|LCDTP_DOUT_Pin|LCDTP_DIN_Pin;
 8003096:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800309a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	2302      	movs	r3, #2
 800309e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a4:	2303      	movs	r3, #3
 80030a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030a8:	2305      	movs	r3, #5
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	4619      	mov	r1, r3
 80030b2:	4809      	ldr	r0, [pc, #36]	; (80030d8 <HAL_SPI_MspInit+0x9c>)
 80030b4:	f004 f976 	bl	80073a4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80030b8:	2200      	movs	r2, #0
 80030ba:	2105      	movs	r1, #5
 80030bc:	2024      	movs	r0, #36	; 0x24
 80030be:	f002 f98b 	bl	80053d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80030c2:	2024      	movs	r0, #36	; 0x24
 80030c4:	f002 f9a4 	bl	8005410 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80030c8:	bf00      	nop
 80030ca:	3728      	adds	r7, #40	; 0x28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40003800 	.word	0x40003800
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40020400 	.word	0x40020400

080030dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	4b12      	ldr	r3, [pc, #72]	; (8003130 <HAL_MspInit+0x54>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	4a11      	ldr	r2, [pc, #68]	; (8003130 <HAL_MspInit+0x54>)
 80030ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f0:	6453      	str	r3, [r2, #68]	; 0x44
 80030f2:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <HAL_MspInit+0x54>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fa:	607b      	str	r3, [r7, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	603b      	str	r3, [r7, #0]
 8003102:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_MspInit+0x54>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <HAL_MspInit+0x54>)
 8003108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310c:	6413      	str	r3, [r2, #64]	; 0x40
 800310e:	4b08      	ldr	r3, [pc, #32]	; (8003130 <HAL_MspInit+0x54>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800311a:	2200      	movs	r2, #0
 800311c:	210f      	movs	r1, #15
 800311e:	f06f 0001 	mvn.w	r0, #1
 8003122:	f002 f959 	bl	80053d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800

08003134 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08e      	sub	sp, #56	; 0x38
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	4b33      	ldr	r3, [pc, #204]	; (8003218 <HAL_InitTick+0xe4>)
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	4a32      	ldr	r2, [pc, #200]	; (8003218 <HAL_InitTick+0xe4>)
 800314e:	f043 0310 	orr.w	r3, r3, #16
 8003152:	6413      	str	r3, [r2, #64]	; 0x40
 8003154:	4b30      	ldr	r3, [pc, #192]	; (8003218 <HAL_InitTick+0xe4>)
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003160:	f107 0210 	add.w	r2, r7, #16
 8003164:	f107 0314 	add.w	r3, r7, #20
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f004 ffd4 	bl	8008118 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800317a:	f004 ffb9 	bl	80080f0 <HAL_RCC_GetPCLK1Freq>
 800317e:	6378      	str	r0, [r7, #52]	; 0x34
 8003180:	e004      	b.n	800318c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003182:	f004 ffb5 	bl	80080f0 <HAL_RCC_GetPCLK1Freq>
 8003186:	4603      	mov	r3, r0
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800318c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800318e:	4a23      	ldr	r2, [pc, #140]	; (800321c <HAL_InitTick+0xe8>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	0c9b      	lsrs	r3, r3, #18
 8003196:	3b01      	subs	r3, #1
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800319a:	4b21      	ldr	r3, [pc, #132]	; (8003220 <HAL_InitTick+0xec>)
 800319c:	4a21      	ldr	r2, [pc, #132]	; (8003224 <HAL_InitTick+0xf0>)
 800319e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80031a0:	4b1f      	ldr	r3, [pc, #124]	; (8003220 <HAL_InitTick+0xec>)
 80031a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031a6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80031a8:	4a1d      	ldr	r2, [pc, #116]	; (8003220 <HAL_InitTick+0xec>)
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80031ae:	4b1c      	ldr	r3, [pc, #112]	; (8003220 <HAL_InitTick+0xec>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031b4:	4b1a      	ldr	r3, [pc, #104]	; (8003220 <HAL_InitTick+0xec>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ba:	4b19      	ldr	r3, [pc, #100]	; (8003220 <HAL_InitTick+0xec>)
 80031bc:	2200      	movs	r2, #0
 80031be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80031c0:	4817      	ldr	r0, [pc, #92]	; (8003220 <HAL_InitTick+0xec>)
 80031c2:	f007 fa1d 	bl	800a600 <HAL_TIM_Base_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80031cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d11b      	bne.n	800320c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80031d4:	4812      	ldr	r0, [pc, #72]	; (8003220 <HAL_InitTick+0xec>)
 80031d6:	f007 fa6d 	bl	800a6b4 <HAL_TIM_Base_Start_IT>
 80031da:	4603      	mov	r3, r0
 80031dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80031e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d111      	bne.n	800320c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031e8:	2036      	movs	r0, #54	; 0x36
 80031ea:	f002 f911 	bl	8005410 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b0f      	cmp	r3, #15
 80031f2:	d808      	bhi.n	8003206 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80031f4:	2200      	movs	r2, #0
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	2036      	movs	r0, #54	; 0x36
 80031fa:	f002 f8ed 	bl	80053d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031fe:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <HAL_InitTick+0xf4>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	e002      	b.n	800320c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800320c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003210:	4618      	mov	r0, r3
 8003212:	3738      	adds	r7, #56	; 0x38
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40023800 	.word	0x40023800
 800321c:	431bde83 	.word	0x431bde83
 8003220:	200015fc 	.word	0x200015fc
 8003224:	40001000 	.word	0x40001000
 8003228:	200000b0 	.word	0x200000b0

0800322c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003230:	e7fe      	b.n	8003230 <NMI_Handler+0x4>

08003232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003232:	b480      	push	{r7}
 8003234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003236:	e7fe      	b.n	8003236 <HardFault_Handler+0x4>

08003238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800323c:	e7fe      	b.n	800323c <MemManage_Handler+0x4>

0800323e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800323e:	b480      	push	{r7}
 8003240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003242:	e7fe      	b.n	8003242 <BusFault_Handler+0x4>

08003244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003248:	e7fe      	b.n	8003248 <UsageFault_Handler+0x4>

0800324a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800324a:	b480      	push	{r7}
 800324c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800325c:	4802      	ldr	r0, [pc, #8]	; (8003268 <SPI2_IRQHandler+0x10>)
 800325e:	f006 ff39 	bl	800a0d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	200015a4 	.word	0x200015a4

0800326c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003270:	4802      	ldr	r0, [pc, #8]	; (800327c <SDIO_IRQHandler+0x10>)
 8003272:	f005 f9fb 	bl	800866c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20001460 	.word	0x20001460

08003280 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003284:	4802      	ldr	r0, [pc, #8]	; (8003290 <TIM6_DAC_IRQHandler+0x10>)
 8003286:	f007 fa85 	bl	800a794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	200015fc 	.word	0x200015fc

08003294 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003298:	4802      	ldr	r0, [pc, #8]	; (80032a4 <DMA2_Stream1_IRQHandler+0x10>)
 800329a:	f002 fc31 	bl	8005b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20000c14 	.word	0x20000c14

080032a8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80032ac:	4802      	ldr	r0, [pc, #8]	; (80032b8 <DMA2_Stream3_IRQHandler+0x10>)
 80032ae:	f002 fc27 	bl	8005b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	200014e4 	.word	0x200014e4

080032bc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80032c0:	4802      	ldr	r0, [pc, #8]	; (80032cc <DMA2_Stream6_IRQHandler+0x10>)
 80032c2:	f002 fc1d 	bl	8005b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20001544 	.word	0x20001544

080032d0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80032d4:	4802      	ldr	r0, [pc, #8]	; (80032e0 <DCMI_IRQHandler+0x10>)
 80032d6:	f002 f949 	bl	800556c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000bd4 	.word	0x20000bd4

080032e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032ec:	4a14      	ldr	r2, [pc, #80]	; (8003340 <_sbrk+0x5c>)
 80032ee:	4b15      	ldr	r3, [pc, #84]	; (8003344 <_sbrk+0x60>)
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032f8:	4b13      	ldr	r3, [pc, #76]	; (8003348 <_sbrk+0x64>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d102      	bne.n	8003306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <_sbrk+0x64>)
 8003302:	4a12      	ldr	r2, [pc, #72]	; (800334c <_sbrk+0x68>)
 8003304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <_sbrk+0x64>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	429a      	cmp	r2, r3
 8003312:	d207      	bcs.n	8003324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003314:	f010 fa4e 	bl	80137b4 <__errno>
 8003318:	4603      	mov	r3, r0
 800331a:	220c      	movs	r2, #12
 800331c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800331e:	f04f 33ff 	mov.w	r3, #4294967295
 8003322:	e009      	b.n	8003338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003324:	4b08      	ldr	r3, [pc, #32]	; (8003348 <_sbrk+0x64>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800332a:	4b07      	ldr	r3, [pc, #28]	; (8003348 <_sbrk+0x64>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	4a05      	ldr	r2, [pc, #20]	; (8003348 <_sbrk+0x64>)
 8003334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003336:	68fb      	ldr	r3, [r7, #12]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20020000 	.word	0x20020000
 8003344:	00000400 	.word	0x00000400
 8003348:	20001644 	.word	0x20001644
 800334c:	20005c20 	.word	0x20005c20

08003350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <SystemInit+0x20>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	4a05      	ldr	r2, [pc, #20]	; (8003370 <SystemInit+0x20>)
 800335c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003378:	480d      	ldr	r0, [pc, #52]	; (80033b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800337a:	490e      	ldr	r1, [pc, #56]	; (80033b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800337c:	4a0e      	ldr	r2, [pc, #56]	; (80033b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800337e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003380:	e002      	b.n	8003388 <LoopCopyDataInit>

08003382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003386:	3304      	adds	r3, #4

08003388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800338a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800338c:	d3f9      	bcc.n	8003382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800338e:	4a0b      	ldr	r2, [pc, #44]	; (80033bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003390:	4c0b      	ldr	r4, [pc, #44]	; (80033c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003394:	e001      	b.n	800339a <LoopFillZerobss>

08003396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003398:	3204      	adds	r2, #4

0800339a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800339a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800339c:	d3fb      	bcc.n	8003396 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800339e:	f7ff ffd7 	bl	8003350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033a2:	f010 fb03 	bl	80139ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033a6:	f7ff fc41 	bl	8002c2c <main>
  bx  lr    
 80033aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80033ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033b4:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 80033b8:	0801ae0c 	.word	0x0801ae0c
  ldr r2, =_sbss
 80033bc:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 80033c0:	20005c1c 	.word	0x20005c1c

080033c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033c4:	e7fe      	b.n	80033c4 <ADC_IRQHandler>

080033c6 <LCD_IO_Init>:
/**
  * @brief  Configures the LCD_SPI interface.
  * @retval None
  */
void LCD_IO_Init(void)
{
 80033c6:	b480      	push	{r7}
 80033c8:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
//  HAL_Delay(100);
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
//  HAL_Delay(300);

}
 80033ca:	bf00      	nop
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <LCD_IO_WriteMultipleData>:
  * @param  pData Pointer on the register value
  * @param  Size Size of byte to transmit to the register
  * @retval None
  */
void LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t counter = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]

  for (counter = Size; counter != 0; counter--)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e00c      	b.n	8003402 <LCD_IO_WriteMultipleData+0x2e>
  {
    /* Write 16-bit Data */
    LCD_RAM = *(uint16_t *)pData;
 80033e8:	4a0b      	ldr	r2, [pc, #44]	; (8003418 <LCD_IO_WriteMultipleData+0x44>)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	8013      	strh	r3, [r2, #0]
    counter--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	60fb      	str	r3, [r7, #12]
    pData += 2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3302      	adds	r3, #2
 80033fa:	607b      	str	r3, [r7, #4]
  for (counter = Size; counter != 0; counter--)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	3b01      	subs	r3, #1
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1ef      	bne.n	80033e8 <LCD_IO_WriteMultipleData+0x14>
  }
}
 8003408:	bf00      	nop
 800340a:	bf00      	nop
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	60020000 	.word	0x60020000

0800341c <LCD_IO_WriteReg>:
  * @brief  register address.
  * @param  Reg
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Data */
  LCD_REG  = (uint16_t)Reg;
 8003426:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800342a:	79fa      	ldrb	r2, [r7, #7]
 800342c:	b292      	uxth	r2, r2
 800342e:	801a      	strh	r2, [r3, #0]

}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LCD_IO_ReadData>:
  * @brief  Read register value.
  * @param  Reg
  * @retval None
  */
uint16_t LCD_IO_ReadData(void) 
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  /* Read 16-bit Reg */
  return (uint16_t)LCD_RAM;
 8003440:	4b03      	ldr	r3, [pc, #12]	; (8003450 <LCD_IO_ReadData+0x14>)
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	b29b      	uxth	r3, r3
  
}
 8003446:	4618      	mov	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	60020000 	.word	0x60020000

08003454 <ili9325_Init>:
  * @brief  Initialize the ILI9325 LCD Component.
  * @param  None
  * @retval None
  */
void ili9325_Init(void)
{  
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* Initialize ILI9325 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003458:	f7ff ffb5 	bl	80033c6 <LCD_IO_Init>
  
  /* Start Initial Sequence --------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
 800345c:	2101      	movs	r1, #1
 800345e:	2000      	movs	r0, #0
 8003460:	f000 f9a7 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
 8003464:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003468:	2001      	movs	r0, #1
 800346a:	f000 f9a2 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
 800346e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003472:	2002      	movs	r0, #2
 8003474:	f000 f99d 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
 8003478:	f241 0118 	movw	r1, #4120	; 0x1018
 800347c:	2003      	movs	r0, #3
 800347e:	f000 f998 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
 8003482:	2100      	movs	r1, #0
 8003484:	2004      	movs	r0, #4
 8003486:	f000 f994 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
 800348a:	f240 2102 	movw	r1, #514	; 0x202
 800348e:	2008      	movs	r0, #8
 8003490:	f000 f98f 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
 8003494:	2100      	movs	r1, #0
 8003496:	2009      	movs	r0, #9
 8003498:	f000 f98b 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 800349c:	2100      	movs	r1, #0
 800349e:	200a      	movs	r0, #10
 80034a0:	f000 f987 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 80034a4:	2100      	movs	r1, #0
 80034a6:	200c      	movs	r0, #12
 80034a8:	f000 f983 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 80034ac:	2100      	movs	r1, #0
 80034ae:	200d      	movs	r0, #13
 80034b0:	f000 f97f 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 80034b4:	2100      	movs	r1, #0
 80034b6:	200f      	movs	r0, #15
 80034b8:	f000 f97b 	bl	80037b2 <ili9325_WriteReg>
  
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80034bc:	2100      	movs	r1, #0
 80034be:	2010      	movs	r0, #16
 80034c0:	f000 f977 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80034c4:	2100      	movs	r1, #0
 80034c6:	2011      	movs	r0, #17
 80034c8:	f000 f973 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 80034cc:	2100      	movs	r1, #0
 80034ce:	2012      	movs	r0, #18
 80034d0:	f000 f96f 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 80034d4:	2100      	movs	r1, #0
 80034d6:	2013      	movs	r0, #19
 80034d8:	f000 f96b 	bl	80037b2 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80034dc:	f241 71b0 	movw	r1, #6064	; 0x17b0
 80034e0:	2010      	movs	r0, #16
 80034e2:	f000 f966 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80034e6:	f240 1137 	movw	r1, #311	; 0x137
 80034ea:	2011      	movs	r0, #17
 80034ec:	f000 f961 	bl	80037b2 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 80034f0:	f240 1139 	movw	r1, #313	; 0x139
 80034f4:	2012      	movs	r0, #18
 80034f6:	f000 f95c 	bl	80037b2 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 80034fa:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 80034fe:	2013      	movs	r0, #19
 8003500:	f000 f957 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8003504:	2113      	movs	r1, #19
 8003506:	2029      	movs	r0, #41	; 0x29
 8003508:	f000 f953 	bl	80037b2 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 800350c:	2100      	movs	r1, #0
 800350e:	2020      	movs	r0, #32
 8003510:	f000 f94f 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 8003514:	2100      	movs	r1, #0
 8003516:	2021      	movs	r0, #33	; 0x21
 8003518:	f000 f94b 	bl	80037b2 <ili9325_WriteReg>

  /* Adjust the Gamma Curve (ILI9325) ----------------------------------------*/
  ili9325_WriteReg(LCD_REG_48, 0x0007);
 800351c:	2107      	movs	r1, #7
 800351e:	2030      	movs	r0, #48	; 0x30
 8003520:	f000 f947 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_49, 0x0302);
 8003524:	f240 3102 	movw	r1, #770	; 0x302
 8003528:	2031      	movs	r0, #49	; 0x31
 800352a:	f000 f942 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_50, 0x0105);
 800352e:	f240 1105 	movw	r1, #261	; 0x105
 8003532:	2032      	movs	r0, #50	; 0x32
 8003534:	f000 f93d 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_53, 0x0206);
 8003538:	f240 2106 	movw	r1, #518	; 0x206
 800353c:	2035      	movs	r0, #53	; 0x35
 800353e:	f000 f938 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_54, 0x0808);
 8003542:	f640 0108 	movw	r1, #2056	; 0x808
 8003546:	2036      	movs	r0, #54	; 0x36
 8003548:	f000 f933 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_55, 0x0206);
 800354c:	f240 2106 	movw	r1, #518	; 0x206
 8003550:	2037      	movs	r0, #55	; 0x37
 8003552:	f000 f92e 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_56, 0x0504);
 8003556:	f240 5104 	movw	r1, #1284	; 0x504
 800355a:	2038      	movs	r0, #56	; 0x38
 800355c:	f000 f929 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_57, 0x0007);
 8003560:	2107      	movs	r1, #7
 8003562:	2039      	movs	r0, #57	; 0x39
 8003564:	f000 f925 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_60, 0x0105);
 8003568:	f240 1105 	movw	r1, #261	; 0x105
 800356c:	203c      	movs	r0, #60	; 0x3c
 800356e:	f000 f920 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_61, 0x0808);
 8003572:	f640 0108 	movw	r1, #2056	; 0x808
 8003576:	203d      	movs	r0, #61	; 0x3d
 8003578:	f000 f91b 	bl	80037b2 <ili9325_WriteReg>
  HAL_Delay(50); 
 800357c:	2032      	movs	r0, #50	; 0x32
 800357e:	f001 fe4f 	bl	8005220 <HAL_Delay>
  /* Set GRAM area -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 8003582:	2100      	movs	r1, #0
 8003584:	2050      	movs	r0, #80	; 0x50
 8003586:	f000 f914 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 800358a:	21ef      	movs	r1, #239	; 0xef
 800358c:	2051      	movs	r0, #81	; 0x51
 800358e:	f000 f910 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 8003592:	2100      	movs	r1, #0
 8003594:	2052      	movs	r0, #82	; 0x52
 8003596:	f000 f90c 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 800359a:	f240 113f 	movw	r1, #319	; 0x13f
 800359e:	2053      	movs	r0, #83	; 0x53
 80035a0:	f000 f907 	bl	80037b2 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
 80035a4:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80035a8:	2060      	movs	r0, #96	; 0x60
 80035aa:	f000 f902 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 80035ae:	2101      	movs	r1, #1
 80035b0:	2061      	movs	r0, #97	; 0x61
 80035b2:	f000 f8fe 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 80035b6:	2100      	movs	r1, #0
 80035b8:	206a      	movs	r0, #106	; 0x6a
 80035ba:	f000 f8fa 	bl	80037b2 <ili9325_WriteReg>
  
  /* Partial Display Control -------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_128, 0x0000);
 80035be:	2100      	movs	r1, #0
 80035c0:	2080      	movs	r0, #128	; 0x80
 80035c2:	f000 f8f6 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_129, 0x0000);
 80035c6:	2100      	movs	r1, #0
 80035c8:	2081      	movs	r0, #129	; 0x81
 80035ca:	f000 f8f2 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_130, 0x0000);
 80035ce:	2100      	movs	r1, #0
 80035d0:	2082      	movs	r0, #130	; 0x82
 80035d2:	f000 f8ee 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_131, 0x0000);
 80035d6:	2100      	movs	r1, #0
 80035d8:	2083      	movs	r0, #131	; 0x83
 80035da:	f000 f8ea 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_132, 0x0000);
 80035de:	2100      	movs	r1, #0
 80035e0:	2084      	movs	r0, #132	; 0x84
 80035e2:	f000 f8e6 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_133, 0x0000);
 80035e6:	2100      	movs	r1, #0
 80035e8:	2085      	movs	r0, #133	; 0x85
 80035ea:	f000 f8e2 	bl	80037b2 <ili9325_WriteReg>
  
  /* Panel Control -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_144, 0x0010);
 80035ee:	2110      	movs	r1, #16
 80035f0:	2090      	movs	r0, #144	; 0x90
 80035f2:	f000 f8de 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_146, 0x0000);
 80035f6:	2100      	movs	r1, #0
 80035f8:	2092      	movs	r0, #146	; 0x92
 80035fa:	f000 f8da 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_147, 0x0003);
 80035fe:	2103      	movs	r1, #3
 8003600:	2093      	movs	r0, #147	; 0x93
 8003602:	f000 f8d6 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_149, 0x0110);
 8003606:	f44f 7188 	mov.w	r1, #272	; 0x110
 800360a:	2095      	movs	r0, #149	; 0x95
 800360c:	f000 f8d1 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_151, 0x0000);
 8003610:	2100      	movs	r1, #0
 8003612:	2097      	movs	r0, #151	; 0x97
 8003614:	f000 f8cd 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_152, 0x0000);
 8003618:	2100      	movs	r1, #0
 800361a:	2098      	movs	r0, #152	; 0x98
 800361c:	f000 f8c9 	bl	80037b2 <ili9325_WriteReg>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 8003620:	f241 0128 	movw	r1, #4136	; 0x1028
 8003624:	2003      	movs	r0, #3
 8003626:	f000 f8c4 	bl	80037b2 <ili9325_WriteReg>
  
  /* 262K color and display ON */ 
  ili9325_WriteReg(LCD_REG_7, 0x0173);    
 800362a:	f240 1173 	movw	r1, #371	; 0x173
 800362e:	2007      	movs	r0, #7
 8003630:	f000 f8bf 	bl	80037b2 <ili9325_WriteReg>
  
  /* Set the Cursor */ 
  ili9325_SetCursor(0, 0);
 8003634:	2100      	movs	r1, #0
 8003636:	2000      	movs	r0, #0
 8003638:	f000 f86d 	bl	8003716 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 800363c:	2022      	movs	r0, #34	; 0x22
 800363e:	f7ff feed 	bl	800341c <LCD_IO_WriteReg>
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}

08003646 <ili9325_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOn(void)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	af00      	add	r7, sp, #0
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800364a:	2100      	movs	r1, #0
 800364c:	2010      	movs	r0, #16
 800364e:	f000 f8b0 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8003652:	2100      	movs	r1, #0
 8003654:	2011      	movs	r0, #17
 8003656:	f000 f8ac 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 800365a:	2100      	movs	r1, #0
 800365c:	2012      	movs	r0, #18
 800365e:	f000 f8a8 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 8003662:	2100      	movs	r1, #0
 8003664:	2013      	movs	r0, #19
 8003666:	f000 f8a4 	bl	80037b2 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800366a:	f241 71b0 	movw	r1, #6064	; 0x17b0
 800366e:	2010      	movs	r0, #16
 8003670:	f000 f89f 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8003674:	f240 1137 	movw	r1, #311	; 0x137
 8003678:	2011      	movs	r0, #17
 800367a:	f000 f89a 	bl	80037b2 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 800367e:	f240 1139 	movw	r1, #313	; 0x139
 8003682:	2012      	movs	r0, #18
 8003684:	f000 f895 	bl	80037b2 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8003688:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 800368c:	2013      	movs	r0, #19
 800368e:	f000 f890 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8003692:	2113      	movs	r1, #19
 8003694:	2029      	movs	r0, #41	; 0x29
 8003696:	f000 f88c 	bl	80037b2 <ili9325_WriteReg>
 
  /* Display On */
  ili9325_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
 800369a:	f240 1173 	movw	r1, #371	; 0x173
 800369e:	2007      	movs	r0, #7
 80036a0:	f000 f887 	bl	80037b2 <ili9325_WriteReg>
}
 80036a4:	bf00      	nop
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <ili9325_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOff(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* Power Off sequence ------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80036ac:	2100      	movs	r1, #0
 80036ae:	2010      	movs	r0, #16
 80036b0:	f000 f87f 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80036b4:	2100      	movs	r1, #0
 80036b6:	2011      	movs	r0, #17
 80036b8:	f000 f87b 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 80036bc:	2100      	movs	r1, #0
 80036be:	2012      	movs	r0, #18
 80036c0:	f000 f877 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 80036c4:	2100      	movs	r1, #0
 80036c6:	2013      	movs	r0, #19
 80036c8:	f000 f873 	bl	80037b2 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_41, 0x0000); /* VCM[4:0] for VCOMH */
 80036cc:	2100      	movs	r1, #0
 80036ce:	2029      	movs	r0, #41	; 0x29
 80036d0:	f000 f86f 	bl	80037b2 <ili9325_WriteReg>
  
  /* Display Off */
  ili9325_WriteReg(LCD_REG_7, 0x0); 
 80036d4:	2100      	movs	r1, #0
 80036d6:	2007      	movs	r0, #7
 80036d8:	f000 f86b 	bl	80037b2 <ili9325_WriteReg>
}
 80036dc:	bf00      	nop
 80036de:	bd80      	pop	{r7, pc}

080036e0 <ili9325_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9325_GetLcdPixelWidth(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
 return (uint16_t)320;
 80036e4:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <ili9325_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9325_GetLcdPixelHeight(void)
{
 80036f2:	b480      	push	{r7}
 80036f4:	af00      	add	r7, sp, #0
 return (uint16_t)240;
 80036f6:	23f0      	movs	r3, #240	; 0xf0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <ili9325_ReadID>:
  * @brief  Get the ILI9325 ID.
  * @param  None
  * @retval The ILI9325 ID 
  */
uint16_t ili9325_ReadID(void)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 8003706:	f7ff fe5e 	bl	80033c6 <LCD_IO_Init>
  return (ili9325_ReadReg(0x00));
 800370a:	2000      	movs	r0, #0
 800370c:	f000 f866 	bl	80037dc <ili9325_ReadReg>
 8003710:	4603      	mov	r3, r0
}
 8003712:	4618      	mov	r0, r3
 8003714:	bd80      	pop	{r7, pc}

08003716 <ili9325_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9325_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	460a      	mov	r2, r1
 8003720:	80fb      	strh	r3, [r7, #6]
 8003722:	4613      	mov	r3, r2
 8003724:	80bb      	strh	r3, [r7, #4]
//  ili9325_WriteReg(LCD_REG_32, Ypos);
//  ili9325_WriteReg(LCD_REG_33, (ILI9325_LCD_PIXEL_WIDTH - 1 - Xpos));

  ili9325_WriteReg(LCD_REG_32, (ILI9325_LCD_PIXEL_HEIGHT- 1 - Ypos));
 8003726:	88bb      	ldrh	r3, [r7, #4]
 8003728:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800372c:	b29b      	uxth	r3, r3
 800372e:	4619      	mov	r1, r3
 8003730:	2020      	movs	r0, #32
 8003732:	f000 f83e 	bl	80037b2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, Xpos);
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	4619      	mov	r1, r3
 800373a:	2021      	movs	r0, #33	; 0x21
 800373c:	f000 f839 	bl	80037b2 <ili9325_WriteReg>

}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <ili9325_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9325_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	80fb      	strh	r3, [r7, #6]
 8003752:	460b      	mov	r3, r1
 8003754:	80bb      	strh	r3, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 800375a:	88ba      	ldrh	r2, [r7, #4]
 800375c:	88fb      	ldrh	r3, [r7, #6]
 800375e:	4611      	mov	r1, r2
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ffd8 	bl	8003716 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8003766:	2022      	movs	r0, #34	; 0x22
 8003768:	f7ff fe58 	bl	800341c <LCD_IO_WriteReg>

  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&RGBCode, 2);
 800376c:	1cbb      	adds	r3, r7, #2
 800376e:	2102      	movs	r1, #2
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fe2f 	bl	80033d4 <LCD_IO_WriteMultipleData>
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <ili9325_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval The RGB pixel color
  */
uint16_t ili9325_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	4603      	mov	r3, r0
 8003786:	460a      	mov	r2, r1
 8003788:	80fb      	strh	r3, [r7, #6]
 800378a:	4613      	mov	r3, r2
 800378c:	80bb      	strh	r3, [r7, #4]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 800378e:	88ba      	ldrh	r2, [r7, #4]
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff ffbe 	bl	8003716 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 800379a:	2022      	movs	r0, #34	; 0x22
 800379c:	f7ff fe3e 	bl	800341c <LCD_IO_WriteReg>
  
  /* Dummy read */
  LCD_IO_ReadData();
 80037a0:	f7ff fe4c 	bl	800343c <LCD_IO_ReadData>
  
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 80037a4:	f7ff fe4a 	bl	800343c <LCD_IO_ReadData>
 80037a8:	4603      	mov	r3, r0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <ili9325_WriteReg>:
  * @param  LCDReg: Address of the selected register.
  * @param  LCDRegValue: Value to write to the selected register.
  * @retval None
  */
void ili9325_WriteReg(uint8_t LCDReg, uint16_t LCDRegValue)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	4603      	mov	r3, r0
 80037ba:	460a      	mov	r2, r1
 80037bc:	71fb      	strb	r3, [r7, #7]
 80037be:	4613      	mov	r3, r2
 80037c0:	80bb      	strh	r3, [r7, #4]
  LCD_IO_WriteReg(LCDReg);
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fe29 	bl	800341c <LCD_IO_WriteReg>
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&LCDRegValue, 2);
 80037ca:	1d3b      	adds	r3, r7, #4
 80037cc:	2102      	movs	r1, #2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff fe00 	bl	80033d4 <LCD_IO_WriteMultipleData>
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <ili9325_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCDReg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t ili9325_ReadReg(uint8_t LCDReg)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index (then Read Reg) */
  LCD_IO_WriteReg(LCDReg);
 80037e6:	79fb      	ldrb	r3, [r7, #7]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff fe17 	bl	800341c <LCD_IO_WriteReg>

  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 80037ee:	f7ff fe25 	bl	800343c <LCD_IO_ReadData>
 80037f2:	4603      	mov	r3, r0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <ili9325_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9325_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80037fc:	b590      	push	{r4, r7, lr}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4604      	mov	r4, r0
 8003804:	4608      	mov	r0, r1
 8003806:	4611      	mov	r1, r2
 8003808:	461a      	mov	r2, r3
 800380a:	4623      	mov	r3, r4
 800380c:	80fb      	strh	r3, [r7, #6]
 800380e:	4603      	mov	r3, r0
 8003810:	80bb      	strh	r3, [r7, #4]
 8003812:	460b      	mov	r3, r1
 8003814:	807b      	strh	r3, [r7, #2]
 8003816:	4613      	mov	r3, r2
 8003818:	803b      	strh	r3, [r7, #0]
//  ili9325_WriteReg(LCD_REG_82, ILI9325_LCD_PIXEL_WIDTH - Xpos - Width);
//  /* Vertical GRAM End Address */
//  ili9325_WriteReg(LCD_REG_83, ILI9325_LCD_PIXEL_WIDTH - Xpos - 1);   
  
  /* Horizontal GRAM Start Address */
  ili9325_WriteReg(LCD_REG_80, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - Height));
 800381a:	88ba      	ldrh	r2, [r7, #4]
 800381c:	883b      	ldrh	r3, [r7, #0]
 800381e:	4413      	add	r3, r2
 8003820:	b29b      	uxth	r3, r3
 8003822:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8003826:	b29b      	uxth	r3, r3
 8003828:	4619      	mov	r1, r3
 800382a:	2050      	movs	r0, #80	; 0x50
 800382c:	f7ff ffc1 	bl	80037b2 <ili9325_WriteReg>
  /* Horizontal GRAM End Address */
  ili9325_WriteReg(LCD_REG_81, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - 1));
 8003830:	88bb      	ldrh	r3, [r7, #4]
 8003832:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8003836:	b29b      	uxth	r3, r3
 8003838:	4619      	mov	r1, r3
 800383a:	2051      	movs	r0, #81	; 0x51
 800383c:	f7ff ffb9 	bl	80037b2 <ili9325_WriteReg>
  
  /* Vertical GRAM Start Address */
  ili9325_WriteReg(LCD_REG_82,  Xpos);
 8003840:	88fb      	ldrh	r3, [r7, #6]
 8003842:	4619      	mov	r1, r3
 8003844:	2052      	movs	r0, #82	; 0x52
 8003846:	f7ff ffb4 	bl	80037b2 <ili9325_WriteReg>
  /* Vertical GRAM End Address */
  ili9325_WriteReg(LCD_REG_83, (Xpos + Width - 1));
 800384a:	88fa      	ldrh	r2, [r7, #6]
 800384c:	887b      	ldrh	r3, [r7, #2]
 800384e:	4413      	add	r3, r2
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29b      	uxth	r3, r3
 8003856:	4619      	mov	r1, r3
 8003858:	2053      	movs	r0, #83	; 0x53
 800385a:	f7ff ffaa 	bl	80037b2 <ili9325_WriteReg>
  
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	bd90      	pop	{r4, r7, pc}
	...

08003868 <ili9325_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003868:	b590      	push	{r4, r7, lr}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	4604      	mov	r4, r0
 8003870:	4608      	mov	r0, r1
 8003872:	4611      	mov	r1, r2
 8003874:	461a      	mov	r2, r3
 8003876:	4623      	mov	r3, r4
 8003878:	80fb      	strh	r3, [r7, #6]
 800387a:	4603      	mov	r3, r0
 800387c:	80bb      	strh	r3, [r7, #4]
 800387e:	460b      	mov	r3, r1
 8003880:	807b      	strh	r3, [r7, #2]
 8003882:	4613      	mov	r3, r2
 8003884:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos); 
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	88bb      	ldrh	r3, [r7, #4]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff40 	bl	8003716 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8003896:	2022      	movs	r0, #34	; 0x22
 8003898:	f7ff fdc0 	bl	800341c <LCD_IO_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 800389c:	2300      	movs	r3, #0
 800389e:	81fb      	strh	r3, [r7, #14]
 80038a0:	e007      	b.n	80038b2 <ili9325_DrawHLine+0x4a>
  {
    ArrayRGB[counter] = RGBCode;
 80038a2:	89fb      	ldrh	r3, [r7, #14]
 80038a4:	490a      	ldr	r1, [pc, #40]	; (80038d0 <ili9325_DrawHLine+0x68>)
 80038a6:	88fa      	ldrh	r2, [r7, #6]
 80038a8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 80038ac:	89fb      	ldrh	r3, [r7, #14]
 80038ae:	3301      	adds	r3, #1
 80038b0:	81fb      	strh	r3, [r7, #14]
 80038b2:	89fa      	ldrh	r2, [r7, #14]
 80038b4:	883b      	ldrh	r3, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d3f3      	bcc.n	80038a2 <ili9325_DrawHLine+0x3a>
  }  

  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 80038ba:	883b      	ldrh	r3, [r7, #0]
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	4619      	mov	r1, r3
 80038c0:	4803      	ldr	r0, [pc, #12]	; (80038d0 <ili9325_DrawHLine+0x68>)
 80038c2:	f7ff fd87 	bl	80033d4 <LCD_IO_WriteMultipleData>
}
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd90      	pop	{r4, r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20001648 	.word	0x20001648

080038d4 <ili9325_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4604      	mov	r4, r0
 80038dc:	4608      	mov	r0, r1
 80038de:	4611      	mov	r1, r2
 80038e0:	461a      	mov	r2, r3
 80038e2:	4623      	mov	r3, r4
 80038e4:	80fb      	strh	r3, [r7, #6]
 80038e6:	4603      	mov	r3, r0
 80038e8:	80bb      	strh	r3, [r7, #4]
 80038ea:	460b      	mov	r3, r1
 80038ec:	807b      	strh	r3, [r7, #2]
 80038ee:	4613      	mov	r3, r2
 80038f0:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	81fb      	strh	r3, [r7, #14]

  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1020);
 80038f6:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80038fa:	2003      	movs	r0, #3
 80038fc:	f7ff ff59 	bl	80037b2 <ili9325_WriteReg>
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8003900:	887a      	ldrh	r2, [r7, #2]
 8003902:	88bb      	ldrh	r3, [r7, #4]
 8003904:	4611      	mov	r1, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff ff05 	bl	8003716 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 800390c:	2022      	movs	r0, #34	; 0x22
 800390e:	f7ff fd85 	bl	800341c <LCD_IO_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8003912:	2300      	movs	r3, #0
 8003914:	81fb      	strh	r3, [r7, #14]
 8003916:	e007      	b.n	8003928 <ili9325_DrawVLine+0x54>
  {
    ArrayRGB[counter] = RGBCode;
 8003918:	89fb      	ldrh	r3, [r7, #14]
 800391a:	490d      	ldr	r1, [pc, #52]	; (8003950 <ili9325_DrawVLine+0x7c>)
 800391c:	88fa      	ldrh	r2, [r7, #6]
 800391e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8003922:	89fb      	ldrh	r3, [r7, #14]
 8003924:	3301      	adds	r3, #1
 8003926:	81fb      	strh	r3, [r7, #14]
 8003928:	89fa      	ldrh	r2, [r7, #14]
 800392a:	883b      	ldrh	r3, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d3f3      	bcc.n	8003918 <ili9325_DrawVLine+0x44>
  }
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8003930:	883b      	ldrh	r3, [r7, #0]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4619      	mov	r1, r3
 8003936:	4806      	ldr	r0, [pc, #24]	; (8003950 <ili9325_DrawVLine+0x7c>)
 8003938:	f7ff fd4c 	bl	80033d4 <LCD_IO_WriteMultipleData>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);  
 800393c:	f241 0128 	movw	r1, #4136	; 0x1028
 8003940:	2003      	movs	r0, #3
 8003942:	f7ff ff36 	bl	80037b2 <ili9325_WriteReg>
}
 8003946:	bf00      	nop
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	bd90      	pop	{r4, r7, pc}
 800394e:	bf00      	nop
 8003950:	20001648 	.word	0x20001648

08003954 <ili9325_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ili9325_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	603a      	str	r2, [r7, #0]
 800395e:	80fb      	strh	r3, [r7, #6]
 8003960:	460b      	mov	r3, r1
 8003962:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	2300      	movs	r3, #0
 800396a:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	3302      	adds	r3, #2
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	b29b      	uxth	r3, r3
 8003974:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	3304      	adds	r3, #4
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	b29b      	uxth	r3, r3
 800397e:	041b      	lsls	r3, r3, #16
 8003980:	461a      	mov	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4313      	orrs	r3, r2
 8003986:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	330a      	adds	r3, #10
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	330c      	adds	r3, #12
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	b29b      	uxth	r3, r3
 800399a:	041b      	lsls	r3, r3, #16
 800399c:	461a      	mov	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	085b      	lsrs	r3, r3, #1
 80039ac:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	603b      	str	r3, [r7, #0]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : decrement, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1038);
 80039b6:	f241 0138 	movw	r1, #4152	; 0x1038
 80039ba:	2003      	movs	r0, #3
 80039bc:	f7ff fef9 	bl	80037b2 <ili9325_WriteReg>

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 80039c0:	88ba      	ldrh	r2, [r7, #4]
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fea5 	bl	8003716 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80039cc:	2022      	movs	r0, #34	; 0x22
 80039ce:	f7ff fd25 	bl	800341c <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4619      	mov	r1, r3
 80039d8:	6838      	ldr	r0, [r7, #0]
 80039da:	f7ff fcfb 	bl	80033d4 <LCD_IO_WriteMultipleData>
 
  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 80039de:	f241 0128 	movw	r1, #4136	; 0x1028
 80039e2:	2003      	movs	r0, #3
 80039e4:	f7ff fee5 	bl	80037b2 <ili9325_WriteReg>
}
 80039e8:	bf00      	nop
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <ili9325_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ili9325_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 80039f0:	b590      	push	{r4, r7, lr}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4604      	mov	r4, r0
 80039f8:	4608      	mov	r0, r1
 80039fa:	4611      	mov	r1, r2
 80039fc:	461a      	mov	r2, r3
 80039fe:	4623      	mov	r3, r4
 8003a00:	80fb      	strh	r3, [r7, #6]
 8003a02:	4603      	mov	r3, r0
 8003a04:	80bb      	strh	r3, [r7, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	807b      	strh	r3, [r7, #2]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]

  size = (Xsize * Ysize);
 8003a12:	887b      	ldrh	r3, [r7, #2]
 8003a14:	883a      	ldrh	r2, [r7, #0]
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8003a1c:	88ba      	ldrh	r2, [r7, #4]
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	4611      	mov	r1, r2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff fe77 	bl	8003716 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8003a28:	2022      	movs	r0, #34	; 0x22
 8003a2a:	f7ff fcf7 	bl	800341c <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pdata, size*2);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	4619      	mov	r1, r3
 8003a34:	6a38      	ldr	r0, [r7, #32]
 8003a36:	f7ff fccd 	bl	80033d4 <LCD_IO_WriteMultipleData>
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd90      	pop	{r4, r7, pc}
	...

08003a44 <ili9325_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void ili9325_Clear(uint16_t Color)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	80fb      	strh	r3, [r7, #6]
  uint32_t size = ILI9325_LCD_PIXEL_HEIGHT * ILI9325_LCD_PIXEL_WIDTH;
 8003a4e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003a52:	60fb      	str	r3, [r7, #12]
  
  /* Set Cursor */
  ili9325_SetCursor(0, 0);  
 8003a54:	2100      	movs	r1, #0
 8003a56:	2000      	movs	r0, #0
 8003a58:	f7ff fe5d 	bl	8003716 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8003a5c:	2022      	movs	r0, #34	; 0x22
 8003a5e:	f7ff fcdd 	bl	800341c <LCD_IO_WriteReg>
  
  while((size--) != 0)
 8003a62:	e002      	b.n	8003a6a <ili9325_Clear+0x26>
  {
    /* Write 16-bit Data */
    LCD_RAM = Color;
 8003a64:	4a06      	ldr	r2, [pc, #24]	; (8003a80 <ili9325_Clear+0x3c>)
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	8013      	strh	r3, [r2, #0]
  while((size--) != 0)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1e5a      	subs	r2, r3, #1
 8003a6e:	60fa      	str	r2, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f7      	bne.n	8003a64 <ili9325_Clear+0x20>
  }
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	60020000 	.word	0x60020000

08003a84 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8003a8e:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <BSP_LCD_Init+0x64>)
 8003a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a94:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8003a96:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <BSP_LCD_Init+0x64>)
 8003a98:	4a14      	ldr	r2, [pc, #80]	; (8003aec <BSP_LCD_Init+0x68>)
 8003a9a:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8003a9c:	4b12      	ldr	r3, [pc, #72]	; (8003ae8 <BSP_LCD_Init+0x64>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
  if(ili9325_drv.ReadID() == ILI9325_ID || ili9325_drv.ReadID() == ILI9328_ID)
 8003aa2:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <BSP_LCD_Init+0x6c>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4798      	blx	r3
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f249 3325 	movw	r3, #37669	; 0x9325
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d008      	beq.n	8003ac6 <BSP_LCD_Init+0x42>
 8003ab4:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <BSP_LCD_Init+0x6c>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	4798      	blx	r3
 8003aba:	4603      	mov	r3, r0
 8003abc:	461a      	mov	r2, r3
 8003abe:	f249 3328 	movw	r3, #37672	; 0x9328
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d10b      	bne.n	8003ade <BSP_LCD_Init+0x5a>
  {
    lcd_drv = &ili9325_drv;
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <BSP_LCD_Init+0x70>)
 8003ac8:	4a09      	ldr	r2, [pc, #36]	; (8003af0 <BSP_LCD_Init+0x6c>)
 8003aca:	601a      	str	r2, [r3, #0]

    /* LCD Init */   
    lcd_drv->Init();
 8003acc:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <BSP_LCD_Init+0x70>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003ad4:	4805      	ldr	r0, [pc, #20]	; (8003aec <BSP_LCD_Init+0x68>)
 8003ad6:	f000 f837 	bl	8003b48 <BSP_LCD_SetFont>

    ret = LCD_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 8003ade:	79fb      	ldrb	r3, [r7, #7]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	200018c8 	.word	0x200018c8
 8003aec:	200000a8 	.word	0x200000a8
 8003af0:	20000048 	.word	0x20000048
 8003af4:	200018d4 	.word	0x200018d4

08003af8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <BSP_LCD_GetXSize+0x14>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b02:	4798      	blx	r3
 8003b04:	4603      	mov	r3, r0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	200018d4 	.word	0x200018d4

08003b10 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8003b14:	4b03      	ldr	r3, [pc, #12]	; (8003b24 <BSP_LCD_GetYSize+0x14>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	4798      	blx	r3
 8003b1c:	4603      	mov	r3, r0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	200018d4 	.word	0x200018d4

08003b28 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	4a03      	ldr	r2, [pc, #12]	; (8003b44 <BSP_LCD_SetTextColor+0x1c>)
 8003b36:	6013      	str	r3, [r2, #0]
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	200018c8 	.word	0x200018c8

08003b48 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  pFonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8003b50:	4a04      	ldr	r2, [pc, #16]	; (8003b64 <BSP_LCD_SetFont+0x1c>)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6093      	str	r3, [r2, #8]
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	200018c8 	.word	0x200018c8

08003b68 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <BSP_LCD_GetFont+0x14>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	200018c8 	.word	0x200018c8

08003b80 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t color_backup = DrawProp.TextColor; 
 8003b8e:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <BSP_LCD_Clear+0x64>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <BSP_LCD_Clear+0x64>)
 8003b98:	6013      	str	r3, [r2, #0]
  
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	e00d      	b.n	8003bbc <BSP_LCD_Clear+0x3c>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	b29c      	uxth	r4, r3
 8003ba4:	f7ff ffa8 	bl	8003af8 <BSP_LCD_GetXSize>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	4621      	mov	r1, r4
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	f000 f8e9 	bl	8003d88 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	f7ff ffa8 	bl	8003b10 <BSP_LCD_GetYSize>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d3eb      	bcc.n	8003ba0 <BSP_LCD_Clear+0x20>
  }

  DrawProp.TextColor = color_backup; 
 8003bc8:	4a06      	ldr	r2, [pc, #24]	; (8003be4 <BSP_LCD_Clear+0x64>)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <BSP_LCD_Clear+0x64>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff ffa7 	bl	8003b28 <BSP_LCD_SetTextColor>
}
 8003bda:	bf00      	nop
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd90      	pop	{r4, r7, pc}
 8003be2:	bf00      	nop
 8003be4:	200018c8 	.word	0x200018c8

08003be8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	80fb      	strh	r3, [r7, #6]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	80bb      	strh	r3, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8003bfa:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <BSP_LCD_DisplayChar+0x50>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003c04:	490c      	ldr	r1, [pc, #48]	; (8003c38 <BSP_LCD_DisplayChar+0x50>)
 8003c06:	6889      	ldr	r1, [r1, #8]
 8003c08:	88c9      	ldrh	r1, [r1, #6]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8003c0a:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <BSP_LCD_DisplayChar+0x50>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	889b      	ldrh	r3, [r3, #4]
 8003c14:	3307      	adds	r3, #7
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	da00      	bge.n	8003c1c <BSP_LCD_DisplayChar+0x34>
 8003c1a:	3307      	adds	r3, #7
 8003c1c:	10db      	asrs	r3, r3, #3
 8003c1e:	fb01 f303 	mul.w	r3, r1, r3
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8003c22:	441a      	add	r2, r3
 8003c24:	88b9      	ldrh	r1, [r7, #4]
 8003c26:	88fb      	ldrh	r3, [r7, #6]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fbcd 	bl	80043c8 <LCD_DrawChar>
}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	200018c8 	.word	0x200018c8

08003c3c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *pText, Line_ModeTypdef Mode)
{
 8003c3c:	b590      	push	{r4, r7, lr}
 8003c3e:	b089      	sub	sp, #36	; 0x24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60ba      	str	r2, [r7, #8]
 8003c44:	461a      	mov	r2, r3
 8003c46:	4603      	mov	r3, r0
 8003c48:	81fb      	strh	r3, [r7, #14]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	81bb      	strh	r3, [r7, #12]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, counter = 0;
 8003c52:	2301      	movs	r3, #1
 8003c54:	83fb      	strh	r3, [r7, #30]
 8003c56:	2300      	movs	r3, #0
 8003c58:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003c66:	e002      	b.n	8003c6e <BSP_LCD_DisplayStringAt+0x32>
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	617a      	str	r2, [r7, #20]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f6      	bne.n	8003c68 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8003c7a:	f7ff ff3d 	bl	8003af8 <BSP_LCD_GetXSize>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	4b34      	ldr	r3, [pc, #208]	; (8003d54 <BSP_LCD_DisplayStringAt+0x118>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	889b      	ldrh	r3, [r3, #4]
 8003c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d014      	beq.n	8003cbc <BSP_LCD_DisplayStringAt+0x80>
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	dc23      	bgt.n	8003cde <BSP_LCD_DisplayStringAt+0xa2>
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d002      	beq.n	8003ca0 <BSP_LCD_DisplayStringAt+0x64>
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d011      	beq.n	8003cc2 <BSP_LCD_DisplayStringAt+0x86>
 8003c9e:	e01e      	b.n	8003cde <BSP_LCD_DisplayStringAt+0xa2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	4a2b      	ldr	r2, [pc, #172]	; (8003d54 <BSP_LCD_DisplayStringAt+0x118>)
 8003ca8:	6892      	ldr	r2, [r2, #8]
 8003caa:	8892      	ldrh	r2, [r2, #4]
 8003cac:	fb02 f303 	mul.w	r3, r2, r3
 8003cb0:	085b      	lsrs	r3, r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	89fb      	ldrh	r3, [r7, #14]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	83fb      	strh	r3, [r7, #30]
      break;
 8003cba:	e013      	b.n	8003ce4 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8003cbc:	89fb      	ldrh	r3, [r7, #14]
 8003cbe:	83fb      	strh	r3, [r7, #30]
      break;
 8003cc0:	e010      	b.n	8003ce4 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	4b22      	ldr	r3, [pc, #136]	; (8003d54 <BSP_LCD_DisplayStringAt+0x118>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	889b      	ldrh	r3, [r3, #4]
 8003cd0:	fb12 f303 	smulbb	r3, r2, r3
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	89fb      	ldrh	r3, [r7, #14]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	83fb      	strh	r3, [r7, #30]
      break;
 8003cdc:	e002      	b.n	8003ce4 <BSP_LCD_DisplayStringAt+0xa8>
    }    
  default:
    {
      refcolumn = Xpos;
 8003cde:	89fb      	ldrh	r3, [r7, #14]
 8003ce0:	83fb      	strh	r3, [r7, #30]
      break;
 8003ce2:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8003ce4:	e012      	b.n	8003d0c <BSP_LCD_DisplayStringAt+0xd0>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *pText);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	781a      	ldrb	r2, [r3, #0]
 8003cea:	89b9      	ldrh	r1, [r7, #12]
 8003cec:	8bfb      	ldrh	r3, [r7, #30]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff ff7a 	bl	8003be8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8003cf4:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <BSP_LCD_DisplayStringAt+0x118>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	889a      	ldrh	r2, [r3, #4]
 8003cfa:	8bfb      	ldrh	r3, [r7, #30]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	3301      	adds	r3, #1
 8003d04:	60bb      	str	r3, [r7, #8]
    counter++;
 8003d06:	8bbb      	ldrh	r3, [r7, #28]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf14      	ite	ne
 8003d14:	2301      	movne	r3, #1
 8003d16:	2300      	moveq	r3, #0
 8003d18:	b2dc      	uxtb	r4, r3
 8003d1a:	f7ff feed 	bl	8003af8 <BSP_LCD_GetXSize>
 8003d1e:	4601      	mov	r1, r0
 8003d20:	8bbb      	ldrh	r3, [r7, #28]
 8003d22:	4a0c      	ldr	r2, [pc, #48]	; (8003d54 <BSP_LCD_DisplayStringAt+0x118>)
 8003d24:	6892      	ldr	r2, [r2, #8]
 8003d26:	8892      	ldrh	r2, [r2, #4]
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	1acb      	subs	r3, r1, r3
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	4a08      	ldr	r2, [pc, #32]	; (8003d54 <BSP_LCD_DisplayStringAt+0x118>)
 8003d32:	6892      	ldr	r2, [r2, #8]
 8003d34:	8892      	ldrh	r2, [r2, #4]
 8003d36:	4293      	cmp	r3, r2
 8003d38:	bf2c      	ite	cs
 8003d3a:	2301      	movcs	r3, #1
 8003d3c:	2300      	movcc	r3, #0
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	4023      	ands	r3, r4
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1ce      	bne.n	8003ce6 <BSP_LCD_DisplayStringAt+0xaa>
  }
}
 8003d48:	bf00      	nop
 8003d4a:	bf00      	nop
 8003d4c:	3724      	adds	r7, #36	; 0x24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd90      	pop	{r4, r7, pc}
 8003d52:	bf00      	nop
 8003d54:	200018c8 	.word	0x200018c8

08003d58 <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0..29: if the Current fonts is Font8x8
  * @param  pText: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *pText)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	6039      	str	r1, [r7, #0]
 8003d62:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line),pText, LEFT_MODE);
 8003d64:	f7ff ff00 	bl	8003b68 <BSP_LCD_GetFont>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	88db      	ldrh	r3, [r3, #6]
 8003d6c:	88fa      	ldrh	r2, [r7, #6]
 8003d6e:	fb12 f303 	smulbb	r3, r2, r3
 8003d72:	b299      	uxth	r1, r3
 8003d74:	2303      	movs	r3, #3
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	2000      	movs	r0, #0
 8003d7a:	f7ff ff5f 	bl	8003c3c <BSP_LCD_DisplayStringAt>
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003d88:	b590      	push	{r4, r7, lr}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	80fb      	strh	r3, [r7, #6]
 8003d92:	460b      	mov	r3, r1
 8003d94:	80bb      	strh	r3, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 8003d9e:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <BSP_LCD_DrawHLine+0x6c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8003da8:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <BSP_LCD_DrawHLine+0x6c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6a1c      	ldr	r4, [r3, #32]
 8003dae:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <BSP_LCD_DrawHLine+0x70>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	b298      	uxth	r0, r3
 8003db4:	887b      	ldrh	r3, [r7, #2]
 8003db6:	88ba      	ldrh	r2, [r7, #4]
 8003db8:	88f9      	ldrh	r1, [r7, #6]
 8003dba:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8003dbc:	e015      	b.n	8003dea <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	e00e      	b.n	8003de2 <BSP_LCD_DrawHLine+0x5a>
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	4413      	add	r3, r2
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <BSP_LCD_DrawHLine+0x70>)
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	b292      	uxth	r2, r2
 8003dd4:	88b9      	ldrh	r1, [r7, #4]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fada 	bl	8004390 <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3301      	adds	r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	887b      	ldrh	r3, [r7, #2]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d3ec      	bcc.n	8003dc4 <BSP_LCD_DrawHLine+0x3c>
}
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd90      	pop	{r4, r7, pc}
 8003df2:	bf00      	nop
 8003df4:	200018d4 	.word	0x200018d4
 8003df8:	200018c8 	.word	0x200018c8

08003dfc <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003dfc:	b590      	push	{r4, r7, lr}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	80fb      	strh	r3, [r7, #6]
 8003e06:	460b      	mov	r3, r1
 8003e08:	80bb      	strh	r3, [r7, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 8003e12:	4b15      	ldr	r3, [pc, #84]	; (8003e68 <BSP_LCD_DrawVLine+0x6c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8003e1c:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <BSP_LCD_DrawVLine+0x6c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003e22:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <BSP_LCD_DrawVLine+0x70>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	b298      	uxth	r0, r3
 8003e28:	887b      	ldrh	r3, [r7, #2]
 8003e2a:	88ba      	ldrh	r2, [r7, #4]
 8003e2c:	88f9      	ldrh	r1, [r7, #6]
 8003e2e:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 8003e30:	e015      	b.n	8003e5e <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	e00e      	b.n	8003e56 <BSP_LCD_DrawVLine+0x5a>
      LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	88bb      	ldrh	r3, [r7, #4]
 8003e3e:	4413      	add	r3, r2
 8003e40:	b299      	uxth	r1, r3
 8003e42:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <BSP_LCD_DrawVLine+0x70>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	88fb      	ldrh	r3, [r7, #6]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 faa0 	bl	8004390 <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3301      	adds	r3, #1
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	887b      	ldrh	r3, [r7, #2]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d3ec      	bcc.n	8003e38 <BSP_LCD_DrawVLine+0x3c>
}
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd90      	pop	{r4, r7, pc}
 8003e66:	bf00      	nop
 8003e68:	200018d4 	.word	0x200018d4
 8003e6c:	200018c8 	.word	0x200018c8

08003e70 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b08b      	sub	sp, #44	; 0x2c
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4604      	mov	r4, r0
 8003e78:	4608      	mov	r0, r1
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4623      	mov	r3, r4
 8003e80:	80fb      	strh	r3, [r7, #6]
 8003e82:	4603      	mov	r3, r0
 8003e84:	80bb      	strh	r3, [r7, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	807b      	strh	r3, [r7, #2]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003e8e:	2300      	movs	r3, #0
 8003e90:	823b      	strh	r3, [r7, #16]
 8003e92:	2300      	movs	r3, #0
 8003e94:	81fb      	strh	r3, [r7, #14]
 8003e96:	2300      	movs	r3, #0
 8003e98:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	847b      	strh	r3, [r7, #34]	; 0x22
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	83fb      	strh	r3, [r7, #30]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	83bb      	strh	r3, [r7, #28]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	837b      	strh	r3, [r7, #26]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	833b      	strh	r3, [r7, #24]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	82fb      	strh	r3, [r7, #22]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8003ec2:	887a      	ldrh	r2, [r7, #2]
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bfb8      	it	lt
 8003ecc:	425b      	neglt	r3, r3
 8003ece:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8003ed0:	883a      	ldrh	r2, [r7, #0]
 8003ed2:	88bb      	ldrh	r3, [r7, #4]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bfb8      	it	lt
 8003eda:	425b      	neglt	r3, r3
 8003edc:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8003ee2:	88bb      	ldrh	r3, [r7, #4]
 8003ee4:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8003ee6:	887a      	ldrh	r2, [r7, #2]
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d304      	bcc.n	8003ef8 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	843b      	strh	r3, [r7, #32]
 8003ef6:	e005      	b.n	8003f04 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003efc:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003efe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f02:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8003f04:	883a      	ldrh	r2, [r7, #0]
 8003f06:	88bb      	ldrh	r3, [r7, #4]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d304      	bcc.n	8003f16 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003f10:	2301      	movs	r3, #1
 8003f12:	83bb      	strh	r3, [r7, #28]
 8003f14:	e005      	b.n	8003f22 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f1a:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f20:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003f22:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003f26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	db10      	blt.n	8003f50 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003f2e:	2300      	movs	r3, #0
 8003f30:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003f32:	2300      	movs	r3, #0
 8003f34:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003f36:	8a3b      	ldrh	r3, [r7, #16]
 8003f38:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003f3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003f3e:	0fda      	lsrs	r2, r3, #31
 8003f40:	4413      	add	r3, r2
 8003f42:	105b      	asrs	r3, r3, #1
 8003f44:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8003f46:	89fb      	ldrh	r3, [r7, #14]
 8003f48:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8003f4a:	8a3b      	ldrh	r3, [r7, #16]
 8003f4c:	82bb      	strh	r3, [r7, #20]
 8003f4e:	e00f      	b.n	8003f70 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003f50:	2300      	movs	r3, #0
 8003f52:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003f54:	2300      	movs	r3, #0
 8003f56:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003f58:	89fb      	ldrh	r3, [r7, #14]
 8003f5a:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003f5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f60:	0fda      	lsrs	r2, r3, #31
 8003f62:	4413      	add	r3, r2
 8003f64:	105b      	asrs	r3, r3, #1
 8003f66:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8003f68:	8a3b      	ldrh	r3, [r7, #16]
 8003f6a:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8003f6c:	89fb      	ldrh	r3, [r7, #14]
 8003f6e:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003f70:	2300      	movs	r3, #0
 8003f72:	827b      	strh	r3, [r7, #18]
 8003f74:	e031      	b.n	8003fda <BSP_LCD_DrawLine+0x16a>
  {
    LCD_DrawPixel(x, y, DrawProp.TextColor);  /* Draw the current pixel */
 8003f76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f78:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003f7a:	4a1d      	ldr	r2, [pc, #116]	; (8003ff0 <BSP_LCD_DrawLine+0x180>)
 8003f7c:	6812      	ldr	r2, [r2, #0]
 8003f7e:	b292      	uxth	r2, r2
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fa05 	bl	8004390 <LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8003f86:	8b3a      	ldrh	r2, [r7, #24]
 8003f88:	8afb      	ldrh	r3, [r7, #22]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003f90:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003f94:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	db0e      	blt.n	8003fba <BSP_LCD_DrawLine+0x14a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003f9c:	8b3a      	ldrh	r2, [r7, #24]
 8003f9e:	8b7b      	ldrh	r3, [r7, #26]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003fa6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003fa8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003faa:	4413      	add	r3, r2
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003fb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fb2:	8bfb      	ldrh	r3, [r7, #30]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8003fba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003fbc:	8c3b      	ldrh	r3, [r7, #32]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003fc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fc6:	8bbb      	ldrh	r3, [r7, #28]
 8003fc8:	4413      	add	r3, r2
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003fce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	827b      	strh	r3, [r7, #18]
 8003fda:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003fde:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	ddc7      	ble.n	8003f76 <BSP_LCD_DrawLine+0x106>
  }
}
 8003fe6:	bf00      	nop
 8003fe8:	bf00      	nop
 8003fea:	372c      	adds	r7, #44	; 0x2c
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd90      	pop	{r4, r7, pc}
 8003ff0:	200018c8 	.word	0x200018c8

08003ff4 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	80fb      	strh	r3, [r7, #6]
 8003ffe:	460b      	mov	r3, r1
 8004000:	80bb      	strh	r3, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	807b      	strh	r3, [r7, #2]
  int32_t  D;       /* Decision Variable */ 
  uint32_t  CurX;   /* Current X Value */
  uint32_t  CurY;   /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8004006:	887b      	ldrh	r3, [r7, #2]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	f1c3 0303 	rsb	r3, r3, #3
 800400e:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8004014:	887b      	ldrh	r3, [r7, #2]
 8004016:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 8004018:	e09a      	b.n	8004150 <BSP_LCD_DrawCircle+0x15c>
  {
    LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp.TextColor);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	b29a      	uxth	r2, r3
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	4413      	add	r3, r2
 8004022:	b298      	uxth	r0, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	b29b      	uxth	r3, r3
 8004028:	88ba      	ldrh	r2, [r7, #4]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	b29b      	uxth	r3, r3
 800402e:	4a4d      	ldr	r2, [pc, #308]	; (8004164 <BSP_LCD_DrawCircle+0x170>)
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	b292      	uxth	r2, r2
 8004034:	4619      	mov	r1, r3
 8004036:	f000 f9ab 	bl	8004390 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp.TextColor);
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	b29b      	uxth	r3, r3
 800403e:	88fa      	ldrh	r2, [r7, #6]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	b298      	uxth	r0, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	b29b      	uxth	r3, r3
 8004048:	88ba      	ldrh	r2, [r7, #4]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	b29b      	uxth	r3, r3
 800404e:	4a45      	ldr	r2, [pc, #276]	; (8004164 <BSP_LCD_DrawCircle+0x170>)
 8004050:	6812      	ldr	r2, [r2, #0]
 8004052:	b292      	uxth	r2, r2
 8004054:	4619      	mov	r1, r3
 8004056:	f000 f99b 	bl	8004390 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp.TextColor);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	b29a      	uxth	r2, r3
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	4413      	add	r3, r2
 8004062:	b298      	uxth	r0, r3
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	b29b      	uxth	r3, r3
 8004068:	88ba      	ldrh	r2, [r7, #4]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	b29b      	uxth	r3, r3
 800406e:	4a3d      	ldr	r2, [pc, #244]	; (8004164 <BSP_LCD_DrawCircle+0x170>)
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	b292      	uxth	r2, r2
 8004074:	4619      	mov	r1, r3
 8004076:	f000 f98b 	bl	8004390 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp.TextColor);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	b29b      	uxth	r3, r3
 800407e:	88fa      	ldrh	r2, [r7, #6]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	b298      	uxth	r0, r3
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	b29b      	uxth	r3, r3
 8004088:	88ba      	ldrh	r2, [r7, #4]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	b29b      	uxth	r3, r3
 800408e:	4a35      	ldr	r2, [pc, #212]	; (8004164 <BSP_LCD_DrawCircle+0x170>)
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	b292      	uxth	r2, r2
 8004094:	4619      	mov	r1, r3
 8004096:	f000 f97b 	bl	8004390 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp.TextColor);
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	b29a      	uxth	r2, r3
 800409e:	88fb      	ldrh	r3, [r7, #6]
 80040a0:	4413      	add	r3, r2
 80040a2:	b298      	uxth	r0, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	88bb      	ldrh	r3, [r7, #4]
 80040aa:	4413      	add	r3, r2
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	4a2d      	ldr	r2, [pc, #180]	; (8004164 <BSP_LCD_DrawCircle+0x170>)
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	b292      	uxth	r2, r2
 80040b4:	4619      	mov	r1, r3
 80040b6:	f000 f96b 	bl	8004390 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp.TextColor);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	b298      	uxth	r0, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	88bb      	ldrh	r3, [r7, #4]
 80040ca:	4413      	add	r3, r2
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	4a25      	ldr	r2, [pc, #148]	; (8004164 <BSP_LCD_DrawCircle+0x170>)
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	b292      	uxth	r2, r2
 80040d4:	4619      	mov	r1, r3
 80040d6:	f000 f95b 	bl	8004390 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp.TextColor);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	b29a      	uxth	r2, r3
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	4413      	add	r3, r2
 80040e2:	b298      	uxth	r0, r3
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	88bb      	ldrh	r3, [r7, #4]
 80040ea:	4413      	add	r3, r2
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	4a1d      	ldr	r2, [pc, #116]	; (8004164 <BSP_LCD_DrawCircle+0x170>)
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	b292      	uxth	r2, r2
 80040f4:	4619      	mov	r1, r3
 80040f6:	f000 f94b 	bl	8004390 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp.TextColor);   
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	88fa      	ldrh	r2, [r7, #6]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	b298      	uxth	r0, r3
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	b29a      	uxth	r2, r3
 8004108:	88bb      	ldrh	r3, [r7, #4]
 800410a:	4413      	add	r3, r2
 800410c:	b29b      	uxth	r3, r3
 800410e:	4a15      	ldr	r2, [pc, #84]	; (8004164 <BSP_LCD_DrawCircle+0x170>)
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	b292      	uxth	r2, r2
 8004114:	4619      	mov	r1, r3
 8004116:	f000 f93b 	bl	8004390 <LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800411a:	4813      	ldr	r0, [pc, #76]	; (8004168 <BSP_LCD_DrawCircle+0x174>)
 800411c:	f7ff fd14 	bl	8003b48 <BSP_LCD_SetFont>

    if (D < 0)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2b00      	cmp	r3, #0
 8004124:	da06      	bge.n	8004134 <BSP_LCD_DrawCircle+0x140>
    { 
      D += (CurX << 2) + 6;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	009a      	lsls	r2, r3, #2
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	4413      	add	r3, r2
 800412e:	3306      	adds	r3, #6
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	e00a      	b.n	800414a <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	009a      	lsls	r2, r3, #2
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	4413      	add	r3, r2
 8004140:	330a      	adds	r3, #10
 8004142:	617b      	str	r3, [r7, #20]
      CurY--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3b01      	subs	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	3301      	adds	r3, #1
 800414e:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	429a      	cmp	r2, r3
 8004156:	f67f af60 	bls.w	800401a <BSP_LCD_DrawCircle+0x26>
  } 
}
 800415a:	bf00      	nop
 800415c:	bf00      	nop
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	200018c8 	.word	0x200018c8
 8004168:	200000a8 	.word	0x200000a8

0800416c <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address.
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 800416c:	b590      	push	{r4, r7, lr}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	603a      	str	r2, [r7, #0]
 8004176:	80fb      	strh	r3, [r7, #6]
 8004178:	460b      	mov	r3, r1
 800417a:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	60bb      	str	r3, [r7, #8]
  
  
  /* Read bitmap width */
  width = *(uint16_t *) (pbmp + 18);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	3312      	adds	r3, #18
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	60bb      	str	r3, [r7, #8]
  width |= (*(uint16_t *) (pbmp + 20)) << 16;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	3314      	adds	r3, #20
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	041b      	lsls	r3, r3, #16
 8004194:	461a      	mov	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4313      	orrs	r3, r2
 800419a:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap height */
  height = *(uint16_t *) (pbmp + 22);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	3316      	adds	r3, #22
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (pbmp + 24)) << 16; 
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	3318      	adds	r3, #24
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	041b      	lsls	r3, r3, #16
 80041ac:	461a      	mov	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
  
  LCD_SetDisplayWindow(Xpos, Ypos, width, height);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	88b9      	ldrh	r1, [r7, #4]
 80041be:	88f8      	ldrh	r0, [r7, #6]
 80041c0:	f000 f9f4 	bl	80045ac <LCD_SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 80041c4:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <BSP_LCD_DrawBitmap+0x94>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d006      	beq.n	80041dc <BSP_LCD_DrawBitmap+0x70>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pbmp);
 80041ce:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <BSP_LCD_DrawBitmap+0x94>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	88b9      	ldrh	r1, [r7, #4]
 80041d6:	88f8      	ldrh	r0, [r7, #6]
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	4798      	blx	r3
  } 
  LCD_SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80041dc:	f7ff fc8c 	bl	8003af8 <BSP_LCD_GetXSize>
 80041e0:	4603      	mov	r3, r0
 80041e2:	b29c      	uxth	r4, r3
 80041e4:	f7ff fc94 	bl	8003b10 <BSP_LCD_GetYSize>
 80041e8:	4603      	mov	r3, r0
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	4622      	mov	r2, r4
 80041ee:	2100      	movs	r1, #0
 80041f0:	2000      	movs	r0, #0
 80041f2:	f000 f9db 	bl	80045ac <LCD_SetDisplayWindow>
}
 80041f6:	bf00      	nop
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd90      	pop	{r4, r7, pc}
 80041fe:	bf00      	nop
 8004200:	200018d4 	.word	0x200018d4

08004204 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004204:	b590      	push	{r4, r7, lr}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	4604      	mov	r4, r0
 800420c:	4608      	mov	r0, r1
 800420e:	4611      	mov	r1, r2
 8004210:	461a      	mov	r2, r3
 8004212:	4623      	mov	r3, r4
 8004214:	80fb      	strh	r3, [r7, #6]
 8004216:	4603      	mov	r3, r0
 8004218:	80bb      	strh	r3, [r7, #4]
 800421a:	460b      	mov	r3, r1
 800421c:	807b      	strh	r3, [r7, #2]
 800421e:	4613      	mov	r3, r2
 8004220:	803b      	strh	r3, [r7, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8004222:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <BSP_LCD_FillRect+0x50>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	b29b      	uxth	r3, r3
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff fc7d 	bl	8003b28 <BSP_LCD_SetTextColor>
  do
  {
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 800422e:	88bb      	ldrh	r3, [r7, #4]
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	80ba      	strh	r2, [r7, #4]
 8004234:	887a      	ldrh	r2, [r7, #2]
 8004236:	88f8      	ldrh	r0, [r7, #6]
 8004238:	4619      	mov	r1, r3
 800423a:	f7ff fda5 	bl	8003d88 <BSP_LCD_DrawHLine>
  }
  while(Height--);
 800423e:	883b      	ldrh	r3, [r7, #0]
 8004240:	1e5a      	subs	r2, r3, #1
 8004242:	803a      	strh	r2, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f2      	bne.n	800422e <BSP_LCD_FillRect+0x2a>
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bd90      	pop	{r4, r7, pc}
 8004252:	bf00      	nop
 8004254:	200018c8 	.word	0x200018c8

08004258 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	80fb      	strh	r3, [r7, #6]
 8004262:	460b      	mov	r3, r1
 8004264:	80bb      	strh	r3, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	807b      	strh	r3, [r7, #2]
  int32_t  D;        /* Decision Variable */ 
  uint32_t  CurX;    /* Current X Value */
  uint32_t  CurY;    /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 800426a:	887b      	ldrh	r3, [r7, #2]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	f1c3 0303 	rsb	r3, r3, #3
 8004272:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8004278:	887b      	ldrh	r3, [r7, #2]
 800427a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800427c:	4b3e      	ldr	r3, [pc, #248]	; (8004378 <BSP_LCD_FillCircle+0x120>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	b29b      	uxth	r3, r3
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fc50 	bl	8003b28 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8004288:	e061      	b.n	800434e <BSP_LCD_FillCircle+0xf6>
  {
    if(CurY > 0) 
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d021      	beq.n	80042d4 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	b29b      	uxth	r3, r3
 8004294:	88fa      	ldrh	r2, [r7, #6]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	b298      	uxth	r0, r3
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	b29a      	uxth	r2, r3
 800429e:	88bb      	ldrh	r3, [r7, #4]
 80042a0:	4413      	add	r3, r2
 80042a2:	b299      	uxth	r1, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	461a      	mov	r2, r3
 80042ae:	f7ff fd6b 	bl	8003d88 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	88fa      	ldrh	r2, [r7, #6]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	b298      	uxth	r0, r3
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	88ba      	ldrh	r2, [r7, #4]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	b299      	uxth	r1, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	461a      	mov	r2, r3
 80042d0:	f7ff fd5a 	bl	8003d88 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0) 
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d021      	beq.n	800431e <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	88fa      	ldrh	r2, [r7, #6]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	b298      	uxth	r0, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	88ba      	ldrh	r2, [r7, #4]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	b299      	uxth	r1, r3
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	f7ff fd46 	bl	8003d88 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	88fa      	ldrh	r2, [r7, #6]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	b298      	uxth	r0, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	b29a      	uxth	r2, r3
 800430a:	88bb      	ldrh	r3, [r7, #4]
 800430c:	4413      	add	r3, r2
 800430e:	b299      	uxth	r1, r3
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	b29b      	uxth	r3, r3
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	b29b      	uxth	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	f7ff fd35 	bl	8003d88 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b00      	cmp	r3, #0
 8004322:	da06      	bge.n	8004332 <BSP_LCD_FillCircle+0xda>
    { 
      D += (CurX << 2) + 6;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	009a      	lsls	r2, r3, #2
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	4413      	add	r3, r2
 800432c:	3306      	adds	r3, #6
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	e00a      	b.n	8004348 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	009a      	lsls	r2, r3, #2
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	4413      	add	r3, r2
 800433e:	330a      	adds	r3, #10
 8004340:	617b      	str	r3, [r7, #20]
      CurY--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	3b01      	subs	r3, #1
 8004346:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	3301      	adds	r3, #1
 800434c:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	429a      	cmp	r2, r3
 8004354:	d999      	bls.n	800428a <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8004356:	4b08      	ldr	r3, [pc, #32]	; (8004378 <BSP_LCD_FillCircle+0x120>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	b29b      	uxth	r3, r3
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff fbe3 	bl	8003b28 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8004362:	887a      	ldrh	r2, [r7, #2]
 8004364:	88b9      	ldrh	r1, [r7, #4]
 8004366:	88fb      	ldrh	r3, [r7, #6]
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff fe43 	bl	8003ff4 <BSP_LCD_DrawCircle>
}
 800436e:	bf00      	nop
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	200018c8 	.word	0x200018c8

0800437c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOn();
 8004380:	4b02      	ldr	r3, [pc, #8]	; (800438c <BSP_LCD_DisplayOn+0x10>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	4798      	blx	r3
}
 8004388:	bf00      	nop
 800438a:	bd80      	pop	{r7, pc}
 800438c:	200018d4 	.word	0x200018d4

08004390 <LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGBCode: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
static void LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	80fb      	strh	r3, [r7, #6]
 800439a:	460b      	mov	r3, r1
 800439c:	80bb      	strh	r3, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <LCD_DrawPixel+0x34>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d006      	beq.n	80043ba <LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGBCode);
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <LCD_DrawPixel+0x34>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	887a      	ldrh	r2, [r7, #2]
 80043b4:	88b9      	ldrh	r1, [r7, #4]
 80043b6:	88f8      	ldrh	r0, [r7, #6]
 80043b8:	4798      	blx	r3
  }
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	200018d4 	.word	0x200018d4

080043c8 <LCD_DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08a      	sub	sp, #40	; 0x28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	603a      	str	r2, [r7, #0]
 80043d2:	80fb      	strh	r3, [r7, #6]
 80043d4:	460b      	mov	r3, r1
 80043d6:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
 80043dc:	2300      	movs	r3, #0
 80043de:	623b      	str	r3, [r7, #32]
 80043e0:	2300      	movs	r3, #0
 80043e2:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	82fb      	strh	r3, [r7, #22]
 80043e8:	2300      	movs	r3, #0
 80043ea:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61fb      	str	r3, [r7, #28]
  
 
  height = DrawProp.pFont->Height;
 80043f8:	4b63      	ldr	r3, [pc, #396]	; (8004588 <LCD_DrawChar+0x1c0>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	88db      	ldrh	r3, [r3, #6]
 80043fe:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8004400:	4b61      	ldr	r3, [pc, #388]	; (8004588 <LCD_DrawChar+0x1c0>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	889b      	ldrh	r3, [r3, #4]
 8004406:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 8004408:	8afa      	ldrh	r2, [r7, #22]
 800440a:	8abb      	ldrh	r3, [r7, #20]
 800440c:	fb12 f303 	smulbb	r3, r2, r3
 8004410:	b29b      	uxth	r3, r3
 8004412:	331b      	adds	r3, #27
 8004414:	b29b      	uxth	r3, r3
 8004416:	4a5d      	ldr	r2, [pc, #372]	; (800458c <LCD_DrawChar+0x1c4>)
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	b29b      	uxth	r3, r3
 800441c:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 800441e:	8afb      	ldrh	r3, [r7, #22]
 8004420:	8aba      	ldrh	r2, [r7, #20]
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	331b      	adds	r3, #27
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	141a      	asrs	r2, r3, #16
 800442c:	4b58      	ldr	r3, [pc, #352]	; (8004590 <LCD_DrawChar+0x1c8>)
 800442e:	b292      	uxth	r2, r2
 8004430:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8004432:	4b58      	ldr	r3, [pc, #352]	; (8004594 <LCD_DrawChar+0x1cc>)
 8004434:	2236      	movs	r2, #54	; 0x36
 8004436:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 8004438:	4a57      	ldr	r2, [pc, #348]	; (8004598 <LCD_DrawChar+0x1d0>)
 800443a:	8abb      	ldrh	r3, [r7, #20]
 800443c:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 800443e:	8abb      	ldrh	r3, [r7, #20]
 8004440:	141a      	asrs	r2, r3, #16
 8004442:	4b56      	ldr	r3, [pc, #344]	; (800459c <LCD_DrawChar+0x1d4>)
 8004444:	b292      	uxth	r2, r2
 8004446:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 8004448:	4a55      	ldr	r2, [pc, #340]	; (80045a0 <LCD_DrawChar+0x1d8>)
 800444a:	8afb      	ldrh	r3, [r7, #22]
 800444c:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 800444e:	8afb      	ldrh	r3, [r7, #22]
 8004450:	141a      	asrs	r2, r3, #16
 8004452:	4b54      	ldr	r3, [pc, #336]	; (80045a4 <LCD_DrawChar+0x1dc>)
 8004454:	b292      	uxth	r2, r2
 8004456:	801a      	strh	r2, [r3, #0]

  offset =  8 *((width + 7)/8) -  width ;
 8004458:	8abb      	ldrh	r3, [r7, #20]
 800445a:	3307      	adds	r3, #7
 800445c:	2b00      	cmp	r3, #0
 800445e:	da00      	bge.n	8004462 <LCD_DrawChar+0x9a>
 8004460:	3307      	adds	r3, #7
 8004462:	10db      	asrs	r3, r3, #3
 8004464:	b2db      	uxtb	r3, r3
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	b2da      	uxtb	r2, r3
 800446a:	8abb      	ldrh	r3, [r7, #20]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 8004472:	2300      	movs	r3, #0
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
 8004476:	e078      	b.n	800456a <LCD_DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 8004478:	8abb      	ldrh	r3, [r7, #20]
 800447a:	3307      	adds	r3, #7
 800447c:	2b00      	cmp	r3, #0
 800447e:	da00      	bge.n	8004482 <LCD_DrawChar+0xba>
 8004480:	3307      	adds	r3, #7
 8004482:	10db      	asrs	r3, r3, #3
 8004484:	461a      	mov	r2, r3
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	fb02 f303 	mul.w	r3, r2, r3
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	4413      	add	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8004492:	8abb      	ldrh	r3, [r7, #20]
 8004494:	3b11      	subs	r3, #17
 8004496:	2b07      	cmp	r3, #7
 8004498:	d80c      	bhi.n	80044b4 <LCD_DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	041a      	lsls	r2, r3, #16
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3301      	adds	r3, #1
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	4313      	orrs	r3, r2
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	3202      	adds	r2, #2
 80044ae:	7812      	ldrb	r2, [r2, #0]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61fb      	str	r3, [r7, #28]
    }

    if(((width + 7)/8) == 2)
 80044b4:	8abb      	ldrh	r3, [r7, #20]
 80044b6:	3b09      	subs	r3, #9
 80044b8:	2b07      	cmp	r3, #7
 80044ba:	d807      	bhi.n	80044cc <LCD_DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	3201      	adds	r2, #1
 80044c6:	7812      	ldrb	r2, [r2, #0]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	61fb      	str	r3, [r7, #28]
    }
      
    if(((width + 7)/8) == 1)
 80044cc:	8abb      	ldrh	r3, [r7, #20]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	2b07      	cmp	r3, #7
 80044d2:	d802      	bhi.n	80044da <LCD_DrawChar+0x112>
    {
      line =  pchar[0];
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	61fb      	str	r3, [r7, #28]
    }  
    
    for (counterw = 0; counterw < width; counterw++)
 80044da:	2300      	movs	r3, #0
 80044dc:	623b      	str	r3, [r7, #32]
 80044de:	e03d      	b.n	800455c <LCD_DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 80044e0:	8afa      	ldrh	r2, [r7, #22]
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	8aba      	ldrh	r2, [r7, #20]
 80044ea:	fb03 f202 	mul.w	r2, r3, r2
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	4413      	add	r3, r2
 80044f2:	331b      	adds	r3, #27
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 80044f8:	8aba      	ldrh	r2, [r7, #20]
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	1ad2      	subs	r2, r2, r3
 80044fe:	7cfb      	ldrb	r3, [r7, #19]
 8004500:	4413      	add	r3, r2
 8004502:	3b01      	subs	r3, #1
 8004504:	2201      	movs	r2, #1
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	461a      	mov	r2, r3
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d010      	beq.n	8004536 <LCD_DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8004514:	4b1c      	ldr	r3, [pc, #112]	; (8004588 <LCD_DrawChar+0x1c0>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	b2d9      	uxtb	r1, r3
 800451a:	4a23      	ldr	r2, [pc, #140]	; (80045a8 <LCD_DrawChar+0x1e0>)
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	4413      	add	r3, r2
 8004520:	460a      	mov	r2, r1
 8004522:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8004524:	4b18      	ldr	r3, [pc, #96]	; (8004588 <LCD_DrawChar+0x1c0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	0a1a      	lsrs	r2, r3, #8
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	3301      	adds	r3, #1
 800452e:	b2d1      	uxtb	r1, r2
 8004530:	4a1d      	ldr	r2, [pc, #116]	; (80045a8 <LCD_DrawChar+0x1e0>)
 8004532:	54d1      	strb	r1, [r2, r3]
 8004534:	e00f      	b.n	8004556 <LCD_DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 8004536:	4b14      	ldr	r3, [pc, #80]	; (8004588 <LCD_DrawChar+0x1c0>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	b2d9      	uxtb	r1, r3
 800453c:	4a1a      	ldr	r2, [pc, #104]	; (80045a8 <LCD_DrawChar+0x1e0>)
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	4413      	add	r3, r2
 8004542:	460a      	mov	r2, r1
 8004544:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 8004546:	4b10      	ldr	r3, [pc, #64]	; (8004588 <LCD_DrawChar+0x1c0>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	0a1a      	lsrs	r2, r3, #8
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	3301      	adds	r3, #1
 8004550:	b2d1      	uxtb	r1, r2
 8004552:	4a15      	ldr	r2, [pc, #84]	; (80045a8 <LCD_DrawChar+0x1e0>)
 8004554:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	3301      	adds	r3, #1
 800455a:	623b      	str	r3, [r7, #32]
 800455c:	8abb      	ldrh	r3, [r7, #20]
 800455e:	6a3a      	ldr	r2, [r7, #32]
 8004560:	429a      	cmp	r2, r3
 8004562:	d3bd      	bcc.n	80044e0 <LCD_DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	3301      	adds	r3, #1
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
 800456a:	8afb      	ldrh	r3, [r7, #22]
 800456c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456e:	429a      	cmp	r2, r3
 8004570:	d382      	bcc.n	8004478 <LCD_DrawChar+0xb0>
      } 
    }
  }

  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 8004572:	88b9      	ldrh	r1, [r7, #4]
 8004574:	88fb      	ldrh	r3, [r7, #6]
 8004576:	4a0c      	ldr	r2, [pc, #48]	; (80045a8 <LCD_DrawChar+0x1e0>)
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff fdf7 	bl	800416c <BSP_LCD_DrawBitmap>
}
 800457e:	bf00      	nop
 8004580:	3728      	adds	r7, #40	; 0x28
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	200018c8 	.word	0x200018c8
 800458c:	200018da 	.word	0x200018da
 8004590:	200018dc 	.word	0x200018dc
 8004594:	200018e2 	.word	0x200018e2
 8004598:	200018ea 	.word	0x200018ea
 800459c:	200018ec 	.word	0x200018ec
 80045a0:	200018ee 	.word	0x200018ee
 80045a4:	200018f0 	.word	0x200018f0
 80045a8:	200018d8 	.word	0x200018d8

080045ac <LCD_SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80045ac:	b590      	push	{r4, r7, lr}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4604      	mov	r4, r0
 80045b4:	4608      	mov	r0, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	461a      	mov	r2, r3
 80045ba:	4623      	mov	r3, r4
 80045bc:	80fb      	strh	r3, [r7, #6]
 80045be:	4603      	mov	r3, r0
 80045c0:	80bb      	strh	r3, [r7, #4]
 80045c2:	460b      	mov	r3, r1
 80045c4:	807b      	strh	r3, [r7, #2]
 80045c6:	4613      	mov	r3, r2
 80045c8:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <LCD_SetDisplayWindow+0x40>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d007      	beq.n	80045e4 <LCD_SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <LCD_SetDisplayWindow+0x40>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	69dc      	ldr	r4, [r3, #28]
 80045da:	883b      	ldrh	r3, [r7, #0]
 80045dc:	887a      	ldrh	r2, [r7, #2]
 80045de:	88b9      	ldrh	r1, [r7, #4]
 80045e0:	88f8      	ldrh	r0, [r7, #6]
 80045e2:	47a0      	blx	r4
  }  
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd90      	pop	{r4, r7, pc}
 80045ec:	200018d4 	.word	0x200018d4

080045f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e12b      	b.n	800485a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fe fac0 	bl	8002b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2224      	movs	r2, #36	; 0x24
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0201 	bic.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004642:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004652:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004654:	f003 fd4c 	bl	80080f0 <HAL_RCC_GetPCLK1Freq>
 8004658:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	4a81      	ldr	r2, [pc, #516]	; (8004864 <HAL_I2C_Init+0x274>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d807      	bhi.n	8004674 <HAL_I2C_Init+0x84>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4a80      	ldr	r2, [pc, #512]	; (8004868 <HAL_I2C_Init+0x278>)
 8004668:	4293      	cmp	r3, r2
 800466a:	bf94      	ite	ls
 800466c:	2301      	movls	r3, #1
 800466e:	2300      	movhi	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	e006      	b.n	8004682 <HAL_I2C_Init+0x92>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4a7d      	ldr	r2, [pc, #500]	; (800486c <HAL_I2C_Init+0x27c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	bf94      	ite	ls
 800467c:	2301      	movls	r3, #1
 800467e:	2300      	movhi	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e0e7      	b.n	800485a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4a78      	ldr	r2, [pc, #480]	; (8004870 <HAL_I2C_Init+0x280>)
 800468e:	fba2 2303 	umull	r2, r3, r2, r3
 8004692:	0c9b      	lsrs	r3, r3, #18
 8004694:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4a6a      	ldr	r2, [pc, #424]	; (8004864 <HAL_I2C_Init+0x274>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d802      	bhi.n	80046c4 <HAL_I2C_Init+0xd4>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	3301      	adds	r3, #1
 80046c2:	e009      	b.n	80046d8 <HAL_I2C_Init+0xe8>
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046ca:	fb02 f303 	mul.w	r3, r2, r3
 80046ce:	4a69      	ldr	r2, [pc, #420]	; (8004874 <HAL_I2C_Init+0x284>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	099b      	lsrs	r3, r3, #6
 80046d6:	3301      	adds	r3, #1
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	430b      	orrs	r3, r1
 80046de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	495c      	ldr	r1, [pc, #368]	; (8004864 <HAL_I2C_Init+0x274>)
 80046f4:	428b      	cmp	r3, r1
 80046f6:	d819      	bhi.n	800472c <HAL_I2C_Init+0x13c>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	1e59      	subs	r1, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	fbb1 f3f3 	udiv	r3, r1, r3
 8004706:	1c59      	adds	r1, r3, #1
 8004708:	f640 73fc 	movw	r3, #4092	; 0xffc
 800470c:	400b      	ands	r3, r1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_I2C_Init+0x138>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1e59      	subs	r1, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004720:	3301      	adds	r3, #1
 8004722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004726:	e051      	b.n	80047cc <HAL_I2C_Init+0x1dc>
 8004728:	2304      	movs	r3, #4
 800472a:	e04f      	b.n	80047cc <HAL_I2C_Init+0x1dc>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d111      	bne.n	8004758 <HAL_I2C_Init+0x168>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	1e58      	subs	r0, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6859      	ldr	r1, [r3, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	440b      	add	r3, r1
 8004742:	fbb0 f3f3 	udiv	r3, r0, r3
 8004746:	3301      	adds	r3, #1
 8004748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800474c:	2b00      	cmp	r3, #0
 800474e:	bf0c      	ite	eq
 8004750:	2301      	moveq	r3, #1
 8004752:	2300      	movne	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	e012      	b.n	800477e <HAL_I2C_Init+0x18e>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	1e58      	subs	r0, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6859      	ldr	r1, [r3, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	0099      	lsls	r1, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	fbb0 f3f3 	udiv	r3, r0, r3
 800476e:	3301      	adds	r3, #1
 8004770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_I2C_Init+0x196>
 8004782:	2301      	movs	r3, #1
 8004784:	e022      	b.n	80047cc <HAL_I2C_Init+0x1dc>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10e      	bne.n	80047ac <HAL_I2C_Init+0x1bc>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1e58      	subs	r0, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6859      	ldr	r1, [r3, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	440b      	add	r3, r1
 800479c:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a0:	3301      	adds	r3, #1
 80047a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047aa:	e00f      	b.n	80047cc <HAL_I2C_Init+0x1dc>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	1e58      	subs	r0, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6859      	ldr	r1, [r3, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	0099      	lsls	r1, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	fbb0 f3f3 	udiv	r3, r0, r3
 80047c2:	3301      	adds	r3, #1
 80047c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	6809      	ldr	r1, [r1, #0]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69da      	ldr	r2, [r3, #28]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6911      	ldr	r1, [r2, #16]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	68d2      	ldr	r2, [r2, #12]
 8004806:	4311      	orrs	r1, r2
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	430b      	orrs	r3, r1
 800480e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	000186a0 	.word	0x000186a0
 8004868:	001e847f 	.word	0x001e847f
 800486c:	003d08ff 	.word	0x003d08ff
 8004870:	431bde83 	.word	0x431bde83
 8004874:	10624dd3 	.word	0x10624dd3

08004878 <DelayUS>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DelayUS(uint32_t cnt)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  i = cnt * 4;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	60fb      	str	r3, [r7, #12]
  while(i--);
 8004886:	bf00      	nop
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	1e5a      	subs	r2, r3, #1
 800488c:	60fa      	str	r2, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1fa      	bne.n	8004888 <DelayUS+0x10>
}
 8004892:	bf00      	nop
 8004894:	bf00      	nop
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <WR_CMD>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
static void WR_CMD (uint8_t cmd)  
{ 
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&TP_hspi,&cmd,1,1000);
 80048aa:	1df9      	adds	r1, r7, #7
 80048ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048b0:	2201      	movs	r2, #1
 80048b2:	4803      	ldr	r0, [pc, #12]	; (80048c0 <WR_CMD+0x20>)
 80048b4:	f005 f81e 	bl	80098f4 <HAL_SPI_Transmit>
} 
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	200015a4 	.word	0x200015a4

080048c4 <RD_AD>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
static int RD_AD(void)  
{ 
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
  uint8_t buf[2];
  int value;
  HAL_SPI_Receive(&TP_hspi,buf,2,1000);
 80048ca:	4639      	mov	r1, r7
 80048cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048d0:	2202      	movs	r2, #2
 80048d2:	4809      	ldr	r0, [pc, #36]	; (80048f8 <RD_AD+0x34>)
 80048d4:	f005 f94a 	bl	8009b6c <HAL_SPI_Receive>
  value = (uint16_t)((buf[0] << 8) + buf[1]) >> 3;
 80048d8:	783b      	ldrb	r3, [r7, #0]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	b29a      	uxth	r2, r3
 80048e0:	787b      	ldrb	r3, [r7, #1]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	4413      	add	r3, r2
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	08db      	lsrs	r3, r3, #3
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	607b      	str	r3, [r7, #4]
  return value;
 80048ee:	687b      	ldr	r3, [r7, #4]
} 
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	200015a4 	.word	0x200015a4

080048fc <Read_X>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_X(void)  
{  
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
  int i; 
  TP_CS(0); 
 8004902:	2200      	movs	r2, #0
 8004904:	2110      	movs	r1, #16
 8004906:	480c      	ldr	r0, [pc, #48]	; (8004938 <Read_X+0x3c>)
 8004908:	f002 ff00 	bl	800770c <HAL_GPIO_WritePin>
  DelayUS(1); 
 800490c:	2001      	movs	r0, #1
 800490e:	f7ff ffb3 	bl	8004878 <DelayUS>
  WR_CMD(CHX); 
 8004912:	2090      	movs	r0, #144	; 0x90
 8004914:	f7ff ffc4 	bl	80048a0 <WR_CMD>
  DelayUS(1); 
 8004918:	2001      	movs	r0, #1
 800491a:	f7ff ffad 	bl	8004878 <DelayUS>
  i=RD_AD(); 
 800491e:	f7ff ffd1 	bl	80048c4 <RD_AD>
 8004922:	6078      	str	r0, [r7, #4]
  TP_CS(1); 
 8004924:	2201      	movs	r2, #1
 8004926:	2110      	movs	r1, #16
 8004928:	4803      	ldr	r0, [pc, #12]	; (8004938 <Read_X+0x3c>)
 800492a:	f002 feef 	bl	800770c <HAL_GPIO_WritePin>
  return i;    
 800492e:	687b      	ldr	r3, [r7, #4]
} 
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40020800 	.word	0x40020800

0800493c <Read_Y>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_Y(void)  
{  
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
  int i; 
  TP_CS(0); 
 8004942:	2200      	movs	r2, #0
 8004944:	2110      	movs	r1, #16
 8004946:	480c      	ldr	r0, [pc, #48]	; (8004978 <Read_Y+0x3c>)
 8004948:	f002 fee0 	bl	800770c <HAL_GPIO_WritePin>
  DelayUS(1); 
 800494c:	2001      	movs	r0, #1
 800494e:	f7ff ff93 	bl	8004878 <DelayUS>
  WR_CMD(CHY); 
 8004952:	20d0      	movs	r0, #208	; 0xd0
 8004954:	f7ff ffa4 	bl	80048a0 <WR_CMD>
  DelayUS(1); 
 8004958:	2001      	movs	r0, #1
 800495a:	f7ff ff8d 	bl	8004878 <DelayUS>
  i=RD_AD(); 
 800495e:	f7ff ffb1 	bl	80048c4 <RD_AD>
 8004962:	6078      	str	r0, [r7, #4]
  TP_CS(1); 
 8004964:	2201      	movs	r2, #1
 8004966:	2110      	movs	r1, #16
 8004968:	4803      	ldr	r0, [pc, #12]	; (8004978 <Read_Y+0x3c>)
 800496a:	f002 fecf 	bl	800770c <HAL_GPIO_WritePin>
  return i;     
 800496e:	687b      	ldr	r3, [r7, #4]
} 
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40020800 	.word	0x40020800

0800497c <TP_GetAdXY>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
void TP_GetAdXY(int *x,int *y)  
{ 
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  int adx,ady; 
  adx=Read_X(); 
 8004986:	f7ff ffb9 	bl	80048fc <Read_X>
 800498a:	60f8      	str	r0, [r7, #12]
  DelayUS(1); 
 800498c:	2001      	movs	r0, #1
 800498e:	f7ff ff73 	bl	8004878 <DelayUS>
  ady=Read_Y(); 
 8004992:	f7ff ffd3 	bl	800493c <Read_Y>
 8004996:	60b8      	str	r0, [r7, #8]
  *x=adx; 
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	601a      	str	r2, [r3, #0]
  *y=ady; 
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	601a      	str	r2, [r3, #0]
} 
 80049a4:	bf00      	nop
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <DrawCross>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DrawCross(uint16_t Xpos,uint16_t Ypos)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	460a      	mov	r2, r1
 80049b6:	80fb      	strh	r3, [r7, #6]
 80049b8:	4613      	mov	r3, r2
 80049ba:	80bb      	strh	r3, [r7, #4]
  BSP_LCD_DrawHLine(Xpos-13, Ypos, 10);
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	3b0d      	subs	r3, #13
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	88b9      	ldrh	r1, [r7, #4]
 80049c4:	220a      	movs	r2, #10
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff f9de 	bl	8003d88 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos+4, Ypos, 10);
 80049cc:	88fb      	ldrh	r3, [r7, #6]
 80049ce:	3304      	adds	r3, #4
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	88b9      	ldrh	r1, [r7, #4]
 80049d4:	220a      	movs	r2, #10
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff f9d6 	bl	8003d88 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos-13, 10);
 80049dc:	88bb      	ldrh	r3, [r7, #4]
 80049de:	3b0d      	subs	r3, #13
 80049e0:	b299      	uxth	r1, r3
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	220a      	movs	r2, #10
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fa08 	bl	8003dfc <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine(Xpos, Ypos+4, 10);  
 80049ec:	88bb      	ldrh	r3, [r7, #4]
 80049ee:	3304      	adds	r3, #4
 80049f0:	b299      	uxth	r1, r3
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	220a      	movs	r2, #10
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fa00 	bl	8003dfc <BSP_LCD_DrawVLine>

}  
 80049fc:	bf00      	nop
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <Read_Ads7846>:
* Output         : None
* Return         : Coordinate *
* Attention      : None
*******************************************************************************/
Coordinate *Read_Ads7846(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b09c      	sub	sp, #112	; 0x70
 8004a08:	af00      	add	r7, sp, #0
  static Coordinate  screen;
  int m0,m1,m2,TP_X[1],TP_Y[1],temp[3];
  uint8_t count=0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  int buffer[2][9]={{0},{0}};
 8004a10:	1d3b      	adds	r3, r7, #4
 8004a12:	2248      	movs	r2, #72	; 0x48
 8004a14:	2100      	movs	r1, #0
 8004a16:	4618      	mov	r0, r3
 8004a18:	f00e fffd 	bl	8013a16 <memset>
  
  do
  {       
    TP_GetAdXY(TP_X,TP_Y);  
 8004a1c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004a20:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004a24:	4611      	mov	r1, r2
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff ffa8 	bl	800497c <TP_GetAdXY>
    buffer[0][count]=TP_X[0];  
 8004a2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	3370      	adds	r3, #112	; 0x70
 8004a36:	443b      	add	r3, r7
 8004a38:	f843 2c6c 	str.w	r2, [r3, #-108]
    buffer[1][count]=TP_Y[0];
 8004a3c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a42:	3309      	adds	r3, #9
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	3370      	adds	r3, #112	; 0x70
 8004a48:	443b      	add	r3, r7
 8004a4a:	f843 2c6c 	str.w	r2, [r3, #-108]
    count++;  
 8004a4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a52:	3301      	adds	r3, #1
 8004a54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  while(!TP_INT_IN&& count<9);  /* TP_INT_IN  */
 8004a58:	2120      	movs	r1, #32
 8004a5a:	4885      	ldr	r0, [pc, #532]	; (8004c70 <Read_Ads7846+0x26c>)
 8004a5c:	f002 fe3e 	bl	80076dc <HAL_GPIO_ReadPin>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <Read_Ads7846+0x6a>
 8004a66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d9d6      	bls.n	8004a1c <Read_Ads7846+0x18>
  if(count==9)   /* Average X Y  */ 
 8004a6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a72:	2b09      	cmp	r3, #9
 8004a74:	f040 80f6 	bne.w	8004c64 <Read_Ads7846+0x260>
  {
    /* Average X  */
    temp[0]=(buffer[0][0]+buffer[0][1]+buffer[0][2])/3;
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	441a      	add	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4413      	add	r3, r2
 8004a82:	4a7c      	ldr	r2, [pc, #496]	; (8004c74 <Read_Ads7846+0x270>)
 8004a84:	fb82 1203 	smull	r1, r2, r2, r3
 8004a88:	17db      	asrs	r3, r3, #31
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp[1]=(buffer[0][3]+buffer[0][4]+buffer[0][5])/3;
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	441a      	add	r2, r3
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	4413      	add	r3, r2
 8004a98:	4a76      	ldr	r2, [pc, #472]	; (8004c74 <Read_Ads7846+0x270>)
 8004a9a:	fb82 1203 	smull	r1, r2, r2, r3
 8004a9e:	17db      	asrs	r3, r3, #31
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	653b      	str	r3, [r7, #80]	; 0x50
    temp[2]=(buffer[0][6]+buffer[0][7]+buffer[0][8])/3;
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	441a      	add	r2, r3
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	4413      	add	r3, r2
 8004aae:	4a71      	ldr	r2, [pc, #452]	; (8004c74 <Read_Ads7846+0x270>)
 8004ab0:	fb82 1203 	smull	r1, r2, r2, r3
 8004ab4:	17db      	asrs	r3, r3, #31
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	657b      	str	r3, [r7, #84]	; 0x54
   
    m0=temp[0]-temp[1];
 8004aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=temp[1]-temp[2];
 8004ac2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	667b      	str	r3, [r7, #100]	; 0x64
    m2=temp[2]-temp[0];
 8004aca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	663b      	str	r3, [r7, #96]	; 0x60
   
    m0=m0>0?m0:(-m0);
 8004ad2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bfb8      	it	lt
 8004ad8:	425b      	neglt	r3, r3
 8004ada:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=m1>0?m1:(-m1);
 8004adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bfb8      	it	lt
 8004ae2:	425b      	neglt	r3, r3
 8004ae4:	667b      	str	r3, [r7, #100]	; 0x64
    m2=m2>0?m2:(-m2);
 8004ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bfb8      	it	lt
 8004aec:	425b      	neglt	r3, r3
 8004aee:	663b      	str	r3, [r7, #96]	; 0x60
   
    if( m0>THRESHOLD  &&  m1>THRESHOLD  &&  m2>THRESHOLD ) return 0;
 8004af0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	dd07      	ble.n	8004b06 <Read_Ads7846+0x102>
 8004af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	dd04      	ble.n	8004b06 <Read_Ads7846+0x102>
 8004afc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	dd01      	ble.n	8004b06 <Read_Ads7846+0x102>
 8004b02:	2300      	movs	r3, #0
 8004b04:	e0af      	b.n	8004c66 <Read_Ads7846+0x262>
   
    if(m0<m1)
 8004b06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	da17      	bge.n	8004b3e <Read_Ads7846+0x13a>
    {
      if(m2<m0) 
 8004b0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b12:	429a      	cmp	r2, r3
 8004b14:	da09      	bge.n	8004b2a <Read_Ads7846+0x126>
        screen.x=(temp[0]+temp[2])/2;
 8004b16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b1a:	4413      	add	r3, r2
 8004b1c:	0fda      	lsrs	r2, r3, #31
 8004b1e:	4413      	add	r3, r2
 8004b20:	105b      	asrs	r3, r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	4b54      	ldr	r3, [pc, #336]	; (8004c78 <Read_Ads7846+0x274>)
 8004b26:	801a      	strh	r2, [r3, #0]
 8004b28:	e020      	b.n	8004b6c <Read_Ads7846+0x168>
      else 
        screen.x=(temp[0]+temp[1])/2;  
 8004b2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b2e:	4413      	add	r3, r2
 8004b30:	0fda      	lsrs	r2, r3, #31
 8004b32:	4413      	add	r3, r2
 8004b34:	105b      	asrs	r3, r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	4b4f      	ldr	r3, [pc, #316]	; (8004c78 <Read_Ads7846+0x274>)
 8004b3a:	801a      	strh	r2, [r3, #0]
 8004b3c:	e016      	b.n	8004b6c <Read_Ads7846+0x168>
    }
    else if(m2<m1) 
 8004b3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b42:	429a      	cmp	r2, r3
 8004b44:	da09      	bge.n	8004b5a <Read_Ads7846+0x156>
      screen.x=(temp[0]+temp[2])/2;
 8004b46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b4a:	4413      	add	r3, r2
 8004b4c:	0fda      	lsrs	r2, r3, #31
 8004b4e:	4413      	add	r3, r2
 8004b50:	105b      	asrs	r3, r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	4b48      	ldr	r3, [pc, #288]	; (8004c78 <Read_Ads7846+0x274>)
 8004b56:	801a      	strh	r2, [r3, #0]
 8004b58:	e008      	b.n	8004b6c <Read_Ads7846+0x168>
    else 
      screen.x=(temp[1]+temp[2])/2;
 8004b5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b5e:	4413      	add	r3, r2
 8004b60:	0fda      	lsrs	r2, r3, #31
 8004b62:	4413      	add	r3, r2
 8004b64:	105b      	asrs	r3, r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	4b43      	ldr	r3, [pc, #268]	; (8004c78 <Read_Ads7846+0x274>)
 8004b6a:	801a      	strh	r2, [r3, #0]
   
    /* Average Y  */
    temp[0]=(buffer[1][0]+buffer[1][1]+buffer[1][2])/3;
 8004b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b70:	441a      	add	r2, r3
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	4413      	add	r3, r2
 8004b76:	4a3f      	ldr	r2, [pc, #252]	; (8004c74 <Read_Ads7846+0x270>)
 8004b78:	fb82 1203 	smull	r1, r2, r2, r3
 8004b7c:	17db      	asrs	r3, r3, #31
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp[1]=(buffer[1][3]+buffer[1][4]+buffer[1][5])/3;
 8004b82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	441a      	add	r2, r3
 8004b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b8a:	4413      	add	r3, r2
 8004b8c:	4a39      	ldr	r2, [pc, #228]	; (8004c74 <Read_Ads7846+0x270>)
 8004b8e:	fb82 1203 	smull	r1, r2, r2, r3
 8004b92:	17db      	asrs	r3, r3, #31
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	653b      	str	r3, [r7, #80]	; 0x50
    temp[2]=(buffer[1][6]+buffer[1][7]+buffer[1][8])/3;
 8004b98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b9c:	441a      	add	r2, r3
 8004b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba0:	4413      	add	r3, r2
 8004ba2:	4a34      	ldr	r2, [pc, #208]	; (8004c74 <Read_Ads7846+0x270>)
 8004ba4:	fb82 1203 	smull	r1, r2, r2, r3
 8004ba8:	17db      	asrs	r3, r3, #31
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	657b      	str	r3, [r7, #84]	; 0x54
    m0=temp[0]-temp[1];
 8004bae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=temp[1]-temp[2];
 8004bb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	667b      	str	r3, [r7, #100]	; 0x64
    m2=temp[2]-temp[0];
 8004bbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	663b      	str	r3, [r7, #96]	; 0x60
    m0=m0>0?m0:(-m0);
 8004bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bfb8      	it	lt
 8004bcc:	425b      	neglt	r3, r3
 8004bce:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=m1>0?m1:(-m1);
 8004bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	bfb8      	it	lt
 8004bd6:	425b      	neglt	r3, r3
 8004bd8:	667b      	str	r3, [r7, #100]	; 0x64
    m2=m2>0?m2:(-m2);
 8004bda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	bfb8      	it	lt
 8004be0:	425b      	neglt	r3, r3
 8004be2:	663b      	str	r3, [r7, #96]	; 0x60
    if(m0>THRESHOLD&&m1>THRESHOLD&&m2>THRESHOLD) return 0;
 8004be4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	dd07      	ble.n	8004bfa <Read_Ads7846+0x1f6>
 8004bea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	dd04      	ble.n	8004bfa <Read_Ads7846+0x1f6>
 8004bf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	dd01      	ble.n	8004bfa <Read_Ads7846+0x1f6>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	e035      	b.n	8004c66 <Read_Ads7846+0x262>
   
    if(m0<m1)
 8004bfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	da17      	bge.n	8004c32 <Read_Ads7846+0x22e>
    {
      if(m2<m0) 
 8004c02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c06:	429a      	cmp	r2, r3
 8004c08:	da09      	bge.n	8004c1e <Read_Ads7846+0x21a>
        screen.y=(temp[0]+temp[2])/2;
 8004c0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c0e:	4413      	add	r3, r2
 8004c10:	0fda      	lsrs	r2, r3, #31
 8004c12:	4413      	add	r3, r2
 8004c14:	105b      	asrs	r3, r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	4b17      	ldr	r3, [pc, #92]	; (8004c78 <Read_Ads7846+0x274>)
 8004c1a:	805a      	strh	r2, [r3, #2]
 8004c1c:	e020      	b.n	8004c60 <Read_Ads7846+0x25c>
      else 
        screen.y=(temp[0]+temp[1])/2;  
 8004c1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c22:	4413      	add	r3, r2
 8004c24:	0fda      	lsrs	r2, r3, #31
 8004c26:	4413      	add	r3, r2
 8004c28:	105b      	asrs	r3, r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <Read_Ads7846+0x274>)
 8004c2e:	805a      	strh	r2, [r3, #2]
 8004c30:	e016      	b.n	8004c60 <Read_Ads7846+0x25c>
      }
    else if(m2<m1) 
 8004c32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c36:	429a      	cmp	r2, r3
 8004c38:	da09      	bge.n	8004c4e <Read_Ads7846+0x24a>
       screen.y=(temp[0]+temp[2])/2;
 8004c3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c3e:	4413      	add	r3, r2
 8004c40:	0fda      	lsrs	r2, r3, #31
 8004c42:	4413      	add	r3, r2
 8004c44:	105b      	asrs	r3, r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <Read_Ads7846+0x274>)
 8004c4a:	805a      	strh	r2, [r3, #2]
 8004c4c:	e008      	b.n	8004c60 <Read_Ads7846+0x25c>
    else
       screen.y=(temp[1]+temp[2])/2;
 8004c4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c52:	4413      	add	r3, r2
 8004c54:	0fda      	lsrs	r2, r3, #31
 8004c56:	4413      	add	r3, r2
 8004c58:	105b      	asrs	r3, r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <Read_Ads7846+0x274>)
 8004c5e:	805a      	strh	r2, [r3, #2]
   
    return &screen;
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <Read_Ads7846+0x274>)
 8004c62:	e000      	b.n	8004c66 <Read_Ads7846+0x262>
  }
  return 0; 
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3770      	adds	r7, #112	; 0x70
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40020800 	.word	0x40020800
 8004c74:	55555556 	.word	0x55555556
 8004c78:	20001c88 	.word	0x20001c88

08004c7c <setCalibrationMatrix>:
* Attention      : None
*******************************************************************************/
FunctionalState setCalibrationMatrix( Coordinate * displayPtr,
                          Coordinate * screenPtr,
                          Matrix * matrixPtr)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]

  FunctionalState retTHRESHOLD = ENABLE ;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	75fb      	strb	r3, [r7, #23]
  /* K=(X0-X2) (Y1-Y2)-(X1-X2) (Y0-Y2) */
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	3308      	adds	r3, #8
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	3204      	adds	r2, #4
 8004c9e:	8852      	ldrh	r2, [r2, #2]
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	3208      	adds	r2, #8
 8004ca6:	8852      	ldrh	r2, [r2, #2]
 8004ca8:	1a8a      	subs	r2, r1, r2
 8004caa:	fb03 f202 	mul.w	r2, r3, r2
                       ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	3308      	adds	r3, #8
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	1acb      	subs	r3, r1, r3
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	8849      	ldrh	r1, [r1, #2]
 8004cc2:	4608      	mov	r0, r1
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	3108      	adds	r1, #8
 8004cc8:	8849      	ldrh	r1, [r1, #2]
 8004cca:	1a41      	subs	r1, r0, r1
 8004ccc:	fb01 f303 	mul.w	r3, r1, r3
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fb fc26 	bl	8000524 <__aeabi_i2d>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  if( matrixPtr->Divider == 0 )
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	f7fb feea 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <setCalibrationMatrix+0x84>
  {
    retTHRESHOLD = DISABLE;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	75fb      	strb	r3, [r7, #23]
 8004cfe:	e145      	b.n	8004f8c <setCalibrationMatrix+0x310>
  }
  else
  {
    /* A=((XD0-XD2) (Y1-Y2)-(XD1-XD2) (Y0-Y2))/K  */
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3308      	adds	r3, #8
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	3204      	adds	r2, #4
 8004d12:	8852      	ldrh	r2, [r2, #2]
 8004d14:	4611      	mov	r1, r2
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	3208      	adds	r2, #8
 8004d1a:	8852      	ldrh	r2, [r2, #2]
 8004d1c:	1a8a      	subs	r2, r1, r2
 8004d1e:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3304      	adds	r3, #4
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	4619      	mov	r1, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	3308      	adds	r3, #8
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	1acb      	subs	r3, r1, r3
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	8849      	ldrh	r1, [r1, #2]
 8004d36:	4608      	mov	r0, r1
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	3108      	adds	r1, #8
 8004d3c:	8849      	ldrh	r1, [r1, #2]
 8004d3e:	1a41      	subs	r1, r0, r1
 8004d40:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fb fbec 	bl	8000524 <__aeabi_i2d>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	e9c1 2300 	strd	r2, r3, [r1]
  /* B=((X0-X2) (XD1-XD2)-(XD0-XD2) (X1-X2))/K  */
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	3308      	adds	r3, #8
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	3204      	adds	r2, #4
 8004d68:	8812      	ldrh	r2, [r2, #0]
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	3208      	adds	r2, #8
 8004d70:	8812      	ldrh	r2, [r2, #0]
 8004d72:	1a8a      	subs	r2, r1, r2
 8004d74:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3308      	adds	r3, #8
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	1acb      	subs	r3, r1, r3
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	3104      	adds	r1, #4
 8004d8a:	8809      	ldrh	r1, [r1, #0]
 8004d8c:	4608      	mov	r0, r1
 8004d8e:	68b9      	ldr	r1, [r7, #8]
 8004d90:	3108      	adds	r1, #8
 8004d92:	8809      	ldrh	r1, [r1, #0]
 8004d94:	1a41      	subs	r1, r0, r1
 8004d96:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fb fbc1 	bl	8000524 <__aeabi_i2d>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    /* C=(Y0(X2XD1-X1XD2)+Y1(X0XD2-X2XD0)+Y2(X1XD0-X0XD1))/K */
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	3308      	adds	r3, #8
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	3304      	adds	r3, #4
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	fb03 f202 	mul.w	r2, r3, r2
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3308      	adds	r3, #8
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	8852      	ldrh	r2, [r2, #2]
 8004dd6:	fb03 f202 	mul.w	r2, r3, r2
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	4619      	mov	r1, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3308      	adds	r3, #8
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	fb03 f101 	mul.w	r1, r3, r1
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	3308      	adds	r3, #8
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	fb00 f303 	mul.w	r3, r0, r3
 8004dfa:	1acb      	subs	r3, r1, r3
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	3104      	adds	r1, #4
 8004e00:	8849      	ldrh	r1, [r1, #2]
 8004e02:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8004e06:	441a      	add	r2, r3
                    (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	fb03 f101 	mul.w	r1, r3, r1
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3304      	adds	r3, #4
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	fb00 f303 	mul.w	r3, r0, r3
 8004e28:	1acb      	subs	r3, r1, r3
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	3108      	adds	r1, #8
 8004e2e:	8849      	ldrh	r1, [r1, #2]
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8004e34:	4413      	add	r3, r2
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fb fb74 	bl	8000524 <__aeabi_i2d>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	e9c1 2304 	strd	r2, r3, [r1, #16]
    /* D=((YD0-YD2) (Y1-Y2)-(YD1-YD2) (Y0-Y2))/K  */
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	885b      	ldrh	r3, [r3, #2]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3308      	adds	r3, #8
 8004e50:	885b      	ldrh	r3, [r3, #2]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	3204      	adds	r2, #4
 8004e58:	8852      	ldrh	r2, [r2, #2]
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	3208      	adds	r2, #8
 8004e60:	8852      	ldrh	r2, [r2, #2]
 8004e62:	1a8a      	subs	r2, r1, r2
 8004e64:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	885b      	ldrh	r3, [r3, #2]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3308      	adds	r3, #8
 8004e74:	885b      	ldrh	r3, [r3, #2]
 8004e76:	1acb      	subs	r3, r1, r3
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	8849      	ldrh	r1, [r1, #2]
 8004e7c:	4608      	mov	r0, r1
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	3108      	adds	r1, #8
 8004e82:	8849      	ldrh	r1, [r1, #2]
 8004e84:	1a41      	subs	r1, r0, r1
 8004e86:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fb fb49 	bl	8000524 <__aeabi_i2d>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	e9c1 2306 	strd	r2, r3, [r1, #24]
    /* E=((X0-X2) (YD1-YD2)-(YD0-YD2) (X1-X2))/K  */
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	3204      	adds	r2, #4
 8004eae:	8852      	ldrh	r2, [r2, #2]
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	3208      	adds	r2, #8
 8004eb6:	8852      	ldrh	r2, [r2, #2]
 8004eb8:	1a8a      	subs	r2, r1, r2
 8004eba:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	885b      	ldrh	r3, [r3, #2]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3308      	adds	r3, #8
 8004ec8:	885b      	ldrh	r3, [r3, #2]
 8004eca:	1acb      	subs	r3, r1, r3
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	3104      	adds	r1, #4
 8004ed0:	8809      	ldrh	r1, [r1, #0]
 8004ed2:	4608      	mov	r0, r1
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	3108      	adds	r1, #8
 8004ed8:	8809      	ldrh	r1, [r1, #0]
 8004eda:	1a41      	subs	r1, r0, r1
 8004edc:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fb fb1e 	bl	8000524 <__aeabi_i2d>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	e9c1 2308 	strd	r2, r3, [r1, #32]
    /* F=(Y0(X2YD1-X1YD2)+Y1(X0YD2-X2YD0)+Y2(X1YD0-X0YD1))/K */
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3304      	adds	r3, #4
 8004efe:	885b      	ldrh	r3, [r3, #2]
 8004f00:	fb03 f202 	mul.w	r2, r3, r2
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	3304      	adds	r3, #4
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	885b      	ldrh	r3, [r3, #2]
 8004f12:	fb01 f303 	mul.w	r3, r1, r3
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	8852      	ldrh	r2, [r2, #2]
 8004f1c:	fb03 f202 	mul.w	r2, r3, r2
                    (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	4619      	mov	r1, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3308      	adds	r3, #8
 8004f2a:	885b      	ldrh	r3, [r3, #2]
 8004f2c:	fb03 f101 	mul.w	r1, r3, r1
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	3308      	adds	r3, #8
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	885b      	ldrh	r3, [r3, #2]
 8004f3c:	fb00 f303 	mul.w	r3, r0, r3
 8004f40:	1acb      	subs	r3, r1, r3
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	3104      	adds	r1, #4
 8004f46:	8849      	ldrh	r1, [r1, #2]
 8004f48:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8004f4c:	441a      	add	r2, r3
                    (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	3304      	adds	r3, #4
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	4619      	mov	r1, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	885b      	ldrh	r3, [r3, #2]
 8004f5a:	fb03 f101 	mul.w	r1, r3, r1
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3304      	adds	r3, #4
 8004f68:	885b      	ldrh	r3, [r3, #2]
 8004f6a:	fb00 f303 	mul.w	r3, r0, r3
 8004f6e:	1acb      	subs	r3, r1, r3
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	3108      	adds	r1, #8
 8004f74:	8849      	ldrh	r1, [r1, #2]
 8004f76:	fb01 f303 	mul.w	r3, r1, r3
                    (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8004f7a:	4413      	add	r3, r2
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fb fad1 	bl	8000524 <__aeabi_i2d>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  }
  return( retTHRESHOLD ) ;
 8004f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <getDisplayPoint>:
* Attention      : None
*******************************************************************************/
FunctionalState getDisplayPoint(Coordinate * displayPtr,
                     Coordinate * screenPtr,
                     Matrix * matrixPtr )
{
 8004f96:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  FunctionalState retTHRESHOLD =ENABLE ;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	75fb      	strb	r3, [r7, #23]
  /*
  An=168
  */
  if( matrixPtr->Divider != 0 )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	f7fb fd87 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f040 8085 	bne.w	80050cc <getDisplayPoint+0x136>
  {
    /* XD = AX+BY+C */        
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fb faa9 	bl	8000524 <__aeabi_i2d>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	4629      	mov	r1, r5
 8004fda:	f7fb fb0d 	bl	80005f8 <__aeabi_dmul>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4690      	mov	r8, r2
 8004fe4:	4699      	mov	r9, r3
                      (matrixPtr->Bn * screenPtr->y) + 
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	885b      	ldrh	r3, [r3, #2]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fb fa97 	bl	8000524 <__aeabi_i2d>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	f7fb fafb 	bl	80005f8 <__aeabi_dmul>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8005006:	4640      	mov	r0, r8
 8005008:	4649      	mov	r1, r9
 800500a:	f7fb f93f 	bl	800028c <__adddf3>
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	4610      	mov	r0, r2
 8005014:	4619      	mov	r1, r3
                       matrixPtr->Cn 
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
                      (matrixPtr->Bn * screenPtr->y) + 
 800501c:	f7fb f936 	bl	800028c <__adddf3>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4610      	mov	r0, r2
 8005026:	4619      	mov	r1, r3
                    ) / matrixPtr->Divider ;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800502e:	f7fb fc0d 	bl	800084c <__aeabi_ddiv>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8005036:	4610      	mov	r0, r2
 8005038:	4619      	mov	r1, r3
 800503a:	f7fb fdb5 	bl	8000ba8 <__aeabi_d2uiz>
 800503e:	4603      	mov	r3, r0
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	801a      	strh	r2, [r3, #0]
    /* YD = DX+EY+F */        
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f7fb fa67 	bl	8000524 <__aeabi_i2d>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4620      	mov	r0, r4
 800505c:	4629      	mov	r1, r5
 800505e:	f7fb facb 	bl	80005f8 <__aeabi_dmul>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4690      	mov	r8, r2
 8005068:	4699      	mov	r9, r3
                      (matrixPtr->En * screenPtr->y) + 
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	885b      	ldrh	r3, [r3, #2]
 8005074:	4618      	mov	r0, r3
 8005076:	f7fb fa55 	bl	8000524 <__aeabi_i2d>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4620      	mov	r0, r4
 8005080:	4629      	mov	r1, r5
 8005082:	f7fb fab9 	bl	80005f8 <__aeabi_dmul>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 800508a:	4640      	mov	r0, r8
 800508c:	4649      	mov	r1, r9
 800508e:	f7fb f8fd 	bl	800028c <__adddf3>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4610      	mov	r0, r2
 8005098:	4619      	mov	r1, r3
                       matrixPtr->Fn 
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
                      (matrixPtr->En * screenPtr->y) + 
 80050a0:	f7fb f8f4 	bl	800028c <__adddf3>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4610      	mov	r0, r2
 80050aa:	4619      	mov	r1, r3
                    ) / matrixPtr->Divider ;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80050b2:	f7fb fbcb 	bl	800084c <__aeabi_ddiv>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 80050ba:	4610      	mov	r0, r2
 80050bc:	4619      	mov	r1, r3
 80050be:	f7fb fd73 	bl	8000ba8 <__aeabi_d2uiz>
 80050c2:	4603      	mov	r3, r0
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	805a      	strh	r2, [r3, #2]
 80050ca:	e001      	b.n	80050d0 <getDisplayPoint+0x13a>
  }
  else
  {
    retTHRESHOLD = DISABLE;
 80050cc:	2300      	movs	r3, #0
 80050ce:	75fb      	strb	r3, [r7, #23]
  }
  return(retTHRESHOLD);
 80050d0:	7dfb      	ldrb	r3, [r7, #23]
} 
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080050dc <TouchPanel_Calibrate>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void TouchPanel_Calibrate(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
  uint8_t i;
  Coordinate * Ptr;

  for(i=0;i<3;i++)
 80050e2:	2300      	movs	r3, #0
 80050e4:	71fb      	strb	r3, [r7, #7]
 80050e6:	e03b      	b.n	8005160 <TouchPanel_Calibrate+0x84>
  {
    BSP_LCD_SetFont(&Font12);
 80050e8:	4825      	ldr	r0, [pc, #148]	; (8005180 <TouchPanel_Calibrate+0xa4>)
 80050ea:	f7fe fd2d 	bl	8003b48 <BSP_LCD_SetFont>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80050ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80050f2:	f7fe fd45 	bl	8003b80 <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 80050f6:	201f      	movs	r0, #31
 80050f8:	f7fe fd16 	bl	8003b28 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"        Touch crosshair to calibrate");
 80050fc:	4921      	ldr	r1, [pc, #132]	; (8005184 <TouchPanel_Calibrate+0xa8>)
 80050fe:	2001      	movs	r0, #1
 8005100:	f7fe fe2a 	bl	8003d58 <BSP_LCD_DisplayStringAtLine>
    BSP_LCD_SetFont(&Font24);
 8005104:	4820      	ldr	r0, [pc, #128]	; (8005188 <TouchPanel_Calibrate+0xac>)
 8005106:	f7fe fd1f 	bl	8003b48 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAtLine(5, (uint8_t*)"   Waveshare LCD");
 800510a:	4920      	ldr	r1, [pc, #128]	; (800518c <TouchPanel_Calibrate+0xb0>)
 800510c:	2005      	movs	r0, #5
 800510e:	f7fe fe23 	bl	8003d58 <BSP_LCD_DisplayStringAtLine>
    HAL_Delay(200);
 8005112:	20c8      	movs	r0, #200	; 0xc8
 8005114:	f000 f884 	bl	8005220 <HAL_Delay>
    DrawCross(DisplaySample[i].x,DisplaySample[i].y);
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	4a1d      	ldr	r2, [pc, #116]	; (8005190 <TouchPanel_Calibrate+0xb4>)
 800511c:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	491b      	ldr	r1, [pc, #108]	; (8005190 <TouchPanel_Calibrate+0xb4>)
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	885b      	ldrh	r3, [r3, #2]
 800512a:	4619      	mov	r1, r3
 800512c:	4610      	mov	r0, r2
 800512e:	f7ff fc3d 	bl	80049ac <DrawCross>
    do
    {
      Ptr=Read_Ads7846();
 8005132:	f7ff fc67 	bl	8004a04 <Read_Ads7846>
 8005136:	6038      	str	r0, [r7, #0]
    }
    while( Ptr == (void*)0 );
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0f9      	beq.n	8005132 <TouchPanel_Calibrate+0x56>
    ScreenSample[i].x= Ptr->x; ScreenSample[i].y= Ptr->y;
 800513e:	79fb      	ldrb	r3, [r7, #7]
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	8811      	ldrh	r1, [r2, #0]
 8005144:	4a13      	ldr	r2, [pc, #76]	; (8005194 <TouchPanel_Calibrate+0xb8>)
 8005146:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	8851      	ldrh	r1, [r2, #2]
 8005150:	4a10      	ldr	r2, [pc, #64]	; (8005194 <TouchPanel_Calibrate+0xb8>)
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	460a      	mov	r2, r1
 8005158:	805a      	strh	r2, [r3, #2]
  for(i=0;i<3;i++)
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	3301      	adds	r3, #1
 800515e:	71fb      	strb	r3, [r7, #7]
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d9c0      	bls.n	80050e8 <TouchPanel_Calibrate+0xc>
  }
  setCalibrationMatrix( &DisplaySample[0],&ScreenSample[0],&matrix );
 8005166:	4a0c      	ldr	r2, [pc, #48]	; (8005198 <TouchPanel_Calibrate+0xbc>)
 8005168:	490a      	ldr	r1, [pc, #40]	; (8005194 <TouchPanel_Calibrate+0xb8>)
 800516a:	4809      	ldr	r0, [pc, #36]	; (8005190 <TouchPanel_Calibrate+0xb4>)
 800516c:	f7ff fd86 	bl	8004c7c <setCalibrationMatrix>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8005170:	2000      	movs	r0, #0
 8005172:	f7fe fd05 	bl	8003b80 <BSP_LCD_Clear>
} 
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20000090 	.word	0x20000090
 8005184:	08016afc 	.word	0x08016afc
 8005188:	200000a8 	.word	0x200000a8
 800518c:	08016b24 	.word	0x08016b24
 8005190:	20000084 	.word	0x20000084
 8005194:	20001c7c 	.word	0x20001c7c
 8005198:	20001c40 	.word	0x20001c40

0800519c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80051a0:	4b0e      	ldr	r3, [pc, #56]	; (80051dc <HAL_Init+0x40>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a0d      	ldr	r2, [pc, #52]	; (80051dc <HAL_Init+0x40>)
 80051a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80051ac:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <HAL_Init+0x40>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a0a      	ldr	r2, [pc, #40]	; (80051dc <HAL_Init+0x40>)
 80051b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051b8:	4b08      	ldr	r3, [pc, #32]	; (80051dc <HAL_Init+0x40>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a07      	ldr	r2, [pc, #28]	; (80051dc <HAL_Init+0x40>)
 80051be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051c4:	2003      	movs	r0, #3
 80051c6:	f000 f8fc 	bl	80053c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80051ca:	200f      	movs	r0, #15
 80051cc:	f7fd ffb2 	bl	8003134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051d0:	f7fd ff84 	bl	80030dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40023c00 	.word	0x40023c00

080051e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051e4:	4b06      	ldr	r3, [pc, #24]	; (8005200 <HAL_IncTick+0x20>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	4b06      	ldr	r3, [pc, #24]	; (8005204 <HAL_IncTick+0x24>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4413      	add	r3, r2
 80051f0:	4a04      	ldr	r2, [pc, #16]	; (8005204 <HAL_IncTick+0x24>)
 80051f2:	6013      	str	r3, [r2, #0]
}
 80051f4:	bf00      	nop
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	200000b4 	.word	0x200000b4
 8005204:	20001c8c 	.word	0x20001c8c

08005208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  return uwTick;
 800520c:	4b03      	ldr	r3, [pc, #12]	; (800521c <HAL_GetTick+0x14>)
 800520e:	681b      	ldr	r3, [r3, #0]
}
 8005210:	4618      	mov	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	20001c8c 	.word	0x20001c8c

08005220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005228:	f7ff ffee 	bl	8005208 <HAL_GetTick>
 800522c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005238:	d005      	beq.n	8005246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800523a:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <HAL_Delay+0x44>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005246:	bf00      	nop
 8005248:	f7ff ffde 	bl	8005208 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	429a      	cmp	r2, r3
 8005256:	d8f7      	bhi.n	8005248 <HAL_Delay+0x28>
  {
  }
}
 8005258:	bf00      	nop
 800525a:	bf00      	nop
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	200000b4 	.word	0x200000b4

08005268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005278:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <__NVIC_SetPriorityGrouping+0x44>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005284:	4013      	ands	r3, r2
 8005286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800529a:	4a04      	ldr	r2, [pc, #16]	; (80052ac <__NVIC_SetPriorityGrouping+0x44>)
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	60d3      	str	r3, [r2, #12]
}
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	e000ed00 	.word	0xe000ed00

080052b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052b4:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <__NVIC_GetPriorityGrouping+0x18>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	0a1b      	lsrs	r3, r3, #8
 80052ba:	f003 0307 	and.w	r3, r3, #7
}
 80052be:	4618      	mov	r0, r3
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	e000ed00 	.word	0xe000ed00

080052cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4603      	mov	r3, r0
 80052d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	db0b      	blt.n	80052f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	f003 021f 	and.w	r2, r3, #31
 80052e4:	4907      	ldr	r1, [pc, #28]	; (8005304 <__NVIC_EnableIRQ+0x38>)
 80052e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ea:	095b      	lsrs	r3, r3, #5
 80052ec:	2001      	movs	r0, #1
 80052ee:	fa00 f202 	lsl.w	r2, r0, r2
 80052f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	e000e100 	.word	0xe000e100

08005308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	6039      	str	r1, [r7, #0]
 8005312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005318:	2b00      	cmp	r3, #0
 800531a:	db0a      	blt.n	8005332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	b2da      	uxtb	r2, r3
 8005320:	490c      	ldr	r1, [pc, #48]	; (8005354 <__NVIC_SetPriority+0x4c>)
 8005322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005326:	0112      	lsls	r2, r2, #4
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	440b      	add	r3, r1
 800532c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005330:	e00a      	b.n	8005348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	4908      	ldr	r1, [pc, #32]	; (8005358 <__NVIC_SetPriority+0x50>)
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	3b04      	subs	r3, #4
 8005340:	0112      	lsls	r2, r2, #4
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	440b      	add	r3, r1
 8005346:	761a      	strb	r2, [r3, #24]
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	e000e100 	.word	0xe000e100
 8005358:	e000ed00 	.word	0xe000ed00

0800535c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800535c:	b480      	push	{r7}
 800535e:	b089      	sub	sp, #36	; 0x24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f1c3 0307 	rsb	r3, r3, #7
 8005376:	2b04      	cmp	r3, #4
 8005378:	bf28      	it	cs
 800537a:	2304      	movcs	r3, #4
 800537c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	3304      	adds	r3, #4
 8005382:	2b06      	cmp	r3, #6
 8005384:	d902      	bls.n	800538c <NVIC_EncodePriority+0x30>
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	3b03      	subs	r3, #3
 800538a:	e000      	b.n	800538e <NVIC_EncodePriority+0x32>
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005390:	f04f 32ff 	mov.w	r2, #4294967295
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	43da      	mvns	r2, r3
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	401a      	ands	r2, r3
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053a4:	f04f 31ff 	mov.w	r1, #4294967295
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	fa01 f303 	lsl.w	r3, r1, r3
 80053ae:	43d9      	mvns	r1, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053b4:	4313      	orrs	r3, r2
         );
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3724      	adds	r7, #36	; 0x24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b082      	sub	sp, #8
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff ff4c 	bl	8005268 <__NVIC_SetPriorityGrouping>
}
 80053d0:	bf00      	nop
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053ea:	f7ff ff61 	bl	80052b0 <__NVIC_GetPriorityGrouping>
 80053ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	6978      	ldr	r0, [r7, #20]
 80053f6:	f7ff ffb1 	bl	800535c <NVIC_EncodePriority>
 80053fa:	4602      	mov	r2, r0
 80053fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005400:	4611      	mov	r1, r2
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff ff80 	bl	8005308 <__NVIC_SetPriority>
}
 8005408:	bf00      	nop
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	4603      	mov	r3, r0
 8005418:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800541a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff ff54 	bl	80052cc <__NVIC_EnableIRQ>
}
 8005424:	bf00      	nop
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af02      	add	r7, sp, #8
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005444:	2b01      	cmp	r3, #1
 8005446:	d101      	bne.n	800544c <HAL_DCMI_Start_DMA+0x20>
 8005448:	2302      	movs	r3, #2
 800544a:	e086      	b.n	800555a <HAL_DCMI_Start_DMA+0x12e>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800546a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0202 	bic.w	r2, r2, #2
 800547a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6819      	ldr	r1, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	430a      	orrs	r2, r1
 800548a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005490:	4a34      	ldr	r2, [pc, #208]	; (8005564 <HAL_DCMI_Start_DMA+0x138>)
 8005492:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005498:	4a33      	ldr	r2, [pc, #204]	; (8005568 <HAL_DCMI_Start_DMA+0x13c>)
 800549a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	2200      	movs	r2, #0
 80054a2:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b6:	d20a      	bcs.n	80054ce <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3328      	adds	r3, #40	; 0x28
 80054c2:	4619      	mov	r1, r3
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	f000 faa0 	bl	8005a0c <HAL_DMA_Start_IT>
 80054cc:	e038      	b.n	8005540 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d2:	4a24      	ldr	r2, [pc, #144]	; (8005564 <HAL_DCMI_Start_DMA+0x138>)
 80054d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 80054e8:	e009      	b.n	80054fe <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	085a      	lsrs	r2, r3, #1
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	005a      	lsls	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005506:	d2f0      	bcs.n	80054ea <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	1e9a      	subs	r2, r3, #2
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	4413      	add	r3, r2
 8005524:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3328      	adds	r3, #40	; 0x28
 8005530:	4619      	mov	r1, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	f000 fdaa 	bl	8006094 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	0800567d 	.word	0x0800567d
 8005568:	080057a7 	.word	0x080057a7

0800556c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	d016      	beq.n	80055b4 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2204      	movs	r2, #4
 800558c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005592:	f043 0202 	orr.w	r2, r3, #2
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2204      	movs	r2, #4
 800559e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	4a2f      	ldr	r2, [pc, #188]	; (8005664 <HAL_DCMI_IRQHandler+0xf8>)
 80055a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fa84 	bl	8005abc <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d016      	beq.n	80055ec <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2202      	movs	r2, #2
 80055c4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ca:	f043 0201 	orr.w	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2204      	movs	r2, #4
 80055d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	4a21      	ldr	r2, [pc, #132]	; (8005664 <HAL_DCMI_IRQHandler+0xf8>)
 80055e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fa68 	bl	8005abc <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d006      	beq.n	8005604 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2210      	movs	r2, #16
 80055fc:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fb fc94 	bl	8000f2c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d006      	beq.n	800561c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2208      	movs	r2, #8
 8005614:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fb fc78 	bl	8000f0c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d019      	beq.n	800565a <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b02      	cmp	r3, #2
 8005632:	d107      	bne.n	8005644 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 021e 	bic.w	r2, r2, #30
 8005642:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0201 	bic.w	r2, r2, #1
 8005652:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7fb fc49 	bl	8000eec <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 800565a:	bf00      	nop
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	080057a7 	.word	0x080057a7

08005668 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568c:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005692:	2b00      	cmp	r3, #0
 8005694:	d043      	beq.n	800571e <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056a2:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d118      	bne.n	80056e2 <DCMI_DMAXferCplt+0x66>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d015      	beq.n	80056e2 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	00da      	lsls	r2, r3, #3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4413      	add	r3, r2
 80056ce:	2200      	movs	r2, #0
 80056d0:	4619      	mov	r1, r3
 80056d2:	f001 fe27 	bl	8007324 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	1e5a      	subs	r2, r3, #1
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	629a      	str	r2, [r3, #40]	; 0x28
 80056e0:	e044      	b.n	800576c <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d13c      	bne.n	800576c <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	00da      	lsls	r2, r3, #3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4413      	add	r3, r2
 800570a:	2201      	movs	r2, #1
 800570c:	4619      	mov	r1, r3
 800570e:	f001 fe09 	bl	8007324 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005716:	1e5a      	subs	r2, r3, #1
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	629a      	str	r2, [r3, #40]	; 0x28
 800571c:	e026      	b.n	800576c <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d006      	beq.n	800573c <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005738:	60da      	str	r2, [r3, #12]
 800573a:	e017      	b.n	800576c <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10f      	bne.n	800576c <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005750:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	0099      	lsls	r1, r3, #2
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	440a      	add	r2, r1
 8005762:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	429a      	cmp	r2, r3
 8005776:	d112      	bne.n	800579e <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0201 	orr.w	r2, r2, #1
 8005786:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b02      	cmp	r3, #2
 8005794:	d103      	bne.n	800579e <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 800579e:	bf00      	nop
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b2:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d003      	beq.n	80057c6 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f7ff ff4e 	bl	8005668 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 80057cc:	bf00      	nop
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e05f      	b.n	80058a6 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d109      	bne.n	8005806 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7fc fd3e 	bl	800227c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7fc fd3b 	bl	800227c <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2202      	movs	r2, #2
 800580a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800581c:	f023 0308 	bic.w	r3, r3, #8
 8005820:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6819      	ldr	r1, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005836:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8005842:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800584e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	2b10      	cmp	r3, #16
 800585e:	d112      	bne.n	8005886 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	7f1b      	ldrb	r3, [r3, #28]
 8005864:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	7f5b      	ldrb	r3, [r3, #29]
 800586a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800586c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	7f9b      	ldrb	r3, [r3, #30]
 8005872:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8005874:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	7fdb      	ldrb	r3, [r3, #31]
 800587c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8005882:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8005884:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 021e 	orr.w	r2, r2, #30
 8005894:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80058bc:	f7ff fca4 	bl	8005208 <HAL_GetTick>
 80058c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e099      	b.n	8005a00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0201 	bic.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058ec:	e00f      	b.n	800590e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058ee:	f7ff fc8b 	bl	8005208 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b05      	cmp	r3, #5
 80058fa:	d908      	bls.n	800590e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2203      	movs	r2, #3
 8005906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e078      	b.n	8005a00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1e8      	bne.n	80058ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4b38      	ldr	r3, [pc, #224]	; (8005a08 <HAL_DMA_Init+0x158>)
 8005928:	4013      	ands	r3, r2
 800592a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800593a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005946:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005952:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	2b04      	cmp	r3, #4
 8005966:	d107      	bne.n	8005978 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005970:	4313      	orrs	r3, r2
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f023 0307 	bic.w	r3, r3, #7
 800598e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d117      	bne.n	80059d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00e      	beq.n	80059d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 faf1 	bl	8005f9c <DMA_CheckFifoParam>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2240      	movs	r2, #64	; 0x40
 80059c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80059ce:	2301      	movs	r3, #1
 80059d0:	e016      	b.n	8005a00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 faa8 	bl	8005f30 <DMA_CalcBaseAndBitshift>
 80059e0:	4603      	mov	r3, r0
 80059e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e8:	223f      	movs	r2, #63	; 0x3f
 80059ea:	409a      	lsls	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	f010803f 	.word	0xf010803f

08005a0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_DMA_Start_IT+0x26>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e040      	b.n	8005ab4 <HAL_DMA_Start_IT+0xa8>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d12f      	bne.n	8005aa6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	68b9      	ldr	r1, [r7, #8]
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 fa3a 	bl	8005ed4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a64:	223f      	movs	r2, #63	; 0x3f
 8005a66:	409a      	lsls	r2, r3
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0216 	orr.w	r2, r2, #22
 8005a7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d007      	beq.n	8005a94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0208 	orr.w	r2, r2, #8
 8005a92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	e005      	b.n	8005ab2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005aae:	2302      	movs	r3, #2
 8005ab0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d004      	beq.n	8005ada <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2280      	movs	r2, #128	; 0x80
 8005ad4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e00c      	b.n	8005af4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2205      	movs	r2, #5
 8005ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0201 	bic.w	r2, r2, #1
 8005af0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b0c:	4b8e      	ldr	r3, [pc, #568]	; (8005d48 <HAL_DMA_IRQHandler+0x248>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a8e      	ldr	r2, [pc, #568]	; (8005d4c <HAL_DMA_IRQHandler+0x24c>)
 8005b12:	fba2 2303 	umull	r2, r3, r2, r3
 8005b16:	0a9b      	lsrs	r3, r3, #10
 8005b18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2a:	2208      	movs	r2, #8
 8005b2c:	409a      	lsls	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4013      	ands	r3, r2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d01a      	beq.n	8005b6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d013      	beq.n	8005b6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0204 	bic.w	r2, r2, #4
 8005b52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b58:	2208      	movs	r2, #8
 8005b5a:	409a      	lsls	r2, r3
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b64:	f043 0201 	orr.w	r2, r3, #1
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b70:	2201      	movs	r2, #1
 8005b72:	409a      	lsls	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4013      	ands	r3, r2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d012      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00b      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b8e:	2201      	movs	r2, #1
 8005b90:	409a      	lsls	r2, r3
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9a:	f043 0202 	orr.w	r2, r3, #2
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba6:	2204      	movs	r2, #4
 8005ba8:	409a      	lsls	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4013      	ands	r3, r2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d012      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc4:	2204      	movs	r2, #4
 8005bc6:	409a      	lsls	r2, r3
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd0:	f043 0204 	orr.w	r2, r3, #4
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bdc:	2210      	movs	r2, #16
 8005bde:	409a      	lsls	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d043      	beq.n	8005c70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d03c      	beq.n	8005c70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfa:	2210      	movs	r2, #16
 8005bfc:	409a      	lsls	r2, r3
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d018      	beq.n	8005c42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d108      	bne.n	8005c30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d024      	beq.n	8005c70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	4798      	blx	r3
 8005c2e:	e01f      	b.n	8005c70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01b      	beq.n	8005c70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	4798      	blx	r3
 8005c40:	e016      	b.n	8005c70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d107      	bne.n	8005c60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0208 	bic.w	r2, r2, #8
 8005c5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c74:	2220      	movs	r2, #32
 8005c76:	409a      	lsls	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 808f 	beq.w	8005da0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0310 	and.w	r3, r3, #16
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8087 	beq.w	8005da0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c96:	2220      	movs	r2, #32
 8005c98:	409a      	lsls	r2, r3
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b05      	cmp	r3, #5
 8005ca8:	d136      	bne.n	8005d18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0216 	bic.w	r2, r2, #22
 8005cb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	695a      	ldr	r2, [r3, #20]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d103      	bne.n	8005cda <HAL_DMA_IRQHandler+0x1da>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0208 	bic.w	r2, r2, #8
 8005ce8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cee:	223f      	movs	r2, #63	; 0x3f
 8005cf0:	409a      	lsls	r2, r3
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d07e      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	4798      	blx	r3
        }
        return;
 8005d16:	e079      	b.n	8005e0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d01d      	beq.n	8005d62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10d      	bne.n	8005d50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d031      	beq.n	8005da0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	4798      	blx	r3
 8005d44:	e02c      	b.n	8005da0 <HAL_DMA_IRQHandler+0x2a0>
 8005d46:	bf00      	nop
 8005d48:	20000044 	.word	0x20000044
 8005d4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d023      	beq.n	8005da0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	4798      	blx	r3
 8005d60:	e01e      	b.n	8005da0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10f      	bne.n	8005d90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0210 	bic.w	r2, r2, #16
 8005d7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d032      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d022      	beq.n	8005dfa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2205      	movs	r2, #5
 8005db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0201 	bic.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	60bb      	str	r3, [r7, #8]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d307      	bcc.n	8005de8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1f2      	bne.n	8005dcc <HAL_DMA_IRQHandler+0x2cc>
 8005de6:	e000      	b.n	8005dea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005de8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d005      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	4798      	blx	r3
 8005e0a:	e000      	b.n	8005e0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005e0c:	bf00      	nop
    }
  }
}
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	607a      	str	r2, [r7, #4]
 8005e20:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_DMA_RegisterCallback+0x20>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e03d      	b.n	8005eb0 <HAL_DMA_RegisterCallback+0x9c>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d12c      	bne.n	8005ea2 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8005e48:	7afb      	ldrb	r3, [r7, #11]
 8005e4a:	2b05      	cmp	r3, #5
 8005e4c:	d826      	bhi.n	8005e9c <HAL_DMA_RegisterCallback+0x88>
 8005e4e:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <HAL_DMA_RegisterCallback+0x40>)
 8005e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e54:	08005e6d 	.word	0x08005e6d
 8005e58:	08005e75 	.word	0x08005e75
 8005e5c:	08005e7d 	.word	0x08005e7d
 8005e60:	08005e85 	.word	0x08005e85
 8005e64:	08005e8d 	.word	0x08005e8d
 8005e68:	08005e95 	.word	0x08005e95
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8005e72:	e018      	b.n	8005ea6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005e7a:	e014      	b.n	8005ea6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8005e82:	e010      	b.n	8005ea6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8005e8a:	e00c      	b.n	8005ea6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8005e92:	e008      	b.n	8005ea6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005e9a:	e004      	b.n	8005ea6 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005ea0:	e001      	b.n	8005ea6 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	371c      	adds	r7, #28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ef0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2b40      	cmp	r3, #64	; 0x40
 8005f00:	d108      	bne.n	8005f14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005f12:	e007      	b.n	8005f24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	60da      	str	r2, [r3, #12]
}
 8005f24:	bf00      	nop
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	3b10      	subs	r3, #16
 8005f40:	4a14      	ldr	r2, [pc, #80]	; (8005f94 <DMA_CalcBaseAndBitshift+0x64>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	091b      	lsrs	r3, r3, #4
 8005f48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f4a:	4a13      	ldr	r2, [pc, #76]	; (8005f98 <DMA_CalcBaseAndBitshift+0x68>)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	461a      	mov	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d909      	bls.n	8005f72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f66:	f023 0303 	bic.w	r3, r3, #3
 8005f6a:	1d1a      	adds	r2, r3, #4
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	659a      	str	r2, [r3, #88]	; 0x58
 8005f70:	e007      	b.n	8005f82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f7a:	f023 0303 	bic.w	r3, r3, #3
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	aaaaaaab 	.word	0xaaaaaaab
 8005f98:	0801a5a8 	.word	0x0801a5a8

08005f9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d11f      	bne.n	8005ff6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d856      	bhi.n	800606a <DMA_CheckFifoParam+0xce>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <DMA_CheckFifoParam+0x28>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08005fd5 	.word	0x08005fd5
 8005fc8:	08005fe7 	.word	0x08005fe7
 8005fcc:	08005fd5 	.word	0x08005fd5
 8005fd0:	0800606b 	.word	0x0800606b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d046      	beq.n	800606e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fe4:	e043      	b.n	800606e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fee:	d140      	bne.n	8006072 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ff4:	e03d      	b.n	8006072 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ffe:	d121      	bne.n	8006044 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b03      	cmp	r3, #3
 8006004:	d837      	bhi.n	8006076 <DMA_CheckFifoParam+0xda>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <DMA_CheckFifoParam+0x70>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	0800601d 	.word	0x0800601d
 8006010:	08006023 	.word	0x08006023
 8006014:	0800601d 	.word	0x0800601d
 8006018:	08006035 	.word	0x08006035
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	73fb      	strb	r3, [r7, #15]
      break;
 8006020:	e030      	b.n	8006084 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d025      	beq.n	800607a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006032:	e022      	b.n	800607a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800603c:	d11f      	bne.n	800607e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006042:	e01c      	b.n	800607e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d903      	bls.n	8006052 <DMA_CheckFifoParam+0xb6>
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b03      	cmp	r3, #3
 800604e:	d003      	beq.n	8006058 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006050:	e018      	b.n	8006084 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	73fb      	strb	r3, [r7, #15]
      break;
 8006056:	e015      	b.n	8006084 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00e      	beq.n	8006082 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	73fb      	strb	r3, [r7, #15]
      break;
 8006068:	e00b      	b.n	8006082 <DMA_CheckFifoParam+0xe6>
      break;
 800606a:	bf00      	nop
 800606c:	e00a      	b.n	8006084 <DMA_CheckFifoParam+0xe8>
      break;
 800606e:	bf00      	nop
 8006070:	e008      	b.n	8006084 <DMA_CheckFifoParam+0xe8>
      break;
 8006072:	bf00      	nop
 8006074:	e006      	b.n	8006084 <DMA_CheckFifoParam+0xe8>
      break;
 8006076:	bf00      	nop
 8006078:	e004      	b.n	8006084 <DMA_CheckFifoParam+0xe8>
      break;
 800607a:	bf00      	nop
 800607c:	e002      	b.n	8006084 <DMA_CheckFifoParam+0xe8>
      break;   
 800607e:	bf00      	nop
 8006080:	e000      	b.n	8006084 <DMA_CheckFifoParam+0xe8>
      break;
 8006082:	bf00      	nop
    }
  } 
  
  return status; 
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop

08006094 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	2b80      	cmp	r3, #128	; 0x80
 80060ac:	d106      	bne.n	80060bc <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f001 b911 	b.w	80072de <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d007      	beq.n	80060d4 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d105      	bne.n	80060e0 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2240      	movs	r2, #64	; 0x40
 80060d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	f001 b8ff 	b.w	80072de <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d102      	bne.n	80060f0 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80060ea:	2302      	movs	r3, #2
 80060ec:	f001 b8f7 	b.w	80072de <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b01      	cmp	r3, #1
 8006102:	f041 80e5 	bne.w	80072d0 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2202      	movs	r2, #2
 800610a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006122:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	68b9      	ldr	r1, [r7, #8]
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f001 f910 	bl	8007358 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	4b8d      	ldr	r3, [pc, #564]	; (8006374 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8006140:	429a      	cmp	r2, r3
 8006142:	d960      	bls.n	8006206 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a8b      	ldr	r2, [pc, #556]	; (8006378 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d057      	beq.n	80061fe <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a8a      	ldr	r2, [pc, #552]	; (800637c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d050      	beq.n	80061fa <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a88      	ldr	r2, [pc, #544]	; (8006380 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d049      	beq.n	80061f6 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a87      	ldr	r2, [pc, #540]	; (8006384 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d042      	beq.n	80061f2 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a85      	ldr	r2, [pc, #532]	; (8006388 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d03a      	beq.n	80061ec <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a84      	ldr	r2, [pc, #528]	; (800638c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d032      	beq.n	80061e6 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a82      	ldr	r2, [pc, #520]	; (8006390 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d02a      	beq.n	80061e0 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a81      	ldr	r2, [pc, #516]	; (8006394 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d022      	beq.n	80061da <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a7f      	ldr	r2, [pc, #508]	; (8006398 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d01a      	beq.n	80061d4 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a7e      	ldr	r2, [pc, #504]	; (800639c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d012      	beq.n	80061ce <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a7c      	ldr	r2, [pc, #496]	; (80063a0 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00a      	beq.n	80061c8 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a7b      	ldr	r2, [pc, #492]	; (80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d102      	bne.n	80061c2 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80061bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80061c0:	e01e      	b.n	8006200 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80061c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061c6:	e01b      	b.n	8006200 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80061c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80061cc:	e018      	b.n	8006200 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80061ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80061d2:	e015      	b.n	8006200 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80061d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80061d8:	e012      	b.n	8006200 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80061da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061de:	e00f      	b.n	8006200 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80061e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061e4:	e00c      	b.n	8006200 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80061e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061ea:	e009      	b.n	8006200 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80061ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061f0:	e006      	b.n	8006200 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80061f2:	2320      	movs	r3, #32
 80061f4:	e004      	b.n	8006200 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80061f6:	2320      	movs	r3, #32
 80061f8:	e002      	b.n	8006200 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80061fa:	2320      	movs	r3, #32
 80061fc:	e000      	b.n	8006200 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80061fe:	2320      	movs	r3, #32
 8006200:	4a69      	ldr	r2, [pc, #420]	; (80063a8 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8006202:	60d3      	str	r3, [r2, #12]
 8006204:	e14f      	b.n	80064a6 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	4b67      	ldr	r3, [pc, #412]	; (80063ac <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800620e:	429a      	cmp	r2, r3
 8006210:	d960      	bls.n	80062d4 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a58      	ldr	r2, [pc, #352]	; (8006378 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d057      	beq.n	80062cc <HAL_DMAEx_MultiBufferStart_IT+0x238>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a56      	ldr	r2, [pc, #344]	; (800637c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d050      	beq.n	80062c8 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a55      	ldr	r2, [pc, #340]	; (8006380 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d049      	beq.n	80062c4 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a53      	ldr	r2, [pc, #332]	; (8006384 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d042      	beq.n	80062c0 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a52      	ldr	r2, [pc, #328]	; (8006388 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d03a      	beq.n	80062ba <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a50      	ldr	r2, [pc, #320]	; (800638c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d032      	beq.n	80062b4 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a4f      	ldr	r2, [pc, #316]	; (8006390 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d02a      	beq.n	80062ae <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a4d      	ldr	r2, [pc, #308]	; (8006394 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d022      	beq.n	80062a8 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a4c      	ldr	r2, [pc, #304]	; (8006398 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d01a      	beq.n	80062a2 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a4a      	ldr	r2, [pc, #296]	; (800639c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d012      	beq.n	800629c <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a49      	ldr	r2, [pc, #292]	; (80063a0 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00a      	beq.n	8006296 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a47      	ldr	r2, [pc, #284]	; (80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d102      	bne.n	8006290 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800628a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800628e:	e01e      	b.n	80062ce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8006290:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006294:	e01b      	b.n	80062ce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8006296:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800629a:	e018      	b.n	80062ce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800629c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80062a0:	e015      	b.n	80062ce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80062a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80062a6:	e012      	b.n	80062ce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80062a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062ac:	e00f      	b.n	80062ce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80062ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062b2:	e00c      	b.n	80062ce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80062b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062b8:	e009      	b.n	80062ce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80062ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062be:	e006      	b.n	80062ce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80062c0:	2320      	movs	r3, #32
 80062c2:	e004      	b.n	80062ce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80062c4:	2320      	movs	r3, #32
 80062c6:	e002      	b.n	80062ce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80062c8:	2320      	movs	r3, #32
 80062ca:	e000      	b.n	80062ce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80062cc:	2320      	movs	r3, #32
 80062ce:	4a36      	ldr	r2, [pc, #216]	; (80063a8 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80062d0:	6093      	str	r3, [r2, #8]
 80062d2:	e0e8      	b.n	80064a6 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	461a      	mov	r2, r3
 80062da:	4b35      	ldr	r3, [pc, #212]	; (80063b0 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80062dc:	429a      	cmp	r2, r3
 80062de:	f240 8082 	bls.w	80063e6 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a24      	ldr	r2, [pc, #144]	; (8006378 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d078      	beq.n	80063de <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a22      	ldr	r2, [pc, #136]	; (800637c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d071      	beq.n	80063da <HAL_DMAEx_MultiBufferStart_IT+0x346>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a21      	ldr	r2, [pc, #132]	; (8006380 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d06a      	beq.n	80063d6 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a1f      	ldr	r2, [pc, #124]	; (8006384 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d063      	beq.n	80063d2 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a1e      	ldr	r2, [pc, #120]	; (8006388 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d05b      	beq.n	80063cc <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1c      	ldr	r2, [pc, #112]	; (800638c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d053      	beq.n	80063c6 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1b      	ldr	r2, [pc, #108]	; (8006390 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d04b      	beq.n	80063c0 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a19      	ldr	r2, [pc, #100]	; (8006394 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d043      	beq.n	80063ba <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a18      	ldr	r2, [pc, #96]	; (8006398 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d03b      	beq.n	80063b4 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a16      	ldr	r2, [pc, #88]	; (800639c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d012      	beq.n	800636c <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a15      	ldr	r2, [pc, #84]	; (80063a0 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d00a      	beq.n	8006366 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a13      	ldr	r2, [pc, #76]	; (80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d102      	bne.n	8006360 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800635a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800635e:	e03f      	b.n	80063e0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8006360:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006364:	e03c      	b.n	80063e0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8006366:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800636a:	e039      	b.n	80063e0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800636c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006370:	e036      	b.n	80063e0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8006372:	bf00      	nop
 8006374:	40026458 	.word	0x40026458
 8006378:	40026010 	.word	0x40026010
 800637c:	40026410 	.word	0x40026410
 8006380:	40026070 	.word	0x40026070
 8006384:	40026470 	.word	0x40026470
 8006388:	40026028 	.word	0x40026028
 800638c:	40026428 	.word	0x40026428
 8006390:	40026088 	.word	0x40026088
 8006394:	40026488 	.word	0x40026488
 8006398:	40026040 	.word	0x40026040
 800639c:	40026440 	.word	0x40026440
 80063a0:	400260a0 	.word	0x400260a0
 80063a4:	400264a0 	.word	0x400264a0
 80063a8:	40026400 	.word	0x40026400
 80063ac:	400260b8 	.word	0x400260b8
 80063b0:	40026058 	.word	0x40026058
 80063b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80063b8:	e012      	b.n	80063e0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80063ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063be:	e00f      	b.n	80063e0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80063c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063c4:	e00c      	b.n	80063e0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80063c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063ca:	e009      	b.n	80063e0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80063cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063d0:	e006      	b.n	80063e0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80063d2:	2320      	movs	r3, #32
 80063d4:	e004      	b.n	80063e0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80063d6:	2320      	movs	r3, #32
 80063d8:	e002      	b.n	80063e0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80063da:	2320      	movs	r3, #32
 80063dc:	e000      	b.n	80063e0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80063de:	2320      	movs	r3, #32
 80063e0:	4a8c      	ldr	r2, [pc, #560]	; (8006614 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80063e2:	60d3      	str	r3, [r2, #12]
 80063e4:	e05f      	b.n	80064a6 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a8b      	ldr	r2, [pc, #556]	; (8006618 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d057      	beq.n	80064a0 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a89      	ldr	r2, [pc, #548]	; (800661c <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d050      	beq.n	800649c <HAL_DMAEx_MultiBufferStart_IT+0x408>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a88      	ldr	r2, [pc, #544]	; (8006620 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d049      	beq.n	8006498 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a86      	ldr	r2, [pc, #536]	; (8006624 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d042      	beq.n	8006494 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a85      	ldr	r2, [pc, #532]	; (8006628 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d03a      	beq.n	800648e <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a83      	ldr	r2, [pc, #524]	; (800662c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d032      	beq.n	8006488 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a82      	ldr	r2, [pc, #520]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d02a      	beq.n	8006482 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a80      	ldr	r2, [pc, #512]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d022      	beq.n	800647c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a7f      	ldr	r2, [pc, #508]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d01a      	beq.n	8006476 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a7d      	ldr	r2, [pc, #500]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d012      	beq.n	8006470 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a7c      	ldr	r2, [pc, #496]	; (8006640 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d00a      	beq.n	800646a <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a7a      	ldr	r2, [pc, #488]	; (8006644 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d102      	bne.n	8006464 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 800645e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006462:	e01e      	b.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8006464:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006468:	e01b      	b.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800646a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800646e:	e018      	b.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8006470:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006474:	e015      	b.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8006476:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800647a:	e012      	b.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800647c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006480:	e00f      	b.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8006482:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006486:	e00c      	b.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8006488:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800648c:	e009      	b.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800648e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006492:	e006      	b.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8006494:	2320      	movs	r3, #32
 8006496:	e004      	b.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8006498:	2320      	movs	r3, #32
 800649a:	e002      	b.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800649c:	2320      	movs	r3, #32
 800649e:	e000      	b.n	80064a2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80064a0:	2320      	movs	r3, #32
 80064a2:	4a5c      	ldr	r2, [pc, #368]	; (8006614 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80064a4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	4b66      	ldr	r3, [pc, #408]	; (8006648 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d960      	bls.n	8006574 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a58      	ldr	r2, [pc, #352]	; (8006618 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d057      	beq.n	800656c <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a56      	ldr	r2, [pc, #344]	; (800661c <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d050      	beq.n	8006568 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a55      	ldr	r2, [pc, #340]	; (8006620 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d049      	beq.n	8006564 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a53      	ldr	r2, [pc, #332]	; (8006624 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d042      	beq.n	8006560 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a52      	ldr	r2, [pc, #328]	; (8006628 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d03a      	beq.n	800655a <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a50      	ldr	r2, [pc, #320]	; (800662c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d032      	beq.n	8006554 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a4f      	ldr	r2, [pc, #316]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d02a      	beq.n	800654e <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a4d      	ldr	r2, [pc, #308]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d022      	beq.n	8006548 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a4c      	ldr	r2, [pc, #304]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d01a      	beq.n	8006542 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a4a      	ldr	r2, [pc, #296]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d012      	beq.n	800653c <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a49      	ldr	r2, [pc, #292]	; (8006640 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00a      	beq.n	8006536 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a47      	ldr	r2, [pc, #284]	; (8006644 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d102      	bne.n	8006530 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 800652a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800652e:	e01e      	b.n	800656e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8006530:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006534:	e01b      	b.n	800656e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8006536:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800653a:	e018      	b.n	800656e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800653c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006540:	e015      	b.n	800656e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8006542:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006546:	e012      	b.n	800656e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8006548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800654c:	e00f      	b.n	800656e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800654e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006552:	e00c      	b.n	800656e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8006554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006558:	e009      	b.n	800656e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800655a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800655e:	e006      	b.n	800656e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8006560:	2310      	movs	r3, #16
 8006562:	e004      	b.n	800656e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8006564:	2310      	movs	r3, #16
 8006566:	e002      	b.n	800656e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8006568:	2310      	movs	r3, #16
 800656a:	e000      	b.n	800656e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800656c:	2310      	movs	r3, #16
 800656e:	4a37      	ldr	r2, [pc, #220]	; (800664c <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8006570:	60d3      	str	r3, [r2, #12]
 8006572:	e14f      	b.n	8006814 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	4b35      	ldr	r3, [pc, #212]	; (8006650 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800657c:	429a      	cmp	r2, r3
 800657e:	f240 8082 	bls.w	8006686 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a24      	ldr	r2, [pc, #144]	; (8006618 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d078      	beq.n	800667e <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a22      	ldr	r2, [pc, #136]	; (800661c <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d071      	beq.n	800667a <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a21      	ldr	r2, [pc, #132]	; (8006620 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d06a      	beq.n	8006676 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a1f      	ldr	r2, [pc, #124]	; (8006624 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d063      	beq.n	8006672 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1e      	ldr	r2, [pc, #120]	; (8006628 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d05b      	beq.n	800666c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1c      	ldr	r2, [pc, #112]	; (800662c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d053      	beq.n	8006666 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1b      	ldr	r2, [pc, #108]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d04b      	beq.n	8006660 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a19      	ldr	r2, [pc, #100]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d043      	beq.n	800665a <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a18      	ldr	r2, [pc, #96]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d03b      	beq.n	8006654 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a16      	ldr	r2, [pc, #88]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d012      	beq.n	800660c <HAL_DMAEx_MultiBufferStart_IT+0x578>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a15      	ldr	r2, [pc, #84]	; (8006640 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00a      	beq.n	8006606 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a13      	ldr	r2, [pc, #76]	; (8006644 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d102      	bne.n	8006600 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 80065fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80065fe:	e03f      	b.n	8006680 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8006600:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006604:	e03c      	b.n	8006680 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8006606:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800660a:	e039      	b.n	8006680 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800660c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006610:	e036      	b.n	8006680 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8006612:	bf00      	nop
 8006614:	40026000 	.word	0x40026000
 8006618:	40026010 	.word	0x40026010
 800661c:	40026410 	.word	0x40026410
 8006620:	40026070 	.word	0x40026070
 8006624:	40026470 	.word	0x40026470
 8006628:	40026028 	.word	0x40026028
 800662c:	40026428 	.word	0x40026428
 8006630:	40026088 	.word	0x40026088
 8006634:	40026488 	.word	0x40026488
 8006638:	40026040 	.word	0x40026040
 800663c:	40026440 	.word	0x40026440
 8006640:	400260a0 	.word	0x400260a0
 8006644:	400264a0 	.word	0x400264a0
 8006648:	40026458 	.word	0x40026458
 800664c:	40026400 	.word	0x40026400
 8006650:	400260b8 	.word	0x400260b8
 8006654:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006658:	e012      	b.n	8006680 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800665a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800665e:	e00f      	b.n	8006680 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8006660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006664:	e00c      	b.n	8006680 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8006666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800666a:	e009      	b.n	8006680 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800666c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006670:	e006      	b.n	8006680 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8006672:	2310      	movs	r3, #16
 8006674:	e004      	b.n	8006680 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8006676:	2310      	movs	r3, #16
 8006678:	e002      	b.n	8006680 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800667a:	2310      	movs	r3, #16
 800667c:	e000      	b.n	8006680 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800667e:	2310      	movs	r3, #16
 8006680:	4a8c      	ldr	r2, [pc, #560]	; (80068b4 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8006682:	6093      	str	r3, [r2, #8]
 8006684:	e0c6      	b.n	8006814 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	4b8a      	ldr	r3, [pc, #552]	; (80068b8 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 800668e:	429a      	cmp	r2, r3
 8006690:	d960      	bls.n	8006754 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a89      	ldr	r2, [pc, #548]	; (80068bc <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d057      	beq.n	800674c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a87      	ldr	r2, [pc, #540]	; (80068c0 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d050      	beq.n	8006748 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a86      	ldr	r2, [pc, #536]	; (80068c4 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d049      	beq.n	8006744 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a84      	ldr	r2, [pc, #528]	; (80068c8 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d042      	beq.n	8006740 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a83      	ldr	r2, [pc, #524]	; (80068cc <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d03a      	beq.n	800673a <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a81      	ldr	r2, [pc, #516]	; (80068d0 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d032      	beq.n	8006734 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a80      	ldr	r2, [pc, #512]	; (80068d4 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d02a      	beq.n	800672e <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a7e      	ldr	r2, [pc, #504]	; (80068d8 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d022      	beq.n	8006728 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a7d      	ldr	r2, [pc, #500]	; (80068dc <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d01a      	beq.n	8006722 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a7b      	ldr	r2, [pc, #492]	; (80068e0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d012      	beq.n	800671c <HAL_DMAEx_MultiBufferStart_IT+0x688>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a7a      	ldr	r2, [pc, #488]	; (80068e4 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d00a      	beq.n	8006716 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a78      	ldr	r2, [pc, #480]	; (80068e8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d102      	bne.n	8006710 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 800670a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800670e:	e01e      	b.n	800674e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8006710:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006714:	e01b      	b.n	800674e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8006716:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800671a:	e018      	b.n	800674e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800671c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006720:	e015      	b.n	800674e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8006722:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006726:	e012      	b.n	800674e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8006728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800672c:	e00f      	b.n	800674e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800672e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006732:	e00c      	b.n	800674e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8006734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006738:	e009      	b.n	800674e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800673a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800673e:	e006      	b.n	800674e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8006740:	2310      	movs	r3, #16
 8006742:	e004      	b.n	800674e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8006744:	2310      	movs	r3, #16
 8006746:	e002      	b.n	800674e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8006748:	2310      	movs	r3, #16
 800674a:	e000      	b.n	800674e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800674c:	2310      	movs	r3, #16
 800674e:	4a67      	ldr	r2, [pc, #412]	; (80068ec <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8006750:	60d3      	str	r3, [r2, #12]
 8006752:	e05f      	b.n	8006814 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a58      	ldr	r2, [pc, #352]	; (80068bc <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d057      	beq.n	800680e <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a57      	ldr	r2, [pc, #348]	; (80068c0 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d050      	beq.n	800680a <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a55      	ldr	r2, [pc, #340]	; (80068c4 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d049      	beq.n	8006806 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a54      	ldr	r2, [pc, #336]	; (80068c8 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d042      	beq.n	8006802 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a52      	ldr	r2, [pc, #328]	; (80068cc <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d03a      	beq.n	80067fc <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a51      	ldr	r2, [pc, #324]	; (80068d0 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d032      	beq.n	80067f6 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a4f      	ldr	r2, [pc, #316]	; (80068d4 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d02a      	beq.n	80067f0 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a4e      	ldr	r2, [pc, #312]	; (80068d8 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d022      	beq.n	80067ea <HAL_DMAEx_MultiBufferStart_IT+0x756>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a4c      	ldr	r2, [pc, #304]	; (80068dc <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d01a      	beq.n	80067e4 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a4b      	ldr	r2, [pc, #300]	; (80068e0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d012      	beq.n	80067de <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a49      	ldr	r2, [pc, #292]	; (80068e4 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00a      	beq.n	80067d8 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a48      	ldr	r2, [pc, #288]	; (80068e8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d102      	bne.n	80067d2 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 80067cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067d0:	e01e      	b.n	8006810 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80067d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80067d6:	e01b      	b.n	8006810 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80067d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067dc:	e018      	b.n	8006810 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80067de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067e2:	e015      	b.n	8006810 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80067e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067e8:	e012      	b.n	8006810 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80067ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067ee:	e00f      	b.n	8006810 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80067f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067f4:	e00c      	b.n	8006810 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80067f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067fa:	e009      	b.n	8006810 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80067fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006800:	e006      	b.n	8006810 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8006802:	2310      	movs	r3, #16
 8006804:	e004      	b.n	8006810 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8006806:	2310      	movs	r3, #16
 8006808:	e002      	b.n	8006810 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800680a:	2310      	movs	r3, #16
 800680c:	e000      	b.n	8006810 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800680e:	2310      	movs	r3, #16
 8006810:	4a36      	ldr	r2, [pc, #216]	; (80068ec <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8006812:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	461a      	mov	r2, r3
 800681a:	4b35      	ldr	r3, [pc, #212]	; (80068f0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800681c:	429a      	cmp	r2, r3
 800681e:	f240 8082 	bls.w	8006926 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a25      	ldr	r2, [pc, #148]	; (80068bc <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d078      	beq.n	800691e <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a23      	ldr	r2, [pc, #140]	; (80068c0 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d071      	beq.n	800691a <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a22      	ldr	r2, [pc, #136]	; (80068c4 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d06a      	beq.n	8006916 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a20      	ldr	r2, [pc, #128]	; (80068c8 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d063      	beq.n	8006912 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a1f      	ldr	r2, [pc, #124]	; (80068cc <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d05b      	beq.n	800690c <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a1d      	ldr	r2, [pc, #116]	; (80068d0 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d053      	beq.n	8006906 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a1c      	ldr	r2, [pc, #112]	; (80068d4 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d04b      	beq.n	8006900 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a1a      	ldr	r2, [pc, #104]	; (80068d8 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d043      	beq.n	80068fa <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a19      	ldr	r2, [pc, #100]	; (80068dc <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d03b      	beq.n	80068f4 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a17      	ldr	r2, [pc, #92]	; (80068e0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d012      	beq.n	80068ac <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a16      	ldr	r2, [pc, #88]	; (80068e4 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00a      	beq.n	80068a6 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a14      	ldr	r2, [pc, #80]	; (80068e8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d102      	bne.n	80068a0 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 800689a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800689e:	e03f      	b.n	8006920 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80068a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068a4:	e03c      	b.n	8006920 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80068a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80068aa:	e039      	b.n	8006920 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80068ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80068b0:	e036      	b.n	8006920 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80068b2:	bf00      	nop
 80068b4:	40026400 	.word	0x40026400
 80068b8:	40026058 	.word	0x40026058
 80068bc:	40026010 	.word	0x40026010
 80068c0:	40026410 	.word	0x40026410
 80068c4:	40026070 	.word	0x40026070
 80068c8:	40026470 	.word	0x40026470
 80068cc:	40026028 	.word	0x40026028
 80068d0:	40026428 	.word	0x40026428
 80068d4:	40026088 	.word	0x40026088
 80068d8:	40026488 	.word	0x40026488
 80068dc:	40026040 	.word	0x40026040
 80068e0:	40026440 	.word	0x40026440
 80068e4:	400260a0 	.word	0x400260a0
 80068e8:	400264a0 	.word	0x400264a0
 80068ec:	40026000 	.word	0x40026000
 80068f0:	40026458 	.word	0x40026458
 80068f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80068f8:	e012      	b.n	8006920 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80068fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068fe:	e00f      	b.n	8006920 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8006900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006904:	e00c      	b.n	8006920 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8006906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800690a:	e009      	b.n	8006920 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800690c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006910:	e006      	b.n	8006920 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8006912:	2308      	movs	r3, #8
 8006914:	e004      	b.n	8006920 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8006916:	2308      	movs	r3, #8
 8006918:	e002      	b.n	8006920 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800691a:	2308      	movs	r3, #8
 800691c:	e000      	b.n	8006920 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800691e:	2308      	movs	r3, #8
 8006920:	4a8c      	ldr	r2, [pc, #560]	; (8006b54 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8006922:	60d3      	str	r3, [r2, #12]
 8006924:	e14e      	b.n	8006bc4 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	461a      	mov	r2, r3
 800692c:	4b8a      	ldr	r3, [pc, #552]	; (8006b58 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 800692e:	429a      	cmp	r2, r3
 8006930:	d960      	bls.n	80069f4 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a89      	ldr	r2, [pc, #548]	; (8006b5c <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d057      	beq.n	80069ec <HAL_DMAEx_MultiBufferStart_IT+0x958>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a87      	ldr	r2, [pc, #540]	; (8006b60 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d050      	beq.n	80069e8 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a86      	ldr	r2, [pc, #536]	; (8006b64 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d049      	beq.n	80069e4 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a84      	ldr	r2, [pc, #528]	; (8006b68 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d042      	beq.n	80069e0 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a83      	ldr	r2, [pc, #524]	; (8006b6c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d03a      	beq.n	80069da <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a81      	ldr	r2, [pc, #516]	; (8006b70 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d032      	beq.n	80069d4 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a80      	ldr	r2, [pc, #512]	; (8006b74 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d02a      	beq.n	80069ce <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a7e      	ldr	r2, [pc, #504]	; (8006b78 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d022      	beq.n	80069c8 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a7d      	ldr	r2, [pc, #500]	; (8006b7c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d01a      	beq.n	80069c2 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a7b      	ldr	r2, [pc, #492]	; (8006b80 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d012      	beq.n	80069bc <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a7a      	ldr	r2, [pc, #488]	; (8006b84 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d00a      	beq.n	80069b6 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a78      	ldr	r2, [pc, #480]	; (8006b88 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d102      	bne.n	80069b0 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 80069aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80069ae:	e01e      	b.n	80069ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80069b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069b4:	e01b      	b.n	80069ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80069b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80069ba:	e018      	b.n	80069ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80069bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80069c0:	e015      	b.n	80069ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80069c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80069c6:	e012      	b.n	80069ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80069c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069cc:	e00f      	b.n	80069ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80069ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069d2:	e00c      	b.n	80069ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80069d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069d8:	e009      	b.n	80069ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80069da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069de:	e006      	b.n	80069ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80069e0:	2308      	movs	r3, #8
 80069e2:	e004      	b.n	80069ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80069e4:	2308      	movs	r3, #8
 80069e6:	e002      	b.n	80069ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80069e8:	2308      	movs	r3, #8
 80069ea:	e000      	b.n	80069ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80069ec:	2308      	movs	r3, #8
 80069ee:	4a59      	ldr	r2, [pc, #356]	; (8006b54 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80069f0:	6093      	str	r3, [r2, #8]
 80069f2:	e0e7      	b.n	8006bc4 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	4b64      	ldr	r3, [pc, #400]	; (8006b8c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d960      	bls.n	8006ac2 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a55      	ldr	r2, [pc, #340]	; (8006b5c <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d057      	beq.n	8006aba <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a54      	ldr	r2, [pc, #336]	; (8006b60 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d050      	beq.n	8006ab6 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a52      	ldr	r2, [pc, #328]	; (8006b64 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d049      	beq.n	8006ab2 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a51      	ldr	r2, [pc, #324]	; (8006b68 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d042      	beq.n	8006aae <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a4f      	ldr	r2, [pc, #316]	; (8006b6c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d03a      	beq.n	8006aa8 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a4e      	ldr	r2, [pc, #312]	; (8006b70 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d032      	beq.n	8006aa2 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a4c      	ldr	r2, [pc, #304]	; (8006b74 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d02a      	beq.n	8006a9c <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a4b      	ldr	r2, [pc, #300]	; (8006b78 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d022      	beq.n	8006a96 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a49      	ldr	r2, [pc, #292]	; (8006b7c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d01a      	beq.n	8006a90 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a48      	ldr	r2, [pc, #288]	; (8006b80 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d012      	beq.n	8006a8a <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a46      	ldr	r2, [pc, #280]	; (8006b84 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d00a      	beq.n	8006a84 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a45      	ldr	r2, [pc, #276]	; (8006b88 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d102      	bne.n	8006a7e <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8006a78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006a7c:	e01e      	b.n	8006abc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a82:	e01b      	b.n	8006abc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006a84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006a88:	e018      	b.n	8006abc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006a8a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006a8e:	e015      	b.n	8006abc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006a90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006a94:	e012      	b.n	8006abc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a9a:	e00f      	b.n	8006abc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aa0:	e00c      	b.n	8006abc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006aa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aa6:	e009      	b.n	8006abc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aac:	e006      	b.n	8006abc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006aae:	2308      	movs	r3, #8
 8006ab0:	e004      	b.n	8006abc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006ab2:	2308      	movs	r3, #8
 8006ab4:	e002      	b.n	8006abc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006ab6:	2308      	movs	r3, #8
 8006ab8:	e000      	b.n	8006abc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006aba:	2308      	movs	r3, #8
 8006abc:	4a34      	ldr	r2, [pc, #208]	; (8006b90 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8006abe:	60d3      	str	r3, [r2, #12]
 8006ac0:	e080      	b.n	8006bc4 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a25      	ldr	r2, [pc, #148]	; (8006b5c <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d078      	beq.n	8006bbe <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a23      	ldr	r2, [pc, #140]	; (8006b60 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d071      	beq.n	8006bba <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a22      	ldr	r2, [pc, #136]	; (8006b64 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d06a      	beq.n	8006bb6 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a20      	ldr	r2, [pc, #128]	; (8006b68 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d063      	beq.n	8006bb2 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a1f      	ldr	r2, [pc, #124]	; (8006b6c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d05b      	beq.n	8006bac <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a1d      	ldr	r2, [pc, #116]	; (8006b70 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d053      	beq.n	8006ba6 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a1c      	ldr	r2, [pc, #112]	; (8006b74 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d04b      	beq.n	8006ba0 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a1a      	ldr	r2, [pc, #104]	; (8006b78 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d043      	beq.n	8006b9a <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a19      	ldr	r2, [pc, #100]	; (8006b7c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d03b      	beq.n	8006b94 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a17      	ldr	r2, [pc, #92]	; (8006b80 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d012      	beq.n	8006b4c <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a16      	ldr	r2, [pc, #88]	; (8006b84 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00a      	beq.n	8006b46 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a14      	ldr	r2, [pc, #80]	; (8006b88 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d102      	bne.n	8006b40 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8006b3a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b3e:	e03f      	b.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8006b40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b44:	e03c      	b.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8006b46:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b4a:	e039      	b.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8006b4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b50:	e036      	b.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8006b52:	bf00      	nop
 8006b54:	40026400 	.word	0x40026400
 8006b58:	400260b8 	.word	0x400260b8
 8006b5c:	40026010 	.word	0x40026010
 8006b60:	40026410 	.word	0x40026410
 8006b64:	40026070 	.word	0x40026070
 8006b68:	40026470 	.word	0x40026470
 8006b6c:	40026028 	.word	0x40026028
 8006b70:	40026428 	.word	0x40026428
 8006b74:	40026088 	.word	0x40026088
 8006b78:	40026488 	.word	0x40026488
 8006b7c:	40026040 	.word	0x40026040
 8006b80:	40026440 	.word	0x40026440
 8006b84:	400260a0 	.word	0x400260a0
 8006b88:	400264a0 	.word	0x400264a0
 8006b8c:	40026058 	.word	0x40026058
 8006b90:	40026000 	.word	0x40026000
 8006b94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b98:	e012      	b.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8006b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b9e:	e00f      	b.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8006ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ba4:	e00c      	b.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8006ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006baa:	e009      	b.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8006bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bb0:	e006      	b.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8006bb2:	2308      	movs	r3, #8
 8006bb4:	e004      	b.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8006bb6:	2308      	movs	r3, #8
 8006bb8:	e002      	b.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8006bba:	2308      	movs	r3, #8
 8006bbc:	e000      	b.n	8006bc0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8006bbe:	2308      	movs	r3, #8
 8006bc0:	4a8a      	ldr	r2, [pc, #552]	; (8006dec <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8006bc2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4b89      	ldr	r3, [pc, #548]	; (8006df0 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d960      	bls.n	8006c92 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a87      	ldr	r2, [pc, #540]	; (8006df4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d057      	beq.n	8006c8a <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a86      	ldr	r2, [pc, #536]	; (8006df8 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d050      	beq.n	8006c86 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a84      	ldr	r2, [pc, #528]	; (8006dfc <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d049      	beq.n	8006c82 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a83      	ldr	r2, [pc, #524]	; (8006e00 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d042      	beq.n	8006c7e <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a81      	ldr	r2, [pc, #516]	; (8006e04 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d03a      	beq.n	8006c78 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a80      	ldr	r2, [pc, #512]	; (8006e08 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d032      	beq.n	8006c72 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a7e      	ldr	r2, [pc, #504]	; (8006e0c <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d02a      	beq.n	8006c6c <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a7d      	ldr	r2, [pc, #500]	; (8006e10 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d022      	beq.n	8006c66 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a7b      	ldr	r2, [pc, #492]	; (8006e14 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d01a      	beq.n	8006c60 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a7a      	ldr	r2, [pc, #488]	; (8006e18 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d012      	beq.n	8006c5a <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a78      	ldr	r2, [pc, #480]	; (8006e1c <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00a      	beq.n	8006c54 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a77      	ldr	r2, [pc, #476]	; (8006e20 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d102      	bne.n	8006c4e <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8006c48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006c4c:	e01e      	b.n	8006c8c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8006c4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c52:	e01b      	b.n	8006c8c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8006c54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006c58:	e018      	b.n	8006c8c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8006c5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006c5e:	e015      	b.n	8006c8c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8006c60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006c64:	e012      	b.n	8006c8c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8006c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c6a:	e00f      	b.n	8006c8c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8006c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c70:	e00c      	b.n	8006c8c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8006c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c76:	e009      	b.n	8006c8c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8006c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c7c:	e006      	b.n	8006c8c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8006c7e:	2304      	movs	r3, #4
 8006c80:	e004      	b.n	8006c8c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8006c82:	2304      	movs	r3, #4
 8006c84:	e002      	b.n	8006c8c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8006c86:	2304      	movs	r3, #4
 8006c88:	e000      	b.n	8006c8c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8006c8a:	2304      	movs	r3, #4
 8006c8c:	4a65      	ldr	r2, [pc, #404]	; (8006e24 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8006c8e:	60d3      	str	r3, [r2, #12]
 8006c90:	e150      	b.n	8006f34 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	4b63      	ldr	r3, [pc, #396]	; (8006e28 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d960      	bls.n	8006d60 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a54      	ldr	r2, [pc, #336]	; (8006df4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d057      	beq.n	8006d58 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a52      	ldr	r2, [pc, #328]	; (8006df8 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d050      	beq.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a51      	ldr	r2, [pc, #324]	; (8006dfc <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d049      	beq.n	8006d50 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a4f      	ldr	r2, [pc, #316]	; (8006e00 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d042      	beq.n	8006d4c <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a4e      	ldr	r2, [pc, #312]	; (8006e04 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d03a      	beq.n	8006d46 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a4c      	ldr	r2, [pc, #304]	; (8006e08 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d032      	beq.n	8006d40 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a4b      	ldr	r2, [pc, #300]	; (8006e0c <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d02a      	beq.n	8006d3a <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a49      	ldr	r2, [pc, #292]	; (8006e10 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d022      	beq.n	8006d34 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a48      	ldr	r2, [pc, #288]	; (8006e14 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d01a      	beq.n	8006d2e <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a46      	ldr	r2, [pc, #280]	; (8006e18 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d012      	beq.n	8006d28 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a45      	ldr	r2, [pc, #276]	; (8006e1c <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00a      	beq.n	8006d22 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a43      	ldr	r2, [pc, #268]	; (8006e20 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d102      	bne.n	8006d1c <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8006d16:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006d1a:	e01e      	b.n	8006d5a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8006d1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d20:	e01b      	b.n	8006d5a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8006d22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006d26:	e018      	b.n	8006d5a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8006d28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006d2c:	e015      	b.n	8006d5a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8006d2e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006d32:	e012      	b.n	8006d5a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8006d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d38:	e00f      	b.n	8006d5a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8006d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d3e:	e00c      	b.n	8006d5a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8006d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d44:	e009      	b.n	8006d5a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8006d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d4a:	e006      	b.n	8006d5a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8006d4c:	2304      	movs	r3, #4
 8006d4e:	e004      	b.n	8006d5a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8006d50:	2304      	movs	r3, #4
 8006d52:	e002      	b.n	8006d5a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8006d54:	2304      	movs	r3, #4
 8006d56:	e000      	b.n	8006d5a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8006d58:	2304      	movs	r3, #4
 8006d5a:	4a32      	ldr	r2, [pc, #200]	; (8006e24 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8006d5c:	6093      	str	r3, [r2, #8]
 8006d5e:	e0e9      	b.n	8006f34 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	461a      	mov	r2, r3
 8006d66:	4b31      	ldr	r3, [pc, #196]	; (8006e2c <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	f240 8083 	bls.w	8006e74 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a20      	ldr	r2, [pc, #128]	; (8006df4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d079      	beq.n	8006e6c <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a1e      	ldr	r2, [pc, #120]	; (8006df8 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d072      	beq.n	8006e68 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a1d      	ldr	r2, [pc, #116]	; (8006dfc <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d06b      	beq.n	8006e64 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a1b      	ldr	r2, [pc, #108]	; (8006e00 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d064      	beq.n	8006e60 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a1a      	ldr	r2, [pc, #104]	; (8006e04 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d05c      	beq.n	8006e5a <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a18      	ldr	r2, [pc, #96]	; (8006e08 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d054      	beq.n	8006e54 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a17      	ldr	r2, [pc, #92]	; (8006e0c <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d04c      	beq.n	8006e4e <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a15      	ldr	r2, [pc, #84]	; (8006e10 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d044      	beq.n	8006e48 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a14      	ldr	r2, [pc, #80]	; (8006e14 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d03c      	beq.n	8006e42 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a12      	ldr	r2, [pc, #72]	; (8006e18 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d034      	beq.n	8006e3c <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a11      	ldr	r2, [pc, #68]	; (8006e1c <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d02c      	beq.n	8006e36 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a0f      	ldr	r2, [pc, #60]	; (8006e20 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d124      	bne.n	8006e30 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8006de6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006dea:	e040      	b.n	8006e6e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8006dec:	40026000 	.word	0x40026000
 8006df0:	40026458 	.word	0x40026458
 8006df4:	40026010 	.word	0x40026010
 8006df8:	40026410 	.word	0x40026410
 8006dfc:	40026070 	.word	0x40026070
 8006e00:	40026470 	.word	0x40026470
 8006e04:	40026028 	.word	0x40026028
 8006e08:	40026428 	.word	0x40026428
 8006e0c:	40026088 	.word	0x40026088
 8006e10:	40026488 	.word	0x40026488
 8006e14:	40026040 	.word	0x40026040
 8006e18:	40026440 	.word	0x40026440
 8006e1c:	400260a0 	.word	0x400260a0
 8006e20:	400264a0 	.word	0x400264a0
 8006e24:	40026400 	.word	0x40026400
 8006e28:	400260b8 	.word	0x400260b8
 8006e2c:	40026058 	.word	0x40026058
 8006e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e34:	e01b      	b.n	8006e6e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8006e36:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e3a:	e018      	b.n	8006e6e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8006e3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e40:	e015      	b.n	8006e6e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8006e42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e46:	e012      	b.n	8006e6e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8006e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e4c:	e00f      	b.n	8006e6e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8006e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e52:	e00c      	b.n	8006e6e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8006e54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e58:	e009      	b.n	8006e6e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8006e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e5e:	e006      	b.n	8006e6e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8006e60:	2304      	movs	r3, #4
 8006e62:	e004      	b.n	8006e6e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8006e64:	2304      	movs	r3, #4
 8006e66:	e002      	b.n	8006e6e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8006e68:	2304      	movs	r3, #4
 8006e6a:	e000      	b.n	8006e6e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8006e6c:	2304      	movs	r3, #4
 8006e6e:	4a8b      	ldr	r2, [pc, #556]	; (800709c <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8006e70:	60d3      	str	r3, [r2, #12]
 8006e72:	e05f      	b.n	8006f34 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a89      	ldr	r2, [pc, #548]	; (80070a0 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d057      	beq.n	8006f2e <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a88      	ldr	r2, [pc, #544]	; (80070a4 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d050      	beq.n	8006f2a <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a86      	ldr	r2, [pc, #536]	; (80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d049      	beq.n	8006f26 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a85      	ldr	r2, [pc, #532]	; (80070ac <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d042      	beq.n	8006f22 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a83      	ldr	r2, [pc, #524]	; (80070b0 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d03a      	beq.n	8006f1c <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a82      	ldr	r2, [pc, #520]	; (80070b4 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d032      	beq.n	8006f16 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a80      	ldr	r2, [pc, #512]	; (80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d02a      	beq.n	8006f10 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a7f      	ldr	r2, [pc, #508]	; (80070bc <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d022      	beq.n	8006f0a <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a7d      	ldr	r2, [pc, #500]	; (80070c0 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d01a      	beq.n	8006f04 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a7c      	ldr	r2, [pc, #496]	; (80070c4 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d012      	beq.n	8006efe <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a7a      	ldr	r2, [pc, #488]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00a      	beq.n	8006ef8 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a79      	ldr	r2, [pc, #484]	; (80070cc <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d102      	bne.n	8006ef2 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8006eec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006ef0:	e01e      	b.n	8006f30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006ef2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ef6:	e01b      	b.n	8006f30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006ef8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006efc:	e018      	b.n	8006f30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006efe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006f02:	e015      	b.n	8006f30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006f04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006f08:	e012      	b.n	8006f30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f0e:	e00f      	b.n	8006f30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f14:	e00c      	b.n	8006f30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f1a:	e009      	b.n	8006f30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f20:	e006      	b.n	8006f30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006f22:	2304      	movs	r3, #4
 8006f24:	e004      	b.n	8006f30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006f26:	2304      	movs	r3, #4
 8006f28:	e002      	b.n	8006f30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006f2a:	2304      	movs	r3, #4
 8006f2c:	e000      	b.n	8006f30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006f2e:	2304      	movs	r3, #4
 8006f30:	4a5a      	ldr	r2, [pc, #360]	; (800709c <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8006f32:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4b65      	ldr	r3, [pc, #404]	; (80070d0 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d95c      	bls.n	8006ffa <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a56      	ldr	r2, [pc, #344]	; (80070a0 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d053      	beq.n	8006ff2 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a55      	ldr	r2, [pc, #340]	; (80070a4 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d04c      	beq.n	8006fee <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a53      	ldr	r2, [pc, #332]	; (80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d045      	beq.n	8006fea <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a52      	ldr	r2, [pc, #328]	; (80070ac <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d03e      	beq.n	8006fe6 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a50      	ldr	r2, [pc, #320]	; (80070b0 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d037      	beq.n	8006fe2 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a4f      	ldr	r2, [pc, #316]	; (80070b4 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d030      	beq.n	8006fde <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a4d      	ldr	r2, [pc, #308]	; (80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d029      	beq.n	8006fda <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a4c      	ldr	r2, [pc, #304]	; (80070bc <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d022      	beq.n	8006fd6 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a4a      	ldr	r2, [pc, #296]	; (80070c0 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d01a      	beq.n	8006fd0 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a49      	ldr	r2, [pc, #292]	; (80070c4 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d012      	beq.n	8006fca <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a47      	ldr	r2, [pc, #284]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d00a      	beq.n	8006fc4 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a46      	ldr	r2, [pc, #280]	; (80070cc <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d102      	bne.n	8006fbe <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8006fb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006fbc:	e01a      	b.n	8006ff4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006fbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006fc2:	e017      	b.n	8006ff4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006fc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006fc8:	e014      	b.n	8006ff4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006fce:	e011      	b.n	8006ff4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006fd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006fd4:	e00e      	b.n	8006ff4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006fd6:	2340      	movs	r3, #64	; 0x40
 8006fd8:	e00c      	b.n	8006ff4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006fda:	2340      	movs	r3, #64	; 0x40
 8006fdc:	e00a      	b.n	8006ff4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006fde:	2340      	movs	r3, #64	; 0x40
 8006fe0:	e008      	b.n	8006ff4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006fe2:	2340      	movs	r3, #64	; 0x40
 8006fe4:	e006      	b.n	8006ff4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e004      	b.n	8006ff4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e002      	b.n	8006ff4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e000      	b.n	8006ff4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	4a37      	ldr	r2, [pc, #220]	; (80070d4 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8006ff6:	60d3      	str	r3, [r2, #12]
 8006ff8:	e141      	b.n	800727e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	4b35      	ldr	r3, [pc, #212]	; (80070d8 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8007002:	429a      	cmp	r2, r3
 8007004:	d97c      	bls.n	8007100 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a25      	ldr	r2, [pc, #148]	; (80070a0 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d073      	beq.n	80070f8 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a23      	ldr	r2, [pc, #140]	; (80070a4 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d06c      	beq.n	80070f4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a22      	ldr	r2, [pc, #136]	; (80070a8 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d065      	beq.n	80070f0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a20      	ldr	r2, [pc, #128]	; (80070ac <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d05e      	beq.n	80070ec <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a1f      	ldr	r2, [pc, #124]	; (80070b0 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d057      	beq.n	80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1d      	ldr	r2, [pc, #116]	; (80070b4 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d050      	beq.n	80070e4 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a1c      	ldr	r2, [pc, #112]	; (80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d049      	beq.n	80070e0 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a1a      	ldr	r2, [pc, #104]	; (80070bc <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d042      	beq.n	80070dc <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a19      	ldr	r2, [pc, #100]	; (80070c0 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d01a      	beq.n	8007096 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a17      	ldr	r2, [pc, #92]	; (80070c4 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d012      	beq.n	8007090 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a16      	ldr	r2, [pc, #88]	; (80070c8 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00a      	beq.n	800708a <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a14      	ldr	r2, [pc, #80]	; (80070cc <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d102      	bne.n	8007084 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 800707e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007082:	e03a      	b.n	80070fa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8007084:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007088:	e037      	b.n	80070fa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800708a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800708e:	e034      	b.n	80070fa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8007090:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007094:	e031      	b.n	80070fa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8007096:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800709a:	e02e      	b.n	80070fa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800709c:	40026000 	.word	0x40026000
 80070a0:	40026010 	.word	0x40026010
 80070a4:	40026410 	.word	0x40026410
 80070a8:	40026070 	.word	0x40026070
 80070ac:	40026470 	.word	0x40026470
 80070b0:	40026028 	.word	0x40026028
 80070b4:	40026428 	.word	0x40026428
 80070b8:	40026088 	.word	0x40026088
 80070bc:	40026488 	.word	0x40026488
 80070c0:	40026040 	.word	0x40026040
 80070c4:	40026440 	.word	0x40026440
 80070c8:	400260a0 	.word	0x400260a0
 80070cc:	400264a0 	.word	0x400264a0
 80070d0:	40026458 	.word	0x40026458
 80070d4:	40026400 	.word	0x40026400
 80070d8:	400260b8 	.word	0x400260b8
 80070dc:	2340      	movs	r3, #64	; 0x40
 80070de:	e00c      	b.n	80070fa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80070e0:	2340      	movs	r3, #64	; 0x40
 80070e2:	e00a      	b.n	80070fa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80070e4:	2340      	movs	r3, #64	; 0x40
 80070e6:	e008      	b.n	80070fa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80070e8:	2340      	movs	r3, #64	; 0x40
 80070ea:	e006      	b.n	80070fa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80070ec:	2301      	movs	r3, #1
 80070ee:	e004      	b.n	80070fa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e002      	b.n	80070fa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80070f4:	2301      	movs	r3, #1
 80070f6:	e000      	b.n	80070fa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80070f8:	2301      	movs	r3, #1
 80070fa:	4a7b      	ldr	r2, [pc, #492]	; (80072e8 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80070fc:	6093      	str	r3, [r2, #8]
 80070fe:	e0be      	b.n	800727e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	461a      	mov	r2, r3
 8007106:	4b79      	ldr	r3, [pc, #484]	; (80072ec <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8007108:	429a      	cmp	r2, r3
 800710a:	d95c      	bls.n	80071c6 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a77      	ldr	r2, [pc, #476]	; (80072f0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d053      	beq.n	80071be <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a76      	ldr	r2, [pc, #472]	; (80072f4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d04c      	beq.n	80071ba <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a74      	ldr	r2, [pc, #464]	; (80072f8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d045      	beq.n	80071b6 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a73      	ldr	r2, [pc, #460]	; (80072fc <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d03e      	beq.n	80071b2 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a71      	ldr	r2, [pc, #452]	; (8007300 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d037      	beq.n	80071ae <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a70      	ldr	r2, [pc, #448]	; (8007304 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d030      	beq.n	80071aa <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a6e      	ldr	r2, [pc, #440]	; (8007308 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d029      	beq.n	80071a6 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a6d      	ldr	r2, [pc, #436]	; (800730c <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d022      	beq.n	80071a2 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a6b      	ldr	r2, [pc, #428]	; (8007310 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d01a      	beq.n	800719c <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a6a      	ldr	r2, [pc, #424]	; (8007314 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d012      	beq.n	8007196 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a68      	ldr	r2, [pc, #416]	; (8007318 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00a      	beq.n	8007190 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a67      	ldr	r2, [pc, #412]	; (800731c <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d102      	bne.n	800718a <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8007184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007188:	e01a      	b.n	80071c0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800718a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800718e:	e017      	b.n	80071c0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8007190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007194:	e014      	b.n	80071c0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8007196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800719a:	e011      	b.n	80071c0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800719c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80071a0:	e00e      	b.n	80071c0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80071a2:	2340      	movs	r3, #64	; 0x40
 80071a4:	e00c      	b.n	80071c0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80071a6:	2340      	movs	r3, #64	; 0x40
 80071a8:	e00a      	b.n	80071c0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80071aa:	2340      	movs	r3, #64	; 0x40
 80071ac:	e008      	b.n	80071c0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80071ae:	2340      	movs	r3, #64	; 0x40
 80071b0:	e006      	b.n	80071c0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80071b2:	2301      	movs	r3, #1
 80071b4:	e004      	b.n	80071c0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80071b6:	2301      	movs	r3, #1
 80071b8:	e002      	b.n	80071c0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e000      	b.n	80071c0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80071be:	2301      	movs	r3, #1
 80071c0:	4a57      	ldr	r2, [pc, #348]	; (8007320 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80071c2:	60d3      	str	r3, [r2, #12]
 80071c4:	e05b      	b.n	800727e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a49      	ldr	r2, [pc, #292]	; (80072f0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d053      	beq.n	8007278 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a47      	ldr	r2, [pc, #284]	; (80072f4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d04c      	beq.n	8007274 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a46      	ldr	r2, [pc, #280]	; (80072f8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d045      	beq.n	8007270 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a44      	ldr	r2, [pc, #272]	; (80072fc <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d03e      	beq.n	800726c <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a43      	ldr	r2, [pc, #268]	; (8007300 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d037      	beq.n	8007268 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a41      	ldr	r2, [pc, #260]	; (8007304 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d030      	beq.n	8007264 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a40      	ldr	r2, [pc, #256]	; (8007308 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d029      	beq.n	8007260 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a3e      	ldr	r2, [pc, #248]	; (800730c <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d022      	beq.n	800725c <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a3d      	ldr	r2, [pc, #244]	; (8007310 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d01a      	beq.n	8007256 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a3b      	ldr	r2, [pc, #236]	; (8007314 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d012      	beq.n	8007250 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a3a      	ldr	r2, [pc, #232]	; (8007318 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d00a      	beq.n	800724a <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a38      	ldr	r2, [pc, #224]	; (800731c <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d102      	bne.n	8007244 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 800723e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007242:	e01a      	b.n	800727a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8007244:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007248:	e017      	b.n	800727a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800724a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800724e:	e014      	b.n	800727a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8007250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007254:	e011      	b.n	800727a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8007256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800725a:	e00e      	b.n	800727a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800725c:	2340      	movs	r3, #64	; 0x40
 800725e:	e00c      	b.n	800727a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8007260:	2340      	movs	r3, #64	; 0x40
 8007262:	e00a      	b.n	800727a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8007264:	2340      	movs	r3, #64	; 0x40
 8007266:	e008      	b.n	800727a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8007268:	2340      	movs	r3, #64	; 0x40
 800726a:	e006      	b.n	800727a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800726c:	2301      	movs	r3, #1
 800726e:	e004      	b.n	800727a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8007270:	2301      	movs	r3, #1
 8007272:	e002      	b.n	800727a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8007274:	2301      	movs	r3, #1
 8007276:	e000      	b.n	800727a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8007278:	2301      	movs	r3, #1
 800727a:	4a29      	ldr	r2, [pc, #164]	; (8007320 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800727c:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f042 0216 	orr.w	r2, r2, #22
 800728c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	695a      	ldr	r2, [r3, #20]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800729c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d103      	bne.n	80072ae <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d007      	beq.n	80072be <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f042 0208 	orr.w	r2, r2, #8
 80072bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f042 0201 	orr.w	r2, r2, #1
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	e005      	b.n	80072dc <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80072d8:	2302      	movs	r3, #2
 80072da:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	40026400 	.word	0x40026400
 80072ec:	40026058 	.word	0x40026058
 80072f0:	40026010 	.word	0x40026010
 80072f4:	40026410 	.word	0x40026410
 80072f8:	40026070 	.word	0x40026070
 80072fc:	40026470 	.word	0x40026470
 8007300:	40026028 	.word	0x40026028
 8007304:	40026428 	.word	0x40026428
 8007308:	40026088 	.word	0x40026088
 800730c:	40026488 	.word	0x40026488
 8007310:	40026040 	.word	0x40026040
 8007314:	40026440 	.word	0x40026440
 8007318:	400260a0 	.word	0x400260a0
 800731c:	400264a0 	.word	0x400264a0
 8007320:	40026000 	.word	0x40026000

08007324 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	4613      	mov	r3, r2
 8007330:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8007332:	79fb      	ldrb	r3, [r7, #7]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d104      	bne.n	8007342 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	60da      	str	r2, [r3, #12]
 8007340:	e003      	b.n	800734a <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	d108      	bne.n	8007388 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007386:	e007      	b.n	8007398 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	60da      	str	r2, [r3, #12]
}
 8007398:	bf00      	nop
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b089      	sub	sp, #36	; 0x24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80073ba:	2300      	movs	r3, #0
 80073bc:	61fb      	str	r3, [r7, #28]
 80073be:	e16b      	b.n	8007698 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80073c0:	2201      	movs	r2, #1
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	fa02 f303 	lsl.w	r3, r2, r3
 80073c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	4013      	ands	r3, r2
 80073d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	429a      	cmp	r2, r3
 80073da:	f040 815a 	bne.w	8007692 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d005      	beq.n	80073f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d130      	bne.n	8007458 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	2203      	movs	r2, #3
 8007402:	fa02 f303 	lsl.w	r3, r2, r3
 8007406:	43db      	mvns	r3, r3
 8007408:	69ba      	ldr	r2, [r7, #24]
 800740a:	4013      	ands	r3, r2
 800740c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	fa02 f303 	lsl.w	r3, r2, r3
 800741a:	69ba      	ldr	r2, [r7, #24]
 800741c:	4313      	orrs	r3, r2
 800741e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	69ba      	ldr	r2, [r7, #24]
 8007424:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800742c:	2201      	movs	r2, #1
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	fa02 f303 	lsl.w	r3, r2, r3
 8007434:	43db      	mvns	r3, r3
 8007436:	69ba      	ldr	r2, [r7, #24]
 8007438:	4013      	ands	r3, r2
 800743a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	091b      	lsrs	r3, r3, #4
 8007442:	f003 0201 	and.w	r2, r3, #1
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	fa02 f303 	lsl.w	r3, r2, r3
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	4313      	orrs	r3, r2
 8007450:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f003 0303 	and.w	r3, r3, #3
 8007460:	2b03      	cmp	r3, #3
 8007462:	d017      	beq.n	8007494 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	005b      	lsls	r3, r3, #1
 800746e:	2203      	movs	r2, #3
 8007470:	fa02 f303 	lsl.w	r3, r2, r3
 8007474:	43db      	mvns	r3, r3
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	4013      	ands	r3, r2
 800747a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	fa02 f303 	lsl.w	r3, r2, r3
 8007488:	69ba      	ldr	r2, [r7, #24]
 800748a:	4313      	orrs	r3, r2
 800748c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	f003 0303 	and.w	r3, r3, #3
 800749c:	2b02      	cmp	r3, #2
 800749e:	d123      	bne.n	80074e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	08da      	lsrs	r2, r3, #3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3208      	adds	r2, #8
 80074a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	f003 0307 	and.w	r3, r3, #7
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	220f      	movs	r2, #15
 80074b8:	fa02 f303 	lsl.w	r3, r2, r3
 80074bc:	43db      	mvns	r3, r3
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	4013      	ands	r3, r2
 80074c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	691a      	ldr	r2, [r3, #16]
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	f003 0307 	and.w	r3, r3, #7
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	fa02 f303 	lsl.w	r3, r2, r3
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	08da      	lsrs	r2, r3, #3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	3208      	adds	r2, #8
 80074e2:	69b9      	ldr	r1, [r7, #24]
 80074e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	2203      	movs	r2, #3
 80074f4:	fa02 f303 	lsl.w	r3, r2, r3
 80074f8:	43db      	mvns	r3, r3
 80074fa:	69ba      	ldr	r2, [r7, #24]
 80074fc:	4013      	ands	r3, r2
 80074fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f003 0203 	and.w	r2, r3, #3
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	005b      	lsls	r3, r3, #1
 800750c:	fa02 f303 	lsl.w	r3, r2, r3
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	4313      	orrs	r3, r2
 8007514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 80b4 	beq.w	8007692 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800752a:	2300      	movs	r3, #0
 800752c:	60fb      	str	r3, [r7, #12]
 800752e:	4b60      	ldr	r3, [pc, #384]	; (80076b0 <HAL_GPIO_Init+0x30c>)
 8007530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007532:	4a5f      	ldr	r2, [pc, #380]	; (80076b0 <HAL_GPIO_Init+0x30c>)
 8007534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007538:	6453      	str	r3, [r2, #68]	; 0x44
 800753a:	4b5d      	ldr	r3, [pc, #372]	; (80076b0 <HAL_GPIO_Init+0x30c>)
 800753c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007546:	4a5b      	ldr	r2, [pc, #364]	; (80076b4 <HAL_GPIO_Init+0x310>)
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	089b      	lsrs	r3, r3, #2
 800754c:	3302      	adds	r3, #2
 800754e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	220f      	movs	r2, #15
 800755e:	fa02 f303 	lsl.w	r3, r2, r3
 8007562:	43db      	mvns	r3, r3
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	4013      	ands	r3, r2
 8007568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a52      	ldr	r2, [pc, #328]	; (80076b8 <HAL_GPIO_Init+0x314>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d02b      	beq.n	80075ca <HAL_GPIO_Init+0x226>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a51      	ldr	r2, [pc, #324]	; (80076bc <HAL_GPIO_Init+0x318>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d025      	beq.n	80075c6 <HAL_GPIO_Init+0x222>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a50      	ldr	r2, [pc, #320]	; (80076c0 <HAL_GPIO_Init+0x31c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d01f      	beq.n	80075c2 <HAL_GPIO_Init+0x21e>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a4f      	ldr	r2, [pc, #316]	; (80076c4 <HAL_GPIO_Init+0x320>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d019      	beq.n	80075be <HAL_GPIO_Init+0x21a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a4e      	ldr	r2, [pc, #312]	; (80076c8 <HAL_GPIO_Init+0x324>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d013      	beq.n	80075ba <HAL_GPIO_Init+0x216>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a4d      	ldr	r2, [pc, #308]	; (80076cc <HAL_GPIO_Init+0x328>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d00d      	beq.n	80075b6 <HAL_GPIO_Init+0x212>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a4c      	ldr	r2, [pc, #304]	; (80076d0 <HAL_GPIO_Init+0x32c>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d007      	beq.n	80075b2 <HAL_GPIO_Init+0x20e>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a4b      	ldr	r2, [pc, #300]	; (80076d4 <HAL_GPIO_Init+0x330>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d101      	bne.n	80075ae <HAL_GPIO_Init+0x20a>
 80075aa:	2307      	movs	r3, #7
 80075ac:	e00e      	b.n	80075cc <HAL_GPIO_Init+0x228>
 80075ae:	2308      	movs	r3, #8
 80075b0:	e00c      	b.n	80075cc <HAL_GPIO_Init+0x228>
 80075b2:	2306      	movs	r3, #6
 80075b4:	e00a      	b.n	80075cc <HAL_GPIO_Init+0x228>
 80075b6:	2305      	movs	r3, #5
 80075b8:	e008      	b.n	80075cc <HAL_GPIO_Init+0x228>
 80075ba:	2304      	movs	r3, #4
 80075bc:	e006      	b.n	80075cc <HAL_GPIO_Init+0x228>
 80075be:	2303      	movs	r3, #3
 80075c0:	e004      	b.n	80075cc <HAL_GPIO_Init+0x228>
 80075c2:	2302      	movs	r3, #2
 80075c4:	e002      	b.n	80075cc <HAL_GPIO_Init+0x228>
 80075c6:	2301      	movs	r3, #1
 80075c8:	e000      	b.n	80075cc <HAL_GPIO_Init+0x228>
 80075ca:	2300      	movs	r3, #0
 80075cc:	69fa      	ldr	r2, [r7, #28]
 80075ce:	f002 0203 	and.w	r2, r2, #3
 80075d2:	0092      	lsls	r2, r2, #2
 80075d4:	4093      	lsls	r3, r2
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	4313      	orrs	r3, r2
 80075da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075dc:	4935      	ldr	r1, [pc, #212]	; (80076b4 <HAL_GPIO_Init+0x310>)
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	089b      	lsrs	r3, r3, #2
 80075e2:	3302      	adds	r3, #2
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80075ea:	4b3b      	ldr	r3, [pc, #236]	; (80076d8 <HAL_GPIO_Init+0x334>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	43db      	mvns	r3, r3
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	4013      	ands	r3, r2
 80075f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	4313      	orrs	r3, r2
 800760c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800760e:	4a32      	ldr	r2, [pc, #200]	; (80076d8 <HAL_GPIO_Init+0x334>)
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007614:	4b30      	ldr	r3, [pc, #192]	; (80076d8 <HAL_GPIO_Init+0x334>)
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	43db      	mvns	r3, r3
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	4013      	ands	r3, r2
 8007622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	4313      	orrs	r3, r2
 8007636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007638:	4a27      	ldr	r2, [pc, #156]	; (80076d8 <HAL_GPIO_Init+0x334>)
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800763e:	4b26      	ldr	r3, [pc, #152]	; (80076d8 <HAL_GPIO_Init+0x334>)
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	43db      	mvns	r3, r3
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	4013      	ands	r3, r2
 800764c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800765a:	69ba      	ldr	r2, [r7, #24]
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	4313      	orrs	r3, r2
 8007660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007662:	4a1d      	ldr	r2, [pc, #116]	; (80076d8 <HAL_GPIO_Init+0x334>)
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007668:	4b1b      	ldr	r3, [pc, #108]	; (80076d8 <HAL_GPIO_Init+0x334>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	43db      	mvns	r3, r3
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	4013      	ands	r3, r2
 8007676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d003      	beq.n	800768c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	4313      	orrs	r3, r2
 800768a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800768c:	4a12      	ldr	r2, [pc, #72]	; (80076d8 <HAL_GPIO_Init+0x334>)
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	3301      	adds	r3, #1
 8007696:	61fb      	str	r3, [r7, #28]
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	2b0f      	cmp	r3, #15
 800769c:	f67f ae90 	bls.w	80073c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80076a0:	bf00      	nop
 80076a2:	bf00      	nop
 80076a4:	3724      	adds	r7, #36	; 0x24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	40023800 	.word	0x40023800
 80076b4:	40013800 	.word	0x40013800
 80076b8:	40020000 	.word	0x40020000
 80076bc:	40020400 	.word	0x40020400
 80076c0:	40020800 	.word	0x40020800
 80076c4:	40020c00 	.word	0x40020c00
 80076c8:	40021000 	.word	0x40021000
 80076cc:	40021400 	.word	0x40021400
 80076d0:	40021800 	.word	0x40021800
 80076d4:	40021c00 	.word	0x40021c00
 80076d8:	40013c00 	.word	0x40013c00

080076dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	691a      	ldr	r2, [r3, #16]
 80076ec:	887b      	ldrh	r3, [r7, #2]
 80076ee:	4013      	ands	r3, r2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80076f4:	2301      	movs	r3, #1
 80076f6:	73fb      	strb	r3, [r7, #15]
 80076f8:	e001      	b.n	80076fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80076fa:	2300      	movs	r3, #0
 80076fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	807b      	strh	r3, [r7, #2]
 8007718:	4613      	mov	r3, r2
 800771a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800771c:	787b      	ldrb	r3, [r7, #1]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007722:	887a      	ldrh	r2, [r7, #2]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007728:	e003      	b.n	8007732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800772a:	887b      	ldrh	r3, [r7, #2]
 800772c:	041a      	lsls	r2, r3, #16
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	619a      	str	r2, [r3, #24]
}
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
	...

08007740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e267      	b.n	8007c22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d075      	beq.n	800784a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800775e:	4b88      	ldr	r3, [pc, #544]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f003 030c 	and.w	r3, r3, #12
 8007766:	2b04      	cmp	r3, #4
 8007768:	d00c      	beq.n	8007784 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800776a:	4b85      	ldr	r3, [pc, #532]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007772:	2b08      	cmp	r3, #8
 8007774:	d112      	bne.n	800779c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007776:	4b82      	ldr	r3, [pc, #520]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800777e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007782:	d10b      	bne.n	800779c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007784:	4b7e      	ldr	r3, [pc, #504]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d05b      	beq.n	8007848 <HAL_RCC_OscConfig+0x108>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d157      	bne.n	8007848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e242      	b.n	8007c22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a4:	d106      	bne.n	80077b4 <HAL_RCC_OscConfig+0x74>
 80077a6:	4b76      	ldr	r3, [pc, #472]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a75      	ldr	r2, [pc, #468]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 80077ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077b0:	6013      	str	r3, [r2, #0]
 80077b2:	e01d      	b.n	80077f0 <HAL_RCC_OscConfig+0xb0>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077bc:	d10c      	bne.n	80077d8 <HAL_RCC_OscConfig+0x98>
 80077be:	4b70      	ldr	r3, [pc, #448]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a6f      	ldr	r2, [pc, #444]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 80077c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	4b6d      	ldr	r3, [pc, #436]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a6c      	ldr	r2, [pc, #432]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 80077d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	e00b      	b.n	80077f0 <HAL_RCC_OscConfig+0xb0>
 80077d8:	4b69      	ldr	r3, [pc, #420]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a68      	ldr	r2, [pc, #416]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 80077de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077e2:	6013      	str	r3, [r2, #0]
 80077e4:	4b66      	ldr	r3, [pc, #408]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a65      	ldr	r2, [pc, #404]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 80077ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d013      	beq.n	8007820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077f8:	f7fd fd06 	bl	8005208 <HAL_GetTick>
 80077fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077fe:	e008      	b.n	8007812 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007800:	f7fd fd02 	bl	8005208 <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	2b64      	cmp	r3, #100	; 0x64
 800780c:	d901      	bls.n	8007812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e207      	b.n	8007c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007812:	4b5b      	ldr	r3, [pc, #364]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d0f0      	beq.n	8007800 <HAL_RCC_OscConfig+0xc0>
 800781e:	e014      	b.n	800784a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007820:	f7fd fcf2 	bl	8005208 <HAL_GetTick>
 8007824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007828:	f7fd fcee 	bl	8005208 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b64      	cmp	r3, #100	; 0x64
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e1f3      	b.n	8007c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800783a:	4b51      	ldr	r3, [pc, #324]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1f0      	bne.n	8007828 <HAL_RCC_OscConfig+0xe8>
 8007846:	e000      	b.n	800784a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0302 	and.w	r3, r3, #2
 8007852:	2b00      	cmp	r3, #0
 8007854:	d063      	beq.n	800791e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007856:	4b4a      	ldr	r3, [pc, #296]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f003 030c 	and.w	r3, r3, #12
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00b      	beq.n	800787a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007862:	4b47      	ldr	r3, [pc, #284]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800786a:	2b08      	cmp	r3, #8
 800786c:	d11c      	bne.n	80078a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800786e:	4b44      	ldr	r3, [pc, #272]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d116      	bne.n	80078a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800787a:	4b41      	ldr	r3, [pc, #260]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b00      	cmp	r3, #0
 8007884:	d005      	beq.n	8007892 <HAL_RCC_OscConfig+0x152>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d001      	beq.n	8007892 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e1c7      	b.n	8007c22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007892:	4b3b      	ldr	r3, [pc, #236]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	00db      	lsls	r3, r3, #3
 80078a0:	4937      	ldr	r1, [pc, #220]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078a6:	e03a      	b.n	800791e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d020      	beq.n	80078f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078b0:	4b34      	ldr	r3, [pc, #208]	; (8007984 <HAL_RCC_OscConfig+0x244>)
 80078b2:	2201      	movs	r2, #1
 80078b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b6:	f7fd fca7 	bl	8005208 <HAL_GetTick>
 80078ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078bc:	e008      	b.n	80078d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078be:	f7fd fca3 	bl	8005208 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d901      	bls.n	80078d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e1a8      	b.n	8007c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078d0:	4b2b      	ldr	r3, [pc, #172]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0302 	and.w	r3, r3, #2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d0f0      	beq.n	80078be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078dc:	4b28      	ldr	r3, [pc, #160]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	00db      	lsls	r3, r3, #3
 80078ea:	4925      	ldr	r1, [pc, #148]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 80078ec:	4313      	orrs	r3, r2
 80078ee:	600b      	str	r3, [r1, #0]
 80078f0:	e015      	b.n	800791e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078f2:	4b24      	ldr	r3, [pc, #144]	; (8007984 <HAL_RCC_OscConfig+0x244>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f8:	f7fd fc86 	bl	8005208 <HAL_GetTick>
 80078fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078fe:	e008      	b.n	8007912 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007900:	f7fd fc82 	bl	8005208 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e187      	b.n	8007c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007912:	4b1b      	ldr	r3, [pc, #108]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1f0      	bne.n	8007900 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0308 	and.w	r3, r3, #8
 8007926:	2b00      	cmp	r3, #0
 8007928:	d036      	beq.n	8007998 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d016      	beq.n	8007960 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007932:	4b15      	ldr	r3, [pc, #84]	; (8007988 <HAL_RCC_OscConfig+0x248>)
 8007934:	2201      	movs	r2, #1
 8007936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007938:	f7fd fc66 	bl	8005208 <HAL_GetTick>
 800793c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800793e:	e008      	b.n	8007952 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007940:	f7fd fc62 	bl	8005208 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	2b02      	cmp	r3, #2
 800794c:	d901      	bls.n	8007952 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e167      	b.n	8007c22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007952:	4b0b      	ldr	r3, [pc, #44]	; (8007980 <HAL_RCC_OscConfig+0x240>)
 8007954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0f0      	beq.n	8007940 <HAL_RCC_OscConfig+0x200>
 800795e:	e01b      	b.n	8007998 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007960:	4b09      	ldr	r3, [pc, #36]	; (8007988 <HAL_RCC_OscConfig+0x248>)
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007966:	f7fd fc4f 	bl	8005208 <HAL_GetTick>
 800796a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800796c:	e00e      	b.n	800798c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800796e:	f7fd fc4b 	bl	8005208 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	2b02      	cmp	r3, #2
 800797a:	d907      	bls.n	800798c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e150      	b.n	8007c22 <HAL_RCC_OscConfig+0x4e2>
 8007980:	40023800 	.word	0x40023800
 8007984:	42470000 	.word	0x42470000
 8007988:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800798c:	4b88      	ldr	r3, [pc, #544]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 800798e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007990:	f003 0302 	and.w	r3, r3, #2
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1ea      	bne.n	800796e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 8097 	beq.w	8007ad4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079a6:	2300      	movs	r3, #0
 80079a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079aa:	4b81      	ldr	r3, [pc, #516]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10f      	bne.n	80079d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079b6:	2300      	movs	r3, #0
 80079b8:	60bb      	str	r3, [r7, #8]
 80079ba:	4b7d      	ldr	r3, [pc, #500]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 80079bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079be:	4a7c      	ldr	r2, [pc, #496]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 80079c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079c4:	6413      	str	r3, [r2, #64]	; 0x40
 80079c6:	4b7a      	ldr	r3, [pc, #488]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 80079c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ce:	60bb      	str	r3, [r7, #8]
 80079d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079d2:	2301      	movs	r3, #1
 80079d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079d6:	4b77      	ldr	r3, [pc, #476]	; (8007bb4 <HAL_RCC_OscConfig+0x474>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d118      	bne.n	8007a14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079e2:	4b74      	ldr	r3, [pc, #464]	; (8007bb4 <HAL_RCC_OscConfig+0x474>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a73      	ldr	r2, [pc, #460]	; (8007bb4 <HAL_RCC_OscConfig+0x474>)
 80079e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079ee:	f7fd fc0b 	bl	8005208 <HAL_GetTick>
 80079f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079f4:	e008      	b.n	8007a08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079f6:	f7fd fc07 	bl	8005208 <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d901      	bls.n	8007a08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e10c      	b.n	8007c22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a08:	4b6a      	ldr	r3, [pc, #424]	; (8007bb4 <HAL_RCC_OscConfig+0x474>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d0f0      	beq.n	80079f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d106      	bne.n	8007a2a <HAL_RCC_OscConfig+0x2ea>
 8007a1c:	4b64      	ldr	r3, [pc, #400]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a20:	4a63      	ldr	r2, [pc, #396]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007a22:	f043 0301 	orr.w	r3, r3, #1
 8007a26:	6713      	str	r3, [r2, #112]	; 0x70
 8007a28:	e01c      	b.n	8007a64 <HAL_RCC_OscConfig+0x324>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	2b05      	cmp	r3, #5
 8007a30:	d10c      	bne.n	8007a4c <HAL_RCC_OscConfig+0x30c>
 8007a32:	4b5f      	ldr	r3, [pc, #380]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a36:	4a5e      	ldr	r2, [pc, #376]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007a38:	f043 0304 	orr.w	r3, r3, #4
 8007a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a3e:	4b5c      	ldr	r3, [pc, #368]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a42:	4a5b      	ldr	r2, [pc, #364]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007a44:	f043 0301 	orr.w	r3, r3, #1
 8007a48:	6713      	str	r3, [r2, #112]	; 0x70
 8007a4a:	e00b      	b.n	8007a64 <HAL_RCC_OscConfig+0x324>
 8007a4c:	4b58      	ldr	r3, [pc, #352]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a50:	4a57      	ldr	r2, [pc, #348]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007a52:	f023 0301 	bic.w	r3, r3, #1
 8007a56:	6713      	str	r3, [r2, #112]	; 0x70
 8007a58:	4b55      	ldr	r3, [pc, #340]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5c:	4a54      	ldr	r2, [pc, #336]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007a5e:	f023 0304 	bic.w	r3, r3, #4
 8007a62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d015      	beq.n	8007a98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a6c:	f7fd fbcc 	bl	8005208 <HAL_GetTick>
 8007a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a72:	e00a      	b.n	8007a8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a74:	f7fd fbc8 	bl	8005208 <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d901      	bls.n	8007a8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e0cb      	b.n	8007c22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a8a:	4b49      	ldr	r3, [pc, #292]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d0ee      	beq.n	8007a74 <HAL_RCC_OscConfig+0x334>
 8007a96:	e014      	b.n	8007ac2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a98:	f7fd fbb6 	bl	8005208 <HAL_GetTick>
 8007a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a9e:	e00a      	b.n	8007ab6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007aa0:	f7fd fbb2 	bl	8005208 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e0b5      	b.n	8007c22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ab6:	4b3e      	ldr	r3, [pc, #248]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1ee      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ac2:	7dfb      	ldrb	r3, [r7, #23]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d105      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ac8:	4b39      	ldr	r3, [pc, #228]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007acc:	4a38      	ldr	r2, [pc, #224]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ad2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 80a1 	beq.w	8007c20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ade:	4b34      	ldr	r3, [pc, #208]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f003 030c 	and.w	r3, r3, #12
 8007ae6:	2b08      	cmp	r3, #8
 8007ae8:	d05c      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d141      	bne.n	8007b76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007af2:	4b31      	ldr	r3, [pc, #196]	; (8007bb8 <HAL_RCC_OscConfig+0x478>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007af8:	f7fd fb86 	bl	8005208 <HAL_GetTick>
 8007afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b00:	f7fd fb82 	bl	8005208 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e087      	b.n	8007c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b12:	4b27      	ldr	r3, [pc, #156]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f0      	bne.n	8007b00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	69da      	ldr	r2, [r3, #28]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	431a      	orrs	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2c:	019b      	lsls	r3, r3, #6
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b34:	085b      	lsrs	r3, r3, #1
 8007b36:	3b01      	subs	r3, #1
 8007b38:	041b      	lsls	r3, r3, #16
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b40:	061b      	lsls	r3, r3, #24
 8007b42:	491b      	ldr	r1, [pc, #108]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b48:	4b1b      	ldr	r3, [pc, #108]	; (8007bb8 <HAL_RCC_OscConfig+0x478>)
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b4e:	f7fd fb5b 	bl	8005208 <HAL_GetTick>
 8007b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b54:	e008      	b.n	8007b68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b56:	f7fd fb57 	bl	8005208 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d901      	bls.n	8007b68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e05c      	b.n	8007c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b68:	4b11      	ldr	r3, [pc, #68]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0f0      	beq.n	8007b56 <HAL_RCC_OscConfig+0x416>
 8007b74:	e054      	b.n	8007c20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b76:	4b10      	ldr	r3, [pc, #64]	; (8007bb8 <HAL_RCC_OscConfig+0x478>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b7c:	f7fd fb44 	bl	8005208 <HAL_GetTick>
 8007b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b82:	e008      	b.n	8007b96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b84:	f7fd fb40 	bl	8005208 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d901      	bls.n	8007b96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e045      	b.n	8007c22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b96:	4b06      	ldr	r3, [pc, #24]	; (8007bb0 <HAL_RCC_OscConfig+0x470>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1f0      	bne.n	8007b84 <HAL_RCC_OscConfig+0x444>
 8007ba2:	e03d      	b.n	8007c20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d107      	bne.n	8007bbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e038      	b.n	8007c22 <HAL_RCC_OscConfig+0x4e2>
 8007bb0:	40023800 	.word	0x40023800
 8007bb4:	40007000 	.word	0x40007000
 8007bb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007bbc:	4b1b      	ldr	r3, [pc, #108]	; (8007c2c <HAL_RCC_OscConfig+0x4ec>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d028      	beq.n	8007c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d121      	bne.n	8007c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d11a      	bne.n	8007c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007bec:	4013      	ands	r3, r2
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007bf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d111      	bne.n	8007c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c02:	085b      	lsrs	r3, r3, #1
 8007c04:	3b01      	subs	r3, #1
 8007c06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d107      	bne.n	8007c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d001      	beq.n	8007c20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e000      	b.n	8007c22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3718      	adds	r7, #24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	40023800 	.word	0x40023800

08007c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e0cc      	b.n	8007dde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c44:	4b68      	ldr	r3, [pc, #416]	; (8007de8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d90c      	bls.n	8007c6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c52:	4b65      	ldr	r3, [pc, #404]	; (8007de8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	b2d2      	uxtb	r2, r2
 8007c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c5a:	4b63      	ldr	r3, [pc, #396]	; (8007de8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0307 	and.w	r3, r3, #7
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d001      	beq.n	8007c6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e0b8      	b.n	8007dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d020      	beq.n	8007cba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c84:	4b59      	ldr	r3, [pc, #356]	; (8007dec <HAL_RCC_ClockConfig+0x1bc>)
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	4a58      	ldr	r2, [pc, #352]	; (8007dec <HAL_RCC_ClockConfig+0x1bc>)
 8007c8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0308 	and.w	r3, r3, #8
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d005      	beq.n	8007ca8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c9c:	4b53      	ldr	r3, [pc, #332]	; (8007dec <HAL_RCC_ClockConfig+0x1bc>)
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	4a52      	ldr	r2, [pc, #328]	; (8007dec <HAL_RCC_ClockConfig+0x1bc>)
 8007ca2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ca6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ca8:	4b50      	ldr	r3, [pc, #320]	; (8007dec <HAL_RCC_ClockConfig+0x1bc>)
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	494d      	ldr	r1, [pc, #308]	; (8007dec <HAL_RCC_ClockConfig+0x1bc>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d044      	beq.n	8007d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d107      	bne.n	8007cde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cce:	4b47      	ldr	r3, [pc, #284]	; (8007dec <HAL_RCC_ClockConfig+0x1bc>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d119      	bne.n	8007d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e07f      	b.n	8007dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d003      	beq.n	8007cee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d107      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cee:	4b3f      	ldr	r3, [pc, #252]	; (8007dec <HAL_RCC_ClockConfig+0x1bc>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d109      	bne.n	8007d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e06f      	b.n	8007dde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cfe:	4b3b      	ldr	r3, [pc, #236]	; (8007dec <HAL_RCC_ClockConfig+0x1bc>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 0302 	and.w	r3, r3, #2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e067      	b.n	8007dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d0e:	4b37      	ldr	r3, [pc, #220]	; (8007dec <HAL_RCC_ClockConfig+0x1bc>)
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f023 0203 	bic.w	r2, r3, #3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	4934      	ldr	r1, [pc, #208]	; (8007dec <HAL_RCC_ClockConfig+0x1bc>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d20:	f7fd fa72 	bl	8005208 <HAL_GetTick>
 8007d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d26:	e00a      	b.n	8007d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d28:	f7fd fa6e 	bl	8005208 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d901      	bls.n	8007d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e04f      	b.n	8007dde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d3e:	4b2b      	ldr	r3, [pc, #172]	; (8007dec <HAL_RCC_ClockConfig+0x1bc>)
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f003 020c 	and.w	r2, r3, #12
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d1eb      	bne.n	8007d28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d50:	4b25      	ldr	r3, [pc, #148]	; (8007de8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 0307 	and.w	r3, r3, #7
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d20c      	bcs.n	8007d78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d5e:	4b22      	ldr	r3, [pc, #136]	; (8007de8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	b2d2      	uxtb	r2, r2
 8007d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d66:	4b20      	ldr	r3, [pc, #128]	; (8007de8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0307 	and.w	r3, r3, #7
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d001      	beq.n	8007d78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e032      	b.n	8007dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d008      	beq.n	8007d96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d84:	4b19      	ldr	r3, [pc, #100]	; (8007dec <HAL_RCC_ClockConfig+0x1bc>)
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	4916      	ldr	r1, [pc, #88]	; (8007dec <HAL_RCC_ClockConfig+0x1bc>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0308 	and.w	r3, r3, #8
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d009      	beq.n	8007db6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007da2:	4b12      	ldr	r3, [pc, #72]	; (8007dec <HAL_RCC_ClockConfig+0x1bc>)
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	490e      	ldr	r1, [pc, #56]	; (8007dec <HAL_RCC_ClockConfig+0x1bc>)
 8007db2:	4313      	orrs	r3, r2
 8007db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007db6:	f000 f889 	bl	8007ecc <HAL_RCC_GetSysClockFreq>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	4b0b      	ldr	r3, [pc, #44]	; (8007dec <HAL_RCC_ClockConfig+0x1bc>)
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	091b      	lsrs	r3, r3, #4
 8007dc2:	f003 030f 	and.w	r3, r3, #15
 8007dc6:	490a      	ldr	r1, [pc, #40]	; (8007df0 <HAL_RCC_ClockConfig+0x1c0>)
 8007dc8:	5ccb      	ldrb	r3, [r1, r3]
 8007dca:	fa22 f303 	lsr.w	r3, r2, r3
 8007dce:	4a09      	ldr	r2, [pc, #36]	; (8007df4 <HAL_RCC_ClockConfig+0x1c4>)
 8007dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007dd2:	4b09      	ldr	r3, [pc, #36]	; (8007df8 <HAL_RCC_ClockConfig+0x1c8>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fb f9ac 	bl	8003134 <HAL_InitTick>

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	40023c00 	.word	0x40023c00
 8007dec:	40023800 	.word	0x40023800
 8007df0:	08016bac 	.word	0x08016bac
 8007df4:	20000044 	.word	0x20000044
 8007df8:	200000b0 	.word	0x200000b0

08007dfc <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08c      	sub	sp, #48	; 0x30
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d129      	bne.n	8007e62 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8007e0e:	2300      	movs	r3, #0
 8007e10:	61bb      	str	r3, [r7, #24]
 8007e12:	4b2b      	ldr	r3, [pc, #172]	; (8007ec0 <HAL_RCC_MCOConfig+0xc4>)
 8007e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e16:	4a2a      	ldr	r2, [pc, #168]	; (8007ec0 <HAL_RCC_MCOConfig+0xc4>)
 8007e18:	f043 0301 	orr.w	r3, r3, #1
 8007e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8007e1e:	4b28      	ldr	r3, [pc, #160]	; (8007ec0 <HAL_RCC_MCOConfig+0xc4>)
 8007e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	61bb      	str	r3, [r7, #24]
 8007e28:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e30:	2302      	movs	r3, #2
 8007e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e34:	2303      	movs	r3, #3
 8007e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007e40:	f107 031c 	add.w	r3, r7, #28
 8007e44:	4619      	mov	r1, r3
 8007e46:	481f      	ldr	r0, [pc, #124]	; (8007ec4 <HAL_RCC_MCOConfig+0xc8>)
 8007e48:	f7ff faac 	bl	80073a4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007e4c:	4b1c      	ldr	r3, [pc, #112]	; (8007ec0 <HAL_RCC_MCOConfig+0xc4>)
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8007e54:	68b9      	ldr	r1, [r7, #8]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	430b      	orrs	r3, r1
 8007e5a:	4919      	ldr	r1, [pc, #100]	; (8007ec0 <HAL_RCC_MCOConfig+0xc4>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8007e60:	e029      	b.n	8007eb6 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8007e62:	2300      	movs	r3, #0
 8007e64:	617b      	str	r3, [r7, #20]
 8007e66:	4b16      	ldr	r3, [pc, #88]	; (8007ec0 <HAL_RCC_MCOConfig+0xc4>)
 8007e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6a:	4a15      	ldr	r2, [pc, #84]	; (8007ec0 <HAL_RCC_MCOConfig+0xc4>)
 8007e6c:	f043 0304 	orr.w	r3, r3, #4
 8007e70:	6313      	str	r3, [r2, #48]	; 0x30
 8007e72:	4b13      	ldr	r3, [pc, #76]	; (8007ec0 <HAL_RCC_MCOConfig+0xc4>)
 8007e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e76:	f003 0304 	and.w	r3, r3, #4
 8007e7a:	617b      	str	r3, [r7, #20]
 8007e7c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e84:	2302      	movs	r3, #2
 8007e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007e90:	2300      	movs	r3, #0
 8007e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007e94:	f107 031c 	add.w	r3, r7, #28
 8007e98:	4619      	mov	r1, r3
 8007e9a:	480b      	ldr	r0, [pc, #44]	; (8007ec8 <HAL_RCC_MCOConfig+0xcc>)
 8007e9c:	f7ff fa82 	bl	80073a4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8007ea0:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <HAL_RCC_MCOConfig+0xc4>)
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	00d9      	lsls	r1, r3, #3
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	430b      	orrs	r3, r1
 8007eb0:	4903      	ldr	r1, [pc, #12]	; (8007ec0 <HAL_RCC_MCOConfig+0xc4>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	608b      	str	r3, [r1, #8]
}
 8007eb6:	bf00      	nop
 8007eb8:	3730      	adds	r7, #48	; 0x30
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	40023800 	.word	0x40023800
 8007ec4:	40020000 	.word	0x40020000
 8007ec8:	40020800 	.word	0x40020800

08007ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ed0:	b094      	sub	sp, #80	; 0x50
 8007ed2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ed8:	2300      	movs	r3, #0
 8007eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007edc:	2300      	movs	r3, #0
 8007ede:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ee4:	4b79      	ldr	r3, [pc, #484]	; (80080cc <HAL_RCC_GetSysClockFreq+0x200>)
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f003 030c 	and.w	r3, r3, #12
 8007eec:	2b08      	cmp	r3, #8
 8007eee:	d00d      	beq.n	8007f0c <HAL_RCC_GetSysClockFreq+0x40>
 8007ef0:	2b08      	cmp	r3, #8
 8007ef2:	f200 80e1 	bhi.w	80080b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <HAL_RCC_GetSysClockFreq+0x34>
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d003      	beq.n	8007f06 <HAL_RCC_GetSysClockFreq+0x3a>
 8007efe:	e0db      	b.n	80080b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f00:	4b73      	ldr	r3, [pc, #460]	; (80080d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007f04:	e0db      	b.n	80080be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f06:	4b73      	ldr	r3, [pc, #460]	; (80080d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007f08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f0a:	e0d8      	b.n	80080be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f0c:	4b6f      	ldr	r3, [pc, #444]	; (80080cc <HAL_RCC_GetSysClockFreq+0x200>)
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f16:	4b6d      	ldr	r3, [pc, #436]	; (80080cc <HAL_RCC_GetSysClockFreq+0x200>)
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d063      	beq.n	8007fea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f22:	4b6a      	ldr	r3, [pc, #424]	; (80080cc <HAL_RCC_GetSysClockFreq+0x200>)
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	099b      	lsrs	r3, r3, #6
 8007f28:	2200      	movs	r2, #0
 8007f2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f34:	633b      	str	r3, [r7, #48]	; 0x30
 8007f36:	2300      	movs	r3, #0
 8007f38:	637b      	str	r3, [r7, #52]	; 0x34
 8007f3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007f3e:	4622      	mov	r2, r4
 8007f40:	462b      	mov	r3, r5
 8007f42:	f04f 0000 	mov.w	r0, #0
 8007f46:	f04f 0100 	mov.w	r1, #0
 8007f4a:	0159      	lsls	r1, r3, #5
 8007f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f50:	0150      	lsls	r0, r2, #5
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	4621      	mov	r1, r4
 8007f58:	1a51      	subs	r1, r2, r1
 8007f5a:	6139      	str	r1, [r7, #16]
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	f04f 0200 	mov.w	r2, #0
 8007f68:	f04f 0300 	mov.w	r3, #0
 8007f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f70:	4659      	mov	r1, fp
 8007f72:	018b      	lsls	r3, r1, #6
 8007f74:	4651      	mov	r1, sl
 8007f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f7a:	4651      	mov	r1, sl
 8007f7c:	018a      	lsls	r2, r1, #6
 8007f7e:	4651      	mov	r1, sl
 8007f80:	ebb2 0801 	subs.w	r8, r2, r1
 8007f84:	4659      	mov	r1, fp
 8007f86:	eb63 0901 	sbc.w	r9, r3, r1
 8007f8a:	f04f 0200 	mov.w	r2, #0
 8007f8e:	f04f 0300 	mov.w	r3, #0
 8007f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f9e:	4690      	mov	r8, r2
 8007fa0:	4699      	mov	r9, r3
 8007fa2:	4623      	mov	r3, r4
 8007fa4:	eb18 0303 	adds.w	r3, r8, r3
 8007fa8:	60bb      	str	r3, [r7, #8]
 8007faa:	462b      	mov	r3, r5
 8007fac:	eb49 0303 	adc.w	r3, r9, r3
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	f04f 0200 	mov.w	r2, #0
 8007fb6:	f04f 0300 	mov.w	r3, #0
 8007fba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	024b      	lsls	r3, r1, #9
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007fc8:	4621      	mov	r1, r4
 8007fca:	024a      	lsls	r2, r1, #9
 8007fcc:	4610      	mov	r0, r2
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fdc:	f7f8 fe04 	bl	8000be8 <__aeabi_uldivmod>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fe8:	e058      	b.n	800809c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fea:	4b38      	ldr	r3, [pc, #224]	; (80080cc <HAL_RCC_GetSysClockFreq+0x200>)
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	099b      	lsrs	r3, r3, #6
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ffa:	623b      	str	r3, [r7, #32]
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8008000:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008004:	4642      	mov	r2, r8
 8008006:	464b      	mov	r3, r9
 8008008:	f04f 0000 	mov.w	r0, #0
 800800c:	f04f 0100 	mov.w	r1, #0
 8008010:	0159      	lsls	r1, r3, #5
 8008012:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008016:	0150      	lsls	r0, r2, #5
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	4641      	mov	r1, r8
 800801e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008022:	4649      	mov	r1, r9
 8008024:	eb63 0b01 	sbc.w	fp, r3, r1
 8008028:	f04f 0200 	mov.w	r2, #0
 800802c:	f04f 0300 	mov.w	r3, #0
 8008030:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008034:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008038:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800803c:	ebb2 040a 	subs.w	r4, r2, sl
 8008040:	eb63 050b 	sbc.w	r5, r3, fp
 8008044:	f04f 0200 	mov.w	r2, #0
 8008048:	f04f 0300 	mov.w	r3, #0
 800804c:	00eb      	lsls	r3, r5, #3
 800804e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008052:	00e2      	lsls	r2, r4, #3
 8008054:	4614      	mov	r4, r2
 8008056:	461d      	mov	r5, r3
 8008058:	4643      	mov	r3, r8
 800805a:	18e3      	adds	r3, r4, r3
 800805c:	603b      	str	r3, [r7, #0]
 800805e:	464b      	mov	r3, r9
 8008060:	eb45 0303 	adc.w	r3, r5, r3
 8008064:	607b      	str	r3, [r7, #4]
 8008066:	f04f 0200 	mov.w	r2, #0
 800806a:	f04f 0300 	mov.w	r3, #0
 800806e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008072:	4629      	mov	r1, r5
 8008074:	028b      	lsls	r3, r1, #10
 8008076:	4621      	mov	r1, r4
 8008078:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800807c:	4621      	mov	r1, r4
 800807e:	028a      	lsls	r2, r1, #10
 8008080:	4610      	mov	r0, r2
 8008082:	4619      	mov	r1, r3
 8008084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008086:	2200      	movs	r2, #0
 8008088:	61bb      	str	r3, [r7, #24]
 800808a:	61fa      	str	r2, [r7, #28]
 800808c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008090:	f7f8 fdaa 	bl	8000be8 <__aeabi_uldivmod>
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	4613      	mov	r3, r2
 800809a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800809c:	4b0b      	ldr	r3, [pc, #44]	; (80080cc <HAL_RCC_GetSysClockFreq+0x200>)
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	0c1b      	lsrs	r3, r3, #16
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	3301      	adds	r3, #1
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80080ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80080b6:	e002      	b.n	80080be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080b8:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80080ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80080bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3750      	adds	r7, #80	; 0x50
 80080c4:	46bd      	mov	sp, r7
 80080c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080ca:	bf00      	nop
 80080cc:	40023800 	.word	0x40023800
 80080d0:	00f42400 	.word	0x00f42400
 80080d4:	007a1200 	.word	0x007a1200

080080d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080d8:	b480      	push	{r7}
 80080da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080dc:	4b03      	ldr	r3, [pc, #12]	; (80080ec <HAL_RCC_GetHCLKFreq+0x14>)
 80080de:	681b      	ldr	r3, [r3, #0]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	20000044 	.word	0x20000044

080080f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80080f4:	f7ff fff0 	bl	80080d8 <HAL_RCC_GetHCLKFreq>
 80080f8:	4602      	mov	r2, r0
 80080fa:	4b05      	ldr	r3, [pc, #20]	; (8008110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	0a9b      	lsrs	r3, r3, #10
 8008100:	f003 0307 	and.w	r3, r3, #7
 8008104:	4903      	ldr	r1, [pc, #12]	; (8008114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008106:	5ccb      	ldrb	r3, [r1, r3]
 8008108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800810c:	4618      	mov	r0, r3
 800810e:	bd80      	pop	{r7, pc}
 8008110:	40023800 	.word	0x40023800
 8008114:	08016bbc 	.word	0x08016bbc

08008118 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	220f      	movs	r2, #15
 8008126:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008128:	4b12      	ldr	r3, [pc, #72]	; (8008174 <HAL_RCC_GetClockConfig+0x5c>)
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f003 0203 	and.w	r2, r3, #3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008134:	4b0f      	ldr	r3, [pc, #60]	; (8008174 <HAL_RCC_GetClockConfig+0x5c>)
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008140:	4b0c      	ldr	r3, [pc, #48]	; (8008174 <HAL_RCC_GetClockConfig+0x5c>)
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800814c:	4b09      	ldr	r3, [pc, #36]	; (8008174 <HAL_RCC_GetClockConfig+0x5c>)
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	08db      	lsrs	r3, r3, #3
 8008152:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800815a:	4b07      	ldr	r3, [pc, #28]	; (8008178 <HAL_RCC_GetClockConfig+0x60>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0207 	and.w	r2, r3, #7
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	601a      	str	r2, [r3, #0]
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	40023800 	.word	0x40023800
 8008178:	40023c00 	.word	0x40023c00

0800817c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d101      	bne.n	800818e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e022      	b.n	80081d4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	d105      	bne.n	80081a6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7fa fe23 	bl	8002dec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2203      	movs	r2, #3
 80081aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f814 	bl	80081dc <HAL_SD_InitCard>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e00a      	b.n	80081d4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80081dc:	b5b0      	push	{r4, r5, r7, lr}
 80081de:	b08e      	sub	sp, #56	; 0x38
 80081e0:	af04      	add	r7, sp, #16
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80081e4:	2300      	movs	r3, #0
 80081e6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80081e8:	2300      	movs	r3, #0
 80081ea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80081ec:	2300      	movs	r3, #0
 80081ee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80081f0:	2300      	movs	r3, #0
 80081f2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80081f4:	2300      	movs	r3, #0
 80081f6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80081f8:	2376      	movs	r3, #118	; 0x76
 80081fa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681d      	ldr	r5, [r3, #0]
 8008200:	466c      	mov	r4, sp
 8008202:	f107 0314 	add.w	r3, r7, #20
 8008206:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800820a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800820e:	f107 0308 	add.w	r3, r7, #8
 8008212:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008214:	4628      	mov	r0, r5
 8008216:	f002 fd79 	bl	800ad0c <SDIO_Init>
 800821a:	4603      	mov	r3, r0
 800821c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e04f      	b.n	80082cc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800822c:	4b29      	ldr	r3, [pc, #164]	; (80082d4 <HAL_SD_InitCard+0xf8>)
 800822e:	2200      	movs	r2, #0
 8008230:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4618      	mov	r0, r3
 8008238:	f002 fdb1 	bl	800ad9e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800823c:	4b25      	ldr	r3, [pc, #148]	; (80082d4 <HAL_SD_InitCard+0xf8>)
 800823e:	2201      	movs	r2, #1
 8008240:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008242:	2002      	movs	r0, #2
 8008244:	f7fc ffec 	bl	8005220 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f001 f805 	bl	8009258 <SD_PowerON>
 800824e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008250:	6a3b      	ldr	r3, [r7, #32]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00b      	beq.n	800826e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	431a      	orrs	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e02e      	b.n	80082cc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 ff24 	bl	80090bc <SD_InitCard>
 8008274:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00b      	beq.n	8008294 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	431a      	orrs	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e01b      	b.n	80082cc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f44f 7100 	mov.w	r1, #512	; 0x200
 800829c:	4618      	mov	r0, r3
 800829e:	f002 fe10 	bl	800aec2 <SDMMC_CmdBlockLength>
 80082a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00f      	beq.n	80082ca <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a0a      	ldr	r2, [pc, #40]	; (80082d8 <HAL_SD_InitCard+0xfc>)
 80082b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	431a      	orrs	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e000      	b.n	80082cc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3728      	adds	r7, #40	; 0x28
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bdb0      	pop	{r4, r5, r7, pc}
 80082d4:	422580a0 	.word	0x422580a0
 80082d8:	004005ff 	.word	0x004005ff

080082dc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b08c      	sub	sp, #48	; 0x30
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
 80082e8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d107      	bne.n	8008304 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e0c0      	b.n	8008486 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b01      	cmp	r3, #1
 800830e:	f040 80b9 	bne.w	8008484 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	441a      	add	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008322:	429a      	cmp	r2, r3
 8008324:	d907      	bls.n	8008336 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e0a7      	b.n	8008486 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2203      	movs	r2, #3
 800833a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2200      	movs	r2, #0
 8008344:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	6812      	ldr	r2, [r2, #0]
 8008350:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8008354:	f043 0302 	orr.w	r3, r3, #2
 8008358:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835e:	4a4c      	ldr	r2, [pc, #304]	; (8008490 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8008360:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008366:	4a4b      	ldr	r2, [pc, #300]	; (8008494 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008368:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836e:	2200      	movs	r2, #0
 8008370:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008376:	2200      	movs	r2, #0
 8008378:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3380      	adds	r3, #128	; 0x80
 80083a0:	4619      	mov	r1, r3
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	025b      	lsls	r3, r3, #9
 80083a8:	089b      	lsrs	r3, r3, #2
 80083aa:	f7fd fb2f 	bl	8005a0c <HAL_DMA_Start_IT>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d017      	beq.n	80083e4 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80083c2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a33      	ldr	r2, [pc, #204]	; (8008498 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80083ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e050      	b.n	8008486 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80083e4:	4b2d      	ldr	r3, [pc, #180]	; (800849c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80083e6:	2201      	movs	r2, #1
 80083e8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d002      	beq.n	80083f8 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80083f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f4:	025b      	lsls	r3, r3, #9
 80083f6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80083f8:	f04f 33ff 	mov.w	r3, #4294967295
 80083fc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	025b      	lsls	r3, r3, #9
 8008402:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008404:	2390      	movs	r3, #144	; 0x90
 8008406:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008408:	2302      	movs	r3, #2
 800840a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800840c:	2300      	movs	r3, #0
 800840e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008410:	2301      	movs	r3, #1
 8008412:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f107 0210 	add.w	r2, r7, #16
 800841c:	4611      	mov	r1, r2
 800841e:	4618      	mov	r0, r3
 8008420:	f002 fd23 	bl	800ae6a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d90a      	bls.n	8008440 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2282      	movs	r2, #130	; 0x82
 800842e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008436:	4618      	mov	r0, r3
 8008438:	f002 fd87 	bl	800af4a <SDMMC_CmdReadMultiBlock>
 800843c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800843e:	e009      	b.n	8008454 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2281      	movs	r2, #129	; 0x81
 8008444:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800844c:	4618      	mov	r0, r3
 800844e:	f002 fd5a 	bl	800af06 <SDMMC_CmdReadSingleBlock>
 8008452:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d012      	beq.n	8008480 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a0e      	ldr	r2, [pc, #56]	; (8008498 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008460:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008468:	431a      	orrs	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e002      	b.n	8008486 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	e000      	b.n	8008486 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8008484:	2302      	movs	r3, #2
  }
}
 8008486:	4618      	mov	r0, r3
 8008488:	3730      	adds	r7, #48	; 0x30
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	08008ecb 	.word	0x08008ecb
 8008494:	08008f3d 	.word	0x08008f3d
 8008498:	004005ff 	.word	0x004005ff
 800849c:	4225858c 	.word	0x4225858c

080084a0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08c      	sub	sp, #48	; 0x30
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
 80084ac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d107      	bne.n	80084c8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e0c5      	b.n	8008654 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	f040 80be 	bne.w	8008652 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80084dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	441a      	add	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d907      	bls.n	80084fa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e0ac      	b.n	8008654 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2203      	movs	r2, #3
 80084fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2200      	movs	r2, #0
 8008508:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	6812      	ldr	r2, [r2, #0]
 8008514:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8008518:	f043 0302 	orr.w	r3, r3, #2
 800851c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008522:	4a4e      	ldr	r2, [pc, #312]	; (800865c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8008524:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800852a:	4a4d      	ldr	r2, [pc, #308]	; (8008660 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800852c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008532:	2200      	movs	r2, #0
 8008534:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800853a:	2b01      	cmp	r3, #1
 800853c:	d002      	beq.n	8008544 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800853e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008540:	025b      	lsls	r3, r3, #9
 8008542:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d90a      	bls.n	8008560 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	22a0      	movs	r2, #160	; 0xa0
 800854e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008556:	4618      	mov	r0, r3
 8008558:	f002 fd3b 	bl	800afd2 <SDMMC_CmdWriteMultiBlock>
 800855c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800855e:	e009      	b.n	8008574 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2290      	movs	r2, #144	; 0x90
 8008564:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800856c:	4618      	mov	r0, r3
 800856e:	f002 fd0e 	bl	800af8e <SDMMC_CmdWriteSingleBlock>
 8008572:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008576:	2b00      	cmp	r3, #0
 8008578:	d012      	beq.n	80085a0 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a39      	ldr	r2, [pc, #228]	; (8008664 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008580:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008588:	431a      	orrs	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e059      	b.n	8008654 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80085a0:	4b31      	ldr	r3, [pc, #196]	; (8008668 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80085a2:	2201      	movs	r2, #1
 80085a4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085aa:	2240      	movs	r2, #64	; 0x40
 80085ac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085be:	689a      	ldr	r2, [r3, #8]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	430a      	orrs	r2, r1
 80085c8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80085ce:	68b9      	ldr	r1, [r7, #8]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	3380      	adds	r3, #128	; 0x80
 80085d6:	461a      	mov	r2, r3
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	025b      	lsls	r3, r3, #9
 80085dc:	089b      	lsrs	r3, r3, #2
 80085de:	f7fd fa15 	bl	8005a0c <HAL_DMA_Start_IT>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d01c      	beq.n	8008622 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	6812      	ldr	r2, [r2, #0]
 80085f2:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80085f6:	f023 0302 	bic.w	r3, r3, #2
 80085fa:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a18      	ldr	r2, [pc, #96]	; (8008664 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008602:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008608:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e018      	b.n	8008654 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008622:	f04f 33ff 	mov.w	r3, #4294967295
 8008626:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	025b      	lsls	r3, r3, #9
 800862c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800862e:	2390      	movs	r3, #144	; 0x90
 8008630:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008632:	2300      	movs	r3, #0
 8008634:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008636:	2300      	movs	r3, #0
 8008638:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800863a:	2301      	movs	r3, #1
 800863c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f107 0210 	add.w	r2, r7, #16
 8008646:	4611      	mov	r1, r2
 8008648:	4618      	mov	r0, r3
 800864a:	f002 fc0e 	bl	800ae6a <SDIO_ConfigData>

      return HAL_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	e000      	b.n	8008654 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8008652:	2302      	movs	r3, #2
  }
}
 8008654:	4618      	mov	r0, r3
 8008656:	3730      	adds	r7, #48	; 0x30
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	08008ea1 	.word	0x08008ea1
 8008660:	08008f3d 	.word	0x08008f3d
 8008664:	004005ff 	.word	0x004005ff
 8008668:	4225858c 	.word	0x4225858c

0800866c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008678:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d008      	beq.n	800869a <HAL_SD_IRQHandler+0x2e>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f003 0308 	and.w	r3, r3, #8
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 ffff 	bl	8009696 <SD_Read_IT>
 8008698:	e165      	b.n	8008966 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 808f 	beq.w	80087c8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086b2:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	6812      	ldr	r2, [r2, #0]
 80086be:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80086c2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80086c6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f022 0201 	bic.w	r2, r2, #1
 80086d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f003 0308 	and.w	r3, r3, #8
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d039      	beq.n	8008756 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f003 0302 	and.w	r3, r3, #2
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d104      	bne.n	80086f6 <HAL_SD_IRQHandler+0x8a>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f003 0320 	and.w	r3, r3, #32
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d011      	beq.n	800871a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f002 fc8c 	bl	800b018 <SDMMC_CmdStopTransfer>
 8008700:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d008      	beq.n	800871a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	431a      	orrs	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f92f 	bl	8008978 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008722:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	2b00      	cmp	r3, #0
 800873a:	d104      	bne.n	8008746 <HAL_SD_IRQHandler+0xda>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f003 f8ec 	bl	800b924 <HAL_SD_RxCpltCallback>
 800874c:	e10b      	b.n	8008966 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f003 f8de 	bl	800b910 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008754:	e107      	b.n	8008966 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800875c:	2b00      	cmp	r3, #0
 800875e:	f000 8102 	beq.w	8008966 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f003 0320 	and.w	r3, r3, #32
 8008768:	2b00      	cmp	r3, #0
 800876a:	d011      	beq.n	8008790 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4618      	mov	r0, r3
 8008772:	f002 fc51 	bl	800b018 <SDMMC_CmdStopTransfer>
 8008776:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d008      	beq.n	8008790 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	431a      	orrs	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f8f4 	bl	8008978 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b00      	cmp	r3, #0
 8008798:	f040 80e5 	bne.w	8008966 <HAL_SD_IRQHandler+0x2fa>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f003 0302 	and.w	r3, r3, #2
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f040 80df 	bne.w	8008966 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f022 0208 	bic.w	r2, r2, #8
 80087b6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f003 f8a5 	bl	800b910 <HAL_SD_TxCpltCallback>
}
 80087c6:	e0ce      	b.n	8008966 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d008      	beq.n	80087e8 <HAL_SD_IRQHandler+0x17c>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f003 0308 	and.w	r3, r3, #8
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d003      	beq.n	80087e8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 ffa9 	bl	8009738 <SD_Write_IT>
 80087e6:	e0be      	b.n	8008966 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087ee:	f240 233a 	movw	r3, #570	; 0x23a
 80087f2:	4013      	ands	r3, r2
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 80b6 	beq.w	8008966 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008800:	f003 0302 	and.w	r3, r3, #2
 8008804:	2b00      	cmp	r3, #0
 8008806:	d005      	beq.n	8008814 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880c:	f043 0202 	orr.w	r2, r3, #2
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881a:	f003 0308 	and.w	r3, r3, #8
 800881e:	2b00      	cmp	r3, #0
 8008820:	d005      	beq.n	800882e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008826:	f043 0208 	orr.w	r2, r3, #8
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008834:	f003 0320 	and.w	r3, r3, #32
 8008838:	2b00      	cmp	r3, #0
 800883a:	d005      	beq.n	8008848 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008840:	f043 0220 	orr.w	r2, r3, #32
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884e:	f003 0310 	and.w	r3, r3, #16
 8008852:	2b00      	cmp	r3, #0
 8008854:	d005      	beq.n	8008862 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885a:	f043 0210 	orr.w	r2, r3, #16
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800886c:	2b00      	cmp	r3, #0
 800886e:	d005      	beq.n	800887c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008874:	f043 0208 	orr.w	r2, r3, #8
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f240 723a 	movw	r2, #1850	; 0x73a
 8008884:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	6812      	ldr	r2, [r2, #0]
 8008890:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8008894:	f023 0302 	bic.w	r3, r3, #2
 8008898:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4618      	mov	r0, r3
 80088a0:	f002 fbba 	bl	800b018 <SDMMC_CmdStopTransfer>
 80088a4:	4602      	mov	r2, r0
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088aa:	431a      	orrs	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f003 0308 	and.w	r3, r3, #8
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00a      	beq.n	80088d0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f855 	bl	8008978 <HAL_SD_ErrorCallback>
}
 80088ce:	e04a      	b.n	8008966 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d045      	beq.n	8008966 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f003 0310 	and.w	r3, r3, #16
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d104      	bne.n	80088ee <HAL_SD_IRQHandler+0x282>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f003 0320 	and.w	r3, r3, #32
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d011      	beq.n	8008912 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f2:	4a1f      	ldr	r2, [pc, #124]	; (8008970 <HAL_SD_IRQHandler+0x304>)
 80088f4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fd f8de 	bl	8005abc <HAL_DMA_Abort_IT>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d02f      	beq.n	8008966 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800890a:	4618      	mov	r0, r3
 800890c:	f000 fb68 	bl	8008fe0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008910:	e029      	b.n	8008966 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	2b00      	cmp	r3, #0
 800891a:	d104      	bne.n	8008926 <HAL_SD_IRQHandler+0x2ba>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f003 0302 	and.w	r3, r3, #2
 8008922:	2b00      	cmp	r3, #0
 8008924:	d011      	beq.n	800894a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	4a12      	ldr	r2, [pc, #72]	; (8008974 <HAL_SD_IRQHandler+0x308>)
 800892c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008932:	4618      	mov	r0, r3
 8008934:	f7fd f8c2 	bl	8005abc <HAL_DMA_Abort_IT>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d013      	beq.n	8008966 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008942:	4618      	mov	r0, r3
 8008944:	f000 fb83 	bl	800904e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008948:	e00d      	b.n	8008966 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f002 ffcc 	bl	800b8fc <HAL_SD_AbortCallback>
}
 8008964:	e7ff      	b.n	8008966 <HAL_SD_IRQHandler+0x2fa>
 8008966:	bf00      	nop
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	08008fe1 	.word	0x08008fe1
 8008974:	0800904f 	.word	0x0800904f

08008978 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800899a:	0f9b      	lsrs	r3, r3, #30
 800899c:	b2da      	uxtb	r2, r3
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089a6:	0e9b      	lsrs	r3, r3, #26
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	f003 030f 	and.w	r3, r3, #15
 80089ae:	b2da      	uxtb	r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089b8:	0e1b      	lsrs	r3, r3, #24
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	f003 0303 	and.w	r3, r3, #3
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089ca:	0c1b      	lsrs	r3, r3, #16
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089d6:	0a1b      	lsrs	r3, r3, #8
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089ec:	0d1b      	lsrs	r3, r3, #20
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089f8:	0c1b      	lsrs	r3, r3, #16
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	f003 030f 	and.w	r3, r3, #15
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a0a:	0bdb      	lsrs	r3, r3, #15
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a1c:	0b9b      	lsrs	r3, r3, #14
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a2e:	0b5b      	lsrs	r3, r3, #13
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a40:	0b1b      	lsrs	r3, r3, #12
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	2200      	movs	r2, #0
 8008a52:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d163      	bne.n	8008b24 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a60:	009a      	lsls	r2, r3, #2
 8008a62:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008a66:	4013      	ands	r3, r2
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008a6c:	0f92      	lsrs	r2, r2, #30
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a78:	0edb      	lsrs	r3, r3, #27
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	f003 0307 	and.w	r3, r3, #7
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a8a:	0e1b      	lsrs	r3, r3, #24
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a9c:	0d5b      	lsrs	r3, r3, #21
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	f003 0307 	and.w	r3, r3, #7
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aae:	0c9b      	lsrs	r3, r3, #18
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	f003 0307 	and.w	r3, r3, #7
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ac0:	0bdb      	lsrs	r3, r3, #15
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	f003 0307 	and.w	r3, r3, #7
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	1c5a      	adds	r2, r3, #1
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	7e1b      	ldrb	r3, [r3, #24]
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	f003 0307 	and.w	r3, r3, #7
 8008ae2:	3302      	adds	r3, #2
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008aee:	fb03 f202 	mul.w	r2, r3, r2
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	7a1b      	ldrb	r3, [r3, #8]
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	f003 030f 	and.w	r3, r3, #15
 8008b00:	2201      	movs	r2, #1
 8008b02:	409a      	lsls	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008b10:	0a52      	lsrs	r2, r2, #9
 8008b12:	fb03 f202 	mul.w	r2, r3, r2
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b20:	661a      	str	r2, [r3, #96]	; 0x60
 8008b22:	e031      	b.n	8008b88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d11d      	bne.n	8008b68 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b30:	041b      	lsls	r3, r3, #16
 8008b32:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b3a:	0c1b      	lsrs	r3, r3, #16
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	3301      	adds	r3, #1
 8008b48:	029a      	lsls	r2, r3, #10
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b5c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	661a      	str	r2, [r3, #96]	; 0x60
 8008b66:	e00f      	b.n	8008b88 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a58      	ldr	r2, [pc, #352]	; (8008cd0 <HAL_SD_GetCardCSD+0x344>)
 8008b6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e09d      	b.n	8008cc4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b8c:	0b9b      	lsrs	r3, r3, #14
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	f003 0301 	and.w	r3, r3, #1
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b9e:	09db      	lsrs	r3, r3, #7
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc0:	0fdb      	lsrs	r3, r3, #31
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bcc:	0f5b      	lsrs	r3, r3, #29
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	f003 0303 	and.w	r3, r3, #3
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bde:	0e9b      	lsrs	r3, r3, #26
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	f003 0307 	and.w	r3, r3, #7
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf0:	0d9b      	lsrs	r3, r3, #22
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	f003 030f 	and.w	r3, r3, #15
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c02:	0d5b      	lsrs	r3, r3, #21
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c1e:	0c1b      	lsrs	r3, r3, #16
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c32:	0bdb      	lsrs	r3, r3, #15
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c46:	0b9b      	lsrs	r3, r3, #14
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	f003 0301 	and.w	r3, r3, #1
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5a:	0b5b      	lsrs	r3, r3, #13
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6e:	0b1b      	lsrs	r3, r3, #12
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c82:	0a9b      	lsrs	r3, r3, #10
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	f003 0303 	and.w	r3, r3, #3
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c96:	0a1b      	lsrs	r3, r3, #8
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	f003 0303 	and.w	r3, r3, #3
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008caa:	085b      	lsrs	r3, r3, #1
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	004005ff 	.word	0x004005ff

08008cd4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008d2c:	b5b0      	push	{r4, r5, r7, lr}
 8008d2e:	b08e      	sub	sp, #56	; 0x38
 8008d30:	af04      	add	r7, sp, #16
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2203      	movs	r2, #3
 8008d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d48:	2b03      	cmp	r3, #3
 8008d4a:	d02e      	beq.n	8008daa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d52:	d106      	bne.n	8008d62 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	639a      	str	r2, [r3, #56]	; 0x38
 8008d60:	e029      	b.n	8008db6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d68:	d10a      	bne.n	8008d80 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fb2a 	bl	80093c4 <SD_WideBus_Enable>
 8008d70:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	639a      	str	r2, [r3, #56]	; 0x38
 8008d7e:	e01a      	b.n	8008db6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10a      	bne.n	8008d9c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fb67 	bl	800945a <SD_WideBus_Disable>
 8008d8c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d92:	6a3b      	ldr	r3, [r7, #32]
 8008d94:	431a      	orrs	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	639a      	str	r2, [r3, #56]	; 0x38
 8008d9a:	e00c      	b.n	8008db6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	639a      	str	r2, [r3, #56]	; 0x38
 8008da8:	e005      	b.n	8008db6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00b      	beq.n	8008dd6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a26      	ldr	r2, [pc, #152]	; (8008e5c <HAL_SD_ConfigWideBusOperation+0x130>)
 8008dc4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008dd4:	e01f      	b.n	8008e16 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681d      	ldr	r5, [r3, #0]
 8008dfc:	466c      	mov	r4, sp
 8008dfe:	f107 0314 	add.w	r3, r7, #20
 8008e02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e0a:	f107 0308 	add.w	r3, r7, #8
 8008e0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e10:	4628      	mov	r0, r5
 8008e12:	f001 ff7b 	bl	800ad0c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f002 f84f 	bl	800aec2 <SDMMC_CmdBlockLength>
 8008e24:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00c      	beq.n	8008e46 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a0a      	ldr	r2, [pc, #40]	; (8008e5c <HAL_SD_ConfigWideBusOperation+0x130>)
 8008e32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	431a      	orrs	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3728      	adds	r7, #40	; 0x28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bdb0      	pop	{r4, r5, r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	004005ff 	.word	0x004005ff

08008e60 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008e6c:	f107 030c 	add.w	r3, r7, #12
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fa7e 	bl	8009374 <SD_SendStatus>
 8008e78:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d005      	beq.n	8008e8c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	431a      	orrs	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	0a5b      	lsrs	r3, r3, #9
 8008e90:	f003 030f 	and.w	r3, r3, #15
 8008e94:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008e96:	693b      	ldr	r3, [r7, #16]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3718      	adds	r7, #24
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eac:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ebc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008ebe:	bf00      	nop
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008edc:	2b82      	cmp	r3, #130	; 0x82
 8008ede:	d111      	bne.n	8008f04 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f002 f897 	bl	800b018 <SDMMC_CmdStopTransfer>
 8008eea:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d008      	beq.n	8008f04 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	431a      	orrs	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f7ff fd3a 	bl	8008978 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f022 0208 	bic.w	r2, r2, #8
 8008f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f1c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f002 fcf9 	bl	800b924 <HAL_SD_RxCpltCallback>
#endif
}
 8008f32:	bf00      	nop
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
	...

08008f3c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f48:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7fc ffb6 	bl	8005ebc <HAL_DMA_GetError>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d03e      	beq.n	8008fd4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f5c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f64:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d002      	beq.n	8008f72 <SD_DMAError+0x36>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d12d      	bne.n	8008fce <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a19      	ldr	r2, [pc, #100]	; (8008fdc <SD_DMAError+0xa0>)
 8008f78:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008f88:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008f96:	6978      	ldr	r0, [r7, #20]
 8008f98:	f7ff ff62 	bl	8008e60 <HAL_SD_GetCardState>
 8008f9c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2b06      	cmp	r3, #6
 8008fa2:	d002      	beq.n	8008faa <SD_DMAError+0x6e>
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	2b05      	cmp	r3, #5
 8008fa8:	d10a      	bne.n	8008fc0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f002 f832 	bl	800b018 <SDMMC_CmdStopTransfer>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008fce:	6978      	ldr	r0, [r7, #20]
 8008fd0:	f7ff fcd2 	bl	8008978 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008fd4:	bf00      	nop
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	004005ff 	.word	0x004005ff

08008fe0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fec:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ff6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f7ff ff31 	bl	8008e60 <HAL_SD_GetCardState>
 8008ffe:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2b06      	cmp	r3, #6
 8009012:	d002      	beq.n	800901a <SD_DMATxAbort+0x3a>
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2b05      	cmp	r3, #5
 8009018:	d10a      	bne.n	8009030 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4618      	mov	r0, r3
 8009020:	f001 fffa 	bl	800b018 <SDMMC_CmdStopTransfer>
 8009024:	4602      	mov	r2, r0
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902a:	431a      	orrs	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009034:	2b00      	cmp	r3, #0
 8009036:	d103      	bne.n	8009040 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f002 fc5f 	bl	800b8fc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800903e:	e002      	b.n	8009046 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f7ff fc99 	bl	8008978 <HAL_SD_ErrorCallback>
}
 8009046:	bf00      	nop
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b084      	sub	sp, #16
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f240 523a 	movw	r2, #1338	; 0x53a
 8009064:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f7ff fefa 	bl	8008e60 <HAL_SD_GetCardState>
 800906c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2b06      	cmp	r3, #6
 8009080:	d002      	beq.n	8009088 <SD_DMARxAbort+0x3a>
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	2b05      	cmp	r3, #5
 8009086:	d10a      	bne.n	800909e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4618      	mov	r0, r3
 800908e:	f001 ffc3 	bl	800b018 <SDMMC_CmdStopTransfer>
 8009092:	4602      	mov	r2, r0
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009098:	431a      	orrs	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d103      	bne.n	80090ae <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f002 fc28 	bl	800b8fc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80090ac:	e002      	b.n	80090b4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f7ff fc62 	bl	8008978 <HAL_SD_ErrorCallback>
}
 80090b4:	bf00      	nop
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80090bc:	b5b0      	push	{r4, r5, r7, lr}
 80090be:	b094      	sub	sp, #80	; 0x50
 80090c0:	af04      	add	r7, sp, #16
 80090c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80090c4:	2301      	movs	r3, #1
 80090c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f001 fe74 	bl	800adba <SDIO_GetPowerState>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d102      	bne.n	80090de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80090d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80090dc:	e0b8      	b.n	8009250 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d02f      	beq.n	8009146 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f002 f89e 	bl	800b22c <SDMMC_CmdSendCID>
 80090f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80090f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <SD_InitCard+0x40>
    {
      return errorstate;
 80090f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090fa:	e0a9      	b.n	8009250 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2100      	movs	r1, #0
 8009102:	4618      	mov	r0, r3
 8009104:	f001 fe9e 	bl	800ae44 <SDIO_GetResponse>
 8009108:	4602      	mov	r2, r0
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2104      	movs	r1, #4
 8009114:	4618      	mov	r0, r3
 8009116:	f001 fe95 	bl	800ae44 <SDIO_GetResponse>
 800911a:	4602      	mov	r2, r0
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2108      	movs	r1, #8
 8009126:	4618      	mov	r0, r3
 8009128:	f001 fe8c 	bl	800ae44 <SDIO_GetResponse>
 800912c:	4602      	mov	r2, r0
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	210c      	movs	r1, #12
 8009138:	4618      	mov	r0, r3
 800913a:	f001 fe83 	bl	800ae44 <SDIO_GetResponse>
 800913e:	4602      	mov	r2, r0
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800914a:	2b03      	cmp	r3, #3
 800914c:	d00d      	beq.n	800916a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f107 020e 	add.w	r2, r7, #14
 8009156:	4611      	mov	r1, r2
 8009158:	4618      	mov	r0, r3
 800915a:	f002 f8a4 	bl	800b2a6 <SDMMC_CmdSetRelAdd>
 800915e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <SD_InitCard+0xae>
    {
      return errorstate;
 8009166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009168:	e072      	b.n	8009250 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800916e:	2b03      	cmp	r3, #3
 8009170:	d036      	beq.n	80091e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009172:	89fb      	ldrh	r3, [r7, #14]
 8009174:	461a      	mov	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009182:	041b      	lsls	r3, r3, #16
 8009184:	4619      	mov	r1, r3
 8009186:	4610      	mov	r0, r2
 8009188:	f002 f86e 	bl	800b268 <SDMMC_CmdSendCSD>
 800918c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800918e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009196:	e05b      	b.n	8009250 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2100      	movs	r1, #0
 800919e:	4618      	mov	r0, r3
 80091a0:	f001 fe50 	bl	800ae44 <SDIO_GetResponse>
 80091a4:	4602      	mov	r2, r0
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2104      	movs	r1, #4
 80091b0:	4618      	mov	r0, r3
 80091b2:	f001 fe47 	bl	800ae44 <SDIO_GetResponse>
 80091b6:	4602      	mov	r2, r0
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2108      	movs	r1, #8
 80091c2:	4618      	mov	r0, r3
 80091c4:	f001 fe3e 	bl	800ae44 <SDIO_GetResponse>
 80091c8:	4602      	mov	r2, r0
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	210c      	movs	r1, #12
 80091d4:	4618      	mov	r0, r3
 80091d6:	f001 fe35 	bl	800ae44 <SDIO_GetResponse>
 80091da:	4602      	mov	r2, r0
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2104      	movs	r1, #4
 80091e6:	4618      	mov	r0, r3
 80091e8:	f001 fe2c 	bl	800ae44 <SDIO_GetResponse>
 80091ec:	4603      	mov	r3, r0
 80091ee:	0d1a      	lsrs	r2, r3, #20
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80091f4:	f107 0310 	add.w	r3, r7, #16
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7ff fbc6 	bl	800898c <HAL_SD_GetCardCSD>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d002      	beq.n	800920c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009206:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800920a:	e021      	b.n	8009250 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6819      	ldr	r1, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009214:	041b      	lsls	r3, r3, #16
 8009216:	2200      	movs	r2, #0
 8009218:	461c      	mov	r4, r3
 800921a:	4615      	mov	r5, r2
 800921c:	4622      	mov	r2, r4
 800921e:	462b      	mov	r3, r5
 8009220:	4608      	mov	r0, r1
 8009222:	f001 ff1b 	bl	800b05c <SDMMC_CmdSelDesel>
 8009226:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800922a:	2b00      	cmp	r3, #0
 800922c:	d001      	beq.n	8009232 <SD_InitCard+0x176>
  {
    return errorstate;
 800922e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009230:	e00e      	b.n	8009250 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681d      	ldr	r5, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	466c      	mov	r4, sp
 800923a:	f103 0210 	add.w	r2, r3, #16
 800923e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009240:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009244:	3304      	adds	r3, #4
 8009246:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009248:	4628      	mov	r0, r5
 800924a:	f001 fd5f 	bl	800ad0c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3740      	adds	r7, #64	; 0x40
 8009254:	46bd      	mov	sp, r7
 8009256:	bdb0      	pop	{r4, r5, r7, pc}

08009258 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009260:	2300      	movs	r3, #0
 8009262:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009264:	2300      	movs	r3, #0
 8009266:	617b      	str	r3, [r7, #20]
 8009268:	2300      	movs	r3, #0
 800926a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4618      	mov	r0, r3
 8009272:	f001 ff16 	bl	800b0a2 <SDMMC_CmdGoIdleState>
 8009276:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d001      	beq.n	8009282 <SD_PowerON+0x2a>
  {
    return errorstate;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	e072      	b.n	8009368 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4618      	mov	r0, r3
 8009288:	f001 ff29 	bl	800b0de <SDMMC_CmdOperCond>
 800928c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00d      	beq.n	80092b0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4618      	mov	r0, r3
 80092a0:	f001 feff 	bl	800b0a2 <SDMMC_CmdGoIdleState>
 80092a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d004      	beq.n	80092b6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	e05b      	b.n	8009368 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d137      	bne.n	800932e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2100      	movs	r1, #0
 80092c4:	4618      	mov	r0, r3
 80092c6:	f001 ff29 	bl	800b11c <SDMMC_CmdAppCommand>
 80092ca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d02d      	beq.n	800932e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80092d6:	e047      	b.n	8009368 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2100      	movs	r1, #0
 80092de:	4618      	mov	r0, r3
 80092e0:	f001 ff1c 	bl	800b11c <SDMMC_CmdAppCommand>
 80092e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <SD_PowerON+0x98>
    {
      return errorstate;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	e03b      	b.n	8009368 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	491e      	ldr	r1, [pc, #120]	; (8009370 <SD_PowerON+0x118>)
 80092f6:	4618      	mov	r0, r3
 80092f8:	f001 ff32 	bl	800b160 <SDMMC_CmdAppOperCommand>
 80092fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009304:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009308:	e02e      	b.n	8009368 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2100      	movs	r1, #0
 8009310:	4618      	mov	r0, r3
 8009312:	f001 fd97 	bl	800ae44 <SDIO_GetResponse>
 8009316:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	0fdb      	lsrs	r3, r3, #31
 800931c:	2b01      	cmp	r3, #1
 800931e:	d101      	bne.n	8009324 <SD_PowerON+0xcc>
 8009320:	2301      	movs	r3, #1
 8009322:	e000      	b.n	8009326 <SD_PowerON+0xce>
 8009324:	2300      	movs	r3, #0
 8009326:	613b      	str	r3, [r7, #16]

    count++;
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	3301      	adds	r3, #1
 800932c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009334:	4293      	cmp	r3, r2
 8009336:	d802      	bhi.n	800933e <SD_PowerON+0xe6>
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d0cc      	beq.n	80092d8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009344:	4293      	cmp	r3, r2
 8009346:	d902      	bls.n	800934e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800934c:	e00c      	b.n	8009368 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009354:	2b00      	cmp	r3, #0
 8009356:	d003      	beq.n	8009360 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	645a      	str	r2, [r3, #68]	; 0x44
 800935e:	e002      	b.n	8009366 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3718      	adds	r7, #24
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	c1100000 	.word	0xc1100000

08009374 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d102      	bne.n	800938a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009384:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009388:	e018      	b.n	80093bc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009392:	041b      	lsls	r3, r3, #16
 8009394:	4619      	mov	r1, r3
 8009396:	4610      	mov	r0, r2
 8009398:	f001 ffa6 	bl	800b2e8 <SDMMC_CmdSendStatus>
 800939c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d001      	beq.n	80093a8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	e009      	b.n	80093bc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2100      	movs	r1, #0
 80093ae:	4618      	mov	r0, r3
 80093b0:	f001 fd48 	bl	800ae44 <SDIO_GetResponse>
 80093b4:	4602      	mov	r2, r0
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b086      	sub	sp, #24
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80093cc:	2300      	movs	r3, #0
 80093ce:	60fb      	str	r3, [r7, #12]
 80093d0:	2300      	movs	r3, #0
 80093d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2100      	movs	r1, #0
 80093da:	4618      	mov	r0, r3
 80093dc:	f001 fd32 	bl	800ae44 <SDIO_GetResponse>
 80093e0:	4603      	mov	r3, r0
 80093e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093ea:	d102      	bne.n	80093f2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80093ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093f0:	e02f      	b.n	8009452 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80093f2:	f107 030c 	add.w	r3, r7, #12
 80093f6:	4619      	mov	r1, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f879 	bl	80094f0 <SD_FindSCR>
 80093fe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	e023      	b.n	8009452 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d01c      	beq.n	800944e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800941c:	041b      	lsls	r3, r3, #16
 800941e:	4619      	mov	r1, r3
 8009420:	4610      	mov	r0, r2
 8009422:	f001 fe7b 	bl	800b11c <SDMMC_CmdAppCommand>
 8009426:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	e00f      	b.n	8009452 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2102      	movs	r1, #2
 8009438:	4618      	mov	r0, r3
 800943a:	f001 feb4 	bl	800b1a6 <SDMMC_CmdBusWidth>
 800943e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	e003      	b.n	8009452 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800944a:	2300      	movs	r3, #0
 800944c:	e001      	b.n	8009452 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800944e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009452:	4618      	mov	r0, r3
 8009454:	3718      	adds	r7, #24
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b086      	sub	sp, #24
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009462:	2300      	movs	r3, #0
 8009464:	60fb      	str	r3, [r7, #12]
 8009466:	2300      	movs	r3, #0
 8009468:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2100      	movs	r1, #0
 8009470:	4618      	mov	r0, r3
 8009472:	f001 fce7 	bl	800ae44 <SDIO_GetResponse>
 8009476:	4603      	mov	r3, r0
 8009478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800947c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009480:	d102      	bne.n	8009488 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009482:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009486:	e02f      	b.n	80094e8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009488:	f107 030c 	add.w	r3, r7, #12
 800948c:	4619      	mov	r1, r3
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f82e 	bl	80094f0 <SD_FindSCR>
 8009494:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	e023      	b.n	80094e8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d01c      	beq.n	80094e4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094b2:	041b      	lsls	r3, r3, #16
 80094b4:	4619      	mov	r1, r3
 80094b6:	4610      	mov	r0, r2
 80094b8:	f001 fe30 	bl	800b11c <SDMMC_CmdAppCommand>
 80094bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d001      	beq.n	80094c8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	e00f      	b.n	80094e8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2100      	movs	r1, #0
 80094ce:	4618      	mov	r0, r3
 80094d0:	f001 fe69 	bl	800b1a6 <SDMMC_CmdBusWidth>
 80094d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d001      	beq.n	80094e0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	e003      	b.n	80094e8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80094e0:	2300      	movs	r3, #0
 80094e2:	e001      	b.n	80094e8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80094e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3718      	adds	r7, #24
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80094f0:	b590      	push	{r4, r7, lr}
 80094f2:	b08f      	sub	sp, #60	; 0x3c
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80094fa:	f7fb fe85 	bl	8005208 <HAL_GetTick>
 80094fe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009500:	2300      	movs	r3, #0
 8009502:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009504:	2300      	movs	r3, #0
 8009506:	60bb      	str	r3, [r7, #8]
 8009508:	2300      	movs	r3, #0
 800950a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2108      	movs	r1, #8
 8009516:	4618      	mov	r0, r3
 8009518:	f001 fcd3 	bl	800aec2 <SDMMC_CmdBlockLength>
 800951c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800951e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009526:	e0b2      	b.n	800968e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009530:	041b      	lsls	r3, r3, #16
 8009532:	4619      	mov	r1, r3
 8009534:	4610      	mov	r0, r2
 8009536:	f001 fdf1 	bl	800b11c <SDMMC_CmdAppCommand>
 800953a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009544:	e0a3      	b.n	800968e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009546:	f04f 33ff 	mov.w	r3, #4294967295
 800954a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800954c:	2308      	movs	r3, #8
 800954e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009550:	2330      	movs	r3, #48	; 0x30
 8009552:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009554:	2302      	movs	r3, #2
 8009556:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009558:	2300      	movs	r3, #0
 800955a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800955c:	2301      	movs	r3, #1
 800955e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f107 0210 	add.w	r2, r7, #16
 8009568:	4611      	mov	r1, r2
 800956a:	4618      	mov	r0, r3
 800956c:	f001 fc7d 	bl	800ae6a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4618      	mov	r0, r3
 8009576:	f001 fe38 	bl	800b1ea <SDMMC_CmdSendSCR>
 800957a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	2b00      	cmp	r3, #0
 8009580:	d02a      	beq.n	80095d8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009584:	e083      	b.n	800968e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800958c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00f      	beq.n	80095b4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6819      	ldr	r1, [r3, #0]
 8009598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	f107 0208 	add.w	r2, r7, #8
 80095a0:	18d4      	adds	r4, r2, r3
 80095a2:	4608      	mov	r0, r1
 80095a4:	f001 fbdd 	bl	800ad62 <SDIO_ReadFIFO>
 80095a8:	4603      	mov	r3, r0
 80095aa:	6023      	str	r3, [r4, #0]
      index++;
 80095ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ae:	3301      	adds	r3, #1
 80095b0:	637b      	str	r3, [r7, #52]	; 0x34
 80095b2:	e006      	b.n	80095c2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d012      	beq.n	80095e8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80095c2:	f7fb fe21 	bl	8005208 <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d0:	d102      	bne.n	80095d8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80095d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095d6:	e05a      	b.n	800968e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095de:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d0cf      	beq.n	8009586 <SD_FindSCR+0x96>
 80095e6:	e000      	b.n	80095ea <SD_FindSCR+0xfa>
      break;
 80095e8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f0:	f003 0308 	and.w	r3, r3, #8
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d005      	beq.n	8009604 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2208      	movs	r2, #8
 80095fe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009600:	2308      	movs	r3, #8
 8009602:	e044      	b.n	800968e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800960a:	f003 0302 	and.w	r3, r3, #2
 800960e:	2b00      	cmp	r3, #0
 8009610:	d005      	beq.n	800961e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2202      	movs	r2, #2
 8009618:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800961a:	2302      	movs	r3, #2
 800961c:	e037      	b.n	800968e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009624:	f003 0320 	and.w	r3, r3, #32
 8009628:	2b00      	cmp	r3, #0
 800962a:	d005      	beq.n	8009638 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2220      	movs	r2, #32
 8009632:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009634:	2320      	movs	r3, #32
 8009636:	e02a      	b.n	800968e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009640:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	061a      	lsls	r2, r3, #24
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	021b      	lsls	r3, r3, #8
 800964a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800964e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	0a1b      	lsrs	r3, r3, #8
 8009654:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009658:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	0e1b      	lsrs	r3, r3, #24
 800965e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009662:	601a      	str	r2, [r3, #0]
    scr++;
 8009664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009666:	3304      	adds	r3, #4
 8009668:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	061a      	lsls	r2, r3, #24
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	021b      	lsls	r3, r3, #8
 8009672:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009676:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	0a1b      	lsrs	r3, r3, #8
 800967c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009680:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	0e1b      	lsrs	r3, r3, #24
 8009686:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	373c      	adds	r7, #60	; 0x3c
 8009692:	46bd      	mov	sp, r7
 8009694:	bd90      	pop	{r4, r7, pc}

08009696 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b086      	sub	sp, #24
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d03f      	beq.n	8009730 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80096b0:	2300      	movs	r3, #0
 80096b2:	617b      	str	r3, [r7, #20]
 80096b4:	e033      	b.n	800971e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f001 fb51 	bl	800ad62 <SDIO_ReadFIFO>
 80096c0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	3301      	adds	r3, #1
 80096ce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	0a1b      	lsrs	r3, r3, #8
 80096da:	b2da      	uxtb	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	3301      	adds	r3, #1
 80096e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	0c1b      	lsrs	r3, r3, #16
 80096f0:	b2da      	uxtb	r2, r3
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	3301      	adds	r3, #1
 80096fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	3b01      	subs	r3, #1
 8009700:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	0e1b      	lsrs	r3, r3, #24
 8009706:	b2da      	uxtb	r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	3301      	adds	r3, #1
 8009710:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	3b01      	subs	r3, #1
 8009716:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	3301      	adds	r3, #1
 800971c:	617b      	str	r3, [r7, #20]
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	2b07      	cmp	r3, #7
 8009722:	d9c8      	bls.n	80096b6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009730:	bf00      	nop
 8009732:	3718      	adds	r7, #24
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a1b      	ldr	r3, [r3, #32]
 8009744:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d043      	beq.n	80097da <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009752:	2300      	movs	r3, #0
 8009754:	617b      	str	r3, [r7, #20]
 8009756:	e037      	b.n	80097c8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3301      	adds	r3, #1
 8009762:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	3b01      	subs	r3, #1
 8009768:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	021a      	lsls	r2, r3, #8
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	4313      	orrs	r3, r2
 8009774:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	3301      	adds	r3, #1
 800977a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	3b01      	subs	r3, #1
 8009780:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	041a      	lsls	r2, r3, #16
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	4313      	orrs	r3, r2
 800978c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	3301      	adds	r3, #1
 8009792:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	3b01      	subs	r3, #1
 8009798:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	061a      	lsls	r2, r3, #24
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	3301      	adds	r3, #1
 80097aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f107 0208 	add.w	r2, r7, #8
 80097ba:	4611      	mov	r1, r2
 80097bc:	4618      	mov	r0, r3
 80097be:	f001 fadd 	bl	800ad7c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	3301      	adds	r3, #1
 80097c6:	617b      	str	r3, [r7, #20]
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	2b07      	cmp	r3, #7
 80097cc:	d9c4      	bls.n	8009758 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	693a      	ldr	r2, [r7, #16]
 80097d8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80097da:	bf00      	nop
 80097dc:	3718      	adds	r7, #24
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b082      	sub	sp, #8
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d101      	bne.n	80097f4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e07b      	b.n	80098ec <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d108      	bne.n	800980e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009804:	d009      	beq.n	800981a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	61da      	str	r2, [r3, #28]
 800980c:	e005      	b.n	800981a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009826:	b2db      	uxtb	r3, r3
 8009828:	2b00      	cmp	r3, #0
 800982a:	d106      	bne.n	800983a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f7f9 fc01 	bl	800303c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2202      	movs	r2, #2
 800983e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009850:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009862:	431a      	orrs	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800986c:	431a      	orrs	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	f003 0302 	and.w	r3, r3, #2
 8009876:	431a      	orrs	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	f003 0301 	and.w	r3, r3, #1
 8009880:	431a      	orrs	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800988a:	431a      	orrs	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	69db      	ldr	r3, [r3, #28]
 8009890:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009894:	431a      	orrs	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800989e:	ea42 0103 	orr.w	r1, r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	430a      	orrs	r2, r1
 80098b0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	0c1b      	lsrs	r3, r3, #16
 80098b8:	f003 0104 	and.w	r1, r3, #4
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c0:	f003 0210 	and.w	r2, r3, #16
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	430a      	orrs	r2, r1
 80098ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	69da      	ldr	r2, [r3, #28]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b088      	sub	sp, #32
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	603b      	str	r3, [r7, #0]
 8009900:	4613      	mov	r3, r2
 8009902:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800990e:	2b01      	cmp	r3, #1
 8009910:	d101      	bne.n	8009916 <HAL_SPI_Transmit+0x22>
 8009912:	2302      	movs	r3, #2
 8009914:	e126      	b.n	8009b64 <HAL_SPI_Transmit+0x270>
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800991e:	f7fb fc73 	bl	8005208 <HAL_GetTick>
 8009922:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009924:	88fb      	ldrh	r3, [r7, #6]
 8009926:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800992e:	b2db      	uxtb	r3, r3
 8009930:	2b01      	cmp	r3, #1
 8009932:	d002      	beq.n	800993a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009934:	2302      	movs	r3, #2
 8009936:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009938:	e10b      	b.n	8009b52 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d002      	beq.n	8009946 <HAL_SPI_Transmit+0x52>
 8009940:	88fb      	ldrh	r3, [r7, #6]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d102      	bne.n	800994c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	77fb      	strb	r3, [r7, #31]
    goto error;
 800994a:	e102      	b.n	8009b52 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2203      	movs	r2, #3
 8009950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	88fa      	ldrh	r2, [r7, #6]
 8009964:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	88fa      	ldrh	r2, [r7, #6]
 800996a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2200      	movs	r2, #0
 8009976:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009992:	d10f      	bne.n	80099b4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80099b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099be:	2b40      	cmp	r3, #64	; 0x40
 80099c0:	d007      	beq.n	80099d2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099da:	d14b      	bne.n	8009a74 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <HAL_SPI_Transmit+0xf6>
 80099e4:	8afb      	ldrh	r3, [r7, #22]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d13e      	bne.n	8009a68 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ee:	881a      	ldrh	r2, [r3, #0]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fa:	1c9a      	adds	r2, r3, #2
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	3b01      	subs	r3, #1
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009a0e:	e02b      	b.n	8009a68 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f003 0302 	and.w	r3, r3, #2
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d112      	bne.n	8009a44 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a22:	881a      	ldrh	r2, [r3, #0]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a2e:	1c9a      	adds	r2, r3, #2
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	86da      	strh	r2, [r3, #54]	; 0x36
 8009a42:	e011      	b.n	8009a68 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a44:	f7fb fbe0 	bl	8005208 <HAL_GetTick>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	683a      	ldr	r2, [r7, #0]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d803      	bhi.n	8009a5c <HAL_SPI_Transmit+0x168>
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5a:	d102      	bne.n	8009a62 <HAL_SPI_Transmit+0x16e>
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d102      	bne.n	8009a68 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009a62:	2303      	movs	r3, #3
 8009a64:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009a66:	e074      	b.n	8009b52 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d1ce      	bne.n	8009a10 <HAL_SPI_Transmit+0x11c>
 8009a72:	e04c      	b.n	8009b0e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d002      	beq.n	8009a82 <HAL_SPI_Transmit+0x18e>
 8009a7c:	8afb      	ldrh	r3, [r7, #22]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d140      	bne.n	8009b04 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	330c      	adds	r3, #12
 8009a8c:	7812      	ldrb	r2, [r2, #0]
 8009a8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a94:	1c5a      	adds	r2, r3, #1
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009aa8:	e02c      	b.n	8009b04 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	f003 0302 	and.w	r3, r3, #2
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d113      	bne.n	8009ae0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	330c      	adds	r3, #12
 8009ac2:	7812      	ldrb	r2, [r2, #0]
 8009ac4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aca:	1c5a      	adds	r2, r3, #1
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	86da      	strh	r2, [r3, #54]	; 0x36
 8009ade:	e011      	b.n	8009b04 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ae0:	f7fb fb92 	bl	8005208 <HAL_GetTick>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	683a      	ldr	r2, [r7, #0]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d803      	bhi.n	8009af8 <HAL_SPI_Transmit+0x204>
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af6:	d102      	bne.n	8009afe <HAL_SPI_Transmit+0x20a>
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d102      	bne.n	8009b04 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009afe:	2303      	movs	r3, #3
 8009b00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009b02:	e026      	b.n	8009b52 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1cd      	bne.n	8009aaa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b0e:	69ba      	ldr	r2, [r7, #24]
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 fcea 	bl	800a4ec <SPI_EndRxTxTransaction>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d002      	beq.n	8009b24 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2220      	movs	r2, #32
 8009b22:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10a      	bne.n	8009b42 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	613b      	str	r3, [r7, #16]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	613b      	str	r3, [r7, #16]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	613b      	str	r3, [r7, #16]
 8009b40:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d002      	beq.n	8009b50 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	77fb      	strb	r3, [r7, #31]
 8009b4e:	e000      	b.n	8009b52 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009b50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009b62:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3720      	adds	r7, #32
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b088      	sub	sp, #32
 8009b70:	af02      	add	r7, sp, #8
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	603b      	str	r3, [r7, #0]
 8009b78:	4613      	mov	r3, r2
 8009b7a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b88:	d112      	bne.n	8009bb0 <HAL_SPI_Receive+0x44>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10e      	bne.n	8009bb0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2204      	movs	r2, #4
 8009b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009b9a:	88fa      	ldrh	r2, [r7, #6]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	68b9      	ldr	r1, [r7, #8]
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f000 f8f1 	bl	8009d8e <HAL_SPI_TransmitReceive>
 8009bac:	4603      	mov	r3, r0
 8009bae:	e0ea      	b.n	8009d86 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d101      	bne.n	8009bbe <HAL_SPI_Receive+0x52>
 8009bba:	2302      	movs	r3, #2
 8009bbc:	e0e3      	b.n	8009d86 <HAL_SPI_Receive+0x21a>
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009bc6:	f7fb fb1f 	bl	8005208 <HAL_GetTick>
 8009bca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d002      	beq.n	8009bde <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009bd8:	2302      	movs	r3, #2
 8009bda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009bdc:	e0ca      	b.n	8009d74 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d002      	beq.n	8009bea <HAL_SPI_Receive+0x7e>
 8009be4:	88fb      	ldrh	r3, [r7, #6]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d102      	bne.n	8009bf0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009bee:	e0c1      	b.n	8009d74 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2204      	movs	r2, #4
 8009bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	88fa      	ldrh	r2, [r7, #6]
 8009c08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	88fa      	ldrh	r2, [r7, #6]
 8009c0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c36:	d10f      	bne.n	8009c58 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009c56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c62:	2b40      	cmp	r3, #64	; 0x40
 8009c64:	d007      	beq.n	8009c76 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d162      	bne.n	8009d44 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009c7e:	e02e      	b.n	8009cde <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	f003 0301 	and.w	r3, r3, #1
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d115      	bne.n	8009cba <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f103 020c 	add.w	r2, r3, #12
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9a:	7812      	ldrb	r2, [r2, #0]
 8009c9c:	b2d2      	uxtb	r2, r2
 8009c9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca4:	1c5a      	adds	r2, r3, #1
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009cb8:	e011      	b.n	8009cde <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cba:	f7fb faa5 	bl	8005208 <HAL_GetTick>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d803      	bhi.n	8009cd2 <HAL_SPI_Receive+0x166>
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd0:	d102      	bne.n	8009cd8 <HAL_SPI_Receive+0x16c>
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d102      	bne.n	8009cde <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009cdc:	e04a      	b.n	8009d74 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1cb      	bne.n	8009c80 <HAL_SPI_Receive+0x114>
 8009ce8:	e031      	b.n	8009d4e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	f003 0301 	and.w	r3, r3, #1
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d113      	bne.n	8009d20 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68da      	ldr	r2, [r3, #12]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d02:	b292      	uxth	r2, r2
 8009d04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d0a:	1c9a      	adds	r2, r3, #2
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	3b01      	subs	r3, #1
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009d1e:	e011      	b.n	8009d44 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d20:	f7fb fa72 	bl	8005208 <HAL_GetTick>
 8009d24:	4602      	mov	r2, r0
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d803      	bhi.n	8009d38 <HAL_SPI_Receive+0x1cc>
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d36:	d102      	bne.n	8009d3e <HAL_SPI_Receive+0x1d2>
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d102      	bne.n	8009d44 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009d42:	e017      	b.n	8009d74 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1cd      	bne.n	8009cea <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d4e:	693a      	ldr	r2, [r7, #16]
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f000 fb64 	bl	800a420 <SPI_EndRxTransaction>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d002      	beq.n	8009d64 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2220      	movs	r2, #32
 8009d62:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d002      	beq.n	8009d72 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	75fb      	strb	r3, [r7, #23]
 8009d70:	e000      	b.n	8009d74 <HAL_SPI_Receive+0x208>
  }

error :
 8009d72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3718      	adds	r7, #24
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b08c      	sub	sp, #48	; 0x30
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	60f8      	str	r0, [r7, #12]
 8009d96:	60b9      	str	r1, [r7, #8]
 8009d98:	607a      	str	r2, [r7, #4]
 8009d9a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009da0:	2300      	movs	r3, #0
 8009da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d101      	bne.n	8009db4 <HAL_SPI_TransmitReceive+0x26>
 8009db0:	2302      	movs	r3, #2
 8009db2:	e18a      	b.n	800a0ca <HAL_SPI_TransmitReceive+0x33c>
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009dbc:	f7fb fa24 	bl	8005208 <HAL_GetTick>
 8009dc0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009dd2:	887b      	ldrh	r3, [r7, #2]
 8009dd4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009dd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d00f      	beq.n	8009dfe <HAL_SPI_TransmitReceive+0x70>
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009de4:	d107      	bne.n	8009df6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d103      	bne.n	8009df6 <HAL_SPI_TransmitReceive+0x68>
 8009dee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009df2:	2b04      	cmp	r3, #4
 8009df4:	d003      	beq.n	8009dfe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009df6:	2302      	movs	r3, #2
 8009df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009dfc:	e15b      	b.n	800a0b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d005      	beq.n	8009e10 <HAL_SPI_TransmitReceive+0x82>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d002      	beq.n	8009e10 <HAL_SPI_TransmitReceive+0x82>
 8009e0a:	887b      	ldrh	r3, [r7, #2]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d103      	bne.n	8009e18 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009e16:	e14e      	b.n	800a0b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	d003      	beq.n	8009e2c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2205      	movs	r2, #5
 8009e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	887a      	ldrh	r2, [r7, #2]
 8009e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	887a      	ldrh	r2, [r7, #2]
 8009e42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	887a      	ldrh	r2, [r7, #2]
 8009e4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	887a      	ldrh	r2, [r7, #2]
 8009e54:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e6c:	2b40      	cmp	r3, #64	; 0x40
 8009e6e:	d007      	beq.n	8009e80 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e88:	d178      	bne.n	8009f7c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d002      	beq.n	8009e98 <HAL_SPI_TransmitReceive+0x10a>
 8009e92:	8b7b      	ldrh	r3, [r7, #26]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d166      	bne.n	8009f66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9c:	881a      	ldrh	r2, [r3, #0]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea8:	1c9a      	adds	r2, r3, #2
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ebc:	e053      	b.n	8009f66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	f003 0302 	and.w	r3, r3, #2
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d11b      	bne.n	8009f04 <HAL_SPI_TransmitReceive+0x176>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d016      	beq.n	8009f04 <HAL_SPI_TransmitReceive+0x176>
 8009ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d113      	bne.n	8009f04 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee0:	881a      	ldrh	r2, [r3, #0]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eec:	1c9a      	adds	r2, r3, #2
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009f00:	2300      	movs	r3, #0
 8009f02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	f003 0301 	and.w	r3, r3, #1
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d119      	bne.n	8009f46 <HAL_SPI_TransmitReceive+0x1b8>
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d014      	beq.n	8009f46 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68da      	ldr	r2, [r3, #12]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f26:	b292      	uxth	r2, r2
 8009f28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2e:	1c9a      	adds	r2, r3, #2
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f42:	2301      	movs	r3, #1
 8009f44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009f46:	f7fb f95f 	bl	8005208 <HAL_GetTick>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4e:	1ad3      	subs	r3, r2, r3
 8009f50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d807      	bhi.n	8009f66 <HAL_SPI_TransmitReceive+0x1d8>
 8009f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f5c:	d003      	beq.n	8009f66 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009f64:	e0a7      	b.n	800a0b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1a6      	bne.n	8009ebe <HAL_SPI_TransmitReceive+0x130>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1a1      	bne.n	8009ebe <HAL_SPI_TransmitReceive+0x130>
 8009f7a:	e07c      	b.n	800a076 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <HAL_SPI_TransmitReceive+0x1fc>
 8009f84:	8b7b      	ldrh	r3, [r7, #26]
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d16b      	bne.n	800a062 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	330c      	adds	r3, #12
 8009f94:	7812      	ldrb	r2, [r2, #0]
 8009f96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9c:	1c5a      	adds	r2, r3, #1
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fb0:	e057      	b.n	800a062 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	f003 0302 	and.w	r3, r3, #2
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d11c      	bne.n	8009ffa <HAL_SPI_TransmitReceive+0x26c>
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d017      	beq.n	8009ffa <HAL_SPI_TransmitReceive+0x26c>
 8009fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d114      	bne.n	8009ffa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	330c      	adds	r3, #12
 8009fda:	7812      	ldrb	r2, [r2, #0]
 8009fdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe2:	1c5a      	adds	r2, r3, #1
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	f003 0301 	and.w	r3, r3, #1
 800a004:	2b01      	cmp	r3, #1
 800a006:	d119      	bne.n	800a03c <HAL_SPI_TransmitReceive+0x2ae>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d014      	beq.n	800a03c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68da      	ldr	r2, [r3, #12]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a01c:	b2d2      	uxtb	r2, r2
 800a01e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a024:	1c5a      	adds	r2, r3, #1
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a02e:	b29b      	uxth	r3, r3
 800a030:	3b01      	subs	r3, #1
 800a032:	b29a      	uxth	r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a038:	2301      	movs	r3, #1
 800a03a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a03c:	f7fb f8e4 	bl	8005208 <HAL_GetTick>
 800a040:	4602      	mov	r2, r0
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a048:	429a      	cmp	r2, r3
 800a04a:	d803      	bhi.n	800a054 <HAL_SPI_TransmitReceive+0x2c6>
 800a04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a052:	d102      	bne.n	800a05a <HAL_SPI_TransmitReceive+0x2cc>
 800a054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a056:	2b00      	cmp	r3, #0
 800a058:	d103      	bne.n	800a062 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a060:	e029      	b.n	800a0b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a066:	b29b      	uxth	r3, r3
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d1a2      	bne.n	8009fb2 <HAL_SPI_TransmitReceive+0x224>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a070:	b29b      	uxth	r3, r3
 800a072:	2b00      	cmp	r3, #0
 800a074:	d19d      	bne.n	8009fb2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a078:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f000 fa36 	bl	800a4ec <SPI_EndRxTxTransaction>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d006      	beq.n	800a094 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2220      	movs	r2, #32
 800a090:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a092:	e010      	b.n	800a0b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10b      	bne.n	800a0b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a09c:	2300      	movs	r3, #0
 800a09e:	617b      	str	r3, [r7, #20]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	617b      	str	r3, [r7, #20]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	617b      	str	r3, [r7, #20]
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	e000      	b.n	800a0b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a0b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a0c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3730      	adds	r7, #48	; 0x30
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
	...

0800a0d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b088      	sub	sp, #32
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	099b      	lsrs	r3, r3, #6
 800a0f0:	f003 0301 	and.w	r3, r3, #1
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10f      	bne.n	800a118 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00a      	beq.n	800a118 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	099b      	lsrs	r3, r3, #6
 800a106:	f003 0301 	and.w	r3, r3, #1
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d004      	beq.n	800a118 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	4798      	blx	r3
    return;
 800a116:	e0d7      	b.n	800a2c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	085b      	lsrs	r3, r3, #1
 800a11c:	f003 0301 	and.w	r3, r3, #1
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00a      	beq.n	800a13a <HAL_SPI_IRQHandler+0x66>
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	09db      	lsrs	r3, r3, #7
 800a128:	f003 0301 	and.w	r3, r3, #1
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d004      	beq.n	800a13a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	4798      	blx	r3
    return;
 800a138:	e0c6      	b.n	800a2c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	095b      	lsrs	r3, r3, #5
 800a13e:	f003 0301 	and.w	r3, r3, #1
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10c      	bne.n	800a160 <HAL_SPI_IRQHandler+0x8c>
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	099b      	lsrs	r3, r3, #6
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d106      	bne.n	800a160 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	0a1b      	lsrs	r3, r3, #8
 800a156:	f003 0301 	and.w	r3, r3, #1
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f000 80b4 	beq.w	800a2c8 <HAL_SPI_IRQHandler+0x1f4>
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	095b      	lsrs	r3, r3, #5
 800a164:	f003 0301 	and.w	r3, r3, #1
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 80ad 	beq.w	800a2c8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	099b      	lsrs	r3, r3, #6
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b00      	cmp	r3, #0
 800a178:	d023      	beq.n	800a1c2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a180:	b2db      	uxtb	r3, r3
 800a182:	2b03      	cmp	r3, #3
 800a184:	d011      	beq.n	800a1aa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a18a:	f043 0204 	orr.w	r2, r3, #4
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a192:	2300      	movs	r3, #0
 800a194:	617b      	str	r3, [r7, #20]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	617b      	str	r3, [r7, #20]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	617b      	str	r3, [r7, #20]
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	e00b      	b.n	800a1c2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	613b      	str	r3, [r7, #16]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	613b      	str	r3, [r7, #16]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	613b      	str	r3, [r7, #16]
 800a1be:	693b      	ldr	r3, [r7, #16]
        return;
 800a1c0:	e082      	b.n	800a2c8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	095b      	lsrs	r3, r3, #5
 800a1c6:	f003 0301 	and.w	r3, r3, #1
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d014      	beq.n	800a1f8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1d2:	f043 0201 	orr.w	r2, r3, #1
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60fb      	str	r3, [r7, #12]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	60fb      	str	r3, [r7, #12]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	0a1b      	lsrs	r3, r3, #8
 800a1fc:	f003 0301 	and.w	r3, r3, #1
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00c      	beq.n	800a21e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a208:	f043 0208 	orr.w	r2, r3, #8
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a210:	2300      	movs	r3, #0
 800a212:	60bb      	str	r3, [r7, #8]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	60bb      	str	r3, [r7, #8]
 800a21c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a222:	2b00      	cmp	r3, #0
 800a224:	d04f      	beq.n	800a2c6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a234:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2201      	movs	r2, #1
 800a23a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	f003 0302 	and.w	r3, r3, #2
 800a244:	2b00      	cmp	r3, #0
 800a246:	d104      	bne.n	800a252 <HAL_SPI_IRQHandler+0x17e>
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	f003 0301 	and.w	r3, r3, #1
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d034      	beq.n	800a2bc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f022 0203 	bic.w	r2, r2, #3
 800a260:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a266:	2b00      	cmp	r3, #0
 800a268:	d011      	beq.n	800a28e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a26e:	4a18      	ldr	r2, [pc, #96]	; (800a2d0 <HAL_SPI_IRQHandler+0x1fc>)
 800a270:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a276:	4618      	mov	r0, r3
 800a278:	f7fb fc20 	bl	8005abc <HAL_DMA_Abort_IT>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d005      	beq.n	800a28e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a286:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a292:	2b00      	cmp	r3, #0
 800a294:	d016      	beq.n	800a2c4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a29a:	4a0d      	ldr	r2, [pc, #52]	; (800a2d0 <HAL_SPI_IRQHandler+0x1fc>)
 800a29c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fb fc0a 	bl	8005abc <HAL_DMA_Abort_IT>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00a      	beq.n	800a2c4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a2ba:	e003      	b.n	800a2c4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f809 	bl	800a2d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a2c2:	e000      	b.n	800a2c6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a2c4:	bf00      	nop
    return;
 800a2c6:	bf00      	nop
  }
}
 800a2c8:	3720      	adds	r7, #32
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	0800a2e9 	.word	0x0800a2e9

0800a2d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f7ff ffe6 	bl	800a2d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a308:	bf00      	nop
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b088      	sub	sp, #32
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	603b      	str	r3, [r7, #0]
 800a31c:	4613      	mov	r3, r2
 800a31e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a320:	f7fa ff72 	bl	8005208 <HAL_GetTick>
 800a324:	4602      	mov	r2, r0
 800a326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a328:	1a9b      	subs	r3, r3, r2
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	4413      	add	r3, r2
 800a32e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a330:	f7fa ff6a 	bl	8005208 <HAL_GetTick>
 800a334:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a336:	4b39      	ldr	r3, [pc, #228]	; (800a41c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	015b      	lsls	r3, r3, #5
 800a33c:	0d1b      	lsrs	r3, r3, #20
 800a33e:	69fa      	ldr	r2, [r7, #28]
 800a340:	fb02 f303 	mul.w	r3, r2, r3
 800a344:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a346:	e054      	b.n	800a3f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a34e:	d050      	beq.n	800a3f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a350:	f7fa ff5a 	bl	8005208 <HAL_GetTick>
 800a354:	4602      	mov	r2, r0
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	1ad3      	subs	r3, r2, r3
 800a35a:	69fa      	ldr	r2, [r7, #28]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d902      	bls.n	800a366 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d13d      	bne.n	800a3e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	685a      	ldr	r2, [r3, #4]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a374:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a37e:	d111      	bne.n	800a3a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a388:	d004      	beq.n	800a394 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a392:	d107      	bne.n	800a3a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3ac:	d10f      	bne.n	800a3ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a3bc:	601a      	str	r2, [r3, #0]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a3cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	e017      	b.n	800a412 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d101      	bne.n	800a3ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	689a      	ldr	r2, [r3, #8]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	68ba      	ldr	r2, [r7, #8]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	bf0c      	ite	eq
 800a402:	2301      	moveq	r3, #1
 800a404:	2300      	movne	r3, #0
 800a406:	b2db      	uxtb	r3, r3
 800a408:	461a      	mov	r2, r3
 800a40a:	79fb      	ldrb	r3, [r7, #7]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d19b      	bne.n	800a348 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3720      	adds	r7, #32
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	20000044 	.word	0x20000044

0800a420 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af02      	add	r7, sp, #8
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a434:	d111      	bne.n	800a45a <SPI_EndRxTransaction+0x3a>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a43e:	d004      	beq.n	800a44a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a448:	d107      	bne.n	800a45a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a458:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a462:	d12a      	bne.n	800a4ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a46c:	d012      	beq.n	800a494 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	2200      	movs	r2, #0
 800a476:	2180      	movs	r1, #128	; 0x80
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f7ff ff49 	bl	800a310 <SPI_WaitFlagStateUntilTimeout>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d02d      	beq.n	800a4e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a488:	f043 0220 	orr.w	r2, r3, #32
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a490:	2303      	movs	r3, #3
 800a492:	e026      	b.n	800a4e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2200      	movs	r2, #0
 800a49c:	2101      	movs	r1, #1
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f7ff ff36 	bl	800a310 <SPI_WaitFlagStateUntilTimeout>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d01a      	beq.n	800a4e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ae:	f043 0220 	orr.w	r2, r3, #32
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e013      	b.n	800a4e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	2101      	movs	r1, #1
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f7ff ff23 	bl	800a310 <SPI_WaitFlagStateUntilTimeout>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d007      	beq.n	800a4e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d4:	f043 0220 	orr.w	r2, r3, #32
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	e000      	b.n	800a4e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
	...

0800a4ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b088      	sub	sp, #32
 800a4f0:	af02      	add	r7, sp, #8
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a4f8:	4b1b      	ldr	r3, [pc, #108]	; (800a568 <SPI_EndRxTxTransaction+0x7c>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a1b      	ldr	r2, [pc, #108]	; (800a56c <SPI_EndRxTxTransaction+0x80>)
 800a4fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a502:	0d5b      	lsrs	r3, r3, #21
 800a504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a508:	fb02 f303 	mul.w	r3, r2, r3
 800a50c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a516:	d112      	bne.n	800a53e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	2200      	movs	r2, #0
 800a520:	2180      	movs	r1, #128	; 0x80
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f7ff fef4 	bl	800a310 <SPI_WaitFlagStateUntilTimeout>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d016      	beq.n	800a55c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a532:	f043 0220 	orr.w	r2, r3, #32
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a53a:	2303      	movs	r3, #3
 800a53c:	e00f      	b.n	800a55e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00a      	beq.n	800a55a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	3b01      	subs	r3, #1
 800a548:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a554:	2b80      	cmp	r3, #128	; 0x80
 800a556:	d0f2      	beq.n	800a53e <SPI_EndRxTxTransaction+0x52>
 800a558:	e000      	b.n	800a55c <SPI_EndRxTxTransaction+0x70>
        break;
 800a55a:	bf00      	nop
  }

  return HAL_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3718      	adds	r7, #24
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	20000044 	.word	0x20000044
 800a56c:	165e9f81 	.word	0x165e9f81

0800a570 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e038      	b.n	800a5f8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d106      	bne.n	800a5a0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f7f8 f9e8 	bl	8002970 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	3308      	adds	r3, #8
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	4610      	mov	r0, r2
 800a5ac:	f000 fad6 	bl	800ab5c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6818      	ldr	r0, [r3, #0]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	68b9      	ldr	r1, [r7, #8]
 800a5bc:	f000 fb38 	bl	800ac30 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6858      	ldr	r0, [r3, #4]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	689a      	ldr	r2, [r3, #8]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5cc:	6879      	ldr	r1, [r7, #4]
 800a5ce:	f000 fb65 	bl	800ac9c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	6892      	ldr	r2, [r2, #8]
 800a5da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	68fa      	ldr	r2, [r7, #12]
 800a5e4:	6892      	ldr	r2, [r2, #8]
 800a5e6:	f041 0101 	orr.w	r1, r1, #1
 800a5ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	e041      	b.n	800a696 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d106      	bne.n	800a62c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f839 	bl	800a69e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2202      	movs	r2, #2
 800a630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	3304      	adds	r3, #4
 800a63c:	4619      	mov	r1, r3
 800a63e:	4610      	mov	r0, r2
 800a640:	f000 f9d8 	bl	800a9f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a69e:	b480      	push	{r7}
 800a6a0:	b083      	sub	sp, #12
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a6a6:	bf00      	nop
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
	...

0800a6b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d001      	beq.n	800a6cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e04e      	b.n	800a76a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2202      	movs	r2, #2
 800a6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68da      	ldr	r2, [r3, #12]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f042 0201 	orr.w	r2, r2, #1
 800a6e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a23      	ldr	r2, [pc, #140]	; (800a778 <HAL_TIM_Base_Start_IT+0xc4>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d022      	beq.n	800a734 <HAL_TIM_Base_Start_IT+0x80>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6f6:	d01d      	beq.n	800a734 <HAL_TIM_Base_Start_IT+0x80>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a1f      	ldr	r2, [pc, #124]	; (800a77c <HAL_TIM_Base_Start_IT+0xc8>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d018      	beq.n	800a734 <HAL_TIM_Base_Start_IT+0x80>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a1e      	ldr	r2, [pc, #120]	; (800a780 <HAL_TIM_Base_Start_IT+0xcc>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d013      	beq.n	800a734 <HAL_TIM_Base_Start_IT+0x80>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a1c      	ldr	r2, [pc, #112]	; (800a784 <HAL_TIM_Base_Start_IT+0xd0>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d00e      	beq.n	800a734 <HAL_TIM_Base_Start_IT+0x80>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a1b      	ldr	r2, [pc, #108]	; (800a788 <HAL_TIM_Base_Start_IT+0xd4>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d009      	beq.n	800a734 <HAL_TIM_Base_Start_IT+0x80>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a19      	ldr	r2, [pc, #100]	; (800a78c <HAL_TIM_Base_Start_IT+0xd8>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d004      	beq.n	800a734 <HAL_TIM_Base_Start_IT+0x80>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a18      	ldr	r2, [pc, #96]	; (800a790 <HAL_TIM_Base_Start_IT+0xdc>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d111      	bne.n	800a758 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	f003 0307 	and.w	r3, r3, #7
 800a73e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2b06      	cmp	r3, #6
 800a744:	d010      	beq.n	800a768 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f042 0201 	orr.w	r2, r2, #1
 800a754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a756:	e007      	b.n	800a768 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f042 0201 	orr.w	r2, r2, #1
 800a766:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	40010000 	.word	0x40010000
 800a77c:	40000400 	.word	0x40000400
 800a780:	40000800 	.word	0x40000800
 800a784:	40000c00 	.word	0x40000c00
 800a788:	40010400 	.word	0x40010400
 800a78c:	40014000 	.word	0x40014000
 800a790:	40001800 	.word	0x40001800

0800a794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	691b      	ldr	r3, [r3, #16]
 800a7a2:	f003 0302 	and.w	r3, r3, #2
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	d122      	bne.n	800a7f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	f003 0302 	and.w	r3, r3, #2
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d11b      	bne.n	800a7f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f06f 0202 	mvn.w	r2, #2
 800a7c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	699b      	ldr	r3, [r3, #24]
 800a7ce:	f003 0303 	and.w	r3, r3, #3
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d003      	beq.n	800a7de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 f8ee 	bl	800a9b8 <HAL_TIM_IC_CaptureCallback>
 800a7dc:	e005      	b.n	800a7ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 f8e0 	bl	800a9a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 f8f1 	bl	800a9cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	f003 0304 	and.w	r3, r3, #4
 800a7fa:	2b04      	cmp	r3, #4
 800a7fc:	d122      	bne.n	800a844 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	f003 0304 	and.w	r3, r3, #4
 800a808:	2b04      	cmp	r3, #4
 800a80a:	d11b      	bne.n	800a844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f06f 0204 	mvn.w	r2, #4
 800a814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2202      	movs	r2, #2
 800a81a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a826:	2b00      	cmp	r3, #0
 800a828:	d003      	beq.n	800a832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 f8c4 	bl	800a9b8 <HAL_TIM_IC_CaptureCallback>
 800a830:	e005      	b.n	800a83e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 f8b6 	bl	800a9a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 f8c7 	bl	800a9cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	f003 0308 	and.w	r3, r3, #8
 800a84e:	2b08      	cmp	r3, #8
 800a850:	d122      	bne.n	800a898 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	f003 0308 	and.w	r3, r3, #8
 800a85c:	2b08      	cmp	r3, #8
 800a85e:	d11b      	bne.n	800a898 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f06f 0208 	mvn.w	r2, #8
 800a868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2204      	movs	r2, #4
 800a86e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	69db      	ldr	r3, [r3, #28]
 800a876:	f003 0303 	and.w	r3, r3, #3
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d003      	beq.n	800a886 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f89a 	bl	800a9b8 <HAL_TIM_IC_CaptureCallback>
 800a884:	e005      	b.n	800a892 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f88c 	bl	800a9a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 f89d 	bl	800a9cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	f003 0310 	and.w	r3, r3, #16
 800a8a2:	2b10      	cmp	r3, #16
 800a8a4:	d122      	bne.n	800a8ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	f003 0310 	and.w	r3, r3, #16
 800a8b0:	2b10      	cmp	r3, #16
 800a8b2:	d11b      	bne.n	800a8ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f06f 0210 	mvn.w	r2, #16
 800a8bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2208      	movs	r2, #8
 800a8c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	69db      	ldr	r3, [r3, #28]
 800a8ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d003      	beq.n	800a8da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f870 	bl	800a9b8 <HAL_TIM_IC_CaptureCallback>
 800a8d8:	e005      	b.n	800a8e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f862 	bl	800a9a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 f873 	bl	800a9cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	f003 0301 	and.w	r3, r3, #1
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d10e      	bne.n	800a918 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	f003 0301 	and.w	r3, r3, #1
 800a904:	2b01      	cmp	r3, #1
 800a906:	d107      	bne.n	800a918 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f06f 0201 	mvn.w	r2, #1
 800a910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f7f8 fa1c 	bl	8002d50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a922:	2b80      	cmp	r3, #128	; 0x80
 800a924:	d10e      	bne.n	800a944 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a930:	2b80      	cmp	r3, #128	; 0x80
 800a932:	d107      	bne.n	800a944 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a93c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f902 	bl	800ab48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	691b      	ldr	r3, [r3, #16]
 800a94a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a94e:	2b40      	cmp	r3, #64	; 0x40
 800a950:	d10e      	bne.n	800a970 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a95c:	2b40      	cmp	r3, #64	; 0x40
 800a95e:	d107      	bne.n	800a970 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 f838 	bl	800a9e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	f003 0320 	and.w	r3, r3, #32
 800a97a:	2b20      	cmp	r3, #32
 800a97c:	d10e      	bne.n	800a99c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	f003 0320 	and.w	r3, r3, #32
 800a988:	2b20      	cmp	r3, #32
 800a98a:	d107      	bne.n	800a99c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f06f 0220 	mvn.w	r2, #32
 800a994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 f8cc 	bl	800ab34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a99c:	bf00      	nop
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9d4:	bf00      	nop
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a40      	ldr	r2, [pc, #256]	; (800ab08 <TIM_Base_SetConfig+0x114>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d013      	beq.n	800aa34 <TIM_Base_SetConfig+0x40>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa12:	d00f      	beq.n	800aa34 <TIM_Base_SetConfig+0x40>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a3d      	ldr	r2, [pc, #244]	; (800ab0c <TIM_Base_SetConfig+0x118>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d00b      	beq.n	800aa34 <TIM_Base_SetConfig+0x40>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a3c      	ldr	r2, [pc, #240]	; (800ab10 <TIM_Base_SetConfig+0x11c>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d007      	beq.n	800aa34 <TIM_Base_SetConfig+0x40>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	4a3b      	ldr	r2, [pc, #236]	; (800ab14 <TIM_Base_SetConfig+0x120>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d003      	beq.n	800aa34 <TIM_Base_SetConfig+0x40>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4a3a      	ldr	r2, [pc, #232]	; (800ab18 <TIM_Base_SetConfig+0x124>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d108      	bne.n	800aa46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a2f      	ldr	r2, [pc, #188]	; (800ab08 <TIM_Base_SetConfig+0x114>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d02b      	beq.n	800aaa6 <TIM_Base_SetConfig+0xb2>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa54:	d027      	beq.n	800aaa6 <TIM_Base_SetConfig+0xb2>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a2c      	ldr	r2, [pc, #176]	; (800ab0c <TIM_Base_SetConfig+0x118>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d023      	beq.n	800aaa6 <TIM_Base_SetConfig+0xb2>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a2b      	ldr	r2, [pc, #172]	; (800ab10 <TIM_Base_SetConfig+0x11c>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d01f      	beq.n	800aaa6 <TIM_Base_SetConfig+0xb2>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a2a      	ldr	r2, [pc, #168]	; (800ab14 <TIM_Base_SetConfig+0x120>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d01b      	beq.n	800aaa6 <TIM_Base_SetConfig+0xb2>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a29      	ldr	r2, [pc, #164]	; (800ab18 <TIM_Base_SetConfig+0x124>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d017      	beq.n	800aaa6 <TIM_Base_SetConfig+0xb2>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a28      	ldr	r2, [pc, #160]	; (800ab1c <TIM_Base_SetConfig+0x128>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d013      	beq.n	800aaa6 <TIM_Base_SetConfig+0xb2>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a27      	ldr	r2, [pc, #156]	; (800ab20 <TIM_Base_SetConfig+0x12c>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d00f      	beq.n	800aaa6 <TIM_Base_SetConfig+0xb2>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a26      	ldr	r2, [pc, #152]	; (800ab24 <TIM_Base_SetConfig+0x130>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d00b      	beq.n	800aaa6 <TIM_Base_SetConfig+0xb2>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a25      	ldr	r2, [pc, #148]	; (800ab28 <TIM_Base_SetConfig+0x134>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d007      	beq.n	800aaa6 <TIM_Base_SetConfig+0xb2>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a24      	ldr	r2, [pc, #144]	; (800ab2c <TIM_Base_SetConfig+0x138>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d003      	beq.n	800aaa6 <TIM_Base_SetConfig+0xb2>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a23      	ldr	r2, [pc, #140]	; (800ab30 <TIM_Base_SetConfig+0x13c>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d108      	bne.n	800aab8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	689a      	ldr	r2, [r3, #8]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a0a      	ldr	r2, [pc, #40]	; (800ab08 <TIM_Base_SetConfig+0x114>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d003      	beq.n	800aaec <TIM_Base_SetConfig+0xf8>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a0c      	ldr	r2, [pc, #48]	; (800ab18 <TIM_Base_SetConfig+0x124>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d103      	bne.n	800aaf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	691a      	ldr	r2, [r3, #16]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	615a      	str	r2, [r3, #20]
}
 800aafa:	bf00      	nop
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	40010000 	.word	0x40010000
 800ab0c:	40000400 	.word	0x40000400
 800ab10:	40000800 	.word	0x40000800
 800ab14:	40000c00 	.word	0x40000c00
 800ab18:	40010400 	.word	0x40010400
 800ab1c:	40014000 	.word	0x40014000
 800ab20:	40014400 	.word	0x40014400
 800ab24:	40014800 	.word	0x40014800
 800ab28:	40001800 	.word	0x40001800
 800ab2c:	40001c00 	.word	0x40001c00
 800ab30:	40002000 	.word	0x40002000

0800ab34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b087      	sub	sp, #28
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab70:	683a      	ldr	r2, [r7, #0]
 800ab72:	6812      	ldr	r2, [r2, #0]
 800ab74:	f023 0101 	bic.w	r1, r3, #1
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	2b08      	cmp	r3, #8
 800ab84:	d102      	bne.n	800ab8c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800ab86:	2340      	movs	r3, #64	; 0x40
 800ab88:	617b      	str	r3, [r7, #20]
 800ab8a:	e001      	b.n	800ab90 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800ab9c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800aba2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800aba8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800abae:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800abb4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800abba:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800abc0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800abc6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800abcc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800abd2:	4313      	orrs	r3, r2
 800abd4:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	693a      	ldr	r2, [r7, #16]
 800abdc:	4313      	orrs	r3, r2
 800abde:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe4:	693a      	ldr	r2, [r7, #16]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800abea:	4b10      	ldr	r3, [pc, #64]	; (800ac2c <FSMC_NORSRAM_Init+0xd0>)
 800abec:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800abf4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800abfc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	43db      	mvns	r3, r3
 800ac0c:	ea02 0103 	and.w	r1, r2, r3
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	4319      	orrs	r1, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	371c      	adds	r7, #28
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr
 800ac2c:	0008fb7f 	.word	0x0008fb7f

0800ac30 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b085      	sub	sp, #20
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	1c5a      	adds	r2, r3, #1
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac46:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	011b      	lsls	r3, r3, #4
 800ac54:	431a      	orrs	r2, r3
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	021b      	lsls	r3, r3, #8
 800ac5c:	431a      	orrs	r2, r3
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	041b      	lsls	r3, r3, #16
 800ac64:	431a      	orrs	r2, r3
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	051b      	lsls	r3, r3, #20
 800ac6e:	431a      	orrs	r2, r3
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	695b      	ldr	r3, [r3, #20]
 800ac74:	3b02      	subs	r3, #2
 800ac76:	061b      	lsls	r3, r3, #24
 800ac78:	431a      	orrs	r2, r3
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	699b      	ldr	r3, [r3, #24]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	3201      	adds	r2, #1
 800ac84:	4319      	orrs	r1, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
	...

0800ac9c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acb0:	d11d      	bne.n	800acee <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800acba:	4b13      	ldr	r3, [pc, #76]	; (800ad08 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800acbc:	4013      	ands	r3, r2
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	6811      	ldr	r1, [r2, #0]
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	6852      	ldr	r2, [r2, #4]
 800acc6:	0112      	lsls	r2, r2, #4
 800acc8:	4311      	orrs	r1, r2
 800acca:	68ba      	ldr	r2, [r7, #8]
 800accc:	6892      	ldr	r2, [r2, #8]
 800acce:	0212      	lsls	r2, r2, #8
 800acd0:	4311      	orrs	r1, r2
 800acd2:	68ba      	ldr	r2, [r7, #8]
 800acd4:	6992      	ldr	r2, [r2, #24]
 800acd6:	4311      	orrs	r1, r2
 800acd8:	68ba      	ldr	r2, [r7, #8]
 800acda:	68d2      	ldr	r2, [r2, #12]
 800acdc:	0412      	lsls	r2, r2, #16
 800acde:	430a      	orrs	r2, r1
 800ace0:	ea43 0102 	orr.w	r1, r3, r2
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800acec:	e005      	b.n	800acfa <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800acf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr
 800ad08:	cff00000 	.word	0xcff00000

0800ad0c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	b480      	push	{r7}
 800ad10:	b085      	sub	sp, #20
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	f107 001c 	add.w	r0, r7, #28
 800ad1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ad22:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ad24:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ad26:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ad28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ad2a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ad2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ad2e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ad30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ad32:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ad34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ad36:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800ad46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	431a      	orrs	r2, r3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	b004      	add	sp, #16
 800ad60:	4770      	bx	lr

0800ad62 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ad62:	b480      	push	{r7}
 800ad64:	b083      	sub	sp, #12
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	370c      	adds	r7, #12
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ad9e:	b480      	push	{r7}
 800ada0:	b083      	sub	sp, #12
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2203      	movs	r2, #3
 800adaa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	370c      	adds	r7, #12
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr

0800adba <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800adba:	b480      	push	{r7}
 800adbc:	b083      	sub	sp, #12
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 0303 	and.w	r3, r3, #3
}
 800adca:	4618      	mov	r0, r3
 800adcc:	370c      	adds	r7, #12
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800add6:	b480      	push	{r7}
 800add8:	b085      	sub	sp, #20
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
 800adde:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ade0:	2300      	movs	r3, #0
 800ade2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800adf4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800adfa:	431a      	orrs	r2, r3
                       Command->CPSM);
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ae00:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	4313      	orrs	r3, r2
 800ae06:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ae10:	f023 030f 	bic.w	r3, r3, #15
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	431a      	orrs	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3714      	adds	r7, #20
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr

0800ae2a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	b083      	sub	sp, #12
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	b2db      	uxtb	r3, r3
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	3314      	adds	r3, #20
 800ae52:	461a      	mov	r2, r3
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	4413      	add	r3, r2
 800ae58:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
}  
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3714      	adds	r7, #20
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr

0800ae6a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800ae6a:	b480      	push	{r7}
 800ae6c:	b085      	sub	sp, #20
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ae74:	2300      	movs	r3, #0
 800ae76:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	685a      	ldr	r2, [r3, #4]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ae90:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ae96:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ae9c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	431a      	orrs	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aeb4:	2300      	movs	r3, #0

}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3714      	adds	r7, #20
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr

0800aec2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b088      	sub	sp, #32
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
 800aeca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800aed0:	2310      	movs	r3, #16
 800aed2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aed4:	2340      	movs	r3, #64	; 0x40
 800aed6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aed8:	2300      	movs	r3, #0
 800aeda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aedc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aee0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aee2:	f107 0308 	add.w	r3, r7, #8
 800aee6:	4619      	mov	r1, r3
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f7ff ff74 	bl	800add6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800aeee:	f241 3288 	movw	r2, #5000	; 0x1388
 800aef2:	2110      	movs	r1, #16
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fa19 	bl	800b32c <SDMMC_GetCmdResp1>
 800aefa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aefc:	69fb      	ldr	r3, [r7, #28]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3720      	adds	r7, #32
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b088      	sub	sp, #32
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
 800af0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800af14:	2311      	movs	r3, #17
 800af16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af18:	2340      	movs	r3, #64	; 0x40
 800af1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af1c:	2300      	movs	r3, #0
 800af1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af26:	f107 0308 	add.w	r3, r7, #8
 800af2a:	4619      	mov	r1, r3
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f7ff ff52 	bl	800add6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800af32:	f241 3288 	movw	r2, #5000	; 0x1388
 800af36:	2111      	movs	r1, #17
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 f9f7 	bl	800b32c <SDMMC_GetCmdResp1>
 800af3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af40:	69fb      	ldr	r3, [r7, #28]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3720      	adds	r7, #32
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b088      	sub	sp, #32
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
 800af52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800af58:	2312      	movs	r3, #18
 800af5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af5c:	2340      	movs	r3, #64	; 0x40
 800af5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af60:	2300      	movs	r3, #0
 800af62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af6a:	f107 0308 	add.w	r3, r7, #8
 800af6e:	4619      	mov	r1, r3
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f7ff ff30 	bl	800add6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800af76:	f241 3288 	movw	r2, #5000	; 0x1388
 800af7a:	2112      	movs	r1, #18
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 f9d5 	bl	800b32c <SDMMC_GetCmdResp1>
 800af82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af84:	69fb      	ldr	r3, [r7, #28]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3720      	adds	r7, #32
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b088      	sub	sp, #32
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800af9c:	2318      	movs	r3, #24
 800af9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800afa0:	2340      	movs	r3, #64	; 0x40
 800afa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800afa4:	2300      	movs	r3, #0
 800afa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afae:	f107 0308 	add.w	r3, r7, #8
 800afb2:	4619      	mov	r1, r3
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f7ff ff0e 	bl	800add6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800afba:	f241 3288 	movw	r2, #5000	; 0x1388
 800afbe:	2118      	movs	r1, #24
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f9b3 	bl	800b32c <SDMMC_GetCmdResp1>
 800afc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afc8:	69fb      	ldr	r3, [r7, #28]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3720      	adds	r7, #32
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b088      	sub	sp, #32
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
 800afda:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800afe0:	2319      	movs	r3, #25
 800afe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800afe4:	2340      	movs	r3, #64	; 0x40
 800afe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800afe8:	2300      	movs	r3, #0
 800afea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aff0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aff2:	f107 0308 	add.w	r3, r7, #8
 800aff6:	4619      	mov	r1, r3
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f7ff feec 	bl	800add6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800affe:	f241 3288 	movw	r2, #5000	; 0x1388
 800b002:	2119      	movs	r1, #25
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 f991 	bl	800b32c <SDMMC_GetCmdResp1>
 800b00a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b00c:	69fb      	ldr	r3, [r7, #28]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3720      	adds	r7, #32
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
	...

0800b018 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b088      	sub	sp, #32
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b020:	2300      	movs	r3, #0
 800b022:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b024:	230c      	movs	r3, #12
 800b026:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b028:	2340      	movs	r3, #64	; 0x40
 800b02a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b02c:	2300      	movs	r3, #0
 800b02e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b034:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b036:	f107 0308 	add.w	r3, r7, #8
 800b03a:	4619      	mov	r1, r3
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f7ff feca 	bl	800add6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b042:	4a05      	ldr	r2, [pc, #20]	; (800b058 <SDMMC_CmdStopTransfer+0x40>)
 800b044:	210c      	movs	r1, #12
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 f970 	bl	800b32c <SDMMC_GetCmdResp1>
 800b04c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b04e:	69fb      	ldr	r3, [r7, #28]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3720      	adds	r7, #32
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	05f5e100 	.word	0x05f5e100

0800b05c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b08a      	sub	sp, #40	; 0x28
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b06c:	2307      	movs	r3, #7
 800b06e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b070:	2340      	movs	r3, #64	; 0x40
 800b072:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b074:	2300      	movs	r3, #0
 800b076:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b07c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b07e:	f107 0310 	add.w	r3, r7, #16
 800b082:	4619      	mov	r1, r3
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f7ff fea6 	bl	800add6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b08a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b08e:	2107      	movs	r1, #7
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f000 f94b 	bl	800b32c <SDMMC_GetCmdResp1>
 800b096:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3728      	adds	r7, #40	; 0x28
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b088      	sub	sp, #32
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b0c0:	f107 0308 	add.w	r3, r7, #8
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7ff fe85 	bl	800add6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fb65 	bl	800b79c <SDMMC_GetCmdError>
 800b0d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0d4:	69fb      	ldr	r3, [r7, #28]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3720      	adds	r7, #32
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b088      	sub	sp, #32
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b0e6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b0ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b0ec:	2308      	movs	r3, #8
 800b0ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b0f0:	2340      	movs	r3, #64	; 0x40
 800b0f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b0fe:	f107 0308 	add.w	r3, r7, #8
 800b102:	4619      	mov	r1, r3
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f7ff fe66 	bl	800add6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 faf8 	bl	800b700 <SDMMC_GetCmdResp7>
 800b110:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b112:	69fb      	ldr	r3, [r7, #28]
}
 800b114:	4618      	mov	r0, r3
 800b116:	3720      	adds	r7, #32
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b088      	sub	sp, #32
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b12a:	2337      	movs	r3, #55	; 0x37
 800b12c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b12e:	2340      	movs	r3, #64	; 0x40
 800b130:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b132:	2300      	movs	r3, #0
 800b134:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b13a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b13c:	f107 0308 	add.w	r3, r7, #8
 800b140:	4619      	mov	r1, r3
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f7ff fe47 	bl	800add6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b148:	f241 3288 	movw	r2, #5000	; 0x1388
 800b14c:	2137      	movs	r1, #55	; 0x37
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 f8ec 	bl	800b32c <SDMMC_GetCmdResp1>
 800b154:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b156:	69fb      	ldr	r3, [r7, #28]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3720      	adds	r7, #32
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b088      	sub	sp, #32
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b170:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b176:	2329      	movs	r3, #41	; 0x29
 800b178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b17a:	2340      	movs	r3, #64	; 0x40
 800b17c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b17e:	2300      	movs	r3, #0
 800b180:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b186:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b188:	f107 0308 	add.w	r3, r7, #8
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f7ff fe21 	bl	800add6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 f9ff 	bl	800b598 <SDMMC_GetCmdResp3>
 800b19a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b19c:	69fb      	ldr	r3, [r7, #28]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3720      	adds	r7, #32
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b088      	sub	sp, #32
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b1b4:	2306      	movs	r3, #6
 800b1b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1b8:	2340      	movs	r3, #64	; 0x40
 800b1ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b1c6:	f107 0308 	add.w	r3, r7, #8
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f7ff fe02 	bl	800add6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800b1d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1d6:	2106      	movs	r1, #6
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 f8a7 	bl	800b32c <SDMMC_GetCmdResp1>
 800b1de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1e0:	69fb      	ldr	r3, [r7, #28]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3720      	adds	r7, #32
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b088      	sub	sp, #32
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b1f6:	2333      	movs	r3, #51	; 0x33
 800b1f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1fa:	2340      	movs	r3, #64	; 0x40
 800b1fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1fe:	2300      	movs	r3, #0
 800b200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b206:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b208:	f107 0308 	add.w	r3, r7, #8
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7ff fde1 	bl	800add6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800b214:	f241 3288 	movw	r2, #5000	; 0x1388
 800b218:	2133      	movs	r1, #51	; 0x33
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f886 	bl	800b32c <SDMMC_GetCmdResp1>
 800b220:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b222:	69fb      	ldr	r3, [r7, #28]
}
 800b224:	4618      	mov	r0, r3
 800b226:	3720      	adds	r7, #32
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b088      	sub	sp, #32
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b234:	2300      	movs	r3, #0
 800b236:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b238:	2302      	movs	r3, #2
 800b23a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b23c:	23c0      	movs	r3, #192	; 0xc0
 800b23e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b240:	2300      	movs	r3, #0
 800b242:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b248:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b24a:	f107 0308 	add.w	r3, r7, #8
 800b24e:	4619      	mov	r1, r3
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f7ff fdc0 	bl	800add6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f956 	bl	800b508 <SDMMC_GetCmdResp2>
 800b25c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b25e:	69fb      	ldr	r3, [r7, #28]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3720      	adds	r7, #32
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b088      	sub	sp, #32
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b276:	2309      	movs	r3, #9
 800b278:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b27a:	23c0      	movs	r3, #192	; 0xc0
 800b27c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b27e:	2300      	movs	r3, #0
 800b280:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b286:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b288:	f107 0308 	add.w	r3, r7, #8
 800b28c:	4619      	mov	r1, r3
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f7ff fda1 	bl	800add6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 f937 	bl	800b508 <SDMMC_GetCmdResp2>
 800b29a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b29c:	69fb      	ldr	r3, [r7, #28]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3720      	adds	r7, #32
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b088      	sub	sp, #32
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
 800b2ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b2b4:	2303      	movs	r3, #3
 800b2b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2b8:	2340      	movs	r3, #64	; 0x40
 800b2ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2c6:	f107 0308 	add.w	r3, r7, #8
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f7ff fd82 	bl	800add6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b2d2:	683a      	ldr	r2, [r7, #0]
 800b2d4:	2103      	movs	r1, #3
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f99c 	bl	800b614 <SDMMC_GetCmdResp6>
 800b2dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2de:	69fb      	ldr	r3, [r7, #28]
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3720      	adds	r7, #32
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b088      	sub	sp, #32
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b2f6:	230d      	movs	r3, #13
 800b2f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2fa:	2340      	movs	r3, #64	; 0x40
 800b2fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2fe:	2300      	movs	r3, #0
 800b300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b306:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b308:	f107 0308 	add.w	r3, r7, #8
 800b30c:	4619      	mov	r1, r3
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7ff fd61 	bl	800add6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b314:	f241 3288 	movw	r2, #5000	; 0x1388
 800b318:	210d      	movs	r1, #13
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 f806 	bl	800b32c <SDMMC_GetCmdResp1>
 800b320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b322:	69fb      	ldr	r3, [r7, #28]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3720      	adds	r7, #32
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b088      	sub	sp, #32
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	460b      	mov	r3, r1
 800b336:	607a      	str	r2, [r7, #4]
 800b338:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b33a:	4b70      	ldr	r3, [pc, #448]	; (800b4fc <SDMMC_GetCmdResp1+0x1d0>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4a70      	ldr	r2, [pc, #448]	; (800b500 <SDMMC_GetCmdResp1+0x1d4>)
 800b340:	fba2 2303 	umull	r2, r3, r2, r3
 800b344:	0a5a      	lsrs	r2, r3, #9
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	fb02 f303 	mul.w	r3, r2, r3
 800b34c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	1e5a      	subs	r2, r3, #1
 800b352:	61fa      	str	r2, [r7, #28]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d102      	bne.n	800b35e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b358:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b35c:	e0c9      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b362:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d0ef      	beq.n	800b34e <SDMMC_GetCmdResp1+0x22>
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1ea      	bne.n	800b34e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b37c:	f003 0304 	and.w	r3, r3, #4
 800b380:	2b00      	cmp	r3, #0
 800b382:	d004      	beq.n	800b38e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2204      	movs	r2, #4
 800b388:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b38a:	2304      	movs	r3, #4
 800b38c:	e0b1      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b392:	f003 0301 	and.w	r3, r3, #1
 800b396:	2b00      	cmp	r3, #0
 800b398:	d004      	beq.n	800b3a4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2201      	movs	r2, #1
 800b39e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e0a6      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	22c5      	movs	r2, #197	; 0xc5
 800b3a8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f7ff fd3d 	bl	800ae2a <SDIO_GetCommandResponse>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	7afb      	ldrb	r3, [r7, #11]
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d001      	beq.n	800b3be <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e099      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b3be:	2100      	movs	r1, #0
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f7ff fd3f 	bl	800ae44 <SDIO_GetResponse>
 800b3c6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b3c8:	697a      	ldr	r2, [r7, #20]
 800b3ca:	4b4e      	ldr	r3, [pc, #312]	; (800b504 <SDMMC_GetCmdResp1+0x1d8>)
 800b3cc:	4013      	ands	r3, r2
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d101      	bne.n	800b3d6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	e08d      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	da02      	bge.n	800b3e2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b3dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b3e0:	e087      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d001      	beq.n	800b3f0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b3ec:	2340      	movs	r3, #64	; 0x40
 800b3ee:	e080      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d001      	beq.n	800b3fe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b3fa:	2380      	movs	r3, #128	; 0x80
 800b3fc:	e079      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b404:	2b00      	cmp	r3, #0
 800b406:	d002      	beq.n	800b40e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b40c:	e071      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b414:	2b00      	cmp	r3, #0
 800b416:	d002      	beq.n	800b41e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b41c:	e069      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b42c:	e061      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b434:	2b00      	cmp	r3, #0
 800b436:	d002      	beq.n	800b43e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b438:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b43c:	e059      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b444:	2b00      	cmp	r3, #0
 800b446:	d002      	beq.n	800b44e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b44c:	e051      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b454:	2b00      	cmp	r3, #0
 800b456:	d002      	beq.n	800b45e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b45c:	e049      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b464:	2b00      	cmp	r3, #0
 800b466:	d002      	beq.n	800b46e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b468:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b46c:	e041      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b474:	2b00      	cmp	r3, #0
 800b476:	d002      	beq.n	800b47e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b47c:	e039      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b484:	2b00      	cmp	r3, #0
 800b486:	d002      	beq.n	800b48e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b488:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b48c:	e031      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b498:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b49c:	e029      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b4a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b4ac:	e021      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d002      	beq.n	800b4be <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b4b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b4bc:	e019      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d002      	beq.n	800b4ce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b4c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b4cc:	e011      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d002      	beq.n	800b4de <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b4d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b4dc:	e009      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	f003 0308 	and.w	r3, r3, #8
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d002      	beq.n	800b4ee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b4e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b4ec:	e001      	b.n	800b4f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b4ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3720      	adds	r7, #32
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	20000044 	.word	0x20000044
 800b500:	10624dd3 	.word	0x10624dd3
 800b504:	fdffe008 	.word	0xfdffe008

0800b508 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b510:	4b1f      	ldr	r3, [pc, #124]	; (800b590 <SDMMC_GetCmdResp2+0x88>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a1f      	ldr	r2, [pc, #124]	; (800b594 <SDMMC_GetCmdResp2+0x8c>)
 800b516:	fba2 2303 	umull	r2, r3, r2, r3
 800b51a:	0a5b      	lsrs	r3, r3, #9
 800b51c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b520:	fb02 f303 	mul.w	r3, r2, r3
 800b524:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	1e5a      	subs	r2, r3, #1
 800b52a:	60fa      	str	r2, [r7, #12]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d102      	bne.n	800b536 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b530:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b534:	e026      	b.n	800b584 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b53a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b542:	2b00      	cmp	r3, #0
 800b544:	d0ef      	beq.n	800b526 <SDMMC_GetCmdResp2+0x1e>
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1ea      	bne.n	800b526 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b554:	f003 0304 	and.w	r3, r3, #4
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d004      	beq.n	800b566 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2204      	movs	r2, #4
 800b560:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b562:	2304      	movs	r3, #4
 800b564:	e00e      	b.n	800b584 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b56a:	f003 0301 	and.w	r3, r3, #1
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d004      	beq.n	800b57c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2201      	movs	r2, #1
 800b576:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b578:	2301      	movs	r3, #1
 800b57a:	e003      	b.n	800b584 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	22c5      	movs	r2, #197	; 0xc5
 800b580:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b582:	2300      	movs	r3, #0
}
 800b584:	4618      	mov	r0, r3
 800b586:	3714      	adds	r7, #20
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr
 800b590:	20000044 	.word	0x20000044
 800b594:	10624dd3 	.word	0x10624dd3

0800b598 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b598:	b480      	push	{r7}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5a0:	4b1a      	ldr	r3, [pc, #104]	; (800b60c <SDMMC_GetCmdResp3+0x74>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a1a      	ldr	r2, [pc, #104]	; (800b610 <SDMMC_GetCmdResp3+0x78>)
 800b5a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b5aa:	0a5b      	lsrs	r3, r3, #9
 800b5ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5b0:	fb02 f303 	mul.w	r3, r2, r3
 800b5b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	1e5a      	subs	r2, r3, #1
 800b5ba:	60fa      	str	r2, [r7, #12]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d102      	bne.n	800b5c6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5c4:	e01b      	b.n	800b5fe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d0ef      	beq.n	800b5b6 <SDMMC_GetCmdResp3+0x1e>
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d1ea      	bne.n	800b5b6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5e4:	f003 0304 	and.w	r3, r3, #4
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d004      	beq.n	800b5f6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2204      	movs	r2, #4
 800b5f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5f2:	2304      	movs	r3, #4
 800b5f4:	e003      	b.n	800b5fe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	22c5      	movs	r2, #197	; 0xc5
 800b5fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3714      	adds	r7, #20
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop
 800b60c:	20000044 	.word	0x20000044
 800b610:	10624dd3 	.word	0x10624dd3

0800b614 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b088      	sub	sp, #32
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	460b      	mov	r3, r1
 800b61e:	607a      	str	r2, [r7, #4]
 800b620:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b622:	4b35      	ldr	r3, [pc, #212]	; (800b6f8 <SDMMC_GetCmdResp6+0xe4>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4a35      	ldr	r2, [pc, #212]	; (800b6fc <SDMMC_GetCmdResp6+0xe8>)
 800b628:	fba2 2303 	umull	r2, r3, r2, r3
 800b62c:	0a5b      	lsrs	r3, r3, #9
 800b62e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b632:	fb02 f303 	mul.w	r3, r2, r3
 800b636:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	1e5a      	subs	r2, r3, #1
 800b63c:	61fa      	str	r2, [r7, #28]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d102      	bne.n	800b648 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b642:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b646:	e052      	b.n	800b6ee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b64c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b654:	2b00      	cmp	r3, #0
 800b656:	d0ef      	beq.n	800b638 <SDMMC_GetCmdResp6+0x24>
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d1ea      	bne.n	800b638 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b666:	f003 0304 	and.w	r3, r3, #4
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d004      	beq.n	800b678 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2204      	movs	r2, #4
 800b672:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b674:	2304      	movs	r3, #4
 800b676:	e03a      	b.n	800b6ee <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b67c:	f003 0301 	and.w	r3, r3, #1
 800b680:	2b00      	cmp	r3, #0
 800b682:	d004      	beq.n	800b68e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2201      	movs	r2, #1
 800b688:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b68a:	2301      	movs	r3, #1
 800b68c:	e02f      	b.n	800b6ee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	f7ff fbcb 	bl	800ae2a <SDIO_GetCommandResponse>
 800b694:	4603      	mov	r3, r0
 800b696:	461a      	mov	r2, r3
 800b698:	7afb      	ldrb	r3, [r7, #11]
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d001      	beq.n	800b6a2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e025      	b.n	800b6ee <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	22c5      	movs	r2, #197	; 0xc5
 800b6a6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f7ff fbca 	bl	800ae44 <SDIO_GetResponse>
 800b6b0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d106      	bne.n	800b6ca <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	0c1b      	lsrs	r3, r3, #16
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	e011      	b.n	800b6ee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d002      	beq.n	800b6da <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b6d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b6d8:	e009      	b.n	800b6ee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d002      	beq.n	800b6ea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6e8:	e001      	b.n	800b6ee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b6ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3720      	adds	r7, #32
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	20000044 	.word	0x20000044
 800b6fc:	10624dd3 	.word	0x10624dd3

0800b700 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b700:	b480      	push	{r7}
 800b702:	b085      	sub	sp, #20
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b708:	4b22      	ldr	r3, [pc, #136]	; (800b794 <SDMMC_GetCmdResp7+0x94>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a22      	ldr	r2, [pc, #136]	; (800b798 <SDMMC_GetCmdResp7+0x98>)
 800b70e:	fba2 2303 	umull	r2, r3, r2, r3
 800b712:	0a5b      	lsrs	r3, r3, #9
 800b714:	f241 3288 	movw	r2, #5000	; 0x1388
 800b718:	fb02 f303 	mul.w	r3, r2, r3
 800b71c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	1e5a      	subs	r2, r3, #1
 800b722:	60fa      	str	r2, [r7, #12]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d102      	bne.n	800b72e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b728:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b72c:	e02c      	b.n	800b788 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b732:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d0ef      	beq.n	800b71e <SDMMC_GetCmdResp7+0x1e>
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b744:	2b00      	cmp	r3, #0
 800b746:	d1ea      	bne.n	800b71e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b74c:	f003 0304 	and.w	r3, r3, #4
 800b750:	2b00      	cmp	r3, #0
 800b752:	d004      	beq.n	800b75e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2204      	movs	r2, #4
 800b758:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b75a:	2304      	movs	r3, #4
 800b75c:	e014      	b.n	800b788 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b762:	f003 0301 	and.w	r3, r3, #1
 800b766:	2b00      	cmp	r3, #0
 800b768:	d004      	beq.n	800b774 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2201      	movs	r2, #1
 800b76e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b770:	2301      	movs	r3, #1
 800b772:	e009      	b.n	800b788 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d002      	beq.n	800b786 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2240      	movs	r2, #64	; 0x40
 800b784:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b786:	2300      	movs	r3, #0
  
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3714      	adds	r7, #20
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr
 800b794:	20000044 	.word	0x20000044
 800b798:	10624dd3 	.word	0x10624dd3

0800b79c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7a4:	4b11      	ldr	r3, [pc, #68]	; (800b7ec <SDMMC_GetCmdError+0x50>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a11      	ldr	r2, [pc, #68]	; (800b7f0 <SDMMC_GetCmdError+0x54>)
 800b7aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ae:	0a5b      	lsrs	r3, r3, #9
 800b7b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7b4:	fb02 f303 	mul.w	r3, r2, r3
 800b7b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	1e5a      	subs	r2, r3, #1
 800b7be:	60fa      	str	r2, [r7, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d102      	bne.n	800b7ca <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7c8:	e009      	b.n	800b7de <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d0f1      	beq.n	800b7ba <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	22c5      	movs	r2, #197	; 0xc5
 800b7da:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b7dc:	2300      	movs	r3, #0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3714      	adds	r7, #20
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	20000044 	.word	0x20000044
 800b7f0:	10624dd3 	.word	0x10624dd3

0800b7f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b7f8:	4904      	ldr	r1, [pc, #16]	; (800b80c <MX_FATFS_Init+0x18>)
 800b7fa:	4805      	ldr	r0, [pc, #20]	; (800b810 <MX_FATFS_Init+0x1c>)
 800b7fc:	f003 fed8 	bl	800f5b0 <FATFS_LinkDriver>
 800b800:	4603      	mov	r3, r0
 800b802:	461a      	mov	r2, r3
 800b804:	4b03      	ldr	r3, [pc, #12]	; (800b814 <MX_FATFS_Init+0x20>)
 800b806:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b808:	bf00      	nop
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	20001c94 	.word	0x20001c94
 800b810:	0801a5b0 	.word	0x0801a5b0
 800b814:	20001c90 	.word	0x20001c90

0800b818 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b818:	b480      	push	{r7}
 800b81a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b81c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b81e:	4618      	mov	r0, r3
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b82e:	2300      	movs	r3, #0
 800b830:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b832:	f000 f888 	bl	800b946 <BSP_SD_IsDetected>
 800b836:	4603      	mov	r3, r0
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d001      	beq.n	800b840 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	e005      	b.n	800b84c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b840:	4804      	ldr	r0, [pc, #16]	; (800b854 <BSP_SD_Init+0x2c>)
 800b842:	f7fc fc9b 	bl	800817c <HAL_SD_Init>
 800b846:	4603      	mov	r3, r0
 800b848:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b84a:	79fb      	ldrb	r3, [r7, #7]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	20001460 	.word	0x20001460

0800b858 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b086      	sub	sp, #24
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b864:	2300      	movs	r3, #0
 800b866:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	68f9      	ldr	r1, [r7, #12]
 800b86e:	4806      	ldr	r0, [pc, #24]	; (800b888 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b870:	f7fc fd34 	bl	80082dc <HAL_SD_ReadBlocks_DMA>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d001      	beq.n	800b87e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b87e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3718      	adds	r7, #24
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	20001460 	.word	0x20001460

0800b88c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b086      	sub	sp, #24
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b898:	2300      	movs	r3, #0
 800b89a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	68ba      	ldr	r2, [r7, #8]
 800b8a0:	68f9      	ldr	r1, [r7, #12]
 800b8a2:	4806      	ldr	r0, [pc, #24]	; (800b8bc <BSP_SD_WriteBlocks_DMA+0x30>)
 800b8a4:	f7fc fdfc 	bl	80084a0 <HAL_SD_WriteBlocks_DMA>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d001      	beq.n	800b8b2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b8b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3718      	adds	r7, #24
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	20001460 	.word	0x20001460

0800b8c0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b8c4:	4805      	ldr	r0, [pc, #20]	; (800b8dc <BSP_SD_GetCardState+0x1c>)
 800b8c6:	f7fd facb 	bl	8008e60 <HAL_SD_GetCardState>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b04      	cmp	r3, #4
 800b8ce:	bf14      	ite	ne
 800b8d0:	2301      	movne	r3, #1
 800b8d2:	2300      	moveq	r3, #0
 800b8d4:	b2db      	uxtb	r3, r3
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	20001460 	.word	0x20001460

0800b8e0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b8e8:	6879      	ldr	r1, [r7, #4]
 800b8ea:	4803      	ldr	r0, [pc, #12]	; (800b8f8 <BSP_SD_GetCardInfo+0x18>)
 800b8ec:	f7fd f9f2 	bl	8008cd4 <HAL_SD_GetCardInfo>
}
 800b8f0:	bf00      	nop
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	20001460 	.word	0x20001460

0800b8fc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b904:	f000 f818 	bl	800b938 <BSP_SD_AbortCallback>
}
 800b908:	bf00      	nop
 800b90a:	3708      	adds	r7, #8
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b918:	f000 f9c4 	bl	800bca4 <BSP_SD_WriteCpltCallback>
}
 800b91c:	bf00      	nop
 800b91e:	3708      	adds	r7, #8
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b92c:	f000 f9c8 	bl	800bcc0 <BSP_SD_ReadCpltCallback>
}
 800b930:	bf00      	nop
 800b932:	3708      	adds	r7, #8
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b938:	b480      	push	{r7}
 800b93a:	af00      	add	r7, sp, #0

}
 800b93c:	bf00      	nop
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b946:	b580      	push	{r7, lr}
 800b948:	b082      	sub	sp, #8
 800b94a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b94c:	2301      	movs	r3, #1
 800b94e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b950:	f000 f80c 	bl	800b96c <BSP_PlatformIsDetected>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d101      	bne.n	800b95e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b95a:	2300      	movs	r3, #0
 800b95c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b95e:	79fb      	ldrb	r3, [r7, #7]
 800b960:	b2db      	uxtb	r3, r3
}
 800b962:	4618      	mov	r0, r3
 800b964:	3708      	adds	r7, #8
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
	...

0800b96c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b972:	2301      	movs	r3, #1
 800b974:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b976:	2108      	movs	r1, #8
 800b978:	4806      	ldr	r0, [pc, #24]	; (800b994 <BSP_PlatformIsDetected+0x28>)
 800b97a:	f7fb feaf 	bl	80076dc <HAL_GPIO_ReadPin>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d001      	beq.n	800b988 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800b984:	2300      	movs	r3, #0
 800b986:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b988:	79fb      	ldrb	r3, [r7, #7]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	40020c00 	.word	0x40020c00

0800b998 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800b9a0:	f003 ff65 	bl	800f86e <osKernelSysTick>
 800b9a4:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800b9a6:	e006      	b.n	800b9b6 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b9a8:	f7ff ff8a 	bl	800b8c0 <BSP_SD_GetCardState>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d101      	bne.n	800b9b6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	e009      	b.n	800b9ca <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800b9b6:	f003 ff5a 	bl	800f86e <osKernelSysTick>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	1ad3      	subs	r3, r2, r3
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d8f0      	bhi.n	800b9a8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b9c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
	...

0800b9d4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	4603      	mov	r3, r0
 800b9dc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b9de:	4b0b      	ldr	r3, [pc, #44]	; (800ba0c <SD_CheckStatus+0x38>)
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b9e4:	f7ff ff6c 	bl	800b8c0 <BSP_SD_GetCardState>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d107      	bne.n	800b9fe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b9ee:	4b07      	ldr	r3, [pc, #28]	; (800ba0c <SD_CheckStatus+0x38>)
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	f023 0301 	bic.w	r3, r3, #1
 800b9f8:	b2da      	uxtb	r2, r3
 800b9fa:	4b04      	ldr	r3, [pc, #16]	; (800ba0c <SD_CheckStatus+0x38>)
 800b9fc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b9fe:	4b03      	ldr	r3, [pc, #12]	; (800ba0c <SD_CheckStatus+0x38>)
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	b2db      	uxtb	r3, r3
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3708      	adds	r7, #8
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	200000b5 	.word	0x200000b5

0800ba10 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ba10:	b590      	push	{r4, r7, lr}
 800ba12:	b087      	sub	sp, #28
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	4603      	mov	r3, r0
 800ba18:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ba1a:	4b20      	ldr	r3, [pc, #128]	; (800ba9c <SD_initialize+0x8c>)
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800ba20:	f003 ff19 	bl	800f856 <osKernelRunning>
 800ba24:	4603      	mov	r3, r0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d030      	beq.n	800ba8c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800ba2a:	f7ff fefd 	bl	800b828 <BSP_SD_Init>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d107      	bne.n	800ba44 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800ba34:	79fb      	ldrb	r3, [r7, #7]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7ff ffcc 	bl	800b9d4 <SD_CheckStatus>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	461a      	mov	r2, r3
 800ba40:	4b16      	ldr	r3, [pc, #88]	; (800ba9c <SD_initialize+0x8c>)
 800ba42:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ba44:	4b15      	ldr	r3, [pc, #84]	; (800ba9c <SD_initialize+0x8c>)
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d01e      	beq.n	800ba8c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800ba4e:	4b14      	ldr	r3, [pc, #80]	; (800baa0 <SD_initialize+0x90>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d10e      	bne.n	800ba74 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800ba56:	4b13      	ldr	r3, [pc, #76]	; (800baa4 <SD_initialize+0x94>)
 800ba58:	f107 0408 	add.w	r4, r7, #8
 800ba5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ba5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800ba62:	f107 0308 	add.w	r3, r7, #8
 800ba66:	2100      	movs	r1, #0
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f004 f9e8 	bl	800fe3e <osMessageCreate>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	4a0b      	ldr	r2, [pc, #44]	; (800baa0 <SD_initialize+0x90>)
 800ba72:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800ba74:	4b0a      	ldr	r3, [pc, #40]	; (800baa0 <SD_initialize+0x90>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d107      	bne.n	800ba8c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800ba7c:	4b07      	ldr	r3, [pc, #28]	; (800ba9c <SD_initialize+0x8c>)
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	f043 0301 	orr.w	r3, r3, #1
 800ba86:	b2da      	uxtb	r2, r3
 800ba88:	4b04      	ldr	r3, [pc, #16]	; (800ba9c <SD_initialize+0x8c>)
 800ba8a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800ba8c:	4b03      	ldr	r3, [pc, #12]	; (800ba9c <SD_initialize+0x8c>)
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	b2db      	uxtb	r3, r3
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	371c      	adds	r7, #28
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd90      	pop	{r4, r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	200000b5 	.word	0x200000b5
 800baa0:	20001c98 	.word	0x20001c98
 800baa4:	08016b38 	.word	0x08016b38

0800baa8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	4603      	mov	r3, r0
 800bab0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bab2:	79fb      	ldrb	r3, [r7, #7]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7ff ff8d 	bl	800b9d4 <SD_CheckStatus>
 800baba:	4603      	mov	r3, r0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b08a      	sub	sp, #40	; 0x28
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60b9      	str	r1, [r7, #8]
 800bacc:	607a      	str	r2, [r7, #4]
 800bace:	603b      	str	r3, [r7, #0]
 800bad0:	4603      	mov	r3, r0
 800bad2:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bada:	f247 5030 	movw	r0, #30000	; 0x7530
 800bade:	f7ff ff5b 	bl	800b998 <SD_CheckStatusWithTimeout>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	da02      	bge.n	800baee <SD_read+0x2a>
  {
    return res;
 800bae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baec:	e032      	b.n	800bb54 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800baee:	683a      	ldr	r2, [r7, #0]
 800baf0:	6879      	ldr	r1, [r7, #4]
 800baf2:	68b8      	ldr	r0, [r7, #8]
 800baf4:	f7ff feb0 	bl	800b858 <BSP_SD_ReadBlocks_DMA>
 800baf8:	4603      	mov	r3, r0
 800bafa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800bafe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d124      	bne.n	800bb50 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800bb06:	4b15      	ldr	r3, [pc, #84]	; (800bb5c <SD_read+0x98>)
 800bb08:	6819      	ldr	r1, [r3, #0]
 800bb0a:	f107 0314 	add.w	r3, r7, #20
 800bb0e:	f247 5230 	movw	r2, #30000	; 0x7530
 800bb12:	4618      	mov	r0, r3
 800bb14:	f004 f9fc 	bl	800ff10 <osMessageGet>

    if (event.status == osEventMessage)
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	2b10      	cmp	r3, #16
 800bb1c:	d118      	bne.n	800bb50 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d115      	bne.n	800bb50 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800bb24:	f003 fea3 	bl	800f86e <osKernelSysTick>
 800bb28:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bb2a:	e008      	b.n	800bb3e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bb2c:	f7ff fec8 	bl	800b8c0 <BSP_SD_GetCardState>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d103      	bne.n	800bb3e <SD_read+0x7a>
              {
                res = RES_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bb3c:	e008      	b.n	800bb50 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800bb3e:	f003 fe96 	bl	800f86e <osKernelSysTick>
 800bb42:	4602      	mov	r2, r0
 800bb44:	6a3b      	ldr	r3, [r7, #32]
 800bb46:	1ad3      	subs	r3, r2, r3
 800bb48:	f247 522f 	movw	r2, #29999	; 0x752f
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d9ed      	bls.n	800bb2c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800bb50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3728      	adds	r7, #40	; 0x28
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	20001c98 	.word	0x20001c98

0800bb60 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b08a      	sub	sp, #40	; 0x28
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60b9      	str	r1, [r7, #8]
 800bb68:	607a      	str	r2, [r7, #4]
 800bb6a:	603b      	str	r3, [r7, #0]
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bb76:	f247 5030 	movw	r0, #30000	; 0x7530
 800bb7a:	f7ff ff0d 	bl	800b998 <SD_CheckStatusWithTimeout>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	da02      	bge.n	800bb8a <SD_write+0x2a>
  {
    return res;
 800bb84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb88:	e02e      	b.n	800bbe8 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bb8a:	683a      	ldr	r2, [r7, #0]
 800bb8c:	6879      	ldr	r1, [r7, #4]
 800bb8e:	68b8      	ldr	r0, [r7, #8]
 800bb90:	f7ff fe7c 	bl	800b88c <BSP_SD_WriteBlocks_DMA>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d124      	bne.n	800bbe4 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800bb9a:	4b15      	ldr	r3, [pc, #84]	; (800bbf0 <SD_write+0x90>)
 800bb9c:	6819      	ldr	r1, [r3, #0]
 800bb9e:	f107 0314 	add.w	r3, r7, #20
 800bba2:	f247 5230 	movw	r2, #30000	; 0x7530
 800bba6:	4618      	mov	r0, r3
 800bba8:	f004 f9b2 	bl	800ff10 <osMessageGet>

    if (event.status == osEventMessage)
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	2b10      	cmp	r3, #16
 800bbb0:	d118      	bne.n	800bbe4 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d115      	bne.n	800bbe4 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800bbb8:	f003 fe59 	bl	800f86e <osKernelSysTick>
 800bbbc:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800bbbe:	e008      	b.n	800bbd2 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bbc0:	f7ff fe7e 	bl	800b8c0 <BSP_SD_GetCardState>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d103      	bne.n	800bbd2 <SD_write+0x72>
          {
            res = RES_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800bbd0:	e008      	b.n	800bbe4 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800bbd2:	f003 fe4c 	bl	800f86e <osKernelSysTick>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	6a3b      	ldr	r3, [r7, #32]
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	f247 522f 	movw	r2, #29999	; 0x752f
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d9ed      	bls.n	800bbc0 <SD_write+0x60>
    }

  }
#endif

  return res;
 800bbe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3728      	adds	r7, #40	; 0x28
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	20001c98 	.word	0x20001c98

0800bbf4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b08c      	sub	sp, #48	; 0x30
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	603a      	str	r2, [r7, #0]
 800bbfe:	71fb      	strb	r3, [r7, #7]
 800bc00:	460b      	mov	r3, r1
 800bc02:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bc04:	2301      	movs	r3, #1
 800bc06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bc0a:	4b25      	ldr	r3, [pc, #148]	; (800bca0 <SD_ioctl+0xac>)
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	f003 0301 	and.w	r3, r3, #1
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d001      	beq.n	800bc1c <SD_ioctl+0x28>
 800bc18:	2303      	movs	r3, #3
 800bc1a:	e03c      	b.n	800bc96 <SD_ioctl+0xa2>

  switch (cmd)
 800bc1c:	79bb      	ldrb	r3, [r7, #6]
 800bc1e:	2b03      	cmp	r3, #3
 800bc20:	d834      	bhi.n	800bc8c <SD_ioctl+0x98>
 800bc22:	a201      	add	r2, pc, #4	; (adr r2, 800bc28 <SD_ioctl+0x34>)
 800bc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc28:	0800bc39 	.word	0x0800bc39
 800bc2c:	0800bc41 	.word	0x0800bc41
 800bc30:	0800bc59 	.word	0x0800bc59
 800bc34:	0800bc73 	.word	0x0800bc73
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bc3e:	e028      	b.n	800bc92 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bc40:	f107 030c 	add.w	r3, r7, #12
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7ff fe4b 	bl	800b8e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bc4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bc50:	2300      	movs	r3, #0
 800bc52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bc56:	e01c      	b.n	800bc92 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bc58:	f107 030c 	add.w	r3, r7, #12
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7ff fe3f 	bl	800b8e0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bc70:	e00f      	b.n	800bc92 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bc72:	f107 030c 	add.w	r3, r7, #12
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7ff fe32 	bl	800b8e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7e:	0a5a      	lsrs	r2, r3, #9
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bc8a:	e002      	b.n	800bc92 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bc8c:	2304      	movs	r3, #4
 800bc8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bc92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3730      	adds	r7, #48	; 0x30
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	200000b5 	.word	0x200000b5

0800bca4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800bca8:	4b04      	ldr	r3, [pc, #16]	; (800bcbc <BSP_SD_WriteCpltCallback+0x18>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2200      	movs	r2, #0
 800bcae:	2102      	movs	r1, #2
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f004 f8ed 	bl	800fe90 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800bcb6:	bf00      	nop
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	20001c98 	.word	0x20001c98

0800bcc0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800bcc4:	4b04      	ldr	r3, [pc, #16]	; (800bcd8 <BSP_SD_ReadCpltCallback+0x18>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	2101      	movs	r1, #1
 800bccc:	4618      	mov	r0, r3
 800bcce:	f004 f8df 	bl	800fe90 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800bcd2:	bf00      	nop
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	20001c98 	.word	0x20001c98

0800bcdc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	4603      	mov	r3, r0
 800bce4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bce6:	79fb      	ldrb	r3, [r7, #7]
 800bce8:	4a08      	ldr	r2, [pc, #32]	; (800bd0c <disk_status+0x30>)
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	4413      	add	r3, r2
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	79fa      	ldrb	r2, [r7, #7]
 800bcf4:	4905      	ldr	r1, [pc, #20]	; (800bd0c <disk_status+0x30>)
 800bcf6:	440a      	add	r2, r1
 800bcf8:	7a12      	ldrb	r2, [r2, #8]
 800bcfa:	4610      	mov	r0, r2
 800bcfc:	4798      	blx	r3
 800bcfe:	4603      	mov	r3, r0
 800bd00:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bd02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3710      	adds	r7, #16
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}
 800bd0c:	20001cc4 	.word	0x20001cc4

0800bd10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	4603      	mov	r3, r0
 800bd18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bd1e:	79fb      	ldrb	r3, [r7, #7]
 800bd20:	4a0d      	ldr	r2, [pc, #52]	; (800bd58 <disk_initialize+0x48>)
 800bd22:	5cd3      	ldrb	r3, [r2, r3]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d111      	bne.n	800bd4c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bd28:	79fb      	ldrb	r3, [r7, #7]
 800bd2a:	4a0b      	ldr	r2, [pc, #44]	; (800bd58 <disk_initialize+0x48>)
 800bd2c:	2101      	movs	r1, #1
 800bd2e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bd30:	79fb      	ldrb	r3, [r7, #7]
 800bd32:	4a09      	ldr	r2, [pc, #36]	; (800bd58 <disk_initialize+0x48>)
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4413      	add	r3, r2
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	79fa      	ldrb	r2, [r7, #7]
 800bd3e:	4906      	ldr	r1, [pc, #24]	; (800bd58 <disk_initialize+0x48>)
 800bd40:	440a      	add	r2, r1
 800bd42:	7a12      	ldrb	r2, [r2, #8]
 800bd44:	4610      	mov	r0, r2
 800bd46:	4798      	blx	r3
 800bd48:	4603      	mov	r3, r0
 800bd4a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bd4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	20001cc4 	.word	0x20001cc4

0800bd5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bd5c:	b590      	push	{r4, r7, lr}
 800bd5e:	b087      	sub	sp, #28
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60b9      	str	r1, [r7, #8]
 800bd64:	607a      	str	r2, [r7, #4]
 800bd66:	603b      	str	r3, [r7, #0]
 800bd68:	4603      	mov	r3, r0
 800bd6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bd6c:	7bfb      	ldrb	r3, [r7, #15]
 800bd6e:	4a0a      	ldr	r2, [pc, #40]	; (800bd98 <disk_read+0x3c>)
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	4413      	add	r3, r2
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	689c      	ldr	r4, [r3, #8]
 800bd78:	7bfb      	ldrb	r3, [r7, #15]
 800bd7a:	4a07      	ldr	r2, [pc, #28]	; (800bd98 <disk_read+0x3c>)
 800bd7c:	4413      	add	r3, r2
 800bd7e:	7a18      	ldrb	r0, [r3, #8]
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	68b9      	ldr	r1, [r7, #8]
 800bd86:	47a0      	blx	r4
 800bd88:	4603      	mov	r3, r0
 800bd8a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bd8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	371c      	adds	r7, #28
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd90      	pop	{r4, r7, pc}
 800bd96:	bf00      	nop
 800bd98:	20001cc4 	.word	0x20001cc4

0800bd9c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bd9c:	b590      	push	{r4, r7, lr}
 800bd9e:	b087      	sub	sp, #28
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60b9      	str	r1, [r7, #8]
 800bda4:	607a      	str	r2, [r7, #4]
 800bda6:	603b      	str	r3, [r7, #0]
 800bda8:	4603      	mov	r3, r0
 800bdaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
 800bdae:	4a0a      	ldr	r2, [pc, #40]	; (800bdd8 <disk_write+0x3c>)
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	4413      	add	r3, r2
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	68dc      	ldr	r4, [r3, #12]
 800bdb8:	7bfb      	ldrb	r3, [r7, #15]
 800bdba:	4a07      	ldr	r2, [pc, #28]	; (800bdd8 <disk_write+0x3c>)
 800bdbc:	4413      	add	r3, r2
 800bdbe:	7a18      	ldrb	r0, [r3, #8]
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	68b9      	ldr	r1, [r7, #8]
 800bdc6:	47a0      	blx	r4
 800bdc8:	4603      	mov	r3, r0
 800bdca:	75fb      	strb	r3, [r7, #23]
  return res;
 800bdcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	371c      	adds	r7, #28
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd90      	pop	{r4, r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	20001cc4 	.word	0x20001cc4

0800bddc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	4603      	mov	r3, r0
 800bde4:	603a      	str	r2, [r7, #0]
 800bde6:	71fb      	strb	r3, [r7, #7]
 800bde8:	460b      	mov	r3, r1
 800bdea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bdec:	79fb      	ldrb	r3, [r7, #7]
 800bdee:	4a09      	ldr	r2, [pc, #36]	; (800be14 <disk_ioctl+0x38>)
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	4413      	add	r3, r2
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	79fa      	ldrb	r2, [r7, #7]
 800bdfa:	4906      	ldr	r1, [pc, #24]	; (800be14 <disk_ioctl+0x38>)
 800bdfc:	440a      	add	r2, r1
 800bdfe:	7a10      	ldrb	r0, [r2, #8]
 800be00:	79b9      	ldrb	r1, [r7, #6]
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	4798      	blx	r3
 800be06:	4603      	mov	r3, r0
 800be08:	73fb      	strb	r3, [r7, #15]
  return res;
 800be0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	20001cc4 	.word	0x20001cc4

0800be18 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800be18:	b480      	push	{r7}
 800be1a:	b085      	sub	sp, #20
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	3301      	adds	r3, #1
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800be28:	89fb      	ldrh	r3, [r7, #14]
 800be2a:	021b      	lsls	r3, r3, #8
 800be2c:	b21a      	sxth	r2, r3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	b21b      	sxth	r3, r3
 800be34:	4313      	orrs	r3, r2
 800be36:	b21b      	sxth	r3, r3
 800be38:	81fb      	strh	r3, [r7, #14]
	return rv;
 800be3a:	89fb      	ldrh	r3, [r7, #14]
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3714      	adds	r7, #20
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	3303      	adds	r3, #3
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	021b      	lsls	r3, r3, #8
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	3202      	adds	r2, #2
 800be60:	7812      	ldrb	r2, [r2, #0]
 800be62:	4313      	orrs	r3, r2
 800be64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	021b      	lsls	r3, r3, #8
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	3201      	adds	r2, #1
 800be6e:	7812      	ldrb	r2, [r2, #0]
 800be70:	4313      	orrs	r3, r2
 800be72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	021b      	lsls	r3, r3, #8
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	7812      	ldrb	r2, [r2, #0]
 800be7c:	4313      	orrs	r3, r2
 800be7e:	60fb      	str	r3, [r7, #12]
	return rv;
 800be80:	68fb      	ldr	r3, [r7, #12]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3714      	adds	r7, #20
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr

0800be8e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800be8e:	b480      	push	{r7}
 800be90:	b083      	sub	sp, #12
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
 800be96:	460b      	mov	r3, r1
 800be98:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	1c5a      	adds	r2, r3, #1
 800be9e:	607a      	str	r2, [r7, #4]
 800bea0:	887a      	ldrh	r2, [r7, #2]
 800bea2:	b2d2      	uxtb	r2, r2
 800bea4:	701a      	strb	r2, [r3, #0]
 800bea6:	887b      	ldrh	r3, [r7, #2]
 800bea8:	0a1b      	lsrs	r3, r3, #8
 800beaa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	1c5a      	adds	r2, r3, #1
 800beb0:	607a      	str	r2, [r7, #4]
 800beb2:	887a      	ldrh	r2, [r7, #2]
 800beb4:	b2d2      	uxtb	r2, r2
 800beb6:	701a      	strb	r2, [r3, #0]
}
 800beb8:	bf00      	nop
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	1c5a      	adds	r2, r3, #1
 800bed2:	607a      	str	r2, [r7, #4]
 800bed4:	683a      	ldr	r2, [r7, #0]
 800bed6:	b2d2      	uxtb	r2, r2
 800bed8:	701a      	strb	r2, [r3, #0]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	0a1b      	lsrs	r3, r3, #8
 800bede:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	607a      	str	r2, [r7, #4]
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	b2d2      	uxtb	r2, r2
 800beea:	701a      	strb	r2, [r3, #0]
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	0a1b      	lsrs	r3, r3, #8
 800bef0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	1c5a      	adds	r2, r3, #1
 800bef6:	607a      	str	r2, [r7, #4]
 800bef8:	683a      	ldr	r2, [r7, #0]
 800befa:	b2d2      	uxtb	r2, r2
 800befc:	701a      	strb	r2, [r3, #0]
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	0a1b      	lsrs	r3, r3, #8
 800bf02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	1c5a      	adds	r2, r3, #1
 800bf08:	607a      	str	r2, [r7, #4]
 800bf0a:	683a      	ldr	r2, [r7, #0]
 800bf0c:	b2d2      	uxtb	r2, r2
 800bf0e:	701a      	strb	r2, [r3, #0]
}
 800bf10:	bf00      	nop
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bf1c:	b480      	push	{r7}
 800bf1e:	b087      	sub	sp, #28
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00d      	beq.n	800bf52 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bf36:	693a      	ldr	r2, [r7, #16]
 800bf38:	1c53      	adds	r3, r2, #1
 800bf3a:	613b      	str	r3, [r7, #16]
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	1c59      	adds	r1, r3, #1
 800bf40:	6179      	str	r1, [r7, #20]
 800bf42:	7812      	ldrb	r2, [r2, #0]
 800bf44:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	3b01      	subs	r3, #1
 800bf4a:	607b      	str	r3, [r7, #4]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1f1      	bne.n	800bf36 <mem_cpy+0x1a>
	}
}
 800bf52:	bf00      	nop
 800bf54:	371c      	adds	r7, #28
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr

0800bf5e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bf5e:	b480      	push	{r7}
 800bf60:	b087      	sub	sp, #28
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	60f8      	str	r0, [r7, #12]
 800bf66:	60b9      	str	r1, [r7, #8]
 800bf68:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	1c5a      	adds	r2, r3, #1
 800bf72:	617a      	str	r2, [r7, #20]
 800bf74:	68ba      	ldr	r2, [r7, #8]
 800bf76:	b2d2      	uxtb	r2, r2
 800bf78:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	607b      	str	r3, [r7, #4]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d1f3      	bne.n	800bf6e <mem_set+0x10>
}
 800bf86:	bf00      	nop
 800bf88:	bf00      	nop
 800bf8a:	371c      	adds	r7, #28
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bf94:	b480      	push	{r7}
 800bf96:	b089      	sub	sp, #36	; 0x24
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	61fb      	str	r3, [r7, #28]
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	1c5a      	adds	r2, r3, #1
 800bfb0:	61fa      	str	r2, [r7, #28]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	1c5a      	adds	r2, r3, #1
 800bfba:	61ba      	str	r2, [r7, #24]
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	1acb      	subs	r3, r1, r3
 800bfc0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	607b      	str	r3, [r7, #4]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d002      	beq.n	800bfd4 <mem_cmp+0x40>
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d0eb      	beq.n	800bfac <mem_cmp+0x18>

	return r;
 800bfd4:	697b      	ldr	r3, [r7, #20]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3724      	adds	r7, #36	; 0x24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr

0800bfe2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bfe2:	b480      	push	{r7}
 800bfe4:	b083      	sub	sp, #12
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
 800bfea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bfec:	e002      	b.n	800bff4 <chk_chr+0x12>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	3301      	adds	r3, #1
 800bff2:	607b      	str	r3, [r7, #4]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d005      	beq.n	800c008 <chk_chr+0x26>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	461a      	mov	r2, r3
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	4293      	cmp	r3, r2
 800c006:	d1f2      	bne.n	800bfee <chk_chr+0xc>
	return *str;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	781b      	ldrb	r3, [r3, #0]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	370c      	adds	r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d009      	beq.n	800c03a <lock_fs+0x22>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	4618      	mov	r0, r3
 800c02c:	f003 fbc2 	bl	800f7b4 <ff_req_grant>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d001      	beq.n	800c03a <lock_fs+0x22>
 800c036:	2301      	movs	r3, #1
 800c038:	e000      	b.n	800c03c <lock_fs+0x24>
 800c03a:	2300      	movs	r3, #0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3708      	adds	r7, #8
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	460b      	mov	r3, r1
 800c04e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00d      	beq.n	800c072 <unlock_fs+0x2e>
 800c056:	78fb      	ldrb	r3, [r7, #3]
 800c058:	2b0c      	cmp	r3, #12
 800c05a:	d00a      	beq.n	800c072 <unlock_fs+0x2e>
 800c05c:	78fb      	ldrb	r3, [r7, #3]
 800c05e:	2b0b      	cmp	r3, #11
 800c060:	d007      	beq.n	800c072 <unlock_fs+0x2e>
 800c062:	78fb      	ldrb	r3, [r7, #3]
 800c064:	2b0f      	cmp	r3, #15
 800c066:	d004      	beq.n	800c072 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	691b      	ldr	r3, [r3, #16]
 800c06c:	4618      	mov	r0, r3
 800c06e:	f003 fbb6 	bl	800f7de <ff_rel_grant>
	}
}
 800c072:	bf00      	nop
 800c074:	3708      	adds	r7, #8
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
	...

0800c07c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b085      	sub	sp, #20
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c086:	2300      	movs	r3, #0
 800c088:	60bb      	str	r3, [r7, #8]
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	60fb      	str	r3, [r7, #12]
 800c08e:	e029      	b.n	800c0e4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c090:	4a27      	ldr	r2, [pc, #156]	; (800c130 <chk_lock+0xb4>)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	011b      	lsls	r3, r3, #4
 800c096:	4413      	add	r3, r2
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d01d      	beq.n	800c0da <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c09e:	4a24      	ldr	r2, [pc, #144]	; (800c130 <chk_lock+0xb4>)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	011b      	lsls	r3, r3, #4
 800c0a4:	4413      	add	r3, r2
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d116      	bne.n	800c0de <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c0b0:	4a1f      	ldr	r2, [pc, #124]	; (800c130 <chk_lock+0xb4>)
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	011b      	lsls	r3, r3, #4
 800c0b6:	4413      	add	r3, r2
 800c0b8:	3304      	adds	r3, #4
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d10c      	bne.n	800c0de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c0c4:	4a1a      	ldr	r2, [pc, #104]	; (800c130 <chk_lock+0xb4>)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	011b      	lsls	r3, r3, #4
 800c0ca:	4413      	add	r3, r2
 800c0cc:	3308      	adds	r3, #8
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d102      	bne.n	800c0de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c0d8:	e007      	b.n	800c0ea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	60fb      	str	r3, [r7, #12]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d9d2      	bls.n	800c090 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2b02      	cmp	r3, #2
 800c0ee:	d109      	bne.n	800c104 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d102      	bne.n	800c0fc <chk_lock+0x80>
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	2b02      	cmp	r3, #2
 800c0fa:	d101      	bne.n	800c100 <chk_lock+0x84>
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	e010      	b.n	800c122 <chk_lock+0xa6>
 800c100:	2312      	movs	r3, #18
 800c102:	e00e      	b.n	800c122 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d108      	bne.n	800c11c <chk_lock+0xa0>
 800c10a:	4a09      	ldr	r2, [pc, #36]	; (800c130 <chk_lock+0xb4>)
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	011b      	lsls	r3, r3, #4
 800c110:	4413      	add	r3, r2
 800c112:	330c      	adds	r3, #12
 800c114:	881b      	ldrh	r3, [r3, #0]
 800c116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c11a:	d101      	bne.n	800c120 <chk_lock+0xa4>
 800c11c:	2310      	movs	r3, #16
 800c11e:	e000      	b.n	800c122 <chk_lock+0xa6>
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	3714      	adds	r7, #20
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr
 800c12e:	bf00      	nop
 800c130:	20001ca4 	.word	0x20001ca4

0800c134 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c134:	b480      	push	{r7}
 800c136:	b083      	sub	sp, #12
 800c138:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c13a:	2300      	movs	r3, #0
 800c13c:	607b      	str	r3, [r7, #4]
 800c13e:	e002      	b.n	800c146 <enq_lock+0x12>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	3301      	adds	r3, #1
 800c144:	607b      	str	r3, [r7, #4]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d806      	bhi.n	800c15a <enq_lock+0x26>
 800c14c:	4a09      	ldr	r2, [pc, #36]	; (800c174 <enq_lock+0x40>)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	011b      	lsls	r3, r3, #4
 800c152:	4413      	add	r3, r2
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1f2      	bne.n	800c140 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b02      	cmp	r3, #2
 800c15e:	bf14      	ite	ne
 800c160:	2301      	movne	r3, #1
 800c162:	2300      	moveq	r3, #0
 800c164:	b2db      	uxtb	r3, r3
}
 800c166:	4618      	mov	r0, r3
 800c168:	370c      	adds	r7, #12
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	20001ca4 	.word	0x20001ca4

0800c178 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c178:	b480      	push	{r7}
 800c17a:	b085      	sub	sp, #20
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c182:	2300      	movs	r3, #0
 800c184:	60fb      	str	r3, [r7, #12]
 800c186:	e01f      	b.n	800c1c8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c188:	4a41      	ldr	r2, [pc, #260]	; (800c290 <inc_lock+0x118>)
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	011b      	lsls	r3, r3, #4
 800c18e:	4413      	add	r3, r2
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	429a      	cmp	r2, r3
 800c198:	d113      	bne.n	800c1c2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c19a:	4a3d      	ldr	r2, [pc, #244]	; (800c290 <inc_lock+0x118>)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	011b      	lsls	r3, r3, #4
 800c1a0:	4413      	add	r3, r2
 800c1a2:	3304      	adds	r3, #4
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d109      	bne.n	800c1c2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c1ae:	4a38      	ldr	r2, [pc, #224]	; (800c290 <inc_lock+0x118>)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	011b      	lsls	r3, r3, #4
 800c1b4:	4413      	add	r3, r2
 800c1b6:	3308      	adds	r3, #8
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d006      	beq.n	800c1d0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	60fb      	str	r3, [r7, #12]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d9dc      	bls.n	800c188 <inc_lock+0x10>
 800c1ce:	e000      	b.n	800c1d2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c1d0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2b02      	cmp	r3, #2
 800c1d6:	d132      	bne.n	800c23e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	60fb      	str	r3, [r7, #12]
 800c1dc:	e002      	b.n	800c1e4 <inc_lock+0x6c>
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	60fb      	str	r3, [r7, #12]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d806      	bhi.n	800c1f8 <inc_lock+0x80>
 800c1ea:	4a29      	ldr	r2, [pc, #164]	; (800c290 <inc_lock+0x118>)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	011b      	lsls	r3, r3, #4
 800c1f0:	4413      	add	r3, r2
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d1f2      	bne.n	800c1de <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	d101      	bne.n	800c202 <inc_lock+0x8a>
 800c1fe:	2300      	movs	r3, #0
 800c200:	e040      	b.n	800c284 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	4922      	ldr	r1, [pc, #136]	; (800c290 <inc_lock+0x118>)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	011b      	lsls	r3, r3, #4
 800c20c:	440b      	add	r3, r1
 800c20e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	689a      	ldr	r2, [r3, #8]
 800c214:	491e      	ldr	r1, [pc, #120]	; (800c290 <inc_lock+0x118>)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	011b      	lsls	r3, r3, #4
 800c21a:	440b      	add	r3, r1
 800c21c:	3304      	adds	r3, #4
 800c21e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	695a      	ldr	r2, [r3, #20]
 800c224:	491a      	ldr	r1, [pc, #104]	; (800c290 <inc_lock+0x118>)
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	011b      	lsls	r3, r3, #4
 800c22a:	440b      	add	r3, r1
 800c22c:	3308      	adds	r3, #8
 800c22e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c230:	4a17      	ldr	r2, [pc, #92]	; (800c290 <inc_lock+0x118>)
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	011b      	lsls	r3, r3, #4
 800c236:	4413      	add	r3, r2
 800c238:	330c      	adds	r3, #12
 800c23a:	2200      	movs	r2, #0
 800c23c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d009      	beq.n	800c258 <inc_lock+0xe0>
 800c244:	4a12      	ldr	r2, [pc, #72]	; (800c290 <inc_lock+0x118>)
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	011b      	lsls	r3, r3, #4
 800c24a:	4413      	add	r3, r2
 800c24c:	330c      	adds	r3, #12
 800c24e:	881b      	ldrh	r3, [r3, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d001      	beq.n	800c258 <inc_lock+0xe0>
 800c254:	2300      	movs	r3, #0
 800c256:	e015      	b.n	800c284 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d108      	bne.n	800c270 <inc_lock+0xf8>
 800c25e:	4a0c      	ldr	r2, [pc, #48]	; (800c290 <inc_lock+0x118>)
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	011b      	lsls	r3, r3, #4
 800c264:	4413      	add	r3, r2
 800c266:	330c      	adds	r3, #12
 800c268:	881b      	ldrh	r3, [r3, #0]
 800c26a:	3301      	adds	r3, #1
 800c26c:	b29a      	uxth	r2, r3
 800c26e:	e001      	b.n	800c274 <inc_lock+0xfc>
 800c270:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c274:	4906      	ldr	r1, [pc, #24]	; (800c290 <inc_lock+0x118>)
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	011b      	lsls	r3, r3, #4
 800c27a:	440b      	add	r3, r1
 800c27c:	330c      	adds	r3, #12
 800c27e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	3301      	adds	r3, #1
}
 800c284:	4618      	mov	r0, r3
 800c286:	3714      	adds	r7, #20
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr
 800c290:	20001ca4 	.word	0x20001ca4

0800c294 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c294:	b480      	push	{r7}
 800c296:	b085      	sub	sp, #20
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	607b      	str	r3, [r7, #4]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d825      	bhi.n	800c2f4 <dec_lock+0x60>
		n = Files[i].ctr;
 800c2a8:	4a17      	ldr	r2, [pc, #92]	; (800c308 <dec_lock+0x74>)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	011b      	lsls	r3, r3, #4
 800c2ae:	4413      	add	r3, r2
 800c2b0:	330c      	adds	r3, #12
 800c2b2:	881b      	ldrh	r3, [r3, #0]
 800c2b4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c2b6:	89fb      	ldrh	r3, [r7, #14]
 800c2b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2bc:	d101      	bne.n	800c2c2 <dec_lock+0x2e>
 800c2be:	2300      	movs	r3, #0
 800c2c0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c2c2:	89fb      	ldrh	r3, [r7, #14]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d002      	beq.n	800c2ce <dec_lock+0x3a>
 800c2c8:	89fb      	ldrh	r3, [r7, #14]
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c2ce:	4a0e      	ldr	r2, [pc, #56]	; (800c308 <dec_lock+0x74>)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	011b      	lsls	r3, r3, #4
 800c2d4:	4413      	add	r3, r2
 800c2d6:	330c      	adds	r3, #12
 800c2d8:	89fa      	ldrh	r2, [r7, #14]
 800c2da:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c2dc:	89fb      	ldrh	r3, [r7, #14]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d105      	bne.n	800c2ee <dec_lock+0x5a>
 800c2e2:	4a09      	ldr	r2, [pc, #36]	; (800c308 <dec_lock+0x74>)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	011b      	lsls	r3, r3, #4
 800c2e8:	4413      	add	r3, r2
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	737b      	strb	r3, [r7, #13]
 800c2f2:	e001      	b.n	800c2f8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c2f4:	2302      	movs	r3, #2
 800c2f6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c2f8:	7b7b      	ldrb	r3, [r7, #13]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3714      	adds	r7, #20
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop
 800c308:	20001ca4 	.word	0x20001ca4

0800c30c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b085      	sub	sp, #20
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c314:	2300      	movs	r3, #0
 800c316:	60fb      	str	r3, [r7, #12]
 800c318:	e010      	b.n	800c33c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c31a:	4a0d      	ldr	r2, [pc, #52]	; (800c350 <clear_lock+0x44>)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	011b      	lsls	r3, r3, #4
 800c320:	4413      	add	r3, r2
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	429a      	cmp	r2, r3
 800c328:	d105      	bne.n	800c336 <clear_lock+0x2a>
 800c32a:	4a09      	ldr	r2, [pc, #36]	; (800c350 <clear_lock+0x44>)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	011b      	lsls	r3, r3, #4
 800c330:	4413      	add	r3, r2
 800c332:	2200      	movs	r2, #0
 800c334:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	3301      	adds	r3, #1
 800c33a:	60fb      	str	r3, [r7, #12]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d9eb      	bls.n	800c31a <clear_lock+0xe>
	}
}
 800c342:	bf00      	nop
 800c344:	bf00      	nop
 800c346:	3714      	adds	r7, #20
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr
 800c350:	20001ca4 	.word	0x20001ca4

0800c354 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b086      	sub	sp, #24
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c35c:	2300      	movs	r3, #0
 800c35e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	78db      	ldrb	r3, [r3, #3]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d034      	beq.n	800c3d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c36c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	7858      	ldrb	r0, [r3, #1]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c378:	2301      	movs	r3, #1
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	f7ff fd0e 	bl	800bd9c <disk_write>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d002      	beq.n	800c38c <sync_window+0x38>
			res = FR_DISK_ERR;
 800c386:	2301      	movs	r3, #1
 800c388:	73fb      	strb	r3, [r7, #15]
 800c38a:	e022      	b.n	800c3d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2200      	movs	r2, #0
 800c390:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c396:	697a      	ldr	r2, [r7, #20]
 800c398:	1ad2      	subs	r2, r2, r3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6a1b      	ldr	r3, [r3, #32]
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d217      	bcs.n	800c3d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	789b      	ldrb	r3, [r3, #2]
 800c3a6:	613b      	str	r3, [r7, #16]
 800c3a8:	e010      	b.n	800c3cc <sync_window+0x78>
					wsect += fs->fsize;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a1b      	ldr	r3, [r3, #32]
 800c3ae:	697a      	ldr	r2, [r7, #20]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	7858      	ldrb	r0, [r3, #1]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c3be:	2301      	movs	r3, #1
 800c3c0:	697a      	ldr	r2, [r7, #20]
 800c3c2:	f7ff fceb 	bl	800bd9c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	3b01      	subs	r3, #1
 800c3ca:	613b      	str	r3, [r7, #16]
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d8eb      	bhi.n	800c3aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3718      	adds	r7, #24
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ee:	683a      	ldr	r2, [r7, #0]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d01b      	beq.n	800c42c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7ff ffad 	bl	800c354 <sync_window>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c3fe:	7bfb      	ldrb	r3, [r7, #15]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d113      	bne.n	800c42c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	7858      	ldrb	r0, [r3, #1]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c40e:	2301      	movs	r3, #1
 800c410:	683a      	ldr	r2, [r7, #0]
 800c412:	f7ff fca3 	bl	800bd5c <disk_read>
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d004      	beq.n	800c426 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c41c:	f04f 33ff 	mov.w	r3, #4294967295
 800c420:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c422:	2301      	movs	r3, #1
 800c424:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	683a      	ldr	r2, [r7, #0]
 800c42a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800c42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
	...

0800c438 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f7ff ff87 	bl	800c354 <sync_window>
 800c446:	4603      	mov	r3, r0
 800c448:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c44a:	7bfb      	ldrb	r3, [r7, #15]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d158      	bne.n	800c502 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	2b03      	cmp	r3, #3
 800c456:	d148      	bne.n	800c4ea <sync_fs+0xb2>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	791b      	ldrb	r3, [r3, #4]
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d144      	bne.n	800c4ea <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	3338      	adds	r3, #56	; 0x38
 800c464:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c468:	2100      	movs	r1, #0
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7ff fd77 	bl	800bf5e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	3338      	adds	r3, #56	; 0x38
 800c474:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c478:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7ff fd06 	bl	800be8e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	3338      	adds	r3, #56	; 0x38
 800c486:	4921      	ldr	r1, [pc, #132]	; (800c50c <sync_fs+0xd4>)
 800c488:	4618      	mov	r0, r3
 800c48a:	f7ff fd1b 	bl	800bec4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	3338      	adds	r3, #56	; 0x38
 800c492:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c496:	491e      	ldr	r1, [pc, #120]	; (800c510 <sync_fs+0xd8>)
 800c498:	4618      	mov	r0, r3
 800c49a:	f7ff fd13 	bl	800bec4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	3338      	adds	r3, #56	; 0x38
 800c4a2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	699b      	ldr	r3, [r3, #24]
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	4610      	mov	r0, r2
 800c4ae:	f7ff fd09 	bl	800bec4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	3338      	adds	r3, #56	; 0x38
 800c4b6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	695b      	ldr	r3, [r3, #20]
 800c4be:	4619      	mov	r1, r3
 800c4c0:	4610      	mov	r0, r2
 800c4c2:	f7ff fcff 	bl	800bec4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ca:	1c5a      	adds	r2, r3, #1
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	7858      	ldrb	r0, [r3, #1]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4de:	2301      	movs	r3, #1
 800c4e0:	f7ff fc5c 	bl	800bd9c <disk_write>
			fs->fsi_flag = 0;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	785b      	ldrb	r3, [r3, #1]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	2100      	movs	r1, #0
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7ff fc72 	bl	800bddc <disk_ioctl>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d001      	beq.n	800c502 <sync_fs+0xca>
 800c4fe:	2301      	movs	r3, #1
 800c500:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c502:	7bfb      	ldrb	r3, [r7, #15]
}
 800c504:	4618      	mov	r0, r3
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	41615252 	.word	0x41615252
 800c510:	61417272 	.word	0x61417272

0800c514 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	3b02      	subs	r3, #2
 800c522:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	69db      	ldr	r3, [r3, #28]
 800c528:	3b02      	subs	r3, #2
 800c52a:	683a      	ldr	r2, [r7, #0]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d301      	bcc.n	800c534 <clust2sect+0x20>
 800c530:	2300      	movs	r3, #0
 800c532:	e008      	b.n	800c546 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	895b      	ldrh	r3, [r3, #10]
 800c538:	461a      	mov	r2, r3
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	fb03 f202 	mul.w	r2, r3, r2
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c544:	4413      	add	r3, r2
}
 800c546:	4618      	mov	r0, r3
 800c548:	370c      	adds	r7, #12
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr

0800c552 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b086      	sub	sp, #24
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
 800c55a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	2b01      	cmp	r3, #1
 800c566:	d904      	bls.n	800c572 <get_fat+0x20>
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	69db      	ldr	r3, [r3, #28]
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d302      	bcc.n	800c578 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c572:	2301      	movs	r3, #1
 800c574:	617b      	str	r3, [r7, #20]
 800c576:	e08f      	b.n	800c698 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c578:	f04f 33ff 	mov.w	r3, #4294967295
 800c57c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	2b03      	cmp	r3, #3
 800c584:	d062      	beq.n	800c64c <get_fat+0xfa>
 800c586:	2b03      	cmp	r3, #3
 800c588:	dc7c      	bgt.n	800c684 <get_fat+0x132>
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d002      	beq.n	800c594 <get_fat+0x42>
 800c58e:	2b02      	cmp	r3, #2
 800c590:	d042      	beq.n	800c618 <get_fat+0xc6>
 800c592:	e077      	b.n	800c684 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	60fb      	str	r3, [r7, #12]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	085b      	lsrs	r3, r3, #1
 800c59c:	68fa      	ldr	r2, [r7, #12]
 800c59e:	4413      	add	r3, r2
 800c5a0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	0a5b      	lsrs	r3, r3, #9
 800c5aa:	4413      	add	r3, r2
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	6938      	ldr	r0, [r7, #16]
 800c5b0:	f7ff ff14 	bl	800c3dc <move_window>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d167      	bne.n	800c68a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	1c5a      	adds	r2, r3, #1
 800c5be:	60fa      	str	r2, [r7, #12]
 800c5c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5c4:	693a      	ldr	r2, [r7, #16]
 800c5c6:	4413      	add	r3, r2
 800c5c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c5cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	0a5b      	lsrs	r3, r3, #9
 800c5d6:	4413      	add	r3, r2
 800c5d8:	4619      	mov	r1, r3
 800c5da:	6938      	ldr	r0, [r7, #16]
 800c5dc:	f7ff fefe 	bl	800c3dc <move_window>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d153      	bne.n	800c68e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5ec:	693a      	ldr	r2, [r7, #16]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c5f4:	021b      	lsls	r3, r3, #8
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	f003 0301 	and.w	r3, r3, #1
 800c604:	2b00      	cmp	r3, #0
 800c606:	d002      	beq.n	800c60e <get_fat+0xbc>
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	091b      	lsrs	r3, r3, #4
 800c60c:	e002      	b.n	800c614 <get_fat+0xc2>
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c614:	617b      	str	r3, [r7, #20]
			break;
 800c616:	e03f      	b.n	800c698 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	0a1b      	lsrs	r3, r3, #8
 800c620:	4413      	add	r3, r2
 800c622:	4619      	mov	r1, r3
 800c624:	6938      	ldr	r0, [r7, #16]
 800c626:	f7ff fed9 	bl	800c3dc <move_window>
 800c62a:	4603      	mov	r3, r0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d130      	bne.n	800c692 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	005b      	lsls	r3, r3, #1
 800c63a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c63e:	4413      	add	r3, r2
 800c640:	4618      	mov	r0, r3
 800c642:	f7ff fbe9 	bl	800be18 <ld_word>
 800c646:	4603      	mov	r3, r0
 800c648:	617b      	str	r3, [r7, #20]
			break;
 800c64a:	e025      	b.n	800c698 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	09db      	lsrs	r3, r3, #7
 800c654:	4413      	add	r3, r2
 800c656:	4619      	mov	r1, r3
 800c658:	6938      	ldr	r0, [r7, #16]
 800c65a:	f7ff febf 	bl	800c3dc <move_window>
 800c65e:	4603      	mov	r3, r0
 800c660:	2b00      	cmp	r3, #0
 800c662:	d118      	bne.n	800c696 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	009b      	lsls	r3, r3, #2
 800c66e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c672:	4413      	add	r3, r2
 800c674:	4618      	mov	r0, r3
 800c676:	f7ff fbe7 	bl	800be48 <ld_dword>
 800c67a:	4603      	mov	r3, r0
 800c67c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c680:	617b      	str	r3, [r7, #20]
			break;
 800c682:	e009      	b.n	800c698 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c684:	2301      	movs	r3, #1
 800c686:	617b      	str	r3, [r7, #20]
 800c688:	e006      	b.n	800c698 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c68a:	bf00      	nop
 800c68c:	e004      	b.n	800c698 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c68e:	bf00      	nop
 800c690:	e002      	b.n	800c698 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c692:	bf00      	nop
 800c694:	e000      	b.n	800c698 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c696:	bf00      	nop
		}
	}

	return val;
 800c698:	697b      	ldr	r3, [r7, #20]
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3718      	adds	r7, #24
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c6a2:	b590      	push	{r4, r7, lr}
 800c6a4:	b089      	sub	sp, #36	; 0x24
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	60f8      	str	r0, [r7, #12]
 800c6aa:	60b9      	str	r1, [r7, #8]
 800c6ac:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c6ae:	2302      	movs	r3, #2
 800c6b0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	f240 80d2 	bls.w	800c85e <put_fat+0x1bc>
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	69db      	ldr	r3, [r3, #28]
 800c6be:	68ba      	ldr	r2, [r7, #8]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	f080 80cc 	bcs.w	800c85e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	2b03      	cmp	r3, #3
 800c6cc:	f000 8096 	beq.w	800c7fc <put_fat+0x15a>
 800c6d0:	2b03      	cmp	r3, #3
 800c6d2:	f300 80cd 	bgt.w	800c870 <put_fat+0x1ce>
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d002      	beq.n	800c6e0 <put_fat+0x3e>
 800c6da:	2b02      	cmp	r3, #2
 800c6dc:	d06e      	beq.n	800c7bc <put_fat+0x11a>
 800c6de:	e0c7      	b.n	800c870 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	61bb      	str	r3, [r7, #24]
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	085b      	lsrs	r3, r3, #1
 800c6e8:	69ba      	ldr	r2, [r7, #24]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	0a5b      	lsrs	r3, r3, #9
 800c6f6:	4413      	add	r3, r2
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	f7ff fe6e 	bl	800c3dc <move_window>
 800c700:	4603      	mov	r3, r0
 800c702:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c704:	7ffb      	ldrb	r3, [r7, #31]
 800c706:	2b00      	cmp	r3, #0
 800c708:	f040 80ab 	bne.w	800c862 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c712:	69bb      	ldr	r3, [r7, #24]
 800c714:	1c59      	adds	r1, r3, #1
 800c716:	61b9      	str	r1, [r7, #24]
 800c718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c71c:	4413      	add	r3, r2
 800c71e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	f003 0301 	and.w	r3, r3, #1
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00d      	beq.n	800c746 <put_fat+0xa4>
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	b25b      	sxtb	r3, r3
 800c730:	f003 030f 	and.w	r3, r3, #15
 800c734:	b25a      	sxtb	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	011b      	lsls	r3, r3, #4
 800c73c:	b25b      	sxtb	r3, r3
 800c73e:	4313      	orrs	r3, r2
 800c740:	b25b      	sxtb	r3, r3
 800c742:	b2db      	uxtb	r3, r3
 800c744:	e001      	b.n	800c74a <put_fat+0xa8>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	697a      	ldr	r2, [r7, #20]
 800c74c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2201      	movs	r2, #1
 800c752:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	0a5b      	lsrs	r3, r3, #9
 800c75c:	4413      	add	r3, r2
 800c75e:	4619      	mov	r1, r3
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f7ff fe3b 	bl	800c3dc <move_window>
 800c766:	4603      	mov	r3, r0
 800c768:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c76a:	7ffb      	ldrb	r3, [r7, #31]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d17a      	bne.n	800c866 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c776:	69bb      	ldr	r3, [r7, #24]
 800c778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c77c:	4413      	add	r3, r2
 800c77e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	f003 0301 	and.w	r3, r3, #1
 800c786:	2b00      	cmp	r3, #0
 800c788:	d003      	beq.n	800c792 <put_fat+0xf0>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	091b      	lsrs	r3, r3, #4
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	e00e      	b.n	800c7b0 <put_fat+0x10e>
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	b25b      	sxtb	r3, r3
 800c798:	f023 030f 	bic.w	r3, r3, #15
 800c79c:	b25a      	sxtb	r2, r3
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	0a1b      	lsrs	r3, r3, #8
 800c7a2:	b25b      	sxtb	r3, r3
 800c7a4:	f003 030f 	and.w	r3, r3, #15
 800c7a8:	b25b      	sxtb	r3, r3
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	b25b      	sxtb	r3, r3
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	697a      	ldr	r2, [r7, #20]
 800c7b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	70da      	strb	r2, [r3, #3]
			break;
 800c7ba:	e059      	b.n	800c870 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	0a1b      	lsrs	r3, r3, #8
 800c7c4:	4413      	add	r3, r2
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	68f8      	ldr	r0, [r7, #12]
 800c7ca:	f7ff fe07 	bl	800c3dc <move_window>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c7d2:	7ffb      	ldrb	r3, [r7, #31]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d148      	bne.n	800c86a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	005b      	lsls	r3, r3, #1
 800c7e2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c7e6:	4413      	add	r3, r2
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	b292      	uxth	r2, r2
 800c7ec:	4611      	mov	r1, r2
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7ff fb4d 	bl	800be8e <st_word>
			fs->wflag = 1;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	70da      	strb	r2, [r3, #3]
			break;
 800c7fa:	e039      	b.n	800c870 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	09db      	lsrs	r3, r3, #7
 800c804:	4413      	add	r3, r2
 800c806:	4619      	mov	r1, r3
 800c808:	68f8      	ldr	r0, [r7, #12]
 800c80a:	f7ff fde7 	bl	800c3dc <move_window>
 800c80e:	4603      	mov	r3, r0
 800c810:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c812:	7ffb      	ldrb	r3, [r7, #31]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d12a      	bne.n	800c86e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c82c:	4413      	add	r3, r2
 800c82e:	4618      	mov	r0, r3
 800c830:	f7ff fb0a 	bl	800be48 <ld_dword>
 800c834:	4603      	mov	r3, r0
 800c836:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c83a:	4323      	orrs	r3, r4
 800c83c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c84c:	4413      	add	r3, r2
 800c84e:	6879      	ldr	r1, [r7, #4]
 800c850:	4618      	mov	r0, r3
 800c852:	f7ff fb37 	bl	800bec4 <st_dword>
			fs->wflag = 1;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	2201      	movs	r2, #1
 800c85a:	70da      	strb	r2, [r3, #3]
			break;
 800c85c:	e008      	b.n	800c870 <put_fat+0x1ce>
		}
	}
 800c85e:	bf00      	nop
 800c860:	e006      	b.n	800c870 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c862:	bf00      	nop
 800c864:	e004      	b.n	800c870 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c866:	bf00      	nop
 800c868:	e002      	b.n	800c870 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c86a:	bf00      	nop
 800c86c:	e000      	b.n	800c870 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c86e:	bf00      	nop
	return res;
 800c870:	7ffb      	ldrb	r3, [r7, #31]
}
 800c872:	4618      	mov	r0, r3
 800c874:	3724      	adds	r7, #36	; 0x24
 800c876:	46bd      	mov	sp, r7
 800c878:	bd90      	pop	{r4, r7, pc}

0800c87a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b088      	sub	sp, #32
 800c87e:	af00      	add	r7, sp, #0
 800c880:	60f8      	str	r0, [r7, #12]
 800c882:	60b9      	str	r1, [r7, #8]
 800c884:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c886:	2300      	movs	r3, #0
 800c888:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	2b01      	cmp	r3, #1
 800c894:	d904      	bls.n	800c8a0 <remove_chain+0x26>
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	69db      	ldr	r3, [r3, #28]
 800c89a:	68ba      	ldr	r2, [r7, #8]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d301      	bcc.n	800c8a4 <remove_chain+0x2a>
 800c8a0:	2302      	movs	r3, #2
 800c8a2:	e04b      	b.n	800c93c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00c      	beq.n	800c8c4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ae:	6879      	ldr	r1, [r7, #4]
 800c8b0:	69b8      	ldr	r0, [r7, #24]
 800c8b2:	f7ff fef6 	bl	800c6a2 <put_fat>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c8ba:	7ffb      	ldrb	r3, [r7, #31]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d001      	beq.n	800c8c4 <remove_chain+0x4a>
 800c8c0:	7ffb      	ldrb	r3, [r7, #31]
 800c8c2:	e03b      	b.n	800c93c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c8c4:	68b9      	ldr	r1, [r7, #8]
 800c8c6:	68f8      	ldr	r0, [r7, #12]
 800c8c8:	f7ff fe43 	bl	800c552 <get_fat>
 800c8cc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d031      	beq.n	800c938 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d101      	bne.n	800c8de <remove_chain+0x64>
 800c8da:	2302      	movs	r3, #2
 800c8dc:	e02e      	b.n	800c93c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e4:	d101      	bne.n	800c8ea <remove_chain+0x70>
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	e028      	b.n	800c93c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	68b9      	ldr	r1, [r7, #8]
 800c8ee:	69b8      	ldr	r0, [r7, #24]
 800c8f0:	f7ff fed7 	bl	800c6a2 <put_fat>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c8f8:	7ffb      	ldrb	r3, [r7, #31]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d001      	beq.n	800c902 <remove_chain+0x88>
 800c8fe:	7ffb      	ldrb	r3, [r7, #31]
 800c900:	e01c      	b.n	800c93c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c902:	69bb      	ldr	r3, [r7, #24]
 800c904:	699a      	ldr	r2, [r3, #24]
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	69db      	ldr	r3, [r3, #28]
 800c90a:	3b02      	subs	r3, #2
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d20b      	bcs.n	800c928 <remove_chain+0xae>
			fs->free_clst++;
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	699b      	ldr	r3, [r3, #24]
 800c914:	1c5a      	adds	r2, r3, #1
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	791b      	ldrb	r3, [r3, #4]
 800c91e:	f043 0301 	orr.w	r3, r3, #1
 800c922:	b2da      	uxtb	r2, r3
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	69db      	ldr	r3, [r3, #28]
 800c930:	68ba      	ldr	r2, [r7, #8]
 800c932:	429a      	cmp	r2, r3
 800c934:	d3c6      	bcc.n	800c8c4 <remove_chain+0x4a>
 800c936:	e000      	b.n	800c93a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c938:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c93a:	2300      	movs	r3, #0
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3720      	adds	r7, #32
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b088      	sub	sp, #32
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d10d      	bne.n	800c976 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	695b      	ldr	r3, [r3, #20]
 800c95e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d004      	beq.n	800c970 <create_chain+0x2c>
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	69db      	ldr	r3, [r3, #28]
 800c96a:	69ba      	ldr	r2, [r7, #24]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d31b      	bcc.n	800c9a8 <create_chain+0x64>
 800c970:	2301      	movs	r3, #1
 800c972:	61bb      	str	r3, [r7, #24]
 800c974:	e018      	b.n	800c9a8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c976:	6839      	ldr	r1, [r7, #0]
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f7ff fdea 	bl	800c552 <get_fat>
 800c97e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2b01      	cmp	r3, #1
 800c984:	d801      	bhi.n	800c98a <create_chain+0x46>
 800c986:	2301      	movs	r3, #1
 800c988:	e070      	b.n	800ca6c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c990:	d101      	bne.n	800c996 <create_chain+0x52>
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	e06a      	b.n	800ca6c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	69db      	ldr	r3, [r3, #28]
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d201      	bcs.n	800c9a4 <create_chain+0x60>
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	e063      	b.n	800ca6c <create_chain+0x128>
		scl = clst;
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c9a8:	69bb      	ldr	r3, [r7, #24]
 800c9aa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c9ac:	69fb      	ldr	r3, [r7, #28]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	69db      	ldr	r3, [r3, #28]
 800c9b6:	69fa      	ldr	r2, [r7, #28]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d307      	bcc.n	800c9cc <create_chain+0x88>
				ncl = 2;
 800c9bc:	2302      	movs	r3, #2
 800c9be:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c9c0:	69fa      	ldr	r2, [r7, #28]
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d901      	bls.n	800c9cc <create_chain+0x88>
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	e04f      	b.n	800ca6c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c9cc:	69f9      	ldr	r1, [r7, #28]
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f7ff fdbf 	bl	800c552 <get_fat>
 800c9d4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00e      	beq.n	800c9fa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d003      	beq.n	800c9ea <create_chain+0xa6>
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9e8:	d101      	bne.n	800c9ee <create_chain+0xaa>
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	e03e      	b.n	800ca6c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c9ee:	69fa      	ldr	r2, [r7, #28]
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d1da      	bne.n	800c9ac <create_chain+0x68>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	e038      	b.n	800ca6c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c9fa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800ca00:	69f9      	ldr	r1, [r7, #28]
 800ca02:	6938      	ldr	r0, [r7, #16]
 800ca04:	f7ff fe4d 	bl	800c6a2 <put_fat>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ca0c:	7dfb      	ldrb	r3, [r7, #23]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d109      	bne.n	800ca26 <create_chain+0xe2>
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d006      	beq.n	800ca26 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ca18:	69fa      	ldr	r2, [r7, #28]
 800ca1a:	6839      	ldr	r1, [r7, #0]
 800ca1c:	6938      	ldr	r0, [r7, #16]
 800ca1e:	f7ff fe40 	bl	800c6a2 <put_fat>
 800ca22:	4603      	mov	r3, r0
 800ca24:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ca26:	7dfb      	ldrb	r3, [r7, #23]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d116      	bne.n	800ca5a <create_chain+0x116>
		fs->last_clst = ncl;
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	69fa      	ldr	r2, [r7, #28]
 800ca30:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	699a      	ldr	r2, [r3, #24]
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	69db      	ldr	r3, [r3, #28]
 800ca3a:	3b02      	subs	r3, #2
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d804      	bhi.n	800ca4a <create_chain+0x106>
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	699b      	ldr	r3, [r3, #24]
 800ca44:	1e5a      	subs	r2, r3, #1
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	791b      	ldrb	r3, [r3, #4]
 800ca4e:	f043 0301 	orr.w	r3, r3, #1
 800ca52:	b2da      	uxtb	r2, r3
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	711a      	strb	r2, [r3, #4]
 800ca58:	e007      	b.n	800ca6a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ca5a:	7dfb      	ldrb	r3, [r7, #23]
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d102      	bne.n	800ca66 <create_chain+0x122>
 800ca60:	f04f 33ff 	mov.w	r3, #4294967295
 800ca64:	e000      	b.n	800ca68 <create_chain+0x124>
 800ca66:	2301      	movs	r3, #1
 800ca68:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ca6a:	69fb      	ldr	r3, [r7, #28]
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3720      	adds	r7, #32
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b087      	sub	sp, #28
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca88:	3304      	adds	r3, #4
 800ca8a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	0a5b      	lsrs	r3, r3, #9
 800ca90:	68fa      	ldr	r2, [r7, #12]
 800ca92:	8952      	ldrh	r2, [r2, #10]
 800ca94:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca98:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	1d1a      	adds	r2, r3, #4
 800ca9e:	613a      	str	r2, [r7, #16]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d101      	bne.n	800caae <clmt_clust+0x3a>
 800caaa:	2300      	movs	r3, #0
 800caac:	e010      	b.n	800cad0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800caae:	697a      	ldr	r2, [r7, #20]
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d307      	bcc.n	800cac6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cab6:	697a      	ldr	r2, [r7, #20]
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	1ad3      	subs	r3, r2, r3
 800cabc:	617b      	str	r3, [r7, #20]
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	3304      	adds	r3, #4
 800cac2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cac4:	e7e9      	b.n	800ca9a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cac6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	4413      	add	r3, r2
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	371c      	adds	r7, #28
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr

0800cadc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b086      	sub	sp, #24
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800caf2:	d204      	bcs.n	800cafe <dir_sdi+0x22>
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	f003 031f 	and.w	r3, r3, #31
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cafe:	2302      	movs	r3, #2
 800cb00:	e063      	b.n	800cbca <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	683a      	ldr	r2, [r7, #0]
 800cb06:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	689b      	ldr	r3, [r3, #8]
 800cb0c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d106      	bne.n	800cb22 <dir_sdi+0x46>
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	2b02      	cmp	r3, #2
 800cb1a:	d902      	bls.n	800cb22 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb20:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d10c      	bne.n	800cb42 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	095b      	lsrs	r3, r3, #5
 800cb2c:	693a      	ldr	r2, [r7, #16]
 800cb2e:	8912      	ldrh	r2, [r2, #8]
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d301      	bcc.n	800cb38 <dir_sdi+0x5c>
 800cb34:	2302      	movs	r3, #2
 800cb36:	e048      	b.n	800cbca <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	61da      	str	r2, [r3, #28]
 800cb40:	e029      	b.n	800cb96 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	895b      	ldrh	r3, [r3, #10]
 800cb46:	025b      	lsls	r3, r3, #9
 800cb48:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cb4a:	e019      	b.n	800cb80 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6979      	ldr	r1, [r7, #20]
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7ff fcfe 	bl	800c552 <get_fat>
 800cb56:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb5e:	d101      	bne.n	800cb64 <dir_sdi+0x88>
 800cb60:	2301      	movs	r3, #1
 800cb62:	e032      	b.n	800cbca <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d904      	bls.n	800cb74 <dir_sdi+0x98>
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	69db      	ldr	r3, [r3, #28]
 800cb6e:	697a      	ldr	r2, [r7, #20]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d301      	bcc.n	800cb78 <dir_sdi+0x9c>
 800cb74:	2302      	movs	r3, #2
 800cb76:	e028      	b.n	800cbca <dir_sdi+0xee>
			ofs -= csz;
 800cb78:	683a      	ldr	r2, [r7, #0]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	1ad3      	subs	r3, r2, r3
 800cb7e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cb80:	683a      	ldr	r2, [r7, #0]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d2e1      	bcs.n	800cb4c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cb88:	6979      	ldr	r1, [r7, #20]
 800cb8a:	6938      	ldr	r0, [r7, #16]
 800cb8c:	f7ff fcc2 	bl	800c514 <clust2sect>
 800cb90:	4602      	mov	r2, r0
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	697a      	ldr	r2, [r7, #20]
 800cb9a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	69db      	ldr	r3, [r3, #28]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d101      	bne.n	800cba8 <dir_sdi+0xcc>
 800cba4:	2302      	movs	r3, #2
 800cba6:	e010      	b.n	800cbca <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	69da      	ldr	r2, [r3, #28]
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	0a5b      	lsrs	r3, r3, #9
 800cbb0:	441a      	add	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbc2:	441a      	add	r2, r3
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cbc8:	2300      	movs	r3, #0
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3718      	adds	r7, #24
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cbd2:	b580      	push	{r7, lr}
 800cbd4:	b086      	sub	sp, #24
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
 800cbda:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	695b      	ldr	r3, [r3, #20]
 800cbe6:	3320      	adds	r3, #32
 800cbe8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	69db      	ldr	r3, [r3, #28]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d003      	beq.n	800cbfa <dir_next+0x28>
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cbf8:	d301      	bcc.n	800cbfe <dir_next+0x2c>
 800cbfa:	2304      	movs	r3, #4
 800cbfc:	e0aa      	b.n	800cd54 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	f040 8098 	bne.w	800cd3a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	69db      	ldr	r3, [r3, #28]
 800cc0e:	1c5a      	adds	r2, r3, #1
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	699b      	ldr	r3, [r3, #24]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d10b      	bne.n	800cc34 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	095b      	lsrs	r3, r3, #5
 800cc20:	68fa      	ldr	r2, [r7, #12]
 800cc22:	8912      	ldrh	r2, [r2, #8]
 800cc24:	4293      	cmp	r3, r2
 800cc26:	f0c0 8088 	bcc.w	800cd3a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	61da      	str	r2, [r3, #28]
 800cc30:	2304      	movs	r3, #4
 800cc32:	e08f      	b.n	800cd54 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	0a5b      	lsrs	r3, r3, #9
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	8952      	ldrh	r2, [r2, #10]
 800cc3c:	3a01      	subs	r2, #1
 800cc3e:	4013      	ands	r3, r2
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d17a      	bne.n	800cd3a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	699b      	ldr	r3, [r3, #24]
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	4610      	mov	r0, r2
 800cc4e:	f7ff fc80 	bl	800c552 <get_fat>
 800cc52:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d801      	bhi.n	800cc5e <dir_next+0x8c>
 800cc5a:	2302      	movs	r3, #2
 800cc5c:	e07a      	b.n	800cd54 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc64:	d101      	bne.n	800cc6a <dir_next+0x98>
 800cc66:	2301      	movs	r3, #1
 800cc68:	e074      	b.n	800cd54 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	69db      	ldr	r3, [r3, #28]
 800cc6e:	697a      	ldr	r2, [r7, #20]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d358      	bcc.n	800cd26 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d104      	bne.n	800cc84 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	61da      	str	r2, [r3, #28]
 800cc80:	2304      	movs	r3, #4
 800cc82:	e067      	b.n	800cd54 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	699b      	ldr	r3, [r3, #24]
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	4610      	mov	r0, r2
 800cc8e:	f7ff fe59 	bl	800c944 <create_chain>
 800cc92:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d101      	bne.n	800cc9e <dir_next+0xcc>
 800cc9a:	2307      	movs	r3, #7
 800cc9c:	e05a      	b.n	800cd54 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d101      	bne.n	800cca8 <dir_next+0xd6>
 800cca4:	2302      	movs	r3, #2
 800cca6:	e055      	b.n	800cd54 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccae:	d101      	bne.n	800ccb4 <dir_next+0xe2>
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	e04f      	b.n	800cd54 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ccb4:	68f8      	ldr	r0, [r7, #12]
 800ccb6:	f7ff fb4d 	bl	800c354 <sync_window>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d001      	beq.n	800ccc4 <dir_next+0xf2>
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	e047      	b.n	800cd54 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	3338      	adds	r3, #56	; 0x38
 800ccc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cccc:	2100      	movs	r1, #0
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7ff f945 	bl	800bf5e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	613b      	str	r3, [r7, #16]
 800ccd8:	6979      	ldr	r1, [r7, #20]
 800ccda:	68f8      	ldr	r0, [r7, #12]
 800ccdc:	f7ff fc1a 	bl	800c514 <clust2sect>
 800cce0:	4602      	mov	r2, r0
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	635a      	str	r2, [r3, #52]	; 0x34
 800cce6:	e012      	b.n	800cd0e <dir_next+0x13c>
						fs->wflag = 1;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2201      	movs	r2, #1
 800ccec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f7ff fb30 	bl	800c354 <sync_window>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d001      	beq.n	800ccfe <dir_next+0x12c>
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e02a      	b.n	800cd54 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	3301      	adds	r3, #1
 800cd02:	613b      	str	r3, [r7, #16]
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd08:	1c5a      	adds	r2, r3, #1
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	635a      	str	r2, [r3, #52]	; 0x34
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	895b      	ldrh	r3, [r3, #10]
 800cd12:	461a      	mov	r2, r3
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d3e6      	bcc.n	800cce8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	1ad2      	subs	r2, r2, r3
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	697a      	ldr	r2, [r7, #20]
 800cd2a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cd2c:	6979      	ldr	r1, [r7, #20]
 800cd2e:	68f8      	ldr	r0, [r7, #12]
 800cd30:	f7ff fbf0 	bl	800c514 <clust2sect>
 800cd34:	4602      	mov	r2, r0
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	68ba      	ldr	r2, [r7, #8]
 800cd3e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd4c:	441a      	add	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cd52:	2300      	movs	r3, #0
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3718      	adds	r7, #24
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b086      	sub	sp, #24
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f7ff feb4 	bl	800cadc <dir_sdi>
 800cd74:	4603      	mov	r3, r0
 800cd76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cd78:	7dfb      	ldrb	r3, [r7, #23]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d12b      	bne.n	800cdd6 <dir_alloc+0x7a>
		n = 0;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	69db      	ldr	r3, [r3, #28]
 800cd86:	4619      	mov	r1, r3
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f7ff fb27 	bl	800c3dc <move_window>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cd92:	7dfb      	ldrb	r3, [r7, #23]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d11d      	bne.n	800cdd4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6a1b      	ldr	r3, [r3, #32]
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	2be5      	cmp	r3, #229	; 0xe5
 800cda0:	d004      	beq.n	800cdac <dir_alloc+0x50>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6a1b      	ldr	r3, [r3, #32]
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d107      	bne.n	800cdbc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	613b      	str	r3, [r7, #16]
 800cdb2:	693a      	ldr	r2, [r7, #16]
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d102      	bne.n	800cdc0 <dir_alloc+0x64>
 800cdba:	e00c      	b.n	800cdd6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cdc0:	2101      	movs	r1, #1
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f7ff ff05 	bl	800cbd2 <dir_next>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cdcc:	7dfb      	ldrb	r3, [r7, #23]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d0d7      	beq.n	800cd82 <dir_alloc+0x26>
 800cdd2:	e000      	b.n	800cdd6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cdd4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cdd6:	7dfb      	ldrb	r3, [r7, #23]
 800cdd8:	2b04      	cmp	r3, #4
 800cdda:	d101      	bne.n	800cde0 <dir_alloc+0x84>
 800cddc:	2307      	movs	r3, #7
 800cdde:	75fb      	strb	r3, [r7, #23]
	return res;
 800cde0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3718      	adds	r7, #24
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b084      	sub	sp, #16
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
 800cdf2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	331a      	adds	r3, #26
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7ff f80d 	bl	800be18 <ld_word>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	2b03      	cmp	r3, #3
 800ce08:	d109      	bne.n	800ce1e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	3314      	adds	r3, #20
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7ff f802 	bl	800be18 <ld_word>
 800ce14:	4603      	mov	r3, r0
 800ce16:	041b      	lsls	r3, r3, #16
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3710      	adds	r7, #16
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	331a      	adds	r3, #26
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	b292      	uxth	r2, r2
 800ce3c:	4611      	mov	r1, r2
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7ff f825 	bl	800be8e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	2b03      	cmp	r3, #3
 800ce4a:	d109      	bne.n	800ce60 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	f103 0214 	add.w	r2, r3, #20
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	0c1b      	lsrs	r3, r3, #16
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	4619      	mov	r1, r3
 800ce5a:	4610      	mov	r0, r2
 800ce5c:	f7ff f817 	bl	800be8e <st_word>
	}
}
 800ce60:	bf00      	nop
 800ce62:	3710      	adds	r7, #16
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ce68:	b590      	push	{r4, r7, lr}
 800ce6a:	b087      	sub	sp, #28
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	331a      	adds	r3, #26
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7fe ffce 	bl	800be18 <ld_word>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d001      	beq.n	800ce86 <cmp_lfn+0x1e>
 800ce82:	2300      	movs	r3, #0
 800ce84:	e059      	b.n	800cf3a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce8e:	1e5a      	subs	r2, r3, #1
 800ce90:	4613      	mov	r3, r2
 800ce92:	005b      	lsls	r3, r3, #1
 800ce94:	4413      	add	r3, r2
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	4413      	add	r3, r2
 800ce9a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	81fb      	strh	r3, [r7, #14]
 800cea0:	2300      	movs	r3, #0
 800cea2:	613b      	str	r3, [r7, #16]
 800cea4:	e033      	b.n	800cf0e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cea6:	4a27      	ldr	r2, [pc, #156]	; (800cf44 <cmp_lfn+0xdc>)
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	4413      	add	r3, r2
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	4413      	add	r3, r2
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7fe ffaf 	bl	800be18 <ld_word>
 800ceba:	4603      	mov	r3, r0
 800cebc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cebe:	89fb      	ldrh	r3, [r7, #14]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d01a      	beq.n	800cefa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	2bfe      	cmp	r3, #254	; 0xfe
 800cec8:	d812      	bhi.n	800cef0 <cmp_lfn+0x88>
 800ceca:	89bb      	ldrh	r3, [r7, #12]
 800cecc:	4618      	mov	r0, r3
 800cece:	f002 fbbb 	bl	800f648 <ff_wtoupper>
 800ced2:	4603      	mov	r3, r0
 800ced4:	461c      	mov	r4, r3
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	1c5a      	adds	r2, r3, #1
 800ceda:	617a      	str	r2, [r7, #20]
 800cedc:	005b      	lsls	r3, r3, #1
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	4413      	add	r3, r2
 800cee2:	881b      	ldrh	r3, [r3, #0]
 800cee4:	4618      	mov	r0, r3
 800cee6:	f002 fbaf 	bl	800f648 <ff_wtoupper>
 800ceea:	4603      	mov	r3, r0
 800ceec:	429c      	cmp	r4, r3
 800ceee:	d001      	beq.n	800cef4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800cef0:	2300      	movs	r3, #0
 800cef2:	e022      	b.n	800cf3a <cmp_lfn+0xd2>
			}
			wc = uc;
 800cef4:	89bb      	ldrh	r3, [r7, #12]
 800cef6:	81fb      	strh	r3, [r7, #14]
 800cef8:	e006      	b.n	800cf08 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cefa:	89bb      	ldrh	r3, [r7, #12]
 800cefc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d001      	beq.n	800cf08 <cmp_lfn+0xa0>
 800cf04:	2300      	movs	r3, #0
 800cf06:	e018      	b.n	800cf3a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	613b      	str	r3, [r7, #16]
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	2b0c      	cmp	r3, #12
 800cf12:	d9c8      	bls.n	800cea6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00b      	beq.n	800cf38 <cmp_lfn+0xd0>
 800cf20:	89fb      	ldrh	r3, [r7, #14]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d008      	beq.n	800cf38 <cmp_lfn+0xd0>
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	005b      	lsls	r3, r3, #1
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	4413      	add	r3, r2
 800cf2e:	881b      	ldrh	r3, [r3, #0]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d001      	beq.n	800cf38 <cmp_lfn+0xd0>
 800cf34:	2300      	movs	r3, #0
 800cf36:	e000      	b.n	800cf3a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800cf38:	2301      	movs	r3, #1
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	371c      	adds	r7, #28
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd90      	pop	{r4, r7, pc}
 800cf42:	bf00      	nop
 800cf44:	0801a644 	.word	0x0801a644

0800cf48 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b088      	sub	sp, #32
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	4611      	mov	r1, r2
 800cf54:	461a      	mov	r2, r3
 800cf56:	460b      	mov	r3, r1
 800cf58:	71fb      	strb	r3, [r7, #7]
 800cf5a:	4613      	mov	r3, r2
 800cf5c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	330d      	adds	r3, #13
 800cf62:	79ba      	ldrb	r2, [r7, #6]
 800cf64:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	330b      	adds	r3, #11
 800cf6a:	220f      	movs	r2, #15
 800cf6c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	330c      	adds	r3, #12
 800cf72:	2200      	movs	r2, #0
 800cf74:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	331a      	adds	r3, #26
 800cf7a:	2100      	movs	r1, #0
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7fe ff86 	bl	800be8e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800cf82:	79fb      	ldrb	r3, [r7, #7]
 800cf84:	1e5a      	subs	r2, r3, #1
 800cf86:	4613      	mov	r3, r2
 800cf88:	005b      	lsls	r3, r3, #1
 800cf8a:	4413      	add	r3, r2
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	4413      	add	r3, r2
 800cf90:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800cf92:	2300      	movs	r3, #0
 800cf94:	82fb      	strh	r3, [r7, #22]
 800cf96:	2300      	movs	r3, #0
 800cf98:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cf9a:	8afb      	ldrh	r3, [r7, #22]
 800cf9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d007      	beq.n	800cfb4 <put_lfn+0x6c>
 800cfa4:	69fb      	ldr	r3, [r7, #28]
 800cfa6:	1c5a      	adds	r2, r3, #1
 800cfa8:	61fa      	str	r2, [r7, #28]
 800cfaa:	005b      	lsls	r3, r3, #1
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	4413      	add	r3, r2
 800cfb0:	881b      	ldrh	r3, [r3, #0]
 800cfb2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800cfb4:	4a17      	ldr	r2, [pc, #92]	; (800d014 <put_lfn+0xcc>)
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	4413      	add	r3, r2
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	8afa      	ldrh	r2, [r7, #22]
 800cfc4:	4611      	mov	r1, r2
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fe ff61 	bl	800be8e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cfcc:	8afb      	ldrh	r3, [r7, #22]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d102      	bne.n	800cfd8 <put_lfn+0x90>
 800cfd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cfd6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	61bb      	str	r3, [r7, #24]
 800cfde:	69bb      	ldr	r3, [r7, #24]
 800cfe0:	2b0c      	cmp	r3, #12
 800cfe2:	d9da      	bls.n	800cf9a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800cfe4:	8afb      	ldrh	r3, [r7, #22]
 800cfe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d006      	beq.n	800cffc <put_lfn+0xb4>
 800cfee:	69fb      	ldr	r3, [r7, #28]
 800cff0:	005b      	lsls	r3, r3, #1
 800cff2:	68fa      	ldr	r2, [r7, #12]
 800cff4:	4413      	add	r3, r2
 800cff6:	881b      	ldrh	r3, [r3, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d103      	bne.n	800d004 <put_lfn+0xbc>
 800cffc:	79fb      	ldrb	r3, [r7, #7]
 800cffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d002:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	79fa      	ldrb	r2, [r7, #7]
 800d008:	701a      	strb	r2, [r3, #0]
}
 800d00a:	bf00      	nop
 800d00c:	3720      	adds	r7, #32
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	0801a644 	.word	0x0801a644

0800d018 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b08c      	sub	sp, #48	; 0x30
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
 800d024:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d026:	220b      	movs	r2, #11
 800d028:	68b9      	ldr	r1, [r7, #8]
 800d02a:	68f8      	ldr	r0, [r7, #12]
 800d02c:	f7fe ff76 	bl	800bf1c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	2b05      	cmp	r3, #5
 800d034:	d92b      	bls.n	800d08e <gen_numname+0x76>
		sr = seq;
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d03a:	e022      	b.n	800d082 <gen_numname+0x6a>
			wc = *lfn++;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	1c9a      	adds	r2, r3, #2
 800d040:	607a      	str	r2, [r7, #4]
 800d042:	881b      	ldrh	r3, [r3, #0]
 800d044:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d046:	2300      	movs	r3, #0
 800d048:	62bb      	str	r3, [r7, #40]	; 0x28
 800d04a:	e017      	b.n	800d07c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	005a      	lsls	r2, r3, #1
 800d050:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d052:	f003 0301 	and.w	r3, r3, #1
 800d056:	4413      	add	r3, r2
 800d058:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d05a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d05c:	085b      	lsrs	r3, r3, #1
 800d05e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d066:	2b00      	cmp	r3, #0
 800d068:	d005      	beq.n	800d076 <gen_numname+0x5e>
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d070:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d074:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d078:	3301      	adds	r3, #1
 800d07a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07e:	2b0f      	cmp	r3, #15
 800d080:	d9e4      	bls.n	800d04c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	881b      	ldrh	r3, [r3, #0]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1d8      	bne.n	800d03c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d08e:	2307      	movs	r3, #7
 800d090:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	b2db      	uxtb	r3, r3
 800d096:	f003 030f 	and.w	r3, r3, #15
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	3330      	adds	r3, #48	; 0x30
 800d09e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d0a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0a6:	2b39      	cmp	r3, #57	; 0x39
 800d0a8:	d904      	bls.n	800d0b4 <gen_numname+0x9c>
 800d0aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0ae:	3307      	adds	r3, #7
 800d0b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b6:	1e5a      	subs	r2, r3, #1
 800d0b8:	62ba      	str	r2, [r7, #40]	; 0x28
 800d0ba:	3330      	adds	r3, #48	; 0x30
 800d0bc:	443b      	add	r3, r7
 800d0be:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d0c2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	091b      	lsrs	r3, r3, #4
 800d0ca:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d1df      	bne.n	800d092 <gen_numname+0x7a>
	ns[i] = '~';
 800d0d2:	f107 0214 	add.w	r2, r7, #20
 800d0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d8:	4413      	add	r3, r2
 800d0da:	227e      	movs	r2, #126	; 0x7e
 800d0dc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d0de:	2300      	movs	r3, #0
 800d0e0:	627b      	str	r3, [r7, #36]	; 0x24
 800d0e2:	e002      	b.n	800d0ea <gen_numname+0xd2>
 800d0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	627b      	str	r3, [r7, #36]	; 0x24
 800d0ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d205      	bcs.n	800d0fe <gen_numname+0xe6>
 800d0f2:	68fa      	ldr	r2, [r7, #12]
 800d0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f6:	4413      	add	r3, r2
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	2b20      	cmp	r3, #32
 800d0fc:	d1f2      	bne.n	800d0e4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d100:	2b07      	cmp	r3, #7
 800d102:	d807      	bhi.n	800d114 <gen_numname+0xfc>
 800d104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d106:	1c5a      	adds	r2, r3, #1
 800d108:	62ba      	str	r2, [r7, #40]	; 0x28
 800d10a:	3330      	adds	r3, #48	; 0x30
 800d10c:	443b      	add	r3, r7
 800d10e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d112:	e000      	b.n	800d116 <gen_numname+0xfe>
 800d114:	2120      	movs	r1, #32
 800d116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d118:	1c5a      	adds	r2, r3, #1
 800d11a:	627a      	str	r2, [r7, #36]	; 0x24
 800d11c:	68fa      	ldr	r2, [r7, #12]
 800d11e:	4413      	add	r3, r2
 800d120:	460a      	mov	r2, r1
 800d122:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d126:	2b07      	cmp	r3, #7
 800d128:	d9e9      	bls.n	800d0fe <gen_numname+0xe6>
}
 800d12a:	bf00      	nop
 800d12c:	bf00      	nop
 800d12e:	3730      	adds	r7, #48	; 0x30
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d134:	b480      	push	{r7}
 800d136:	b085      	sub	sp, #20
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d13c:	2300      	movs	r3, #0
 800d13e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d140:	230b      	movs	r3, #11
 800d142:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d144:	7bfb      	ldrb	r3, [r7, #15]
 800d146:	b2da      	uxtb	r2, r3
 800d148:	0852      	lsrs	r2, r2, #1
 800d14a:	01db      	lsls	r3, r3, #7
 800d14c:	4313      	orrs	r3, r2
 800d14e:	b2da      	uxtb	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	1c59      	adds	r1, r3, #1
 800d154:	6079      	str	r1, [r7, #4]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	4413      	add	r3, r2
 800d15a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	3b01      	subs	r3, #1
 800d160:	60bb      	str	r3, [r7, #8]
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d1ed      	bne.n	800d144 <sum_sfn+0x10>
	return sum;
 800d168:	7bfb      	ldrb	r3, [r7, #15]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3714      	adds	r7, #20
 800d16e:	46bd      	mov	sp, r7
 800d170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d174:	4770      	bx	lr

0800d176 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b086      	sub	sp, #24
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d184:	2100      	movs	r1, #0
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f7ff fca8 	bl	800cadc <dir_sdi>
 800d18c:	4603      	mov	r3, r0
 800d18e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d190:	7dfb      	ldrb	r3, [r7, #23]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d001      	beq.n	800d19a <dir_find+0x24>
 800d196:	7dfb      	ldrb	r3, [r7, #23]
 800d198:	e0a9      	b.n	800d2ee <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d19a:	23ff      	movs	r3, #255	; 0xff
 800d19c:	753b      	strb	r3, [r7, #20]
 800d19e:	7d3b      	ldrb	r3, [r7, #20]
 800d1a0:	757b      	strb	r3, [r7, #21]
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	69db      	ldr	r3, [r3, #28]
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	6938      	ldr	r0, [r7, #16]
 800d1b2:	f7ff f913 	bl	800c3dc <move_window>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d1ba:	7dfb      	ldrb	r3, [r7, #23]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f040 8090 	bne.w	800d2e2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6a1b      	ldr	r3, [r3, #32]
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d1ca:	7dbb      	ldrb	r3, [r7, #22]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d102      	bne.n	800d1d6 <dir_find+0x60>
 800d1d0:	2304      	movs	r3, #4
 800d1d2:	75fb      	strb	r3, [r7, #23]
 800d1d4:	e08a      	b.n	800d2ec <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6a1b      	ldr	r3, [r3, #32]
 800d1da:	330b      	adds	r3, #11
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1e2:	73fb      	strb	r3, [r7, #15]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	7bfa      	ldrb	r2, [r7, #15]
 800d1e8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d1ea:	7dbb      	ldrb	r3, [r7, #22]
 800d1ec:	2be5      	cmp	r3, #229	; 0xe5
 800d1ee:	d007      	beq.n	800d200 <dir_find+0x8a>
 800d1f0:	7bfb      	ldrb	r3, [r7, #15]
 800d1f2:	f003 0308 	and.w	r3, r3, #8
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d009      	beq.n	800d20e <dir_find+0x98>
 800d1fa:	7bfb      	ldrb	r3, [r7, #15]
 800d1fc:	2b0f      	cmp	r3, #15
 800d1fe:	d006      	beq.n	800d20e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d200:	23ff      	movs	r3, #255	; 0xff
 800d202:	757b      	strb	r3, [r7, #21]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f04f 32ff 	mov.w	r2, #4294967295
 800d20a:	631a      	str	r2, [r3, #48]	; 0x30
 800d20c:	e05e      	b.n	800d2cc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d20e:	7bfb      	ldrb	r3, [r7, #15]
 800d210:	2b0f      	cmp	r3, #15
 800d212:	d136      	bne.n	800d282 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d21a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d154      	bne.n	800d2cc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d222:	7dbb      	ldrb	r3, [r7, #22]
 800d224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00d      	beq.n	800d248 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6a1b      	ldr	r3, [r3, #32]
 800d230:	7b5b      	ldrb	r3, [r3, #13]
 800d232:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d234:	7dbb      	ldrb	r3, [r7, #22]
 800d236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d23a:	75bb      	strb	r3, [r7, #22]
 800d23c:	7dbb      	ldrb	r3, [r7, #22]
 800d23e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	695a      	ldr	r2, [r3, #20]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d248:	7dba      	ldrb	r2, [r7, #22]
 800d24a:	7d7b      	ldrb	r3, [r7, #21]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d115      	bne.n	800d27c <dir_find+0x106>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6a1b      	ldr	r3, [r3, #32]
 800d254:	330d      	adds	r3, #13
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	7d3a      	ldrb	r2, [r7, #20]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d10e      	bne.n	800d27c <dir_find+0x106>
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	68da      	ldr	r2, [r3, #12]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6a1b      	ldr	r3, [r3, #32]
 800d266:	4619      	mov	r1, r3
 800d268:	4610      	mov	r0, r2
 800d26a:	f7ff fdfd 	bl	800ce68 <cmp_lfn>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d003      	beq.n	800d27c <dir_find+0x106>
 800d274:	7d7b      	ldrb	r3, [r7, #21]
 800d276:	3b01      	subs	r3, #1
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	e000      	b.n	800d27e <dir_find+0x108>
 800d27c:	23ff      	movs	r3, #255	; 0xff
 800d27e:	757b      	strb	r3, [r7, #21]
 800d280:	e024      	b.n	800d2cc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d282:	7d7b      	ldrb	r3, [r7, #21]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d109      	bne.n	800d29c <dir_find+0x126>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6a1b      	ldr	r3, [r3, #32]
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7ff ff51 	bl	800d134 <sum_sfn>
 800d292:	4603      	mov	r3, r0
 800d294:	461a      	mov	r2, r3
 800d296:	7d3b      	ldrb	r3, [r7, #20]
 800d298:	4293      	cmp	r3, r2
 800d29a:	d024      	beq.n	800d2e6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d2a2:	f003 0301 	and.w	r3, r3, #1
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d10a      	bne.n	800d2c0 <dir_find+0x14a>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6a18      	ldr	r0, [r3, #32]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	3324      	adds	r3, #36	; 0x24
 800d2b2:	220b      	movs	r2, #11
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	f7fe fe6d 	bl	800bf94 <mem_cmp>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d014      	beq.n	800d2ea <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d2c0:	23ff      	movs	r3, #255	; 0xff
 800d2c2:	757b      	strb	r3, [r7, #21]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ca:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d2cc:	2100      	movs	r1, #0
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f7ff fc7f 	bl	800cbd2 <dir_next>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d2d8:	7dfb      	ldrb	r3, [r7, #23]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f43f af65 	beq.w	800d1aa <dir_find+0x34>
 800d2e0:	e004      	b.n	800d2ec <dir_find+0x176>
		if (res != FR_OK) break;
 800d2e2:	bf00      	nop
 800d2e4:	e002      	b.n	800d2ec <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d2e6:	bf00      	nop
 800d2e8:	e000      	b.n	800d2ec <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d2ea:	bf00      	nop

	return res;
 800d2ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3718      	adds	r7, #24
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
	...

0800d2f8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b08c      	sub	sp, #48	; 0x30
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d30c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d310:	2b00      	cmp	r3, #0
 800d312:	d001      	beq.n	800d318 <dir_register+0x20>
 800d314:	2306      	movs	r3, #6
 800d316:	e0e0      	b.n	800d4da <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d318:	2300      	movs	r3, #0
 800d31a:	627b      	str	r3, [r7, #36]	; 0x24
 800d31c:	e002      	b.n	800d324 <dir_register+0x2c>
 800d31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d320:	3301      	adds	r3, #1
 800d322:	627b      	str	r3, [r7, #36]	; 0x24
 800d324:	69fb      	ldr	r3, [r7, #28]
 800d326:	68da      	ldr	r2, [r3, #12]
 800d328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32a:	005b      	lsls	r3, r3, #1
 800d32c:	4413      	add	r3, r2
 800d32e:	881b      	ldrh	r3, [r3, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d1f4      	bne.n	800d31e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d33a:	f107 030c 	add.w	r3, r7, #12
 800d33e:	220c      	movs	r2, #12
 800d340:	4618      	mov	r0, r3
 800d342:	f7fe fdeb 	bl	800bf1c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d346:	7dfb      	ldrb	r3, [r7, #23]
 800d348:	f003 0301 	and.w	r3, r3, #1
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d032      	beq.n	800d3b6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2240      	movs	r2, #64	; 0x40
 800d354:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d358:	2301      	movs	r3, #1
 800d35a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d35c:	e016      	b.n	800d38c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d364:	69fb      	ldr	r3, [r7, #28]
 800d366:	68da      	ldr	r2, [r3, #12]
 800d368:	f107 010c 	add.w	r1, r7, #12
 800d36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36e:	f7ff fe53 	bl	800d018 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f7ff feff 	bl	800d176 <dir_find>
 800d378:	4603      	mov	r3, r0
 800d37a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d37e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d382:	2b00      	cmp	r3, #0
 800d384:	d106      	bne.n	800d394 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d388:	3301      	adds	r3, #1
 800d38a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38e:	2b63      	cmp	r3, #99	; 0x63
 800d390:	d9e5      	bls.n	800d35e <dir_register+0x66>
 800d392:	e000      	b.n	800d396 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d394:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d398:	2b64      	cmp	r3, #100	; 0x64
 800d39a:	d101      	bne.n	800d3a0 <dir_register+0xa8>
 800d39c:	2307      	movs	r3, #7
 800d39e:	e09c      	b.n	800d4da <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d3a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d3a4:	2b04      	cmp	r3, #4
 800d3a6:	d002      	beq.n	800d3ae <dir_register+0xb6>
 800d3a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d3ac:	e095      	b.n	800d4da <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d3ae:	7dfa      	ldrb	r2, [r7, #23]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d3b6:	7dfb      	ldrb	r3, [r7, #23]
 800d3b8:	f003 0302 	and.w	r3, r3, #2
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d007      	beq.n	800d3d0 <dir_register+0xd8>
 800d3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c2:	330c      	adds	r3, #12
 800d3c4:	4a47      	ldr	r2, [pc, #284]	; (800d4e4 <dir_register+0x1ec>)
 800d3c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ca:	089b      	lsrs	r3, r3, #2
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	e000      	b.n	800d3d2 <dir_register+0xda>
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d3d4:	6a39      	ldr	r1, [r7, #32]
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f7ff fcc0 	bl	800cd5c <dir_alloc>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d3e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d148      	bne.n	800d47c <dir_register+0x184>
 800d3ea:	6a3b      	ldr	r3, [r7, #32]
 800d3ec:	3b01      	subs	r3, #1
 800d3ee:	623b      	str	r3, [r7, #32]
 800d3f0:	6a3b      	ldr	r3, [r7, #32]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d042      	beq.n	800d47c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	695a      	ldr	r2, [r3, #20]
 800d3fa:	6a3b      	ldr	r3, [r7, #32]
 800d3fc:	015b      	lsls	r3, r3, #5
 800d3fe:	1ad3      	subs	r3, r2, r3
 800d400:	4619      	mov	r1, r3
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f7ff fb6a 	bl	800cadc <dir_sdi>
 800d408:	4603      	mov	r3, r0
 800d40a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d40e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d412:	2b00      	cmp	r3, #0
 800d414:	d132      	bne.n	800d47c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	3324      	adds	r3, #36	; 0x24
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7ff fe8a 	bl	800d134 <sum_sfn>
 800d420:	4603      	mov	r3, r0
 800d422:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	69db      	ldr	r3, [r3, #28]
 800d428:	4619      	mov	r1, r3
 800d42a:	69f8      	ldr	r0, [r7, #28]
 800d42c:	f7fe ffd6 	bl	800c3dc <move_window>
 800d430:	4603      	mov	r3, r0
 800d432:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d436:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d11d      	bne.n	800d47a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	68d8      	ldr	r0, [r3, #12]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6a19      	ldr	r1, [r3, #32]
 800d446:	6a3b      	ldr	r3, [r7, #32]
 800d448:	b2da      	uxtb	r2, r3
 800d44a:	7efb      	ldrb	r3, [r7, #27]
 800d44c:	f7ff fd7c 	bl	800cf48 <put_lfn>
				fs->wflag = 1;
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	2201      	movs	r2, #1
 800d454:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d456:	2100      	movs	r1, #0
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f7ff fbba 	bl	800cbd2 <dir_next>
 800d45e:	4603      	mov	r3, r0
 800d460:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d464:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d107      	bne.n	800d47c <dir_register+0x184>
 800d46c:	6a3b      	ldr	r3, [r7, #32]
 800d46e:	3b01      	subs	r3, #1
 800d470:	623b      	str	r3, [r7, #32]
 800d472:	6a3b      	ldr	r3, [r7, #32]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d1d5      	bne.n	800d424 <dir_register+0x12c>
 800d478:	e000      	b.n	800d47c <dir_register+0x184>
				if (res != FR_OK) break;
 800d47a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d47c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d480:	2b00      	cmp	r3, #0
 800d482:	d128      	bne.n	800d4d6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	69db      	ldr	r3, [r3, #28]
 800d488:	4619      	mov	r1, r3
 800d48a:	69f8      	ldr	r0, [r7, #28]
 800d48c:	f7fe ffa6 	bl	800c3dc <move_window>
 800d490:	4603      	mov	r3, r0
 800d492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d496:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d11b      	bne.n	800d4d6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a1b      	ldr	r3, [r3, #32]
 800d4a2:	2220      	movs	r2, #32
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7fe fd59 	bl	800bf5e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6a18      	ldr	r0, [r3, #32]
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	3324      	adds	r3, #36	; 0x24
 800d4b4:	220b      	movs	r2, #11
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	f7fe fd30 	bl	800bf1c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6a1b      	ldr	r3, [r3, #32]
 800d4c6:	330c      	adds	r3, #12
 800d4c8:	f002 0218 	and.w	r2, r2, #24
 800d4cc:	b2d2      	uxtb	r2, r2
 800d4ce:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d4d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3730      	adds	r7, #48	; 0x30
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	4ec4ec4f 	.word	0x4ec4ec4f

0800d4e8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b088      	sub	sp, #32
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	69db      	ldr	r3, [r3, #28]
 800d502:	2b00      	cmp	r3, #0
 800d504:	f000 80c9 	beq.w	800d69a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d50c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d510:	d032      	beq.n	800d578 <get_fileinfo+0x90>
			i = j = 0;
 800d512:	2300      	movs	r3, #0
 800d514:	61bb      	str	r3, [r7, #24]
 800d516:	69bb      	ldr	r3, [r7, #24]
 800d518:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d51a:	e01b      	b.n	800d554 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d51c:	89fb      	ldrh	r3, [r7, #14]
 800d51e:	2100      	movs	r1, #0
 800d520:	4618      	mov	r0, r3
 800d522:	f002 f855 	bl	800f5d0 <ff_convert>
 800d526:	4603      	mov	r3, r0
 800d528:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d52a:	89fb      	ldrh	r3, [r7, #14]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d102      	bne.n	800d536 <get_fileinfo+0x4e>
 800d530:	2300      	movs	r3, #0
 800d532:	61fb      	str	r3, [r7, #28]
 800d534:	e01a      	b.n	800d56c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d536:	69fb      	ldr	r3, [r7, #28]
 800d538:	2bfe      	cmp	r3, #254	; 0xfe
 800d53a:	d902      	bls.n	800d542 <get_fileinfo+0x5a>
 800d53c:	2300      	movs	r3, #0
 800d53e:	61fb      	str	r3, [r7, #28]
 800d540:	e014      	b.n	800d56c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d542:	69fb      	ldr	r3, [r7, #28]
 800d544:	1c5a      	adds	r2, r3, #1
 800d546:	61fa      	str	r2, [r7, #28]
 800d548:	89fa      	ldrh	r2, [r7, #14]
 800d54a:	b2d1      	uxtb	r1, r2
 800d54c:	683a      	ldr	r2, [r7, #0]
 800d54e:	4413      	add	r3, r2
 800d550:	460a      	mov	r2, r1
 800d552:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	68da      	ldr	r2, [r3, #12]
 800d558:	69bb      	ldr	r3, [r7, #24]
 800d55a:	1c59      	adds	r1, r3, #1
 800d55c:	61b9      	str	r1, [r7, #24]
 800d55e:	005b      	lsls	r3, r3, #1
 800d560:	4413      	add	r3, r2
 800d562:	881b      	ldrh	r3, [r3, #0]
 800d564:	81fb      	strh	r3, [r7, #14]
 800d566:	89fb      	ldrh	r3, [r7, #14]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d1d7      	bne.n	800d51c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d56c:	683a      	ldr	r2, [r7, #0]
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	4413      	add	r3, r2
 800d572:	3316      	adds	r3, #22
 800d574:	2200      	movs	r2, #0
 800d576:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d578:	2300      	movs	r3, #0
 800d57a:	61bb      	str	r3, [r7, #24]
 800d57c:	69bb      	ldr	r3, [r7, #24]
 800d57e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d580:	683a      	ldr	r2, [r7, #0]
 800d582:	69fb      	ldr	r3, [r7, #28]
 800d584:	4413      	add	r3, r2
 800d586:	3316      	adds	r3, #22
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d58c:	e04c      	b.n	800d628 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6a1a      	ldr	r2, [r3, #32]
 800d592:	69fb      	ldr	r3, [r7, #28]
 800d594:	1c59      	adds	r1, r3, #1
 800d596:	61f9      	str	r1, [r7, #28]
 800d598:	4413      	add	r3, r2
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d59e:	7dfb      	ldrb	r3, [r7, #23]
 800d5a0:	2b20      	cmp	r3, #32
 800d5a2:	d100      	bne.n	800d5a6 <get_fileinfo+0xbe>
 800d5a4:	e040      	b.n	800d628 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d5a6:	7dfb      	ldrb	r3, [r7, #23]
 800d5a8:	2b05      	cmp	r3, #5
 800d5aa:	d101      	bne.n	800d5b0 <get_fileinfo+0xc8>
 800d5ac:	23e5      	movs	r3, #229	; 0xe5
 800d5ae:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	2b09      	cmp	r3, #9
 800d5b4:	d10f      	bne.n	800d5d6 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800d5b6:	89bb      	ldrh	r3, [r7, #12]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d105      	bne.n	800d5c8 <get_fileinfo+0xe0>
 800d5bc:	683a      	ldr	r2, [r7, #0]
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	3316      	adds	r3, #22
 800d5c4:	222e      	movs	r2, #46	; 0x2e
 800d5c6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d5c8:	69bb      	ldr	r3, [r7, #24]
 800d5ca:	1c5a      	adds	r2, r3, #1
 800d5cc:	61ba      	str	r2, [r7, #24]
 800d5ce:	683a      	ldr	r2, [r7, #0]
 800d5d0:	4413      	add	r3, r2
 800d5d2:	222e      	movs	r2, #46	; 0x2e
 800d5d4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d5d6:	683a      	ldr	r2, [r7, #0]
 800d5d8:	69bb      	ldr	r3, [r7, #24]
 800d5da:	4413      	add	r3, r2
 800d5dc:	3309      	adds	r3, #9
 800d5de:	7dfa      	ldrb	r2, [r7, #23]
 800d5e0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d5e2:	89bb      	ldrh	r3, [r7, #12]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d11c      	bne.n	800d622 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d5e8:	7dfb      	ldrb	r3, [r7, #23]
 800d5ea:	2b40      	cmp	r3, #64	; 0x40
 800d5ec:	d913      	bls.n	800d616 <get_fileinfo+0x12e>
 800d5ee:	7dfb      	ldrb	r3, [r7, #23]
 800d5f0:	2b5a      	cmp	r3, #90	; 0x5a
 800d5f2:	d810      	bhi.n	800d616 <get_fileinfo+0x12e>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6a1b      	ldr	r3, [r3, #32]
 800d5f8:	330c      	adds	r3, #12
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	2b08      	cmp	r3, #8
 800d602:	d901      	bls.n	800d608 <get_fileinfo+0x120>
 800d604:	2310      	movs	r3, #16
 800d606:	e000      	b.n	800d60a <get_fileinfo+0x122>
 800d608:	2308      	movs	r3, #8
 800d60a:	4013      	ands	r3, r2
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d002      	beq.n	800d616 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800d610:	7dfb      	ldrb	r3, [r7, #23]
 800d612:	3320      	adds	r3, #32
 800d614:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800d616:	683a      	ldr	r2, [r7, #0]
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	4413      	add	r3, r2
 800d61c:	3316      	adds	r3, #22
 800d61e:	7dfa      	ldrb	r2, [r7, #23]
 800d620:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	3301      	adds	r3, #1
 800d626:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800d628:	69fb      	ldr	r3, [r7, #28]
 800d62a:	2b0a      	cmp	r3, #10
 800d62c:	d9af      	bls.n	800d58e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800d62e:	89bb      	ldrh	r3, [r7, #12]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d10d      	bne.n	800d650 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800d634:	683a      	ldr	r2, [r7, #0]
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	4413      	add	r3, r2
 800d63a:	3316      	adds	r3, #22
 800d63c:	2200      	movs	r2, #0
 800d63e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6a1b      	ldr	r3, [r3, #32]
 800d644:	330c      	adds	r3, #12
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d101      	bne.n	800d650 <get_fileinfo+0x168>
 800d64c:	2300      	movs	r3, #0
 800d64e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d650:	683a      	ldr	r2, [r7, #0]
 800d652:	69bb      	ldr	r3, [r7, #24]
 800d654:	4413      	add	r3, r2
 800d656:	3309      	adds	r3, #9
 800d658:	2200      	movs	r2, #0
 800d65a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6a1b      	ldr	r3, [r3, #32]
 800d660:	7ada      	ldrb	r2, [r3, #11]
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6a1b      	ldr	r3, [r3, #32]
 800d66a:	331c      	adds	r3, #28
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7fe fbeb 	bl	800be48 <ld_dword>
 800d672:	4602      	mov	r2, r0
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6a1b      	ldr	r3, [r3, #32]
 800d67c:	3316      	adds	r3, #22
 800d67e:	4618      	mov	r0, r3
 800d680:	f7fe fbe2 	bl	800be48 <ld_dword>
 800d684:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	b29a      	uxth	r2, r3
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	80da      	strh	r2, [r3, #6]
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	0c1b      	lsrs	r3, r3, #16
 800d692:	b29a      	uxth	r2, r3
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	809a      	strh	r2, [r3, #4]
 800d698:	e000      	b.n	800d69c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d69a:	bf00      	nop
}
 800d69c:	3720      	adds	r7, #32
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
	...

0800d6a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b08a      	sub	sp, #40	; 0x28
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	613b      	str	r3, [r7, #16]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	68db      	ldr	r3, [r3, #12]
 800d6ba:	60fb      	str	r3, [r7, #12]
 800d6bc:	2300      	movs	r3, #0
 800d6be:	617b      	str	r3, [r7, #20]
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	1c5a      	adds	r2, r3, #1
 800d6c8:	61ba      	str	r2, [r7, #24]
 800d6ca:	693a      	ldr	r2, [r7, #16]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d6d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6d4:	2b1f      	cmp	r3, #31
 800d6d6:	d940      	bls.n	800d75a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d6d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6da:	2b2f      	cmp	r3, #47	; 0x2f
 800d6dc:	d006      	beq.n	800d6ec <create_name+0x48>
 800d6de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6e0:	2b5c      	cmp	r3, #92	; 0x5c
 800d6e2:	d110      	bne.n	800d706 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d6e4:	e002      	b.n	800d6ec <create_name+0x48>
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	61bb      	str	r3, [r7, #24]
 800d6ec:	693a      	ldr	r2, [r7, #16]
 800d6ee:	69bb      	ldr	r3, [r7, #24]
 800d6f0:	4413      	add	r3, r2
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	2b2f      	cmp	r3, #47	; 0x2f
 800d6f6:	d0f6      	beq.n	800d6e6 <create_name+0x42>
 800d6f8:	693a      	ldr	r2, [r7, #16]
 800d6fa:	69bb      	ldr	r3, [r7, #24]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	2b5c      	cmp	r3, #92	; 0x5c
 800d702:	d0f0      	beq.n	800d6e6 <create_name+0x42>
			break;
 800d704:	e02a      	b.n	800d75c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	2bfe      	cmp	r3, #254	; 0xfe
 800d70a:	d901      	bls.n	800d710 <create_name+0x6c>
 800d70c:	2306      	movs	r3, #6
 800d70e:	e17d      	b.n	800da0c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d710:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d712:	b2db      	uxtb	r3, r3
 800d714:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d716:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d718:	2101      	movs	r1, #1
 800d71a:	4618      	mov	r0, r3
 800d71c:	f001 ff58 	bl	800f5d0 <ff_convert>
 800d720:	4603      	mov	r3, r0
 800d722:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d724:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d726:	2b00      	cmp	r3, #0
 800d728:	d101      	bne.n	800d72e <create_name+0x8a>
 800d72a:	2306      	movs	r3, #6
 800d72c:	e16e      	b.n	800da0c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d72e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d730:	2b7f      	cmp	r3, #127	; 0x7f
 800d732:	d809      	bhi.n	800d748 <create_name+0xa4>
 800d734:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d736:	4619      	mov	r1, r3
 800d738:	488d      	ldr	r0, [pc, #564]	; (800d970 <create_name+0x2cc>)
 800d73a:	f7fe fc52 	bl	800bfe2 <chk_chr>
 800d73e:	4603      	mov	r3, r0
 800d740:	2b00      	cmp	r3, #0
 800d742:	d001      	beq.n	800d748 <create_name+0xa4>
 800d744:	2306      	movs	r3, #6
 800d746:	e161      	b.n	800da0c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	1c5a      	adds	r2, r3, #1
 800d74c:	617a      	str	r2, [r7, #20]
 800d74e:	005b      	lsls	r3, r3, #1
 800d750:	68fa      	ldr	r2, [r7, #12]
 800d752:	4413      	add	r3, r2
 800d754:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d756:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d758:	e7b4      	b.n	800d6c4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d75a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d75c:	693a      	ldr	r2, [r7, #16]
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	441a      	add	r2, r3
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d766:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d768:	2b1f      	cmp	r3, #31
 800d76a:	d801      	bhi.n	800d770 <create_name+0xcc>
 800d76c:	2304      	movs	r3, #4
 800d76e:	e000      	b.n	800d772 <create_name+0xce>
 800d770:	2300      	movs	r3, #0
 800d772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d776:	e011      	b.n	800d79c <create_name+0xf8>
		w = lfn[di - 1];
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d77e:	3b01      	subs	r3, #1
 800d780:	005b      	lsls	r3, r3, #1
 800d782:	68fa      	ldr	r2, [r7, #12]
 800d784:	4413      	add	r3, r2
 800d786:	881b      	ldrh	r3, [r3, #0]
 800d788:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d78a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d78c:	2b20      	cmp	r3, #32
 800d78e:	d002      	beq.n	800d796 <create_name+0xf2>
 800d790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d792:	2b2e      	cmp	r3, #46	; 0x2e
 800d794:	d106      	bne.n	800d7a4 <create_name+0x100>
		di--;
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	3b01      	subs	r3, #1
 800d79a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d1ea      	bne.n	800d778 <create_name+0xd4>
 800d7a2:	e000      	b.n	800d7a6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d7a4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	005b      	lsls	r3, r3, #1
 800d7aa:	68fa      	ldr	r2, [r7, #12]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d101      	bne.n	800d7bc <create_name+0x118>
 800d7b8:	2306      	movs	r3, #6
 800d7ba:	e127      	b.n	800da0c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	3324      	adds	r3, #36	; 0x24
 800d7c0:	220b      	movs	r2, #11
 800d7c2:	2120      	movs	r1, #32
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7fe fbca 	bl	800bf5e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	61bb      	str	r3, [r7, #24]
 800d7ce:	e002      	b.n	800d7d6 <create_name+0x132>
 800d7d0:	69bb      	ldr	r3, [r7, #24]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	61bb      	str	r3, [r7, #24]
 800d7d6:	69bb      	ldr	r3, [r7, #24]
 800d7d8:	005b      	lsls	r3, r3, #1
 800d7da:	68fa      	ldr	r2, [r7, #12]
 800d7dc:	4413      	add	r3, r2
 800d7de:	881b      	ldrh	r3, [r3, #0]
 800d7e0:	2b20      	cmp	r3, #32
 800d7e2:	d0f5      	beq.n	800d7d0 <create_name+0x12c>
 800d7e4:	69bb      	ldr	r3, [r7, #24]
 800d7e6:	005b      	lsls	r3, r3, #1
 800d7e8:	68fa      	ldr	r2, [r7, #12]
 800d7ea:	4413      	add	r3, r2
 800d7ec:	881b      	ldrh	r3, [r3, #0]
 800d7ee:	2b2e      	cmp	r3, #46	; 0x2e
 800d7f0:	d0ee      	beq.n	800d7d0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d7f2:	69bb      	ldr	r3, [r7, #24]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d009      	beq.n	800d80c <create_name+0x168>
 800d7f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7fc:	f043 0303 	orr.w	r3, r3, #3
 800d800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d804:	e002      	b.n	800d80c <create_name+0x168>
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	3b01      	subs	r3, #1
 800d80a:	617b      	str	r3, [r7, #20]
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d009      	beq.n	800d826 <create_name+0x182>
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d818:	3b01      	subs	r3, #1
 800d81a:	005b      	lsls	r3, r3, #1
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	4413      	add	r3, r2
 800d820:	881b      	ldrh	r3, [r3, #0]
 800d822:	2b2e      	cmp	r3, #46	; 0x2e
 800d824:	d1ef      	bne.n	800d806 <create_name+0x162>

	i = b = 0; ni = 8;
 800d826:	2300      	movs	r3, #0
 800d828:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d82c:	2300      	movs	r3, #0
 800d82e:	623b      	str	r3, [r7, #32]
 800d830:	2308      	movs	r3, #8
 800d832:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	1c5a      	adds	r2, r3, #1
 800d838:	61ba      	str	r2, [r7, #24]
 800d83a:	005b      	lsls	r3, r3, #1
 800d83c:	68fa      	ldr	r2, [r7, #12]
 800d83e:	4413      	add	r3, r2
 800d840:	881b      	ldrh	r3, [r3, #0]
 800d842:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d844:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d846:	2b00      	cmp	r3, #0
 800d848:	f000 8090 	beq.w	800d96c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d84c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d84e:	2b20      	cmp	r3, #32
 800d850:	d006      	beq.n	800d860 <create_name+0x1bc>
 800d852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d854:	2b2e      	cmp	r3, #46	; 0x2e
 800d856:	d10a      	bne.n	800d86e <create_name+0x1ca>
 800d858:	69ba      	ldr	r2, [r7, #24]
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d006      	beq.n	800d86e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d864:	f043 0303 	orr.w	r3, r3, #3
 800d868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d86c:	e07d      	b.n	800d96a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d86e:	6a3a      	ldr	r2, [r7, #32]
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	429a      	cmp	r2, r3
 800d874:	d203      	bcs.n	800d87e <create_name+0x1da>
 800d876:	69ba      	ldr	r2, [r7, #24]
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d123      	bne.n	800d8c6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	2b0b      	cmp	r3, #11
 800d882:	d106      	bne.n	800d892 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d888:	f043 0303 	orr.w	r3, r3, #3
 800d88c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d890:	e075      	b.n	800d97e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d892:	69ba      	ldr	r2, [r7, #24]
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	429a      	cmp	r2, r3
 800d898:	d005      	beq.n	800d8a6 <create_name+0x202>
 800d89a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d89e:	f043 0303 	orr.w	r3, r3, #3
 800d8a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d8a6:	69ba      	ldr	r2, [r7, #24]
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d866      	bhi.n	800d97c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	61bb      	str	r3, [r7, #24]
 800d8b2:	2308      	movs	r3, #8
 800d8b4:	623b      	str	r3, [r7, #32]
 800d8b6:	230b      	movs	r3, #11
 800d8b8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d8ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d8be:	009b      	lsls	r3, r3, #2
 800d8c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d8c4:	e051      	b.n	800d96a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d8c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8c8:	2b7f      	cmp	r3, #127	; 0x7f
 800d8ca:	d914      	bls.n	800d8f6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d8cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8ce:	2100      	movs	r1, #0
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f001 fe7d 	bl	800f5d0 <ff_convert>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d8da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d004      	beq.n	800d8ea <create_name+0x246>
 800d8e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8e2:	3b80      	subs	r3, #128	; 0x80
 800d8e4:	4a23      	ldr	r2, [pc, #140]	; (800d974 <create_name+0x2d0>)
 800d8e6:	5cd3      	ldrb	r3, [r2, r3]
 800d8e8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d8ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8ee:	f043 0302 	orr.w	r3, r3, #2
 800d8f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d8f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d007      	beq.n	800d90c <create_name+0x268>
 800d8fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8fe:	4619      	mov	r1, r3
 800d900:	481d      	ldr	r0, [pc, #116]	; (800d978 <create_name+0x2d4>)
 800d902:	f7fe fb6e 	bl	800bfe2 <chk_chr>
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d008      	beq.n	800d91e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d90c:	235f      	movs	r3, #95	; 0x5f
 800d90e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d914:	f043 0303 	orr.w	r3, r3, #3
 800d918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d91c:	e01b      	b.n	800d956 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d91e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d920:	2b40      	cmp	r3, #64	; 0x40
 800d922:	d909      	bls.n	800d938 <create_name+0x294>
 800d924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d926:	2b5a      	cmp	r3, #90	; 0x5a
 800d928:	d806      	bhi.n	800d938 <create_name+0x294>
					b |= 2;
 800d92a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d92e:	f043 0302 	orr.w	r3, r3, #2
 800d932:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d936:	e00e      	b.n	800d956 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d938:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d93a:	2b60      	cmp	r3, #96	; 0x60
 800d93c:	d90b      	bls.n	800d956 <create_name+0x2b2>
 800d93e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d940:	2b7a      	cmp	r3, #122	; 0x7a
 800d942:	d808      	bhi.n	800d956 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d944:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d948:	f043 0301 	orr.w	r3, r3, #1
 800d94c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d950:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d952:	3b20      	subs	r3, #32
 800d954:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d956:	6a3b      	ldr	r3, [r7, #32]
 800d958:	1c5a      	adds	r2, r3, #1
 800d95a:	623a      	str	r2, [r7, #32]
 800d95c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d95e:	b2d1      	uxtb	r1, r2
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	4413      	add	r3, r2
 800d964:	460a      	mov	r2, r1
 800d966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d96a:	e763      	b.n	800d834 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d96c:	bf00      	nop
 800d96e:	e006      	b.n	800d97e <create_name+0x2da>
 800d970:	08016b48 	.word	0x08016b48
 800d974:	0801a5c4 	.word	0x0801a5c4
 800d978:	08016b54 	.word	0x08016b54
			if (si > di) break;			/* No extension */
 800d97c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d984:	2be5      	cmp	r3, #229	; 0xe5
 800d986:	d103      	bne.n	800d990 <create_name+0x2ec>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2205      	movs	r2, #5
 800d98c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	2b08      	cmp	r3, #8
 800d994:	d104      	bne.n	800d9a0 <create_name+0x2fc>
 800d996:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d9a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d9a4:	f003 030c 	and.w	r3, r3, #12
 800d9a8:	2b0c      	cmp	r3, #12
 800d9aa:	d005      	beq.n	800d9b8 <create_name+0x314>
 800d9ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d9b0:	f003 0303 	and.w	r3, r3, #3
 800d9b4:	2b03      	cmp	r3, #3
 800d9b6:	d105      	bne.n	800d9c4 <create_name+0x320>
 800d9b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9bc:	f043 0302 	orr.w	r3, r3, #2
 800d9c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d9c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9c8:	f003 0302 	and.w	r3, r3, #2
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d117      	bne.n	800da00 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d9d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d9d4:	f003 0303 	and.w	r3, r3, #3
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d105      	bne.n	800d9e8 <create_name+0x344>
 800d9dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9e0:	f043 0310 	orr.w	r3, r3, #16
 800d9e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d9e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d9ec:	f003 030c 	and.w	r3, r3, #12
 800d9f0:	2b04      	cmp	r3, #4
 800d9f2:	d105      	bne.n	800da00 <create_name+0x35c>
 800d9f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9f8:	f043 0308 	orr.w	r3, r3, #8
 800d9fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800da06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800da0a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3728      	adds	r7, #40	; 0x28
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b086      	sub	sp, #24
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800da28:	e002      	b.n	800da30 <follow_path+0x1c>
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	3301      	adds	r3, #1
 800da2e:	603b      	str	r3, [r7, #0]
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	2b2f      	cmp	r3, #47	; 0x2f
 800da36:	d0f8      	beq.n	800da2a <follow_path+0x16>
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	2b5c      	cmp	r3, #92	; 0x5c
 800da3e:	d0f4      	beq.n	800da2a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	2200      	movs	r2, #0
 800da44:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	2b1f      	cmp	r3, #31
 800da4c:	d80a      	bhi.n	800da64 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2280      	movs	r2, #128	; 0x80
 800da52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800da56:	2100      	movs	r1, #0
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f7ff f83f 	bl	800cadc <dir_sdi>
 800da5e:	4603      	mov	r3, r0
 800da60:	75fb      	strb	r3, [r7, #23]
 800da62:	e043      	b.n	800daec <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800da64:	463b      	mov	r3, r7
 800da66:	4619      	mov	r1, r3
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f7ff fe1b 	bl	800d6a4 <create_name>
 800da6e:	4603      	mov	r3, r0
 800da70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800da72:	7dfb      	ldrb	r3, [r7, #23]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d134      	bne.n	800dae2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f7ff fb7c 	bl	800d176 <dir_find>
 800da7e:	4603      	mov	r3, r0
 800da80:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800da88:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800da8a:	7dfb      	ldrb	r3, [r7, #23]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d00a      	beq.n	800daa6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800da90:	7dfb      	ldrb	r3, [r7, #23]
 800da92:	2b04      	cmp	r3, #4
 800da94:	d127      	bne.n	800dae6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800da96:	7afb      	ldrb	r3, [r7, #11]
 800da98:	f003 0304 	and.w	r3, r3, #4
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d122      	bne.n	800dae6 <follow_path+0xd2>
 800daa0:	2305      	movs	r3, #5
 800daa2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800daa4:	e01f      	b.n	800dae6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800daa6:	7afb      	ldrb	r3, [r7, #11]
 800daa8:	f003 0304 	and.w	r3, r3, #4
 800daac:	2b00      	cmp	r3, #0
 800daae:	d11c      	bne.n	800daea <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	799b      	ldrb	r3, [r3, #6]
 800dab4:	f003 0310 	and.w	r3, r3, #16
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d102      	bne.n	800dac2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dabc:	2305      	movs	r3, #5
 800dabe:	75fb      	strb	r3, [r7, #23]
 800dac0:	e014      	b.n	800daec <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	695b      	ldr	r3, [r3, #20]
 800dacc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dad0:	4413      	add	r3, r2
 800dad2:	4619      	mov	r1, r3
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f7ff f988 	bl	800cdea <ld_clust>
 800dada:	4602      	mov	r2, r0
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dae0:	e7c0      	b.n	800da64 <follow_path+0x50>
			if (res != FR_OK) break;
 800dae2:	bf00      	nop
 800dae4:	e002      	b.n	800daec <follow_path+0xd8>
				break;
 800dae6:	bf00      	nop
 800dae8:	e000      	b.n	800daec <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800daea:	bf00      	nop
			}
		}
	}

	return res;
 800daec:	7dfb      	ldrb	r3, [r7, #23]
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3718      	adds	r7, #24
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800daf6:	b480      	push	{r7}
 800daf8:	b087      	sub	sp, #28
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dafe:	f04f 33ff 	mov.w	r3, #4294967295
 800db02:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d031      	beq.n	800db70 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	617b      	str	r3, [r7, #20]
 800db12:	e002      	b.n	800db1a <get_ldnumber+0x24>
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	3301      	adds	r3, #1
 800db18:	617b      	str	r3, [r7, #20]
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	2b1f      	cmp	r3, #31
 800db20:	d903      	bls.n	800db2a <get_ldnumber+0x34>
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	2b3a      	cmp	r3, #58	; 0x3a
 800db28:	d1f4      	bne.n	800db14 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	2b3a      	cmp	r3, #58	; 0x3a
 800db30:	d11c      	bne.n	800db6c <get_ldnumber+0x76>
			tp = *path;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	1c5a      	adds	r2, r3, #1
 800db3c:	60fa      	str	r2, [r7, #12]
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	3b30      	subs	r3, #48	; 0x30
 800db42:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	2b09      	cmp	r3, #9
 800db48:	d80e      	bhi.n	800db68 <get_ldnumber+0x72>
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d10a      	bne.n	800db68 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d107      	bne.n	800db68 <get_ldnumber+0x72>
					vol = (int)i;
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	3301      	adds	r3, #1
 800db60:	617b      	str	r3, [r7, #20]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	697a      	ldr	r2, [r7, #20]
 800db66:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	e002      	b.n	800db72 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800db6c:	2300      	movs	r3, #0
 800db6e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800db70:	693b      	ldr	r3, [r7, #16]
}
 800db72:	4618      	mov	r0, r3
 800db74:	371c      	adds	r7, #28
 800db76:	46bd      	mov	sp, r7
 800db78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7c:	4770      	bx	lr
	...

0800db80 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b082      	sub	sp, #8
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2200      	movs	r2, #0
 800db8e:	70da      	strb	r2, [r3, #3]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f04f 32ff 	mov.w	r2, #4294967295
 800db96:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800db98:	6839      	ldr	r1, [r7, #0]
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f7fe fc1e 	bl	800c3dc <move_window>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d001      	beq.n	800dbaa <check_fs+0x2a>
 800dba6:	2304      	movs	r3, #4
 800dba8:	e038      	b.n	800dc1c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	3338      	adds	r3, #56	; 0x38
 800dbae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7fe f930 	bl	800be18 <ld_word>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	461a      	mov	r2, r3
 800dbbc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d001      	beq.n	800dbc8 <check_fs+0x48>
 800dbc4:	2303      	movs	r3, #3
 800dbc6:	e029      	b.n	800dc1c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dbce:	2be9      	cmp	r3, #233	; 0xe9
 800dbd0:	d009      	beq.n	800dbe6 <check_fs+0x66>
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dbd8:	2beb      	cmp	r3, #235	; 0xeb
 800dbda:	d11e      	bne.n	800dc1a <check_fs+0x9a>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800dbe2:	2b90      	cmp	r3, #144	; 0x90
 800dbe4:	d119      	bne.n	800dc1a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	3338      	adds	r3, #56	; 0x38
 800dbea:	3336      	adds	r3, #54	; 0x36
 800dbec:	4618      	mov	r0, r3
 800dbee:	f7fe f92b 	bl	800be48 <ld_dword>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dbf8:	4a0a      	ldr	r2, [pc, #40]	; (800dc24 <check_fs+0xa4>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d101      	bne.n	800dc02 <check_fs+0x82>
 800dbfe:	2300      	movs	r3, #0
 800dc00:	e00c      	b.n	800dc1c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	3338      	adds	r3, #56	; 0x38
 800dc06:	3352      	adds	r3, #82	; 0x52
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7fe f91d 	bl	800be48 <ld_dword>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	4a05      	ldr	r2, [pc, #20]	; (800dc28 <check_fs+0xa8>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d101      	bne.n	800dc1a <check_fs+0x9a>
 800dc16:	2300      	movs	r3, #0
 800dc18:	e000      	b.n	800dc1c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dc1a:	2302      	movs	r3, #2
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3708      	adds	r7, #8
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	00544146 	.word	0x00544146
 800dc28:	33544146 	.word	0x33544146

0800dc2c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b096      	sub	sp, #88	; 0x58
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	4613      	mov	r3, r2
 800dc38:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dc40:	68f8      	ldr	r0, [r7, #12]
 800dc42:	f7ff ff58 	bl	800daf6 <get_ldnumber>
 800dc46:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dc48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	da01      	bge.n	800dc52 <find_volume+0x26>
 800dc4e:	230b      	movs	r3, #11
 800dc50:	e235      	b.n	800e0be <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dc52:	4aa5      	ldr	r2, [pc, #660]	; (800dee8 <find_volume+0x2bc>)
 800dc54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc5a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d101      	bne.n	800dc66 <find_volume+0x3a>
 800dc62:	230c      	movs	r3, #12
 800dc64:	e22b      	b.n	800e0be <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800dc66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc68:	f7fe f9d6 	bl	800c018 <lock_fs>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d101      	bne.n	800dc76 <find_volume+0x4a>
 800dc72:	230f      	movs	r3, #15
 800dc74:	e223      	b.n	800e0be <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc7a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dc7c:	79fb      	ldrb	r3, [r7, #7]
 800dc7e:	f023 0301 	bic.w	r3, r3, #1
 800dc82:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d01a      	beq.n	800dcc2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800dc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8e:	785b      	ldrb	r3, [r3, #1]
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7fe f823 	bl	800bcdc <disk_status>
 800dc96:	4603      	mov	r3, r0
 800dc98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dc9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dca0:	f003 0301 	and.w	r3, r3, #1
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d10c      	bne.n	800dcc2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dca8:	79fb      	ldrb	r3, [r7, #7]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d007      	beq.n	800dcbe <find_volume+0x92>
 800dcae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dcb2:	f003 0304 	and.w	r3, r3, #4
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d001      	beq.n	800dcbe <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800dcba:	230a      	movs	r3, #10
 800dcbc:	e1ff      	b.n	800e0be <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	e1fd      	b.n	800e0be <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dcc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcca:	b2da      	uxtb	r2, r3
 800dccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd2:	785b      	ldrb	r3, [r3, #1]
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7fe f81b 	bl	800bd10 <disk_initialize>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dce0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dce4:	f003 0301 	and.w	r3, r3, #1
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d001      	beq.n	800dcf0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dcec:	2303      	movs	r3, #3
 800dcee:	e1e6      	b.n	800e0be <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dcf0:	79fb      	ldrb	r3, [r7, #7]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d007      	beq.n	800dd06 <find_volume+0xda>
 800dcf6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dcfa:	f003 0304 	and.w	r3, r3, #4
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d001      	beq.n	800dd06 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800dd02:	230a      	movs	r3, #10
 800dd04:	e1db      	b.n	800e0be <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dd06:	2300      	movs	r3, #0
 800dd08:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dd0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dd0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd0e:	f7ff ff37 	bl	800db80 <check_fs>
 800dd12:	4603      	mov	r3, r0
 800dd14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dd18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd1c:	2b02      	cmp	r3, #2
 800dd1e:	d149      	bne.n	800ddb4 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dd20:	2300      	movs	r3, #0
 800dd22:	643b      	str	r3, [r7, #64]	; 0x40
 800dd24:	e01e      	b.n	800dd64 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd28:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dd2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd2e:	011b      	lsls	r3, r3, #4
 800dd30:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800dd34:	4413      	add	r3, r2
 800dd36:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3a:	3304      	adds	r3, #4
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d006      	beq.n	800dd50 <find_volume+0x124>
 800dd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd44:	3308      	adds	r3, #8
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7fe f87e 	bl	800be48 <ld_dword>
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	e000      	b.n	800dd52 <find_volume+0x126>
 800dd50:	2200      	movs	r2, #0
 800dd52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	3358      	adds	r3, #88	; 0x58
 800dd58:	443b      	add	r3, r7
 800dd5a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dd5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd60:	3301      	adds	r3, #1
 800dd62:	643b      	str	r3, [r7, #64]	; 0x40
 800dd64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd66:	2b03      	cmp	r3, #3
 800dd68:	d9dd      	bls.n	800dd26 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800dd6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d002      	beq.n	800dd7a <find_volume+0x14e>
 800dd74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd76:	3b01      	subs	r3, #1
 800dd78:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dd7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd7c:	009b      	lsls	r3, r3, #2
 800dd7e:	3358      	adds	r3, #88	; 0x58
 800dd80:	443b      	add	r3, r7
 800dd82:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dd86:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dd88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d005      	beq.n	800dd9a <find_volume+0x16e>
 800dd8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dd90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd92:	f7ff fef5 	bl	800db80 <check_fs>
 800dd96:	4603      	mov	r3, r0
 800dd98:	e000      	b.n	800dd9c <find_volume+0x170>
 800dd9a:	2303      	movs	r3, #3
 800dd9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dda0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d905      	bls.n	800ddb4 <find_volume+0x188>
 800dda8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddaa:	3301      	adds	r3, #1
 800ddac:	643b      	str	r3, [r7, #64]	; 0x40
 800ddae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddb0:	2b03      	cmp	r3, #3
 800ddb2:	d9e2      	bls.n	800dd7a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ddb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ddb8:	2b04      	cmp	r3, #4
 800ddba:	d101      	bne.n	800ddc0 <find_volume+0x194>
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	e17e      	b.n	800e0be <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ddc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d901      	bls.n	800ddcc <find_volume+0x1a0>
 800ddc8:	230d      	movs	r3, #13
 800ddca:	e178      	b.n	800e0be <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ddcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddce:	3338      	adds	r3, #56	; 0x38
 800ddd0:	330b      	adds	r3, #11
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7fe f820 	bl	800be18 <ld_word>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddde:	d001      	beq.n	800dde4 <find_volume+0x1b8>
 800dde0:	230d      	movs	r3, #13
 800dde2:	e16c      	b.n	800e0be <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde6:	3338      	adds	r3, #56	; 0x38
 800dde8:	3316      	adds	r3, #22
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7fe f814 	bl	800be18 <ld_word>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ddf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d106      	bne.n	800de08 <find_volume+0x1dc>
 800ddfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfc:	3338      	adds	r3, #56	; 0x38
 800ddfe:	3324      	adds	r3, #36	; 0x24
 800de00:	4618      	mov	r0, r3
 800de02:	f7fe f821 	bl	800be48 <ld_dword>
 800de06:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800de08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de0c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800de0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de10:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800de14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de16:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800de18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de1a:	789b      	ldrb	r3, [r3, #2]
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d005      	beq.n	800de2c <find_volume+0x200>
 800de20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de22:	789b      	ldrb	r3, [r3, #2]
 800de24:	2b02      	cmp	r3, #2
 800de26:	d001      	beq.n	800de2c <find_volume+0x200>
 800de28:	230d      	movs	r3, #13
 800de2a:	e148      	b.n	800e0be <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800de2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2e:	789b      	ldrb	r3, [r3, #2]
 800de30:	461a      	mov	r2, r3
 800de32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de34:	fb02 f303 	mul.w	r3, r2, r3
 800de38:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800de3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de40:	b29a      	uxth	r2, r3
 800de42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de44:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800de46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de48:	895b      	ldrh	r3, [r3, #10]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d008      	beq.n	800de60 <find_volume+0x234>
 800de4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de50:	895b      	ldrh	r3, [r3, #10]
 800de52:	461a      	mov	r2, r3
 800de54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de56:	895b      	ldrh	r3, [r3, #10]
 800de58:	3b01      	subs	r3, #1
 800de5a:	4013      	ands	r3, r2
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d001      	beq.n	800de64 <find_volume+0x238>
 800de60:	230d      	movs	r3, #13
 800de62:	e12c      	b.n	800e0be <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800de64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de66:	3338      	adds	r3, #56	; 0x38
 800de68:	3311      	adds	r3, #17
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7fd ffd4 	bl	800be18 <ld_word>
 800de70:	4603      	mov	r3, r0
 800de72:	461a      	mov	r2, r3
 800de74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de76:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800de78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7a:	891b      	ldrh	r3, [r3, #8]
 800de7c:	f003 030f 	and.w	r3, r3, #15
 800de80:	b29b      	uxth	r3, r3
 800de82:	2b00      	cmp	r3, #0
 800de84:	d001      	beq.n	800de8a <find_volume+0x25e>
 800de86:	230d      	movs	r3, #13
 800de88:	e119      	b.n	800e0be <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800de8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de8c:	3338      	adds	r3, #56	; 0x38
 800de8e:	3313      	adds	r3, #19
 800de90:	4618      	mov	r0, r3
 800de92:	f7fd ffc1 	bl	800be18 <ld_word>
 800de96:	4603      	mov	r3, r0
 800de98:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800de9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d106      	bne.n	800deae <find_volume+0x282>
 800dea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea2:	3338      	adds	r3, #56	; 0x38
 800dea4:	3320      	adds	r3, #32
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7fd ffce 	bl	800be48 <ld_dword>
 800deac:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800deae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb0:	3338      	adds	r3, #56	; 0x38
 800deb2:	330e      	adds	r3, #14
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7fd ffaf 	bl	800be18 <ld_word>
 800deba:	4603      	mov	r3, r0
 800debc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800debe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d101      	bne.n	800dec8 <find_volume+0x29c>
 800dec4:	230d      	movs	r3, #13
 800dec6:	e0fa      	b.n	800e0be <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dec8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800deca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800decc:	4413      	add	r3, r2
 800dece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ded0:	8912      	ldrh	r2, [r2, #8]
 800ded2:	0912      	lsrs	r2, r2, #4
 800ded4:	b292      	uxth	r2, r2
 800ded6:	4413      	add	r3, r2
 800ded8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800deda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dede:	429a      	cmp	r2, r3
 800dee0:	d204      	bcs.n	800deec <find_volume+0x2c0>
 800dee2:	230d      	movs	r3, #13
 800dee4:	e0eb      	b.n	800e0be <find_volume+0x492>
 800dee6:	bf00      	nop
 800dee8:	20001c9c 	.word	0x20001c9c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800deec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800deee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def0:	1ad3      	subs	r3, r2, r3
 800def2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800def4:	8952      	ldrh	r2, [r2, #10]
 800def6:	fbb3 f3f2 	udiv	r3, r3, r2
 800defa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800defc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defe:	2b00      	cmp	r3, #0
 800df00:	d101      	bne.n	800df06 <find_volume+0x2da>
 800df02:	230d      	movs	r3, #13
 800df04:	e0db      	b.n	800e0be <find_volume+0x492>
		fmt = FS_FAT32;
 800df06:	2303      	movs	r3, #3
 800df08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800df0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800df12:	4293      	cmp	r3, r2
 800df14:	d802      	bhi.n	800df1c <find_volume+0x2f0>
 800df16:	2302      	movs	r3, #2
 800df18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800df1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800df22:	4293      	cmp	r3, r2
 800df24:	d802      	bhi.n	800df2c <find_volume+0x300>
 800df26:	2301      	movs	r3, #1
 800df28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800df2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2e:	1c9a      	adds	r2, r3, #2
 800df30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df32:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800df34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df38:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800df3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800df3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df3e:	441a      	add	r2, r3
 800df40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df42:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800df44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df48:	441a      	add	r2, r3
 800df4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800df4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df52:	2b03      	cmp	r3, #3
 800df54:	d11e      	bne.n	800df94 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800df56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df58:	3338      	adds	r3, #56	; 0x38
 800df5a:	332a      	adds	r3, #42	; 0x2a
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7fd ff5b 	bl	800be18 <ld_word>
 800df62:	4603      	mov	r3, r0
 800df64:	2b00      	cmp	r3, #0
 800df66:	d001      	beq.n	800df6c <find_volume+0x340>
 800df68:	230d      	movs	r3, #13
 800df6a:	e0a8      	b.n	800e0be <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800df6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6e:	891b      	ldrh	r3, [r3, #8]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d001      	beq.n	800df78 <find_volume+0x34c>
 800df74:	230d      	movs	r3, #13
 800df76:	e0a2      	b.n	800e0be <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800df78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df7a:	3338      	adds	r3, #56	; 0x38
 800df7c:	332c      	adds	r3, #44	; 0x2c
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fd ff62 	bl	800be48 <ld_dword>
 800df84:	4602      	mov	r2, r0
 800df86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df88:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800df8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8c:	69db      	ldr	r3, [r3, #28]
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	647b      	str	r3, [r7, #68]	; 0x44
 800df92:	e01f      	b.n	800dfd4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800df94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df96:	891b      	ldrh	r3, [r3, #8]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d101      	bne.n	800dfa0 <find_volume+0x374>
 800df9c:	230d      	movs	r3, #13
 800df9e:	e08e      	b.n	800e0be <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dfa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfa6:	441a      	add	r2, r3
 800dfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfaa:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dfac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dfb0:	2b02      	cmp	r3, #2
 800dfb2:	d103      	bne.n	800dfbc <find_volume+0x390>
 800dfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb6:	69db      	ldr	r3, [r3, #28]
 800dfb8:	005b      	lsls	r3, r3, #1
 800dfba:	e00a      	b.n	800dfd2 <find_volume+0x3a6>
 800dfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfbe:	69da      	ldr	r2, [r3, #28]
 800dfc0:	4613      	mov	r3, r2
 800dfc2:	005b      	lsls	r3, r3, #1
 800dfc4:	4413      	add	r3, r2
 800dfc6:	085a      	lsrs	r2, r3, #1
 800dfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfca:	69db      	ldr	r3, [r3, #28]
 800dfcc:	f003 0301 	and.w	r3, r3, #1
 800dfd0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dfd2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd6:	6a1a      	ldr	r2, [r3, #32]
 800dfd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfda:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800dfde:	0a5b      	lsrs	r3, r3, #9
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d201      	bcs.n	800dfe8 <find_volume+0x3bc>
 800dfe4:	230d      	movs	r3, #13
 800dfe6:	e06a      	b.n	800e0be <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfea:	f04f 32ff 	mov.w	r2, #4294967295
 800dfee:	619a      	str	r2, [r3, #24]
 800dff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff2:	699a      	ldr	r2, [r3, #24]
 800dff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800dff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffa:	2280      	movs	r2, #128	; 0x80
 800dffc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dffe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e002:	2b03      	cmp	r3, #3
 800e004:	d149      	bne.n	800e09a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e008:	3338      	adds	r3, #56	; 0x38
 800e00a:	3330      	adds	r3, #48	; 0x30
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fd ff03 	bl	800be18 <ld_word>
 800e012:	4603      	mov	r3, r0
 800e014:	2b01      	cmp	r3, #1
 800e016:	d140      	bne.n	800e09a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e01a:	3301      	adds	r3, #1
 800e01c:	4619      	mov	r1, r3
 800e01e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e020:	f7fe f9dc 	bl	800c3dc <move_window>
 800e024:	4603      	mov	r3, r0
 800e026:	2b00      	cmp	r3, #0
 800e028:	d137      	bne.n	800e09a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800e02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02c:	2200      	movs	r2, #0
 800e02e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e032:	3338      	adds	r3, #56	; 0x38
 800e034:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e038:	4618      	mov	r0, r3
 800e03a:	f7fd feed 	bl	800be18 <ld_word>
 800e03e:	4603      	mov	r3, r0
 800e040:	461a      	mov	r2, r3
 800e042:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e046:	429a      	cmp	r2, r3
 800e048:	d127      	bne.n	800e09a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04c:	3338      	adds	r3, #56	; 0x38
 800e04e:	4618      	mov	r0, r3
 800e050:	f7fd fefa 	bl	800be48 <ld_dword>
 800e054:	4603      	mov	r3, r0
 800e056:	4a1c      	ldr	r2, [pc, #112]	; (800e0c8 <find_volume+0x49c>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d11e      	bne.n	800e09a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e05e:	3338      	adds	r3, #56	; 0x38
 800e060:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e064:	4618      	mov	r0, r3
 800e066:	f7fd feef 	bl	800be48 <ld_dword>
 800e06a:	4603      	mov	r3, r0
 800e06c:	4a17      	ldr	r2, [pc, #92]	; (800e0cc <find_volume+0x4a0>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d113      	bne.n	800e09a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e074:	3338      	adds	r3, #56	; 0x38
 800e076:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fd fee4 	bl	800be48 <ld_dword>
 800e080:	4602      	mov	r2, r0
 800e082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e084:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e088:	3338      	adds	r3, #56	; 0x38
 800e08a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e08e:	4618      	mov	r0, r3
 800e090:	f7fd feda 	bl	800be48 <ld_dword>
 800e094:	4602      	mov	r2, r0
 800e096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e098:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e09c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e0a0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e0a2:	4b0b      	ldr	r3, [pc, #44]	; (800e0d0 <find_volume+0x4a4>)
 800e0a4:	881b      	ldrh	r3, [r3, #0]
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	b29a      	uxth	r2, r3
 800e0aa:	4b09      	ldr	r3, [pc, #36]	; (800e0d0 <find_volume+0x4a4>)
 800e0ac:	801a      	strh	r2, [r3, #0]
 800e0ae:	4b08      	ldr	r3, [pc, #32]	; (800e0d0 <find_volume+0x4a4>)
 800e0b0:	881a      	ldrh	r2, [r3, #0]
 800e0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e0b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e0b8:	f7fe f928 	bl	800c30c <clear_lock>
#endif
	return FR_OK;
 800e0bc:	2300      	movs	r3, #0
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3758      	adds	r7, #88	; 0x58
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	41615252 	.word	0x41615252
 800e0cc:	61417272 	.word	0x61417272
 800e0d0:	20001ca0 	.word	0x20001ca0

0800e0d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e0de:	2309      	movs	r3, #9
 800e0e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d02e      	beq.n	800e146 <validate+0x72>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d02a      	beq.n	800e146 <validate+0x72>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d025      	beq.n	800e146 <validate+0x72>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	889a      	ldrh	r2, [r3, #4]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	88db      	ldrh	r3, [r3, #6]
 800e104:	429a      	cmp	r2, r3
 800e106:	d11e      	bne.n	800e146 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7fd ff83 	bl	800c018 <lock_fs>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	d014      	beq.n	800e142 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	785b      	ldrb	r3, [r3, #1]
 800e11e:	4618      	mov	r0, r3
 800e120:	f7fd fddc 	bl	800bcdc <disk_status>
 800e124:	4603      	mov	r3, r0
 800e126:	f003 0301 	and.w	r3, r3, #1
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d102      	bne.n	800e134 <validate+0x60>
				res = FR_OK;
 800e12e:	2300      	movs	r3, #0
 800e130:	73fb      	strb	r3, [r7, #15]
 800e132:	e008      	b.n	800e146 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2100      	movs	r1, #0
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7fd ff82 	bl	800c044 <unlock_fs>
 800e140:	e001      	b.n	800e146 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800e142:	230f      	movs	r3, #15
 800e144:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e146:	7bfb      	ldrb	r3, [r7, #15]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d102      	bne.n	800e152 <validate+0x7e>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	e000      	b.n	800e154 <validate+0x80>
 800e152:	2300      	movs	r3, #0
 800e154:	683a      	ldr	r2, [r7, #0]
 800e156:	6013      	str	r3, [r2, #0]
	return res;
 800e158:	7bfb      	ldrb	r3, [r7, #15]
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
	...

0800e164 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b088      	sub	sp, #32
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	4613      	mov	r3, r2
 800e170:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e176:	f107 0310 	add.w	r3, r7, #16
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7ff fcbb 	bl	800daf6 <get_ldnumber>
 800e180:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	2b00      	cmp	r3, #0
 800e186:	da01      	bge.n	800e18c <f_mount+0x28>
 800e188:	230b      	movs	r3, #11
 800e18a:	e048      	b.n	800e21e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e18c:	4a26      	ldr	r2, [pc, #152]	; (800e228 <f_mount+0xc4>)
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e194:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e196:	69bb      	ldr	r3, [r7, #24]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d00f      	beq.n	800e1bc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e19c:	69b8      	ldr	r0, [r7, #24]
 800e19e:	f7fe f8b5 	bl	800c30c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	691b      	ldr	r3, [r3, #16]
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f001 faf8 	bl	800f79c <ff_del_syncobj>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d101      	bne.n	800e1b6 <f_mount+0x52>
 800e1b2:	2302      	movs	r3, #2
 800e1b4:	e033      	b.n	800e21e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e1b6:	69bb      	ldr	r3, [r7, #24]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d00f      	beq.n	800e1e2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	b2da      	uxtb	r2, r3
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	3310      	adds	r3, #16
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	4610      	mov	r0, r2
 800e1d4:	f001 fac2 	bl	800f75c <ff_cre_syncobj>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d101      	bne.n	800e1e2 <f_mount+0x7e>
 800e1de:	2302      	movs	r3, #2
 800e1e0:	e01d      	b.n	800e21e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e1e2:	68fa      	ldr	r2, [r7, #12]
 800e1e4:	4910      	ldr	r1, [pc, #64]	; (800e228 <f_mount+0xc4>)
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d002      	beq.n	800e1f8 <f_mount+0x94>
 800e1f2:	79fb      	ldrb	r3, [r7, #7]
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d001      	beq.n	800e1fc <f_mount+0x98>
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	e010      	b.n	800e21e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e1fc:	f107 010c 	add.w	r1, r7, #12
 800e200:	f107 0308 	add.w	r3, r7, #8
 800e204:	2200      	movs	r2, #0
 800e206:	4618      	mov	r0, r3
 800e208:	f7ff fd10 	bl	800dc2c <find_volume>
 800e20c:	4603      	mov	r3, r0
 800e20e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	7dfa      	ldrb	r2, [r7, #23]
 800e214:	4611      	mov	r1, r2
 800e216:	4618      	mov	r0, r3
 800e218:	f7fd ff14 	bl	800c044 <unlock_fs>
 800e21c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3720      	adds	r7, #32
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	20001c9c 	.word	0x20001c9c

0800e22c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800e232:	af00      	add	r7, sp, #0
 800e234:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e238:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e23c:	6018      	str	r0, [r3, #0]
 800e23e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e242:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800e246:	6019      	str	r1, [r3, #0]
 800e248:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e24c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800e250:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e252:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e256:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d101      	bne.n	800e264 <f_open+0x38>
 800e260:	2309      	movs	r3, #9
 800e262:	e29d      	b.n	800e7a0 <f_open+0x574>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e264:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e268:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800e26c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800e270:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800e274:	7812      	ldrb	r2, [r2, #0]
 800e276:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800e27a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800e27c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e280:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800e284:	781a      	ldrb	r2, [r3, #0]
 800e286:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800e28a:	f107 0308 	add.w	r3, r7, #8
 800e28e:	4618      	mov	r0, r3
 800e290:	f7ff fccc 	bl	800dc2c <find_volume>
 800e294:	4603      	mov	r3, r0
 800e296:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800e29a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	f040 8269 	bne.w	800e776 <f_open+0x54a>
		dj.obj.fs = fs;
 800e2a4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e2a8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800e2ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e2b0:	f107 0214 	add.w	r2, r7, #20
 800e2b4:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800e2b6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e2ba:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e2c4:	4611      	mov	r1, r2
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7ff fba4 	bl	800da14 <follow_path>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e2d2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d11e      	bne.n	800e318 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e2da:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800e2de:	b25b      	sxtb	r3, r3
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	da03      	bge.n	800e2ec <f_open+0xc0>
				res = FR_INVALID_NAME;
 800e2e4:	2306      	movs	r3, #6
 800e2e6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e2ea:	e015      	b.n	800e318 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e2ec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e2f0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	f023 0301 	bic.w	r3, r3, #1
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	bf14      	ite	ne
 800e2fe:	2301      	movne	r3, #1
 800e300:	2300      	moveq	r3, #0
 800e302:	b2db      	uxtb	r3, r3
 800e304:	461a      	mov	r2, r3
 800e306:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e30a:	4611      	mov	r1, r2
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7fd feb5 	bl	800c07c <chk_lock>
 800e312:	4603      	mov	r3, r0
 800e314:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e318:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e31c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	f003 031c 	and.w	r3, r3, #28
 800e326:	2b00      	cmp	r3, #0
 800e328:	f000 80a7 	beq.w	800e47a <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 800e32c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e330:	2b00      	cmp	r3, #0
 800e332:	d01f      	beq.n	800e374 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e334:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e338:	2b04      	cmp	r3, #4
 800e33a:	d10e      	bne.n	800e35a <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e33c:	f7fd fefa 	bl	800c134 <enq_lock>
 800e340:	4603      	mov	r3, r0
 800e342:	2b00      	cmp	r3, #0
 800e344:	d006      	beq.n	800e354 <f_open+0x128>
 800e346:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fe ffd4 	bl	800d2f8 <dir_register>
 800e350:	4603      	mov	r3, r0
 800e352:	e000      	b.n	800e356 <f_open+0x12a>
 800e354:	2312      	movs	r3, #18
 800e356:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e35a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e35e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800e362:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800e366:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800e36a:	7812      	ldrb	r2, [r2, #0]
 800e36c:	f042 0208 	orr.w	r2, r2, #8
 800e370:	701a      	strb	r2, [r3, #0]
 800e372:	e015      	b.n	800e3a0 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e374:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800e378:	f003 0311 	and.w	r3, r3, #17
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d003      	beq.n	800e388 <f_open+0x15c>
					res = FR_DENIED;
 800e380:	2307      	movs	r3, #7
 800e382:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e386:	e00b      	b.n	800e3a0 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e388:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e38c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	f003 0304 	and.w	r3, r3, #4
 800e396:	2b00      	cmp	r3, #0
 800e398:	d002      	beq.n	800e3a0 <f_open+0x174>
 800e39a:	2308      	movs	r3, #8
 800e39c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e3a0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	f040 8088 	bne.w	800e4ba <f_open+0x28e>
 800e3aa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e3ae:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	f003 0308 	and.w	r3, r3, #8
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d07e      	beq.n	800e4ba <f_open+0x28e>
				dw = GET_FATTIME();
 800e3bc:	f7fd fa2c 	bl	800b818 <get_fattime>
 800e3c0:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e3c4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e3c8:	330e      	adds	r3, #14
 800e3ca:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7fd fd78 	bl	800bec4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e3d4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e3d8:	3316      	adds	r3, #22
 800e3da:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7fd fd70 	bl	800bec4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e3e4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e3e8:	330b      	adds	r3, #11
 800e3ea:	2220      	movs	r2, #32
 800e3ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e3ee:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e3f2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800e3f6:	4611      	mov	r1, r2
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7fe fcf6 	bl	800cdea <ld_clust>
 800e3fe:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e402:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e406:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800e40a:	2200      	movs	r2, #0
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7fe fd0b 	bl	800ce28 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e412:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e416:	331c      	adds	r3, #28
 800e418:	2100      	movs	r1, #0
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7fd fd52 	bl	800bec4 <st_dword>
					fs->wflag = 1;
 800e420:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e424:	2201      	movs	r2, #1
 800e426:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e428:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d044      	beq.n	800e4ba <f_open+0x28e>
						dw = fs->winsect;
 800e430:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e436:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800e43a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e43e:	2200      	movs	r2, #0
 800e440:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800e444:	4618      	mov	r0, r3
 800e446:	f7fe fa18 	bl	800c87a <remove_chain>
 800e44a:	4603      	mov	r3, r0
 800e44c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800e450:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e454:	2b00      	cmp	r3, #0
 800e456:	d130      	bne.n	800e4ba <f_open+0x28e>
							res = move_window(fs, dw);
 800e458:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e45c:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800e460:	4618      	mov	r0, r3
 800e462:	f7fd ffbb 	bl	800c3dc <move_window>
 800e466:	4603      	mov	r3, r0
 800e468:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e46c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e470:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800e474:	3a01      	subs	r2, #1
 800e476:	615a      	str	r2, [r3, #20]
 800e478:	e01f      	b.n	800e4ba <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e47a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d11b      	bne.n	800e4ba <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e482:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800e486:	f003 0310 	and.w	r3, r3, #16
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d003      	beq.n	800e496 <f_open+0x26a>
					res = FR_NO_FILE;
 800e48e:	2304      	movs	r3, #4
 800e490:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e494:	e011      	b.n	800e4ba <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e496:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e49a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	f003 0302 	and.w	r3, r3, #2
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d008      	beq.n	800e4ba <f_open+0x28e>
 800e4a8:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800e4ac:	f003 0301 	and.w	r3, r3, #1
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d002      	beq.n	800e4ba <f_open+0x28e>
						res = FR_DENIED;
 800e4b4:	2307      	movs	r3, #7
 800e4b6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800e4ba:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d14a      	bne.n	800e558 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e4c2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e4c6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	f003 0308 	and.w	r3, r3, #8
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d00b      	beq.n	800e4ec <f_open+0x2c0>
				mode |= FA_MODIFIED;
 800e4d4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e4d8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800e4dc:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800e4e0:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800e4e4:	7812      	ldrb	r2, [r2, #0]
 800e4e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e4ea:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e4ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e4f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4f2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e4f6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e4fe:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800e502:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e506:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e50e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e512:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	f023 0301 	bic.w	r3, r3, #1
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	bf14      	ite	ne
 800e520:	2301      	movne	r3, #1
 800e522:	2300      	moveq	r3, #0
 800e524:	b2db      	uxtb	r3, r3
 800e526:	461a      	mov	r2, r3
 800e528:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e52c:	4611      	mov	r1, r2
 800e52e:	4618      	mov	r0, r3
 800e530:	f7fd fe22 	bl	800c178 <inc_lock>
 800e534:	4602      	mov	r2, r0
 800e536:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e53a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e542:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e546:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	691b      	ldr	r3, [r3, #16]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d102      	bne.n	800e558 <f_open+0x32c>
 800e552:	2302      	movs	r3, #2
 800e554:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e558:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	f040 810a 	bne.w	800e776 <f_open+0x54a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e562:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e566:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800e56a:	4611      	mov	r1, r2
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7fe fc3c 	bl	800cdea <ld_clust>
 800e572:	4602      	mov	r2, r0
 800e574:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e578:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e580:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800e584:	331c      	adds	r3, #28
 800e586:	4618      	mov	r0, r3
 800e588:	f7fd fc5e 	bl	800be48 <ld_dword>
 800e58c:	4602      	mov	r2, r0
 800e58e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e592:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e59a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e59e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e5a8:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800e5ac:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e5b0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e5b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e5bc:	88da      	ldrh	r2, [r3, #6]
 800e5be:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e5c2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e5ca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e5ce:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800e5d8:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800e5dc:	7812      	ldrb	r2, [r2, #0]
 800e5de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e5e0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e5e4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e5ee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e5f2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e5fc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e600:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2200      	movs	r2, #0
 800e608:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e60a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e60e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	3330      	adds	r3, #48	; 0x30
 800e616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e61a:	2100      	movs	r1, #0
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7fd fc9e 	bl	800bf5e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e622:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e626:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	f003 0320 	and.w	r3, r3, #32
 800e630:	2b00      	cmp	r3, #0
 800e632:	f000 80a0 	beq.w	800e776 <f_open+0x54a>
 800e636:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e63a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	68db      	ldr	r3, [r3, #12]
 800e642:	2b00      	cmp	r3, #0
 800e644:	f000 8097 	beq.w	800e776 <f_open+0x54a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e648:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e64c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	68da      	ldr	r2, [r3, #12]
 800e654:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e658:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e660:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e664:	895b      	ldrh	r3, [r3, #10]
 800e666:	025b      	lsls	r3, r3, #9
 800e668:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e66c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e670:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	689b      	ldr	r3, [r3, #8]
 800e678:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e67c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e680:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800e68c:	e021      	b.n	800e6d2 <f_open+0x4a6>
					clst = get_fat(&fp->obj, clst);
 800e68e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e692:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7fd ff58 	bl	800c552 <get_fat>
 800e6a2:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800e6a6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	d802      	bhi.n	800e6b4 <f_open+0x488>
 800e6ae:	2302      	movs	r3, #2
 800e6b0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e6b4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800e6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6bc:	d102      	bne.n	800e6c4 <f_open+0x498>
 800e6be:	2301      	movs	r3, #1
 800e6c0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e6c4:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800e6c8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800e6cc:	1ad3      	subs	r3, r2, r3
 800e6ce:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800e6d2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d105      	bne.n	800e6e6 <f_open+0x4ba>
 800e6da:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800e6de:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d8d3      	bhi.n	800e68e <f_open+0x462>
				}
				fp->clust = clst;
 800e6e6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e6ea:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800e6f4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e6f6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d13b      	bne.n	800e776 <f_open+0x54a>
 800e6fe:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800e702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e706:	2b00      	cmp	r3, #0
 800e708:	d035      	beq.n	800e776 <f_open+0x54a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e70a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e70e:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800e712:	4618      	mov	r0, r3
 800e714:	f7fd fefe 	bl	800c514 <clust2sect>
 800e718:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800e71c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800e720:	2b00      	cmp	r3, #0
 800e722:	d103      	bne.n	800e72c <f_open+0x500>
						res = FR_INT_ERR;
 800e724:	2302      	movs	r3, #2
 800e726:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e72a:	e024      	b.n	800e776 <f_open+0x54a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e72c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800e730:	0a5a      	lsrs	r2, r3, #9
 800e732:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800e736:	441a      	add	r2, r3
 800e738:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e73c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e744:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e748:	7858      	ldrb	r0, [r3, #1]
 800e74a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e74e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e758:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e75c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	6a1a      	ldr	r2, [r3, #32]
 800e764:	2301      	movs	r3, #1
 800e766:	f7fd faf9 	bl	800bd5c <disk_read>
 800e76a:	4603      	mov	r3, r0
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d002      	beq.n	800e776 <f_open+0x54a>
 800e770:	2301      	movs	r3, #1
 800e772:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e776:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d006      	beq.n	800e78c <f_open+0x560>
 800e77e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e782:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	2200      	movs	r2, #0
 800e78a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e78c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e790:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 800e794:	4611      	mov	r1, r2
 800e796:	4618      	mov	r0, r3
 800e798:	f7fd fc54 	bl	800c044 <unlock_fs>
 800e79c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}

0800e7aa <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e7aa:	b580      	push	{r7, lr}
 800e7ac:	b08e      	sub	sp, #56	; 0x38
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	60f8      	str	r0, [r7, #12]
 800e7b2:	60b9      	str	r1, [r7, #8]
 800e7b4:	607a      	str	r2, [r7, #4]
 800e7b6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	f107 0214 	add.w	r2, r7, #20
 800e7c8:	4611      	mov	r1, r2
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7ff fc82 	bl	800e0d4 <validate>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e7d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d107      	bne.n	800e7ee <f_read+0x44>
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	7d5b      	ldrb	r3, [r3, #21]
 800e7e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e7e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d009      	beq.n	800e802 <f_read+0x58>
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e7f4:	4611      	mov	r1, r2
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7fd fc24 	bl	800c044 <unlock_fs>
 800e7fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e800:	e13d      	b.n	800ea7e <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	7d1b      	ldrb	r3, [r3, #20]
 800e806:	f003 0301 	and.w	r3, r3, #1
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d106      	bne.n	800e81c <f_read+0x72>
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	2107      	movs	r1, #7
 800e812:	4618      	mov	r0, r3
 800e814:	f7fd fc16 	bl	800c044 <unlock_fs>
 800e818:	2307      	movs	r3, #7
 800e81a:	e130      	b.n	800ea7e <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	68da      	ldr	r2, [r3, #12]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	699b      	ldr	r3, [r3, #24]
 800e824:	1ad3      	subs	r3, r2, r3
 800e826:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e828:	687a      	ldr	r2, [r7, #4]
 800e82a:	6a3b      	ldr	r3, [r7, #32]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	f240 811c 	bls.w	800ea6a <f_read+0x2c0>
 800e832:	6a3b      	ldr	r3, [r7, #32]
 800e834:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e836:	e118      	b.n	800ea6a <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	699b      	ldr	r3, [r3, #24]
 800e83c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e840:	2b00      	cmp	r3, #0
 800e842:	f040 80e4 	bne.w	800ea0e <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	699b      	ldr	r3, [r3, #24]
 800e84a:	0a5b      	lsrs	r3, r3, #9
 800e84c:	697a      	ldr	r2, [r7, #20]
 800e84e:	8952      	ldrh	r2, [r2, #10]
 800e850:	3a01      	subs	r2, #1
 800e852:	4013      	ands	r3, r2
 800e854:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e856:	69fb      	ldr	r3, [r7, #28]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d139      	bne.n	800e8d0 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	699b      	ldr	r3, [r3, #24]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d103      	bne.n	800e86c <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	689b      	ldr	r3, [r3, #8]
 800e868:	633b      	str	r3, [r7, #48]	; 0x30
 800e86a:	e013      	b.n	800e894 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e870:	2b00      	cmp	r3, #0
 800e872:	d007      	beq.n	800e884 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	699b      	ldr	r3, [r3, #24]
 800e878:	4619      	mov	r1, r3
 800e87a:	68f8      	ldr	r0, [r7, #12]
 800e87c:	f7fe f8fa 	bl	800ca74 <clmt_clust>
 800e880:	6338      	str	r0, [r7, #48]	; 0x30
 800e882:	e007      	b.n	800e894 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e884:	68fa      	ldr	r2, [r7, #12]
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	69db      	ldr	r3, [r3, #28]
 800e88a:	4619      	mov	r1, r3
 800e88c:	4610      	mov	r0, r2
 800e88e:	f7fd fe60 	bl	800c552 <get_fat>
 800e892:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e896:	2b01      	cmp	r3, #1
 800e898:	d809      	bhi.n	800e8ae <f_read+0x104>
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2202      	movs	r2, #2
 800e89e:	755a      	strb	r2, [r3, #21]
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	2102      	movs	r1, #2
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7fd fbcd 	bl	800c044 <unlock_fs>
 800e8aa:	2302      	movs	r3, #2
 800e8ac:	e0e7      	b.n	800ea7e <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8b4:	d109      	bne.n	800e8ca <f_read+0x120>
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	755a      	strb	r2, [r3, #21]
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	2101      	movs	r1, #1
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fd fbbf 	bl	800c044 <unlock_fs>
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	e0d9      	b.n	800ea7e <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8ce:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e8d0:	697a      	ldr	r2, [r7, #20]
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	69db      	ldr	r3, [r3, #28]
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	4610      	mov	r0, r2
 800e8da:	f7fd fe1b 	bl	800c514 <clust2sect>
 800e8de:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d109      	bne.n	800e8fa <f_read+0x150>
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2202      	movs	r2, #2
 800e8ea:	755a      	strb	r2, [r3, #21]
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	2102      	movs	r1, #2
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7fd fba7 	bl	800c044 <unlock_fs>
 800e8f6:	2302      	movs	r3, #2
 800e8f8:	e0c1      	b.n	800ea7e <f_read+0x2d4>
			sect += csect;
 800e8fa:	69ba      	ldr	r2, [r7, #24]
 800e8fc:	69fb      	ldr	r3, [r7, #28]
 800e8fe:	4413      	add	r3, r2
 800e900:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	0a5b      	lsrs	r3, r3, #9
 800e906:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d03e      	beq.n	800e98c <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e90e:	69fa      	ldr	r2, [r7, #28]
 800e910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e912:	4413      	add	r3, r2
 800e914:	697a      	ldr	r2, [r7, #20]
 800e916:	8952      	ldrh	r2, [r2, #10]
 800e918:	4293      	cmp	r3, r2
 800e91a:	d905      	bls.n	800e928 <f_read+0x17e>
					cc = fs->csize - csect;
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	895b      	ldrh	r3, [r3, #10]
 800e920:	461a      	mov	r2, r3
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	1ad3      	subs	r3, r2, r3
 800e926:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	7858      	ldrb	r0, [r3, #1]
 800e92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92e:	69ba      	ldr	r2, [r7, #24]
 800e930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e932:	f7fd fa13 	bl	800bd5c <disk_read>
 800e936:	4603      	mov	r3, r0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d009      	beq.n	800e950 <f_read+0x1a6>
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	2201      	movs	r2, #1
 800e940:	755a      	strb	r2, [r3, #21]
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	2101      	movs	r1, #1
 800e946:	4618      	mov	r0, r3
 800e948:	f7fd fb7c 	bl	800c044 <unlock_fs>
 800e94c:	2301      	movs	r3, #1
 800e94e:	e096      	b.n	800ea7e <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	7d1b      	ldrb	r3, [r3, #20]
 800e954:	b25b      	sxtb	r3, r3
 800e956:	2b00      	cmp	r3, #0
 800e958:	da14      	bge.n	800e984 <f_read+0x1da>
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	6a1a      	ldr	r2, [r3, #32]
 800e95e:	69bb      	ldr	r3, [r7, #24]
 800e960:	1ad3      	subs	r3, r2, r3
 800e962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e964:	429a      	cmp	r2, r3
 800e966:	d90d      	bls.n	800e984 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	6a1a      	ldr	r2, [r3, #32]
 800e96c:	69bb      	ldr	r3, [r7, #24]
 800e96e:	1ad3      	subs	r3, r2, r3
 800e970:	025b      	lsls	r3, r3, #9
 800e972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e974:	18d0      	adds	r0, r2, r3
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	3330      	adds	r3, #48	; 0x30
 800e97a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e97e:	4619      	mov	r1, r3
 800e980:	f7fd facc 	bl	800bf1c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e986:	025b      	lsls	r3, r3, #9
 800e988:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e98a:	e05a      	b.n	800ea42 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	6a1b      	ldr	r3, [r3, #32]
 800e990:	69ba      	ldr	r2, [r7, #24]
 800e992:	429a      	cmp	r2, r3
 800e994:	d038      	beq.n	800ea08 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	7d1b      	ldrb	r3, [r3, #20]
 800e99a:	b25b      	sxtb	r3, r3
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	da1d      	bge.n	800e9dc <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	7858      	ldrb	r0, [r3, #1]
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	6a1a      	ldr	r2, [r3, #32]
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	f7fd f9f4 	bl	800bd9c <disk_write>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d009      	beq.n	800e9ce <f_read+0x224>
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2201      	movs	r2, #1
 800e9be:	755a      	strb	r2, [r3, #21]
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	2101      	movs	r1, #1
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7fd fb3d 	bl	800c044 <unlock_fs>
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	e057      	b.n	800ea7e <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	7d1b      	ldrb	r3, [r3, #20]
 800e9d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9d6:	b2da      	uxtb	r2, r3
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	7858      	ldrb	r0, [r3, #1]
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	69ba      	ldr	r2, [r7, #24]
 800e9ea:	f7fd f9b7 	bl	800bd5c <disk_read>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d009      	beq.n	800ea08 <f_read+0x25e>
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	755a      	strb	r2, [r3, #21]
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	2101      	movs	r1, #1
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7fd fb20 	bl	800c044 <unlock_fs>
 800ea04:	2301      	movs	r3, #1
 800ea06:	e03a      	b.n	800ea7e <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	69ba      	ldr	r2, [r7, #24]
 800ea0c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	699b      	ldr	r3, [r3, #24]
 800ea12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea16:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ea1a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ea1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d901      	bls.n	800ea28 <f_read+0x27e>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	699b      	ldr	r3, [r3, #24]
 800ea32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea36:	4413      	add	r3, r2
 800ea38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea3e:	f7fd fa6d 	bl	800bf1c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ea42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea46:	4413      	add	r3, r2
 800ea48:	627b      	str	r3, [r7, #36]	; 0x24
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	699a      	ldr	r2, [r3, #24]
 800ea4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea50:	441a      	add	r2, r3
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	619a      	str	r2, [r3, #24]
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	681a      	ldr	r2, [r3, #0]
 800ea5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5c:	441a      	add	r2, r3
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	601a      	str	r2, [r3, #0]
 800ea62:	687a      	ldr	r2, [r7, #4]
 800ea64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea66:	1ad3      	subs	r3, r2, r3
 800ea68:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	f47f aee3 	bne.w	800e838 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	2100      	movs	r1, #0
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7fd fae4 	bl	800c044 <unlock_fs>
 800ea7c:	2300      	movs	r3, #0
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3738      	adds	r7, #56	; 0x38
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}

0800ea86 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ea86:	b580      	push	{r7, lr}
 800ea88:	b08c      	sub	sp, #48	; 0x30
 800ea8a:	af00      	add	r7, sp, #0
 800ea8c:	60f8      	str	r0, [r7, #12]
 800ea8e:	60b9      	str	r1, [r7, #8]
 800ea90:	607a      	str	r2, [r7, #4]
 800ea92:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f107 0210 	add.w	r2, r7, #16
 800eaa4:	4611      	mov	r1, r2
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7ff fb14 	bl	800e0d4 <validate>
 800eaac:	4603      	mov	r3, r0
 800eaae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d107      	bne.n	800eaca <f_write+0x44>
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	7d5b      	ldrb	r3, [r3, #21]
 800eabe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800eac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d009      	beq.n	800eade <f_write+0x58>
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ead0:	4611      	mov	r1, r2
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7fd fab6 	bl	800c044 <unlock_fs>
 800ead8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eadc:	e173      	b.n	800edc6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	7d1b      	ldrb	r3, [r3, #20]
 800eae2:	f003 0302 	and.w	r3, r3, #2
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d106      	bne.n	800eaf8 <f_write+0x72>
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	2107      	movs	r1, #7
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7fd faa8 	bl	800c044 <unlock_fs>
 800eaf4:	2307      	movs	r3, #7
 800eaf6:	e166      	b.n	800edc6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	699a      	ldr	r2, [r3, #24]
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	441a      	add	r2, r3
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	699b      	ldr	r3, [r3, #24]
 800eb04:	429a      	cmp	r2, r3
 800eb06:	f080 814b 	bcs.w	800eda0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	699b      	ldr	r3, [r3, #24]
 800eb0e:	43db      	mvns	r3, r3
 800eb10:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800eb12:	e145      	b.n	800eda0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	699b      	ldr	r3, [r3, #24]
 800eb18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	f040 8101 	bne.w	800ed24 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	699b      	ldr	r3, [r3, #24]
 800eb26:	0a5b      	lsrs	r3, r3, #9
 800eb28:	693a      	ldr	r2, [r7, #16]
 800eb2a:	8952      	ldrh	r2, [r2, #10]
 800eb2c:	3a01      	subs	r2, #1
 800eb2e:	4013      	ands	r3, r2
 800eb30:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800eb32:	69bb      	ldr	r3, [r7, #24]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d14d      	bne.n	800ebd4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	699b      	ldr	r3, [r3, #24]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d10c      	bne.n	800eb5a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	689b      	ldr	r3, [r3, #8]
 800eb44:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800eb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d11a      	bne.n	800eb82 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2100      	movs	r1, #0
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7fd fef7 	bl	800c944 <create_chain>
 800eb56:	62b8      	str	r0, [r7, #40]	; 0x28
 800eb58:	e013      	b.n	800eb82 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d007      	beq.n	800eb72 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	699b      	ldr	r3, [r3, #24]
 800eb66:	4619      	mov	r1, r3
 800eb68:	68f8      	ldr	r0, [r7, #12]
 800eb6a:	f7fd ff83 	bl	800ca74 <clmt_clust>
 800eb6e:	62b8      	str	r0, [r7, #40]	; 0x28
 800eb70:	e007      	b.n	800eb82 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	69db      	ldr	r3, [r3, #28]
 800eb78:	4619      	mov	r1, r3
 800eb7a:	4610      	mov	r0, r2
 800eb7c:	f7fd fee2 	bl	800c944 <create_chain>
 800eb80:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800eb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	f000 8110 	beq.w	800edaa <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800eb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d109      	bne.n	800eba4 <f_write+0x11e>
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2202      	movs	r2, #2
 800eb94:	755a      	strb	r2, [r3, #21]
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	2102      	movs	r1, #2
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7fd fa52 	bl	800c044 <unlock_fs>
 800eba0:	2302      	movs	r3, #2
 800eba2:	e110      	b.n	800edc6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebaa:	d109      	bne.n	800ebc0 <f_write+0x13a>
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2201      	movs	r2, #1
 800ebb0:	755a      	strb	r2, [r3, #21]
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	2101      	movs	r1, #1
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7fd fa44 	bl	800c044 <unlock_fs>
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	e102      	b.n	800edc6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebc4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	689b      	ldr	r3, [r3, #8]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d102      	bne.n	800ebd4 <f_write+0x14e>
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebd2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	7d1b      	ldrb	r3, [r3, #20]
 800ebd8:	b25b      	sxtb	r3, r3
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	da1d      	bge.n	800ec1a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	7858      	ldrb	r0, [r3, #1]
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	6a1a      	ldr	r2, [r3, #32]
 800ebec:	2301      	movs	r3, #1
 800ebee:	f7fd f8d5 	bl	800bd9c <disk_write>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d009      	beq.n	800ec0c <f_write+0x186>
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	755a      	strb	r2, [r3, #21]
 800ebfe:	693b      	ldr	r3, [r7, #16]
 800ec00:	2101      	movs	r1, #1
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7fd fa1e 	bl	800c044 <unlock_fs>
 800ec08:	2301      	movs	r3, #1
 800ec0a:	e0dc      	b.n	800edc6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	7d1b      	ldrb	r3, [r3, #20]
 800ec10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec14:	b2da      	uxtb	r2, r3
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ec1a:	693a      	ldr	r2, [r7, #16]
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	69db      	ldr	r3, [r3, #28]
 800ec20:	4619      	mov	r1, r3
 800ec22:	4610      	mov	r0, r2
 800ec24:	f7fd fc76 	bl	800c514 <clust2sect>
 800ec28:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d109      	bne.n	800ec44 <f_write+0x1be>
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	2202      	movs	r2, #2
 800ec34:	755a      	strb	r2, [r3, #21]
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	2102      	movs	r1, #2
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7fd fa02 	bl	800c044 <unlock_fs>
 800ec40:	2302      	movs	r3, #2
 800ec42:	e0c0      	b.n	800edc6 <f_write+0x340>
			sect += csect;
 800ec44:	697a      	ldr	r2, [r7, #20]
 800ec46:	69bb      	ldr	r3, [r7, #24]
 800ec48:	4413      	add	r3, r2
 800ec4a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	0a5b      	lsrs	r3, r3, #9
 800ec50:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ec52:	6a3b      	ldr	r3, [r7, #32]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d041      	beq.n	800ecdc <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ec58:	69ba      	ldr	r2, [r7, #24]
 800ec5a:	6a3b      	ldr	r3, [r7, #32]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	693a      	ldr	r2, [r7, #16]
 800ec60:	8952      	ldrh	r2, [r2, #10]
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d905      	bls.n	800ec72 <f_write+0x1ec>
					cc = fs->csize - csect;
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	895b      	ldrh	r3, [r3, #10]
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	69bb      	ldr	r3, [r7, #24]
 800ec6e:	1ad3      	subs	r3, r2, r3
 800ec70:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	7858      	ldrb	r0, [r3, #1]
 800ec76:	6a3b      	ldr	r3, [r7, #32]
 800ec78:	697a      	ldr	r2, [r7, #20]
 800ec7a:	69f9      	ldr	r1, [r7, #28]
 800ec7c:	f7fd f88e 	bl	800bd9c <disk_write>
 800ec80:	4603      	mov	r3, r0
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d009      	beq.n	800ec9a <f_write+0x214>
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2201      	movs	r2, #1
 800ec8a:	755a      	strb	r2, [r3, #21]
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	2101      	movs	r1, #1
 800ec90:	4618      	mov	r0, r3
 800ec92:	f7fd f9d7 	bl	800c044 <unlock_fs>
 800ec96:	2301      	movs	r3, #1
 800ec98:	e095      	b.n	800edc6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	6a1a      	ldr	r2, [r3, #32]
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	1ad3      	subs	r3, r2, r3
 800eca2:	6a3a      	ldr	r2, [r7, #32]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d915      	bls.n	800ecd4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	6a1a      	ldr	r2, [r3, #32]
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	1ad3      	subs	r3, r2, r3
 800ecb6:	025b      	lsls	r3, r3, #9
 800ecb8:	69fa      	ldr	r2, [r7, #28]
 800ecba:	4413      	add	r3, r2
 800ecbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	f7fd f92b 	bl	800bf1c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	7d1b      	ldrb	r3, [r3, #20]
 800ecca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecce:	b2da      	uxtb	r2, r3
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ecd4:	6a3b      	ldr	r3, [r7, #32]
 800ecd6:	025b      	lsls	r3, r3, #9
 800ecd8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ecda:	e044      	b.n	800ed66 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6a1b      	ldr	r3, [r3, #32]
 800ece0:	697a      	ldr	r2, [r7, #20]
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d01b      	beq.n	800ed1e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	699a      	ldr	r2, [r3, #24]
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d215      	bcs.n	800ed1e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	7858      	ldrb	r0, [r3, #1]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	697a      	ldr	r2, [r7, #20]
 800ed00:	f7fd f82c 	bl	800bd5c <disk_read>
 800ed04:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d009      	beq.n	800ed1e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	755a      	strb	r2, [r3, #21]
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	2101      	movs	r1, #1
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7fd f995 	bl	800c044 <unlock_fs>
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	e053      	b.n	800edc6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	697a      	ldr	r2, [r7, #20]
 800ed22:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	699b      	ldr	r3, [r3, #24]
 800ed28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed2c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ed30:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ed32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d901      	bls.n	800ed3e <f_write+0x2b8>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	699b      	ldr	r3, [r3, #24]
 800ed48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed4c:	4413      	add	r3, r2
 800ed4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed50:	69f9      	ldr	r1, [r7, #28]
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7fd f8e2 	bl	800bf1c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	7d1b      	ldrb	r3, [r3, #20]
 800ed5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ed60:	b2da      	uxtb	r2, r3
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ed66:	69fa      	ldr	r2, [r7, #28]
 800ed68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed6a:	4413      	add	r3, r2
 800ed6c:	61fb      	str	r3, [r7, #28]
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	699a      	ldr	r2, [r3, #24]
 800ed72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed74:	441a      	add	r2, r3
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	619a      	str	r2, [r3, #24]
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	68da      	ldr	r2, [r3, #12]
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	699b      	ldr	r3, [r3, #24]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	bf38      	it	cc
 800ed86:	461a      	movcc	r2, r3
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	60da      	str	r2, [r3, #12]
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	681a      	ldr	r2, [r3, #0]
 800ed90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed92:	441a      	add	r2, r3
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	601a      	str	r2, [r3, #0]
 800ed98:	687a      	ldr	r2, [r7, #4]
 800ed9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9c:	1ad3      	subs	r3, r2, r3
 800ed9e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	f47f aeb6 	bne.w	800eb14 <f_write+0x8e>
 800eda8:	e000      	b.n	800edac <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800edaa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	7d1b      	ldrb	r3, [r3, #20]
 800edb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edb4:	b2da      	uxtb	r2, r3
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	2100      	movs	r1, #0
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fd f940 	bl	800c044 <unlock_fs>
 800edc4:	2300      	movs	r3, #0
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3730      	adds	r7, #48	; 0x30
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}

0800edce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800edce:	b580      	push	{r7, lr}
 800edd0:	b086      	sub	sp, #24
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f107 0208 	add.w	r2, r7, #8
 800eddc:	4611      	mov	r1, r2
 800edde:	4618      	mov	r0, r3
 800ede0:	f7ff f978 	bl	800e0d4 <validate>
 800ede4:	4603      	mov	r3, r0
 800ede6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ede8:	7dfb      	ldrb	r3, [r7, #23]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d16d      	bne.n	800eeca <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	7d1b      	ldrb	r3, [r3, #20]
 800edf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d067      	beq.n	800eeca <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	7d1b      	ldrb	r3, [r3, #20]
 800edfe:	b25b      	sxtb	r3, r3
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	da1a      	bge.n	800ee3a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	7858      	ldrb	r0, [r3, #1]
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6a1a      	ldr	r2, [r3, #32]
 800ee12:	2301      	movs	r3, #1
 800ee14:	f7fc ffc2 	bl	800bd9c <disk_write>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d006      	beq.n	800ee2c <f_sync+0x5e>
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	2101      	movs	r1, #1
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fd f90e 	bl	800c044 <unlock_fs>
 800ee28:	2301      	movs	r3, #1
 800ee2a:	e055      	b.n	800eed8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	7d1b      	ldrb	r3, [r3, #20]
 800ee30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee34:	b2da      	uxtb	r2, r3
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ee3a:	f7fc fced 	bl	800b818 <get_fattime>
 800ee3e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ee40:	68ba      	ldr	r2, [r7, #8]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee46:	4619      	mov	r1, r3
 800ee48:	4610      	mov	r0, r2
 800ee4a:	f7fd fac7 	bl	800c3dc <move_window>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ee52:	7dfb      	ldrb	r3, [r7, #23]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d138      	bne.n	800eeca <f_sync+0xfc>
					dir = fp->dir_ptr;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee5c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	330b      	adds	r3, #11
 800ee62:	781a      	ldrb	r2, [r3, #0]
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	330b      	adds	r3, #11
 800ee68:	f042 0220 	orr.w	r2, r2, #32
 800ee6c:	b2d2      	uxtb	r2, r2
 800ee6e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6818      	ldr	r0, [r3, #0]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	689b      	ldr	r3, [r3, #8]
 800ee78:	461a      	mov	r2, r3
 800ee7a:	68f9      	ldr	r1, [r7, #12]
 800ee7c:	f7fd ffd4 	bl	800ce28 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f103 021c 	add.w	r2, r3, #28
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	68db      	ldr	r3, [r3, #12]
 800ee8a:	4619      	mov	r1, r3
 800ee8c:	4610      	mov	r0, r2
 800ee8e:	f7fd f819 	bl	800bec4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	3316      	adds	r3, #22
 800ee96:	6939      	ldr	r1, [r7, #16]
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7fd f813 	bl	800bec4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	3312      	adds	r3, #18
 800eea2:	2100      	movs	r1, #0
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7fc fff2 	bl	800be8e <st_word>
					fs->wflag = 1;
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	2201      	movs	r2, #1
 800eeae:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7fd fac0 	bl	800c438 <sync_fs>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	7d1b      	ldrb	r3, [r3, #20]
 800eec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eec4:	b2da      	uxtb	r2, r3
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	7dfa      	ldrb	r2, [r7, #23]
 800eece:	4611      	mov	r1, r2
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7fd f8b7 	bl	800c044 <unlock_fs>
 800eed6:	7dfb      	ldrb	r3, [r7, #23]
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3718      	adds	r7, #24
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f7ff ff70 	bl	800edce <f_sync>
 800eeee:	4603      	mov	r3, r0
 800eef0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800eef2:	7bfb      	ldrb	r3, [r7, #15]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d11d      	bne.n	800ef34 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f107 0208 	add.w	r2, r7, #8
 800eefe:	4611      	mov	r1, r2
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7ff f8e7 	bl	800e0d4 <validate>
 800ef06:	4603      	mov	r3, r0
 800ef08:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ef0a:	7bfb      	ldrb	r3, [r7, #15]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d111      	bne.n	800ef34 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	691b      	ldr	r3, [r3, #16]
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7fd f9bd 	bl	800c294 <dec_lock>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ef1e:	7bfb      	ldrb	r3, [r7, #15]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d102      	bne.n	800ef2a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2200      	movs	r2, #0
 800ef28:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7fd f888 	bl	800c044 <unlock_fs>
#endif
		}
	}
	return res;
 800ef34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3710      	adds	r7, #16
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ef3e:	b580      	push	{r7, lr}
 800ef40:	b090      	sub	sp, #64	; 0x40
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
 800ef46:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f107 0208 	add.w	r2, r7, #8
 800ef4e:	4611      	mov	r1, r2
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7ff f8bf 	bl	800e0d4 <validate>
 800ef56:	4603      	mov	r3, r0
 800ef58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ef5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d103      	bne.n	800ef6c <f_lseek+0x2e>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	7d5b      	ldrb	r3, [r3, #21]
 800ef68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ef6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d009      	beq.n	800ef88 <f_lseek+0x4a>
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ef7a:	4611      	mov	r1, r2
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7fd f861 	bl	800c044 <unlock_fs>
 800ef82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ef86:	e229      	b.n	800f3dc <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	f000 80ea 	beq.w	800f166 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef98:	d164      	bne.n	800f064 <f_lseek+0x126>
			tbl = fp->cltbl;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef9e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800efa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa2:	1d1a      	adds	r2, r3, #4
 800efa4:	627a      	str	r2, [r7, #36]	; 0x24
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	617b      	str	r3, [r7, #20]
 800efaa:	2302      	movs	r3, #2
 800efac:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	689b      	ldr	r3, [r3, #8]
 800efb2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800efb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d044      	beq.n	800f044 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800efba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efbc:	613b      	str	r3, [r7, #16]
 800efbe:	2300      	movs	r3, #0
 800efc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800efc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc4:	3302      	adds	r3, #2
 800efc6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800efc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efca:	60fb      	str	r3, [r7, #12]
 800efcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efce:	3301      	adds	r3, #1
 800efd0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7fd fabb 	bl	800c552 <get_fat>
 800efdc:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800efde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe0:	2b01      	cmp	r3, #1
 800efe2:	d809      	bhi.n	800eff8 <f_lseek+0xba>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2202      	movs	r2, #2
 800efe8:	755a      	strb	r2, [r3, #21]
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	2102      	movs	r1, #2
 800efee:	4618      	mov	r0, r3
 800eff0:	f7fd f828 	bl	800c044 <unlock_fs>
 800eff4:	2302      	movs	r3, #2
 800eff6:	e1f1      	b.n	800f3dc <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800effe:	d109      	bne.n	800f014 <f_lseek+0xd6>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2201      	movs	r2, #1
 800f004:	755a      	strb	r2, [r3, #21]
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	2101      	movs	r1, #1
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7fd f81a 	bl	800c044 <unlock_fs>
 800f010:	2301      	movs	r3, #1
 800f012:	e1e3      	b.n	800f3dc <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	3301      	adds	r3, #1
 800f018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d0d4      	beq.n	800efc8 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f01e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	429a      	cmp	r2, r3
 800f024:	d809      	bhi.n	800f03a <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800f026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f028:	1d1a      	adds	r2, r3, #4
 800f02a:	627a      	str	r2, [r7, #36]	; 0x24
 800f02c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f02e:	601a      	str	r2, [r3, #0]
 800f030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f032:	1d1a      	adds	r2, r3, #4
 800f034:	627a      	str	r2, [r7, #36]	; 0x24
 800f036:	693a      	ldr	r2, [r7, #16]
 800f038:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	69db      	ldr	r3, [r3, #28]
 800f03e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f040:	429a      	cmp	r2, r3
 800f042:	d3ba      	bcc.n	800efba <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f04a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f04c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	429a      	cmp	r2, r3
 800f052:	d803      	bhi.n	800f05c <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800f054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f056:	2200      	movs	r2, #0
 800f058:	601a      	str	r2, [r3, #0]
 800f05a:	e1b6      	b.n	800f3ca <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f05c:	2311      	movs	r3, #17
 800f05e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f062:	e1b2      	b.n	800f3ca <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	68db      	ldr	r3, [r3, #12]
 800f068:	683a      	ldr	r2, [r7, #0]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d902      	bls.n	800f074 <f_lseek+0x136>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	68db      	ldr	r3, [r3, #12]
 800f072:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	683a      	ldr	r2, [r7, #0]
 800f078:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	f000 81a4 	beq.w	800f3ca <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	3b01      	subs	r3, #1
 800f086:	4619      	mov	r1, r3
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f7fd fcf3 	bl	800ca74 <clmt_clust>
 800f08e:	4602      	mov	r2, r0
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f094:	68ba      	ldr	r2, [r7, #8]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	69db      	ldr	r3, [r3, #28]
 800f09a:	4619      	mov	r1, r3
 800f09c:	4610      	mov	r0, r2
 800f09e:	f7fd fa39 	bl	800c514 <clust2sect>
 800f0a2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f0a4:	69bb      	ldr	r3, [r7, #24]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d109      	bne.n	800f0be <f_lseek+0x180>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2202      	movs	r2, #2
 800f0ae:	755a      	strb	r2, [r3, #21]
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	2102      	movs	r1, #2
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f7fc ffc5 	bl	800c044 <unlock_fs>
 800f0ba:	2302      	movs	r3, #2
 800f0bc:	e18e      	b.n	800f3dc <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	3b01      	subs	r3, #1
 800f0c2:	0a5b      	lsrs	r3, r3, #9
 800f0c4:	68ba      	ldr	r2, [r7, #8]
 800f0c6:	8952      	ldrh	r2, [r2, #10]
 800f0c8:	3a01      	subs	r2, #1
 800f0ca:	4013      	ands	r3, r2
 800f0cc:	69ba      	ldr	r2, [r7, #24]
 800f0ce:	4413      	add	r3, r2
 800f0d0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	699b      	ldr	r3, [r3, #24]
 800f0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	f000 8175 	beq.w	800f3ca <f_lseek+0x48c>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6a1b      	ldr	r3, [r3, #32]
 800f0e4:	69ba      	ldr	r2, [r7, #24]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	f000 816f 	beq.w	800f3ca <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	7d1b      	ldrb	r3, [r3, #20]
 800f0f0:	b25b      	sxtb	r3, r3
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	da1d      	bge.n	800f132 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	7858      	ldrb	r0, [r3, #1]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6a1a      	ldr	r2, [r3, #32]
 800f104:	2301      	movs	r3, #1
 800f106:	f7fc fe49 	bl	800bd9c <disk_write>
 800f10a:	4603      	mov	r3, r0
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d009      	beq.n	800f124 <f_lseek+0x1e6>
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2201      	movs	r2, #1
 800f114:	755a      	strb	r2, [r3, #21]
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	2101      	movs	r1, #1
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7fc ff92 	bl	800c044 <unlock_fs>
 800f120:	2301      	movs	r3, #1
 800f122:	e15b      	b.n	800f3dc <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	7d1b      	ldrb	r3, [r3, #20]
 800f128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f12c:	b2da      	uxtb	r2, r3
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	7858      	ldrb	r0, [r3, #1]
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f13c:	2301      	movs	r3, #1
 800f13e:	69ba      	ldr	r2, [r7, #24]
 800f140:	f7fc fe0c 	bl	800bd5c <disk_read>
 800f144:	4603      	mov	r3, r0
 800f146:	2b00      	cmp	r3, #0
 800f148:	d009      	beq.n	800f15e <f_lseek+0x220>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2201      	movs	r2, #1
 800f14e:	755a      	strb	r2, [r3, #21]
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	2101      	movs	r1, #1
 800f154:	4618      	mov	r0, r3
 800f156:	f7fc ff75 	bl	800c044 <unlock_fs>
 800f15a:	2301      	movs	r3, #1
 800f15c:	e13e      	b.n	800f3dc <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	69ba      	ldr	r2, [r7, #24]
 800f162:	621a      	str	r2, [r3, #32]
 800f164:	e131      	b.n	800f3ca <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	68db      	ldr	r3, [r3, #12]
 800f16a:	683a      	ldr	r2, [r7, #0]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d908      	bls.n	800f182 <f_lseek+0x244>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	7d1b      	ldrb	r3, [r3, #20]
 800f174:	f003 0302 	and.w	r3, r3, #2
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d102      	bne.n	800f182 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	68db      	ldr	r3, [r3, #12]
 800f180:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	699b      	ldr	r3, [r3, #24]
 800f186:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f188:	2300      	movs	r3, #0
 800f18a:	637b      	str	r3, [r7, #52]	; 0x34
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f190:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	2b00      	cmp	r3, #0
 800f196:	f000 80c0 	beq.w	800f31a <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	895b      	ldrh	r3, [r3, #10]
 800f19e:	025b      	lsls	r3, r3, #9
 800f1a0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f1a2:	6a3b      	ldr	r3, [r7, #32]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d01b      	beq.n	800f1e0 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	1e5a      	subs	r2, r3, #1
 800f1ac:	69fb      	ldr	r3, [r7, #28]
 800f1ae:	fbb2 f2f3 	udiv	r2, r2, r3
 800f1b2:	6a3b      	ldr	r3, [r7, #32]
 800f1b4:	1e59      	subs	r1, r3, #1
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d30f      	bcc.n	800f1e0 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f1c0:	6a3b      	ldr	r3, [r7, #32]
 800f1c2:	1e5a      	subs	r2, r3, #1
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	425b      	negs	r3, r3
 800f1c8:	401a      	ands	r2, r3
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	699b      	ldr	r3, [r3, #24]
 800f1d2:	683a      	ldr	r2, [r7, #0]
 800f1d4:	1ad3      	subs	r3, r2, r3
 800f1d6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	69db      	ldr	r3, [r3, #28]
 800f1dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1de:	e02c      	b.n	800f23a <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	689b      	ldr	r3, [r3, #8]
 800f1e4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d123      	bne.n	800f234 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2100      	movs	r1, #0
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7fd fba7 	bl	800c944 <create_chain>
 800f1f6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d109      	bne.n	800f212 <f_lseek+0x2d4>
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2202      	movs	r2, #2
 800f202:	755a      	strb	r2, [r3, #21]
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	2102      	movs	r1, #2
 800f208:	4618      	mov	r0, r3
 800f20a:	f7fc ff1b 	bl	800c044 <unlock_fs>
 800f20e:	2302      	movs	r3, #2
 800f210:	e0e4      	b.n	800f3dc <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f218:	d109      	bne.n	800f22e <f_lseek+0x2f0>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2201      	movs	r2, #1
 800f21e:	755a      	strb	r2, [r3, #21]
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	2101      	movs	r1, #1
 800f224:	4618      	mov	r0, r3
 800f226:	f7fc ff0d 	bl	800c044 <unlock_fs>
 800f22a:	2301      	movs	r3, #1
 800f22c:	e0d6      	b.n	800f3dc <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f232:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f238:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d06c      	beq.n	800f31a <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800f240:	e044      	b.n	800f2cc <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800f242:	683a      	ldr	r2, [r7, #0]
 800f244:	69fb      	ldr	r3, [r7, #28]
 800f246:	1ad3      	subs	r3, r2, r3
 800f248:	603b      	str	r3, [r7, #0]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	699a      	ldr	r2, [r3, #24]
 800f24e:	69fb      	ldr	r3, [r7, #28]
 800f250:	441a      	add	r2, r3
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	7d1b      	ldrb	r3, [r3, #20]
 800f25a:	f003 0302 	and.w	r3, r3, #2
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d00b      	beq.n	800f27a <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f266:	4618      	mov	r0, r3
 800f268:	f7fd fb6c 	bl	800c944 <create_chain>
 800f26c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f270:	2b00      	cmp	r3, #0
 800f272:	d108      	bne.n	800f286 <f_lseek+0x348>
							ofs = 0; break;
 800f274:	2300      	movs	r3, #0
 800f276:	603b      	str	r3, [r7, #0]
 800f278:	e02c      	b.n	800f2d4 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f27e:	4618      	mov	r0, r3
 800f280:	f7fd f967 	bl	800c552 <get_fat>
 800f284:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f28c:	d109      	bne.n	800f2a2 <f_lseek+0x364>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2201      	movs	r2, #1
 800f292:	755a      	strb	r2, [r3, #21]
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	2101      	movs	r1, #1
 800f298:	4618      	mov	r0, r3
 800f29a:	f7fc fed3 	bl	800c044 <unlock_fs>
 800f29e:	2301      	movs	r3, #1
 800f2a0:	e09c      	b.n	800f3dc <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a4:	2b01      	cmp	r3, #1
 800f2a6:	d904      	bls.n	800f2b2 <f_lseek+0x374>
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	69db      	ldr	r3, [r3, #28]
 800f2ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d309      	bcc.n	800f2c6 <f_lseek+0x388>
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2202      	movs	r2, #2
 800f2b6:	755a      	strb	r2, [r3, #21]
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	2102      	movs	r1, #2
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7fc fec1 	bl	800c044 <unlock_fs>
 800f2c2:	2302      	movs	r3, #2
 800f2c4:	e08a      	b.n	800f3dc <f_lseek+0x49e>
					fp->clust = clst;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2ca:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f2cc:	683a      	ldr	r2, [r7, #0]
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d8b6      	bhi.n	800f242 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	699a      	ldr	r2, [r3, #24]
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	441a      	add	r2, r3
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d017      	beq.n	800f31a <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7fd f910 	bl	800c514 <clust2sect>
 800f2f4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d109      	bne.n	800f310 <f_lseek+0x3d2>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2202      	movs	r2, #2
 800f300:	755a      	strb	r2, [r3, #21]
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	2102      	movs	r1, #2
 800f306:	4618      	mov	r0, r3
 800f308:	f7fc fe9c 	bl	800c044 <unlock_fs>
 800f30c:	2302      	movs	r3, #2
 800f30e:	e065      	b.n	800f3dc <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	0a5b      	lsrs	r3, r3, #9
 800f314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f316:	4413      	add	r3, r2
 800f318:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	699a      	ldr	r2, [r3, #24]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	68db      	ldr	r3, [r3, #12]
 800f322:	429a      	cmp	r2, r3
 800f324:	d90a      	bls.n	800f33c <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	699a      	ldr	r2, [r3, #24]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	7d1b      	ldrb	r3, [r3, #20]
 800f332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f336:	b2da      	uxtb	r2, r3
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	699b      	ldr	r3, [r3, #24]
 800f340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f344:	2b00      	cmp	r3, #0
 800f346:	d040      	beq.n	800f3ca <f_lseek+0x48c>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6a1b      	ldr	r3, [r3, #32]
 800f34c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f34e:	429a      	cmp	r2, r3
 800f350:	d03b      	beq.n	800f3ca <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	7d1b      	ldrb	r3, [r3, #20]
 800f356:	b25b      	sxtb	r3, r3
 800f358:	2b00      	cmp	r3, #0
 800f35a:	da1d      	bge.n	800f398 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	7858      	ldrb	r0, [r3, #1]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6a1a      	ldr	r2, [r3, #32]
 800f36a:	2301      	movs	r3, #1
 800f36c:	f7fc fd16 	bl	800bd9c <disk_write>
 800f370:	4603      	mov	r3, r0
 800f372:	2b00      	cmp	r3, #0
 800f374:	d009      	beq.n	800f38a <f_lseek+0x44c>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2201      	movs	r2, #1
 800f37a:	755a      	strb	r2, [r3, #21]
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	2101      	movs	r1, #1
 800f380:	4618      	mov	r0, r3
 800f382:	f7fc fe5f 	bl	800c044 <unlock_fs>
 800f386:	2301      	movs	r3, #1
 800f388:	e028      	b.n	800f3dc <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	7d1b      	ldrb	r3, [r3, #20]
 800f38e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f392:	b2da      	uxtb	r2, r3
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	7858      	ldrb	r0, [r3, #1]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3a6:	f7fc fcd9 	bl	800bd5c <disk_read>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d009      	beq.n	800f3c4 <f_lseek+0x486>
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	755a      	strb	r2, [r3, #21]
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	2101      	movs	r1, #1
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f7fc fe42 	bl	800c044 <unlock_fs>
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	e00b      	b.n	800f3dc <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3c8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f3d0:	4611      	mov	r1, r2
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f7fc fe36 	bl	800c044 <unlock_fs>
 800f3d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3740      	adds	r7, #64	; 0x40
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800f3f0:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800f3f4:	6018      	str	r0, [r3, #0]
 800f3f6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800f3fa:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800f3fe:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800f400:	f507 7102 	add.w	r1, r7, #520	; 0x208
 800f404:	1d3b      	adds	r3, r7, #4
 800f406:	2200      	movs	r2, #0
 800f408:	4618      	mov	r0, r3
 800f40a:	f7fe fc0f 	bl	800dc2c <find_volume>
 800f40e:	4603      	mov	r3, r0
 800f410:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 800f414:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d130      	bne.n	800f47e <f_stat+0x9a>
		INIT_NAMBUF(dj.obj.fs);
 800f41c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800f420:	f107 0208 	add.w	r2, r7, #8
 800f424:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f426:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800f42a:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800f434:	4611      	mov	r1, r2
 800f436:	4618      	mov	r0, r3
 800f438:	f7fe faec 	bl	800da14 <follow_path>
 800f43c:	4603      	mov	r3, r0
 800f43e:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 800f442:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800f446:	2b00      	cmp	r3, #0
 800f448:	d119      	bne.n	800f47e <f_stat+0x9a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800f44a:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800f44e:	b25b      	sxtb	r3, r3
 800f450:	2b00      	cmp	r3, #0
 800f452:	da03      	bge.n	800f45c <f_stat+0x78>
				res = FR_INVALID_NAME;
 800f454:	2306      	movs	r3, #6
 800f456:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 800f45a:	e010      	b.n	800f47e <f_stat+0x9a>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800f45c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800f460:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d009      	beq.n	800f47e <f_stat+0x9a>
 800f46a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800f46e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800f472:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800f476:	6819      	ldr	r1, [r3, #0]
 800f478:	4610      	mov	r0, r2
 800f47a:	f7fe f835 	bl	800d4e8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800f47e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800f482:	f897 223f 	ldrb.w	r2, [r7, #575]	; 0x23f
 800f486:	4611      	mov	r1, r2
 800f488:	4618      	mov	r0, r3
 800f48a:	f7fc fddb 	bl	800c044 <unlock_fs>
 800f48e:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 800f492:	4618      	mov	r0, r3
 800f494:	f507 7710 	add.w	r7, r7, #576	; 0x240
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}

0800f49c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b088      	sub	sp, #32
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	60b9      	str	r1, [r7, #8]
 800f4a6:	607a      	str	r2, [r7, #4]
	int n = 0;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800f4b0:	e01b      	b.n	800f4ea <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800f4b2:	f107 0310 	add.w	r3, r7, #16
 800f4b6:	f107 0114 	add.w	r1, r7, #20
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f7ff f974 	bl	800e7aa <f_read>
		if (rc != 1) break;
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d116      	bne.n	800f4f6 <f_gets+0x5a>
		c = s[0];
 800f4c8:	7d3b      	ldrb	r3, [r7, #20]
 800f4ca:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800f4cc:	7dfb      	ldrb	r3, [r7, #23]
 800f4ce:	2b0d      	cmp	r3, #13
 800f4d0:	d100      	bne.n	800f4d4 <f_gets+0x38>
 800f4d2:	e00a      	b.n	800f4ea <f_gets+0x4e>
		*p++ = c;
 800f4d4:	69bb      	ldr	r3, [r7, #24]
 800f4d6:	1c5a      	adds	r2, r3, #1
 800f4d8:	61ba      	str	r2, [r7, #24]
 800f4da:	7dfa      	ldrb	r2, [r7, #23]
 800f4dc:	701a      	strb	r2, [r3, #0]
		n++;
 800f4de:	69fb      	ldr	r3, [r7, #28]
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800f4e4:	7dfb      	ldrb	r3, [r7, #23]
 800f4e6:	2b0a      	cmp	r3, #10
 800f4e8:	d007      	beq.n	800f4fa <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	3b01      	subs	r3, #1
 800f4ee:	69fa      	ldr	r2, [r7, #28]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	dbde      	blt.n	800f4b2 <f_gets+0x16>
 800f4f4:	e002      	b.n	800f4fc <f_gets+0x60>
		if (rc != 1) break;
 800f4f6:	bf00      	nop
 800f4f8:	e000      	b.n	800f4fc <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800f4fa:	bf00      	nop
	}
	*p = 0;
 800f4fc:	69bb      	ldr	r3, [r7, #24]
 800f4fe:	2200      	movs	r2, #0
 800f500:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800f502:	69fb      	ldr	r3, [r7, #28]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d001      	beq.n	800f50c <f_gets+0x70>
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	e000      	b.n	800f50e <f_gets+0x72>
 800f50c:	2300      	movs	r3, #0
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3720      	adds	r7, #32
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
	...

0800f518 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f518:	b480      	push	{r7}
 800f51a:	b087      	sub	sp, #28
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	4613      	mov	r3, r2
 800f524:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f526:	2301      	movs	r3, #1
 800f528:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f52a:	2300      	movs	r3, #0
 800f52c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f52e:	4b1f      	ldr	r3, [pc, #124]	; (800f5ac <FATFS_LinkDriverEx+0x94>)
 800f530:	7a5b      	ldrb	r3, [r3, #9]
 800f532:	b2db      	uxtb	r3, r3
 800f534:	2b00      	cmp	r3, #0
 800f536:	d131      	bne.n	800f59c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f538:	4b1c      	ldr	r3, [pc, #112]	; (800f5ac <FATFS_LinkDriverEx+0x94>)
 800f53a:	7a5b      	ldrb	r3, [r3, #9]
 800f53c:	b2db      	uxtb	r3, r3
 800f53e:	461a      	mov	r2, r3
 800f540:	4b1a      	ldr	r3, [pc, #104]	; (800f5ac <FATFS_LinkDriverEx+0x94>)
 800f542:	2100      	movs	r1, #0
 800f544:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f546:	4b19      	ldr	r3, [pc, #100]	; (800f5ac <FATFS_LinkDriverEx+0x94>)
 800f548:	7a5b      	ldrb	r3, [r3, #9]
 800f54a:	b2db      	uxtb	r3, r3
 800f54c:	4a17      	ldr	r2, [pc, #92]	; (800f5ac <FATFS_LinkDriverEx+0x94>)
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	4413      	add	r3, r2
 800f552:	68fa      	ldr	r2, [r7, #12]
 800f554:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f556:	4b15      	ldr	r3, [pc, #84]	; (800f5ac <FATFS_LinkDriverEx+0x94>)
 800f558:	7a5b      	ldrb	r3, [r3, #9]
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	461a      	mov	r2, r3
 800f55e:	4b13      	ldr	r3, [pc, #76]	; (800f5ac <FATFS_LinkDriverEx+0x94>)
 800f560:	4413      	add	r3, r2
 800f562:	79fa      	ldrb	r2, [r7, #7]
 800f564:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f566:	4b11      	ldr	r3, [pc, #68]	; (800f5ac <FATFS_LinkDriverEx+0x94>)
 800f568:	7a5b      	ldrb	r3, [r3, #9]
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	1c5a      	adds	r2, r3, #1
 800f56e:	b2d1      	uxtb	r1, r2
 800f570:	4a0e      	ldr	r2, [pc, #56]	; (800f5ac <FATFS_LinkDriverEx+0x94>)
 800f572:	7251      	strb	r1, [r2, #9]
 800f574:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f576:	7dbb      	ldrb	r3, [r7, #22]
 800f578:	3330      	adds	r3, #48	; 0x30
 800f57a:	b2da      	uxtb	r2, r3
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	3301      	adds	r3, #1
 800f584:	223a      	movs	r2, #58	; 0x3a
 800f586:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	3302      	adds	r3, #2
 800f58c:	222f      	movs	r2, #47	; 0x2f
 800f58e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	3303      	adds	r3, #3
 800f594:	2200      	movs	r2, #0
 800f596:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f598:	2300      	movs	r3, #0
 800f59a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f59c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	371c      	adds	r7, #28
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr
 800f5aa:	bf00      	nop
 800f5ac:	20001cc4 	.word	0x20001cc4

0800f5b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b082      	sub	sp, #8
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	6839      	ldr	r1, [r7, #0]
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f7ff ffaa 	bl	800f518 <FATFS_LinkDriverEx>
 800f5c4:	4603      	mov	r3, r0
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3708      	adds	r7, #8
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
	...

0800f5d0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b085      	sub	sp, #20
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	6039      	str	r1, [r7, #0]
 800f5da:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f5dc:	88fb      	ldrh	r3, [r7, #6]
 800f5de:	2b7f      	cmp	r3, #127	; 0x7f
 800f5e0:	d802      	bhi.n	800f5e8 <ff_convert+0x18>
		c = chr;
 800f5e2:	88fb      	ldrh	r3, [r7, #6]
 800f5e4:	81fb      	strh	r3, [r7, #14]
 800f5e6:	e025      	b.n	800f634 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d00b      	beq.n	800f606 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f5ee:	88fb      	ldrh	r3, [r7, #6]
 800f5f0:	2bff      	cmp	r3, #255	; 0xff
 800f5f2:	d805      	bhi.n	800f600 <ff_convert+0x30>
 800f5f4:	88fb      	ldrh	r3, [r7, #6]
 800f5f6:	3b80      	subs	r3, #128	; 0x80
 800f5f8:	4a12      	ldr	r2, [pc, #72]	; (800f644 <ff_convert+0x74>)
 800f5fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5fe:	e000      	b.n	800f602 <ff_convert+0x32>
 800f600:	2300      	movs	r3, #0
 800f602:	81fb      	strh	r3, [r7, #14]
 800f604:	e016      	b.n	800f634 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f606:	2300      	movs	r3, #0
 800f608:	81fb      	strh	r3, [r7, #14]
 800f60a:	e009      	b.n	800f620 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f60c:	89fb      	ldrh	r3, [r7, #14]
 800f60e:	4a0d      	ldr	r2, [pc, #52]	; (800f644 <ff_convert+0x74>)
 800f610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f614:	88fa      	ldrh	r2, [r7, #6]
 800f616:	429a      	cmp	r2, r3
 800f618:	d006      	beq.n	800f628 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f61a:	89fb      	ldrh	r3, [r7, #14]
 800f61c:	3301      	adds	r3, #1
 800f61e:	81fb      	strh	r3, [r7, #14]
 800f620:	89fb      	ldrh	r3, [r7, #14]
 800f622:	2b7f      	cmp	r3, #127	; 0x7f
 800f624:	d9f2      	bls.n	800f60c <ff_convert+0x3c>
 800f626:	e000      	b.n	800f62a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f628:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f62a:	89fb      	ldrh	r3, [r7, #14]
 800f62c:	3380      	adds	r3, #128	; 0x80
 800f62e:	b29b      	uxth	r3, r3
 800f630:	b2db      	uxtb	r3, r3
 800f632:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f634:	89fb      	ldrh	r3, [r7, #14]
}
 800f636:	4618      	mov	r0, r3
 800f638:	3714      	adds	r7, #20
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr
 800f642:	bf00      	nop
 800f644:	0801a654 	.word	0x0801a654

0800f648 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f648:	b480      	push	{r7}
 800f64a:	b087      	sub	sp, #28
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	4603      	mov	r3, r0
 800f650:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f652:	88fb      	ldrh	r3, [r7, #6]
 800f654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f658:	d201      	bcs.n	800f65e <ff_wtoupper+0x16>
 800f65a:	4b3e      	ldr	r3, [pc, #248]	; (800f754 <ff_wtoupper+0x10c>)
 800f65c:	e000      	b.n	800f660 <ff_wtoupper+0x18>
 800f65e:	4b3e      	ldr	r3, [pc, #248]	; (800f758 <ff_wtoupper+0x110>)
 800f660:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	1c9a      	adds	r2, r3, #2
 800f666:	617a      	str	r2, [r7, #20]
 800f668:	881b      	ldrh	r3, [r3, #0]
 800f66a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f66c:	8a7b      	ldrh	r3, [r7, #18]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d068      	beq.n	800f744 <ff_wtoupper+0xfc>
 800f672:	88fa      	ldrh	r2, [r7, #6]
 800f674:	8a7b      	ldrh	r3, [r7, #18]
 800f676:	429a      	cmp	r2, r3
 800f678:	d364      	bcc.n	800f744 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	1c9a      	adds	r2, r3, #2
 800f67e:	617a      	str	r2, [r7, #20]
 800f680:	881b      	ldrh	r3, [r3, #0]
 800f682:	823b      	strh	r3, [r7, #16]
 800f684:	8a3b      	ldrh	r3, [r7, #16]
 800f686:	0a1b      	lsrs	r3, r3, #8
 800f688:	81fb      	strh	r3, [r7, #14]
 800f68a:	8a3b      	ldrh	r3, [r7, #16]
 800f68c:	b2db      	uxtb	r3, r3
 800f68e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f690:	88fa      	ldrh	r2, [r7, #6]
 800f692:	8a79      	ldrh	r1, [r7, #18]
 800f694:	8a3b      	ldrh	r3, [r7, #16]
 800f696:	440b      	add	r3, r1
 800f698:	429a      	cmp	r2, r3
 800f69a:	da49      	bge.n	800f730 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f69c:	89fb      	ldrh	r3, [r7, #14]
 800f69e:	2b08      	cmp	r3, #8
 800f6a0:	d84f      	bhi.n	800f742 <ff_wtoupper+0xfa>
 800f6a2:	a201      	add	r2, pc, #4	; (adr r2, 800f6a8 <ff_wtoupper+0x60>)
 800f6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6a8:	0800f6cd 	.word	0x0800f6cd
 800f6ac:	0800f6df 	.word	0x0800f6df
 800f6b0:	0800f6f5 	.word	0x0800f6f5
 800f6b4:	0800f6fd 	.word	0x0800f6fd
 800f6b8:	0800f705 	.word	0x0800f705
 800f6bc:	0800f70d 	.word	0x0800f70d
 800f6c0:	0800f715 	.word	0x0800f715
 800f6c4:	0800f71d 	.word	0x0800f71d
 800f6c8:	0800f725 	.word	0x0800f725
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f6cc:	88fa      	ldrh	r2, [r7, #6]
 800f6ce:	8a7b      	ldrh	r3, [r7, #18]
 800f6d0:	1ad3      	subs	r3, r2, r3
 800f6d2:	005b      	lsls	r3, r3, #1
 800f6d4:	697a      	ldr	r2, [r7, #20]
 800f6d6:	4413      	add	r3, r2
 800f6d8:	881b      	ldrh	r3, [r3, #0]
 800f6da:	80fb      	strh	r3, [r7, #6]
 800f6dc:	e027      	b.n	800f72e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f6de:	88fa      	ldrh	r2, [r7, #6]
 800f6e0:	8a7b      	ldrh	r3, [r7, #18]
 800f6e2:	1ad3      	subs	r3, r2, r3
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	f003 0301 	and.w	r3, r3, #1
 800f6ea:	b29b      	uxth	r3, r3
 800f6ec:	88fa      	ldrh	r2, [r7, #6]
 800f6ee:	1ad3      	subs	r3, r2, r3
 800f6f0:	80fb      	strh	r3, [r7, #6]
 800f6f2:	e01c      	b.n	800f72e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f6f4:	88fb      	ldrh	r3, [r7, #6]
 800f6f6:	3b10      	subs	r3, #16
 800f6f8:	80fb      	strh	r3, [r7, #6]
 800f6fa:	e018      	b.n	800f72e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f6fc:	88fb      	ldrh	r3, [r7, #6]
 800f6fe:	3b20      	subs	r3, #32
 800f700:	80fb      	strh	r3, [r7, #6]
 800f702:	e014      	b.n	800f72e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f704:	88fb      	ldrh	r3, [r7, #6]
 800f706:	3b30      	subs	r3, #48	; 0x30
 800f708:	80fb      	strh	r3, [r7, #6]
 800f70a:	e010      	b.n	800f72e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f70c:	88fb      	ldrh	r3, [r7, #6]
 800f70e:	3b1a      	subs	r3, #26
 800f710:	80fb      	strh	r3, [r7, #6]
 800f712:	e00c      	b.n	800f72e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f714:	88fb      	ldrh	r3, [r7, #6]
 800f716:	3308      	adds	r3, #8
 800f718:	80fb      	strh	r3, [r7, #6]
 800f71a:	e008      	b.n	800f72e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f71c:	88fb      	ldrh	r3, [r7, #6]
 800f71e:	3b50      	subs	r3, #80	; 0x50
 800f720:	80fb      	strh	r3, [r7, #6]
 800f722:	e004      	b.n	800f72e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f724:	88fb      	ldrh	r3, [r7, #6]
 800f726:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f72a:	80fb      	strh	r3, [r7, #6]
 800f72c:	bf00      	nop
			}
			break;
 800f72e:	e008      	b.n	800f742 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f730:	89fb      	ldrh	r3, [r7, #14]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d195      	bne.n	800f662 <ff_wtoupper+0x1a>
 800f736:	8a3b      	ldrh	r3, [r7, #16]
 800f738:	005b      	lsls	r3, r3, #1
 800f73a:	697a      	ldr	r2, [r7, #20]
 800f73c:	4413      	add	r3, r2
 800f73e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f740:	e78f      	b.n	800f662 <ff_wtoupper+0x1a>
			break;
 800f742:	bf00      	nop
	}

	return chr;
 800f744:	88fb      	ldrh	r3, [r7, #6]
}
 800f746:	4618      	mov	r0, r3
 800f748:	371c      	adds	r7, #28
 800f74a:	46bd      	mov	sp, r7
 800f74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f750:	4770      	bx	lr
 800f752:	bf00      	nop
 800f754:	0801a754 	.word	0x0801a754
 800f758:	0801a948 	.word	0x0801a948

0800f75c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b086      	sub	sp, #24
 800f760:	af00      	add	r7, sp, #0
 800f762:	4603      	mov	r3, r0
 800f764:	6039      	str	r1, [r7, #0]
 800f766:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800f768:	2300      	movs	r3, #0
 800f76a:	60fb      	str	r3, [r7, #12]
 800f76c:	2300      	movs	r3, #0
 800f76e:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800f770:	f107 030c 	add.w	r3, r7, #12
 800f774:	2101      	movs	r1, #1
 800f776:	4618      	mov	r0, r3
 800f778:	f000 fa98 	bl	800fcac <osSemaphoreCreate>
 800f77c:	4602      	mov	r2, r0
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	2b00      	cmp	r3, #0
 800f788:	bf14      	ite	ne
 800f78a:	2301      	movne	r3, #1
 800f78c:	2300      	moveq	r3, #0
 800f78e:	b2db      	uxtb	r3, r3
 800f790:	617b      	str	r3, [r7, #20]

    return ret;
 800f792:	697b      	ldr	r3, [r7, #20]
}
 800f794:	4618      	mov	r0, r3
 800f796:	3718      	adds	r7, #24
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b082      	sub	sp, #8
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f000 fb37 	bl	800fe18 <osSemaphoreDelete>
#endif
    return 1;
 800f7aa:	2301      	movs	r3, #1
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3708      	adds	r7, #8
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b084      	sub	sp, #16
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800f7c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f000 faa3 	bl	800fd10 <osSemaphoreWait>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d101      	bne.n	800f7d4 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3710      	adds	r7, #16
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}

0800f7de <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f7de:	b580      	push	{r7, lr}
 800f7e0:	b082      	sub	sp, #8
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f000 fae0 	bl	800fdac <osSemaphoreRelease>
#endif
}
 800f7ec:	bf00      	nop
 800f7ee:	3708      	adds	r7, #8
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b085      	sub	sp, #20
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f7fe:	2300      	movs	r3, #0
 800f800:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f806:	2b84      	cmp	r3, #132	; 0x84
 800f808:	d005      	beq.n	800f816 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f80a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	4413      	add	r3, r2
 800f812:	3303      	adds	r3, #3
 800f814:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f816:	68fb      	ldr	r3, [r7, #12]
}
 800f818:	4618      	mov	r0, r3
 800f81a:	3714      	adds	r7, #20
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr

0800f824 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f824:	b480      	push	{r7}
 800f826:	b083      	sub	sp, #12
 800f828:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f82a:	f3ef 8305 	mrs	r3, IPSR
 800f82e:	607b      	str	r3, [r7, #4]
  return(result);
 800f830:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f832:	2b00      	cmp	r3, #0
 800f834:	bf14      	ite	ne
 800f836:	2301      	movne	r3, #1
 800f838:	2300      	moveq	r3, #0
 800f83a:	b2db      	uxtb	r3, r3
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	370c      	adds	r7, #12
 800f840:	46bd      	mov	sp, r7
 800f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f846:	4770      	bx	lr

0800f848 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f84c:	f001 fe3c 	bl	80114c8 <vTaskStartScheduler>
  
  return osOK;
 800f850:	2300      	movs	r3, #0
}
 800f852:	4618      	mov	r0, r3
 800f854:	bd80      	pop	{r7, pc}

0800f856 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800f856:	b580      	push	{r7, lr}
 800f858:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800f85a:	f002 fa87 	bl	8011d6c <xTaskGetSchedulerState>
 800f85e:	4603      	mov	r3, r0
 800f860:	2b01      	cmp	r3, #1
 800f862:	d101      	bne.n	800f868 <osKernelRunning+0x12>
    return 0;
 800f864:	2300      	movs	r3, #0
 800f866:	e000      	b.n	800f86a <osKernelRunning+0x14>
  else
    return 1;
 800f868:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800f86a:	4618      	mov	r0, r3
 800f86c:	bd80      	pop	{r7, pc}

0800f86e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800f86e:	b580      	push	{r7, lr}
 800f870:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800f872:	f7ff ffd7 	bl	800f824 <inHandlerMode>
 800f876:	4603      	mov	r3, r0
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d003      	beq.n	800f884 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800f87c:	f001 ff44 	bl	8011708 <xTaskGetTickCountFromISR>
 800f880:	4603      	mov	r3, r0
 800f882:	e002      	b.n	800f88a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800f884:	f001 ff30 	bl	80116e8 <xTaskGetTickCount>
 800f888:	4603      	mov	r3, r0
  }
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	bd80      	pop	{r7, pc}

0800f88e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f88e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f890:	b089      	sub	sp, #36	; 0x24
 800f892:	af04      	add	r7, sp, #16
 800f894:	6078      	str	r0, [r7, #4]
 800f896:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	695b      	ldr	r3, [r3, #20]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d020      	beq.n	800f8e2 <osThreadCreate+0x54>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	699b      	ldr	r3, [r3, #24]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d01c      	beq.n	800f8e2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	685c      	ldr	r4, [r3, #4]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681d      	ldr	r5, [r3, #0]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	691e      	ldr	r6, [r3, #16]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7ff ff9a 	bl	800f7f4 <makeFreeRtosPriority>
 800f8c0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	695b      	ldr	r3, [r3, #20]
 800f8c6:	687a      	ldr	r2, [r7, #4]
 800f8c8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f8ca:	9202      	str	r2, [sp, #8]
 800f8cc:	9301      	str	r3, [sp, #4]
 800f8ce:	9100      	str	r1, [sp, #0]
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	4632      	mov	r2, r6
 800f8d4:	4629      	mov	r1, r5
 800f8d6:	4620      	mov	r0, r4
 800f8d8:	f001 fc2e 	bl	8011138 <xTaskCreateStatic>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	60fb      	str	r3, [r7, #12]
 800f8e0:	e01c      	b.n	800f91c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	685c      	ldr	r4, [r3, #4]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f8ee:	b29e      	uxth	r6, r3
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7ff ff7c 	bl	800f7f4 <makeFreeRtosPriority>
 800f8fc:	4602      	mov	r2, r0
 800f8fe:	f107 030c 	add.w	r3, r7, #12
 800f902:	9301      	str	r3, [sp, #4]
 800f904:	9200      	str	r2, [sp, #0]
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	4632      	mov	r2, r6
 800f90a:	4629      	mov	r1, r5
 800f90c:	4620      	mov	r0, r4
 800f90e:	f001 fc70 	bl	80111f2 <xTaskCreate>
 800f912:	4603      	mov	r3, r0
 800f914:	2b01      	cmp	r3, #1
 800f916:	d001      	beq.n	800f91c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f918:	2300      	movs	r3, #0
 800f91a:	e000      	b.n	800f91e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f91c:	68fb      	ldr	r3, [r7, #12]
}
 800f91e:	4618      	mov	r0, r3
 800f920:	3714      	adds	r7, #20
 800f922:	46bd      	mov	sp, r7
 800f924:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800f928 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 800f928:	b480      	push	{r7}
 800f92a:	af00      	add	r7, sp, #0
  taskYIELD();
 800f92c:	4b06      	ldr	r3, [pc, #24]	; (800f948 <osThreadYield+0x20>)
 800f92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f932:	601a      	str	r2, [r3, #0]
 800f934:	f3bf 8f4f 	dsb	sy
 800f938:	f3bf 8f6f 	isb	sy
  
  return osOK;
 800f93c:	2300      	movs	r3, #0
}
 800f93e:	4618      	mov	r0, r3
 800f940:	46bd      	mov	sp, r7
 800f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f946:	4770      	bx	lr
 800f948:	e000ed04 	.word	0xe000ed04

0800f94c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b084      	sub	sp, #16
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d001      	beq.n	800f962 <osDelay+0x16>
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	e000      	b.n	800f964 <osDelay+0x18>
 800f962:	2301      	movs	r3, #1
 800f964:	4618      	mov	r0, r3
 800f966:	f001 fd7b 	bl	8011460 <vTaskDelay>
  
  return osOK;
 800f96a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3710      	adds	r7, #16
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}

0800f974 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b086      	sub	sp, #24
 800f978:	af02      	add	r7, sp, #8
 800f97a:	60f8      	str	r0, [r7, #12]
 800f97c:	460b      	mov	r3, r1
 800f97e:	607a      	str	r2, [r7, #4]
 800f980:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	685b      	ldr	r3, [r3, #4]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d013      	beq.n	800f9b2 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800f98a:	7afb      	ldrb	r3, [r7, #11]
 800f98c:	2b01      	cmp	r3, #1
 800f98e:	d101      	bne.n	800f994 <osTimerCreate+0x20>
 800f990:	2101      	movs	r1, #1
 800f992:	e000      	b.n	800f996 <osTimerCreate+0x22>
 800f994:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800f99a:	68fa      	ldr	r2, [r7, #12]
 800f99c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800f99e:	9201      	str	r2, [sp, #4]
 800f9a0:	9300      	str	r3, [sp, #0]
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	460a      	mov	r2, r1
 800f9a6:	2101      	movs	r1, #1
 800f9a8:	480b      	ldr	r0, [pc, #44]	; (800f9d8 <osTimerCreate+0x64>)
 800f9aa:	f002 fcc4 	bl	8012336 <xTimerCreateStatic>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	e00e      	b.n	800f9d0 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800f9b2:	7afb      	ldrb	r3, [r7, #11]
 800f9b4:	2b01      	cmp	r3, #1
 800f9b6:	d101      	bne.n	800f9bc <osTimerCreate+0x48>
 800f9b8:	2201      	movs	r2, #1
 800f9ba:	e000      	b.n	800f9be <osTimerCreate+0x4a>
 800f9bc:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800f9c2:	9300      	str	r3, [sp, #0]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2101      	movs	r1, #1
 800f9c8:	4803      	ldr	r0, [pc, #12]	; (800f9d8 <osTimerCreate+0x64>)
 800f9ca:	f002 fc93 	bl	80122f4 <xTimerCreate>
 800f9ce:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3710      	adds	r7, #16
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}
 800f9d8:	08016b90 	.word	0x08016b90

0800f9dc <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b088      	sub	sp, #32
 800f9e0:	af02      	add	r7, sp, #8
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d101      	bne.n	800f9fc <osTimerStart+0x20>
    ticks = 1;
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800f9fc:	f7ff ff12 	bl	800f824 <inHandlerMode>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d01a      	beq.n	800fa3c <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800fa06:	f107 030c 	add.w	r3, r7, #12
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	9200      	str	r2, [sp, #0]
 800fa0e:	693a      	ldr	r2, [r7, #16]
 800fa10:	2109      	movs	r1, #9
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f002 fd08 	bl	8012428 <xTimerGenericCommand>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b01      	cmp	r3, #1
 800fa1c:	d002      	beq.n	800fa24 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800fa1e:	23ff      	movs	r3, #255	; 0xff
 800fa20:	617b      	str	r3, [r7, #20]
 800fa22:	e018      	b.n	800fa56 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d015      	beq.n	800fa56 <osTimerStart+0x7a>
 800fa2a:	4b0d      	ldr	r3, [pc, #52]	; (800fa60 <osTimerStart+0x84>)
 800fa2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa30:	601a      	str	r2, [r3, #0]
 800fa32:	f3bf 8f4f 	dsb	sy
 800fa36:	f3bf 8f6f 	isb	sy
 800fa3a:	e00c      	b.n	800fa56 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	9300      	str	r3, [sp, #0]
 800fa40:	2300      	movs	r3, #0
 800fa42:	693a      	ldr	r2, [r7, #16]
 800fa44:	2104      	movs	r1, #4
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f002 fcee 	bl	8012428 <xTimerGenericCommand>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	d001      	beq.n	800fa56 <osTimerStart+0x7a>
      result = osErrorOS;
 800fa52:	23ff      	movs	r3, #255	; 0xff
 800fa54:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800fa56:	697b      	ldr	r3, [r7, #20]
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3718      	adds	r7, #24
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}
 800fa60:	e000ed04 	.word	0xe000ed04

0800fa64 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b086      	sub	sp, #24
 800fa68:	af02      	add	r7, sp, #8
 800fa6a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800fa70:	2300      	movs	r3, #0
 800fa72:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 800fa74:	f7ff fed6 	bl	800f824 <inHandlerMode>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d019      	beq.n	800fab2 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800fa7e:	f107 0308 	add.w	r3, r7, #8
 800fa82:	2200      	movs	r2, #0
 800fa84:	9200      	str	r2, [sp, #0]
 800fa86:	2200      	movs	r2, #0
 800fa88:	2108      	movs	r1, #8
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f002 fccc 	bl	8012428 <xTimerGenericCommand>
 800fa90:	4603      	mov	r3, r0
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	d001      	beq.n	800fa9a <osTimerStop+0x36>
      return osErrorOS;
 800fa96:	23ff      	movs	r3, #255	; 0xff
 800fa98:	e019      	b.n	800face <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d015      	beq.n	800facc <osTimerStop+0x68>
 800faa0:	4b0d      	ldr	r3, [pc, #52]	; (800fad8 <osTimerStop+0x74>)
 800faa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faa6:	601a      	str	r2, [r3, #0]
 800faa8:	f3bf 8f4f 	dsb	sy
 800faac:	f3bf 8f6f 	isb	sy
 800fab0:	e00c      	b.n	800facc <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 800fab2:	2300      	movs	r3, #0
 800fab4:	9300      	str	r3, [sp, #0]
 800fab6:	2300      	movs	r3, #0
 800fab8:	2200      	movs	r2, #0
 800faba:	2103      	movs	r1, #3
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f002 fcb3 	bl	8012428 <xTimerGenericCommand>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d001      	beq.n	800facc <osTimerStop+0x68>
      result = osErrorOS;
 800fac8:	23ff      	movs	r3, #255	; 0xff
 800faca:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 800facc:	68fb      	ldr	r3, [r7, #12]
}
 800face:	4618      	mov	r0, r3
 800fad0:	3710      	adds	r7, #16
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	e000ed04 	.word	0xe000ed04

0800fadc <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800fadc:	b590      	push	{r4, r7, lr}
 800fade:	b089      	sub	sp, #36	; 0x24
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800fae8:	2300      	movs	r3, #0
 800faea:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800faec:	2300      	movs	r3, #0
 800faee:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faf6:	d103      	bne.n	800fb00 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800faf8:	f04f 33ff 	mov.w	r3, #4294967295
 800fafc:	61fb      	str	r3, [r7, #28]
 800fafe:	e009      	b.n	800fb14 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d006      	beq.n	800fb14 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800fb0a:	69fb      	ldr	r3, [r7, #28]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d101      	bne.n	800fb14 <osSignalWait+0x38>
      ticks = 1;
 800fb10:	2301      	movs	r3, #1
 800fb12:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800fb14:	f7ff fe86 	bl	800f824 <inHandlerMode>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d002      	beq.n	800fb24 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800fb1e:	2382      	movs	r3, #130	; 0x82
 800fb20:	613b      	str	r3, [r7, #16]
 800fb22:	e01b      	b.n	800fb5c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800fb24:	68b9      	ldr	r1, [r7, #8]
 800fb26:	f107 0310 	add.w	r3, r7, #16
 800fb2a:	1d1a      	adds	r2, r3, #4
 800fb2c:	69fb      	ldr	r3, [r7, #28]
 800fb2e:	2000      	movs	r0, #0
 800fb30:	f002 fad8 	bl	80120e4 <xTaskNotifyWait>
 800fb34:	4603      	mov	r3, r0
 800fb36:	2b01      	cmp	r3, #1
 800fb38:	d008      	beq.n	800fb4c <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d102      	bne.n	800fb46 <osSignalWait+0x6a>
 800fb40:	2300      	movs	r3, #0
 800fb42:	613b      	str	r3, [r7, #16]
 800fb44:	e00a      	b.n	800fb5c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800fb46:	2340      	movs	r3, #64	; 0x40
 800fb48:	613b      	str	r3, [r7, #16]
 800fb4a:	e007      	b.n	800fb5c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	da02      	bge.n	800fb58 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800fb52:	2386      	movs	r3, #134	; 0x86
 800fb54:	613b      	str	r3, [r7, #16]
 800fb56:	e001      	b.n	800fb5c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800fb58:	2308      	movs	r3, #8
 800fb5a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	461c      	mov	r4, r3
 800fb60:	f107 0310 	add.w	r3, r7, #16
 800fb64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fb68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fb6c:	68f8      	ldr	r0, [r7, #12]
 800fb6e:	3724      	adds	r7, #36	; 0x24
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd90      	pop	{r4, r7, pc}

0800fb74 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	685b      	ldr	r3, [r3, #4]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d007      	beq.n	800fb94 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	685b      	ldr	r3, [r3, #4]
 800fb88:	4619      	mov	r1, r3
 800fb8a:	2001      	movs	r0, #1
 800fb8c:	f000 fc53 	bl	8010436 <xQueueCreateMutexStatic>
 800fb90:	4603      	mov	r3, r0
 800fb92:	e003      	b.n	800fb9c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800fb94:	2001      	movs	r0, #1
 800fb96:	f000 fc36 	bl	8010406 <xQueueCreateMutex>
 800fb9a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3708      	adds	r7, #8
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b084      	sub	sp, #16
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800fbae:	2300      	movs	r3, #0
 800fbb0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d101      	bne.n	800fbbc <osMutexWait+0x18>
    return osErrorParameter;
 800fbb8:	2380      	movs	r3, #128	; 0x80
 800fbba:	e03a      	b.n	800fc32 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbc6:	d103      	bne.n	800fbd0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800fbc8:	f04f 33ff 	mov.w	r3, #4294967295
 800fbcc:	60fb      	str	r3, [r7, #12]
 800fbce:	e009      	b.n	800fbe4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d006      	beq.n	800fbe4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d101      	bne.n	800fbe4 <osMutexWait+0x40>
      ticks = 1;
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800fbe4:	f7ff fe1e 	bl	800f824 <inHandlerMode>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d017      	beq.n	800fc1e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800fbee:	f107 0308 	add.w	r3, r7, #8
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	2100      	movs	r1, #0
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f001 f84a 	bl	8010c90 <xQueueReceiveFromISR>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b01      	cmp	r3, #1
 800fc00:	d001      	beq.n	800fc06 <osMutexWait+0x62>
      return osErrorOS;
 800fc02:	23ff      	movs	r3, #255	; 0xff
 800fc04:	e015      	b.n	800fc32 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d011      	beq.n	800fc30 <osMutexWait+0x8c>
 800fc0c:	4b0b      	ldr	r3, [pc, #44]	; (800fc3c <osMutexWait+0x98>)
 800fc0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc12:	601a      	str	r2, [r3, #0]
 800fc14:	f3bf 8f4f 	dsb	sy
 800fc18:	f3bf 8f6f 	isb	sy
 800fc1c:	e008      	b.n	800fc30 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800fc1e:	68f9      	ldr	r1, [r7, #12]
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f000 ff29 	bl	8010a78 <xQueueSemaphoreTake>
 800fc26:	4603      	mov	r3, r0
 800fc28:	2b01      	cmp	r3, #1
 800fc2a:	d001      	beq.n	800fc30 <osMutexWait+0x8c>
    return osErrorOS;
 800fc2c:	23ff      	movs	r3, #255	; 0xff
 800fc2e:	e000      	b.n	800fc32 <osMutexWait+0x8e>
  }
  
  return osOK;
 800fc30:	2300      	movs	r3, #0
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3710      	adds	r7, #16
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
 800fc3a:	bf00      	nop
 800fc3c:	e000ed04 	.word	0xe000ed04

0800fc40 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b084      	sub	sp, #16
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800fc50:	f7ff fde8 	bl	800f824 <inHandlerMode>
 800fc54:	4603      	mov	r3, r0
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d016      	beq.n	800fc88 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800fc5a:	f107 0308 	add.w	r3, r7, #8
 800fc5e:	4619      	mov	r1, r3
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f000 fd9c 	bl	801079e <xQueueGiveFromISR>
 800fc66:	4603      	mov	r3, r0
 800fc68:	2b01      	cmp	r3, #1
 800fc6a:	d001      	beq.n	800fc70 <osMutexRelease+0x30>
      return osErrorOS;
 800fc6c:	23ff      	movs	r3, #255	; 0xff
 800fc6e:	e017      	b.n	800fca0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d013      	beq.n	800fc9e <osMutexRelease+0x5e>
 800fc76:	4b0c      	ldr	r3, [pc, #48]	; (800fca8 <osMutexRelease+0x68>)
 800fc78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc7c:	601a      	str	r2, [r3, #0]
 800fc7e:	f3bf 8f4f 	dsb	sy
 800fc82:	f3bf 8f6f 	isb	sy
 800fc86:	e00a      	b.n	800fc9e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800fc88:	2300      	movs	r3, #0
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	2100      	movs	r1, #0
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 fbec 	bl	801046c <xQueueGenericSend>
 800fc94:	4603      	mov	r3, r0
 800fc96:	2b01      	cmp	r3, #1
 800fc98:	d001      	beq.n	800fc9e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800fc9a:	23ff      	movs	r3, #255	; 0xff
 800fc9c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3710      	adds	r7, #16
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}
 800fca8:	e000ed04 	.word	0xe000ed04

0800fcac <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b086      	sub	sp, #24
 800fcb0:	af02      	add	r7, sp, #8
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	685b      	ldr	r3, [r3, #4]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d00f      	beq.n	800fcde <osSemaphoreCreate+0x32>
    if (count == 1) {
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	2b01      	cmp	r3, #1
 800fcc2:	d10a      	bne.n	800fcda <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	685b      	ldr	r3, [r3, #4]
 800fcc8:	2203      	movs	r2, #3
 800fcca:	9200      	str	r2, [sp, #0]
 800fccc:	2200      	movs	r2, #0
 800fcce:	2100      	movs	r1, #0
 800fcd0:	2001      	movs	r0, #1
 800fcd2:	f000 faad 	bl	8010230 <xQueueGenericCreateStatic>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	e016      	b.n	800fd08 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	e014      	b.n	800fd08 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	2b01      	cmp	r3, #1
 800fce2:	d110      	bne.n	800fd06 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800fce4:	2203      	movs	r2, #3
 800fce6:	2100      	movs	r1, #0
 800fce8:	2001      	movs	r0, #1
 800fcea:	f000 fb19 	bl	8010320 <xQueueGenericCreate>
 800fcee:	60f8      	str	r0, [r7, #12]
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d005      	beq.n	800fd02 <osSemaphoreCreate+0x56>
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	2100      	movs	r1, #0
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f000 fbb5 	bl	801046c <xQueueGenericSend>
      return sema;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	e000      	b.n	800fd08 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800fd06:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800fd08:	4618      	mov	r0, r3
 800fd0a:	3710      	adds	r7, #16
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}

0800fd10 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d101      	bne.n	800fd28 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800fd24:	2380      	movs	r3, #128	; 0x80
 800fd26:	e03a      	b.n	800fd9e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd32:	d103      	bne.n	800fd3c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800fd34:	f04f 33ff 	mov.w	r3, #4294967295
 800fd38:	60fb      	str	r3, [r7, #12]
 800fd3a:	e009      	b.n	800fd50 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d006      	beq.n	800fd50 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d101      	bne.n	800fd50 <osSemaphoreWait+0x40>
      ticks = 1;
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800fd50:	f7ff fd68 	bl	800f824 <inHandlerMode>
 800fd54:	4603      	mov	r3, r0
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d017      	beq.n	800fd8a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fd5a:	f107 0308 	add.w	r3, r7, #8
 800fd5e:	461a      	mov	r2, r3
 800fd60:	2100      	movs	r1, #0
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f000 ff94 	bl	8010c90 <xQueueReceiveFromISR>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2b01      	cmp	r3, #1
 800fd6c:	d001      	beq.n	800fd72 <osSemaphoreWait+0x62>
      return osErrorOS;
 800fd6e:	23ff      	movs	r3, #255	; 0xff
 800fd70:	e015      	b.n	800fd9e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d011      	beq.n	800fd9c <osSemaphoreWait+0x8c>
 800fd78:	4b0b      	ldr	r3, [pc, #44]	; (800fda8 <osSemaphoreWait+0x98>)
 800fd7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd7e:	601a      	str	r2, [r3, #0]
 800fd80:	f3bf 8f4f 	dsb	sy
 800fd84:	f3bf 8f6f 	isb	sy
 800fd88:	e008      	b.n	800fd9c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800fd8a:	68f9      	ldr	r1, [r7, #12]
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f000 fe73 	bl	8010a78 <xQueueSemaphoreTake>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d001      	beq.n	800fd9c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800fd98:	23ff      	movs	r3, #255	; 0xff
 800fd9a:	e000      	b.n	800fd9e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800fd9c:	2300      	movs	r3, #0
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3710      	adds	r7, #16
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	e000ed04 	.word	0xe000ed04

0800fdac <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800fdbc:	f7ff fd32 	bl	800f824 <inHandlerMode>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d016      	beq.n	800fdf4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fdc6:	f107 0308 	add.w	r3, r7, #8
 800fdca:	4619      	mov	r1, r3
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f000 fce6 	bl	801079e <xQueueGiveFromISR>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	d001      	beq.n	800fddc <osSemaphoreRelease+0x30>
      return osErrorOS;
 800fdd8:	23ff      	movs	r3, #255	; 0xff
 800fdda:	e017      	b.n	800fe0c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d013      	beq.n	800fe0a <osSemaphoreRelease+0x5e>
 800fde2:	4b0c      	ldr	r3, [pc, #48]	; (800fe14 <osSemaphoreRelease+0x68>)
 800fde4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fde8:	601a      	str	r2, [r3, #0]
 800fdea:	f3bf 8f4f 	dsb	sy
 800fdee:	f3bf 8f6f 	isb	sy
 800fdf2:	e00a      	b.n	800fe0a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	2100      	movs	r1, #0
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f000 fb36 	bl	801046c <xQueueGenericSend>
 800fe00:	4603      	mov	r3, r0
 800fe02:	2b01      	cmp	r3, #1
 800fe04:	d001      	beq.n	800fe0a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800fe06:	23ff      	movs	r3, #255	; 0xff
 800fe08:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3710      	adds	r7, #16
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	e000ed04 	.word	0xe000ed04

0800fe18 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800fe20:	f7ff fd00 	bl	800f824 <inHandlerMode>
 800fe24:	4603      	mov	r3, r0
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d001      	beq.n	800fe2e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800fe2a:	2382      	movs	r3, #130	; 0x82
 800fe2c:	e003      	b.n	800fe36 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f000 ffae 	bl	8010d90 <vQueueDelete>

  return osOK; 
 800fe34:	2300      	movs	r3, #0
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	3708      	adds	r7, #8
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}

0800fe3e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800fe3e:	b590      	push	{r4, r7, lr}
 800fe40:	b085      	sub	sp, #20
 800fe42:	af02      	add	r7, sp, #8
 800fe44:	6078      	str	r0, [r7, #4]
 800fe46:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	689b      	ldr	r3, [r3, #8]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d011      	beq.n	800fe74 <osMessageCreate+0x36>
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d00d      	beq.n	800fe74 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6818      	ldr	r0, [r3, #0]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6859      	ldr	r1, [r3, #4]
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	689a      	ldr	r2, [r3, #8]
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	68db      	ldr	r3, [r3, #12]
 800fe68:	2400      	movs	r4, #0
 800fe6a:	9400      	str	r4, [sp, #0]
 800fe6c:	f000 f9e0 	bl	8010230 <xQueueGenericCreateStatic>
 800fe70:	4603      	mov	r3, r0
 800fe72:	e008      	b.n	800fe86 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6818      	ldr	r0, [r3, #0]
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	685b      	ldr	r3, [r3, #4]
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	4619      	mov	r1, r3
 800fe80:	f000 fa4e 	bl	8010320 <xQueueGenericCreate>
 800fe84:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	370c      	adds	r7, #12
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd90      	pop	{r4, r7, pc}
	...

0800fe90 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b086      	sub	sp, #24
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	60b9      	str	r1, [r7, #8]
 800fe9a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d101      	bne.n	800feae <osMessagePut+0x1e>
    ticks = 1;
 800feaa:	2301      	movs	r3, #1
 800feac:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800feae:	f7ff fcb9 	bl	800f824 <inHandlerMode>
 800feb2:	4603      	mov	r3, r0
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d018      	beq.n	800feea <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800feb8:	f107 0210 	add.w	r2, r7, #16
 800febc:	f107 0108 	add.w	r1, r7, #8
 800fec0:	2300      	movs	r3, #0
 800fec2:	68f8      	ldr	r0, [r7, #12]
 800fec4:	f000 fbd0 	bl	8010668 <xQueueGenericSendFromISR>
 800fec8:	4603      	mov	r3, r0
 800feca:	2b01      	cmp	r3, #1
 800fecc:	d001      	beq.n	800fed2 <osMessagePut+0x42>
      return osErrorOS;
 800fece:	23ff      	movs	r3, #255	; 0xff
 800fed0:	e018      	b.n	800ff04 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fed2:	693b      	ldr	r3, [r7, #16]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d014      	beq.n	800ff02 <osMessagePut+0x72>
 800fed8:	4b0c      	ldr	r3, [pc, #48]	; (800ff0c <osMessagePut+0x7c>)
 800feda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fede:	601a      	str	r2, [r3, #0]
 800fee0:	f3bf 8f4f 	dsb	sy
 800fee4:	f3bf 8f6f 	isb	sy
 800fee8:	e00b      	b.n	800ff02 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800feea:	f107 0108 	add.w	r1, r7, #8
 800feee:	2300      	movs	r3, #0
 800fef0:	697a      	ldr	r2, [r7, #20]
 800fef2:	68f8      	ldr	r0, [r7, #12]
 800fef4:	f000 faba 	bl	801046c <xQueueGenericSend>
 800fef8:	4603      	mov	r3, r0
 800fefa:	2b01      	cmp	r3, #1
 800fefc:	d001      	beq.n	800ff02 <osMessagePut+0x72>
      return osErrorOS;
 800fefe:	23ff      	movs	r3, #255	; 0xff
 800ff00:	e000      	b.n	800ff04 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ff02:	2300      	movs	r3, #0
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	3718      	adds	r7, #24
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}
 800ff0c:	e000ed04 	.word	0xe000ed04

0800ff10 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ff10:	b590      	push	{r4, r7, lr}
 800ff12:	b08b      	sub	sp, #44	; 0x2c
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	60f8      	str	r0, [r7, #12]
 800ff18:	60b9      	str	r1, [r7, #8]
 800ff1a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ff20:	2300      	movs	r3, #0
 800ff22:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d10a      	bne.n	800ff40 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ff2a:	2380      	movs	r3, #128	; 0x80
 800ff2c:	617b      	str	r3, [r7, #20]
    return event;
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	461c      	mov	r4, r3
 800ff32:	f107 0314 	add.w	r3, r7, #20
 800ff36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ff3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ff3e:	e054      	b.n	800ffea <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ff40:	2300      	movs	r3, #0
 800ff42:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ff44:	2300      	movs	r3, #0
 800ff46:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff4e:	d103      	bne.n	800ff58 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ff50:	f04f 33ff 	mov.w	r3, #4294967295
 800ff54:	627b      	str	r3, [r7, #36]	; 0x24
 800ff56:	e009      	b.n	800ff6c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d006      	beq.n	800ff6c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ff62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d101      	bne.n	800ff6c <osMessageGet+0x5c>
      ticks = 1;
 800ff68:	2301      	movs	r3, #1
 800ff6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ff6c:	f7ff fc5a 	bl	800f824 <inHandlerMode>
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d01c      	beq.n	800ffb0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ff76:	f107 0220 	add.w	r2, r7, #32
 800ff7a:	f107 0314 	add.w	r3, r7, #20
 800ff7e:	3304      	adds	r3, #4
 800ff80:	4619      	mov	r1, r3
 800ff82:	68b8      	ldr	r0, [r7, #8]
 800ff84:	f000 fe84 	bl	8010c90 <xQueueReceiveFromISR>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	2b01      	cmp	r3, #1
 800ff8c:	d102      	bne.n	800ff94 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ff8e:	2310      	movs	r3, #16
 800ff90:	617b      	str	r3, [r7, #20]
 800ff92:	e001      	b.n	800ff98 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ff94:	2300      	movs	r3, #0
 800ff96:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ff98:	6a3b      	ldr	r3, [r7, #32]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d01d      	beq.n	800ffda <osMessageGet+0xca>
 800ff9e:	4b15      	ldr	r3, [pc, #84]	; (800fff4 <osMessageGet+0xe4>)
 800ffa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffa4:	601a      	str	r2, [r3, #0]
 800ffa6:	f3bf 8f4f 	dsb	sy
 800ffaa:	f3bf 8f6f 	isb	sy
 800ffae:	e014      	b.n	800ffda <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ffb0:	f107 0314 	add.w	r3, r7, #20
 800ffb4:	3304      	adds	r3, #4
 800ffb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffb8:	4619      	mov	r1, r3
 800ffba:	68b8      	ldr	r0, [r7, #8]
 800ffbc:	f000 fc7c 	bl	80108b8 <xQueueReceive>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	2b01      	cmp	r3, #1
 800ffc4:	d102      	bne.n	800ffcc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ffc6:	2310      	movs	r3, #16
 800ffc8:	617b      	str	r3, [r7, #20]
 800ffca:	e006      	b.n	800ffda <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ffcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d101      	bne.n	800ffd6 <osMessageGet+0xc6>
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	e000      	b.n	800ffd8 <osMessageGet+0xc8>
 800ffd6:	2340      	movs	r3, #64	; 0x40
 800ffd8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	461c      	mov	r4, r3
 800ffde:	f107 0314 	add.w	r3, r7, #20
 800ffe2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ffe6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ffea:	68f8      	ldr	r0, [r7, #12]
 800ffec:	372c      	adds	r7, #44	; 0x2c
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd90      	pop	{r4, r7, pc}
 800fff2:	bf00      	nop
 800fff4:	e000ed04 	.word	0xe000ed04

0800fff8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fff8:	b480      	push	{r7}
 800fffa:	b083      	sub	sp, #12
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f103 0208 	add.w	r2, r3, #8
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f04f 32ff 	mov.w	r2, #4294967295
 8010010:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f103 0208 	add.w	r2, r3, #8
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f103 0208 	add.w	r2, r3, #8
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801002c:	bf00      	nop
 801002e:	370c      	adds	r7, #12
 8010030:	46bd      	mov	sp, r7
 8010032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010036:	4770      	bx	lr

08010038 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2200      	movs	r2, #0
 8010044:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010046:	bf00      	nop
 8010048:	370c      	adds	r7, #12
 801004a:	46bd      	mov	sp, r7
 801004c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010050:	4770      	bx	lr

08010052 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010052:	b480      	push	{r7}
 8010054:	b085      	sub	sp, #20
 8010056:	af00      	add	r7, sp, #0
 8010058:	6078      	str	r0, [r7, #4]
 801005a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	685b      	ldr	r3, [r3, #4]
 8010060:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	68fa      	ldr	r2, [r7, #12]
 8010066:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	689a      	ldr	r2, [r3, #8]
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	689b      	ldr	r3, [r3, #8]
 8010074:	683a      	ldr	r2, [r7, #0]
 8010076:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	683a      	ldr	r2, [r7, #0]
 801007c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	687a      	ldr	r2, [r7, #4]
 8010082:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	1c5a      	adds	r2, r3, #1
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	601a      	str	r2, [r3, #0]
}
 801008e:	bf00      	nop
 8010090:	3714      	adds	r7, #20
 8010092:	46bd      	mov	sp, r7
 8010094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010098:	4770      	bx	lr

0801009a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801009a:	b480      	push	{r7}
 801009c:	b085      	sub	sp, #20
 801009e:	af00      	add	r7, sp, #0
 80100a0:	6078      	str	r0, [r7, #4]
 80100a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100b0:	d103      	bne.n	80100ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	691b      	ldr	r3, [r3, #16]
 80100b6:	60fb      	str	r3, [r7, #12]
 80100b8:	e00c      	b.n	80100d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	3308      	adds	r3, #8
 80100be:	60fb      	str	r3, [r7, #12]
 80100c0:	e002      	b.n	80100c8 <vListInsert+0x2e>
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	685b      	ldr	r3, [r3, #4]
 80100c6:	60fb      	str	r3, [r7, #12]
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	68ba      	ldr	r2, [r7, #8]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d2f6      	bcs.n	80100c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	685a      	ldr	r2, [r3, #4]
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	683a      	ldr	r2, [r7, #0]
 80100e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	68fa      	ldr	r2, [r7, #12]
 80100e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	683a      	ldr	r2, [r7, #0]
 80100ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	1c5a      	adds	r2, r3, #1
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	601a      	str	r2, [r3, #0]
}
 8010100:	bf00      	nop
 8010102:	3714      	adds	r7, #20
 8010104:	46bd      	mov	sp, r7
 8010106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010a:	4770      	bx	lr

0801010c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801010c:	b480      	push	{r7}
 801010e:	b085      	sub	sp, #20
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	691b      	ldr	r3, [r3, #16]
 8010118:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	685b      	ldr	r3, [r3, #4]
 801011e:	687a      	ldr	r2, [r7, #4]
 8010120:	6892      	ldr	r2, [r2, #8]
 8010122:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	689b      	ldr	r3, [r3, #8]
 8010128:	687a      	ldr	r2, [r7, #4]
 801012a:	6852      	ldr	r2, [r2, #4]
 801012c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	685b      	ldr	r3, [r3, #4]
 8010132:	687a      	ldr	r2, [r7, #4]
 8010134:	429a      	cmp	r2, r3
 8010136:	d103      	bne.n	8010140 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	689a      	ldr	r2, [r3, #8]
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2200      	movs	r2, #0
 8010144:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	1e5a      	subs	r2, r3, #1
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	681b      	ldr	r3, [r3, #0]
}
 8010154:	4618      	mov	r0, r3
 8010156:	3714      	adds	r7, #20
 8010158:	46bd      	mov	sp, r7
 801015a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015e:	4770      	bx	lr

08010160 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b084      	sub	sp, #16
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d10a      	bne.n	801018a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010178:	f383 8811 	msr	BASEPRI, r3
 801017c:	f3bf 8f6f 	isb	sy
 8010180:	f3bf 8f4f 	dsb	sy
 8010184:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010186:	bf00      	nop
 8010188:	e7fe      	b.n	8010188 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801018a:	f002 fd63 	bl	8012c54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	681a      	ldr	r2, [r3, #0]
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010196:	68f9      	ldr	r1, [r7, #12]
 8010198:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801019a:	fb01 f303 	mul.w	r3, r1, r3
 801019e:	441a      	add	r2, r3
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	2200      	movs	r2, #0
 80101a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	681a      	ldr	r2, [r3, #0]
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	681a      	ldr	r2, [r3, #0]
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101ba:	3b01      	subs	r3, #1
 80101bc:	68f9      	ldr	r1, [r7, #12]
 80101be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80101c0:	fb01 f303 	mul.w	r3, r1, r3
 80101c4:	441a      	add	r2, r3
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	22ff      	movs	r2, #255	; 0xff
 80101ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	22ff      	movs	r2, #255	; 0xff
 80101d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d114      	bne.n	801020a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	691b      	ldr	r3, [r3, #16]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d01a      	beq.n	801021e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	3310      	adds	r3, #16
 80101ec:	4618      	mov	r0, r3
 80101ee:	f001 fc01 	bl	80119f4 <xTaskRemoveFromEventList>
 80101f2:	4603      	mov	r3, r0
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d012      	beq.n	801021e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80101f8:	4b0c      	ldr	r3, [pc, #48]	; (801022c <xQueueGenericReset+0xcc>)
 80101fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101fe:	601a      	str	r2, [r3, #0]
 8010200:	f3bf 8f4f 	dsb	sy
 8010204:	f3bf 8f6f 	isb	sy
 8010208:	e009      	b.n	801021e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	3310      	adds	r3, #16
 801020e:	4618      	mov	r0, r3
 8010210:	f7ff fef2 	bl	800fff8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	3324      	adds	r3, #36	; 0x24
 8010218:	4618      	mov	r0, r3
 801021a:	f7ff feed 	bl	800fff8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801021e:	f002 fd49 	bl	8012cb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010222:	2301      	movs	r3, #1
}
 8010224:	4618      	mov	r0, r3
 8010226:	3710      	adds	r7, #16
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}
 801022c:	e000ed04 	.word	0xe000ed04

08010230 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010230:	b580      	push	{r7, lr}
 8010232:	b08e      	sub	sp, #56	; 0x38
 8010234:	af02      	add	r7, sp, #8
 8010236:	60f8      	str	r0, [r7, #12]
 8010238:	60b9      	str	r1, [r7, #8]
 801023a:	607a      	str	r2, [r7, #4]
 801023c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d10a      	bne.n	801025a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010248:	f383 8811 	msr	BASEPRI, r3
 801024c:	f3bf 8f6f 	isb	sy
 8010250:	f3bf 8f4f 	dsb	sy
 8010254:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010256:	bf00      	nop
 8010258:	e7fe      	b.n	8010258 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d10a      	bne.n	8010276 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010264:	f383 8811 	msr	BASEPRI, r3
 8010268:	f3bf 8f6f 	isb	sy
 801026c:	f3bf 8f4f 	dsb	sy
 8010270:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010272:	bf00      	nop
 8010274:	e7fe      	b.n	8010274 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d002      	beq.n	8010282 <xQueueGenericCreateStatic+0x52>
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d001      	beq.n	8010286 <xQueueGenericCreateStatic+0x56>
 8010282:	2301      	movs	r3, #1
 8010284:	e000      	b.n	8010288 <xQueueGenericCreateStatic+0x58>
 8010286:	2300      	movs	r3, #0
 8010288:	2b00      	cmp	r3, #0
 801028a:	d10a      	bne.n	80102a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801028c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010290:	f383 8811 	msr	BASEPRI, r3
 8010294:	f3bf 8f6f 	isb	sy
 8010298:	f3bf 8f4f 	dsb	sy
 801029c:	623b      	str	r3, [r7, #32]
}
 801029e:	bf00      	nop
 80102a0:	e7fe      	b.n	80102a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d102      	bne.n	80102ae <xQueueGenericCreateStatic+0x7e>
 80102a8:	68bb      	ldr	r3, [r7, #8]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d101      	bne.n	80102b2 <xQueueGenericCreateStatic+0x82>
 80102ae:	2301      	movs	r3, #1
 80102b0:	e000      	b.n	80102b4 <xQueueGenericCreateStatic+0x84>
 80102b2:	2300      	movs	r3, #0
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d10a      	bne.n	80102ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80102b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102bc:	f383 8811 	msr	BASEPRI, r3
 80102c0:	f3bf 8f6f 	isb	sy
 80102c4:	f3bf 8f4f 	dsb	sy
 80102c8:	61fb      	str	r3, [r7, #28]
}
 80102ca:	bf00      	nop
 80102cc:	e7fe      	b.n	80102cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80102ce:	2348      	movs	r3, #72	; 0x48
 80102d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	2b48      	cmp	r3, #72	; 0x48
 80102d6:	d00a      	beq.n	80102ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80102d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102dc:	f383 8811 	msr	BASEPRI, r3
 80102e0:	f3bf 8f6f 	isb	sy
 80102e4:	f3bf 8f4f 	dsb	sy
 80102e8:	61bb      	str	r3, [r7, #24]
}
 80102ea:	bf00      	nop
 80102ec:	e7fe      	b.n	80102ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80102ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80102f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d00d      	beq.n	8010316 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80102fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fc:	2201      	movs	r2, #1
 80102fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010302:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010308:	9300      	str	r3, [sp, #0]
 801030a:	4613      	mov	r3, r2
 801030c:	687a      	ldr	r2, [r7, #4]
 801030e:	68b9      	ldr	r1, [r7, #8]
 8010310:	68f8      	ldr	r0, [r7, #12]
 8010312:	f000 f83f 	bl	8010394 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010318:	4618      	mov	r0, r3
 801031a:	3730      	adds	r7, #48	; 0x30
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010320:	b580      	push	{r7, lr}
 8010322:	b08a      	sub	sp, #40	; 0x28
 8010324:	af02      	add	r7, sp, #8
 8010326:	60f8      	str	r0, [r7, #12]
 8010328:	60b9      	str	r1, [r7, #8]
 801032a:	4613      	mov	r3, r2
 801032c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d10a      	bne.n	801034a <xQueueGenericCreate+0x2a>
	__asm volatile
 8010334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010338:	f383 8811 	msr	BASEPRI, r3
 801033c:	f3bf 8f6f 	isb	sy
 8010340:	f3bf 8f4f 	dsb	sy
 8010344:	613b      	str	r3, [r7, #16]
}
 8010346:	bf00      	nop
 8010348:	e7fe      	b.n	8010348 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	68ba      	ldr	r2, [r7, #8]
 801034e:	fb02 f303 	mul.w	r3, r2, r3
 8010352:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010354:	69fb      	ldr	r3, [r7, #28]
 8010356:	3348      	adds	r3, #72	; 0x48
 8010358:	4618      	mov	r0, r3
 801035a:	f002 fd9d 	bl	8012e98 <pvPortMalloc>
 801035e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010360:	69bb      	ldr	r3, [r7, #24]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d011      	beq.n	801038a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010366:	69bb      	ldr	r3, [r7, #24]
 8010368:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	3348      	adds	r3, #72	; 0x48
 801036e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010370:	69bb      	ldr	r3, [r7, #24]
 8010372:	2200      	movs	r2, #0
 8010374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010378:	79fa      	ldrb	r2, [r7, #7]
 801037a:	69bb      	ldr	r3, [r7, #24]
 801037c:	9300      	str	r3, [sp, #0]
 801037e:	4613      	mov	r3, r2
 8010380:	697a      	ldr	r2, [r7, #20]
 8010382:	68b9      	ldr	r1, [r7, #8]
 8010384:	68f8      	ldr	r0, [r7, #12]
 8010386:	f000 f805 	bl	8010394 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801038a:	69bb      	ldr	r3, [r7, #24]
	}
 801038c:	4618      	mov	r0, r3
 801038e:	3720      	adds	r7, #32
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}

08010394 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b084      	sub	sp, #16
 8010398:	af00      	add	r7, sp, #0
 801039a:	60f8      	str	r0, [r7, #12]
 801039c:	60b9      	str	r1, [r7, #8]
 801039e:	607a      	str	r2, [r7, #4]
 80103a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d103      	bne.n	80103b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80103a8:	69bb      	ldr	r3, [r7, #24]
 80103aa:	69ba      	ldr	r2, [r7, #24]
 80103ac:	601a      	str	r2, [r3, #0]
 80103ae:	e002      	b.n	80103b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80103b0:	69bb      	ldr	r3, [r7, #24]
 80103b2:	687a      	ldr	r2, [r7, #4]
 80103b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80103b6:	69bb      	ldr	r3, [r7, #24]
 80103b8:	68fa      	ldr	r2, [r7, #12]
 80103ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80103bc:	69bb      	ldr	r3, [r7, #24]
 80103be:	68ba      	ldr	r2, [r7, #8]
 80103c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80103c2:	2101      	movs	r1, #1
 80103c4:	69b8      	ldr	r0, [r7, #24]
 80103c6:	f7ff fecb 	bl	8010160 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80103ca:	bf00      	nop
 80103cc:	3710      	adds	r7, #16
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}

080103d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80103d2:	b580      	push	{r7, lr}
 80103d4:	b082      	sub	sp, #8
 80103d6:	af00      	add	r7, sp, #0
 80103d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d00e      	beq.n	80103fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2200      	movs	r2, #0
 80103e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2200      	movs	r2, #0
 80103ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2200      	movs	r2, #0
 80103f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80103f2:	2300      	movs	r3, #0
 80103f4:	2200      	movs	r2, #0
 80103f6:	2100      	movs	r1, #0
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f000 f837 	bl	801046c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80103fe:	bf00      	nop
 8010400:	3708      	adds	r7, #8
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}

08010406 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010406:	b580      	push	{r7, lr}
 8010408:	b086      	sub	sp, #24
 801040a:	af00      	add	r7, sp, #0
 801040c:	4603      	mov	r3, r0
 801040e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010410:	2301      	movs	r3, #1
 8010412:	617b      	str	r3, [r7, #20]
 8010414:	2300      	movs	r3, #0
 8010416:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010418:	79fb      	ldrb	r3, [r7, #7]
 801041a:	461a      	mov	r2, r3
 801041c:	6939      	ldr	r1, [r7, #16]
 801041e:	6978      	ldr	r0, [r7, #20]
 8010420:	f7ff ff7e 	bl	8010320 <xQueueGenericCreate>
 8010424:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010426:	68f8      	ldr	r0, [r7, #12]
 8010428:	f7ff ffd3 	bl	80103d2 <prvInitialiseMutex>

		return xNewQueue;
 801042c:	68fb      	ldr	r3, [r7, #12]
	}
 801042e:	4618      	mov	r0, r3
 8010430:	3718      	adds	r7, #24
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}

08010436 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010436:	b580      	push	{r7, lr}
 8010438:	b088      	sub	sp, #32
 801043a:	af02      	add	r7, sp, #8
 801043c:	4603      	mov	r3, r0
 801043e:	6039      	str	r1, [r7, #0]
 8010440:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010442:	2301      	movs	r3, #1
 8010444:	617b      	str	r3, [r7, #20]
 8010446:	2300      	movs	r3, #0
 8010448:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801044a:	79fb      	ldrb	r3, [r7, #7]
 801044c:	9300      	str	r3, [sp, #0]
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	2200      	movs	r2, #0
 8010452:	6939      	ldr	r1, [r7, #16]
 8010454:	6978      	ldr	r0, [r7, #20]
 8010456:	f7ff feeb 	bl	8010230 <xQueueGenericCreateStatic>
 801045a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801045c:	68f8      	ldr	r0, [r7, #12]
 801045e:	f7ff ffb8 	bl	80103d2 <prvInitialiseMutex>

		return xNewQueue;
 8010462:	68fb      	ldr	r3, [r7, #12]
	}
 8010464:	4618      	mov	r0, r3
 8010466:	3718      	adds	r7, #24
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}

0801046c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b08e      	sub	sp, #56	; 0x38
 8010470:	af00      	add	r7, sp, #0
 8010472:	60f8      	str	r0, [r7, #12]
 8010474:	60b9      	str	r1, [r7, #8]
 8010476:	607a      	str	r2, [r7, #4]
 8010478:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801047a:	2300      	movs	r3, #0
 801047c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010484:	2b00      	cmp	r3, #0
 8010486:	d10a      	bne.n	801049e <xQueueGenericSend+0x32>
	__asm volatile
 8010488:	f04f 0350 	mov.w	r3, #80	; 0x50
 801048c:	f383 8811 	msr	BASEPRI, r3
 8010490:	f3bf 8f6f 	isb	sy
 8010494:	f3bf 8f4f 	dsb	sy
 8010498:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801049a:	bf00      	nop
 801049c:	e7fe      	b.n	801049c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d103      	bne.n	80104ac <xQueueGenericSend+0x40>
 80104a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d101      	bne.n	80104b0 <xQueueGenericSend+0x44>
 80104ac:	2301      	movs	r3, #1
 80104ae:	e000      	b.n	80104b2 <xQueueGenericSend+0x46>
 80104b0:	2300      	movs	r3, #0
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d10a      	bne.n	80104cc <xQueueGenericSend+0x60>
	__asm volatile
 80104b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ba:	f383 8811 	msr	BASEPRI, r3
 80104be:	f3bf 8f6f 	isb	sy
 80104c2:	f3bf 8f4f 	dsb	sy
 80104c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80104c8:	bf00      	nop
 80104ca:	e7fe      	b.n	80104ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	2b02      	cmp	r3, #2
 80104d0:	d103      	bne.n	80104da <xQueueGenericSend+0x6e>
 80104d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104d6:	2b01      	cmp	r3, #1
 80104d8:	d101      	bne.n	80104de <xQueueGenericSend+0x72>
 80104da:	2301      	movs	r3, #1
 80104dc:	e000      	b.n	80104e0 <xQueueGenericSend+0x74>
 80104de:	2300      	movs	r3, #0
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d10a      	bne.n	80104fa <xQueueGenericSend+0x8e>
	__asm volatile
 80104e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e8:	f383 8811 	msr	BASEPRI, r3
 80104ec:	f3bf 8f6f 	isb	sy
 80104f0:	f3bf 8f4f 	dsb	sy
 80104f4:	623b      	str	r3, [r7, #32]
}
 80104f6:	bf00      	nop
 80104f8:	e7fe      	b.n	80104f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80104fa:	f001 fc37 	bl	8011d6c <xTaskGetSchedulerState>
 80104fe:	4603      	mov	r3, r0
 8010500:	2b00      	cmp	r3, #0
 8010502:	d102      	bne.n	801050a <xQueueGenericSend+0x9e>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d101      	bne.n	801050e <xQueueGenericSend+0xa2>
 801050a:	2301      	movs	r3, #1
 801050c:	e000      	b.n	8010510 <xQueueGenericSend+0xa4>
 801050e:	2300      	movs	r3, #0
 8010510:	2b00      	cmp	r3, #0
 8010512:	d10a      	bne.n	801052a <xQueueGenericSend+0xbe>
	__asm volatile
 8010514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010518:	f383 8811 	msr	BASEPRI, r3
 801051c:	f3bf 8f6f 	isb	sy
 8010520:	f3bf 8f4f 	dsb	sy
 8010524:	61fb      	str	r3, [r7, #28]
}
 8010526:	bf00      	nop
 8010528:	e7fe      	b.n	8010528 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801052a:	f002 fb93 	bl	8012c54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801052e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010536:	429a      	cmp	r2, r3
 8010538:	d302      	bcc.n	8010540 <xQueueGenericSend+0xd4>
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	2b02      	cmp	r3, #2
 801053e:	d129      	bne.n	8010594 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010540:	683a      	ldr	r2, [r7, #0]
 8010542:	68b9      	ldr	r1, [r7, #8]
 8010544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010546:	f000 fc5e 	bl	8010e06 <prvCopyDataToQueue>
 801054a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801054c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801054e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010550:	2b00      	cmp	r3, #0
 8010552:	d010      	beq.n	8010576 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010556:	3324      	adds	r3, #36	; 0x24
 8010558:	4618      	mov	r0, r3
 801055a:	f001 fa4b 	bl	80119f4 <xTaskRemoveFromEventList>
 801055e:	4603      	mov	r3, r0
 8010560:	2b00      	cmp	r3, #0
 8010562:	d013      	beq.n	801058c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010564:	4b3f      	ldr	r3, [pc, #252]	; (8010664 <xQueueGenericSend+0x1f8>)
 8010566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801056a:	601a      	str	r2, [r3, #0]
 801056c:	f3bf 8f4f 	dsb	sy
 8010570:	f3bf 8f6f 	isb	sy
 8010574:	e00a      	b.n	801058c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010578:	2b00      	cmp	r3, #0
 801057a:	d007      	beq.n	801058c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801057c:	4b39      	ldr	r3, [pc, #228]	; (8010664 <xQueueGenericSend+0x1f8>)
 801057e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010582:	601a      	str	r2, [r3, #0]
 8010584:	f3bf 8f4f 	dsb	sy
 8010588:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801058c:	f002 fb92 	bl	8012cb4 <vPortExitCritical>
				return pdPASS;
 8010590:	2301      	movs	r3, #1
 8010592:	e063      	b.n	801065c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d103      	bne.n	80105a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801059a:	f002 fb8b 	bl	8012cb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801059e:	2300      	movs	r3, #0
 80105a0:	e05c      	b.n	801065c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80105a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d106      	bne.n	80105b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80105a8:	f107 0314 	add.w	r3, r7, #20
 80105ac:	4618      	mov	r0, r3
 80105ae:	f001 fa83 	bl	8011ab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80105b2:	2301      	movs	r3, #1
 80105b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80105b6:	f002 fb7d 	bl	8012cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80105ba:	f000 ffeb 	bl	8011594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80105be:	f002 fb49 	bl	8012c54 <vPortEnterCritical>
 80105c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80105c8:	b25b      	sxtb	r3, r3
 80105ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105ce:	d103      	bne.n	80105d8 <xQueueGenericSend+0x16c>
 80105d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d2:	2200      	movs	r2, #0
 80105d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80105d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80105de:	b25b      	sxtb	r3, r3
 80105e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105e4:	d103      	bne.n	80105ee <xQueueGenericSend+0x182>
 80105e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e8:	2200      	movs	r2, #0
 80105ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80105ee:	f002 fb61 	bl	8012cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80105f2:	1d3a      	adds	r2, r7, #4
 80105f4:	f107 0314 	add.w	r3, r7, #20
 80105f8:	4611      	mov	r1, r2
 80105fa:	4618      	mov	r0, r3
 80105fc:	f001 fa72 	bl	8011ae4 <xTaskCheckForTimeOut>
 8010600:	4603      	mov	r3, r0
 8010602:	2b00      	cmp	r3, #0
 8010604:	d124      	bne.n	8010650 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010608:	f000 fcf5 	bl	8010ff6 <prvIsQueueFull>
 801060c:	4603      	mov	r3, r0
 801060e:	2b00      	cmp	r3, #0
 8010610:	d018      	beq.n	8010644 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010614:	3310      	adds	r3, #16
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	4611      	mov	r1, r2
 801061a:	4618      	mov	r0, r3
 801061c:	f001 f99a 	bl	8011954 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010622:	f000 fc80 	bl	8010f26 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010626:	f000 ffc3 	bl	80115b0 <xTaskResumeAll>
 801062a:	4603      	mov	r3, r0
 801062c:	2b00      	cmp	r3, #0
 801062e:	f47f af7c 	bne.w	801052a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010632:	4b0c      	ldr	r3, [pc, #48]	; (8010664 <xQueueGenericSend+0x1f8>)
 8010634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010638:	601a      	str	r2, [r3, #0]
 801063a:	f3bf 8f4f 	dsb	sy
 801063e:	f3bf 8f6f 	isb	sy
 8010642:	e772      	b.n	801052a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010646:	f000 fc6e 	bl	8010f26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801064a:	f000 ffb1 	bl	80115b0 <xTaskResumeAll>
 801064e:	e76c      	b.n	801052a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010652:	f000 fc68 	bl	8010f26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010656:	f000 ffab 	bl	80115b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801065a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801065c:	4618      	mov	r0, r3
 801065e:	3738      	adds	r7, #56	; 0x38
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}
 8010664:	e000ed04 	.word	0xe000ed04

08010668 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b090      	sub	sp, #64	; 0x40
 801066c:	af00      	add	r7, sp, #0
 801066e:	60f8      	str	r0, [r7, #12]
 8010670:	60b9      	str	r1, [r7, #8]
 8010672:	607a      	str	r2, [r7, #4]
 8010674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801067a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801067c:	2b00      	cmp	r3, #0
 801067e:	d10a      	bne.n	8010696 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010684:	f383 8811 	msr	BASEPRI, r3
 8010688:	f3bf 8f6f 	isb	sy
 801068c:	f3bf 8f4f 	dsb	sy
 8010690:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010692:	bf00      	nop
 8010694:	e7fe      	b.n	8010694 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d103      	bne.n	80106a4 <xQueueGenericSendFromISR+0x3c>
 801069c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d101      	bne.n	80106a8 <xQueueGenericSendFromISR+0x40>
 80106a4:	2301      	movs	r3, #1
 80106a6:	e000      	b.n	80106aa <xQueueGenericSendFromISR+0x42>
 80106a8:	2300      	movs	r3, #0
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d10a      	bne.n	80106c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80106ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b2:	f383 8811 	msr	BASEPRI, r3
 80106b6:	f3bf 8f6f 	isb	sy
 80106ba:	f3bf 8f4f 	dsb	sy
 80106be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80106c0:	bf00      	nop
 80106c2:	e7fe      	b.n	80106c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	2b02      	cmp	r3, #2
 80106c8:	d103      	bne.n	80106d2 <xQueueGenericSendFromISR+0x6a>
 80106ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106ce:	2b01      	cmp	r3, #1
 80106d0:	d101      	bne.n	80106d6 <xQueueGenericSendFromISR+0x6e>
 80106d2:	2301      	movs	r3, #1
 80106d4:	e000      	b.n	80106d8 <xQueueGenericSendFromISR+0x70>
 80106d6:	2300      	movs	r3, #0
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d10a      	bne.n	80106f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80106dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e0:	f383 8811 	msr	BASEPRI, r3
 80106e4:	f3bf 8f6f 	isb	sy
 80106e8:	f3bf 8f4f 	dsb	sy
 80106ec:	623b      	str	r3, [r7, #32]
}
 80106ee:	bf00      	nop
 80106f0:	e7fe      	b.n	80106f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80106f2:	f002 fb91 	bl	8012e18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80106f6:	f3ef 8211 	mrs	r2, BASEPRI
 80106fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fe:	f383 8811 	msr	BASEPRI, r3
 8010702:	f3bf 8f6f 	isb	sy
 8010706:	f3bf 8f4f 	dsb	sy
 801070a:	61fa      	str	r2, [r7, #28]
 801070c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801070e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010710:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801071a:	429a      	cmp	r2, r3
 801071c:	d302      	bcc.n	8010724 <xQueueGenericSendFromISR+0xbc>
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	2b02      	cmp	r3, #2
 8010722:	d12f      	bne.n	8010784 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801072a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801072e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010732:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010734:	683a      	ldr	r2, [r7, #0]
 8010736:	68b9      	ldr	r1, [r7, #8]
 8010738:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801073a:	f000 fb64 	bl	8010e06 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801073e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010746:	d112      	bne.n	801076e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801074a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801074c:	2b00      	cmp	r3, #0
 801074e:	d016      	beq.n	801077e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010752:	3324      	adds	r3, #36	; 0x24
 8010754:	4618      	mov	r0, r3
 8010756:	f001 f94d 	bl	80119f4 <xTaskRemoveFromEventList>
 801075a:	4603      	mov	r3, r0
 801075c:	2b00      	cmp	r3, #0
 801075e:	d00e      	beq.n	801077e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d00b      	beq.n	801077e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2201      	movs	r2, #1
 801076a:	601a      	str	r2, [r3, #0]
 801076c:	e007      	b.n	801077e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801076e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010772:	3301      	adds	r3, #1
 8010774:	b2db      	uxtb	r3, r3
 8010776:	b25a      	sxtb	r2, r3
 8010778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801077a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801077e:	2301      	movs	r3, #1
 8010780:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010782:	e001      	b.n	8010788 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010784:	2300      	movs	r3, #0
 8010786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801078a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010792:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010796:	4618      	mov	r0, r3
 8010798:	3740      	adds	r7, #64	; 0x40
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}

0801079e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801079e:	b580      	push	{r7, lr}
 80107a0:	b08e      	sub	sp, #56	; 0x38
 80107a2:	af00      	add	r7, sp, #0
 80107a4:	6078      	str	r0, [r7, #4]
 80107a6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80107ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d10a      	bne.n	80107c8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80107b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b6:	f383 8811 	msr	BASEPRI, r3
 80107ba:	f3bf 8f6f 	isb	sy
 80107be:	f3bf 8f4f 	dsb	sy
 80107c2:	623b      	str	r3, [r7, #32]
}
 80107c4:	bf00      	nop
 80107c6:	e7fe      	b.n	80107c6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80107c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d00a      	beq.n	80107e6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80107d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d4:	f383 8811 	msr	BASEPRI, r3
 80107d8:	f3bf 8f6f 	isb	sy
 80107dc:	f3bf 8f4f 	dsb	sy
 80107e0:	61fb      	str	r3, [r7, #28]
}
 80107e2:	bf00      	nop
 80107e4:	e7fe      	b.n	80107e4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80107e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d103      	bne.n	80107f6 <xQueueGiveFromISR+0x58>
 80107ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f0:	689b      	ldr	r3, [r3, #8]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d101      	bne.n	80107fa <xQueueGiveFromISR+0x5c>
 80107f6:	2301      	movs	r3, #1
 80107f8:	e000      	b.n	80107fc <xQueueGiveFromISR+0x5e>
 80107fa:	2300      	movs	r3, #0
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d10a      	bne.n	8010816 <xQueueGiveFromISR+0x78>
	__asm volatile
 8010800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010804:	f383 8811 	msr	BASEPRI, r3
 8010808:	f3bf 8f6f 	isb	sy
 801080c:	f3bf 8f4f 	dsb	sy
 8010810:	61bb      	str	r3, [r7, #24]
}
 8010812:	bf00      	nop
 8010814:	e7fe      	b.n	8010814 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010816:	f002 faff 	bl	8012e18 <vPortValidateInterruptPriority>
	__asm volatile
 801081a:	f3ef 8211 	mrs	r2, BASEPRI
 801081e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010822:	f383 8811 	msr	BASEPRI, r3
 8010826:	f3bf 8f6f 	isb	sy
 801082a:	f3bf 8f4f 	dsb	sy
 801082e:	617a      	str	r2, [r7, #20]
 8010830:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010832:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010834:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801083a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801083c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801083e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010842:	429a      	cmp	r2, r3
 8010844:	d22b      	bcs.n	801089e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801084c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010852:	1c5a      	adds	r2, r3, #1
 8010854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010856:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010858:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801085c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010860:	d112      	bne.n	8010888 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010866:	2b00      	cmp	r3, #0
 8010868:	d016      	beq.n	8010898 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801086a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801086c:	3324      	adds	r3, #36	; 0x24
 801086e:	4618      	mov	r0, r3
 8010870:	f001 f8c0 	bl	80119f4 <xTaskRemoveFromEventList>
 8010874:	4603      	mov	r3, r0
 8010876:	2b00      	cmp	r3, #0
 8010878:	d00e      	beq.n	8010898 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d00b      	beq.n	8010898 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	2201      	movs	r2, #1
 8010884:	601a      	str	r2, [r3, #0]
 8010886:	e007      	b.n	8010898 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801088c:	3301      	adds	r3, #1
 801088e:	b2db      	uxtb	r3, r3
 8010890:	b25a      	sxtb	r2, r3
 8010892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010898:	2301      	movs	r3, #1
 801089a:	637b      	str	r3, [r7, #52]	; 0x34
 801089c:	e001      	b.n	80108a2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801089e:	2300      	movs	r3, #0
 80108a0:	637b      	str	r3, [r7, #52]	; 0x34
 80108a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	f383 8811 	msr	BASEPRI, r3
}
 80108ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80108ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80108b0:	4618      	mov	r0, r3
 80108b2:	3738      	adds	r7, #56	; 0x38
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}

080108b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b08c      	sub	sp, #48	; 0x30
 80108bc:	af00      	add	r7, sp, #0
 80108be:	60f8      	str	r0, [r7, #12]
 80108c0:	60b9      	str	r1, [r7, #8]
 80108c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80108c4:	2300      	movs	r3, #0
 80108c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80108cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d10a      	bne.n	80108e8 <xQueueReceive+0x30>
	__asm volatile
 80108d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108d6:	f383 8811 	msr	BASEPRI, r3
 80108da:	f3bf 8f6f 	isb	sy
 80108de:	f3bf 8f4f 	dsb	sy
 80108e2:	623b      	str	r3, [r7, #32]
}
 80108e4:	bf00      	nop
 80108e6:	e7fe      	b.n	80108e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d103      	bne.n	80108f6 <xQueueReceive+0x3e>
 80108ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d101      	bne.n	80108fa <xQueueReceive+0x42>
 80108f6:	2301      	movs	r3, #1
 80108f8:	e000      	b.n	80108fc <xQueueReceive+0x44>
 80108fa:	2300      	movs	r3, #0
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d10a      	bne.n	8010916 <xQueueReceive+0x5e>
	__asm volatile
 8010900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010904:	f383 8811 	msr	BASEPRI, r3
 8010908:	f3bf 8f6f 	isb	sy
 801090c:	f3bf 8f4f 	dsb	sy
 8010910:	61fb      	str	r3, [r7, #28]
}
 8010912:	bf00      	nop
 8010914:	e7fe      	b.n	8010914 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010916:	f001 fa29 	bl	8011d6c <xTaskGetSchedulerState>
 801091a:	4603      	mov	r3, r0
 801091c:	2b00      	cmp	r3, #0
 801091e:	d102      	bne.n	8010926 <xQueueReceive+0x6e>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d101      	bne.n	801092a <xQueueReceive+0x72>
 8010926:	2301      	movs	r3, #1
 8010928:	e000      	b.n	801092c <xQueueReceive+0x74>
 801092a:	2300      	movs	r3, #0
 801092c:	2b00      	cmp	r3, #0
 801092e:	d10a      	bne.n	8010946 <xQueueReceive+0x8e>
	__asm volatile
 8010930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010934:	f383 8811 	msr	BASEPRI, r3
 8010938:	f3bf 8f6f 	isb	sy
 801093c:	f3bf 8f4f 	dsb	sy
 8010940:	61bb      	str	r3, [r7, #24]
}
 8010942:	bf00      	nop
 8010944:	e7fe      	b.n	8010944 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010946:	f002 f985 	bl	8012c54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801094a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801094e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010952:	2b00      	cmp	r3, #0
 8010954:	d01f      	beq.n	8010996 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010956:	68b9      	ldr	r1, [r7, #8]
 8010958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801095a:	f000 fabe 	bl	8010eda <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010960:	1e5a      	subs	r2, r3, #1
 8010962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010964:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010968:	691b      	ldr	r3, [r3, #16]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d00f      	beq.n	801098e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801096e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010970:	3310      	adds	r3, #16
 8010972:	4618      	mov	r0, r3
 8010974:	f001 f83e 	bl	80119f4 <xTaskRemoveFromEventList>
 8010978:	4603      	mov	r3, r0
 801097a:	2b00      	cmp	r3, #0
 801097c:	d007      	beq.n	801098e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801097e:	4b3d      	ldr	r3, [pc, #244]	; (8010a74 <xQueueReceive+0x1bc>)
 8010980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010984:	601a      	str	r2, [r3, #0]
 8010986:	f3bf 8f4f 	dsb	sy
 801098a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801098e:	f002 f991 	bl	8012cb4 <vPortExitCritical>
				return pdPASS;
 8010992:	2301      	movs	r3, #1
 8010994:	e069      	b.n	8010a6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d103      	bne.n	80109a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801099c:	f002 f98a 	bl	8012cb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80109a0:	2300      	movs	r3, #0
 80109a2:	e062      	b.n	8010a6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80109a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d106      	bne.n	80109b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80109aa:	f107 0310 	add.w	r3, r7, #16
 80109ae:	4618      	mov	r0, r3
 80109b0:	f001 f882 	bl	8011ab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80109b4:	2301      	movs	r3, #1
 80109b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80109b8:	f002 f97c 	bl	8012cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80109bc:	f000 fdea 	bl	8011594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80109c0:	f002 f948 	bl	8012c54 <vPortEnterCritical>
 80109c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80109ca:	b25b      	sxtb	r3, r3
 80109cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109d0:	d103      	bne.n	80109da <xQueueReceive+0x122>
 80109d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109d4:	2200      	movs	r2, #0
 80109d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80109da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80109e0:	b25b      	sxtb	r3, r3
 80109e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109e6:	d103      	bne.n	80109f0 <xQueueReceive+0x138>
 80109e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ea:	2200      	movs	r2, #0
 80109ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80109f0:	f002 f960 	bl	8012cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80109f4:	1d3a      	adds	r2, r7, #4
 80109f6:	f107 0310 	add.w	r3, r7, #16
 80109fa:	4611      	mov	r1, r2
 80109fc:	4618      	mov	r0, r3
 80109fe:	f001 f871 	bl	8011ae4 <xTaskCheckForTimeOut>
 8010a02:	4603      	mov	r3, r0
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d123      	bne.n	8010a50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a0a:	f000 fade 	bl	8010fca <prvIsQueueEmpty>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d017      	beq.n	8010a44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a16:	3324      	adds	r3, #36	; 0x24
 8010a18:	687a      	ldr	r2, [r7, #4]
 8010a1a:	4611      	mov	r1, r2
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f000 ff99 	bl	8011954 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a24:	f000 fa7f 	bl	8010f26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010a28:	f000 fdc2 	bl	80115b0 <xTaskResumeAll>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d189      	bne.n	8010946 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010a32:	4b10      	ldr	r3, [pc, #64]	; (8010a74 <xQueueReceive+0x1bc>)
 8010a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a38:	601a      	str	r2, [r3, #0]
 8010a3a:	f3bf 8f4f 	dsb	sy
 8010a3e:	f3bf 8f6f 	isb	sy
 8010a42:	e780      	b.n	8010946 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a46:	f000 fa6e 	bl	8010f26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010a4a:	f000 fdb1 	bl	80115b0 <xTaskResumeAll>
 8010a4e:	e77a      	b.n	8010946 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a52:	f000 fa68 	bl	8010f26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010a56:	f000 fdab 	bl	80115b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a5c:	f000 fab5 	bl	8010fca <prvIsQueueEmpty>
 8010a60:	4603      	mov	r3, r0
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	f43f af6f 	beq.w	8010946 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010a68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3730      	adds	r7, #48	; 0x30
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}
 8010a72:	bf00      	nop
 8010a74:	e000ed04 	.word	0xe000ed04

08010a78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b08e      	sub	sp, #56	; 0x38
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010a82:	2300      	movs	r3, #0
 8010a84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d10a      	bne.n	8010aaa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a98:	f383 8811 	msr	BASEPRI, r3
 8010a9c:	f3bf 8f6f 	isb	sy
 8010aa0:	f3bf 8f4f 	dsb	sy
 8010aa4:	623b      	str	r3, [r7, #32]
}
 8010aa6:	bf00      	nop
 8010aa8:	e7fe      	b.n	8010aa8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d00a      	beq.n	8010ac8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab6:	f383 8811 	msr	BASEPRI, r3
 8010aba:	f3bf 8f6f 	isb	sy
 8010abe:	f3bf 8f4f 	dsb	sy
 8010ac2:	61fb      	str	r3, [r7, #28]
}
 8010ac4:	bf00      	nop
 8010ac6:	e7fe      	b.n	8010ac6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ac8:	f001 f950 	bl	8011d6c <xTaskGetSchedulerState>
 8010acc:	4603      	mov	r3, r0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d102      	bne.n	8010ad8 <xQueueSemaphoreTake+0x60>
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d101      	bne.n	8010adc <xQueueSemaphoreTake+0x64>
 8010ad8:	2301      	movs	r3, #1
 8010ada:	e000      	b.n	8010ade <xQueueSemaphoreTake+0x66>
 8010adc:	2300      	movs	r3, #0
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d10a      	bne.n	8010af8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae6:	f383 8811 	msr	BASEPRI, r3
 8010aea:	f3bf 8f6f 	isb	sy
 8010aee:	f3bf 8f4f 	dsb	sy
 8010af2:	61bb      	str	r3, [r7, #24]
}
 8010af4:	bf00      	nop
 8010af6:	e7fe      	b.n	8010af6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010af8:	f002 f8ac 	bl	8012c54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b00:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d024      	beq.n	8010b52 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b0a:	1e5a      	subs	r2, r3, #1
 8010b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b0e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d104      	bne.n	8010b22 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010b18:	f001 fad0 	bl	80120bc <pvTaskIncrementMutexHeldCount>
 8010b1c:	4602      	mov	r2, r0
 8010b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b20:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b24:	691b      	ldr	r3, [r3, #16]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d00f      	beq.n	8010b4a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b2c:	3310      	adds	r3, #16
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f000 ff60 	bl	80119f4 <xTaskRemoveFromEventList>
 8010b34:	4603      	mov	r3, r0
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d007      	beq.n	8010b4a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010b3a:	4b54      	ldr	r3, [pc, #336]	; (8010c8c <xQueueSemaphoreTake+0x214>)
 8010b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b40:	601a      	str	r2, [r3, #0]
 8010b42:	f3bf 8f4f 	dsb	sy
 8010b46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010b4a:	f002 f8b3 	bl	8012cb4 <vPortExitCritical>
				return pdPASS;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	e097      	b.n	8010c82 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b52:	683b      	ldr	r3, [r7, #0]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d111      	bne.n	8010b7c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d00a      	beq.n	8010b74 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b62:	f383 8811 	msr	BASEPRI, r3
 8010b66:	f3bf 8f6f 	isb	sy
 8010b6a:	f3bf 8f4f 	dsb	sy
 8010b6e:	617b      	str	r3, [r7, #20]
}
 8010b70:	bf00      	nop
 8010b72:	e7fe      	b.n	8010b72 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010b74:	f002 f89e 	bl	8012cb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	e082      	b.n	8010c82 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d106      	bne.n	8010b90 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b82:	f107 030c 	add.w	r3, r7, #12
 8010b86:	4618      	mov	r0, r3
 8010b88:	f000 ff96 	bl	8011ab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010b90:	f002 f890 	bl	8012cb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010b94:	f000 fcfe 	bl	8011594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b98:	f002 f85c 	bl	8012c54 <vPortEnterCritical>
 8010b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ba2:	b25b      	sxtb	r3, r3
 8010ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ba8:	d103      	bne.n	8010bb2 <xQueueSemaphoreTake+0x13a>
 8010baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bac:	2200      	movs	r2, #0
 8010bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bb8:	b25b      	sxtb	r3, r3
 8010bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bbe:	d103      	bne.n	8010bc8 <xQueueSemaphoreTake+0x150>
 8010bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010bc8:	f002 f874 	bl	8012cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010bcc:	463a      	mov	r2, r7
 8010bce:	f107 030c 	add.w	r3, r7, #12
 8010bd2:	4611      	mov	r1, r2
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f000 ff85 	bl	8011ae4 <xTaskCheckForTimeOut>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d132      	bne.n	8010c46 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010be0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010be2:	f000 f9f2 	bl	8010fca <prvIsQueueEmpty>
 8010be6:	4603      	mov	r3, r0
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d026      	beq.n	8010c3a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d109      	bne.n	8010c08 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010bf4:	f002 f82e 	bl	8012c54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bfa:	689b      	ldr	r3, [r3, #8]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f001 f8d3 	bl	8011da8 <xTaskPriorityInherit>
 8010c02:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010c04:	f002 f856 	bl	8012cb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c0a:	3324      	adds	r3, #36	; 0x24
 8010c0c:	683a      	ldr	r2, [r7, #0]
 8010c0e:	4611      	mov	r1, r2
 8010c10:	4618      	mov	r0, r3
 8010c12:	f000 fe9f 	bl	8011954 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010c16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c18:	f000 f985 	bl	8010f26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010c1c:	f000 fcc8 	bl	80115b0 <xTaskResumeAll>
 8010c20:	4603      	mov	r3, r0
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	f47f af68 	bne.w	8010af8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010c28:	4b18      	ldr	r3, [pc, #96]	; (8010c8c <xQueueSemaphoreTake+0x214>)
 8010c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c2e:	601a      	str	r2, [r3, #0]
 8010c30:	f3bf 8f4f 	dsb	sy
 8010c34:	f3bf 8f6f 	isb	sy
 8010c38:	e75e      	b.n	8010af8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010c3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c3c:	f000 f973 	bl	8010f26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c40:	f000 fcb6 	bl	80115b0 <xTaskResumeAll>
 8010c44:	e758      	b.n	8010af8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010c46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c48:	f000 f96d 	bl	8010f26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c4c:	f000 fcb0 	bl	80115b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c52:	f000 f9ba 	bl	8010fca <prvIsQueueEmpty>
 8010c56:	4603      	mov	r3, r0
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	f43f af4d 	beq.w	8010af8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d00d      	beq.n	8010c80 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010c64:	f001 fff6 	bl	8012c54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010c68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c6a:	f000 f8b4 	bl	8010dd6 <prvGetDisinheritPriorityAfterTimeout>
 8010c6e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c72:	689b      	ldr	r3, [r3, #8]
 8010c74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c76:	4618      	mov	r0, r3
 8010c78:	f001 f992 	bl	8011fa0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010c7c:	f002 f81a 	bl	8012cb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010c80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3738      	adds	r7, #56	; 0x38
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	e000ed04 	.word	0xe000ed04

08010c90 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b08e      	sub	sp, #56	; 0x38
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	60f8      	str	r0, [r7, #12]
 8010c98:	60b9      	str	r1, [r7, #8]
 8010c9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d10a      	bne.n	8010cbc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010caa:	f383 8811 	msr	BASEPRI, r3
 8010cae:	f3bf 8f6f 	isb	sy
 8010cb2:	f3bf 8f4f 	dsb	sy
 8010cb6:	623b      	str	r3, [r7, #32]
}
 8010cb8:	bf00      	nop
 8010cba:	e7fe      	b.n	8010cba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d103      	bne.n	8010cca <xQueueReceiveFromISR+0x3a>
 8010cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d101      	bne.n	8010cce <xQueueReceiveFromISR+0x3e>
 8010cca:	2301      	movs	r3, #1
 8010ccc:	e000      	b.n	8010cd0 <xQueueReceiveFromISR+0x40>
 8010cce:	2300      	movs	r3, #0
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d10a      	bne.n	8010cea <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd8:	f383 8811 	msr	BASEPRI, r3
 8010cdc:	f3bf 8f6f 	isb	sy
 8010ce0:	f3bf 8f4f 	dsb	sy
 8010ce4:	61fb      	str	r3, [r7, #28]
}
 8010ce6:	bf00      	nop
 8010ce8:	e7fe      	b.n	8010ce8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010cea:	f002 f895 	bl	8012e18 <vPortValidateInterruptPriority>
	__asm volatile
 8010cee:	f3ef 8211 	mrs	r2, BASEPRI
 8010cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf6:	f383 8811 	msr	BASEPRI, r3
 8010cfa:	f3bf 8f6f 	isb	sy
 8010cfe:	f3bf 8f4f 	dsb	sy
 8010d02:	61ba      	str	r2, [r7, #24]
 8010d04:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010d06:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010d08:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d0e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d02f      	beq.n	8010d76 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010d20:	68b9      	ldr	r1, [r7, #8]
 8010d22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d24:	f000 f8d9 	bl	8010eda <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d2a:	1e5a      	subs	r2, r3, #1
 8010d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d2e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010d30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d38:	d112      	bne.n	8010d60 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d3c:	691b      	ldr	r3, [r3, #16]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d016      	beq.n	8010d70 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d44:	3310      	adds	r3, #16
 8010d46:	4618      	mov	r0, r3
 8010d48:	f000 fe54 	bl	80119f4 <xTaskRemoveFromEventList>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d00e      	beq.n	8010d70 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d00b      	beq.n	8010d70 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2201      	movs	r2, #1
 8010d5c:	601a      	str	r2, [r3, #0]
 8010d5e:	e007      	b.n	8010d70 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010d60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d64:	3301      	adds	r3, #1
 8010d66:	b2db      	uxtb	r3, r3
 8010d68:	b25a      	sxtb	r2, r3
 8010d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010d70:	2301      	movs	r3, #1
 8010d72:	637b      	str	r3, [r7, #52]	; 0x34
 8010d74:	e001      	b.n	8010d7a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010d76:	2300      	movs	r3, #0
 8010d78:	637b      	str	r3, [r7, #52]	; 0x34
 8010d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d7c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	f383 8811 	msr	BASEPRI, r3
}
 8010d84:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3738      	adds	r7, #56	; 0x38
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}

08010d90 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b084      	sub	sp, #16
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d10a      	bne.n	8010db8 <vQueueDelete+0x28>
	__asm volatile
 8010da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da6:	f383 8811 	msr	BASEPRI, r3
 8010daa:	f3bf 8f6f 	isb	sy
 8010dae:	f3bf 8f4f 	dsb	sy
 8010db2:	60bb      	str	r3, [r7, #8]
}
 8010db4:	bf00      	nop
 8010db6:	e7fe      	b.n	8010db6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010db8:	68f8      	ldr	r0, [r7, #12]
 8010dba:	f000 f95f 	bl	801107c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d102      	bne.n	8010dce <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010dc8:	68f8      	ldr	r0, [r7, #12]
 8010dca:	f002 f931 	bl	8013030 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010dce:	bf00      	nop
 8010dd0:	3710      	adds	r7, #16
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	bd80      	pop	{r7, pc}

08010dd6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010dd6:	b480      	push	{r7}
 8010dd8:	b085      	sub	sp, #20
 8010dda:	af00      	add	r7, sp, #0
 8010ddc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d006      	beq.n	8010df4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	f1c3 0307 	rsb	r3, r3, #7
 8010df0:	60fb      	str	r3, [r7, #12]
 8010df2:	e001      	b.n	8010df8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010df4:	2300      	movs	r3, #0
 8010df6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010df8:	68fb      	ldr	r3, [r7, #12]
	}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3714      	adds	r7, #20
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e04:	4770      	bx	lr

08010e06 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010e06:	b580      	push	{r7, lr}
 8010e08:	b086      	sub	sp, #24
 8010e0a:	af00      	add	r7, sp, #0
 8010e0c:	60f8      	str	r0, [r7, #12]
 8010e0e:	60b9      	str	r1, [r7, #8]
 8010e10:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010e12:	2300      	movs	r3, #0
 8010e14:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e1a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d10d      	bne.n	8010e40 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d14d      	bne.n	8010ec8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	689b      	ldr	r3, [r3, #8]
 8010e30:	4618      	mov	r0, r3
 8010e32:	f001 f82f 	bl	8011e94 <xTaskPriorityDisinherit>
 8010e36:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	609a      	str	r2, [r3, #8]
 8010e3e:	e043      	b.n	8010ec8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d119      	bne.n	8010e7a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	6858      	ldr	r0, [r3, #4]
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e4e:	461a      	mov	r2, r3
 8010e50:	68b9      	ldr	r1, [r7, #8]
 8010e52:	f002 fdd2 	bl	80139fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	685a      	ldr	r2, [r3, #4]
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e5e:	441a      	add	r2, r3
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	685a      	ldr	r2, [r3, #4]
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	689b      	ldr	r3, [r3, #8]
 8010e6c:	429a      	cmp	r2, r3
 8010e6e:	d32b      	bcc.n	8010ec8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	681a      	ldr	r2, [r3, #0]
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	605a      	str	r2, [r3, #4]
 8010e78:	e026      	b.n	8010ec8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	68d8      	ldr	r0, [r3, #12]
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e82:	461a      	mov	r2, r3
 8010e84:	68b9      	ldr	r1, [r7, #8]
 8010e86:	f002 fdb8 	bl	80139fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	68da      	ldr	r2, [r3, #12]
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e92:	425b      	negs	r3, r3
 8010e94:	441a      	add	r2, r3
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	68da      	ldr	r2, [r3, #12]
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d207      	bcs.n	8010eb6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	689a      	ldr	r2, [r3, #8]
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eae:	425b      	negs	r3, r3
 8010eb0:	441a      	add	r2, r3
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2b02      	cmp	r3, #2
 8010eba:	d105      	bne.n	8010ec8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d002      	beq.n	8010ec8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	3b01      	subs	r3, #1
 8010ec6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010ec8:	693b      	ldr	r3, [r7, #16]
 8010eca:	1c5a      	adds	r2, r3, #1
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010ed0:	697b      	ldr	r3, [r7, #20]
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3718      	adds	r7, #24
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}

08010eda <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010eda:	b580      	push	{r7, lr}
 8010edc:	b082      	sub	sp, #8
 8010ede:	af00      	add	r7, sp, #0
 8010ee0:	6078      	str	r0, [r7, #4]
 8010ee2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d018      	beq.n	8010f1e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	68da      	ldr	r2, [r3, #12]
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ef4:	441a      	add	r2, r3
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	68da      	ldr	r2, [r3, #12]
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	689b      	ldr	r3, [r3, #8]
 8010f02:	429a      	cmp	r2, r3
 8010f04:	d303      	bcc.n	8010f0e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681a      	ldr	r2, [r3, #0]
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	68d9      	ldr	r1, [r3, #12]
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f16:	461a      	mov	r2, r3
 8010f18:	6838      	ldr	r0, [r7, #0]
 8010f1a:	f002 fd6e 	bl	80139fa <memcpy>
	}
}
 8010f1e:	bf00      	nop
 8010f20:	3708      	adds	r7, #8
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd80      	pop	{r7, pc}

08010f26 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010f26:	b580      	push	{r7, lr}
 8010f28:	b084      	sub	sp, #16
 8010f2a:	af00      	add	r7, sp, #0
 8010f2c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010f2e:	f001 fe91 	bl	8012c54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010f38:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f3a:	e011      	b.n	8010f60 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d012      	beq.n	8010f6a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	3324      	adds	r3, #36	; 0x24
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f000 fd53 	bl	80119f4 <xTaskRemoveFromEventList>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d001      	beq.n	8010f58 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010f54:	f000 fe28 	bl	8011ba8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010f58:	7bfb      	ldrb	r3, [r7, #15]
 8010f5a:	3b01      	subs	r3, #1
 8010f5c:	b2db      	uxtb	r3, r3
 8010f5e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	dce9      	bgt.n	8010f3c <prvUnlockQueue+0x16>
 8010f68:	e000      	b.n	8010f6c <prvUnlockQueue+0x46>
					break;
 8010f6a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	22ff      	movs	r2, #255	; 0xff
 8010f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010f74:	f001 fe9e 	bl	8012cb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010f78:	f001 fe6c 	bl	8012c54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f82:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010f84:	e011      	b.n	8010faa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	691b      	ldr	r3, [r3, #16]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d012      	beq.n	8010fb4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	3310      	adds	r3, #16
 8010f92:	4618      	mov	r0, r3
 8010f94:	f000 fd2e 	bl	80119f4 <xTaskRemoveFromEventList>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d001      	beq.n	8010fa2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010f9e:	f000 fe03 	bl	8011ba8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010fa2:	7bbb      	ldrb	r3, [r7, #14]
 8010fa4:	3b01      	subs	r3, #1
 8010fa6:	b2db      	uxtb	r3, r3
 8010fa8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010faa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	dce9      	bgt.n	8010f86 <prvUnlockQueue+0x60>
 8010fb2:	e000      	b.n	8010fb6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010fb4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	22ff      	movs	r2, #255	; 0xff
 8010fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010fbe:	f001 fe79 	bl	8012cb4 <vPortExitCritical>
}
 8010fc2:	bf00      	nop
 8010fc4:	3710      	adds	r7, #16
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}

08010fca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010fca:	b580      	push	{r7, lr}
 8010fcc:	b084      	sub	sp, #16
 8010fce:	af00      	add	r7, sp, #0
 8010fd0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010fd2:	f001 fe3f 	bl	8012c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d102      	bne.n	8010fe4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010fde:	2301      	movs	r3, #1
 8010fe0:	60fb      	str	r3, [r7, #12]
 8010fe2:	e001      	b.n	8010fe8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010fe8:	f001 fe64 	bl	8012cb4 <vPortExitCritical>

	return xReturn;
 8010fec:	68fb      	ldr	r3, [r7, #12]
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3710      	adds	r7, #16
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}

08010ff6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010ff6:	b580      	push	{r7, lr}
 8010ff8:	b084      	sub	sp, #16
 8010ffa:	af00      	add	r7, sp, #0
 8010ffc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010ffe:	f001 fe29 	bl	8012c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801100a:	429a      	cmp	r2, r3
 801100c:	d102      	bne.n	8011014 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801100e:	2301      	movs	r3, #1
 8011010:	60fb      	str	r3, [r7, #12]
 8011012:	e001      	b.n	8011018 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011014:	2300      	movs	r3, #0
 8011016:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011018:	f001 fe4c 	bl	8012cb4 <vPortExitCritical>

	return xReturn;
 801101c:	68fb      	ldr	r3, [r7, #12]
}
 801101e:	4618      	mov	r0, r3
 8011020:	3710      	adds	r7, #16
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}
	...

08011028 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011028:	b480      	push	{r7}
 801102a:	b085      	sub	sp, #20
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011032:	2300      	movs	r3, #0
 8011034:	60fb      	str	r3, [r7, #12]
 8011036:	e014      	b.n	8011062 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011038:	4a0f      	ldr	r2, [pc, #60]	; (8011078 <vQueueAddToRegistry+0x50>)
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d10b      	bne.n	801105c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011044:	490c      	ldr	r1, [pc, #48]	; (8011078 <vQueueAddToRegistry+0x50>)
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	683a      	ldr	r2, [r7, #0]
 801104a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801104e:	4a0a      	ldr	r2, [pc, #40]	; (8011078 <vQueueAddToRegistry+0x50>)
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	00db      	lsls	r3, r3, #3
 8011054:	4413      	add	r3, r2
 8011056:	687a      	ldr	r2, [r7, #4]
 8011058:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801105a:	e006      	b.n	801106a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	3301      	adds	r3, #1
 8011060:	60fb      	str	r3, [r7, #12]
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	2b07      	cmp	r3, #7
 8011066:	d9e7      	bls.n	8011038 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011068:	bf00      	nop
 801106a:	bf00      	nop
 801106c:	3714      	adds	r7, #20
 801106e:	46bd      	mov	sp, r7
 8011070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011074:	4770      	bx	lr
 8011076:	bf00      	nop
 8011078:	20001cd0 	.word	0x20001cd0

0801107c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801107c:	b480      	push	{r7}
 801107e:	b085      	sub	sp, #20
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011084:	2300      	movs	r3, #0
 8011086:	60fb      	str	r3, [r7, #12]
 8011088:	e016      	b.n	80110b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801108a:	4a10      	ldr	r2, [pc, #64]	; (80110cc <vQueueUnregisterQueue+0x50>)
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	00db      	lsls	r3, r3, #3
 8011090:	4413      	add	r3, r2
 8011092:	685b      	ldr	r3, [r3, #4]
 8011094:	687a      	ldr	r2, [r7, #4]
 8011096:	429a      	cmp	r2, r3
 8011098:	d10b      	bne.n	80110b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801109a:	4a0c      	ldr	r2, [pc, #48]	; (80110cc <vQueueUnregisterQueue+0x50>)
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2100      	movs	r1, #0
 80110a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80110a4:	4a09      	ldr	r2, [pc, #36]	; (80110cc <vQueueUnregisterQueue+0x50>)
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	00db      	lsls	r3, r3, #3
 80110aa:	4413      	add	r3, r2
 80110ac:	2200      	movs	r2, #0
 80110ae:	605a      	str	r2, [r3, #4]
				break;
 80110b0:	e006      	b.n	80110c0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	3301      	adds	r3, #1
 80110b6:	60fb      	str	r3, [r7, #12]
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	2b07      	cmp	r3, #7
 80110bc:	d9e5      	bls.n	801108a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80110be:	bf00      	nop
 80110c0:	bf00      	nop
 80110c2:	3714      	adds	r7, #20
 80110c4:	46bd      	mov	sp, r7
 80110c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ca:	4770      	bx	lr
 80110cc:	20001cd0 	.word	0x20001cd0

080110d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b086      	sub	sp, #24
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	60f8      	str	r0, [r7, #12]
 80110d8:	60b9      	str	r1, [r7, #8]
 80110da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80110e0:	f001 fdb8 	bl	8012c54 <vPortEnterCritical>
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80110ea:	b25b      	sxtb	r3, r3
 80110ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110f0:	d103      	bne.n	80110fa <vQueueWaitForMessageRestricted+0x2a>
 80110f2:	697b      	ldr	r3, [r7, #20]
 80110f4:	2200      	movs	r2, #0
 80110f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80110fa:	697b      	ldr	r3, [r7, #20]
 80110fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011100:	b25b      	sxtb	r3, r3
 8011102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011106:	d103      	bne.n	8011110 <vQueueWaitForMessageRestricted+0x40>
 8011108:	697b      	ldr	r3, [r7, #20]
 801110a:	2200      	movs	r2, #0
 801110c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011110:	f001 fdd0 	bl	8012cb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011114:	697b      	ldr	r3, [r7, #20]
 8011116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011118:	2b00      	cmp	r3, #0
 801111a:	d106      	bne.n	801112a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	3324      	adds	r3, #36	; 0x24
 8011120:	687a      	ldr	r2, [r7, #4]
 8011122:	68b9      	ldr	r1, [r7, #8]
 8011124:	4618      	mov	r0, r3
 8011126:	f000 fc39 	bl	801199c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801112a:	6978      	ldr	r0, [r7, #20]
 801112c:	f7ff fefb 	bl	8010f26 <prvUnlockQueue>
	}
 8011130:	bf00      	nop
 8011132:	3718      	adds	r7, #24
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011138:	b580      	push	{r7, lr}
 801113a:	b08e      	sub	sp, #56	; 0x38
 801113c:	af04      	add	r7, sp, #16
 801113e:	60f8      	str	r0, [r7, #12]
 8011140:	60b9      	str	r1, [r7, #8]
 8011142:	607a      	str	r2, [r7, #4]
 8011144:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011148:	2b00      	cmp	r3, #0
 801114a:	d10a      	bne.n	8011162 <xTaskCreateStatic+0x2a>
	__asm volatile
 801114c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011150:	f383 8811 	msr	BASEPRI, r3
 8011154:	f3bf 8f6f 	isb	sy
 8011158:	f3bf 8f4f 	dsb	sy
 801115c:	623b      	str	r3, [r7, #32]
}
 801115e:	bf00      	nop
 8011160:	e7fe      	b.n	8011160 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011164:	2b00      	cmp	r3, #0
 8011166:	d10a      	bne.n	801117e <xTaskCreateStatic+0x46>
	__asm volatile
 8011168:	f04f 0350 	mov.w	r3, #80	; 0x50
 801116c:	f383 8811 	msr	BASEPRI, r3
 8011170:	f3bf 8f6f 	isb	sy
 8011174:	f3bf 8f4f 	dsb	sy
 8011178:	61fb      	str	r3, [r7, #28]
}
 801117a:	bf00      	nop
 801117c:	e7fe      	b.n	801117c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801117e:	2354      	movs	r3, #84	; 0x54
 8011180:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011182:	693b      	ldr	r3, [r7, #16]
 8011184:	2b54      	cmp	r3, #84	; 0x54
 8011186:	d00a      	beq.n	801119e <xTaskCreateStatic+0x66>
	__asm volatile
 8011188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801118c:	f383 8811 	msr	BASEPRI, r3
 8011190:	f3bf 8f6f 	isb	sy
 8011194:	f3bf 8f4f 	dsb	sy
 8011198:	61bb      	str	r3, [r7, #24]
}
 801119a:	bf00      	nop
 801119c:	e7fe      	b.n	801119c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801119e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80111a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d01e      	beq.n	80111e4 <xTaskCreateStatic+0xac>
 80111a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d01b      	beq.n	80111e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80111ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80111b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80111b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80111b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b8:	2202      	movs	r2, #2
 80111ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80111be:	2300      	movs	r3, #0
 80111c0:	9303      	str	r3, [sp, #12]
 80111c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c4:	9302      	str	r3, [sp, #8]
 80111c6:	f107 0314 	add.w	r3, r7, #20
 80111ca:	9301      	str	r3, [sp, #4]
 80111cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ce:	9300      	str	r3, [sp, #0]
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	687a      	ldr	r2, [r7, #4]
 80111d4:	68b9      	ldr	r1, [r7, #8]
 80111d6:	68f8      	ldr	r0, [r7, #12]
 80111d8:	f000 f850 	bl	801127c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80111dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111de:	f000 f8d5 	bl	801138c <prvAddNewTaskToReadyList>
 80111e2:	e001      	b.n	80111e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80111e4:	2300      	movs	r3, #0
 80111e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80111e8:	697b      	ldr	r3, [r7, #20]
	}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3728      	adds	r7, #40	; 0x28
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}

080111f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80111f2:	b580      	push	{r7, lr}
 80111f4:	b08c      	sub	sp, #48	; 0x30
 80111f6:	af04      	add	r7, sp, #16
 80111f8:	60f8      	str	r0, [r7, #12]
 80111fa:	60b9      	str	r1, [r7, #8]
 80111fc:	603b      	str	r3, [r7, #0]
 80111fe:	4613      	mov	r3, r2
 8011200:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011202:	88fb      	ldrh	r3, [r7, #6]
 8011204:	009b      	lsls	r3, r3, #2
 8011206:	4618      	mov	r0, r3
 8011208:	f001 fe46 	bl	8012e98 <pvPortMalloc>
 801120c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d00e      	beq.n	8011232 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011214:	2054      	movs	r0, #84	; 0x54
 8011216:	f001 fe3f 	bl	8012e98 <pvPortMalloc>
 801121a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801121c:	69fb      	ldr	r3, [r7, #28]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d003      	beq.n	801122a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011222:	69fb      	ldr	r3, [r7, #28]
 8011224:	697a      	ldr	r2, [r7, #20]
 8011226:	631a      	str	r2, [r3, #48]	; 0x30
 8011228:	e005      	b.n	8011236 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801122a:	6978      	ldr	r0, [r7, #20]
 801122c:	f001 ff00 	bl	8013030 <vPortFree>
 8011230:	e001      	b.n	8011236 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011232:	2300      	movs	r3, #0
 8011234:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011236:	69fb      	ldr	r3, [r7, #28]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d017      	beq.n	801126c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801123c:	69fb      	ldr	r3, [r7, #28]
 801123e:	2200      	movs	r2, #0
 8011240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011244:	88fa      	ldrh	r2, [r7, #6]
 8011246:	2300      	movs	r3, #0
 8011248:	9303      	str	r3, [sp, #12]
 801124a:	69fb      	ldr	r3, [r7, #28]
 801124c:	9302      	str	r3, [sp, #8]
 801124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011250:	9301      	str	r3, [sp, #4]
 8011252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011254:	9300      	str	r3, [sp, #0]
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	68b9      	ldr	r1, [r7, #8]
 801125a:	68f8      	ldr	r0, [r7, #12]
 801125c:	f000 f80e 	bl	801127c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011260:	69f8      	ldr	r0, [r7, #28]
 8011262:	f000 f893 	bl	801138c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011266:	2301      	movs	r3, #1
 8011268:	61bb      	str	r3, [r7, #24]
 801126a:	e002      	b.n	8011272 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801126c:	f04f 33ff 	mov.w	r3, #4294967295
 8011270:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011272:	69bb      	ldr	r3, [r7, #24]
	}
 8011274:	4618      	mov	r0, r3
 8011276:	3720      	adds	r7, #32
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}

0801127c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b088      	sub	sp, #32
 8011280:	af00      	add	r7, sp, #0
 8011282:	60f8      	str	r0, [r7, #12]
 8011284:	60b9      	str	r1, [r7, #8]
 8011286:	607a      	str	r2, [r7, #4]
 8011288:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801128c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011294:	3b01      	subs	r3, #1
 8011296:	009b      	lsls	r3, r3, #2
 8011298:	4413      	add	r3, r2
 801129a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801129c:	69bb      	ldr	r3, [r7, #24]
 801129e:	f023 0307 	bic.w	r3, r3, #7
 80112a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80112a4:	69bb      	ldr	r3, [r7, #24]
 80112a6:	f003 0307 	and.w	r3, r3, #7
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d00a      	beq.n	80112c4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80112ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112b2:	f383 8811 	msr	BASEPRI, r3
 80112b6:	f3bf 8f6f 	isb	sy
 80112ba:	f3bf 8f4f 	dsb	sy
 80112be:	617b      	str	r3, [r7, #20]
}
 80112c0:	bf00      	nop
 80112c2:	e7fe      	b.n	80112c2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d01f      	beq.n	801130a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80112ca:	2300      	movs	r3, #0
 80112cc:	61fb      	str	r3, [r7, #28]
 80112ce:	e012      	b.n	80112f6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80112d0:	68ba      	ldr	r2, [r7, #8]
 80112d2:	69fb      	ldr	r3, [r7, #28]
 80112d4:	4413      	add	r3, r2
 80112d6:	7819      	ldrb	r1, [r3, #0]
 80112d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112da:	69fb      	ldr	r3, [r7, #28]
 80112dc:	4413      	add	r3, r2
 80112de:	3334      	adds	r3, #52	; 0x34
 80112e0:	460a      	mov	r2, r1
 80112e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80112e4:	68ba      	ldr	r2, [r7, #8]
 80112e6:	69fb      	ldr	r3, [r7, #28]
 80112e8:	4413      	add	r3, r2
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d006      	beq.n	80112fe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80112f0:	69fb      	ldr	r3, [r7, #28]
 80112f2:	3301      	adds	r3, #1
 80112f4:	61fb      	str	r3, [r7, #28]
 80112f6:	69fb      	ldr	r3, [r7, #28]
 80112f8:	2b0f      	cmp	r3, #15
 80112fa:	d9e9      	bls.n	80112d0 <prvInitialiseNewTask+0x54>
 80112fc:	e000      	b.n	8011300 <prvInitialiseNewTask+0x84>
			{
				break;
 80112fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011302:	2200      	movs	r2, #0
 8011304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011308:	e003      	b.n	8011312 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801130a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801130c:	2200      	movs	r2, #0
 801130e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011314:	2b06      	cmp	r3, #6
 8011316:	d901      	bls.n	801131c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011318:	2306      	movs	r3, #6
 801131a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801131c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011320:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011326:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132a:	2200      	movs	r2, #0
 801132c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801132e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011330:	3304      	adds	r3, #4
 8011332:	4618      	mov	r0, r3
 8011334:	f7fe fe80 	bl	8010038 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801133a:	3318      	adds	r3, #24
 801133c:	4618      	mov	r0, r3
 801133e:	f7fe fe7b 	bl	8010038 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011346:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801134a:	f1c3 0207 	rsb	r2, r3, #7
 801134e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011350:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011356:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135a:	2200      	movs	r2, #0
 801135c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801135e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011360:	2200      	movs	r2, #0
 8011362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011366:	683a      	ldr	r2, [r7, #0]
 8011368:	68f9      	ldr	r1, [r7, #12]
 801136a:	69b8      	ldr	r0, [r7, #24]
 801136c:	f001 fb46 	bl	80129fc <pxPortInitialiseStack>
 8011370:	4602      	mov	r2, r0
 8011372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011374:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011378:	2b00      	cmp	r3, #0
 801137a:	d002      	beq.n	8011382 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801137e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011380:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011382:	bf00      	nop
 8011384:	3720      	adds	r7, #32
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
	...

0801138c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b082      	sub	sp, #8
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011394:	f001 fc5e 	bl	8012c54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011398:	4b2a      	ldr	r3, [pc, #168]	; (8011444 <prvAddNewTaskToReadyList+0xb8>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	3301      	adds	r3, #1
 801139e:	4a29      	ldr	r2, [pc, #164]	; (8011444 <prvAddNewTaskToReadyList+0xb8>)
 80113a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80113a2:	4b29      	ldr	r3, [pc, #164]	; (8011448 <prvAddNewTaskToReadyList+0xbc>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d109      	bne.n	80113be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80113aa:	4a27      	ldr	r2, [pc, #156]	; (8011448 <prvAddNewTaskToReadyList+0xbc>)
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80113b0:	4b24      	ldr	r3, [pc, #144]	; (8011444 <prvAddNewTaskToReadyList+0xb8>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	2b01      	cmp	r3, #1
 80113b6:	d110      	bne.n	80113da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80113b8:	f000 fc1a 	bl	8011bf0 <prvInitialiseTaskLists>
 80113bc:	e00d      	b.n	80113da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80113be:	4b23      	ldr	r3, [pc, #140]	; (801144c <prvAddNewTaskToReadyList+0xc0>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d109      	bne.n	80113da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80113c6:	4b20      	ldr	r3, [pc, #128]	; (8011448 <prvAddNewTaskToReadyList+0xbc>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113d0:	429a      	cmp	r2, r3
 80113d2:	d802      	bhi.n	80113da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80113d4:	4a1c      	ldr	r2, [pc, #112]	; (8011448 <prvAddNewTaskToReadyList+0xbc>)
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80113da:	4b1d      	ldr	r3, [pc, #116]	; (8011450 <prvAddNewTaskToReadyList+0xc4>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	3301      	adds	r3, #1
 80113e0:	4a1b      	ldr	r2, [pc, #108]	; (8011450 <prvAddNewTaskToReadyList+0xc4>)
 80113e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113e8:	2201      	movs	r2, #1
 80113ea:	409a      	lsls	r2, r3
 80113ec:	4b19      	ldr	r3, [pc, #100]	; (8011454 <prvAddNewTaskToReadyList+0xc8>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	4313      	orrs	r3, r2
 80113f2:	4a18      	ldr	r2, [pc, #96]	; (8011454 <prvAddNewTaskToReadyList+0xc8>)
 80113f4:	6013      	str	r3, [r2, #0]
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113fa:	4613      	mov	r3, r2
 80113fc:	009b      	lsls	r3, r3, #2
 80113fe:	4413      	add	r3, r2
 8011400:	009b      	lsls	r3, r3, #2
 8011402:	4a15      	ldr	r2, [pc, #84]	; (8011458 <prvAddNewTaskToReadyList+0xcc>)
 8011404:	441a      	add	r2, r3
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	3304      	adds	r3, #4
 801140a:	4619      	mov	r1, r3
 801140c:	4610      	mov	r0, r2
 801140e:	f7fe fe20 	bl	8010052 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011412:	f001 fc4f 	bl	8012cb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011416:	4b0d      	ldr	r3, [pc, #52]	; (801144c <prvAddNewTaskToReadyList+0xc0>)
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d00e      	beq.n	801143c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801141e:	4b0a      	ldr	r3, [pc, #40]	; (8011448 <prvAddNewTaskToReadyList+0xbc>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011428:	429a      	cmp	r2, r3
 801142a:	d207      	bcs.n	801143c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801142c:	4b0b      	ldr	r3, [pc, #44]	; (801145c <prvAddNewTaskToReadyList+0xd0>)
 801142e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011432:	601a      	str	r2, [r3, #0]
 8011434:	f3bf 8f4f 	dsb	sy
 8011438:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801143c:	bf00      	nop
 801143e:	3708      	adds	r7, #8
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}
 8011444:	20001e10 	.word	0x20001e10
 8011448:	20001d10 	.word	0x20001d10
 801144c:	20001e1c 	.word	0x20001e1c
 8011450:	20001e2c 	.word	0x20001e2c
 8011454:	20001e18 	.word	0x20001e18
 8011458:	20001d14 	.word	0x20001d14
 801145c:	e000ed04 	.word	0xe000ed04

08011460 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011460:	b580      	push	{r7, lr}
 8011462:	b084      	sub	sp, #16
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011468:	2300      	movs	r3, #0
 801146a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d017      	beq.n	80114a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011472:	4b13      	ldr	r3, [pc, #76]	; (80114c0 <vTaskDelay+0x60>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d00a      	beq.n	8011490 <vTaskDelay+0x30>
	__asm volatile
 801147a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801147e:	f383 8811 	msr	BASEPRI, r3
 8011482:	f3bf 8f6f 	isb	sy
 8011486:	f3bf 8f4f 	dsb	sy
 801148a:	60bb      	str	r3, [r7, #8]
}
 801148c:	bf00      	nop
 801148e:	e7fe      	b.n	801148e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011490:	f000 f880 	bl	8011594 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011494:	2100      	movs	r1, #0
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f000 fe7e 	bl	8012198 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801149c:	f000 f888 	bl	80115b0 <xTaskResumeAll>
 80114a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d107      	bne.n	80114b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80114a8:	4b06      	ldr	r3, [pc, #24]	; (80114c4 <vTaskDelay+0x64>)
 80114aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114ae:	601a      	str	r2, [r3, #0]
 80114b0:	f3bf 8f4f 	dsb	sy
 80114b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80114b8:	bf00      	nop
 80114ba:	3710      	adds	r7, #16
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}
 80114c0:	20001e38 	.word	0x20001e38
 80114c4:	e000ed04 	.word	0xe000ed04

080114c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b08a      	sub	sp, #40	; 0x28
 80114cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80114ce:	2300      	movs	r3, #0
 80114d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80114d2:	2300      	movs	r3, #0
 80114d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80114d6:	463a      	mov	r2, r7
 80114d8:	1d39      	adds	r1, r7, #4
 80114da:	f107 0308 	add.w	r3, r7, #8
 80114de:	4618      	mov	r0, r3
 80114e0:	f7f1 f822 	bl	8002528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80114e4:	6839      	ldr	r1, [r7, #0]
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	68ba      	ldr	r2, [r7, #8]
 80114ea:	9202      	str	r2, [sp, #8]
 80114ec:	9301      	str	r3, [sp, #4]
 80114ee:	2300      	movs	r3, #0
 80114f0:	9300      	str	r3, [sp, #0]
 80114f2:	2300      	movs	r3, #0
 80114f4:	460a      	mov	r2, r1
 80114f6:	4921      	ldr	r1, [pc, #132]	; (801157c <vTaskStartScheduler+0xb4>)
 80114f8:	4821      	ldr	r0, [pc, #132]	; (8011580 <vTaskStartScheduler+0xb8>)
 80114fa:	f7ff fe1d 	bl	8011138 <xTaskCreateStatic>
 80114fe:	4603      	mov	r3, r0
 8011500:	4a20      	ldr	r2, [pc, #128]	; (8011584 <vTaskStartScheduler+0xbc>)
 8011502:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011504:	4b1f      	ldr	r3, [pc, #124]	; (8011584 <vTaskStartScheduler+0xbc>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d002      	beq.n	8011512 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801150c:	2301      	movs	r3, #1
 801150e:	617b      	str	r3, [r7, #20]
 8011510:	e001      	b.n	8011516 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011512:	2300      	movs	r3, #0
 8011514:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	2b01      	cmp	r3, #1
 801151a:	d102      	bne.n	8011522 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801151c:	f000 fea2 	bl	8012264 <xTimerCreateTimerTask>
 8011520:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	2b01      	cmp	r3, #1
 8011526:	d116      	bne.n	8011556 <vTaskStartScheduler+0x8e>
	__asm volatile
 8011528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801152c:	f383 8811 	msr	BASEPRI, r3
 8011530:	f3bf 8f6f 	isb	sy
 8011534:	f3bf 8f4f 	dsb	sy
 8011538:	613b      	str	r3, [r7, #16]
}
 801153a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801153c:	4b12      	ldr	r3, [pc, #72]	; (8011588 <vTaskStartScheduler+0xc0>)
 801153e:	f04f 32ff 	mov.w	r2, #4294967295
 8011542:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011544:	4b11      	ldr	r3, [pc, #68]	; (801158c <vTaskStartScheduler+0xc4>)
 8011546:	2201      	movs	r2, #1
 8011548:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801154a:	4b11      	ldr	r3, [pc, #68]	; (8011590 <vTaskStartScheduler+0xc8>)
 801154c:	2200      	movs	r2, #0
 801154e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011550:	f001 fade 	bl	8012b10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011554:	e00e      	b.n	8011574 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	f1b3 3fff 	cmp.w	r3, #4294967295
 801155c:	d10a      	bne.n	8011574 <vTaskStartScheduler+0xac>
	__asm volatile
 801155e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011562:	f383 8811 	msr	BASEPRI, r3
 8011566:	f3bf 8f6f 	isb	sy
 801156a:	f3bf 8f4f 	dsb	sy
 801156e:	60fb      	str	r3, [r7, #12]
}
 8011570:	bf00      	nop
 8011572:	e7fe      	b.n	8011572 <vTaskStartScheduler+0xaa>
}
 8011574:	bf00      	nop
 8011576:	3718      	adds	r7, #24
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}
 801157c:	08016b94 	.word	0x08016b94
 8011580:	08011bc1 	.word	0x08011bc1
 8011584:	20001e34 	.word	0x20001e34
 8011588:	20001e30 	.word	0x20001e30
 801158c:	20001e1c 	.word	0x20001e1c
 8011590:	20001e14 	.word	0x20001e14

08011594 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011594:	b480      	push	{r7}
 8011596:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011598:	4b04      	ldr	r3, [pc, #16]	; (80115ac <vTaskSuspendAll+0x18>)
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	3301      	adds	r3, #1
 801159e:	4a03      	ldr	r2, [pc, #12]	; (80115ac <vTaskSuspendAll+0x18>)
 80115a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80115a2:	bf00      	nop
 80115a4:	46bd      	mov	sp, r7
 80115a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115aa:	4770      	bx	lr
 80115ac:	20001e38 	.word	0x20001e38

080115b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b084      	sub	sp, #16
 80115b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80115b6:	2300      	movs	r3, #0
 80115b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80115ba:	2300      	movs	r3, #0
 80115bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80115be:	4b41      	ldr	r3, [pc, #260]	; (80116c4 <xTaskResumeAll+0x114>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d10a      	bne.n	80115dc <xTaskResumeAll+0x2c>
	__asm volatile
 80115c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ca:	f383 8811 	msr	BASEPRI, r3
 80115ce:	f3bf 8f6f 	isb	sy
 80115d2:	f3bf 8f4f 	dsb	sy
 80115d6:	603b      	str	r3, [r7, #0]
}
 80115d8:	bf00      	nop
 80115da:	e7fe      	b.n	80115da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80115dc:	f001 fb3a 	bl	8012c54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80115e0:	4b38      	ldr	r3, [pc, #224]	; (80116c4 <xTaskResumeAll+0x114>)
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	3b01      	subs	r3, #1
 80115e6:	4a37      	ldr	r2, [pc, #220]	; (80116c4 <xTaskResumeAll+0x114>)
 80115e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115ea:	4b36      	ldr	r3, [pc, #216]	; (80116c4 <xTaskResumeAll+0x114>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d161      	bne.n	80116b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80115f2:	4b35      	ldr	r3, [pc, #212]	; (80116c8 <xTaskResumeAll+0x118>)
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d05d      	beq.n	80116b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80115fa:	e02e      	b.n	801165a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115fc:	4b33      	ldr	r3, [pc, #204]	; (80116cc <xTaskResumeAll+0x11c>)
 80115fe:	68db      	ldr	r3, [r3, #12]
 8011600:	68db      	ldr	r3, [r3, #12]
 8011602:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	3318      	adds	r3, #24
 8011608:	4618      	mov	r0, r3
 801160a:	f7fe fd7f 	bl	801010c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	3304      	adds	r3, #4
 8011612:	4618      	mov	r0, r3
 8011614:	f7fe fd7a 	bl	801010c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801161c:	2201      	movs	r2, #1
 801161e:	409a      	lsls	r2, r3
 8011620:	4b2b      	ldr	r3, [pc, #172]	; (80116d0 <xTaskResumeAll+0x120>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	4313      	orrs	r3, r2
 8011626:	4a2a      	ldr	r2, [pc, #168]	; (80116d0 <xTaskResumeAll+0x120>)
 8011628:	6013      	str	r3, [r2, #0]
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801162e:	4613      	mov	r3, r2
 8011630:	009b      	lsls	r3, r3, #2
 8011632:	4413      	add	r3, r2
 8011634:	009b      	lsls	r3, r3, #2
 8011636:	4a27      	ldr	r2, [pc, #156]	; (80116d4 <xTaskResumeAll+0x124>)
 8011638:	441a      	add	r2, r3
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	3304      	adds	r3, #4
 801163e:	4619      	mov	r1, r3
 8011640:	4610      	mov	r0, r2
 8011642:	f7fe fd06 	bl	8010052 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801164a:	4b23      	ldr	r3, [pc, #140]	; (80116d8 <xTaskResumeAll+0x128>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011650:	429a      	cmp	r2, r3
 8011652:	d302      	bcc.n	801165a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8011654:	4b21      	ldr	r3, [pc, #132]	; (80116dc <xTaskResumeAll+0x12c>)
 8011656:	2201      	movs	r2, #1
 8011658:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801165a:	4b1c      	ldr	r3, [pc, #112]	; (80116cc <xTaskResumeAll+0x11c>)
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d1cc      	bne.n	80115fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d001      	beq.n	801166c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011668:	f000 fb60 	bl	8011d2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801166c:	4b1c      	ldr	r3, [pc, #112]	; (80116e0 <xTaskResumeAll+0x130>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d010      	beq.n	801169a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011678:	f000 f858 	bl	801172c <xTaskIncrementTick>
 801167c:	4603      	mov	r3, r0
 801167e:	2b00      	cmp	r3, #0
 8011680:	d002      	beq.n	8011688 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011682:	4b16      	ldr	r3, [pc, #88]	; (80116dc <xTaskResumeAll+0x12c>)
 8011684:	2201      	movs	r2, #1
 8011686:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	3b01      	subs	r3, #1
 801168c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d1f1      	bne.n	8011678 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8011694:	4b12      	ldr	r3, [pc, #72]	; (80116e0 <xTaskResumeAll+0x130>)
 8011696:	2200      	movs	r2, #0
 8011698:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801169a:	4b10      	ldr	r3, [pc, #64]	; (80116dc <xTaskResumeAll+0x12c>)
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d009      	beq.n	80116b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80116a2:	2301      	movs	r3, #1
 80116a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80116a6:	4b0f      	ldr	r3, [pc, #60]	; (80116e4 <xTaskResumeAll+0x134>)
 80116a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116ac:	601a      	str	r2, [r3, #0]
 80116ae:	f3bf 8f4f 	dsb	sy
 80116b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80116b6:	f001 fafd 	bl	8012cb4 <vPortExitCritical>

	return xAlreadyYielded;
 80116ba:	68bb      	ldr	r3, [r7, #8]
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3710      	adds	r7, #16
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}
 80116c4:	20001e38 	.word	0x20001e38
 80116c8:	20001e10 	.word	0x20001e10
 80116cc:	20001dd0 	.word	0x20001dd0
 80116d0:	20001e18 	.word	0x20001e18
 80116d4:	20001d14 	.word	0x20001d14
 80116d8:	20001d10 	.word	0x20001d10
 80116dc:	20001e24 	.word	0x20001e24
 80116e0:	20001e20 	.word	0x20001e20
 80116e4:	e000ed04 	.word	0xe000ed04

080116e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80116e8:	b480      	push	{r7}
 80116ea:	b083      	sub	sp, #12
 80116ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80116ee:	4b05      	ldr	r3, [pc, #20]	; (8011704 <xTaskGetTickCount+0x1c>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80116f4:	687b      	ldr	r3, [r7, #4]
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	370c      	adds	r7, #12
 80116fa:	46bd      	mov	sp, r7
 80116fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011700:	4770      	bx	lr
 8011702:	bf00      	nop
 8011704:	20001e14 	.word	0x20001e14

08011708 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801170e:	f001 fb83 	bl	8012e18 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011712:	2300      	movs	r3, #0
 8011714:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011716:	4b04      	ldr	r3, [pc, #16]	; (8011728 <xTaskGetTickCountFromISR+0x20>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801171c:	683b      	ldr	r3, [r7, #0]
}
 801171e:	4618      	mov	r0, r3
 8011720:	3708      	adds	r7, #8
 8011722:	46bd      	mov	sp, r7
 8011724:	bd80      	pop	{r7, pc}
 8011726:	bf00      	nop
 8011728:	20001e14 	.word	0x20001e14

0801172c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b086      	sub	sp, #24
 8011730:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011732:	2300      	movs	r3, #0
 8011734:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011736:	4b4e      	ldr	r3, [pc, #312]	; (8011870 <xTaskIncrementTick+0x144>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	2b00      	cmp	r3, #0
 801173c:	f040 808e 	bne.w	801185c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011740:	4b4c      	ldr	r3, [pc, #304]	; (8011874 <xTaskIncrementTick+0x148>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	3301      	adds	r3, #1
 8011746:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011748:	4a4a      	ldr	r2, [pc, #296]	; (8011874 <xTaskIncrementTick+0x148>)
 801174a:	693b      	ldr	r3, [r7, #16]
 801174c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d120      	bne.n	8011796 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011754:	4b48      	ldr	r3, [pc, #288]	; (8011878 <xTaskIncrementTick+0x14c>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d00a      	beq.n	8011774 <xTaskIncrementTick+0x48>
	__asm volatile
 801175e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011762:	f383 8811 	msr	BASEPRI, r3
 8011766:	f3bf 8f6f 	isb	sy
 801176a:	f3bf 8f4f 	dsb	sy
 801176e:	603b      	str	r3, [r7, #0]
}
 8011770:	bf00      	nop
 8011772:	e7fe      	b.n	8011772 <xTaskIncrementTick+0x46>
 8011774:	4b40      	ldr	r3, [pc, #256]	; (8011878 <xTaskIncrementTick+0x14c>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	60fb      	str	r3, [r7, #12]
 801177a:	4b40      	ldr	r3, [pc, #256]	; (801187c <xTaskIncrementTick+0x150>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	4a3e      	ldr	r2, [pc, #248]	; (8011878 <xTaskIncrementTick+0x14c>)
 8011780:	6013      	str	r3, [r2, #0]
 8011782:	4a3e      	ldr	r2, [pc, #248]	; (801187c <xTaskIncrementTick+0x150>)
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	6013      	str	r3, [r2, #0]
 8011788:	4b3d      	ldr	r3, [pc, #244]	; (8011880 <xTaskIncrementTick+0x154>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	3301      	adds	r3, #1
 801178e:	4a3c      	ldr	r2, [pc, #240]	; (8011880 <xTaskIncrementTick+0x154>)
 8011790:	6013      	str	r3, [r2, #0]
 8011792:	f000 facb 	bl	8011d2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011796:	4b3b      	ldr	r3, [pc, #236]	; (8011884 <xTaskIncrementTick+0x158>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	693a      	ldr	r2, [r7, #16]
 801179c:	429a      	cmp	r2, r3
 801179e:	d348      	bcc.n	8011832 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80117a0:	4b35      	ldr	r3, [pc, #212]	; (8011878 <xTaskIncrementTick+0x14c>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d104      	bne.n	80117b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117aa:	4b36      	ldr	r3, [pc, #216]	; (8011884 <xTaskIncrementTick+0x158>)
 80117ac:	f04f 32ff 	mov.w	r2, #4294967295
 80117b0:	601a      	str	r2, [r3, #0]
					break;
 80117b2:	e03e      	b.n	8011832 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117b4:	4b30      	ldr	r3, [pc, #192]	; (8011878 <xTaskIncrementTick+0x14c>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	68db      	ldr	r3, [r3, #12]
 80117ba:	68db      	ldr	r3, [r3, #12]
 80117bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	685b      	ldr	r3, [r3, #4]
 80117c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80117c4:	693a      	ldr	r2, [r7, #16]
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d203      	bcs.n	80117d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80117cc:	4a2d      	ldr	r2, [pc, #180]	; (8011884 <xTaskIncrementTick+0x158>)
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80117d2:	e02e      	b.n	8011832 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	3304      	adds	r3, #4
 80117d8:	4618      	mov	r0, r3
 80117da:	f7fe fc97 	bl	801010c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d004      	beq.n	80117f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	3318      	adds	r3, #24
 80117ea:	4618      	mov	r0, r3
 80117ec:	f7fe fc8e 	bl	801010c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117f4:	2201      	movs	r2, #1
 80117f6:	409a      	lsls	r2, r3
 80117f8:	4b23      	ldr	r3, [pc, #140]	; (8011888 <xTaskIncrementTick+0x15c>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	4313      	orrs	r3, r2
 80117fe:	4a22      	ldr	r2, [pc, #136]	; (8011888 <xTaskIncrementTick+0x15c>)
 8011800:	6013      	str	r3, [r2, #0]
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011806:	4613      	mov	r3, r2
 8011808:	009b      	lsls	r3, r3, #2
 801180a:	4413      	add	r3, r2
 801180c:	009b      	lsls	r3, r3, #2
 801180e:	4a1f      	ldr	r2, [pc, #124]	; (801188c <xTaskIncrementTick+0x160>)
 8011810:	441a      	add	r2, r3
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	3304      	adds	r3, #4
 8011816:	4619      	mov	r1, r3
 8011818:	4610      	mov	r0, r2
 801181a:	f7fe fc1a 	bl	8010052 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801181e:	68bb      	ldr	r3, [r7, #8]
 8011820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011822:	4b1b      	ldr	r3, [pc, #108]	; (8011890 <xTaskIncrementTick+0x164>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011828:	429a      	cmp	r2, r3
 801182a:	d3b9      	bcc.n	80117a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801182c:	2301      	movs	r3, #1
 801182e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011830:	e7b6      	b.n	80117a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011832:	4b17      	ldr	r3, [pc, #92]	; (8011890 <xTaskIncrementTick+0x164>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011838:	4914      	ldr	r1, [pc, #80]	; (801188c <xTaskIncrementTick+0x160>)
 801183a:	4613      	mov	r3, r2
 801183c:	009b      	lsls	r3, r3, #2
 801183e:	4413      	add	r3, r2
 8011840:	009b      	lsls	r3, r3, #2
 8011842:	440b      	add	r3, r1
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	2b01      	cmp	r3, #1
 8011848:	d901      	bls.n	801184e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801184a:	2301      	movs	r3, #1
 801184c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801184e:	4b11      	ldr	r3, [pc, #68]	; (8011894 <xTaskIncrementTick+0x168>)
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d007      	beq.n	8011866 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8011856:	2301      	movs	r3, #1
 8011858:	617b      	str	r3, [r7, #20]
 801185a:	e004      	b.n	8011866 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801185c:	4b0e      	ldr	r3, [pc, #56]	; (8011898 <xTaskIncrementTick+0x16c>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	3301      	adds	r3, #1
 8011862:	4a0d      	ldr	r2, [pc, #52]	; (8011898 <xTaskIncrementTick+0x16c>)
 8011864:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011866:	697b      	ldr	r3, [r7, #20]
}
 8011868:	4618      	mov	r0, r3
 801186a:	3718      	adds	r7, #24
 801186c:	46bd      	mov	sp, r7
 801186e:	bd80      	pop	{r7, pc}
 8011870:	20001e38 	.word	0x20001e38
 8011874:	20001e14 	.word	0x20001e14
 8011878:	20001dc8 	.word	0x20001dc8
 801187c:	20001dcc 	.word	0x20001dcc
 8011880:	20001e28 	.word	0x20001e28
 8011884:	20001e30 	.word	0x20001e30
 8011888:	20001e18 	.word	0x20001e18
 801188c:	20001d14 	.word	0x20001d14
 8011890:	20001d10 	.word	0x20001d10
 8011894:	20001e24 	.word	0x20001e24
 8011898:	20001e20 	.word	0x20001e20

0801189c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801189c:	b480      	push	{r7}
 801189e:	b087      	sub	sp, #28
 80118a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80118a2:	4b27      	ldr	r3, [pc, #156]	; (8011940 <vTaskSwitchContext+0xa4>)
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d003      	beq.n	80118b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80118aa:	4b26      	ldr	r3, [pc, #152]	; (8011944 <vTaskSwitchContext+0xa8>)
 80118ac:	2201      	movs	r2, #1
 80118ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80118b0:	e03f      	b.n	8011932 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80118b2:	4b24      	ldr	r3, [pc, #144]	; (8011944 <vTaskSwitchContext+0xa8>)
 80118b4:	2200      	movs	r2, #0
 80118b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118b8:	4b23      	ldr	r3, [pc, #140]	; (8011948 <vTaskSwitchContext+0xac>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	fab3 f383 	clz	r3, r3
 80118c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80118c6:	7afb      	ldrb	r3, [r7, #11]
 80118c8:	f1c3 031f 	rsb	r3, r3, #31
 80118cc:	617b      	str	r3, [r7, #20]
 80118ce:	491f      	ldr	r1, [pc, #124]	; (801194c <vTaskSwitchContext+0xb0>)
 80118d0:	697a      	ldr	r2, [r7, #20]
 80118d2:	4613      	mov	r3, r2
 80118d4:	009b      	lsls	r3, r3, #2
 80118d6:	4413      	add	r3, r2
 80118d8:	009b      	lsls	r3, r3, #2
 80118da:	440b      	add	r3, r1
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d10a      	bne.n	80118f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80118e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e6:	f383 8811 	msr	BASEPRI, r3
 80118ea:	f3bf 8f6f 	isb	sy
 80118ee:	f3bf 8f4f 	dsb	sy
 80118f2:	607b      	str	r3, [r7, #4]
}
 80118f4:	bf00      	nop
 80118f6:	e7fe      	b.n	80118f6 <vTaskSwitchContext+0x5a>
 80118f8:	697a      	ldr	r2, [r7, #20]
 80118fa:	4613      	mov	r3, r2
 80118fc:	009b      	lsls	r3, r3, #2
 80118fe:	4413      	add	r3, r2
 8011900:	009b      	lsls	r3, r3, #2
 8011902:	4a12      	ldr	r2, [pc, #72]	; (801194c <vTaskSwitchContext+0xb0>)
 8011904:	4413      	add	r3, r2
 8011906:	613b      	str	r3, [r7, #16]
 8011908:	693b      	ldr	r3, [r7, #16]
 801190a:	685b      	ldr	r3, [r3, #4]
 801190c:	685a      	ldr	r2, [r3, #4]
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	605a      	str	r2, [r3, #4]
 8011912:	693b      	ldr	r3, [r7, #16]
 8011914:	685a      	ldr	r2, [r3, #4]
 8011916:	693b      	ldr	r3, [r7, #16]
 8011918:	3308      	adds	r3, #8
 801191a:	429a      	cmp	r2, r3
 801191c:	d104      	bne.n	8011928 <vTaskSwitchContext+0x8c>
 801191e:	693b      	ldr	r3, [r7, #16]
 8011920:	685b      	ldr	r3, [r3, #4]
 8011922:	685a      	ldr	r2, [r3, #4]
 8011924:	693b      	ldr	r3, [r7, #16]
 8011926:	605a      	str	r2, [r3, #4]
 8011928:	693b      	ldr	r3, [r7, #16]
 801192a:	685b      	ldr	r3, [r3, #4]
 801192c:	68db      	ldr	r3, [r3, #12]
 801192e:	4a08      	ldr	r2, [pc, #32]	; (8011950 <vTaskSwitchContext+0xb4>)
 8011930:	6013      	str	r3, [r2, #0]
}
 8011932:	bf00      	nop
 8011934:	371c      	adds	r7, #28
 8011936:	46bd      	mov	sp, r7
 8011938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193c:	4770      	bx	lr
 801193e:	bf00      	nop
 8011940:	20001e38 	.word	0x20001e38
 8011944:	20001e24 	.word	0x20001e24
 8011948:	20001e18 	.word	0x20001e18
 801194c:	20001d14 	.word	0x20001d14
 8011950:	20001d10 	.word	0x20001d10

08011954 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b084      	sub	sp, #16
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
 801195c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d10a      	bne.n	801197a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011968:	f383 8811 	msr	BASEPRI, r3
 801196c:	f3bf 8f6f 	isb	sy
 8011970:	f3bf 8f4f 	dsb	sy
 8011974:	60fb      	str	r3, [r7, #12]
}
 8011976:	bf00      	nop
 8011978:	e7fe      	b.n	8011978 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801197a:	4b07      	ldr	r3, [pc, #28]	; (8011998 <vTaskPlaceOnEventList+0x44>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	3318      	adds	r3, #24
 8011980:	4619      	mov	r1, r3
 8011982:	6878      	ldr	r0, [r7, #4]
 8011984:	f7fe fb89 	bl	801009a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011988:	2101      	movs	r1, #1
 801198a:	6838      	ldr	r0, [r7, #0]
 801198c:	f000 fc04 	bl	8012198 <prvAddCurrentTaskToDelayedList>
}
 8011990:	bf00      	nop
 8011992:	3710      	adds	r7, #16
 8011994:	46bd      	mov	sp, r7
 8011996:	bd80      	pop	{r7, pc}
 8011998:	20001d10 	.word	0x20001d10

0801199c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801199c:	b580      	push	{r7, lr}
 801199e:	b086      	sub	sp, #24
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	60f8      	str	r0, [r7, #12]
 80119a4:	60b9      	str	r1, [r7, #8]
 80119a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d10a      	bne.n	80119c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80119ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119b2:	f383 8811 	msr	BASEPRI, r3
 80119b6:	f3bf 8f6f 	isb	sy
 80119ba:	f3bf 8f4f 	dsb	sy
 80119be:	617b      	str	r3, [r7, #20]
}
 80119c0:	bf00      	nop
 80119c2:	e7fe      	b.n	80119c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80119c4:	4b0a      	ldr	r3, [pc, #40]	; (80119f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	3318      	adds	r3, #24
 80119ca:	4619      	mov	r1, r3
 80119cc:	68f8      	ldr	r0, [r7, #12]
 80119ce:	f7fe fb40 	bl	8010052 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d002      	beq.n	80119de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80119d8:	f04f 33ff 	mov.w	r3, #4294967295
 80119dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80119de:	6879      	ldr	r1, [r7, #4]
 80119e0:	68b8      	ldr	r0, [r7, #8]
 80119e2:	f000 fbd9 	bl	8012198 <prvAddCurrentTaskToDelayedList>
	}
 80119e6:	bf00      	nop
 80119e8:	3718      	adds	r7, #24
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}
 80119ee:	bf00      	nop
 80119f0:	20001d10 	.word	0x20001d10

080119f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b086      	sub	sp, #24
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	68db      	ldr	r3, [r3, #12]
 8011a00:	68db      	ldr	r3, [r3, #12]
 8011a02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d10a      	bne.n	8011a20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a0e:	f383 8811 	msr	BASEPRI, r3
 8011a12:	f3bf 8f6f 	isb	sy
 8011a16:	f3bf 8f4f 	dsb	sy
 8011a1a:	60fb      	str	r3, [r7, #12]
}
 8011a1c:	bf00      	nop
 8011a1e:	e7fe      	b.n	8011a1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	3318      	adds	r3, #24
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7fe fb71 	bl	801010c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a2a:	4b1d      	ldr	r3, [pc, #116]	; (8011aa0 <xTaskRemoveFromEventList+0xac>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d11c      	bne.n	8011a6c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	3304      	adds	r3, #4
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7fe fb68 	bl	801010c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011a3c:	693b      	ldr	r3, [r7, #16]
 8011a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a40:	2201      	movs	r2, #1
 8011a42:	409a      	lsls	r2, r3
 8011a44:	4b17      	ldr	r3, [pc, #92]	; (8011aa4 <xTaskRemoveFromEventList+0xb0>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	4313      	orrs	r3, r2
 8011a4a:	4a16      	ldr	r2, [pc, #88]	; (8011aa4 <xTaskRemoveFromEventList+0xb0>)
 8011a4c:	6013      	str	r3, [r2, #0]
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a52:	4613      	mov	r3, r2
 8011a54:	009b      	lsls	r3, r3, #2
 8011a56:	4413      	add	r3, r2
 8011a58:	009b      	lsls	r3, r3, #2
 8011a5a:	4a13      	ldr	r2, [pc, #76]	; (8011aa8 <xTaskRemoveFromEventList+0xb4>)
 8011a5c:	441a      	add	r2, r3
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	3304      	adds	r3, #4
 8011a62:	4619      	mov	r1, r3
 8011a64:	4610      	mov	r0, r2
 8011a66:	f7fe faf4 	bl	8010052 <vListInsertEnd>
 8011a6a:	e005      	b.n	8011a78 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	3318      	adds	r3, #24
 8011a70:	4619      	mov	r1, r3
 8011a72:	480e      	ldr	r0, [pc, #56]	; (8011aac <xTaskRemoveFromEventList+0xb8>)
 8011a74:	f7fe faed 	bl	8010052 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011a78:	693b      	ldr	r3, [r7, #16]
 8011a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a7c:	4b0c      	ldr	r3, [pc, #48]	; (8011ab0 <xTaskRemoveFromEventList+0xbc>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a82:	429a      	cmp	r2, r3
 8011a84:	d905      	bls.n	8011a92 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011a86:	2301      	movs	r3, #1
 8011a88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011a8a:	4b0a      	ldr	r3, [pc, #40]	; (8011ab4 <xTaskRemoveFromEventList+0xc0>)
 8011a8c:	2201      	movs	r2, #1
 8011a8e:	601a      	str	r2, [r3, #0]
 8011a90:	e001      	b.n	8011a96 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8011a92:	2300      	movs	r3, #0
 8011a94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011a96:	697b      	ldr	r3, [r7, #20]
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3718      	adds	r7, #24
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}
 8011aa0:	20001e38 	.word	0x20001e38
 8011aa4:	20001e18 	.word	0x20001e18
 8011aa8:	20001d14 	.word	0x20001d14
 8011aac:	20001dd0 	.word	0x20001dd0
 8011ab0:	20001d10 	.word	0x20001d10
 8011ab4:	20001e24 	.word	0x20001e24

08011ab8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011ab8:	b480      	push	{r7}
 8011aba:	b083      	sub	sp, #12
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011ac0:	4b06      	ldr	r3, [pc, #24]	; (8011adc <vTaskInternalSetTimeOutState+0x24>)
 8011ac2:	681a      	ldr	r2, [r3, #0]
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011ac8:	4b05      	ldr	r3, [pc, #20]	; (8011ae0 <vTaskInternalSetTimeOutState+0x28>)
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	605a      	str	r2, [r3, #4]
}
 8011ad0:	bf00      	nop
 8011ad2:	370c      	adds	r7, #12
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ada:	4770      	bx	lr
 8011adc:	20001e28 	.word	0x20001e28
 8011ae0:	20001e14 	.word	0x20001e14

08011ae4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b088      	sub	sp, #32
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
 8011aec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d10a      	bne.n	8011b0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011af8:	f383 8811 	msr	BASEPRI, r3
 8011afc:	f3bf 8f6f 	isb	sy
 8011b00:	f3bf 8f4f 	dsb	sy
 8011b04:	613b      	str	r3, [r7, #16]
}
 8011b06:	bf00      	nop
 8011b08:	e7fe      	b.n	8011b08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d10a      	bne.n	8011b26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b14:	f383 8811 	msr	BASEPRI, r3
 8011b18:	f3bf 8f6f 	isb	sy
 8011b1c:	f3bf 8f4f 	dsb	sy
 8011b20:	60fb      	str	r3, [r7, #12]
}
 8011b22:	bf00      	nop
 8011b24:	e7fe      	b.n	8011b24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011b26:	f001 f895 	bl	8012c54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011b2a:	4b1d      	ldr	r3, [pc, #116]	; (8011ba0 <xTaskCheckForTimeOut+0xbc>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	685b      	ldr	r3, [r3, #4]
 8011b34:	69ba      	ldr	r2, [r7, #24]
 8011b36:	1ad3      	subs	r3, r2, r3
 8011b38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b42:	d102      	bne.n	8011b4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011b44:	2300      	movs	r3, #0
 8011b46:	61fb      	str	r3, [r7, #28]
 8011b48:	e023      	b.n	8011b92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	4b15      	ldr	r3, [pc, #84]	; (8011ba4 <xTaskCheckForTimeOut+0xc0>)
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	429a      	cmp	r2, r3
 8011b54:	d007      	beq.n	8011b66 <xTaskCheckForTimeOut+0x82>
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	69ba      	ldr	r2, [r7, #24]
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d302      	bcc.n	8011b66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011b60:	2301      	movs	r3, #1
 8011b62:	61fb      	str	r3, [r7, #28]
 8011b64:	e015      	b.n	8011b92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	697a      	ldr	r2, [r7, #20]
 8011b6c:	429a      	cmp	r2, r3
 8011b6e:	d20b      	bcs.n	8011b88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011b70:	683b      	ldr	r3, [r7, #0]
 8011b72:	681a      	ldr	r2, [r3, #0]
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	1ad2      	subs	r2, r2, r3
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f7ff ff9b 	bl	8011ab8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011b82:	2300      	movs	r3, #0
 8011b84:	61fb      	str	r3, [r7, #28]
 8011b86:	e004      	b.n	8011b92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011b8e:	2301      	movs	r3, #1
 8011b90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011b92:	f001 f88f 	bl	8012cb4 <vPortExitCritical>

	return xReturn;
 8011b96:	69fb      	ldr	r3, [r7, #28]
}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	3720      	adds	r7, #32
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}
 8011ba0:	20001e14 	.word	0x20001e14
 8011ba4:	20001e28 	.word	0x20001e28

08011ba8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011ba8:	b480      	push	{r7}
 8011baa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011bac:	4b03      	ldr	r3, [pc, #12]	; (8011bbc <vTaskMissedYield+0x14>)
 8011bae:	2201      	movs	r2, #1
 8011bb0:	601a      	str	r2, [r3, #0]
}
 8011bb2:	bf00      	nop
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bba:	4770      	bx	lr
 8011bbc:	20001e24 	.word	0x20001e24

08011bc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011bc8:	f000 f852 	bl	8011c70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011bcc:	4b06      	ldr	r3, [pc, #24]	; (8011be8 <prvIdleTask+0x28>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	2b01      	cmp	r3, #1
 8011bd2:	d9f9      	bls.n	8011bc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011bd4:	4b05      	ldr	r3, [pc, #20]	; (8011bec <prvIdleTask+0x2c>)
 8011bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bda:	601a      	str	r2, [r3, #0]
 8011bdc:	f3bf 8f4f 	dsb	sy
 8011be0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011be4:	e7f0      	b.n	8011bc8 <prvIdleTask+0x8>
 8011be6:	bf00      	nop
 8011be8:	20001d14 	.word	0x20001d14
 8011bec:	e000ed04 	.word	0xe000ed04

08011bf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b082      	sub	sp, #8
 8011bf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	607b      	str	r3, [r7, #4]
 8011bfa:	e00c      	b.n	8011c16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011bfc:	687a      	ldr	r2, [r7, #4]
 8011bfe:	4613      	mov	r3, r2
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	4413      	add	r3, r2
 8011c04:	009b      	lsls	r3, r3, #2
 8011c06:	4a12      	ldr	r2, [pc, #72]	; (8011c50 <prvInitialiseTaskLists+0x60>)
 8011c08:	4413      	add	r3, r2
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7fe f9f4 	bl	800fff8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	3301      	adds	r3, #1
 8011c14:	607b      	str	r3, [r7, #4]
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	2b06      	cmp	r3, #6
 8011c1a:	d9ef      	bls.n	8011bfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011c1c:	480d      	ldr	r0, [pc, #52]	; (8011c54 <prvInitialiseTaskLists+0x64>)
 8011c1e:	f7fe f9eb 	bl	800fff8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011c22:	480d      	ldr	r0, [pc, #52]	; (8011c58 <prvInitialiseTaskLists+0x68>)
 8011c24:	f7fe f9e8 	bl	800fff8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011c28:	480c      	ldr	r0, [pc, #48]	; (8011c5c <prvInitialiseTaskLists+0x6c>)
 8011c2a:	f7fe f9e5 	bl	800fff8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011c2e:	480c      	ldr	r0, [pc, #48]	; (8011c60 <prvInitialiseTaskLists+0x70>)
 8011c30:	f7fe f9e2 	bl	800fff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011c34:	480b      	ldr	r0, [pc, #44]	; (8011c64 <prvInitialiseTaskLists+0x74>)
 8011c36:	f7fe f9df 	bl	800fff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011c3a:	4b0b      	ldr	r3, [pc, #44]	; (8011c68 <prvInitialiseTaskLists+0x78>)
 8011c3c:	4a05      	ldr	r2, [pc, #20]	; (8011c54 <prvInitialiseTaskLists+0x64>)
 8011c3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011c40:	4b0a      	ldr	r3, [pc, #40]	; (8011c6c <prvInitialiseTaskLists+0x7c>)
 8011c42:	4a05      	ldr	r2, [pc, #20]	; (8011c58 <prvInitialiseTaskLists+0x68>)
 8011c44:	601a      	str	r2, [r3, #0]
}
 8011c46:	bf00      	nop
 8011c48:	3708      	adds	r7, #8
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}
 8011c4e:	bf00      	nop
 8011c50:	20001d14 	.word	0x20001d14
 8011c54:	20001da0 	.word	0x20001da0
 8011c58:	20001db4 	.word	0x20001db4
 8011c5c:	20001dd0 	.word	0x20001dd0
 8011c60:	20001de4 	.word	0x20001de4
 8011c64:	20001dfc 	.word	0x20001dfc
 8011c68:	20001dc8 	.word	0x20001dc8
 8011c6c:	20001dcc 	.word	0x20001dcc

08011c70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b082      	sub	sp, #8
 8011c74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011c76:	e019      	b.n	8011cac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011c78:	f000 ffec 	bl	8012c54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c7c:	4b10      	ldr	r3, [pc, #64]	; (8011cc0 <prvCheckTasksWaitingTermination+0x50>)
 8011c7e:	68db      	ldr	r3, [r3, #12]
 8011c80:	68db      	ldr	r3, [r3, #12]
 8011c82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	3304      	adds	r3, #4
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7fe fa3f 	bl	801010c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011c8e:	4b0d      	ldr	r3, [pc, #52]	; (8011cc4 <prvCheckTasksWaitingTermination+0x54>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	3b01      	subs	r3, #1
 8011c94:	4a0b      	ldr	r2, [pc, #44]	; (8011cc4 <prvCheckTasksWaitingTermination+0x54>)
 8011c96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011c98:	4b0b      	ldr	r3, [pc, #44]	; (8011cc8 <prvCheckTasksWaitingTermination+0x58>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	3b01      	subs	r3, #1
 8011c9e:	4a0a      	ldr	r2, [pc, #40]	; (8011cc8 <prvCheckTasksWaitingTermination+0x58>)
 8011ca0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011ca2:	f001 f807 	bl	8012cb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011ca6:	6878      	ldr	r0, [r7, #4]
 8011ca8:	f000 f810 	bl	8011ccc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011cac:	4b06      	ldr	r3, [pc, #24]	; (8011cc8 <prvCheckTasksWaitingTermination+0x58>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d1e1      	bne.n	8011c78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011cb4:	bf00      	nop
 8011cb6:	bf00      	nop
 8011cb8:	3708      	adds	r7, #8
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
 8011cbe:	bf00      	nop
 8011cc0:	20001de4 	.word	0x20001de4
 8011cc4:	20001e10 	.word	0x20001e10
 8011cc8:	20001df8 	.word	0x20001df8

08011ccc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b084      	sub	sp, #16
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d108      	bne.n	8011cf0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f001 f9a4 	bl	8013030 <vPortFree>
				vPortFree( pxTCB );
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f001 f9a1 	bl	8013030 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011cee:	e018      	b.n	8011d22 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011cf6:	2b01      	cmp	r3, #1
 8011cf8:	d103      	bne.n	8011d02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f001 f998 	bl	8013030 <vPortFree>
	}
 8011d00:	e00f      	b.n	8011d22 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011d08:	2b02      	cmp	r3, #2
 8011d0a:	d00a      	beq.n	8011d22 <prvDeleteTCB+0x56>
	__asm volatile
 8011d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d10:	f383 8811 	msr	BASEPRI, r3
 8011d14:	f3bf 8f6f 	isb	sy
 8011d18:	f3bf 8f4f 	dsb	sy
 8011d1c:	60fb      	str	r3, [r7, #12]
}
 8011d1e:	bf00      	nop
 8011d20:	e7fe      	b.n	8011d20 <prvDeleteTCB+0x54>
	}
 8011d22:	bf00      	nop
 8011d24:	3710      	adds	r7, #16
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}
	...

08011d2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011d2c:	b480      	push	{r7}
 8011d2e:	b083      	sub	sp, #12
 8011d30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011d32:	4b0c      	ldr	r3, [pc, #48]	; (8011d64 <prvResetNextTaskUnblockTime+0x38>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d104      	bne.n	8011d46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011d3c:	4b0a      	ldr	r3, [pc, #40]	; (8011d68 <prvResetNextTaskUnblockTime+0x3c>)
 8011d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8011d42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011d44:	e008      	b.n	8011d58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d46:	4b07      	ldr	r3, [pc, #28]	; (8011d64 <prvResetNextTaskUnblockTime+0x38>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	68db      	ldr	r3, [r3, #12]
 8011d4c:	68db      	ldr	r3, [r3, #12]
 8011d4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	685b      	ldr	r3, [r3, #4]
 8011d54:	4a04      	ldr	r2, [pc, #16]	; (8011d68 <prvResetNextTaskUnblockTime+0x3c>)
 8011d56:	6013      	str	r3, [r2, #0]
}
 8011d58:	bf00      	nop
 8011d5a:	370c      	adds	r7, #12
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d62:	4770      	bx	lr
 8011d64:	20001dc8 	.word	0x20001dc8
 8011d68:	20001e30 	.word	0x20001e30

08011d6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011d6c:	b480      	push	{r7}
 8011d6e:	b083      	sub	sp, #12
 8011d70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011d72:	4b0b      	ldr	r3, [pc, #44]	; (8011da0 <xTaskGetSchedulerState+0x34>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d102      	bne.n	8011d80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	607b      	str	r3, [r7, #4]
 8011d7e:	e008      	b.n	8011d92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d80:	4b08      	ldr	r3, [pc, #32]	; (8011da4 <xTaskGetSchedulerState+0x38>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d102      	bne.n	8011d8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011d88:	2302      	movs	r3, #2
 8011d8a:	607b      	str	r3, [r7, #4]
 8011d8c:	e001      	b.n	8011d92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011d92:	687b      	ldr	r3, [r7, #4]
	}
 8011d94:	4618      	mov	r0, r3
 8011d96:	370c      	adds	r7, #12
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9e:	4770      	bx	lr
 8011da0:	20001e1c 	.word	0x20001e1c
 8011da4:	20001e38 	.word	0x20001e38

08011da8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b084      	sub	sp, #16
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011db4:	2300      	movs	r3, #0
 8011db6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d05e      	beq.n	8011e7c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dc2:	4b31      	ldr	r3, [pc, #196]	; (8011e88 <xTaskPriorityInherit+0xe0>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d24e      	bcs.n	8011e6a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	699b      	ldr	r3, [r3, #24]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	db06      	blt.n	8011de2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011dd4:	4b2c      	ldr	r3, [pc, #176]	; (8011e88 <xTaskPriorityInherit+0xe0>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dda:	f1c3 0207 	rsb	r2, r3, #7
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011de2:	68bb      	ldr	r3, [r7, #8]
 8011de4:	6959      	ldr	r1, [r3, #20]
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dea:	4613      	mov	r3, r2
 8011dec:	009b      	lsls	r3, r3, #2
 8011dee:	4413      	add	r3, r2
 8011df0:	009b      	lsls	r3, r3, #2
 8011df2:	4a26      	ldr	r2, [pc, #152]	; (8011e8c <xTaskPriorityInherit+0xe4>)
 8011df4:	4413      	add	r3, r2
 8011df6:	4299      	cmp	r1, r3
 8011df8:	d12f      	bne.n	8011e5a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011dfa:	68bb      	ldr	r3, [r7, #8]
 8011dfc:	3304      	adds	r3, #4
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7fe f984 	bl	801010c <uxListRemove>
 8011e04:	4603      	mov	r3, r0
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d10a      	bne.n	8011e20 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011e0a:	68bb      	ldr	r3, [r7, #8]
 8011e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e0e:	2201      	movs	r2, #1
 8011e10:	fa02 f303 	lsl.w	r3, r2, r3
 8011e14:	43da      	mvns	r2, r3
 8011e16:	4b1e      	ldr	r3, [pc, #120]	; (8011e90 <xTaskPriorityInherit+0xe8>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	4013      	ands	r3, r2
 8011e1c:	4a1c      	ldr	r2, [pc, #112]	; (8011e90 <xTaskPriorityInherit+0xe8>)
 8011e1e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011e20:	4b19      	ldr	r3, [pc, #100]	; (8011e88 <xTaskPriorityInherit+0xe0>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011e2a:	68bb      	ldr	r3, [r7, #8]
 8011e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e2e:	2201      	movs	r2, #1
 8011e30:	409a      	lsls	r2, r3
 8011e32:	4b17      	ldr	r3, [pc, #92]	; (8011e90 <xTaskPriorityInherit+0xe8>)
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	4313      	orrs	r3, r2
 8011e38:	4a15      	ldr	r2, [pc, #84]	; (8011e90 <xTaskPriorityInherit+0xe8>)
 8011e3a:	6013      	str	r3, [r2, #0]
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e40:	4613      	mov	r3, r2
 8011e42:	009b      	lsls	r3, r3, #2
 8011e44:	4413      	add	r3, r2
 8011e46:	009b      	lsls	r3, r3, #2
 8011e48:	4a10      	ldr	r2, [pc, #64]	; (8011e8c <xTaskPriorityInherit+0xe4>)
 8011e4a:	441a      	add	r2, r3
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	3304      	adds	r3, #4
 8011e50:	4619      	mov	r1, r3
 8011e52:	4610      	mov	r0, r2
 8011e54:	f7fe f8fd 	bl	8010052 <vListInsertEnd>
 8011e58:	e004      	b.n	8011e64 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011e5a:	4b0b      	ldr	r3, [pc, #44]	; (8011e88 <xTaskPriorityInherit+0xe0>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011e64:	2301      	movs	r3, #1
 8011e66:	60fb      	str	r3, [r7, #12]
 8011e68:	e008      	b.n	8011e7c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011e6e:	4b06      	ldr	r3, [pc, #24]	; (8011e88 <xTaskPriorityInherit+0xe0>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d201      	bcs.n	8011e7c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011e78:	2301      	movs	r3, #1
 8011e7a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011e7c:	68fb      	ldr	r3, [r7, #12]
	}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	3710      	adds	r7, #16
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}
 8011e86:	bf00      	nop
 8011e88:	20001d10 	.word	0x20001d10
 8011e8c:	20001d14 	.word	0x20001d14
 8011e90:	20001e18 	.word	0x20001e18

08011e94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b086      	sub	sp, #24
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d06e      	beq.n	8011f88 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011eaa:	4b3a      	ldr	r3, [pc, #232]	; (8011f94 <xTaskPriorityDisinherit+0x100>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	693a      	ldr	r2, [r7, #16]
 8011eb0:	429a      	cmp	r2, r3
 8011eb2:	d00a      	beq.n	8011eca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eb8:	f383 8811 	msr	BASEPRI, r3
 8011ebc:	f3bf 8f6f 	isb	sy
 8011ec0:	f3bf 8f4f 	dsb	sy
 8011ec4:	60fb      	str	r3, [r7, #12]
}
 8011ec6:	bf00      	nop
 8011ec8:	e7fe      	b.n	8011ec8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011eca:	693b      	ldr	r3, [r7, #16]
 8011ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d10a      	bne.n	8011ee8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ed6:	f383 8811 	msr	BASEPRI, r3
 8011eda:	f3bf 8f6f 	isb	sy
 8011ede:	f3bf 8f4f 	dsb	sy
 8011ee2:	60bb      	str	r3, [r7, #8]
}
 8011ee4:	bf00      	nop
 8011ee6:	e7fe      	b.n	8011ee6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011ee8:	693b      	ldr	r3, [r7, #16]
 8011eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011eec:	1e5a      	subs	r2, r3, #1
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011ef2:	693b      	ldr	r3, [r7, #16]
 8011ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d044      	beq.n	8011f88 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d140      	bne.n	8011f88 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f06:	693b      	ldr	r3, [r7, #16]
 8011f08:	3304      	adds	r3, #4
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f7fe f8fe 	bl	801010c <uxListRemove>
 8011f10:	4603      	mov	r3, r0
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d115      	bne.n	8011f42 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011f16:	693b      	ldr	r3, [r7, #16]
 8011f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f1a:	491f      	ldr	r1, [pc, #124]	; (8011f98 <xTaskPriorityDisinherit+0x104>)
 8011f1c:	4613      	mov	r3, r2
 8011f1e:	009b      	lsls	r3, r3, #2
 8011f20:	4413      	add	r3, r2
 8011f22:	009b      	lsls	r3, r3, #2
 8011f24:	440b      	add	r3, r1
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d10a      	bne.n	8011f42 <xTaskPriorityDisinherit+0xae>
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f30:	2201      	movs	r2, #1
 8011f32:	fa02 f303 	lsl.w	r3, r2, r3
 8011f36:	43da      	mvns	r2, r3
 8011f38:	4b18      	ldr	r3, [pc, #96]	; (8011f9c <xTaskPriorityDisinherit+0x108>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	4013      	ands	r3, r2
 8011f3e:	4a17      	ldr	r2, [pc, #92]	; (8011f9c <xTaskPriorityDisinherit+0x108>)
 8011f40:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011f46:	693b      	ldr	r3, [r7, #16]
 8011f48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f4e:	f1c3 0207 	rsb	r2, r3, #7
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f5a:	2201      	movs	r2, #1
 8011f5c:	409a      	lsls	r2, r3
 8011f5e:	4b0f      	ldr	r3, [pc, #60]	; (8011f9c <xTaskPriorityDisinherit+0x108>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	4313      	orrs	r3, r2
 8011f64:	4a0d      	ldr	r2, [pc, #52]	; (8011f9c <xTaskPriorityDisinherit+0x108>)
 8011f66:	6013      	str	r3, [r2, #0]
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f6c:	4613      	mov	r3, r2
 8011f6e:	009b      	lsls	r3, r3, #2
 8011f70:	4413      	add	r3, r2
 8011f72:	009b      	lsls	r3, r3, #2
 8011f74:	4a08      	ldr	r2, [pc, #32]	; (8011f98 <xTaskPriorityDisinherit+0x104>)
 8011f76:	441a      	add	r2, r3
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	3304      	adds	r3, #4
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	4610      	mov	r0, r2
 8011f80:	f7fe f867 	bl	8010052 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011f84:	2301      	movs	r3, #1
 8011f86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011f88:	697b      	ldr	r3, [r7, #20]
	}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3718      	adds	r7, #24
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}
 8011f92:	bf00      	nop
 8011f94:	20001d10 	.word	0x20001d10
 8011f98:	20001d14 	.word	0x20001d14
 8011f9c:	20001e18 	.word	0x20001e18

08011fa0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b088      	sub	sp, #32
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
 8011fa8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011fae:	2301      	movs	r3, #1
 8011fb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d077      	beq.n	80120a8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011fb8:	69bb      	ldr	r3, [r7, #24]
 8011fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d10a      	bne.n	8011fd6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fc4:	f383 8811 	msr	BASEPRI, r3
 8011fc8:	f3bf 8f6f 	isb	sy
 8011fcc:	f3bf 8f4f 	dsb	sy
 8011fd0:	60fb      	str	r3, [r7, #12]
}
 8011fd2:	bf00      	nop
 8011fd4:	e7fe      	b.n	8011fd4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011fd6:	69bb      	ldr	r3, [r7, #24]
 8011fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fda:	683a      	ldr	r2, [r7, #0]
 8011fdc:	429a      	cmp	r2, r3
 8011fde:	d902      	bls.n	8011fe6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	61fb      	str	r3, [r7, #28]
 8011fe4:	e002      	b.n	8011fec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011fe6:	69bb      	ldr	r3, [r7, #24]
 8011fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011fec:	69bb      	ldr	r3, [r7, #24]
 8011fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ff0:	69fa      	ldr	r2, [r7, #28]
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	d058      	beq.n	80120a8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011ff6:	69bb      	ldr	r3, [r7, #24]
 8011ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ffa:	697a      	ldr	r2, [r7, #20]
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	d153      	bne.n	80120a8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012000:	4b2b      	ldr	r3, [pc, #172]	; (80120b0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	69ba      	ldr	r2, [r7, #24]
 8012006:	429a      	cmp	r2, r3
 8012008:	d10a      	bne.n	8012020 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801200a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801200e:	f383 8811 	msr	BASEPRI, r3
 8012012:	f3bf 8f6f 	isb	sy
 8012016:	f3bf 8f4f 	dsb	sy
 801201a:	60bb      	str	r3, [r7, #8]
}
 801201c:	bf00      	nop
 801201e:	e7fe      	b.n	801201e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012020:	69bb      	ldr	r3, [r7, #24]
 8012022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012024:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012026:	69bb      	ldr	r3, [r7, #24]
 8012028:	69fa      	ldr	r2, [r7, #28]
 801202a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801202c:	69bb      	ldr	r3, [r7, #24]
 801202e:	699b      	ldr	r3, [r3, #24]
 8012030:	2b00      	cmp	r3, #0
 8012032:	db04      	blt.n	801203e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012034:	69fb      	ldr	r3, [r7, #28]
 8012036:	f1c3 0207 	rsb	r2, r3, #7
 801203a:	69bb      	ldr	r3, [r7, #24]
 801203c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801203e:	69bb      	ldr	r3, [r7, #24]
 8012040:	6959      	ldr	r1, [r3, #20]
 8012042:	693a      	ldr	r2, [r7, #16]
 8012044:	4613      	mov	r3, r2
 8012046:	009b      	lsls	r3, r3, #2
 8012048:	4413      	add	r3, r2
 801204a:	009b      	lsls	r3, r3, #2
 801204c:	4a19      	ldr	r2, [pc, #100]	; (80120b4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801204e:	4413      	add	r3, r2
 8012050:	4299      	cmp	r1, r3
 8012052:	d129      	bne.n	80120a8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012054:	69bb      	ldr	r3, [r7, #24]
 8012056:	3304      	adds	r3, #4
 8012058:	4618      	mov	r0, r3
 801205a:	f7fe f857 	bl	801010c <uxListRemove>
 801205e:	4603      	mov	r3, r0
 8012060:	2b00      	cmp	r3, #0
 8012062:	d10a      	bne.n	801207a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8012064:	69bb      	ldr	r3, [r7, #24]
 8012066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012068:	2201      	movs	r2, #1
 801206a:	fa02 f303 	lsl.w	r3, r2, r3
 801206e:	43da      	mvns	r2, r3
 8012070:	4b11      	ldr	r3, [pc, #68]	; (80120b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	4013      	ands	r3, r2
 8012076:	4a10      	ldr	r2, [pc, #64]	; (80120b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012078:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801207a:	69bb      	ldr	r3, [r7, #24]
 801207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801207e:	2201      	movs	r2, #1
 8012080:	409a      	lsls	r2, r3
 8012082:	4b0d      	ldr	r3, [pc, #52]	; (80120b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	4313      	orrs	r3, r2
 8012088:	4a0b      	ldr	r2, [pc, #44]	; (80120b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801208a:	6013      	str	r3, [r2, #0]
 801208c:	69bb      	ldr	r3, [r7, #24]
 801208e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012090:	4613      	mov	r3, r2
 8012092:	009b      	lsls	r3, r3, #2
 8012094:	4413      	add	r3, r2
 8012096:	009b      	lsls	r3, r3, #2
 8012098:	4a06      	ldr	r2, [pc, #24]	; (80120b4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801209a:	441a      	add	r2, r3
 801209c:	69bb      	ldr	r3, [r7, #24]
 801209e:	3304      	adds	r3, #4
 80120a0:	4619      	mov	r1, r3
 80120a2:	4610      	mov	r0, r2
 80120a4:	f7fd ffd5 	bl	8010052 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80120a8:	bf00      	nop
 80120aa:	3720      	adds	r7, #32
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}
 80120b0:	20001d10 	.word	0x20001d10
 80120b4:	20001d14 	.word	0x20001d14
 80120b8:	20001e18 	.word	0x20001e18

080120bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80120bc:	b480      	push	{r7}
 80120be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80120c0:	4b07      	ldr	r3, [pc, #28]	; (80120e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d004      	beq.n	80120d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80120c8:	4b05      	ldr	r3, [pc, #20]	; (80120e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80120ce:	3201      	adds	r2, #1
 80120d0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80120d2:	4b03      	ldr	r3, [pc, #12]	; (80120e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80120d4:	681b      	ldr	r3, [r3, #0]
	}
 80120d6:	4618      	mov	r0, r3
 80120d8:	46bd      	mov	sp, r7
 80120da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120de:	4770      	bx	lr
 80120e0:	20001d10 	.word	0x20001d10

080120e4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b086      	sub	sp, #24
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	60f8      	str	r0, [r7, #12]
 80120ec:	60b9      	str	r1, [r7, #8]
 80120ee:	607a      	str	r2, [r7, #4]
 80120f0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80120f2:	f000 fdaf 	bl	8012c54 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80120f6:	4b26      	ldr	r3, [pc, #152]	; (8012190 <xTaskNotifyWait+0xac>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80120fe:	b2db      	uxtb	r3, r3
 8012100:	2b02      	cmp	r3, #2
 8012102:	d01a      	beq.n	801213a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8012104:	4b22      	ldr	r3, [pc, #136]	; (8012190 <xTaskNotifyWait+0xac>)
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801210a:	68fa      	ldr	r2, [r7, #12]
 801210c:	43d2      	mvns	r2, r2
 801210e:	400a      	ands	r2, r1
 8012110:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8012112:	4b1f      	ldr	r3, [pc, #124]	; (8012190 <xTaskNotifyWait+0xac>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	2201      	movs	r2, #1
 8012118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d00b      	beq.n	801213a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012122:	2101      	movs	r1, #1
 8012124:	6838      	ldr	r0, [r7, #0]
 8012126:	f000 f837 	bl	8012198 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801212a:	4b1a      	ldr	r3, [pc, #104]	; (8012194 <xTaskNotifyWait+0xb0>)
 801212c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012130:	601a      	str	r2, [r3, #0]
 8012132:	f3bf 8f4f 	dsb	sy
 8012136:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801213a:	f000 fdbb 	bl	8012cb4 <vPortExitCritical>

		taskENTER_CRITICAL();
 801213e:	f000 fd89 	bl	8012c54 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d004      	beq.n	8012152 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8012148:	4b11      	ldr	r3, [pc, #68]	; (8012190 <xTaskNotifyWait+0xac>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012152:	4b0f      	ldr	r3, [pc, #60]	; (8012190 <xTaskNotifyWait+0xac>)
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801215a:	b2db      	uxtb	r3, r3
 801215c:	2b02      	cmp	r3, #2
 801215e:	d002      	beq.n	8012166 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8012160:	2300      	movs	r3, #0
 8012162:	617b      	str	r3, [r7, #20]
 8012164:	e008      	b.n	8012178 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8012166:	4b0a      	ldr	r3, [pc, #40]	; (8012190 <xTaskNotifyWait+0xac>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801216c:	68ba      	ldr	r2, [r7, #8]
 801216e:	43d2      	mvns	r2, r2
 8012170:	400a      	ands	r2, r1
 8012172:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8012174:	2301      	movs	r3, #1
 8012176:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012178:	4b05      	ldr	r3, [pc, #20]	; (8012190 <xTaskNotifyWait+0xac>)
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	2200      	movs	r2, #0
 801217e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8012182:	f000 fd97 	bl	8012cb4 <vPortExitCritical>

		return xReturn;
 8012186:	697b      	ldr	r3, [r7, #20]
	}
 8012188:	4618      	mov	r0, r3
 801218a:	3718      	adds	r7, #24
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}
 8012190:	20001d10 	.word	0x20001d10
 8012194:	e000ed04 	.word	0xe000ed04

08012198 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b084      	sub	sp, #16
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
 80121a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80121a2:	4b29      	ldr	r3, [pc, #164]	; (8012248 <prvAddCurrentTaskToDelayedList+0xb0>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80121a8:	4b28      	ldr	r3, [pc, #160]	; (801224c <prvAddCurrentTaskToDelayedList+0xb4>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	3304      	adds	r3, #4
 80121ae:	4618      	mov	r0, r3
 80121b0:	f7fd ffac 	bl	801010c <uxListRemove>
 80121b4:	4603      	mov	r3, r0
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d10b      	bne.n	80121d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80121ba:	4b24      	ldr	r3, [pc, #144]	; (801224c <prvAddCurrentTaskToDelayedList+0xb4>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121c0:	2201      	movs	r2, #1
 80121c2:	fa02 f303 	lsl.w	r3, r2, r3
 80121c6:	43da      	mvns	r2, r3
 80121c8:	4b21      	ldr	r3, [pc, #132]	; (8012250 <prvAddCurrentTaskToDelayedList+0xb8>)
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	4013      	ands	r3, r2
 80121ce:	4a20      	ldr	r2, [pc, #128]	; (8012250 <prvAddCurrentTaskToDelayedList+0xb8>)
 80121d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121d8:	d10a      	bne.n	80121f0 <prvAddCurrentTaskToDelayedList+0x58>
 80121da:	683b      	ldr	r3, [r7, #0]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d007      	beq.n	80121f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80121e0:	4b1a      	ldr	r3, [pc, #104]	; (801224c <prvAddCurrentTaskToDelayedList+0xb4>)
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	3304      	adds	r3, #4
 80121e6:	4619      	mov	r1, r3
 80121e8:	481a      	ldr	r0, [pc, #104]	; (8012254 <prvAddCurrentTaskToDelayedList+0xbc>)
 80121ea:	f7fd ff32 	bl	8010052 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80121ee:	e026      	b.n	801223e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80121f0:	68fa      	ldr	r2, [r7, #12]
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	4413      	add	r3, r2
 80121f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80121f8:	4b14      	ldr	r3, [pc, #80]	; (801224c <prvAddCurrentTaskToDelayedList+0xb4>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	68ba      	ldr	r2, [r7, #8]
 80121fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012200:	68ba      	ldr	r2, [r7, #8]
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	429a      	cmp	r2, r3
 8012206:	d209      	bcs.n	801221c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012208:	4b13      	ldr	r3, [pc, #76]	; (8012258 <prvAddCurrentTaskToDelayedList+0xc0>)
 801220a:	681a      	ldr	r2, [r3, #0]
 801220c:	4b0f      	ldr	r3, [pc, #60]	; (801224c <prvAddCurrentTaskToDelayedList+0xb4>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	3304      	adds	r3, #4
 8012212:	4619      	mov	r1, r3
 8012214:	4610      	mov	r0, r2
 8012216:	f7fd ff40 	bl	801009a <vListInsert>
}
 801221a:	e010      	b.n	801223e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801221c:	4b0f      	ldr	r3, [pc, #60]	; (801225c <prvAddCurrentTaskToDelayedList+0xc4>)
 801221e:	681a      	ldr	r2, [r3, #0]
 8012220:	4b0a      	ldr	r3, [pc, #40]	; (801224c <prvAddCurrentTaskToDelayedList+0xb4>)
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	3304      	adds	r3, #4
 8012226:	4619      	mov	r1, r3
 8012228:	4610      	mov	r0, r2
 801222a:	f7fd ff36 	bl	801009a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801222e:	4b0c      	ldr	r3, [pc, #48]	; (8012260 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	68ba      	ldr	r2, [r7, #8]
 8012234:	429a      	cmp	r2, r3
 8012236:	d202      	bcs.n	801223e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012238:	4a09      	ldr	r2, [pc, #36]	; (8012260 <prvAddCurrentTaskToDelayedList+0xc8>)
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	6013      	str	r3, [r2, #0]
}
 801223e:	bf00      	nop
 8012240:	3710      	adds	r7, #16
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}
 8012246:	bf00      	nop
 8012248:	20001e14 	.word	0x20001e14
 801224c:	20001d10 	.word	0x20001d10
 8012250:	20001e18 	.word	0x20001e18
 8012254:	20001dfc 	.word	0x20001dfc
 8012258:	20001dcc 	.word	0x20001dcc
 801225c:	20001dc8 	.word	0x20001dc8
 8012260:	20001e30 	.word	0x20001e30

08012264 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b08a      	sub	sp, #40	; 0x28
 8012268:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801226a:	2300      	movs	r3, #0
 801226c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801226e:	f000 fb85 	bl	801297c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012272:	4b1c      	ldr	r3, [pc, #112]	; (80122e4 <xTimerCreateTimerTask+0x80>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d021      	beq.n	80122be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801227a:	2300      	movs	r3, #0
 801227c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801227e:	2300      	movs	r3, #0
 8012280:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012282:	1d3a      	adds	r2, r7, #4
 8012284:	f107 0108 	add.w	r1, r7, #8
 8012288:	f107 030c 	add.w	r3, r7, #12
 801228c:	4618      	mov	r0, r3
 801228e:	f7f0 f965 	bl	800255c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012292:	6879      	ldr	r1, [r7, #4]
 8012294:	68bb      	ldr	r3, [r7, #8]
 8012296:	68fa      	ldr	r2, [r7, #12]
 8012298:	9202      	str	r2, [sp, #8]
 801229a:	9301      	str	r3, [sp, #4]
 801229c:	2302      	movs	r3, #2
 801229e:	9300      	str	r3, [sp, #0]
 80122a0:	2300      	movs	r3, #0
 80122a2:	460a      	mov	r2, r1
 80122a4:	4910      	ldr	r1, [pc, #64]	; (80122e8 <xTimerCreateTimerTask+0x84>)
 80122a6:	4811      	ldr	r0, [pc, #68]	; (80122ec <xTimerCreateTimerTask+0x88>)
 80122a8:	f7fe ff46 	bl	8011138 <xTaskCreateStatic>
 80122ac:	4603      	mov	r3, r0
 80122ae:	4a10      	ldr	r2, [pc, #64]	; (80122f0 <xTimerCreateTimerTask+0x8c>)
 80122b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80122b2:	4b0f      	ldr	r3, [pc, #60]	; (80122f0 <xTimerCreateTimerTask+0x8c>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d001      	beq.n	80122be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80122ba:	2301      	movs	r3, #1
 80122bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d10a      	bne.n	80122da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80122c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122c8:	f383 8811 	msr	BASEPRI, r3
 80122cc:	f3bf 8f6f 	isb	sy
 80122d0:	f3bf 8f4f 	dsb	sy
 80122d4:	613b      	str	r3, [r7, #16]
}
 80122d6:	bf00      	nop
 80122d8:	e7fe      	b.n	80122d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80122da:	697b      	ldr	r3, [r7, #20]
}
 80122dc:	4618      	mov	r0, r3
 80122de:	3718      	adds	r7, #24
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}
 80122e4:	20001e6c 	.word	0x20001e6c
 80122e8:	08016b9c 	.word	0x08016b9c
 80122ec:	0801255d 	.word	0x0801255d
 80122f0:	20001e70 	.word	0x20001e70

080122f4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b088      	sub	sp, #32
 80122f8:	af02      	add	r7, sp, #8
 80122fa:	60f8      	str	r0, [r7, #12]
 80122fc:	60b9      	str	r1, [r7, #8]
 80122fe:	607a      	str	r2, [r7, #4]
 8012300:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8012302:	2028      	movs	r0, #40	; 0x28
 8012304:	f000 fdc8 	bl	8012e98 <pvPortMalloc>
 8012308:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d00d      	beq.n	801232c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	2200      	movs	r2, #0
 8012314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	9301      	str	r3, [sp, #4]
 801231c:	6a3b      	ldr	r3, [r7, #32]
 801231e:	9300      	str	r3, [sp, #0]
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	687a      	ldr	r2, [r7, #4]
 8012324:	68b9      	ldr	r1, [r7, #8]
 8012326:	68f8      	ldr	r0, [r7, #12]
 8012328:	f000 f843 	bl	80123b2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801232c:	697b      	ldr	r3, [r7, #20]
	}
 801232e:	4618      	mov	r0, r3
 8012330:	3718      	adds	r7, #24
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}

08012336 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8012336:	b580      	push	{r7, lr}
 8012338:	b08a      	sub	sp, #40	; 0x28
 801233a:	af02      	add	r7, sp, #8
 801233c:	60f8      	str	r0, [r7, #12]
 801233e:	60b9      	str	r1, [r7, #8]
 8012340:	607a      	str	r2, [r7, #4]
 8012342:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8012344:	2328      	movs	r3, #40	; 0x28
 8012346:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8012348:	693b      	ldr	r3, [r7, #16]
 801234a:	2b28      	cmp	r3, #40	; 0x28
 801234c:	d00a      	beq.n	8012364 <xTimerCreateStatic+0x2e>
	__asm volatile
 801234e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012352:	f383 8811 	msr	BASEPRI, r3
 8012356:	f3bf 8f6f 	isb	sy
 801235a:	f3bf 8f4f 	dsb	sy
 801235e:	61bb      	str	r3, [r7, #24]
}
 8012360:	bf00      	nop
 8012362:	e7fe      	b.n	8012362 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012364:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8012366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012368:	2b00      	cmp	r3, #0
 801236a:	d10a      	bne.n	8012382 <xTimerCreateStatic+0x4c>
	__asm volatile
 801236c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012370:	f383 8811 	msr	BASEPRI, r3
 8012374:	f3bf 8f6f 	isb	sy
 8012378:	f3bf 8f4f 	dsb	sy
 801237c:	617b      	str	r3, [r7, #20]
}
 801237e:	bf00      	nop
 8012380:	e7fe      	b.n	8012380 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8012382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012384:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8012386:	69fb      	ldr	r3, [r7, #28]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d00d      	beq.n	80123a8 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 801238c:	69fb      	ldr	r3, [r7, #28]
 801238e:	2202      	movs	r2, #2
 8012390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012394:	69fb      	ldr	r3, [r7, #28]
 8012396:	9301      	str	r3, [sp, #4]
 8012398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801239a:	9300      	str	r3, [sp, #0]
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	687a      	ldr	r2, [r7, #4]
 80123a0:	68b9      	ldr	r1, [r7, #8]
 80123a2:	68f8      	ldr	r0, [r7, #12]
 80123a4:	f000 f805 	bl	80123b2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80123a8:	69fb      	ldr	r3, [r7, #28]
	}
 80123aa:	4618      	mov	r0, r3
 80123ac:	3720      	adds	r7, #32
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}

080123b2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80123b2:	b580      	push	{r7, lr}
 80123b4:	b086      	sub	sp, #24
 80123b6:	af00      	add	r7, sp, #0
 80123b8:	60f8      	str	r0, [r7, #12]
 80123ba:	60b9      	str	r1, [r7, #8]
 80123bc:	607a      	str	r2, [r7, #4]
 80123be:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80123c0:	68bb      	ldr	r3, [r7, #8]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d10a      	bne.n	80123dc <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80123c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ca:	f383 8811 	msr	BASEPRI, r3
 80123ce:	f3bf 8f6f 	isb	sy
 80123d2:	f3bf 8f4f 	dsb	sy
 80123d6:	617b      	str	r3, [r7, #20]
}
 80123d8:	bf00      	nop
 80123da:	e7fe      	b.n	80123da <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80123dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d01e      	beq.n	8012420 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80123e2:	f000 facb 	bl	801297c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80123e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e8:	68fa      	ldr	r2, [r7, #12]
 80123ea:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80123ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ee:	68ba      	ldr	r2, [r7, #8]
 80123f0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80123f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f4:	683a      	ldr	r2, [r7, #0]
 80123f6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80123f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123fa:	6a3a      	ldr	r2, [r7, #32]
 80123fc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80123fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012400:	3304      	adds	r3, #4
 8012402:	4618      	mov	r0, r3
 8012404:	f7fd fe18 	bl	8010038 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d008      	beq.n	8012420 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 801240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012410:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012414:	f043 0304 	orr.w	r3, r3, #4
 8012418:	b2da      	uxtb	r2, r3
 801241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801241c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8012420:	bf00      	nop
 8012422:	3718      	adds	r7, #24
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}

08012428 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b08a      	sub	sp, #40	; 0x28
 801242c:	af00      	add	r7, sp, #0
 801242e:	60f8      	str	r0, [r7, #12]
 8012430:	60b9      	str	r1, [r7, #8]
 8012432:	607a      	str	r2, [r7, #4]
 8012434:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012436:	2300      	movs	r3, #0
 8012438:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d10a      	bne.n	8012456 <xTimerGenericCommand+0x2e>
	__asm volatile
 8012440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012444:	f383 8811 	msr	BASEPRI, r3
 8012448:	f3bf 8f6f 	isb	sy
 801244c:	f3bf 8f4f 	dsb	sy
 8012450:	623b      	str	r3, [r7, #32]
}
 8012452:	bf00      	nop
 8012454:	e7fe      	b.n	8012454 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012456:	4b1a      	ldr	r3, [pc, #104]	; (80124c0 <xTimerGenericCommand+0x98>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d02a      	beq.n	80124b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	2b05      	cmp	r3, #5
 801246e:	dc18      	bgt.n	80124a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012470:	f7ff fc7c 	bl	8011d6c <xTaskGetSchedulerState>
 8012474:	4603      	mov	r3, r0
 8012476:	2b02      	cmp	r3, #2
 8012478:	d109      	bne.n	801248e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801247a:	4b11      	ldr	r3, [pc, #68]	; (80124c0 <xTimerGenericCommand+0x98>)
 801247c:	6818      	ldr	r0, [r3, #0]
 801247e:	f107 0114 	add.w	r1, r7, #20
 8012482:	2300      	movs	r3, #0
 8012484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012486:	f7fd fff1 	bl	801046c <xQueueGenericSend>
 801248a:	6278      	str	r0, [r7, #36]	; 0x24
 801248c:	e012      	b.n	80124b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801248e:	4b0c      	ldr	r3, [pc, #48]	; (80124c0 <xTimerGenericCommand+0x98>)
 8012490:	6818      	ldr	r0, [r3, #0]
 8012492:	f107 0114 	add.w	r1, r7, #20
 8012496:	2300      	movs	r3, #0
 8012498:	2200      	movs	r2, #0
 801249a:	f7fd ffe7 	bl	801046c <xQueueGenericSend>
 801249e:	6278      	str	r0, [r7, #36]	; 0x24
 80124a0:	e008      	b.n	80124b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80124a2:	4b07      	ldr	r3, [pc, #28]	; (80124c0 <xTimerGenericCommand+0x98>)
 80124a4:	6818      	ldr	r0, [r3, #0]
 80124a6:	f107 0114 	add.w	r1, r7, #20
 80124aa:	2300      	movs	r3, #0
 80124ac:	683a      	ldr	r2, [r7, #0]
 80124ae:	f7fe f8db 	bl	8010668 <xQueueGenericSendFromISR>
 80124b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80124b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80124b6:	4618      	mov	r0, r3
 80124b8:	3728      	adds	r7, #40	; 0x28
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	bf00      	nop
 80124c0:	20001e6c 	.word	0x20001e6c

080124c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b088      	sub	sp, #32
 80124c8:	af02      	add	r7, sp, #8
 80124ca:	6078      	str	r0, [r7, #4]
 80124cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80124ce:	4b22      	ldr	r3, [pc, #136]	; (8012558 <prvProcessExpiredTimer+0x94>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	68db      	ldr	r3, [r3, #12]
 80124d4:	68db      	ldr	r3, [r3, #12]
 80124d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80124d8:	697b      	ldr	r3, [r7, #20]
 80124da:	3304      	adds	r3, #4
 80124dc:	4618      	mov	r0, r3
 80124de:	f7fd fe15 	bl	801010c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80124e2:	697b      	ldr	r3, [r7, #20]
 80124e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80124e8:	f003 0304 	and.w	r3, r3, #4
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d022      	beq.n	8012536 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80124f0:	697b      	ldr	r3, [r7, #20]
 80124f2:	699a      	ldr	r2, [r3, #24]
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	18d1      	adds	r1, r2, r3
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	683a      	ldr	r2, [r7, #0]
 80124fc:	6978      	ldr	r0, [r7, #20]
 80124fe:	f000 f8d1 	bl	80126a4 <prvInsertTimerInActiveList>
 8012502:	4603      	mov	r3, r0
 8012504:	2b00      	cmp	r3, #0
 8012506:	d01f      	beq.n	8012548 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012508:	2300      	movs	r3, #0
 801250a:	9300      	str	r3, [sp, #0]
 801250c:	2300      	movs	r3, #0
 801250e:	687a      	ldr	r2, [r7, #4]
 8012510:	2100      	movs	r1, #0
 8012512:	6978      	ldr	r0, [r7, #20]
 8012514:	f7ff ff88 	bl	8012428 <xTimerGenericCommand>
 8012518:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801251a:	693b      	ldr	r3, [r7, #16]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d113      	bne.n	8012548 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012524:	f383 8811 	msr	BASEPRI, r3
 8012528:	f3bf 8f6f 	isb	sy
 801252c:	f3bf 8f4f 	dsb	sy
 8012530:	60fb      	str	r3, [r7, #12]
}
 8012532:	bf00      	nop
 8012534:	e7fe      	b.n	8012534 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801253c:	f023 0301 	bic.w	r3, r3, #1
 8012540:	b2da      	uxtb	r2, r3
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	6a1b      	ldr	r3, [r3, #32]
 801254c:	6978      	ldr	r0, [r7, #20]
 801254e:	4798      	blx	r3
}
 8012550:	bf00      	nop
 8012552:	3718      	adds	r7, #24
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}
 8012558:	20001e64 	.word	0x20001e64

0801255c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b084      	sub	sp, #16
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012564:	f107 0308 	add.w	r3, r7, #8
 8012568:	4618      	mov	r0, r3
 801256a:	f000 f857 	bl	801261c <prvGetNextExpireTime>
 801256e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012570:	68bb      	ldr	r3, [r7, #8]
 8012572:	4619      	mov	r1, r3
 8012574:	68f8      	ldr	r0, [r7, #12]
 8012576:	f000 f803 	bl	8012580 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801257a:	f000 f8d5 	bl	8012728 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801257e:	e7f1      	b.n	8012564 <prvTimerTask+0x8>

08012580 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b084      	sub	sp, #16
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
 8012588:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801258a:	f7ff f803 	bl	8011594 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801258e:	f107 0308 	add.w	r3, r7, #8
 8012592:	4618      	mov	r0, r3
 8012594:	f000 f866 	bl	8012664 <prvSampleTimeNow>
 8012598:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801259a:	68bb      	ldr	r3, [r7, #8]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d130      	bne.n	8012602 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d10a      	bne.n	80125bc <prvProcessTimerOrBlockTask+0x3c>
 80125a6:	687a      	ldr	r2, [r7, #4]
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d806      	bhi.n	80125bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80125ae:	f7fe ffff 	bl	80115b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80125b2:	68f9      	ldr	r1, [r7, #12]
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f7ff ff85 	bl	80124c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80125ba:	e024      	b.n	8012606 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d008      	beq.n	80125d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80125c2:	4b13      	ldr	r3, [pc, #76]	; (8012610 <prvProcessTimerOrBlockTask+0x90>)
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d101      	bne.n	80125d0 <prvProcessTimerOrBlockTask+0x50>
 80125cc:	2301      	movs	r3, #1
 80125ce:	e000      	b.n	80125d2 <prvProcessTimerOrBlockTask+0x52>
 80125d0:	2300      	movs	r3, #0
 80125d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80125d4:	4b0f      	ldr	r3, [pc, #60]	; (8012614 <prvProcessTimerOrBlockTask+0x94>)
 80125d6:	6818      	ldr	r0, [r3, #0]
 80125d8:	687a      	ldr	r2, [r7, #4]
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	1ad3      	subs	r3, r2, r3
 80125de:	683a      	ldr	r2, [r7, #0]
 80125e0:	4619      	mov	r1, r3
 80125e2:	f7fe fd75 	bl	80110d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80125e6:	f7fe ffe3 	bl	80115b0 <xTaskResumeAll>
 80125ea:	4603      	mov	r3, r0
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d10a      	bne.n	8012606 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80125f0:	4b09      	ldr	r3, [pc, #36]	; (8012618 <prvProcessTimerOrBlockTask+0x98>)
 80125f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125f6:	601a      	str	r2, [r3, #0]
 80125f8:	f3bf 8f4f 	dsb	sy
 80125fc:	f3bf 8f6f 	isb	sy
}
 8012600:	e001      	b.n	8012606 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012602:	f7fe ffd5 	bl	80115b0 <xTaskResumeAll>
}
 8012606:	bf00      	nop
 8012608:	3710      	adds	r7, #16
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}
 801260e:	bf00      	nop
 8012610:	20001e68 	.word	0x20001e68
 8012614:	20001e6c 	.word	0x20001e6c
 8012618:	e000ed04 	.word	0xe000ed04

0801261c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801261c:	b480      	push	{r7}
 801261e:	b085      	sub	sp, #20
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012624:	4b0e      	ldr	r3, [pc, #56]	; (8012660 <prvGetNextExpireTime+0x44>)
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d101      	bne.n	8012632 <prvGetNextExpireTime+0x16>
 801262e:	2201      	movs	r2, #1
 8012630:	e000      	b.n	8012634 <prvGetNextExpireTime+0x18>
 8012632:	2200      	movs	r2, #0
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d105      	bne.n	801264c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012640:	4b07      	ldr	r3, [pc, #28]	; (8012660 <prvGetNextExpireTime+0x44>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	68db      	ldr	r3, [r3, #12]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	60fb      	str	r3, [r7, #12]
 801264a:	e001      	b.n	8012650 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801264c:	2300      	movs	r3, #0
 801264e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012650:	68fb      	ldr	r3, [r7, #12]
}
 8012652:	4618      	mov	r0, r3
 8012654:	3714      	adds	r7, #20
 8012656:	46bd      	mov	sp, r7
 8012658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265c:	4770      	bx	lr
 801265e:	bf00      	nop
 8012660:	20001e64 	.word	0x20001e64

08012664 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b084      	sub	sp, #16
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801266c:	f7ff f83c 	bl	80116e8 <xTaskGetTickCount>
 8012670:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012672:	4b0b      	ldr	r3, [pc, #44]	; (80126a0 <prvSampleTimeNow+0x3c>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	68fa      	ldr	r2, [r7, #12]
 8012678:	429a      	cmp	r2, r3
 801267a:	d205      	bcs.n	8012688 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801267c:	f000 f91a 	bl	80128b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2201      	movs	r2, #1
 8012684:	601a      	str	r2, [r3, #0]
 8012686:	e002      	b.n	801268e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2200      	movs	r2, #0
 801268c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801268e:	4a04      	ldr	r2, [pc, #16]	; (80126a0 <prvSampleTimeNow+0x3c>)
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012694:	68fb      	ldr	r3, [r7, #12]
}
 8012696:	4618      	mov	r0, r3
 8012698:	3710      	adds	r7, #16
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}
 801269e:	bf00      	nop
 80126a0:	20001e74 	.word	0x20001e74

080126a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b086      	sub	sp, #24
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	60f8      	str	r0, [r7, #12]
 80126ac:	60b9      	str	r1, [r7, #8]
 80126ae:	607a      	str	r2, [r7, #4]
 80126b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80126b2:	2300      	movs	r3, #0
 80126b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	68ba      	ldr	r2, [r7, #8]
 80126ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	68fa      	ldr	r2, [r7, #12]
 80126c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80126c2:	68ba      	ldr	r2, [r7, #8]
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d812      	bhi.n	80126f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126ca:	687a      	ldr	r2, [r7, #4]
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	1ad2      	subs	r2, r2, r3
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	699b      	ldr	r3, [r3, #24]
 80126d4:	429a      	cmp	r2, r3
 80126d6:	d302      	bcc.n	80126de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80126d8:	2301      	movs	r3, #1
 80126da:	617b      	str	r3, [r7, #20]
 80126dc:	e01b      	b.n	8012716 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80126de:	4b10      	ldr	r3, [pc, #64]	; (8012720 <prvInsertTimerInActiveList+0x7c>)
 80126e0:	681a      	ldr	r2, [r3, #0]
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	3304      	adds	r3, #4
 80126e6:	4619      	mov	r1, r3
 80126e8:	4610      	mov	r0, r2
 80126ea:	f7fd fcd6 	bl	801009a <vListInsert>
 80126ee:	e012      	b.n	8012716 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80126f0:	687a      	ldr	r2, [r7, #4]
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	429a      	cmp	r2, r3
 80126f6:	d206      	bcs.n	8012706 <prvInsertTimerInActiveList+0x62>
 80126f8:	68ba      	ldr	r2, [r7, #8]
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	429a      	cmp	r2, r3
 80126fe:	d302      	bcc.n	8012706 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012700:	2301      	movs	r3, #1
 8012702:	617b      	str	r3, [r7, #20]
 8012704:	e007      	b.n	8012716 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012706:	4b07      	ldr	r3, [pc, #28]	; (8012724 <prvInsertTimerInActiveList+0x80>)
 8012708:	681a      	ldr	r2, [r3, #0]
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	3304      	adds	r3, #4
 801270e:	4619      	mov	r1, r3
 8012710:	4610      	mov	r0, r2
 8012712:	f7fd fcc2 	bl	801009a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012716:	697b      	ldr	r3, [r7, #20]
}
 8012718:	4618      	mov	r0, r3
 801271a:	3718      	adds	r7, #24
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}
 8012720:	20001e68 	.word	0x20001e68
 8012724:	20001e64 	.word	0x20001e64

08012728 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b08c      	sub	sp, #48	; 0x30
 801272c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801272e:	e0ae      	b.n	801288e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	2b00      	cmp	r3, #0
 8012734:	f2c0 80aa 	blt.w	801288c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801273e:	695b      	ldr	r3, [r3, #20]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d004      	beq.n	801274e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012746:	3304      	adds	r3, #4
 8012748:	4618      	mov	r0, r3
 801274a:	f7fd fcdf 	bl	801010c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801274e:	1d3b      	adds	r3, r7, #4
 8012750:	4618      	mov	r0, r3
 8012752:	f7ff ff87 	bl	8012664 <prvSampleTimeNow>
 8012756:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8012758:	68bb      	ldr	r3, [r7, #8]
 801275a:	2b09      	cmp	r3, #9
 801275c:	f200 8097 	bhi.w	801288e <prvProcessReceivedCommands+0x166>
 8012760:	a201      	add	r2, pc, #4	; (adr r2, 8012768 <prvProcessReceivedCommands+0x40>)
 8012762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012766:	bf00      	nop
 8012768:	08012791 	.word	0x08012791
 801276c:	08012791 	.word	0x08012791
 8012770:	08012791 	.word	0x08012791
 8012774:	08012805 	.word	0x08012805
 8012778:	08012819 	.word	0x08012819
 801277c:	08012863 	.word	0x08012863
 8012780:	08012791 	.word	0x08012791
 8012784:	08012791 	.word	0x08012791
 8012788:	08012805 	.word	0x08012805
 801278c:	08012819 	.word	0x08012819
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012792:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012796:	f043 0301 	orr.w	r3, r3, #1
 801279a:	b2da      	uxtb	r2, r3
 801279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80127a2:	68fa      	ldr	r2, [r7, #12]
 80127a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a6:	699b      	ldr	r3, [r3, #24]
 80127a8:	18d1      	adds	r1, r2, r3
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	6a3a      	ldr	r2, [r7, #32]
 80127ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127b0:	f7ff ff78 	bl	80126a4 <prvInsertTimerInActiveList>
 80127b4:	4603      	mov	r3, r0
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d069      	beq.n	801288e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80127ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127bc:	6a1b      	ldr	r3, [r3, #32]
 80127be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80127c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80127c8:	f003 0304 	and.w	r3, r3, #4
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d05e      	beq.n	801288e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80127d0:	68fa      	ldr	r2, [r7, #12]
 80127d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d4:	699b      	ldr	r3, [r3, #24]
 80127d6:	441a      	add	r2, r3
 80127d8:	2300      	movs	r3, #0
 80127da:	9300      	str	r3, [sp, #0]
 80127dc:	2300      	movs	r3, #0
 80127de:	2100      	movs	r1, #0
 80127e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127e2:	f7ff fe21 	bl	8012428 <xTimerGenericCommand>
 80127e6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80127e8:	69fb      	ldr	r3, [r7, #28]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d14f      	bne.n	801288e <prvProcessReceivedCommands+0x166>
	__asm volatile
 80127ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127f2:	f383 8811 	msr	BASEPRI, r3
 80127f6:	f3bf 8f6f 	isb	sy
 80127fa:	f3bf 8f4f 	dsb	sy
 80127fe:	61bb      	str	r3, [r7, #24]
}
 8012800:	bf00      	nop
 8012802:	e7fe      	b.n	8012802 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012806:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801280a:	f023 0301 	bic.w	r3, r3, #1
 801280e:	b2da      	uxtb	r2, r3
 8012810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012812:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8012816:	e03a      	b.n	801288e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801281a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801281e:	f043 0301 	orr.w	r3, r3, #1
 8012822:	b2da      	uxtb	r2, r3
 8012824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801282a:	68fa      	ldr	r2, [r7, #12]
 801282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801282e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012832:	699b      	ldr	r3, [r3, #24]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d10a      	bne.n	801284e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8012838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801283c:	f383 8811 	msr	BASEPRI, r3
 8012840:	f3bf 8f6f 	isb	sy
 8012844:	f3bf 8f4f 	dsb	sy
 8012848:	617b      	str	r3, [r7, #20]
}
 801284a:	bf00      	nop
 801284c:	e7fe      	b.n	801284c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012850:	699a      	ldr	r2, [r3, #24]
 8012852:	6a3b      	ldr	r3, [r7, #32]
 8012854:	18d1      	adds	r1, r2, r3
 8012856:	6a3b      	ldr	r3, [r7, #32]
 8012858:	6a3a      	ldr	r2, [r7, #32]
 801285a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801285c:	f7ff ff22 	bl	80126a4 <prvInsertTimerInActiveList>
					break;
 8012860:	e015      	b.n	801288e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012864:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012868:	f003 0302 	and.w	r3, r3, #2
 801286c:	2b00      	cmp	r3, #0
 801286e:	d103      	bne.n	8012878 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8012870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012872:	f000 fbdd 	bl	8013030 <vPortFree>
 8012876:	e00a      	b.n	801288e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801287a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801287e:	f023 0301 	bic.w	r3, r3, #1
 8012882:	b2da      	uxtb	r2, r3
 8012884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801288a:	e000      	b.n	801288e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801288c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801288e:	4b08      	ldr	r3, [pc, #32]	; (80128b0 <prvProcessReceivedCommands+0x188>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	f107 0108 	add.w	r1, r7, #8
 8012896:	2200      	movs	r2, #0
 8012898:	4618      	mov	r0, r3
 801289a:	f7fe f80d 	bl	80108b8 <xQueueReceive>
 801289e:	4603      	mov	r3, r0
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	f47f af45 	bne.w	8012730 <prvProcessReceivedCommands+0x8>
	}
}
 80128a6:	bf00      	nop
 80128a8:	bf00      	nop
 80128aa:	3728      	adds	r7, #40	; 0x28
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd80      	pop	{r7, pc}
 80128b0:	20001e6c 	.word	0x20001e6c

080128b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b088      	sub	sp, #32
 80128b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80128ba:	e048      	b.n	801294e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80128bc:	4b2d      	ldr	r3, [pc, #180]	; (8012974 <prvSwitchTimerLists+0xc0>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	68db      	ldr	r3, [r3, #12]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80128c6:	4b2b      	ldr	r3, [pc, #172]	; (8012974 <prvSwitchTimerLists+0xc0>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	68db      	ldr	r3, [r3, #12]
 80128cc:	68db      	ldr	r3, [r3, #12]
 80128ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	3304      	adds	r3, #4
 80128d4:	4618      	mov	r0, r3
 80128d6:	f7fd fc19 	bl	801010c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	6a1b      	ldr	r3, [r3, #32]
 80128de:	68f8      	ldr	r0, [r7, #12]
 80128e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80128e8:	f003 0304 	and.w	r3, r3, #4
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d02e      	beq.n	801294e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	699b      	ldr	r3, [r3, #24]
 80128f4:	693a      	ldr	r2, [r7, #16]
 80128f6:	4413      	add	r3, r2
 80128f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80128fa:	68ba      	ldr	r2, [r7, #8]
 80128fc:	693b      	ldr	r3, [r7, #16]
 80128fe:	429a      	cmp	r2, r3
 8012900:	d90e      	bls.n	8012920 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	68ba      	ldr	r2, [r7, #8]
 8012906:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	68fa      	ldr	r2, [r7, #12]
 801290c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801290e:	4b19      	ldr	r3, [pc, #100]	; (8012974 <prvSwitchTimerLists+0xc0>)
 8012910:	681a      	ldr	r2, [r3, #0]
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	3304      	adds	r3, #4
 8012916:	4619      	mov	r1, r3
 8012918:	4610      	mov	r0, r2
 801291a:	f7fd fbbe 	bl	801009a <vListInsert>
 801291e:	e016      	b.n	801294e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012920:	2300      	movs	r3, #0
 8012922:	9300      	str	r3, [sp, #0]
 8012924:	2300      	movs	r3, #0
 8012926:	693a      	ldr	r2, [r7, #16]
 8012928:	2100      	movs	r1, #0
 801292a:	68f8      	ldr	r0, [r7, #12]
 801292c:	f7ff fd7c 	bl	8012428 <xTimerGenericCommand>
 8012930:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d10a      	bne.n	801294e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012938:	f04f 0350 	mov.w	r3, #80	; 0x50
 801293c:	f383 8811 	msr	BASEPRI, r3
 8012940:	f3bf 8f6f 	isb	sy
 8012944:	f3bf 8f4f 	dsb	sy
 8012948:	603b      	str	r3, [r7, #0]
}
 801294a:	bf00      	nop
 801294c:	e7fe      	b.n	801294c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801294e:	4b09      	ldr	r3, [pc, #36]	; (8012974 <prvSwitchTimerLists+0xc0>)
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d1b1      	bne.n	80128bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012958:	4b06      	ldr	r3, [pc, #24]	; (8012974 <prvSwitchTimerLists+0xc0>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801295e:	4b06      	ldr	r3, [pc, #24]	; (8012978 <prvSwitchTimerLists+0xc4>)
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	4a04      	ldr	r2, [pc, #16]	; (8012974 <prvSwitchTimerLists+0xc0>)
 8012964:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012966:	4a04      	ldr	r2, [pc, #16]	; (8012978 <prvSwitchTimerLists+0xc4>)
 8012968:	697b      	ldr	r3, [r7, #20]
 801296a:	6013      	str	r3, [r2, #0]
}
 801296c:	bf00      	nop
 801296e:	3718      	adds	r7, #24
 8012970:	46bd      	mov	sp, r7
 8012972:	bd80      	pop	{r7, pc}
 8012974:	20001e64 	.word	0x20001e64
 8012978:	20001e68 	.word	0x20001e68

0801297c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b082      	sub	sp, #8
 8012980:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012982:	f000 f967 	bl	8012c54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012986:	4b15      	ldr	r3, [pc, #84]	; (80129dc <prvCheckForValidListAndQueue+0x60>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d120      	bne.n	80129d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801298e:	4814      	ldr	r0, [pc, #80]	; (80129e0 <prvCheckForValidListAndQueue+0x64>)
 8012990:	f7fd fb32 	bl	800fff8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012994:	4813      	ldr	r0, [pc, #76]	; (80129e4 <prvCheckForValidListAndQueue+0x68>)
 8012996:	f7fd fb2f 	bl	800fff8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801299a:	4b13      	ldr	r3, [pc, #76]	; (80129e8 <prvCheckForValidListAndQueue+0x6c>)
 801299c:	4a10      	ldr	r2, [pc, #64]	; (80129e0 <prvCheckForValidListAndQueue+0x64>)
 801299e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80129a0:	4b12      	ldr	r3, [pc, #72]	; (80129ec <prvCheckForValidListAndQueue+0x70>)
 80129a2:	4a10      	ldr	r2, [pc, #64]	; (80129e4 <prvCheckForValidListAndQueue+0x68>)
 80129a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80129a6:	2300      	movs	r3, #0
 80129a8:	9300      	str	r3, [sp, #0]
 80129aa:	4b11      	ldr	r3, [pc, #68]	; (80129f0 <prvCheckForValidListAndQueue+0x74>)
 80129ac:	4a11      	ldr	r2, [pc, #68]	; (80129f4 <prvCheckForValidListAndQueue+0x78>)
 80129ae:	210c      	movs	r1, #12
 80129b0:	200a      	movs	r0, #10
 80129b2:	f7fd fc3d 	bl	8010230 <xQueueGenericCreateStatic>
 80129b6:	4603      	mov	r3, r0
 80129b8:	4a08      	ldr	r2, [pc, #32]	; (80129dc <prvCheckForValidListAndQueue+0x60>)
 80129ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80129bc:	4b07      	ldr	r3, [pc, #28]	; (80129dc <prvCheckForValidListAndQueue+0x60>)
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d005      	beq.n	80129d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80129c4:	4b05      	ldr	r3, [pc, #20]	; (80129dc <prvCheckForValidListAndQueue+0x60>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	490b      	ldr	r1, [pc, #44]	; (80129f8 <prvCheckForValidListAndQueue+0x7c>)
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7fe fb2c 	bl	8011028 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80129d0:	f000 f970 	bl	8012cb4 <vPortExitCritical>
}
 80129d4:	bf00      	nop
 80129d6:	46bd      	mov	sp, r7
 80129d8:	bd80      	pop	{r7, pc}
 80129da:	bf00      	nop
 80129dc:	20001e6c 	.word	0x20001e6c
 80129e0:	20001e3c 	.word	0x20001e3c
 80129e4:	20001e50 	.word	0x20001e50
 80129e8:	20001e64 	.word	0x20001e64
 80129ec:	20001e68 	.word	0x20001e68
 80129f0:	20001ef0 	.word	0x20001ef0
 80129f4:	20001e78 	.word	0x20001e78
 80129f8:	08016ba4 	.word	0x08016ba4

080129fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80129fc:	b480      	push	{r7}
 80129fe:	b085      	sub	sp, #20
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	60f8      	str	r0, [r7, #12]
 8012a04:	60b9      	str	r1, [r7, #8]
 8012a06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	3b04      	subs	r3, #4
 8012a0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012a14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	3b04      	subs	r3, #4
 8012a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	f023 0201 	bic.w	r2, r3, #1
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	3b04      	subs	r3, #4
 8012a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012a2c:	4a0c      	ldr	r2, [pc, #48]	; (8012a60 <pxPortInitialiseStack+0x64>)
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	3b14      	subs	r3, #20
 8012a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012a38:	687a      	ldr	r2, [r7, #4]
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	3b04      	subs	r3, #4
 8012a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	f06f 0202 	mvn.w	r2, #2
 8012a4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	3b20      	subs	r3, #32
 8012a50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012a52:	68fb      	ldr	r3, [r7, #12]
}
 8012a54:	4618      	mov	r0, r3
 8012a56:	3714      	adds	r7, #20
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5e:	4770      	bx	lr
 8012a60:	08012a65 	.word	0x08012a65

08012a64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012a64:	b480      	push	{r7}
 8012a66:	b085      	sub	sp, #20
 8012a68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012a6e:	4b12      	ldr	r3, [pc, #72]	; (8012ab8 <prvTaskExitError+0x54>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a76:	d00a      	beq.n	8012a8e <prvTaskExitError+0x2a>
	__asm volatile
 8012a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a7c:	f383 8811 	msr	BASEPRI, r3
 8012a80:	f3bf 8f6f 	isb	sy
 8012a84:	f3bf 8f4f 	dsb	sy
 8012a88:	60fb      	str	r3, [r7, #12]
}
 8012a8a:	bf00      	nop
 8012a8c:	e7fe      	b.n	8012a8c <prvTaskExitError+0x28>
	__asm volatile
 8012a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a92:	f383 8811 	msr	BASEPRI, r3
 8012a96:	f3bf 8f6f 	isb	sy
 8012a9a:	f3bf 8f4f 	dsb	sy
 8012a9e:	60bb      	str	r3, [r7, #8]
}
 8012aa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012aa2:	bf00      	nop
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d0fc      	beq.n	8012aa4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012aaa:	bf00      	nop
 8012aac:	bf00      	nop
 8012aae:	3714      	adds	r7, #20
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab6:	4770      	bx	lr
 8012ab8:	200000b8 	.word	0x200000b8
 8012abc:	00000000 	.word	0x00000000

08012ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012ac0:	4b07      	ldr	r3, [pc, #28]	; (8012ae0 <pxCurrentTCBConst2>)
 8012ac2:	6819      	ldr	r1, [r3, #0]
 8012ac4:	6808      	ldr	r0, [r1, #0]
 8012ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aca:	f380 8809 	msr	PSP, r0
 8012ace:	f3bf 8f6f 	isb	sy
 8012ad2:	f04f 0000 	mov.w	r0, #0
 8012ad6:	f380 8811 	msr	BASEPRI, r0
 8012ada:	4770      	bx	lr
 8012adc:	f3af 8000 	nop.w

08012ae0 <pxCurrentTCBConst2>:
 8012ae0:	20001d10 	.word	0x20001d10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012ae4:	bf00      	nop
 8012ae6:	bf00      	nop

08012ae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012ae8:	4808      	ldr	r0, [pc, #32]	; (8012b0c <prvPortStartFirstTask+0x24>)
 8012aea:	6800      	ldr	r0, [r0, #0]
 8012aec:	6800      	ldr	r0, [r0, #0]
 8012aee:	f380 8808 	msr	MSP, r0
 8012af2:	f04f 0000 	mov.w	r0, #0
 8012af6:	f380 8814 	msr	CONTROL, r0
 8012afa:	b662      	cpsie	i
 8012afc:	b661      	cpsie	f
 8012afe:	f3bf 8f4f 	dsb	sy
 8012b02:	f3bf 8f6f 	isb	sy
 8012b06:	df00      	svc	0
 8012b08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012b0a:	bf00      	nop
 8012b0c:	e000ed08 	.word	0xe000ed08

08012b10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b086      	sub	sp, #24
 8012b14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012b16:	4b46      	ldr	r3, [pc, #280]	; (8012c30 <xPortStartScheduler+0x120>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	4a46      	ldr	r2, [pc, #280]	; (8012c34 <xPortStartScheduler+0x124>)
 8012b1c:	4293      	cmp	r3, r2
 8012b1e:	d10a      	bne.n	8012b36 <xPortStartScheduler+0x26>
	__asm volatile
 8012b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b24:	f383 8811 	msr	BASEPRI, r3
 8012b28:	f3bf 8f6f 	isb	sy
 8012b2c:	f3bf 8f4f 	dsb	sy
 8012b30:	613b      	str	r3, [r7, #16]
}
 8012b32:	bf00      	nop
 8012b34:	e7fe      	b.n	8012b34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012b36:	4b3e      	ldr	r3, [pc, #248]	; (8012c30 <xPortStartScheduler+0x120>)
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	4a3f      	ldr	r2, [pc, #252]	; (8012c38 <xPortStartScheduler+0x128>)
 8012b3c:	4293      	cmp	r3, r2
 8012b3e:	d10a      	bne.n	8012b56 <xPortStartScheduler+0x46>
	__asm volatile
 8012b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b44:	f383 8811 	msr	BASEPRI, r3
 8012b48:	f3bf 8f6f 	isb	sy
 8012b4c:	f3bf 8f4f 	dsb	sy
 8012b50:	60fb      	str	r3, [r7, #12]
}
 8012b52:	bf00      	nop
 8012b54:	e7fe      	b.n	8012b54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012b56:	4b39      	ldr	r3, [pc, #228]	; (8012c3c <xPortStartScheduler+0x12c>)
 8012b58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	781b      	ldrb	r3, [r3, #0]
 8012b5e:	b2db      	uxtb	r3, r3
 8012b60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012b62:	697b      	ldr	r3, [r7, #20]
 8012b64:	22ff      	movs	r2, #255	; 0xff
 8012b66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012b68:	697b      	ldr	r3, [r7, #20]
 8012b6a:	781b      	ldrb	r3, [r3, #0]
 8012b6c:	b2db      	uxtb	r3, r3
 8012b6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012b70:	78fb      	ldrb	r3, [r7, #3]
 8012b72:	b2db      	uxtb	r3, r3
 8012b74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012b78:	b2da      	uxtb	r2, r3
 8012b7a:	4b31      	ldr	r3, [pc, #196]	; (8012c40 <xPortStartScheduler+0x130>)
 8012b7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012b7e:	4b31      	ldr	r3, [pc, #196]	; (8012c44 <xPortStartScheduler+0x134>)
 8012b80:	2207      	movs	r2, #7
 8012b82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012b84:	e009      	b.n	8012b9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012b86:	4b2f      	ldr	r3, [pc, #188]	; (8012c44 <xPortStartScheduler+0x134>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	3b01      	subs	r3, #1
 8012b8c:	4a2d      	ldr	r2, [pc, #180]	; (8012c44 <xPortStartScheduler+0x134>)
 8012b8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012b90:	78fb      	ldrb	r3, [r7, #3]
 8012b92:	b2db      	uxtb	r3, r3
 8012b94:	005b      	lsls	r3, r3, #1
 8012b96:	b2db      	uxtb	r3, r3
 8012b98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012b9a:	78fb      	ldrb	r3, [r7, #3]
 8012b9c:	b2db      	uxtb	r3, r3
 8012b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ba2:	2b80      	cmp	r3, #128	; 0x80
 8012ba4:	d0ef      	beq.n	8012b86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012ba6:	4b27      	ldr	r3, [pc, #156]	; (8012c44 <xPortStartScheduler+0x134>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	f1c3 0307 	rsb	r3, r3, #7
 8012bae:	2b04      	cmp	r3, #4
 8012bb0:	d00a      	beq.n	8012bc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8012bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bb6:	f383 8811 	msr	BASEPRI, r3
 8012bba:	f3bf 8f6f 	isb	sy
 8012bbe:	f3bf 8f4f 	dsb	sy
 8012bc2:	60bb      	str	r3, [r7, #8]
}
 8012bc4:	bf00      	nop
 8012bc6:	e7fe      	b.n	8012bc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012bc8:	4b1e      	ldr	r3, [pc, #120]	; (8012c44 <xPortStartScheduler+0x134>)
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	021b      	lsls	r3, r3, #8
 8012bce:	4a1d      	ldr	r2, [pc, #116]	; (8012c44 <xPortStartScheduler+0x134>)
 8012bd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012bd2:	4b1c      	ldr	r3, [pc, #112]	; (8012c44 <xPortStartScheduler+0x134>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012bda:	4a1a      	ldr	r2, [pc, #104]	; (8012c44 <xPortStartScheduler+0x134>)
 8012bdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	b2da      	uxtb	r2, r3
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012be6:	4b18      	ldr	r3, [pc, #96]	; (8012c48 <xPortStartScheduler+0x138>)
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	4a17      	ldr	r2, [pc, #92]	; (8012c48 <xPortStartScheduler+0x138>)
 8012bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012bf2:	4b15      	ldr	r3, [pc, #84]	; (8012c48 <xPortStartScheduler+0x138>)
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	4a14      	ldr	r2, [pc, #80]	; (8012c48 <xPortStartScheduler+0x138>)
 8012bf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012bfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012bfe:	f000 f8dd 	bl	8012dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012c02:	4b12      	ldr	r3, [pc, #72]	; (8012c4c <xPortStartScheduler+0x13c>)
 8012c04:	2200      	movs	r2, #0
 8012c06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012c08:	f000 f8fc 	bl	8012e04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012c0c:	4b10      	ldr	r3, [pc, #64]	; (8012c50 <xPortStartScheduler+0x140>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	4a0f      	ldr	r2, [pc, #60]	; (8012c50 <xPortStartScheduler+0x140>)
 8012c12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012c16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012c18:	f7ff ff66 	bl	8012ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012c1c:	f7fe fe3e 	bl	801189c <vTaskSwitchContext>
	prvTaskExitError();
 8012c20:	f7ff ff20 	bl	8012a64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012c24:	2300      	movs	r3, #0
}
 8012c26:	4618      	mov	r0, r3
 8012c28:	3718      	adds	r7, #24
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	bd80      	pop	{r7, pc}
 8012c2e:	bf00      	nop
 8012c30:	e000ed00 	.word	0xe000ed00
 8012c34:	410fc271 	.word	0x410fc271
 8012c38:	410fc270 	.word	0x410fc270
 8012c3c:	e000e400 	.word	0xe000e400
 8012c40:	20001f38 	.word	0x20001f38
 8012c44:	20001f3c 	.word	0x20001f3c
 8012c48:	e000ed20 	.word	0xe000ed20
 8012c4c:	200000b8 	.word	0x200000b8
 8012c50:	e000ef34 	.word	0xe000ef34

08012c54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012c54:	b480      	push	{r7}
 8012c56:	b083      	sub	sp, #12
 8012c58:	af00      	add	r7, sp, #0
	__asm volatile
 8012c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c5e:	f383 8811 	msr	BASEPRI, r3
 8012c62:	f3bf 8f6f 	isb	sy
 8012c66:	f3bf 8f4f 	dsb	sy
 8012c6a:	607b      	str	r3, [r7, #4]
}
 8012c6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012c6e:	4b0f      	ldr	r3, [pc, #60]	; (8012cac <vPortEnterCritical+0x58>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	3301      	adds	r3, #1
 8012c74:	4a0d      	ldr	r2, [pc, #52]	; (8012cac <vPortEnterCritical+0x58>)
 8012c76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012c78:	4b0c      	ldr	r3, [pc, #48]	; (8012cac <vPortEnterCritical+0x58>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	2b01      	cmp	r3, #1
 8012c7e:	d10f      	bne.n	8012ca0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012c80:	4b0b      	ldr	r3, [pc, #44]	; (8012cb0 <vPortEnterCritical+0x5c>)
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	b2db      	uxtb	r3, r3
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d00a      	beq.n	8012ca0 <vPortEnterCritical+0x4c>
	__asm volatile
 8012c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c8e:	f383 8811 	msr	BASEPRI, r3
 8012c92:	f3bf 8f6f 	isb	sy
 8012c96:	f3bf 8f4f 	dsb	sy
 8012c9a:	603b      	str	r3, [r7, #0]
}
 8012c9c:	bf00      	nop
 8012c9e:	e7fe      	b.n	8012c9e <vPortEnterCritical+0x4a>
	}
}
 8012ca0:	bf00      	nop
 8012ca2:	370c      	adds	r7, #12
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012caa:	4770      	bx	lr
 8012cac:	200000b8 	.word	0x200000b8
 8012cb0:	e000ed04 	.word	0xe000ed04

08012cb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012cb4:	b480      	push	{r7}
 8012cb6:	b083      	sub	sp, #12
 8012cb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012cba:	4b12      	ldr	r3, [pc, #72]	; (8012d04 <vPortExitCritical+0x50>)
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d10a      	bne.n	8012cd8 <vPortExitCritical+0x24>
	__asm volatile
 8012cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cc6:	f383 8811 	msr	BASEPRI, r3
 8012cca:	f3bf 8f6f 	isb	sy
 8012cce:	f3bf 8f4f 	dsb	sy
 8012cd2:	607b      	str	r3, [r7, #4]
}
 8012cd4:	bf00      	nop
 8012cd6:	e7fe      	b.n	8012cd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012cd8:	4b0a      	ldr	r3, [pc, #40]	; (8012d04 <vPortExitCritical+0x50>)
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	3b01      	subs	r3, #1
 8012cde:	4a09      	ldr	r2, [pc, #36]	; (8012d04 <vPortExitCritical+0x50>)
 8012ce0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012ce2:	4b08      	ldr	r3, [pc, #32]	; (8012d04 <vPortExitCritical+0x50>)
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d105      	bne.n	8012cf6 <vPortExitCritical+0x42>
 8012cea:	2300      	movs	r3, #0
 8012cec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	f383 8811 	msr	BASEPRI, r3
}
 8012cf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012cf6:	bf00      	nop
 8012cf8:	370c      	adds	r7, #12
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d00:	4770      	bx	lr
 8012d02:	bf00      	nop
 8012d04:	200000b8 	.word	0x200000b8
	...

08012d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012d10:	f3ef 8009 	mrs	r0, PSP
 8012d14:	f3bf 8f6f 	isb	sy
 8012d18:	4b15      	ldr	r3, [pc, #84]	; (8012d70 <pxCurrentTCBConst>)
 8012d1a:	681a      	ldr	r2, [r3, #0]
 8012d1c:	f01e 0f10 	tst.w	lr, #16
 8012d20:	bf08      	it	eq
 8012d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d2a:	6010      	str	r0, [r2, #0]
 8012d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012d34:	f380 8811 	msr	BASEPRI, r0
 8012d38:	f3bf 8f4f 	dsb	sy
 8012d3c:	f3bf 8f6f 	isb	sy
 8012d40:	f7fe fdac 	bl	801189c <vTaskSwitchContext>
 8012d44:	f04f 0000 	mov.w	r0, #0
 8012d48:	f380 8811 	msr	BASEPRI, r0
 8012d4c:	bc09      	pop	{r0, r3}
 8012d4e:	6819      	ldr	r1, [r3, #0]
 8012d50:	6808      	ldr	r0, [r1, #0]
 8012d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d56:	f01e 0f10 	tst.w	lr, #16
 8012d5a:	bf08      	it	eq
 8012d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012d60:	f380 8809 	msr	PSP, r0
 8012d64:	f3bf 8f6f 	isb	sy
 8012d68:	4770      	bx	lr
 8012d6a:	bf00      	nop
 8012d6c:	f3af 8000 	nop.w

08012d70 <pxCurrentTCBConst>:
 8012d70:	20001d10 	.word	0x20001d10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012d74:	bf00      	nop
 8012d76:	bf00      	nop

08012d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b082      	sub	sp, #8
 8012d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8012d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d82:	f383 8811 	msr	BASEPRI, r3
 8012d86:	f3bf 8f6f 	isb	sy
 8012d8a:	f3bf 8f4f 	dsb	sy
 8012d8e:	607b      	str	r3, [r7, #4]
}
 8012d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012d92:	f7fe fccb 	bl	801172c <xTaskIncrementTick>
 8012d96:	4603      	mov	r3, r0
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d003      	beq.n	8012da4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012d9c:	4b06      	ldr	r3, [pc, #24]	; (8012db8 <SysTick_Handler+0x40>)
 8012d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012da2:	601a      	str	r2, [r3, #0]
 8012da4:	2300      	movs	r3, #0
 8012da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	f383 8811 	msr	BASEPRI, r3
}
 8012dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012db0:	bf00      	nop
 8012db2:	3708      	adds	r7, #8
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}
 8012db8:	e000ed04 	.word	0xe000ed04

08012dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012dbc:	b480      	push	{r7}
 8012dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012dc0:	4b0b      	ldr	r3, [pc, #44]	; (8012df0 <vPortSetupTimerInterrupt+0x34>)
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012dc6:	4b0b      	ldr	r3, [pc, #44]	; (8012df4 <vPortSetupTimerInterrupt+0x38>)
 8012dc8:	2200      	movs	r2, #0
 8012dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012dcc:	4b0a      	ldr	r3, [pc, #40]	; (8012df8 <vPortSetupTimerInterrupt+0x3c>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	4a0a      	ldr	r2, [pc, #40]	; (8012dfc <vPortSetupTimerInterrupt+0x40>)
 8012dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8012dd6:	099b      	lsrs	r3, r3, #6
 8012dd8:	4a09      	ldr	r2, [pc, #36]	; (8012e00 <vPortSetupTimerInterrupt+0x44>)
 8012dda:	3b01      	subs	r3, #1
 8012ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012dde:	4b04      	ldr	r3, [pc, #16]	; (8012df0 <vPortSetupTimerInterrupt+0x34>)
 8012de0:	2207      	movs	r2, #7
 8012de2:	601a      	str	r2, [r3, #0]
}
 8012de4:	bf00      	nop
 8012de6:	46bd      	mov	sp, r7
 8012de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dec:	4770      	bx	lr
 8012dee:	bf00      	nop
 8012df0:	e000e010 	.word	0xe000e010
 8012df4:	e000e018 	.word	0xe000e018
 8012df8:	20000044 	.word	0x20000044
 8012dfc:	10624dd3 	.word	0x10624dd3
 8012e00:	e000e014 	.word	0xe000e014

08012e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012e04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012e14 <vPortEnableVFP+0x10>
 8012e08:	6801      	ldr	r1, [r0, #0]
 8012e0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012e0e:	6001      	str	r1, [r0, #0]
 8012e10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012e12:	bf00      	nop
 8012e14:	e000ed88 	.word	0xe000ed88

08012e18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012e18:	b480      	push	{r7}
 8012e1a:	b085      	sub	sp, #20
 8012e1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012e1e:	f3ef 8305 	mrs	r3, IPSR
 8012e22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	2b0f      	cmp	r3, #15
 8012e28:	d914      	bls.n	8012e54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012e2a:	4a17      	ldr	r2, [pc, #92]	; (8012e88 <vPortValidateInterruptPriority+0x70>)
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	4413      	add	r3, r2
 8012e30:	781b      	ldrb	r3, [r3, #0]
 8012e32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012e34:	4b15      	ldr	r3, [pc, #84]	; (8012e8c <vPortValidateInterruptPriority+0x74>)
 8012e36:	781b      	ldrb	r3, [r3, #0]
 8012e38:	7afa      	ldrb	r2, [r7, #11]
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d20a      	bcs.n	8012e54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e42:	f383 8811 	msr	BASEPRI, r3
 8012e46:	f3bf 8f6f 	isb	sy
 8012e4a:	f3bf 8f4f 	dsb	sy
 8012e4e:	607b      	str	r3, [r7, #4]
}
 8012e50:	bf00      	nop
 8012e52:	e7fe      	b.n	8012e52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012e54:	4b0e      	ldr	r3, [pc, #56]	; (8012e90 <vPortValidateInterruptPriority+0x78>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012e5c:	4b0d      	ldr	r3, [pc, #52]	; (8012e94 <vPortValidateInterruptPriority+0x7c>)
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	429a      	cmp	r2, r3
 8012e62:	d90a      	bls.n	8012e7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e68:	f383 8811 	msr	BASEPRI, r3
 8012e6c:	f3bf 8f6f 	isb	sy
 8012e70:	f3bf 8f4f 	dsb	sy
 8012e74:	603b      	str	r3, [r7, #0]
}
 8012e76:	bf00      	nop
 8012e78:	e7fe      	b.n	8012e78 <vPortValidateInterruptPriority+0x60>
	}
 8012e7a:	bf00      	nop
 8012e7c:	3714      	adds	r7, #20
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e84:	4770      	bx	lr
 8012e86:	bf00      	nop
 8012e88:	e000e3f0 	.word	0xe000e3f0
 8012e8c:	20001f38 	.word	0x20001f38
 8012e90:	e000ed0c 	.word	0xe000ed0c
 8012e94:	20001f3c 	.word	0x20001f3c

08012e98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b08a      	sub	sp, #40	; 0x28
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012ea4:	f7fe fb76 	bl	8011594 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012ea8:	4b5b      	ldr	r3, [pc, #364]	; (8013018 <pvPortMalloc+0x180>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d101      	bne.n	8012eb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012eb0:	f000 f920 	bl	80130f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012eb4:	4b59      	ldr	r3, [pc, #356]	; (801301c <pvPortMalloc+0x184>)
 8012eb6:	681a      	ldr	r2, [r3, #0]
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	4013      	ands	r3, r2
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	f040 8093 	bne.w	8012fe8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d01d      	beq.n	8012f04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012ec8:	2208      	movs	r2, #8
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	4413      	add	r3, r2
 8012ece:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f003 0307 	and.w	r3, r3, #7
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d014      	beq.n	8012f04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	f023 0307 	bic.w	r3, r3, #7
 8012ee0:	3308      	adds	r3, #8
 8012ee2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	f003 0307 	and.w	r3, r3, #7
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d00a      	beq.n	8012f04 <pvPortMalloc+0x6c>
	__asm volatile
 8012eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ef2:	f383 8811 	msr	BASEPRI, r3
 8012ef6:	f3bf 8f6f 	isb	sy
 8012efa:	f3bf 8f4f 	dsb	sy
 8012efe:	617b      	str	r3, [r7, #20]
}
 8012f00:	bf00      	nop
 8012f02:	e7fe      	b.n	8012f02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d06e      	beq.n	8012fe8 <pvPortMalloc+0x150>
 8012f0a:	4b45      	ldr	r3, [pc, #276]	; (8013020 <pvPortMalloc+0x188>)
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	687a      	ldr	r2, [r7, #4]
 8012f10:	429a      	cmp	r2, r3
 8012f12:	d869      	bhi.n	8012fe8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012f14:	4b43      	ldr	r3, [pc, #268]	; (8013024 <pvPortMalloc+0x18c>)
 8012f16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012f18:	4b42      	ldr	r3, [pc, #264]	; (8013024 <pvPortMalloc+0x18c>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012f1e:	e004      	b.n	8012f2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f2c:	685b      	ldr	r3, [r3, #4]
 8012f2e:	687a      	ldr	r2, [r7, #4]
 8012f30:	429a      	cmp	r2, r3
 8012f32:	d903      	bls.n	8012f3c <pvPortMalloc+0xa4>
 8012f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d1f1      	bne.n	8012f20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012f3c:	4b36      	ldr	r3, [pc, #216]	; (8013018 <pvPortMalloc+0x180>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f42:	429a      	cmp	r2, r3
 8012f44:	d050      	beq.n	8012fe8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012f46:	6a3b      	ldr	r3, [r7, #32]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	2208      	movs	r2, #8
 8012f4c:	4413      	add	r3, r2
 8012f4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f52:	681a      	ldr	r2, [r3, #0]
 8012f54:	6a3b      	ldr	r3, [r7, #32]
 8012f56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5a:	685a      	ldr	r2, [r3, #4]
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	1ad2      	subs	r2, r2, r3
 8012f60:	2308      	movs	r3, #8
 8012f62:	005b      	lsls	r3, r3, #1
 8012f64:	429a      	cmp	r2, r3
 8012f66:	d91f      	bls.n	8012fa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	4413      	add	r3, r2
 8012f6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012f70:	69bb      	ldr	r3, [r7, #24]
 8012f72:	f003 0307 	and.w	r3, r3, #7
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d00a      	beq.n	8012f90 <pvPortMalloc+0xf8>
	__asm volatile
 8012f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f7e:	f383 8811 	msr	BASEPRI, r3
 8012f82:	f3bf 8f6f 	isb	sy
 8012f86:	f3bf 8f4f 	dsb	sy
 8012f8a:	613b      	str	r3, [r7, #16]
}
 8012f8c:	bf00      	nop
 8012f8e:	e7fe      	b.n	8012f8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f92:	685a      	ldr	r2, [r3, #4]
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	1ad2      	subs	r2, r2, r3
 8012f98:	69bb      	ldr	r3, [r7, #24]
 8012f9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f9e:	687a      	ldr	r2, [r7, #4]
 8012fa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012fa2:	69b8      	ldr	r0, [r7, #24]
 8012fa4:	f000 f908 	bl	80131b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012fa8:	4b1d      	ldr	r3, [pc, #116]	; (8013020 <pvPortMalloc+0x188>)
 8012faa:	681a      	ldr	r2, [r3, #0]
 8012fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fae:	685b      	ldr	r3, [r3, #4]
 8012fb0:	1ad3      	subs	r3, r2, r3
 8012fb2:	4a1b      	ldr	r2, [pc, #108]	; (8013020 <pvPortMalloc+0x188>)
 8012fb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012fb6:	4b1a      	ldr	r3, [pc, #104]	; (8013020 <pvPortMalloc+0x188>)
 8012fb8:	681a      	ldr	r2, [r3, #0]
 8012fba:	4b1b      	ldr	r3, [pc, #108]	; (8013028 <pvPortMalloc+0x190>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	429a      	cmp	r2, r3
 8012fc0:	d203      	bcs.n	8012fca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012fc2:	4b17      	ldr	r3, [pc, #92]	; (8013020 <pvPortMalloc+0x188>)
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	4a18      	ldr	r2, [pc, #96]	; (8013028 <pvPortMalloc+0x190>)
 8012fc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fcc:	685a      	ldr	r2, [r3, #4]
 8012fce:	4b13      	ldr	r3, [pc, #76]	; (801301c <pvPortMalloc+0x184>)
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	431a      	orrs	r2, r3
 8012fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fda:	2200      	movs	r2, #0
 8012fdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012fde:	4b13      	ldr	r3, [pc, #76]	; (801302c <pvPortMalloc+0x194>)
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	3301      	adds	r3, #1
 8012fe4:	4a11      	ldr	r2, [pc, #68]	; (801302c <pvPortMalloc+0x194>)
 8012fe6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012fe8:	f7fe fae2 	bl	80115b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012fec:	69fb      	ldr	r3, [r7, #28]
 8012fee:	f003 0307 	and.w	r3, r3, #7
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d00a      	beq.n	801300c <pvPortMalloc+0x174>
	__asm volatile
 8012ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ffa:	f383 8811 	msr	BASEPRI, r3
 8012ffe:	f3bf 8f6f 	isb	sy
 8013002:	f3bf 8f4f 	dsb	sy
 8013006:	60fb      	str	r3, [r7, #12]
}
 8013008:	bf00      	nop
 801300a:	e7fe      	b.n	801300a <pvPortMalloc+0x172>
	return pvReturn;
 801300c:	69fb      	ldr	r3, [r7, #28]
}
 801300e:	4618      	mov	r0, r3
 8013010:	3728      	adds	r7, #40	; 0x28
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}
 8013016:	bf00      	nop
 8013018:	20005b48 	.word	0x20005b48
 801301c:	20005b5c 	.word	0x20005b5c
 8013020:	20005b4c 	.word	0x20005b4c
 8013024:	20005b40 	.word	0x20005b40
 8013028:	20005b50 	.word	0x20005b50
 801302c:	20005b54 	.word	0x20005b54

08013030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b086      	sub	sp, #24
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d04d      	beq.n	80130de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013042:	2308      	movs	r3, #8
 8013044:	425b      	negs	r3, r3
 8013046:	697a      	ldr	r2, [r7, #20]
 8013048:	4413      	add	r3, r2
 801304a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013050:	693b      	ldr	r3, [r7, #16]
 8013052:	685a      	ldr	r2, [r3, #4]
 8013054:	4b24      	ldr	r3, [pc, #144]	; (80130e8 <vPortFree+0xb8>)
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	4013      	ands	r3, r2
 801305a:	2b00      	cmp	r3, #0
 801305c:	d10a      	bne.n	8013074 <vPortFree+0x44>
	__asm volatile
 801305e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013062:	f383 8811 	msr	BASEPRI, r3
 8013066:	f3bf 8f6f 	isb	sy
 801306a:	f3bf 8f4f 	dsb	sy
 801306e:	60fb      	str	r3, [r7, #12]
}
 8013070:	bf00      	nop
 8013072:	e7fe      	b.n	8013072 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013074:	693b      	ldr	r3, [r7, #16]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d00a      	beq.n	8013092 <vPortFree+0x62>
	__asm volatile
 801307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013080:	f383 8811 	msr	BASEPRI, r3
 8013084:	f3bf 8f6f 	isb	sy
 8013088:	f3bf 8f4f 	dsb	sy
 801308c:	60bb      	str	r3, [r7, #8]
}
 801308e:	bf00      	nop
 8013090:	e7fe      	b.n	8013090 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013092:	693b      	ldr	r3, [r7, #16]
 8013094:	685a      	ldr	r2, [r3, #4]
 8013096:	4b14      	ldr	r3, [pc, #80]	; (80130e8 <vPortFree+0xb8>)
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	4013      	ands	r3, r2
 801309c:	2b00      	cmp	r3, #0
 801309e:	d01e      	beq.n	80130de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80130a0:	693b      	ldr	r3, [r7, #16]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d11a      	bne.n	80130de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80130a8:	693b      	ldr	r3, [r7, #16]
 80130aa:	685a      	ldr	r2, [r3, #4]
 80130ac:	4b0e      	ldr	r3, [pc, #56]	; (80130e8 <vPortFree+0xb8>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	43db      	mvns	r3, r3
 80130b2:	401a      	ands	r2, r3
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80130b8:	f7fe fa6c 	bl	8011594 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80130bc:	693b      	ldr	r3, [r7, #16]
 80130be:	685a      	ldr	r2, [r3, #4]
 80130c0:	4b0a      	ldr	r3, [pc, #40]	; (80130ec <vPortFree+0xbc>)
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	4413      	add	r3, r2
 80130c6:	4a09      	ldr	r2, [pc, #36]	; (80130ec <vPortFree+0xbc>)
 80130c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80130ca:	6938      	ldr	r0, [r7, #16]
 80130cc:	f000 f874 	bl	80131b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80130d0:	4b07      	ldr	r3, [pc, #28]	; (80130f0 <vPortFree+0xc0>)
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	3301      	adds	r3, #1
 80130d6:	4a06      	ldr	r2, [pc, #24]	; (80130f0 <vPortFree+0xc0>)
 80130d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80130da:	f7fe fa69 	bl	80115b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80130de:	bf00      	nop
 80130e0:	3718      	adds	r7, #24
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}
 80130e6:	bf00      	nop
 80130e8:	20005b5c 	.word	0x20005b5c
 80130ec:	20005b4c 	.word	0x20005b4c
 80130f0:	20005b58 	.word	0x20005b58

080130f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80130f4:	b480      	push	{r7}
 80130f6:	b085      	sub	sp, #20
 80130f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80130fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80130fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013100:	4b27      	ldr	r3, [pc, #156]	; (80131a0 <prvHeapInit+0xac>)
 8013102:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	f003 0307 	and.w	r3, r3, #7
 801310a:	2b00      	cmp	r3, #0
 801310c:	d00c      	beq.n	8013128 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	3307      	adds	r3, #7
 8013112:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	f023 0307 	bic.w	r3, r3, #7
 801311a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801311c:	68ba      	ldr	r2, [r7, #8]
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	1ad3      	subs	r3, r2, r3
 8013122:	4a1f      	ldr	r2, [pc, #124]	; (80131a0 <prvHeapInit+0xac>)
 8013124:	4413      	add	r3, r2
 8013126:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801312c:	4a1d      	ldr	r2, [pc, #116]	; (80131a4 <prvHeapInit+0xb0>)
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013132:	4b1c      	ldr	r3, [pc, #112]	; (80131a4 <prvHeapInit+0xb0>)
 8013134:	2200      	movs	r2, #0
 8013136:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	68ba      	ldr	r2, [r7, #8]
 801313c:	4413      	add	r3, r2
 801313e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013140:	2208      	movs	r2, #8
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	1a9b      	subs	r3, r3, r2
 8013146:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	f023 0307 	bic.w	r3, r3, #7
 801314e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	4a15      	ldr	r2, [pc, #84]	; (80131a8 <prvHeapInit+0xb4>)
 8013154:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013156:	4b14      	ldr	r3, [pc, #80]	; (80131a8 <prvHeapInit+0xb4>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	2200      	movs	r2, #0
 801315c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801315e:	4b12      	ldr	r3, [pc, #72]	; (80131a8 <prvHeapInit+0xb4>)
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	2200      	movs	r2, #0
 8013164:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801316a:	683b      	ldr	r3, [r7, #0]
 801316c:	68fa      	ldr	r2, [r7, #12]
 801316e:	1ad2      	subs	r2, r2, r3
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013174:	4b0c      	ldr	r3, [pc, #48]	; (80131a8 <prvHeapInit+0xb4>)
 8013176:	681a      	ldr	r2, [r3, #0]
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	685b      	ldr	r3, [r3, #4]
 8013180:	4a0a      	ldr	r2, [pc, #40]	; (80131ac <prvHeapInit+0xb8>)
 8013182:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013184:	683b      	ldr	r3, [r7, #0]
 8013186:	685b      	ldr	r3, [r3, #4]
 8013188:	4a09      	ldr	r2, [pc, #36]	; (80131b0 <prvHeapInit+0xbc>)
 801318a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801318c:	4b09      	ldr	r3, [pc, #36]	; (80131b4 <prvHeapInit+0xc0>)
 801318e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013192:	601a      	str	r2, [r3, #0]
}
 8013194:	bf00      	nop
 8013196:	3714      	adds	r7, #20
 8013198:	46bd      	mov	sp, r7
 801319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319e:	4770      	bx	lr
 80131a0:	20001f40 	.word	0x20001f40
 80131a4:	20005b40 	.word	0x20005b40
 80131a8:	20005b48 	.word	0x20005b48
 80131ac:	20005b50 	.word	0x20005b50
 80131b0:	20005b4c 	.word	0x20005b4c
 80131b4:	20005b5c 	.word	0x20005b5c

080131b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80131b8:	b480      	push	{r7}
 80131ba:	b085      	sub	sp, #20
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80131c0:	4b28      	ldr	r3, [pc, #160]	; (8013264 <prvInsertBlockIntoFreeList+0xac>)
 80131c2:	60fb      	str	r3, [r7, #12]
 80131c4:	e002      	b.n	80131cc <prvInsertBlockIntoFreeList+0x14>
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	60fb      	str	r3, [r7, #12]
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	687a      	ldr	r2, [r7, #4]
 80131d2:	429a      	cmp	r2, r3
 80131d4:	d8f7      	bhi.n	80131c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	685b      	ldr	r3, [r3, #4]
 80131de:	68ba      	ldr	r2, [r7, #8]
 80131e0:	4413      	add	r3, r2
 80131e2:	687a      	ldr	r2, [r7, #4]
 80131e4:	429a      	cmp	r2, r3
 80131e6:	d108      	bne.n	80131fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	685a      	ldr	r2, [r3, #4]
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	685b      	ldr	r3, [r3, #4]
 80131f0:	441a      	add	r2, r3
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	685b      	ldr	r3, [r3, #4]
 8013202:	68ba      	ldr	r2, [r7, #8]
 8013204:	441a      	add	r2, r3
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	429a      	cmp	r2, r3
 801320c:	d118      	bne.n	8013240 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	681a      	ldr	r2, [r3, #0]
 8013212:	4b15      	ldr	r3, [pc, #84]	; (8013268 <prvInsertBlockIntoFreeList+0xb0>)
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	429a      	cmp	r2, r3
 8013218:	d00d      	beq.n	8013236 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	685a      	ldr	r2, [r3, #4]
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	685b      	ldr	r3, [r3, #4]
 8013224:	441a      	add	r2, r3
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	681a      	ldr	r2, [r3, #0]
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	601a      	str	r2, [r3, #0]
 8013234:	e008      	b.n	8013248 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013236:	4b0c      	ldr	r3, [pc, #48]	; (8013268 <prvInsertBlockIntoFreeList+0xb0>)
 8013238:	681a      	ldr	r2, [r3, #0]
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	601a      	str	r2, [r3, #0]
 801323e:	e003      	b.n	8013248 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	681a      	ldr	r2, [r3, #0]
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013248:	68fa      	ldr	r2, [r7, #12]
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	429a      	cmp	r2, r3
 801324e:	d002      	beq.n	8013256 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	687a      	ldr	r2, [r7, #4]
 8013254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013256:	bf00      	nop
 8013258:	3714      	adds	r7, #20
 801325a:	46bd      	mov	sp, r7
 801325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013260:	4770      	bx	lr
 8013262:	bf00      	nop
 8013264:	20005b40 	.word	0x20005b40
 8013268:	20005b48 	.word	0x20005b48

0801326c <findslot>:
 801326c:	4b0a      	ldr	r3, [pc, #40]	; (8013298 <findslot+0x2c>)
 801326e:	b510      	push	{r4, lr}
 8013270:	4604      	mov	r4, r0
 8013272:	6818      	ldr	r0, [r3, #0]
 8013274:	b118      	cbz	r0, 801327e <findslot+0x12>
 8013276:	6983      	ldr	r3, [r0, #24]
 8013278:	b90b      	cbnz	r3, 801327e <findslot+0x12>
 801327a:	f000 faf9 	bl	8013870 <__sinit>
 801327e:	2c13      	cmp	r4, #19
 8013280:	d807      	bhi.n	8013292 <findslot+0x26>
 8013282:	4806      	ldr	r0, [pc, #24]	; (801329c <findslot+0x30>)
 8013284:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8013288:	3201      	adds	r2, #1
 801328a:	d002      	beq.n	8013292 <findslot+0x26>
 801328c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8013290:	bd10      	pop	{r4, pc}
 8013292:	2000      	movs	r0, #0
 8013294:	e7fc      	b.n	8013290 <findslot+0x24>
 8013296:	bf00      	nop
 8013298:	200000c4 	.word	0x200000c4
 801329c:	20005b6c 	.word	0x20005b6c

080132a0 <error>:
 80132a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132a2:	4604      	mov	r4, r0
 80132a4:	f000 fa86 	bl	80137b4 <__errno>
 80132a8:	2613      	movs	r6, #19
 80132aa:	4605      	mov	r5, r0
 80132ac:	2700      	movs	r7, #0
 80132ae:	4630      	mov	r0, r6
 80132b0:	4639      	mov	r1, r7
 80132b2:	beab      	bkpt	0x00ab
 80132b4:	4606      	mov	r6, r0
 80132b6:	602e      	str	r6, [r5, #0]
 80132b8:	4620      	mov	r0, r4
 80132ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080132bc <checkerror>:
 80132bc:	1c43      	adds	r3, r0, #1
 80132be:	d101      	bne.n	80132c4 <checkerror+0x8>
 80132c0:	f7ff bfee 	b.w	80132a0 <error>
 80132c4:	4770      	bx	lr

080132c6 <_swiread>:
 80132c6:	b530      	push	{r4, r5, lr}
 80132c8:	b085      	sub	sp, #20
 80132ca:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80132ce:	9203      	str	r2, [sp, #12]
 80132d0:	2406      	movs	r4, #6
 80132d2:	ad01      	add	r5, sp, #4
 80132d4:	4620      	mov	r0, r4
 80132d6:	4629      	mov	r1, r5
 80132d8:	beab      	bkpt	0x00ab
 80132da:	4604      	mov	r4, r0
 80132dc:	4620      	mov	r0, r4
 80132de:	f7ff ffed 	bl	80132bc <checkerror>
 80132e2:	b005      	add	sp, #20
 80132e4:	bd30      	pop	{r4, r5, pc}

080132e6 <_read>:
 80132e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80132e8:	4615      	mov	r5, r2
 80132ea:	9101      	str	r1, [sp, #4]
 80132ec:	f7ff ffbe 	bl	801326c <findslot>
 80132f0:	9901      	ldr	r1, [sp, #4]
 80132f2:	4604      	mov	r4, r0
 80132f4:	b938      	cbnz	r0, 8013306 <_read+0x20>
 80132f6:	f000 fa5d 	bl	80137b4 <__errno>
 80132fa:	2309      	movs	r3, #9
 80132fc:	6003      	str	r3, [r0, #0]
 80132fe:	f04f 30ff 	mov.w	r0, #4294967295
 8013302:	b003      	add	sp, #12
 8013304:	bd30      	pop	{r4, r5, pc}
 8013306:	6800      	ldr	r0, [r0, #0]
 8013308:	462a      	mov	r2, r5
 801330a:	f7ff ffdc 	bl	80132c6 <_swiread>
 801330e:	1c43      	adds	r3, r0, #1
 8013310:	d0f7      	beq.n	8013302 <_read+0x1c>
 8013312:	6863      	ldr	r3, [r4, #4]
 8013314:	1a2a      	subs	r2, r5, r0
 8013316:	4413      	add	r3, r2
 8013318:	6063      	str	r3, [r4, #4]
 801331a:	4610      	mov	r0, r2
 801331c:	e7f1      	b.n	8013302 <_read+0x1c>

0801331e <_swilseek>:
 801331e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013320:	460c      	mov	r4, r1
 8013322:	4616      	mov	r6, r2
 8013324:	f7ff ffa2 	bl	801326c <findslot>
 8013328:	4605      	mov	r5, r0
 801332a:	b940      	cbnz	r0, 801333e <_swilseek+0x20>
 801332c:	f000 fa42 	bl	80137b4 <__errno>
 8013330:	2309      	movs	r3, #9
 8013332:	6003      	str	r3, [r0, #0]
 8013334:	f04f 34ff 	mov.w	r4, #4294967295
 8013338:	4620      	mov	r0, r4
 801333a:	b003      	add	sp, #12
 801333c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801333e:	2e02      	cmp	r6, #2
 8013340:	d903      	bls.n	801334a <_swilseek+0x2c>
 8013342:	f000 fa37 	bl	80137b4 <__errno>
 8013346:	2316      	movs	r3, #22
 8013348:	e7f3      	b.n	8013332 <_swilseek+0x14>
 801334a:	2e01      	cmp	r6, #1
 801334c:	d112      	bne.n	8013374 <_swilseek+0x56>
 801334e:	6843      	ldr	r3, [r0, #4]
 8013350:	18e4      	adds	r4, r4, r3
 8013352:	d4f6      	bmi.n	8013342 <_swilseek+0x24>
 8013354:	682b      	ldr	r3, [r5, #0]
 8013356:	260a      	movs	r6, #10
 8013358:	e9cd 3400 	strd	r3, r4, [sp]
 801335c:	466f      	mov	r7, sp
 801335e:	4630      	mov	r0, r6
 8013360:	4639      	mov	r1, r7
 8013362:	beab      	bkpt	0x00ab
 8013364:	4606      	mov	r6, r0
 8013366:	4630      	mov	r0, r6
 8013368:	f7ff ffa8 	bl	80132bc <checkerror>
 801336c:	2800      	cmp	r0, #0
 801336e:	dbe1      	blt.n	8013334 <_swilseek+0x16>
 8013370:	606c      	str	r4, [r5, #4]
 8013372:	e7e1      	b.n	8013338 <_swilseek+0x1a>
 8013374:	2e02      	cmp	r6, #2
 8013376:	d1ed      	bne.n	8013354 <_swilseek+0x36>
 8013378:	6803      	ldr	r3, [r0, #0]
 801337a:	9300      	str	r3, [sp, #0]
 801337c:	260c      	movs	r6, #12
 801337e:	466f      	mov	r7, sp
 8013380:	4630      	mov	r0, r6
 8013382:	4639      	mov	r1, r7
 8013384:	beab      	bkpt	0x00ab
 8013386:	4606      	mov	r6, r0
 8013388:	4630      	mov	r0, r6
 801338a:	f7ff ff97 	bl	80132bc <checkerror>
 801338e:	1c43      	adds	r3, r0, #1
 8013390:	d0d0      	beq.n	8013334 <_swilseek+0x16>
 8013392:	4404      	add	r4, r0
 8013394:	e7de      	b.n	8013354 <_swilseek+0x36>

08013396 <_lseek>:
 8013396:	f7ff bfc2 	b.w	801331e <_swilseek>

0801339a <_swiwrite>:
 801339a:	b530      	push	{r4, r5, lr}
 801339c:	b085      	sub	sp, #20
 801339e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80133a2:	9203      	str	r2, [sp, #12]
 80133a4:	2405      	movs	r4, #5
 80133a6:	ad01      	add	r5, sp, #4
 80133a8:	4620      	mov	r0, r4
 80133aa:	4629      	mov	r1, r5
 80133ac:	beab      	bkpt	0x00ab
 80133ae:	4604      	mov	r4, r0
 80133b0:	4620      	mov	r0, r4
 80133b2:	f7ff ff83 	bl	80132bc <checkerror>
 80133b6:	b005      	add	sp, #20
 80133b8:	bd30      	pop	{r4, r5, pc}

080133ba <_write>:
 80133ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80133bc:	4615      	mov	r5, r2
 80133be:	9101      	str	r1, [sp, #4]
 80133c0:	f7ff ff54 	bl	801326c <findslot>
 80133c4:	9901      	ldr	r1, [sp, #4]
 80133c6:	4604      	mov	r4, r0
 80133c8:	b930      	cbnz	r0, 80133d8 <_write+0x1e>
 80133ca:	f000 f9f3 	bl	80137b4 <__errno>
 80133ce:	2309      	movs	r3, #9
 80133d0:	6003      	str	r3, [r0, #0]
 80133d2:	f04f 30ff 	mov.w	r0, #4294967295
 80133d6:	e012      	b.n	80133fe <_write+0x44>
 80133d8:	6800      	ldr	r0, [r0, #0]
 80133da:	462a      	mov	r2, r5
 80133dc:	f7ff ffdd 	bl	801339a <_swiwrite>
 80133e0:	2800      	cmp	r0, #0
 80133e2:	dbf6      	blt.n	80133d2 <_write+0x18>
 80133e4:	6862      	ldr	r2, [r4, #4]
 80133e6:	1a2b      	subs	r3, r5, r0
 80133e8:	441a      	add	r2, r3
 80133ea:	42a8      	cmp	r0, r5
 80133ec:	6062      	str	r2, [r4, #4]
 80133ee:	d105      	bne.n	80133fc <_write+0x42>
 80133f0:	2000      	movs	r0, #0
 80133f2:	b003      	add	sp, #12
 80133f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80133f8:	f7ff bf52 	b.w	80132a0 <error>
 80133fc:	4618      	mov	r0, r3
 80133fe:	b003      	add	sp, #12
 8013400:	bd30      	pop	{r4, r5, pc}

08013402 <_swiclose>:
 8013402:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013404:	2402      	movs	r4, #2
 8013406:	9001      	str	r0, [sp, #4]
 8013408:	ad01      	add	r5, sp, #4
 801340a:	4620      	mov	r0, r4
 801340c:	4629      	mov	r1, r5
 801340e:	beab      	bkpt	0x00ab
 8013410:	4604      	mov	r4, r0
 8013412:	4620      	mov	r0, r4
 8013414:	f7ff ff52 	bl	80132bc <checkerror>
 8013418:	b003      	add	sp, #12
 801341a:	bd30      	pop	{r4, r5, pc}

0801341c <_close>:
 801341c:	b538      	push	{r3, r4, r5, lr}
 801341e:	4605      	mov	r5, r0
 8013420:	f7ff ff24 	bl	801326c <findslot>
 8013424:	4604      	mov	r4, r0
 8013426:	b930      	cbnz	r0, 8013436 <_close+0x1a>
 8013428:	f000 f9c4 	bl	80137b4 <__errno>
 801342c:	2309      	movs	r3, #9
 801342e:	6003      	str	r3, [r0, #0]
 8013430:	f04f 30ff 	mov.w	r0, #4294967295
 8013434:	bd38      	pop	{r3, r4, r5, pc}
 8013436:	3d01      	subs	r5, #1
 8013438:	2d01      	cmp	r5, #1
 801343a:	d809      	bhi.n	8013450 <_close+0x34>
 801343c:	4b09      	ldr	r3, [pc, #36]	; (8013464 <_close+0x48>)
 801343e:	689a      	ldr	r2, [r3, #8]
 8013440:	691b      	ldr	r3, [r3, #16]
 8013442:	429a      	cmp	r2, r3
 8013444:	d104      	bne.n	8013450 <_close+0x34>
 8013446:	f04f 33ff 	mov.w	r3, #4294967295
 801344a:	6003      	str	r3, [r0, #0]
 801344c:	2000      	movs	r0, #0
 801344e:	e7f1      	b.n	8013434 <_close+0x18>
 8013450:	6820      	ldr	r0, [r4, #0]
 8013452:	f7ff ffd6 	bl	8013402 <_swiclose>
 8013456:	2800      	cmp	r0, #0
 8013458:	d1ec      	bne.n	8013434 <_close+0x18>
 801345a:	f04f 33ff 	mov.w	r3, #4294967295
 801345e:	6023      	str	r3, [r4, #0]
 8013460:	e7e8      	b.n	8013434 <_close+0x18>
 8013462:	bf00      	nop
 8013464:	20005b6c 	.word	0x20005b6c

08013468 <_getpid>:
 8013468:	2001      	movs	r0, #1
 801346a:	4770      	bx	lr

0801346c <_swistat>:
 801346c:	b570      	push	{r4, r5, r6, lr}
 801346e:	460c      	mov	r4, r1
 8013470:	f7ff fefc 	bl	801326c <findslot>
 8013474:	4605      	mov	r5, r0
 8013476:	b930      	cbnz	r0, 8013486 <_swistat+0x1a>
 8013478:	f000 f99c 	bl	80137b4 <__errno>
 801347c:	2309      	movs	r3, #9
 801347e:	6003      	str	r3, [r0, #0]
 8013480:	f04f 30ff 	mov.w	r0, #4294967295
 8013484:	bd70      	pop	{r4, r5, r6, pc}
 8013486:	6863      	ldr	r3, [r4, #4]
 8013488:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801348c:	6063      	str	r3, [r4, #4]
 801348e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013492:	64a3      	str	r3, [r4, #72]	; 0x48
 8013494:	260c      	movs	r6, #12
 8013496:	4630      	mov	r0, r6
 8013498:	4629      	mov	r1, r5
 801349a:	beab      	bkpt	0x00ab
 801349c:	4605      	mov	r5, r0
 801349e:	4628      	mov	r0, r5
 80134a0:	f7ff ff0c 	bl	80132bc <checkerror>
 80134a4:	1c43      	adds	r3, r0, #1
 80134a6:	bf1c      	itt	ne
 80134a8:	6120      	strne	r0, [r4, #16]
 80134aa:	2000      	movne	r0, #0
 80134ac:	e7ea      	b.n	8013484 <_swistat+0x18>

080134ae <_fstat>:
 80134ae:	460b      	mov	r3, r1
 80134b0:	b510      	push	{r4, lr}
 80134b2:	2100      	movs	r1, #0
 80134b4:	4604      	mov	r4, r0
 80134b6:	2258      	movs	r2, #88	; 0x58
 80134b8:	4618      	mov	r0, r3
 80134ba:	f000 faac 	bl	8013a16 <memset>
 80134be:	4601      	mov	r1, r0
 80134c0:	4620      	mov	r0, r4
 80134c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134c6:	f7ff bfd1 	b.w	801346c <_swistat>

080134ca <_stat>:
 80134ca:	b538      	push	{r3, r4, r5, lr}
 80134cc:	460d      	mov	r5, r1
 80134ce:	4604      	mov	r4, r0
 80134d0:	2258      	movs	r2, #88	; 0x58
 80134d2:	2100      	movs	r1, #0
 80134d4:	4628      	mov	r0, r5
 80134d6:	f000 fa9e 	bl	8013a16 <memset>
 80134da:	4620      	mov	r0, r4
 80134dc:	2100      	movs	r1, #0
 80134de:	f000 f811 	bl	8013504 <_swiopen>
 80134e2:	1c43      	adds	r3, r0, #1
 80134e4:	4604      	mov	r4, r0
 80134e6:	d00b      	beq.n	8013500 <_stat+0x36>
 80134e8:	686b      	ldr	r3, [r5, #4]
 80134ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80134ee:	606b      	str	r3, [r5, #4]
 80134f0:	4629      	mov	r1, r5
 80134f2:	f7ff ffbb 	bl	801346c <_swistat>
 80134f6:	4605      	mov	r5, r0
 80134f8:	4620      	mov	r0, r4
 80134fa:	f7ff ff8f 	bl	801341c <_close>
 80134fe:	462c      	mov	r4, r5
 8013500:	4620      	mov	r0, r4
 8013502:	bd38      	pop	{r3, r4, r5, pc}

08013504 <_swiopen>:
 8013504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013508:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80135b4 <_swiopen+0xb0>
 801350c:	b097      	sub	sp, #92	; 0x5c
 801350e:	4607      	mov	r7, r0
 8013510:	460e      	mov	r6, r1
 8013512:	2500      	movs	r5, #0
 8013514:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8013518:	1c61      	adds	r1, r4, #1
 801351a:	d037      	beq.n	801358c <_swiopen+0x88>
 801351c:	3501      	adds	r5, #1
 801351e:	2d14      	cmp	r5, #20
 8013520:	d1f8      	bne.n	8013514 <_swiopen+0x10>
 8013522:	f000 f947 	bl	80137b4 <__errno>
 8013526:	2318      	movs	r3, #24
 8013528:	6003      	str	r3, [r0, #0]
 801352a:	f04f 34ff 	mov.w	r4, #4294967295
 801352e:	e03d      	b.n	80135ac <_swiopen+0xa8>
 8013530:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8013534:	f240 6301 	movw	r3, #1537	; 0x601
 8013538:	07b2      	lsls	r2, r6, #30
 801353a:	bf48      	it	mi
 801353c:	f044 0402 	orrmi.w	r4, r4, #2
 8013540:	421e      	tst	r6, r3
 8013542:	bf18      	it	ne
 8013544:	f044 0404 	orrne.w	r4, r4, #4
 8013548:	0733      	lsls	r3, r6, #28
 801354a:	bf48      	it	mi
 801354c:	f024 0404 	bicmi.w	r4, r4, #4
 8013550:	4638      	mov	r0, r7
 8013552:	bf48      	it	mi
 8013554:	f044 0408 	orrmi.w	r4, r4, #8
 8013558:	9700      	str	r7, [sp, #0]
 801355a:	f7ec fe39 	bl	80001d0 <strlen>
 801355e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8013562:	2401      	movs	r4, #1
 8013564:	4620      	mov	r0, r4
 8013566:	4649      	mov	r1, r9
 8013568:	beab      	bkpt	0x00ab
 801356a:	4604      	mov	r4, r0
 801356c:	2c00      	cmp	r4, #0
 801356e:	db08      	blt.n	8013582 <_swiopen+0x7e>
 8013570:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8013574:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8013578:	2300      	movs	r3, #0
 801357a:	f8c8 3004 	str.w	r3, [r8, #4]
 801357e:	462c      	mov	r4, r5
 8013580:	e014      	b.n	80135ac <_swiopen+0xa8>
 8013582:	4620      	mov	r0, r4
 8013584:	f7ff fe8c 	bl	80132a0 <error>
 8013588:	4604      	mov	r4, r0
 801358a:	e00f      	b.n	80135ac <_swiopen+0xa8>
 801358c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8013590:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8013594:	46e9      	mov	r9, sp
 8013596:	d1cb      	bne.n	8013530 <_swiopen+0x2c>
 8013598:	4649      	mov	r1, r9
 801359a:	4638      	mov	r0, r7
 801359c:	f7ff ff95 	bl	80134ca <_stat>
 80135a0:	3001      	adds	r0, #1
 80135a2:	d0c5      	beq.n	8013530 <_swiopen+0x2c>
 80135a4:	f000 f906 	bl	80137b4 <__errno>
 80135a8:	2311      	movs	r3, #17
 80135aa:	6003      	str	r3, [r0, #0]
 80135ac:	4620      	mov	r0, r4
 80135ae:	b017      	add	sp, #92	; 0x5c
 80135b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135b4:	20005b6c 	.word	0x20005b6c

080135b8 <_get_semihosting_exts>:
 80135b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80135bc:	4606      	mov	r6, r0
 80135be:	460f      	mov	r7, r1
 80135c0:	482a      	ldr	r0, [pc, #168]	; (801366c <_get_semihosting_exts+0xb4>)
 80135c2:	2100      	movs	r1, #0
 80135c4:	4615      	mov	r5, r2
 80135c6:	f7ff ff9d 	bl	8013504 <_swiopen>
 80135ca:	462a      	mov	r2, r5
 80135cc:	4604      	mov	r4, r0
 80135ce:	2100      	movs	r1, #0
 80135d0:	4630      	mov	r0, r6
 80135d2:	f000 fa20 	bl	8013a16 <memset>
 80135d6:	1c63      	adds	r3, r4, #1
 80135d8:	d016      	beq.n	8013608 <_get_semihosting_exts+0x50>
 80135da:	4620      	mov	r0, r4
 80135dc:	f7ff fe46 	bl	801326c <findslot>
 80135e0:	f04f 090c 	mov.w	r9, #12
 80135e4:	4680      	mov	r8, r0
 80135e6:	4648      	mov	r0, r9
 80135e8:	4641      	mov	r1, r8
 80135ea:	beab      	bkpt	0x00ab
 80135ec:	4680      	mov	r8, r0
 80135ee:	4640      	mov	r0, r8
 80135f0:	f7ff fe64 	bl	80132bc <checkerror>
 80135f4:	2803      	cmp	r0, #3
 80135f6:	dd02      	ble.n	80135fe <_get_semihosting_exts+0x46>
 80135f8:	1ec3      	subs	r3, r0, #3
 80135fa:	42ab      	cmp	r3, r5
 80135fc:	dc08      	bgt.n	8013610 <_get_semihosting_exts+0x58>
 80135fe:	4620      	mov	r0, r4
 8013600:	f7ff ff0c 	bl	801341c <_close>
 8013604:	f04f 34ff 	mov.w	r4, #4294967295
 8013608:	4620      	mov	r0, r4
 801360a:	b003      	add	sp, #12
 801360c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013610:	2204      	movs	r2, #4
 8013612:	eb0d 0102 	add.w	r1, sp, r2
 8013616:	4620      	mov	r0, r4
 8013618:	f7ff fe65 	bl	80132e6 <_read>
 801361c:	2803      	cmp	r0, #3
 801361e:	ddee      	ble.n	80135fe <_get_semihosting_exts+0x46>
 8013620:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013624:	2b53      	cmp	r3, #83	; 0x53
 8013626:	d1ea      	bne.n	80135fe <_get_semihosting_exts+0x46>
 8013628:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801362c:	2b48      	cmp	r3, #72	; 0x48
 801362e:	d1e6      	bne.n	80135fe <_get_semihosting_exts+0x46>
 8013630:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013634:	2b46      	cmp	r3, #70	; 0x46
 8013636:	d1e2      	bne.n	80135fe <_get_semihosting_exts+0x46>
 8013638:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801363c:	2b42      	cmp	r3, #66	; 0x42
 801363e:	d1de      	bne.n	80135fe <_get_semihosting_exts+0x46>
 8013640:	2201      	movs	r2, #1
 8013642:	4639      	mov	r1, r7
 8013644:	4620      	mov	r0, r4
 8013646:	f7ff fe6a 	bl	801331e <_swilseek>
 801364a:	2800      	cmp	r0, #0
 801364c:	dbd7      	blt.n	80135fe <_get_semihosting_exts+0x46>
 801364e:	462a      	mov	r2, r5
 8013650:	4631      	mov	r1, r6
 8013652:	4620      	mov	r0, r4
 8013654:	f7ff fe47 	bl	80132e6 <_read>
 8013658:	4605      	mov	r5, r0
 801365a:	4620      	mov	r0, r4
 801365c:	f7ff fede 	bl	801341c <_close>
 8013660:	4628      	mov	r0, r5
 8013662:	f7ff fe2b 	bl	80132bc <checkerror>
 8013666:	4604      	mov	r4, r0
 8013668:	e7ce      	b.n	8013608 <_get_semihosting_exts+0x50>
 801366a:	bf00      	nop
 801366c:	0801aa04 	.word	0x0801aa04

08013670 <initialise_semihosting_exts>:
 8013670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013672:	4d0a      	ldr	r5, [pc, #40]	; (801369c <initialise_semihosting_exts+0x2c>)
 8013674:	4c0a      	ldr	r4, [pc, #40]	; (80136a0 <initialise_semihosting_exts+0x30>)
 8013676:	2100      	movs	r1, #0
 8013678:	2201      	movs	r2, #1
 801367a:	a801      	add	r0, sp, #4
 801367c:	6029      	str	r1, [r5, #0]
 801367e:	6022      	str	r2, [r4, #0]
 8013680:	f7ff ff9a 	bl	80135b8 <_get_semihosting_exts>
 8013684:	2800      	cmp	r0, #0
 8013686:	dd07      	ble.n	8013698 <initialise_semihosting_exts+0x28>
 8013688:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801368c:	f003 0201 	and.w	r2, r3, #1
 8013690:	f003 0302 	and.w	r3, r3, #2
 8013694:	602a      	str	r2, [r5, #0]
 8013696:	6023      	str	r3, [r4, #0]
 8013698:	b003      	add	sp, #12
 801369a:	bd30      	pop	{r4, r5, pc}
 801369c:	200000bc 	.word	0x200000bc
 80136a0:	200000c0 	.word	0x200000c0

080136a4 <_has_ext_stdout_stderr>:
 80136a4:	b510      	push	{r4, lr}
 80136a6:	4c04      	ldr	r4, [pc, #16]	; (80136b8 <_has_ext_stdout_stderr+0x14>)
 80136a8:	6823      	ldr	r3, [r4, #0]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	da01      	bge.n	80136b2 <_has_ext_stdout_stderr+0xe>
 80136ae:	f7ff ffdf 	bl	8013670 <initialise_semihosting_exts>
 80136b2:	6820      	ldr	r0, [r4, #0]
 80136b4:	bd10      	pop	{r4, pc}
 80136b6:	bf00      	nop
 80136b8:	200000c0 	.word	0x200000c0

080136bc <initialise_monitor_handles>:
 80136bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136c0:	b085      	sub	sp, #20
 80136c2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8013774 <initialise_monitor_handles+0xb8>
 80136c6:	f8cd 9004 	str.w	r9, [sp, #4]
 80136ca:	2303      	movs	r3, #3
 80136cc:	2400      	movs	r4, #0
 80136ce:	9303      	str	r3, [sp, #12]
 80136d0:	af01      	add	r7, sp, #4
 80136d2:	9402      	str	r4, [sp, #8]
 80136d4:	2501      	movs	r5, #1
 80136d6:	4628      	mov	r0, r5
 80136d8:	4639      	mov	r1, r7
 80136da:	beab      	bkpt	0x00ab
 80136dc:	4605      	mov	r5, r0
 80136de:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8013778 <initialise_monitor_handles+0xbc>
 80136e2:	4623      	mov	r3, r4
 80136e4:	4c20      	ldr	r4, [pc, #128]	; (8013768 <initialise_monitor_handles+0xac>)
 80136e6:	f8c8 5000 	str.w	r5, [r8]
 80136ea:	f04f 32ff 	mov.w	r2, #4294967295
 80136ee:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80136f2:	3301      	adds	r3, #1
 80136f4:	2b14      	cmp	r3, #20
 80136f6:	d1fa      	bne.n	80136ee <initialise_monitor_handles+0x32>
 80136f8:	f7ff ffd4 	bl	80136a4 <_has_ext_stdout_stderr>
 80136fc:	4d1b      	ldr	r5, [pc, #108]	; (801376c <initialise_monitor_handles+0xb0>)
 80136fe:	b1d0      	cbz	r0, 8013736 <initialise_monitor_handles+0x7a>
 8013700:	f04f 0a03 	mov.w	sl, #3
 8013704:	2304      	movs	r3, #4
 8013706:	f8cd 9004 	str.w	r9, [sp, #4]
 801370a:	2601      	movs	r6, #1
 801370c:	f8cd a00c 	str.w	sl, [sp, #12]
 8013710:	9302      	str	r3, [sp, #8]
 8013712:	4630      	mov	r0, r6
 8013714:	4639      	mov	r1, r7
 8013716:	beab      	bkpt	0x00ab
 8013718:	4683      	mov	fp, r0
 801371a:	4b15      	ldr	r3, [pc, #84]	; (8013770 <initialise_monitor_handles+0xb4>)
 801371c:	f8cd 9004 	str.w	r9, [sp, #4]
 8013720:	f8c3 b000 	str.w	fp, [r3]
 8013724:	2308      	movs	r3, #8
 8013726:	f8cd a00c 	str.w	sl, [sp, #12]
 801372a:	9302      	str	r3, [sp, #8]
 801372c:	4630      	mov	r0, r6
 801372e:	4639      	mov	r1, r7
 8013730:	beab      	bkpt	0x00ab
 8013732:	4606      	mov	r6, r0
 8013734:	602e      	str	r6, [r5, #0]
 8013736:	682b      	ldr	r3, [r5, #0]
 8013738:	3301      	adds	r3, #1
 801373a:	bf02      	ittt	eq
 801373c:	4b0c      	ldreq	r3, [pc, #48]	; (8013770 <initialise_monitor_handles+0xb4>)
 801373e:	681b      	ldreq	r3, [r3, #0]
 8013740:	602b      	streq	r3, [r5, #0]
 8013742:	2600      	movs	r6, #0
 8013744:	f8d8 3000 	ldr.w	r3, [r8]
 8013748:	6023      	str	r3, [r4, #0]
 801374a:	6066      	str	r6, [r4, #4]
 801374c:	f7ff ffaa 	bl	80136a4 <_has_ext_stdout_stderr>
 8013750:	b130      	cbz	r0, 8013760 <initialise_monitor_handles+0xa4>
 8013752:	4b07      	ldr	r3, [pc, #28]	; (8013770 <initialise_monitor_handles+0xb4>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	e9c4 3602 	strd	r3, r6, [r4, #8]
 801375a:	682b      	ldr	r3, [r5, #0]
 801375c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8013760:	b005      	add	sp, #20
 8013762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013766:	bf00      	nop
 8013768:	20005b6c 	.word	0x20005b6c
 801376c:	20005b60 	.word	0x20005b60
 8013770:	20005b68 	.word	0x20005b68
 8013774:	0801aa1a 	.word	0x0801aa1a
 8013778:	20005b64 	.word	0x20005b64

0801377c <_isatty>:
 801377c:	b570      	push	{r4, r5, r6, lr}
 801377e:	f7ff fd75 	bl	801326c <findslot>
 8013782:	2509      	movs	r5, #9
 8013784:	4604      	mov	r4, r0
 8013786:	b920      	cbnz	r0, 8013792 <_isatty+0x16>
 8013788:	f000 f814 	bl	80137b4 <__errno>
 801378c:	6005      	str	r5, [r0, #0]
 801378e:	4620      	mov	r0, r4
 8013790:	bd70      	pop	{r4, r5, r6, pc}
 8013792:	4628      	mov	r0, r5
 8013794:	4621      	mov	r1, r4
 8013796:	beab      	bkpt	0x00ab
 8013798:	4604      	mov	r4, r0
 801379a:	2c01      	cmp	r4, #1
 801379c:	d0f7      	beq.n	801378e <_isatty+0x12>
 801379e:	f000 f809 	bl	80137b4 <__errno>
 80137a2:	2400      	movs	r4, #0
 80137a4:	4605      	mov	r5, r0
 80137a6:	2613      	movs	r6, #19
 80137a8:	4630      	mov	r0, r6
 80137aa:	4621      	mov	r1, r4
 80137ac:	beab      	bkpt	0x00ab
 80137ae:	4606      	mov	r6, r0
 80137b0:	602e      	str	r6, [r5, #0]
 80137b2:	e7ec      	b.n	801378e <_isatty+0x12>

080137b4 <__errno>:
 80137b4:	4b01      	ldr	r3, [pc, #4]	; (80137bc <__errno+0x8>)
 80137b6:	6818      	ldr	r0, [r3, #0]
 80137b8:	4770      	bx	lr
 80137ba:	bf00      	nop
 80137bc:	200000c4 	.word	0x200000c4

080137c0 <std>:
 80137c0:	2300      	movs	r3, #0
 80137c2:	b510      	push	{r4, lr}
 80137c4:	4604      	mov	r4, r0
 80137c6:	e9c0 3300 	strd	r3, r3, [r0]
 80137ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80137ce:	6083      	str	r3, [r0, #8]
 80137d0:	8181      	strh	r1, [r0, #12]
 80137d2:	6643      	str	r3, [r0, #100]	; 0x64
 80137d4:	81c2      	strh	r2, [r0, #14]
 80137d6:	6183      	str	r3, [r0, #24]
 80137d8:	4619      	mov	r1, r3
 80137da:	2208      	movs	r2, #8
 80137dc:	305c      	adds	r0, #92	; 0x5c
 80137de:	f000 f91a 	bl	8013a16 <memset>
 80137e2:	4b05      	ldr	r3, [pc, #20]	; (80137f8 <std+0x38>)
 80137e4:	6263      	str	r3, [r4, #36]	; 0x24
 80137e6:	4b05      	ldr	r3, [pc, #20]	; (80137fc <std+0x3c>)
 80137e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80137ea:	4b05      	ldr	r3, [pc, #20]	; (8013800 <std+0x40>)
 80137ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80137ee:	4b05      	ldr	r3, [pc, #20]	; (8013804 <std+0x44>)
 80137f0:	6224      	str	r4, [r4, #32]
 80137f2:	6323      	str	r3, [r4, #48]	; 0x30
 80137f4:	bd10      	pop	{r4, pc}
 80137f6:	bf00      	nop
 80137f8:	080145a1 	.word	0x080145a1
 80137fc:	080145c3 	.word	0x080145c3
 8013800:	080145fb 	.word	0x080145fb
 8013804:	0801461f 	.word	0x0801461f

08013808 <_cleanup_r>:
 8013808:	4901      	ldr	r1, [pc, #4]	; (8013810 <_cleanup_r+0x8>)
 801380a:	f000 b8af 	b.w	801396c <_fwalk_reent>
 801380e:	bf00      	nop
 8013810:	080155f1 	.word	0x080155f1

08013814 <__sfmoreglue>:
 8013814:	b570      	push	{r4, r5, r6, lr}
 8013816:	2268      	movs	r2, #104	; 0x68
 8013818:	1e4d      	subs	r5, r1, #1
 801381a:	4355      	muls	r5, r2
 801381c:	460e      	mov	r6, r1
 801381e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013822:	f000 f921 	bl	8013a68 <_malloc_r>
 8013826:	4604      	mov	r4, r0
 8013828:	b140      	cbz	r0, 801383c <__sfmoreglue+0x28>
 801382a:	2100      	movs	r1, #0
 801382c:	e9c0 1600 	strd	r1, r6, [r0]
 8013830:	300c      	adds	r0, #12
 8013832:	60a0      	str	r0, [r4, #8]
 8013834:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013838:	f000 f8ed 	bl	8013a16 <memset>
 801383c:	4620      	mov	r0, r4
 801383e:	bd70      	pop	{r4, r5, r6, pc}

08013840 <__sfp_lock_acquire>:
 8013840:	4801      	ldr	r0, [pc, #4]	; (8013848 <__sfp_lock_acquire+0x8>)
 8013842:	f000 b8d8 	b.w	80139f6 <__retarget_lock_acquire_recursive>
 8013846:	bf00      	nop
 8013848:	20005c0d 	.word	0x20005c0d

0801384c <__sfp_lock_release>:
 801384c:	4801      	ldr	r0, [pc, #4]	; (8013854 <__sfp_lock_release+0x8>)
 801384e:	f000 b8d3 	b.w	80139f8 <__retarget_lock_release_recursive>
 8013852:	bf00      	nop
 8013854:	20005c0d 	.word	0x20005c0d

08013858 <__sinit_lock_acquire>:
 8013858:	4801      	ldr	r0, [pc, #4]	; (8013860 <__sinit_lock_acquire+0x8>)
 801385a:	f000 b8cc 	b.w	80139f6 <__retarget_lock_acquire_recursive>
 801385e:	bf00      	nop
 8013860:	20005c0e 	.word	0x20005c0e

08013864 <__sinit_lock_release>:
 8013864:	4801      	ldr	r0, [pc, #4]	; (801386c <__sinit_lock_release+0x8>)
 8013866:	f000 b8c7 	b.w	80139f8 <__retarget_lock_release_recursive>
 801386a:	bf00      	nop
 801386c:	20005c0e 	.word	0x20005c0e

08013870 <__sinit>:
 8013870:	b510      	push	{r4, lr}
 8013872:	4604      	mov	r4, r0
 8013874:	f7ff fff0 	bl	8013858 <__sinit_lock_acquire>
 8013878:	69a3      	ldr	r3, [r4, #24]
 801387a:	b11b      	cbz	r3, 8013884 <__sinit+0x14>
 801387c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013880:	f7ff bff0 	b.w	8013864 <__sinit_lock_release>
 8013884:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013888:	6523      	str	r3, [r4, #80]	; 0x50
 801388a:	4b13      	ldr	r3, [pc, #76]	; (80138d8 <__sinit+0x68>)
 801388c:	4a13      	ldr	r2, [pc, #76]	; (80138dc <__sinit+0x6c>)
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	62a2      	str	r2, [r4, #40]	; 0x28
 8013892:	42a3      	cmp	r3, r4
 8013894:	bf04      	itt	eq
 8013896:	2301      	moveq	r3, #1
 8013898:	61a3      	streq	r3, [r4, #24]
 801389a:	4620      	mov	r0, r4
 801389c:	f000 f820 	bl	80138e0 <__sfp>
 80138a0:	6060      	str	r0, [r4, #4]
 80138a2:	4620      	mov	r0, r4
 80138a4:	f000 f81c 	bl	80138e0 <__sfp>
 80138a8:	60a0      	str	r0, [r4, #8]
 80138aa:	4620      	mov	r0, r4
 80138ac:	f000 f818 	bl	80138e0 <__sfp>
 80138b0:	2200      	movs	r2, #0
 80138b2:	60e0      	str	r0, [r4, #12]
 80138b4:	2104      	movs	r1, #4
 80138b6:	6860      	ldr	r0, [r4, #4]
 80138b8:	f7ff ff82 	bl	80137c0 <std>
 80138bc:	68a0      	ldr	r0, [r4, #8]
 80138be:	2201      	movs	r2, #1
 80138c0:	2109      	movs	r1, #9
 80138c2:	f7ff ff7d 	bl	80137c0 <std>
 80138c6:	68e0      	ldr	r0, [r4, #12]
 80138c8:	2202      	movs	r2, #2
 80138ca:	2112      	movs	r1, #18
 80138cc:	f7ff ff78 	bl	80137c0 <std>
 80138d0:	2301      	movs	r3, #1
 80138d2:	61a3      	str	r3, [r4, #24]
 80138d4:	e7d2      	b.n	801387c <__sinit+0xc>
 80138d6:	bf00      	nop
 80138d8:	0801aa80 	.word	0x0801aa80
 80138dc:	08013809 	.word	0x08013809

080138e0 <__sfp>:
 80138e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138e2:	4607      	mov	r7, r0
 80138e4:	f7ff ffac 	bl	8013840 <__sfp_lock_acquire>
 80138e8:	4b1e      	ldr	r3, [pc, #120]	; (8013964 <__sfp+0x84>)
 80138ea:	681e      	ldr	r6, [r3, #0]
 80138ec:	69b3      	ldr	r3, [r6, #24]
 80138ee:	b913      	cbnz	r3, 80138f6 <__sfp+0x16>
 80138f0:	4630      	mov	r0, r6
 80138f2:	f7ff ffbd 	bl	8013870 <__sinit>
 80138f6:	3648      	adds	r6, #72	; 0x48
 80138f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80138fc:	3b01      	subs	r3, #1
 80138fe:	d503      	bpl.n	8013908 <__sfp+0x28>
 8013900:	6833      	ldr	r3, [r6, #0]
 8013902:	b30b      	cbz	r3, 8013948 <__sfp+0x68>
 8013904:	6836      	ldr	r6, [r6, #0]
 8013906:	e7f7      	b.n	80138f8 <__sfp+0x18>
 8013908:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801390c:	b9d5      	cbnz	r5, 8013944 <__sfp+0x64>
 801390e:	4b16      	ldr	r3, [pc, #88]	; (8013968 <__sfp+0x88>)
 8013910:	60e3      	str	r3, [r4, #12]
 8013912:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013916:	6665      	str	r5, [r4, #100]	; 0x64
 8013918:	f000 f86c 	bl	80139f4 <__retarget_lock_init_recursive>
 801391c:	f7ff ff96 	bl	801384c <__sfp_lock_release>
 8013920:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013924:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013928:	6025      	str	r5, [r4, #0]
 801392a:	61a5      	str	r5, [r4, #24]
 801392c:	2208      	movs	r2, #8
 801392e:	4629      	mov	r1, r5
 8013930:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013934:	f000 f86f 	bl	8013a16 <memset>
 8013938:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801393c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013940:	4620      	mov	r0, r4
 8013942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013944:	3468      	adds	r4, #104	; 0x68
 8013946:	e7d9      	b.n	80138fc <__sfp+0x1c>
 8013948:	2104      	movs	r1, #4
 801394a:	4638      	mov	r0, r7
 801394c:	f7ff ff62 	bl	8013814 <__sfmoreglue>
 8013950:	4604      	mov	r4, r0
 8013952:	6030      	str	r0, [r6, #0]
 8013954:	2800      	cmp	r0, #0
 8013956:	d1d5      	bne.n	8013904 <__sfp+0x24>
 8013958:	f7ff ff78 	bl	801384c <__sfp_lock_release>
 801395c:	230c      	movs	r3, #12
 801395e:	603b      	str	r3, [r7, #0]
 8013960:	e7ee      	b.n	8013940 <__sfp+0x60>
 8013962:	bf00      	nop
 8013964:	0801aa80 	.word	0x0801aa80
 8013968:	ffff0001 	.word	0xffff0001

0801396c <_fwalk_reent>:
 801396c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013970:	4606      	mov	r6, r0
 8013972:	4688      	mov	r8, r1
 8013974:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013978:	2700      	movs	r7, #0
 801397a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801397e:	f1b9 0901 	subs.w	r9, r9, #1
 8013982:	d505      	bpl.n	8013990 <_fwalk_reent+0x24>
 8013984:	6824      	ldr	r4, [r4, #0]
 8013986:	2c00      	cmp	r4, #0
 8013988:	d1f7      	bne.n	801397a <_fwalk_reent+0xe>
 801398a:	4638      	mov	r0, r7
 801398c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013990:	89ab      	ldrh	r3, [r5, #12]
 8013992:	2b01      	cmp	r3, #1
 8013994:	d907      	bls.n	80139a6 <_fwalk_reent+0x3a>
 8013996:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801399a:	3301      	adds	r3, #1
 801399c:	d003      	beq.n	80139a6 <_fwalk_reent+0x3a>
 801399e:	4629      	mov	r1, r5
 80139a0:	4630      	mov	r0, r6
 80139a2:	47c0      	blx	r8
 80139a4:	4307      	orrs	r7, r0
 80139a6:	3568      	adds	r5, #104	; 0x68
 80139a8:	e7e9      	b.n	801397e <_fwalk_reent+0x12>
	...

080139ac <__libc_init_array>:
 80139ac:	b570      	push	{r4, r5, r6, lr}
 80139ae:	4d0d      	ldr	r5, [pc, #52]	; (80139e4 <__libc_init_array+0x38>)
 80139b0:	4c0d      	ldr	r4, [pc, #52]	; (80139e8 <__libc_init_array+0x3c>)
 80139b2:	1b64      	subs	r4, r4, r5
 80139b4:	10a4      	asrs	r4, r4, #2
 80139b6:	2600      	movs	r6, #0
 80139b8:	42a6      	cmp	r6, r4
 80139ba:	d109      	bne.n	80139d0 <__libc_init_array+0x24>
 80139bc:	4d0b      	ldr	r5, [pc, #44]	; (80139ec <__libc_init_array+0x40>)
 80139be:	4c0c      	ldr	r4, [pc, #48]	; (80139f0 <__libc_init_array+0x44>)
 80139c0:	f002 fea8 	bl	8016714 <_init>
 80139c4:	1b64      	subs	r4, r4, r5
 80139c6:	10a4      	asrs	r4, r4, #2
 80139c8:	2600      	movs	r6, #0
 80139ca:	42a6      	cmp	r6, r4
 80139cc:	d105      	bne.n	80139da <__libc_init_array+0x2e>
 80139ce:	bd70      	pop	{r4, r5, r6, pc}
 80139d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80139d4:	4798      	blx	r3
 80139d6:	3601      	adds	r6, #1
 80139d8:	e7ee      	b.n	80139b8 <__libc_init_array+0xc>
 80139da:	f855 3b04 	ldr.w	r3, [r5], #4
 80139de:	4798      	blx	r3
 80139e0:	3601      	adds	r6, #1
 80139e2:	e7f2      	b.n	80139ca <__libc_init_array+0x1e>
 80139e4:	0801ae04 	.word	0x0801ae04
 80139e8:	0801ae04 	.word	0x0801ae04
 80139ec:	0801ae04 	.word	0x0801ae04
 80139f0:	0801ae08 	.word	0x0801ae08

080139f4 <__retarget_lock_init_recursive>:
 80139f4:	4770      	bx	lr

080139f6 <__retarget_lock_acquire_recursive>:
 80139f6:	4770      	bx	lr

080139f8 <__retarget_lock_release_recursive>:
 80139f8:	4770      	bx	lr

080139fa <memcpy>:
 80139fa:	440a      	add	r2, r1
 80139fc:	4291      	cmp	r1, r2
 80139fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8013a02:	d100      	bne.n	8013a06 <memcpy+0xc>
 8013a04:	4770      	bx	lr
 8013a06:	b510      	push	{r4, lr}
 8013a08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013a10:	4291      	cmp	r1, r2
 8013a12:	d1f9      	bne.n	8013a08 <memcpy+0xe>
 8013a14:	bd10      	pop	{r4, pc}

08013a16 <memset>:
 8013a16:	4402      	add	r2, r0
 8013a18:	4603      	mov	r3, r0
 8013a1a:	4293      	cmp	r3, r2
 8013a1c:	d100      	bne.n	8013a20 <memset+0xa>
 8013a1e:	4770      	bx	lr
 8013a20:	f803 1b01 	strb.w	r1, [r3], #1
 8013a24:	e7f9      	b.n	8013a1a <memset+0x4>
	...

08013a28 <sbrk_aligned>:
 8013a28:	b570      	push	{r4, r5, r6, lr}
 8013a2a:	4e0e      	ldr	r6, [pc, #56]	; (8013a64 <sbrk_aligned+0x3c>)
 8013a2c:	460c      	mov	r4, r1
 8013a2e:	6831      	ldr	r1, [r6, #0]
 8013a30:	4605      	mov	r5, r0
 8013a32:	b911      	cbnz	r1, 8013a3a <sbrk_aligned+0x12>
 8013a34:	f000 fd84 	bl	8014540 <_sbrk_r>
 8013a38:	6030      	str	r0, [r6, #0]
 8013a3a:	4621      	mov	r1, r4
 8013a3c:	4628      	mov	r0, r5
 8013a3e:	f000 fd7f 	bl	8014540 <_sbrk_r>
 8013a42:	1c43      	adds	r3, r0, #1
 8013a44:	d00a      	beq.n	8013a5c <sbrk_aligned+0x34>
 8013a46:	1cc4      	adds	r4, r0, #3
 8013a48:	f024 0403 	bic.w	r4, r4, #3
 8013a4c:	42a0      	cmp	r0, r4
 8013a4e:	d007      	beq.n	8013a60 <sbrk_aligned+0x38>
 8013a50:	1a21      	subs	r1, r4, r0
 8013a52:	4628      	mov	r0, r5
 8013a54:	f000 fd74 	bl	8014540 <_sbrk_r>
 8013a58:	3001      	adds	r0, #1
 8013a5a:	d101      	bne.n	8013a60 <sbrk_aligned+0x38>
 8013a5c:	f04f 34ff 	mov.w	r4, #4294967295
 8013a60:	4620      	mov	r0, r4
 8013a62:	bd70      	pop	{r4, r5, r6, pc}
 8013a64:	20005c14 	.word	0x20005c14

08013a68 <_malloc_r>:
 8013a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a6c:	1ccd      	adds	r5, r1, #3
 8013a6e:	f025 0503 	bic.w	r5, r5, #3
 8013a72:	3508      	adds	r5, #8
 8013a74:	2d0c      	cmp	r5, #12
 8013a76:	bf38      	it	cc
 8013a78:	250c      	movcc	r5, #12
 8013a7a:	2d00      	cmp	r5, #0
 8013a7c:	4607      	mov	r7, r0
 8013a7e:	db01      	blt.n	8013a84 <_malloc_r+0x1c>
 8013a80:	42a9      	cmp	r1, r5
 8013a82:	d905      	bls.n	8013a90 <_malloc_r+0x28>
 8013a84:	230c      	movs	r3, #12
 8013a86:	603b      	str	r3, [r7, #0]
 8013a88:	2600      	movs	r6, #0
 8013a8a:	4630      	mov	r0, r6
 8013a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a90:	4e2e      	ldr	r6, [pc, #184]	; (8013b4c <_malloc_r+0xe4>)
 8013a92:	f001 fe6d 	bl	8015770 <__malloc_lock>
 8013a96:	6833      	ldr	r3, [r6, #0]
 8013a98:	461c      	mov	r4, r3
 8013a9a:	bb34      	cbnz	r4, 8013aea <_malloc_r+0x82>
 8013a9c:	4629      	mov	r1, r5
 8013a9e:	4638      	mov	r0, r7
 8013aa0:	f7ff ffc2 	bl	8013a28 <sbrk_aligned>
 8013aa4:	1c43      	adds	r3, r0, #1
 8013aa6:	4604      	mov	r4, r0
 8013aa8:	d14d      	bne.n	8013b46 <_malloc_r+0xde>
 8013aaa:	6834      	ldr	r4, [r6, #0]
 8013aac:	4626      	mov	r6, r4
 8013aae:	2e00      	cmp	r6, #0
 8013ab0:	d140      	bne.n	8013b34 <_malloc_r+0xcc>
 8013ab2:	6823      	ldr	r3, [r4, #0]
 8013ab4:	4631      	mov	r1, r6
 8013ab6:	4638      	mov	r0, r7
 8013ab8:	eb04 0803 	add.w	r8, r4, r3
 8013abc:	f000 fd40 	bl	8014540 <_sbrk_r>
 8013ac0:	4580      	cmp	r8, r0
 8013ac2:	d13a      	bne.n	8013b3a <_malloc_r+0xd2>
 8013ac4:	6821      	ldr	r1, [r4, #0]
 8013ac6:	3503      	adds	r5, #3
 8013ac8:	1a6d      	subs	r5, r5, r1
 8013aca:	f025 0503 	bic.w	r5, r5, #3
 8013ace:	3508      	adds	r5, #8
 8013ad0:	2d0c      	cmp	r5, #12
 8013ad2:	bf38      	it	cc
 8013ad4:	250c      	movcc	r5, #12
 8013ad6:	4629      	mov	r1, r5
 8013ad8:	4638      	mov	r0, r7
 8013ada:	f7ff ffa5 	bl	8013a28 <sbrk_aligned>
 8013ade:	3001      	adds	r0, #1
 8013ae0:	d02b      	beq.n	8013b3a <_malloc_r+0xd2>
 8013ae2:	6823      	ldr	r3, [r4, #0]
 8013ae4:	442b      	add	r3, r5
 8013ae6:	6023      	str	r3, [r4, #0]
 8013ae8:	e00e      	b.n	8013b08 <_malloc_r+0xa0>
 8013aea:	6822      	ldr	r2, [r4, #0]
 8013aec:	1b52      	subs	r2, r2, r5
 8013aee:	d41e      	bmi.n	8013b2e <_malloc_r+0xc6>
 8013af0:	2a0b      	cmp	r2, #11
 8013af2:	d916      	bls.n	8013b22 <_malloc_r+0xba>
 8013af4:	1961      	adds	r1, r4, r5
 8013af6:	42a3      	cmp	r3, r4
 8013af8:	6025      	str	r5, [r4, #0]
 8013afa:	bf18      	it	ne
 8013afc:	6059      	strne	r1, [r3, #4]
 8013afe:	6863      	ldr	r3, [r4, #4]
 8013b00:	bf08      	it	eq
 8013b02:	6031      	streq	r1, [r6, #0]
 8013b04:	5162      	str	r2, [r4, r5]
 8013b06:	604b      	str	r3, [r1, #4]
 8013b08:	4638      	mov	r0, r7
 8013b0a:	f104 060b 	add.w	r6, r4, #11
 8013b0e:	f001 fe35 	bl	801577c <__malloc_unlock>
 8013b12:	f026 0607 	bic.w	r6, r6, #7
 8013b16:	1d23      	adds	r3, r4, #4
 8013b18:	1af2      	subs	r2, r6, r3
 8013b1a:	d0b6      	beq.n	8013a8a <_malloc_r+0x22>
 8013b1c:	1b9b      	subs	r3, r3, r6
 8013b1e:	50a3      	str	r3, [r4, r2]
 8013b20:	e7b3      	b.n	8013a8a <_malloc_r+0x22>
 8013b22:	6862      	ldr	r2, [r4, #4]
 8013b24:	42a3      	cmp	r3, r4
 8013b26:	bf0c      	ite	eq
 8013b28:	6032      	streq	r2, [r6, #0]
 8013b2a:	605a      	strne	r2, [r3, #4]
 8013b2c:	e7ec      	b.n	8013b08 <_malloc_r+0xa0>
 8013b2e:	4623      	mov	r3, r4
 8013b30:	6864      	ldr	r4, [r4, #4]
 8013b32:	e7b2      	b.n	8013a9a <_malloc_r+0x32>
 8013b34:	4634      	mov	r4, r6
 8013b36:	6876      	ldr	r6, [r6, #4]
 8013b38:	e7b9      	b.n	8013aae <_malloc_r+0x46>
 8013b3a:	230c      	movs	r3, #12
 8013b3c:	603b      	str	r3, [r7, #0]
 8013b3e:	4638      	mov	r0, r7
 8013b40:	f001 fe1c 	bl	801577c <__malloc_unlock>
 8013b44:	e7a1      	b.n	8013a8a <_malloc_r+0x22>
 8013b46:	6025      	str	r5, [r4, #0]
 8013b48:	e7de      	b.n	8013b08 <_malloc_r+0xa0>
 8013b4a:	bf00      	nop
 8013b4c:	20005c10 	.word	0x20005c10

08013b50 <__cvt>:
 8013b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013b54:	ec55 4b10 	vmov	r4, r5, d0
 8013b58:	2d00      	cmp	r5, #0
 8013b5a:	460e      	mov	r6, r1
 8013b5c:	4619      	mov	r1, r3
 8013b5e:	462b      	mov	r3, r5
 8013b60:	bfbb      	ittet	lt
 8013b62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013b66:	461d      	movlt	r5, r3
 8013b68:	2300      	movge	r3, #0
 8013b6a:	232d      	movlt	r3, #45	; 0x2d
 8013b6c:	700b      	strb	r3, [r1, #0]
 8013b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013b74:	4691      	mov	r9, r2
 8013b76:	f023 0820 	bic.w	r8, r3, #32
 8013b7a:	bfbc      	itt	lt
 8013b7c:	4622      	movlt	r2, r4
 8013b7e:	4614      	movlt	r4, r2
 8013b80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013b84:	d005      	beq.n	8013b92 <__cvt+0x42>
 8013b86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013b8a:	d100      	bne.n	8013b8e <__cvt+0x3e>
 8013b8c:	3601      	adds	r6, #1
 8013b8e:	2102      	movs	r1, #2
 8013b90:	e000      	b.n	8013b94 <__cvt+0x44>
 8013b92:	2103      	movs	r1, #3
 8013b94:	ab03      	add	r3, sp, #12
 8013b96:	9301      	str	r3, [sp, #4]
 8013b98:	ab02      	add	r3, sp, #8
 8013b9a:	9300      	str	r3, [sp, #0]
 8013b9c:	ec45 4b10 	vmov	d0, r4, r5
 8013ba0:	4653      	mov	r3, sl
 8013ba2:	4632      	mov	r2, r6
 8013ba4:	f000 feb0 	bl	8014908 <_dtoa_r>
 8013ba8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013bac:	4607      	mov	r7, r0
 8013bae:	d102      	bne.n	8013bb6 <__cvt+0x66>
 8013bb0:	f019 0f01 	tst.w	r9, #1
 8013bb4:	d022      	beq.n	8013bfc <__cvt+0xac>
 8013bb6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013bba:	eb07 0906 	add.w	r9, r7, r6
 8013bbe:	d110      	bne.n	8013be2 <__cvt+0x92>
 8013bc0:	783b      	ldrb	r3, [r7, #0]
 8013bc2:	2b30      	cmp	r3, #48	; 0x30
 8013bc4:	d10a      	bne.n	8013bdc <__cvt+0x8c>
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	2300      	movs	r3, #0
 8013bca:	4620      	mov	r0, r4
 8013bcc:	4629      	mov	r1, r5
 8013bce:	f7ec ff7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8013bd2:	b918      	cbnz	r0, 8013bdc <__cvt+0x8c>
 8013bd4:	f1c6 0601 	rsb	r6, r6, #1
 8013bd8:	f8ca 6000 	str.w	r6, [sl]
 8013bdc:	f8da 3000 	ldr.w	r3, [sl]
 8013be0:	4499      	add	r9, r3
 8013be2:	2200      	movs	r2, #0
 8013be4:	2300      	movs	r3, #0
 8013be6:	4620      	mov	r0, r4
 8013be8:	4629      	mov	r1, r5
 8013bea:	f7ec ff6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8013bee:	b108      	cbz	r0, 8013bf4 <__cvt+0xa4>
 8013bf0:	f8cd 900c 	str.w	r9, [sp, #12]
 8013bf4:	2230      	movs	r2, #48	; 0x30
 8013bf6:	9b03      	ldr	r3, [sp, #12]
 8013bf8:	454b      	cmp	r3, r9
 8013bfa:	d307      	bcc.n	8013c0c <__cvt+0xbc>
 8013bfc:	9b03      	ldr	r3, [sp, #12]
 8013bfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013c00:	1bdb      	subs	r3, r3, r7
 8013c02:	4638      	mov	r0, r7
 8013c04:	6013      	str	r3, [r2, #0]
 8013c06:	b004      	add	sp, #16
 8013c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c0c:	1c59      	adds	r1, r3, #1
 8013c0e:	9103      	str	r1, [sp, #12]
 8013c10:	701a      	strb	r2, [r3, #0]
 8013c12:	e7f0      	b.n	8013bf6 <__cvt+0xa6>

08013c14 <__exponent>:
 8013c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c16:	4603      	mov	r3, r0
 8013c18:	2900      	cmp	r1, #0
 8013c1a:	bfb8      	it	lt
 8013c1c:	4249      	neglt	r1, r1
 8013c1e:	f803 2b02 	strb.w	r2, [r3], #2
 8013c22:	bfb4      	ite	lt
 8013c24:	222d      	movlt	r2, #45	; 0x2d
 8013c26:	222b      	movge	r2, #43	; 0x2b
 8013c28:	2909      	cmp	r1, #9
 8013c2a:	7042      	strb	r2, [r0, #1]
 8013c2c:	dd2a      	ble.n	8013c84 <__exponent+0x70>
 8013c2e:	f10d 0407 	add.w	r4, sp, #7
 8013c32:	46a4      	mov	ip, r4
 8013c34:	270a      	movs	r7, #10
 8013c36:	46a6      	mov	lr, r4
 8013c38:	460a      	mov	r2, r1
 8013c3a:	fb91 f6f7 	sdiv	r6, r1, r7
 8013c3e:	fb07 1516 	mls	r5, r7, r6, r1
 8013c42:	3530      	adds	r5, #48	; 0x30
 8013c44:	2a63      	cmp	r2, #99	; 0x63
 8013c46:	f104 34ff 	add.w	r4, r4, #4294967295
 8013c4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013c4e:	4631      	mov	r1, r6
 8013c50:	dcf1      	bgt.n	8013c36 <__exponent+0x22>
 8013c52:	3130      	adds	r1, #48	; 0x30
 8013c54:	f1ae 0502 	sub.w	r5, lr, #2
 8013c58:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013c5c:	1c44      	adds	r4, r0, #1
 8013c5e:	4629      	mov	r1, r5
 8013c60:	4561      	cmp	r1, ip
 8013c62:	d30a      	bcc.n	8013c7a <__exponent+0x66>
 8013c64:	f10d 0209 	add.w	r2, sp, #9
 8013c68:	eba2 020e 	sub.w	r2, r2, lr
 8013c6c:	4565      	cmp	r5, ip
 8013c6e:	bf88      	it	hi
 8013c70:	2200      	movhi	r2, #0
 8013c72:	4413      	add	r3, r2
 8013c74:	1a18      	subs	r0, r3, r0
 8013c76:	b003      	add	sp, #12
 8013c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013c7e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013c82:	e7ed      	b.n	8013c60 <__exponent+0x4c>
 8013c84:	2330      	movs	r3, #48	; 0x30
 8013c86:	3130      	adds	r1, #48	; 0x30
 8013c88:	7083      	strb	r3, [r0, #2]
 8013c8a:	70c1      	strb	r1, [r0, #3]
 8013c8c:	1d03      	adds	r3, r0, #4
 8013c8e:	e7f1      	b.n	8013c74 <__exponent+0x60>

08013c90 <_printf_float>:
 8013c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c94:	ed2d 8b02 	vpush	{d8}
 8013c98:	b08d      	sub	sp, #52	; 0x34
 8013c9a:	460c      	mov	r4, r1
 8013c9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013ca0:	4616      	mov	r6, r2
 8013ca2:	461f      	mov	r7, r3
 8013ca4:	4605      	mov	r5, r0
 8013ca6:	f001 fcdf 	bl	8015668 <_localeconv_r>
 8013caa:	f8d0 a000 	ldr.w	sl, [r0]
 8013cae:	4650      	mov	r0, sl
 8013cb0:	f7ec fa8e 	bl	80001d0 <strlen>
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8013cb8:	6823      	ldr	r3, [r4, #0]
 8013cba:	9305      	str	r3, [sp, #20]
 8013cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8013cc0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013cc4:	3307      	adds	r3, #7
 8013cc6:	f023 0307 	bic.w	r3, r3, #7
 8013cca:	f103 0208 	add.w	r2, r3, #8
 8013cce:	f8c8 2000 	str.w	r2, [r8]
 8013cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cd6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013cda:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013cde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013ce2:	9307      	str	r3, [sp, #28]
 8013ce4:	f8cd 8018 	str.w	r8, [sp, #24]
 8013ce8:	ee08 0a10 	vmov	s16, r0
 8013cec:	4b9f      	ldr	r3, [pc, #636]	; (8013f6c <_printf_float+0x2dc>)
 8013cee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8013cf6:	f7ec ff19 	bl	8000b2c <__aeabi_dcmpun>
 8013cfa:	bb88      	cbnz	r0, 8013d60 <_printf_float+0xd0>
 8013cfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013d00:	4b9a      	ldr	r3, [pc, #616]	; (8013f6c <_printf_float+0x2dc>)
 8013d02:	f04f 32ff 	mov.w	r2, #4294967295
 8013d06:	f7ec fef3 	bl	8000af0 <__aeabi_dcmple>
 8013d0a:	bb48      	cbnz	r0, 8013d60 <_printf_float+0xd0>
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	2300      	movs	r3, #0
 8013d10:	4640      	mov	r0, r8
 8013d12:	4649      	mov	r1, r9
 8013d14:	f7ec fee2 	bl	8000adc <__aeabi_dcmplt>
 8013d18:	b110      	cbz	r0, 8013d20 <_printf_float+0x90>
 8013d1a:	232d      	movs	r3, #45	; 0x2d
 8013d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d20:	4b93      	ldr	r3, [pc, #588]	; (8013f70 <_printf_float+0x2e0>)
 8013d22:	4894      	ldr	r0, [pc, #592]	; (8013f74 <_printf_float+0x2e4>)
 8013d24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013d28:	bf94      	ite	ls
 8013d2a:	4698      	movls	r8, r3
 8013d2c:	4680      	movhi	r8, r0
 8013d2e:	2303      	movs	r3, #3
 8013d30:	6123      	str	r3, [r4, #16]
 8013d32:	9b05      	ldr	r3, [sp, #20]
 8013d34:	f023 0204 	bic.w	r2, r3, #4
 8013d38:	6022      	str	r2, [r4, #0]
 8013d3a:	f04f 0900 	mov.w	r9, #0
 8013d3e:	9700      	str	r7, [sp, #0]
 8013d40:	4633      	mov	r3, r6
 8013d42:	aa0b      	add	r2, sp, #44	; 0x2c
 8013d44:	4621      	mov	r1, r4
 8013d46:	4628      	mov	r0, r5
 8013d48:	f000 f9d8 	bl	80140fc <_printf_common>
 8013d4c:	3001      	adds	r0, #1
 8013d4e:	f040 8090 	bne.w	8013e72 <_printf_float+0x1e2>
 8013d52:	f04f 30ff 	mov.w	r0, #4294967295
 8013d56:	b00d      	add	sp, #52	; 0x34
 8013d58:	ecbd 8b02 	vpop	{d8}
 8013d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d60:	4642      	mov	r2, r8
 8013d62:	464b      	mov	r3, r9
 8013d64:	4640      	mov	r0, r8
 8013d66:	4649      	mov	r1, r9
 8013d68:	f7ec fee0 	bl	8000b2c <__aeabi_dcmpun>
 8013d6c:	b140      	cbz	r0, 8013d80 <_printf_float+0xf0>
 8013d6e:	464b      	mov	r3, r9
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	bfbc      	itt	lt
 8013d74:	232d      	movlt	r3, #45	; 0x2d
 8013d76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013d7a:	487f      	ldr	r0, [pc, #508]	; (8013f78 <_printf_float+0x2e8>)
 8013d7c:	4b7f      	ldr	r3, [pc, #508]	; (8013f7c <_printf_float+0x2ec>)
 8013d7e:	e7d1      	b.n	8013d24 <_printf_float+0x94>
 8013d80:	6863      	ldr	r3, [r4, #4]
 8013d82:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013d86:	9206      	str	r2, [sp, #24]
 8013d88:	1c5a      	adds	r2, r3, #1
 8013d8a:	d13f      	bne.n	8013e0c <_printf_float+0x17c>
 8013d8c:	2306      	movs	r3, #6
 8013d8e:	6063      	str	r3, [r4, #4]
 8013d90:	9b05      	ldr	r3, [sp, #20]
 8013d92:	6861      	ldr	r1, [r4, #4]
 8013d94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013d98:	2300      	movs	r3, #0
 8013d9a:	9303      	str	r3, [sp, #12]
 8013d9c:	ab0a      	add	r3, sp, #40	; 0x28
 8013d9e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013da2:	ab09      	add	r3, sp, #36	; 0x24
 8013da4:	ec49 8b10 	vmov	d0, r8, r9
 8013da8:	9300      	str	r3, [sp, #0]
 8013daa:	6022      	str	r2, [r4, #0]
 8013dac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013db0:	4628      	mov	r0, r5
 8013db2:	f7ff fecd 	bl	8013b50 <__cvt>
 8013db6:	9b06      	ldr	r3, [sp, #24]
 8013db8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013dba:	2b47      	cmp	r3, #71	; 0x47
 8013dbc:	4680      	mov	r8, r0
 8013dbe:	d108      	bne.n	8013dd2 <_printf_float+0x142>
 8013dc0:	1cc8      	adds	r0, r1, #3
 8013dc2:	db02      	blt.n	8013dca <_printf_float+0x13a>
 8013dc4:	6863      	ldr	r3, [r4, #4]
 8013dc6:	4299      	cmp	r1, r3
 8013dc8:	dd41      	ble.n	8013e4e <_printf_float+0x1be>
 8013dca:	f1ab 0b02 	sub.w	fp, fp, #2
 8013dce:	fa5f fb8b 	uxtb.w	fp, fp
 8013dd2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013dd6:	d820      	bhi.n	8013e1a <_printf_float+0x18a>
 8013dd8:	3901      	subs	r1, #1
 8013dda:	465a      	mov	r2, fp
 8013ddc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013de0:	9109      	str	r1, [sp, #36]	; 0x24
 8013de2:	f7ff ff17 	bl	8013c14 <__exponent>
 8013de6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013de8:	1813      	adds	r3, r2, r0
 8013dea:	2a01      	cmp	r2, #1
 8013dec:	4681      	mov	r9, r0
 8013dee:	6123      	str	r3, [r4, #16]
 8013df0:	dc02      	bgt.n	8013df8 <_printf_float+0x168>
 8013df2:	6822      	ldr	r2, [r4, #0]
 8013df4:	07d2      	lsls	r2, r2, #31
 8013df6:	d501      	bpl.n	8013dfc <_printf_float+0x16c>
 8013df8:	3301      	adds	r3, #1
 8013dfa:	6123      	str	r3, [r4, #16]
 8013dfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d09c      	beq.n	8013d3e <_printf_float+0xae>
 8013e04:	232d      	movs	r3, #45	; 0x2d
 8013e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e0a:	e798      	b.n	8013d3e <_printf_float+0xae>
 8013e0c:	9a06      	ldr	r2, [sp, #24]
 8013e0e:	2a47      	cmp	r2, #71	; 0x47
 8013e10:	d1be      	bne.n	8013d90 <_printf_float+0x100>
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d1bc      	bne.n	8013d90 <_printf_float+0x100>
 8013e16:	2301      	movs	r3, #1
 8013e18:	e7b9      	b.n	8013d8e <_printf_float+0xfe>
 8013e1a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013e1e:	d118      	bne.n	8013e52 <_printf_float+0x1c2>
 8013e20:	2900      	cmp	r1, #0
 8013e22:	6863      	ldr	r3, [r4, #4]
 8013e24:	dd0b      	ble.n	8013e3e <_printf_float+0x1ae>
 8013e26:	6121      	str	r1, [r4, #16]
 8013e28:	b913      	cbnz	r3, 8013e30 <_printf_float+0x1a0>
 8013e2a:	6822      	ldr	r2, [r4, #0]
 8013e2c:	07d0      	lsls	r0, r2, #31
 8013e2e:	d502      	bpl.n	8013e36 <_printf_float+0x1a6>
 8013e30:	3301      	adds	r3, #1
 8013e32:	440b      	add	r3, r1
 8013e34:	6123      	str	r3, [r4, #16]
 8013e36:	65a1      	str	r1, [r4, #88]	; 0x58
 8013e38:	f04f 0900 	mov.w	r9, #0
 8013e3c:	e7de      	b.n	8013dfc <_printf_float+0x16c>
 8013e3e:	b913      	cbnz	r3, 8013e46 <_printf_float+0x1b6>
 8013e40:	6822      	ldr	r2, [r4, #0]
 8013e42:	07d2      	lsls	r2, r2, #31
 8013e44:	d501      	bpl.n	8013e4a <_printf_float+0x1ba>
 8013e46:	3302      	adds	r3, #2
 8013e48:	e7f4      	b.n	8013e34 <_printf_float+0x1a4>
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	e7f2      	b.n	8013e34 <_printf_float+0x1a4>
 8013e4e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e54:	4299      	cmp	r1, r3
 8013e56:	db05      	blt.n	8013e64 <_printf_float+0x1d4>
 8013e58:	6823      	ldr	r3, [r4, #0]
 8013e5a:	6121      	str	r1, [r4, #16]
 8013e5c:	07d8      	lsls	r0, r3, #31
 8013e5e:	d5ea      	bpl.n	8013e36 <_printf_float+0x1a6>
 8013e60:	1c4b      	adds	r3, r1, #1
 8013e62:	e7e7      	b.n	8013e34 <_printf_float+0x1a4>
 8013e64:	2900      	cmp	r1, #0
 8013e66:	bfd4      	ite	le
 8013e68:	f1c1 0202 	rsble	r2, r1, #2
 8013e6c:	2201      	movgt	r2, #1
 8013e6e:	4413      	add	r3, r2
 8013e70:	e7e0      	b.n	8013e34 <_printf_float+0x1a4>
 8013e72:	6823      	ldr	r3, [r4, #0]
 8013e74:	055a      	lsls	r2, r3, #21
 8013e76:	d407      	bmi.n	8013e88 <_printf_float+0x1f8>
 8013e78:	6923      	ldr	r3, [r4, #16]
 8013e7a:	4642      	mov	r2, r8
 8013e7c:	4631      	mov	r1, r6
 8013e7e:	4628      	mov	r0, r5
 8013e80:	47b8      	blx	r7
 8013e82:	3001      	adds	r0, #1
 8013e84:	d12c      	bne.n	8013ee0 <_printf_float+0x250>
 8013e86:	e764      	b.n	8013d52 <_printf_float+0xc2>
 8013e88:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013e8c:	f240 80e0 	bls.w	8014050 <_printf_float+0x3c0>
 8013e90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013e94:	2200      	movs	r2, #0
 8013e96:	2300      	movs	r3, #0
 8013e98:	f7ec fe16 	bl	8000ac8 <__aeabi_dcmpeq>
 8013e9c:	2800      	cmp	r0, #0
 8013e9e:	d034      	beq.n	8013f0a <_printf_float+0x27a>
 8013ea0:	4a37      	ldr	r2, [pc, #220]	; (8013f80 <_printf_float+0x2f0>)
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	4631      	mov	r1, r6
 8013ea6:	4628      	mov	r0, r5
 8013ea8:	47b8      	blx	r7
 8013eaa:	3001      	adds	r0, #1
 8013eac:	f43f af51 	beq.w	8013d52 <_printf_float+0xc2>
 8013eb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	db02      	blt.n	8013ebe <_printf_float+0x22e>
 8013eb8:	6823      	ldr	r3, [r4, #0]
 8013eba:	07d8      	lsls	r0, r3, #31
 8013ebc:	d510      	bpl.n	8013ee0 <_printf_float+0x250>
 8013ebe:	ee18 3a10 	vmov	r3, s16
 8013ec2:	4652      	mov	r2, sl
 8013ec4:	4631      	mov	r1, r6
 8013ec6:	4628      	mov	r0, r5
 8013ec8:	47b8      	blx	r7
 8013eca:	3001      	adds	r0, #1
 8013ecc:	f43f af41 	beq.w	8013d52 <_printf_float+0xc2>
 8013ed0:	f04f 0800 	mov.w	r8, #0
 8013ed4:	f104 091a 	add.w	r9, r4, #26
 8013ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013eda:	3b01      	subs	r3, #1
 8013edc:	4543      	cmp	r3, r8
 8013ede:	dc09      	bgt.n	8013ef4 <_printf_float+0x264>
 8013ee0:	6823      	ldr	r3, [r4, #0]
 8013ee2:	079b      	lsls	r3, r3, #30
 8013ee4:	f100 8105 	bmi.w	80140f2 <_printf_float+0x462>
 8013ee8:	68e0      	ldr	r0, [r4, #12]
 8013eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013eec:	4298      	cmp	r0, r3
 8013eee:	bfb8      	it	lt
 8013ef0:	4618      	movlt	r0, r3
 8013ef2:	e730      	b.n	8013d56 <_printf_float+0xc6>
 8013ef4:	2301      	movs	r3, #1
 8013ef6:	464a      	mov	r2, r9
 8013ef8:	4631      	mov	r1, r6
 8013efa:	4628      	mov	r0, r5
 8013efc:	47b8      	blx	r7
 8013efe:	3001      	adds	r0, #1
 8013f00:	f43f af27 	beq.w	8013d52 <_printf_float+0xc2>
 8013f04:	f108 0801 	add.w	r8, r8, #1
 8013f08:	e7e6      	b.n	8013ed8 <_printf_float+0x248>
 8013f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	dc39      	bgt.n	8013f84 <_printf_float+0x2f4>
 8013f10:	4a1b      	ldr	r2, [pc, #108]	; (8013f80 <_printf_float+0x2f0>)
 8013f12:	2301      	movs	r3, #1
 8013f14:	4631      	mov	r1, r6
 8013f16:	4628      	mov	r0, r5
 8013f18:	47b8      	blx	r7
 8013f1a:	3001      	adds	r0, #1
 8013f1c:	f43f af19 	beq.w	8013d52 <_printf_float+0xc2>
 8013f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013f24:	4313      	orrs	r3, r2
 8013f26:	d102      	bne.n	8013f2e <_printf_float+0x29e>
 8013f28:	6823      	ldr	r3, [r4, #0]
 8013f2a:	07d9      	lsls	r1, r3, #31
 8013f2c:	d5d8      	bpl.n	8013ee0 <_printf_float+0x250>
 8013f2e:	ee18 3a10 	vmov	r3, s16
 8013f32:	4652      	mov	r2, sl
 8013f34:	4631      	mov	r1, r6
 8013f36:	4628      	mov	r0, r5
 8013f38:	47b8      	blx	r7
 8013f3a:	3001      	adds	r0, #1
 8013f3c:	f43f af09 	beq.w	8013d52 <_printf_float+0xc2>
 8013f40:	f04f 0900 	mov.w	r9, #0
 8013f44:	f104 0a1a 	add.w	sl, r4, #26
 8013f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f4a:	425b      	negs	r3, r3
 8013f4c:	454b      	cmp	r3, r9
 8013f4e:	dc01      	bgt.n	8013f54 <_printf_float+0x2c4>
 8013f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f52:	e792      	b.n	8013e7a <_printf_float+0x1ea>
 8013f54:	2301      	movs	r3, #1
 8013f56:	4652      	mov	r2, sl
 8013f58:	4631      	mov	r1, r6
 8013f5a:	4628      	mov	r0, r5
 8013f5c:	47b8      	blx	r7
 8013f5e:	3001      	adds	r0, #1
 8013f60:	f43f aef7 	beq.w	8013d52 <_printf_float+0xc2>
 8013f64:	f109 0901 	add.w	r9, r9, #1
 8013f68:	e7ee      	b.n	8013f48 <_printf_float+0x2b8>
 8013f6a:	bf00      	nop
 8013f6c:	7fefffff 	.word	0x7fefffff
 8013f70:	0801aa84 	.word	0x0801aa84
 8013f74:	0801aa88 	.word	0x0801aa88
 8013f78:	0801aa90 	.word	0x0801aa90
 8013f7c:	0801aa8c 	.word	0x0801aa8c
 8013f80:	0801aa94 	.word	0x0801aa94
 8013f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013f88:	429a      	cmp	r2, r3
 8013f8a:	bfa8      	it	ge
 8013f8c:	461a      	movge	r2, r3
 8013f8e:	2a00      	cmp	r2, #0
 8013f90:	4691      	mov	r9, r2
 8013f92:	dc37      	bgt.n	8014004 <_printf_float+0x374>
 8013f94:	f04f 0b00 	mov.w	fp, #0
 8013f98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013f9c:	f104 021a 	add.w	r2, r4, #26
 8013fa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013fa2:	9305      	str	r3, [sp, #20]
 8013fa4:	eba3 0309 	sub.w	r3, r3, r9
 8013fa8:	455b      	cmp	r3, fp
 8013faa:	dc33      	bgt.n	8014014 <_printf_float+0x384>
 8013fac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013fb0:	429a      	cmp	r2, r3
 8013fb2:	db3b      	blt.n	801402c <_printf_float+0x39c>
 8013fb4:	6823      	ldr	r3, [r4, #0]
 8013fb6:	07da      	lsls	r2, r3, #31
 8013fb8:	d438      	bmi.n	801402c <_printf_float+0x39c>
 8013fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fbc:	9a05      	ldr	r2, [sp, #20]
 8013fbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013fc0:	1a9a      	subs	r2, r3, r2
 8013fc2:	eba3 0901 	sub.w	r9, r3, r1
 8013fc6:	4591      	cmp	r9, r2
 8013fc8:	bfa8      	it	ge
 8013fca:	4691      	movge	r9, r2
 8013fcc:	f1b9 0f00 	cmp.w	r9, #0
 8013fd0:	dc35      	bgt.n	801403e <_printf_float+0x3ae>
 8013fd2:	f04f 0800 	mov.w	r8, #0
 8013fd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013fda:	f104 0a1a 	add.w	sl, r4, #26
 8013fde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013fe2:	1a9b      	subs	r3, r3, r2
 8013fe4:	eba3 0309 	sub.w	r3, r3, r9
 8013fe8:	4543      	cmp	r3, r8
 8013fea:	f77f af79 	ble.w	8013ee0 <_printf_float+0x250>
 8013fee:	2301      	movs	r3, #1
 8013ff0:	4652      	mov	r2, sl
 8013ff2:	4631      	mov	r1, r6
 8013ff4:	4628      	mov	r0, r5
 8013ff6:	47b8      	blx	r7
 8013ff8:	3001      	adds	r0, #1
 8013ffa:	f43f aeaa 	beq.w	8013d52 <_printf_float+0xc2>
 8013ffe:	f108 0801 	add.w	r8, r8, #1
 8014002:	e7ec      	b.n	8013fde <_printf_float+0x34e>
 8014004:	4613      	mov	r3, r2
 8014006:	4631      	mov	r1, r6
 8014008:	4642      	mov	r2, r8
 801400a:	4628      	mov	r0, r5
 801400c:	47b8      	blx	r7
 801400e:	3001      	adds	r0, #1
 8014010:	d1c0      	bne.n	8013f94 <_printf_float+0x304>
 8014012:	e69e      	b.n	8013d52 <_printf_float+0xc2>
 8014014:	2301      	movs	r3, #1
 8014016:	4631      	mov	r1, r6
 8014018:	4628      	mov	r0, r5
 801401a:	9205      	str	r2, [sp, #20]
 801401c:	47b8      	blx	r7
 801401e:	3001      	adds	r0, #1
 8014020:	f43f ae97 	beq.w	8013d52 <_printf_float+0xc2>
 8014024:	9a05      	ldr	r2, [sp, #20]
 8014026:	f10b 0b01 	add.w	fp, fp, #1
 801402a:	e7b9      	b.n	8013fa0 <_printf_float+0x310>
 801402c:	ee18 3a10 	vmov	r3, s16
 8014030:	4652      	mov	r2, sl
 8014032:	4631      	mov	r1, r6
 8014034:	4628      	mov	r0, r5
 8014036:	47b8      	blx	r7
 8014038:	3001      	adds	r0, #1
 801403a:	d1be      	bne.n	8013fba <_printf_float+0x32a>
 801403c:	e689      	b.n	8013d52 <_printf_float+0xc2>
 801403e:	9a05      	ldr	r2, [sp, #20]
 8014040:	464b      	mov	r3, r9
 8014042:	4442      	add	r2, r8
 8014044:	4631      	mov	r1, r6
 8014046:	4628      	mov	r0, r5
 8014048:	47b8      	blx	r7
 801404a:	3001      	adds	r0, #1
 801404c:	d1c1      	bne.n	8013fd2 <_printf_float+0x342>
 801404e:	e680      	b.n	8013d52 <_printf_float+0xc2>
 8014050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014052:	2a01      	cmp	r2, #1
 8014054:	dc01      	bgt.n	801405a <_printf_float+0x3ca>
 8014056:	07db      	lsls	r3, r3, #31
 8014058:	d538      	bpl.n	80140cc <_printf_float+0x43c>
 801405a:	2301      	movs	r3, #1
 801405c:	4642      	mov	r2, r8
 801405e:	4631      	mov	r1, r6
 8014060:	4628      	mov	r0, r5
 8014062:	47b8      	blx	r7
 8014064:	3001      	adds	r0, #1
 8014066:	f43f ae74 	beq.w	8013d52 <_printf_float+0xc2>
 801406a:	ee18 3a10 	vmov	r3, s16
 801406e:	4652      	mov	r2, sl
 8014070:	4631      	mov	r1, r6
 8014072:	4628      	mov	r0, r5
 8014074:	47b8      	blx	r7
 8014076:	3001      	adds	r0, #1
 8014078:	f43f ae6b 	beq.w	8013d52 <_printf_float+0xc2>
 801407c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014080:	2200      	movs	r2, #0
 8014082:	2300      	movs	r3, #0
 8014084:	f7ec fd20 	bl	8000ac8 <__aeabi_dcmpeq>
 8014088:	b9d8      	cbnz	r0, 80140c2 <_printf_float+0x432>
 801408a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801408c:	f108 0201 	add.w	r2, r8, #1
 8014090:	3b01      	subs	r3, #1
 8014092:	4631      	mov	r1, r6
 8014094:	4628      	mov	r0, r5
 8014096:	47b8      	blx	r7
 8014098:	3001      	adds	r0, #1
 801409a:	d10e      	bne.n	80140ba <_printf_float+0x42a>
 801409c:	e659      	b.n	8013d52 <_printf_float+0xc2>
 801409e:	2301      	movs	r3, #1
 80140a0:	4652      	mov	r2, sl
 80140a2:	4631      	mov	r1, r6
 80140a4:	4628      	mov	r0, r5
 80140a6:	47b8      	blx	r7
 80140a8:	3001      	adds	r0, #1
 80140aa:	f43f ae52 	beq.w	8013d52 <_printf_float+0xc2>
 80140ae:	f108 0801 	add.w	r8, r8, #1
 80140b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140b4:	3b01      	subs	r3, #1
 80140b6:	4543      	cmp	r3, r8
 80140b8:	dcf1      	bgt.n	801409e <_printf_float+0x40e>
 80140ba:	464b      	mov	r3, r9
 80140bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80140c0:	e6dc      	b.n	8013e7c <_printf_float+0x1ec>
 80140c2:	f04f 0800 	mov.w	r8, #0
 80140c6:	f104 0a1a 	add.w	sl, r4, #26
 80140ca:	e7f2      	b.n	80140b2 <_printf_float+0x422>
 80140cc:	2301      	movs	r3, #1
 80140ce:	4642      	mov	r2, r8
 80140d0:	e7df      	b.n	8014092 <_printf_float+0x402>
 80140d2:	2301      	movs	r3, #1
 80140d4:	464a      	mov	r2, r9
 80140d6:	4631      	mov	r1, r6
 80140d8:	4628      	mov	r0, r5
 80140da:	47b8      	blx	r7
 80140dc:	3001      	adds	r0, #1
 80140de:	f43f ae38 	beq.w	8013d52 <_printf_float+0xc2>
 80140e2:	f108 0801 	add.w	r8, r8, #1
 80140e6:	68e3      	ldr	r3, [r4, #12]
 80140e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80140ea:	1a5b      	subs	r3, r3, r1
 80140ec:	4543      	cmp	r3, r8
 80140ee:	dcf0      	bgt.n	80140d2 <_printf_float+0x442>
 80140f0:	e6fa      	b.n	8013ee8 <_printf_float+0x258>
 80140f2:	f04f 0800 	mov.w	r8, #0
 80140f6:	f104 0919 	add.w	r9, r4, #25
 80140fa:	e7f4      	b.n	80140e6 <_printf_float+0x456>

080140fc <_printf_common>:
 80140fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014100:	4616      	mov	r6, r2
 8014102:	4699      	mov	r9, r3
 8014104:	688a      	ldr	r2, [r1, #8]
 8014106:	690b      	ldr	r3, [r1, #16]
 8014108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801410c:	4293      	cmp	r3, r2
 801410e:	bfb8      	it	lt
 8014110:	4613      	movlt	r3, r2
 8014112:	6033      	str	r3, [r6, #0]
 8014114:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014118:	4607      	mov	r7, r0
 801411a:	460c      	mov	r4, r1
 801411c:	b10a      	cbz	r2, 8014122 <_printf_common+0x26>
 801411e:	3301      	adds	r3, #1
 8014120:	6033      	str	r3, [r6, #0]
 8014122:	6823      	ldr	r3, [r4, #0]
 8014124:	0699      	lsls	r1, r3, #26
 8014126:	bf42      	ittt	mi
 8014128:	6833      	ldrmi	r3, [r6, #0]
 801412a:	3302      	addmi	r3, #2
 801412c:	6033      	strmi	r3, [r6, #0]
 801412e:	6825      	ldr	r5, [r4, #0]
 8014130:	f015 0506 	ands.w	r5, r5, #6
 8014134:	d106      	bne.n	8014144 <_printf_common+0x48>
 8014136:	f104 0a19 	add.w	sl, r4, #25
 801413a:	68e3      	ldr	r3, [r4, #12]
 801413c:	6832      	ldr	r2, [r6, #0]
 801413e:	1a9b      	subs	r3, r3, r2
 8014140:	42ab      	cmp	r3, r5
 8014142:	dc26      	bgt.n	8014192 <_printf_common+0x96>
 8014144:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014148:	1e13      	subs	r3, r2, #0
 801414a:	6822      	ldr	r2, [r4, #0]
 801414c:	bf18      	it	ne
 801414e:	2301      	movne	r3, #1
 8014150:	0692      	lsls	r2, r2, #26
 8014152:	d42b      	bmi.n	80141ac <_printf_common+0xb0>
 8014154:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014158:	4649      	mov	r1, r9
 801415a:	4638      	mov	r0, r7
 801415c:	47c0      	blx	r8
 801415e:	3001      	adds	r0, #1
 8014160:	d01e      	beq.n	80141a0 <_printf_common+0xa4>
 8014162:	6823      	ldr	r3, [r4, #0]
 8014164:	68e5      	ldr	r5, [r4, #12]
 8014166:	6832      	ldr	r2, [r6, #0]
 8014168:	f003 0306 	and.w	r3, r3, #6
 801416c:	2b04      	cmp	r3, #4
 801416e:	bf08      	it	eq
 8014170:	1aad      	subeq	r5, r5, r2
 8014172:	68a3      	ldr	r3, [r4, #8]
 8014174:	6922      	ldr	r2, [r4, #16]
 8014176:	bf0c      	ite	eq
 8014178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801417c:	2500      	movne	r5, #0
 801417e:	4293      	cmp	r3, r2
 8014180:	bfc4      	itt	gt
 8014182:	1a9b      	subgt	r3, r3, r2
 8014184:	18ed      	addgt	r5, r5, r3
 8014186:	2600      	movs	r6, #0
 8014188:	341a      	adds	r4, #26
 801418a:	42b5      	cmp	r5, r6
 801418c:	d11a      	bne.n	80141c4 <_printf_common+0xc8>
 801418e:	2000      	movs	r0, #0
 8014190:	e008      	b.n	80141a4 <_printf_common+0xa8>
 8014192:	2301      	movs	r3, #1
 8014194:	4652      	mov	r2, sl
 8014196:	4649      	mov	r1, r9
 8014198:	4638      	mov	r0, r7
 801419a:	47c0      	blx	r8
 801419c:	3001      	adds	r0, #1
 801419e:	d103      	bne.n	80141a8 <_printf_common+0xac>
 80141a0:	f04f 30ff 	mov.w	r0, #4294967295
 80141a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141a8:	3501      	adds	r5, #1
 80141aa:	e7c6      	b.n	801413a <_printf_common+0x3e>
 80141ac:	18e1      	adds	r1, r4, r3
 80141ae:	1c5a      	adds	r2, r3, #1
 80141b0:	2030      	movs	r0, #48	; 0x30
 80141b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80141b6:	4422      	add	r2, r4
 80141b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80141bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80141c0:	3302      	adds	r3, #2
 80141c2:	e7c7      	b.n	8014154 <_printf_common+0x58>
 80141c4:	2301      	movs	r3, #1
 80141c6:	4622      	mov	r2, r4
 80141c8:	4649      	mov	r1, r9
 80141ca:	4638      	mov	r0, r7
 80141cc:	47c0      	blx	r8
 80141ce:	3001      	adds	r0, #1
 80141d0:	d0e6      	beq.n	80141a0 <_printf_common+0xa4>
 80141d2:	3601      	adds	r6, #1
 80141d4:	e7d9      	b.n	801418a <_printf_common+0x8e>
	...

080141d8 <_printf_i>:
 80141d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80141dc:	7e0f      	ldrb	r7, [r1, #24]
 80141de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80141e0:	2f78      	cmp	r7, #120	; 0x78
 80141e2:	4691      	mov	r9, r2
 80141e4:	4680      	mov	r8, r0
 80141e6:	460c      	mov	r4, r1
 80141e8:	469a      	mov	sl, r3
 80141ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80141ee:	d807      	bhi.n	8014200 <_printf_i+0x28>
 80141f0:	2f62      	cmp	r7, #98	; 0x62
 80141f2:	d80a      	bhi.n	801420a <_printf_i+0x32>
 80141f4:	2f00      	cmp	r7, #0
 80141f6:	f000 80d8 	beq.w	80143aa <_printf_i+0x1d2>
 80141fa:	2f58      	cmp	r7, #88	; 0x58
 80141fc:	f000 80a3 	beq.w	8014346 <_printf_i+0x16e>
 8014200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014204:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014208:	e03a      	b.n	8014280 <_printf_i+0xa8>
 801420a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801420e:	2b15      	cmp	r3, #21
 8014210:	d8f6      	bhi.n	8014200 <_printf_i+0x28>
 8014212:	a101      	add	r1, pc, #4	; (adr r1, 8014218 <_printf_i+0x40>)
 8014214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014218:	08014271 	.word	0x08014271
 801421c:	08014285 	.word	0x08014285
 8014220:	08014201 	.word	0x08014201
 8014224:	08014201 	.word	0x08014201
 8014228:	08014201 	.word	0x08014201
 801422c:	08014201 	.word	0x08014201
 8014230:	08014285 	.word	0x08014285
 8014234:	08014201 	.word	0x08014201
 8014238:	08014201 	.word	0x08014201
 801423c:	08014201 	.word	0x08014201
 8014240:	08014201 	.word	0x08014201
 8014244:	08014391 	.word	0x08014391
 8014248:	080142b5 	.word	0x080142b5
 801424c:	08014373 	.word	0x08014373
 8014250:	08014201 	.word	0x08014201
 8014254:	08014201 	.word	0x08014201
 8014258:	080143b3 	.word	0x080143b3
 801425c:	08014201 	.word	0x08014201
 8014260:	080142b5 	.word	0x080142b5
 8014264:	08014201 	.word	0x08014201
 8014268:	08014201 	.word	0x08014201
 801426c:	0801437b 	.word	0x0801437b
 8014270:	682b      	ldr	r3, [r5, #0]
 8014272:	1d1a      	adds	r2, r3, #4
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	602a      	str	r2, [r5, #0]
 8014278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801427c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014280:	2301      	movs	r3, #1
 8014282:	e0a3      	b.n	80143cc <_printf_i+0x1f4>
 8014284:	6820      	ldr	r0, [r4, #0]
 8014286:	6829      	ldr	r1, [r5, #0]
 8014288:	0606      	lsls	r6, r0, #24
 801428a:	f101 0304 	add.w	r3, r1, #4
 801428e:	d50a      	bpl.n	80142a6 <_printf_i+0xce>
 8014290:	680e      	ldr	r6, [r1, #0]
 8014292:	602b      	str	r3, [r5, #0]
 8014294:	2e00      	cmp	r6, #0
 8014296:	da03      	bge.n	80142a0 <_printf_i+0xc8>
 8014298:	232d      	movs	r3, #45	; 0x2d
 801429a:	4276      	negs	r6, r6
 801429c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80142a0:	485e      	ldr	r0, [pc, #376]	; (801441c <_printf_i+0x244>)
 80142a2:	230a      	movs	r3, #10
 80142a4:	e019      	b.n	80142da <_printf_i+0x102>
 80142a6:	680e      	ldr	r6, [r1, #0]
 80142a8:	602b      	str	r3, [r5, #0]
 80142aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80142ae:	bf18      	it	ne
 80142b0:	b236      	sxthne	r6, r6
 80142b2:	e7ef      	b.n	8014294 <_printf_i+0xbc>
 80142b4:	682b      	ldr	r3, [r5, #0]
 80142b6:	6820      	ldr	r0, [r4, #0]
 80142b8:	1d19      	adds	r1, r3, #4
 80142ba:	6029      	str	r1, [r5, #0]
 80142bc:	0601      	lsls	r1, r0, #24
 80142be:	d501      	bpl.n	80142c4 <_printf_i+0xec>
 80142c0:	681e      	ldr	r6, [r3, #0]
 80142c2:	e002      	b.n	80142ca <_printf_i+0xf2>
 80142c4:	0646      	lsls	r6, r0, #25
 80142c6:	d5fb      	bpl.n	80142c0 <_printf_i+0xe8>
 80142c8:	881e      	ldrh	r6, [r3, #0]
 80142ca:	4854      	ldr	r0, [pc, #336]	; (801441c <_printf_i+0x244>)
 80142cc:	2f6f      	cmp	r7, #111	; 0x6f
 80142ce:	bf0c      	ite	eq
 80142d0:	2308      	moveq	r3, #8
 80142d2:	230a      	movne	r3, #10
 80142d4:	2100      	movs	r1, #0
 80142d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80142da:	6865      	ldr	r5, [r4, #4]
 80142dc:	60a5      	str	r5, [r4, #8]
 80142de:	2d00      	cmp	r5, #0
 80142e0:	bfa2      	ittt	ge
 80142e2:	6821      	ldrge	r1, [r4, #0]
 80142e4:	f021 0104 	bicge.w	r1, r1, #4
 80142e8:	6021      	strge	r1, [r4, #0]
 80142ea:	b90e      	cbnz	r6, 80142f0 <_printf_i+0x118>
 80142ec:	2d00      	cmp	r5, #0
 80142ee:	d04d      	beq.n	801438c <_printf_i+0x1b4>
 80142f0:	4615      	mov	r5, r2
 80142f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80142f6:	fb03 6711 	mls	r7, r3, r1, r6
 80142fa:	5dc7      	ldrb	r7, [r0, r7]
 80142fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014300:	4637      	mov	r7, r6
 8014302:	42bb      	cmp	r3, r7
 8014304:	460e      	mov	r6, r1
 8014306:	d9f4      	bls.n	80142f2 <_printf_i+0x11a>
 8014308:	2b08      	cmp	r3, #8
 801430a:	d10b      	bne.n	8014324 <_printf_i+0x14c>
 801430c:	6823      	ldr	r3, [r4, #0]
 801430e:	07de      	lsls	r6, r3, #31
 8014310:	d508      	bpl.n	8014324 <_printf_i+0x14c>
 8014312:	6923      	ldr	r3, [r4, #16]
 8014314:	6861      	ldr	r1, [r4, #4]
 8014316:	4299      	cmp	r1, r3
 8014318:	bfde      	ittt	le
 801431a:	2330      	movle	r3, #48	; 0x30
 801431c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014320:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014324:	1b52      	subs	r2, r2, r5
 8014326:	6122      	str	r2, [r4, #16]
 8014328:	f8cd a000 	str.w	sl, [sp]
 801432c:	464b      	mov	r3, r9
 801432e:	aa03      	add	r2, sp, #12
 8014330:	4621      	mov	r1, r4
 8014332:	4640      	mov	r0, r8
 8014334:	f7ff fee2 	bl	80140fc <_printf_common>
 8014338:	3001      	adds	r0, #1
 801433a:	d14c      	bne.n	80143d6 <_printf_i+0x1fe>
 801433c:	f04f 30ff 	mov.w	r0, #4294967295
 8014340:	b004      	add	sp, #16
 8014342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014346:	4835      	ldr	r0, [pc, #212]	; (801441c <_printf_i+0x244>)
 8014348:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801434c:	6829      	ldr	r1, [r5, #0]
 801434e:	6823      	ldr	r3, [r4, #0]
 8014350:	f851 6b04 	ldr.w	r6, [r1], #4
 8014354:	6029      	str	r1, [r5, #0]
 8014356:	061d      	lsls	r5, r3, #24
 8014358:	d514      	bpl.n	8014384 <_printf_i+0x1ac>
 801435a:	07df      	lsls	r7, r3, #31
 801435c:	bf44      	itt	mi
 801435e:	f043 0320 	orrmi.w	r3, r3, #32
 8014362:	6023      	strmi	r3, [r4, #0]
 8014364:	b91e      	cbnz	r6, 801436e <_printf_i+0x196>
 8014366:	6823      	ldr	r3, [r4, #0]
 8014368:	f023 0320 	bic.w	r3, r3, #32
 801436c:	6023      	str	r3, [r4, #0]
 801436e:	2310      	movs	r3, #16
 8014370:	e7b0      	b.n	80142d4 <_printf_i+0xfc>
 8014372:	6823      	ldr	r3, [r4, #0]
 8014374:	f043 0320 	orr.w	r3, r3, #32
 8014378:	6023      	str	r3, [r4, #0]
 801437a:	2378      	movs	r3, #120	; 0x78
 801437c:	4828      	ldr	r0, [pc, #160]	; (8014420 <_printf_i+0x248>)
 801437e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014382:	e7e3      	b.n	801434c <_printf_i+0x174>
 8014384:	0659      	lsls	r1, r3, #25
 8014386:	bf48      	it	mi
 8014388:	b2b6      	uxthmi	r6, r6
 801438a:	e7e6      	b.n	801435a <_printf_i+0x182>
 801438c:	4615      	mov	r5, r2
 801438e:	e7bb      	b.n	8014308 <_printf_i+0x130>
 8014390:	682b      	ldr	r3, [r5, #0]
 8014392:	6826      	ldr	r6, [r4, #0]
 8014394:	6961      	ldr	r1, [r4, #20]
 8014396:	1d18      	adds	r0, r3, #4
 8014398:	6028      	str	r0, [r5, #0]
 801439a:	0635      	lsls	r5, r6, #24
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	d501      	bpl.n	80143a4 <_printf_i+0x1cc>
 80143a0:	6019      	str	r1, [r3, #0]
 80143a2:	e002      	b.n	80143aa <_printf_i+0x1d2>
 80143a4:	0670      	lsls	r0, r6, #25
 80143a6:	d5fb      	bpl.n	80143a0 <_printf_i+0x1c8>
 80143a8:	8019      	strh	r1, [r3, #0]
 80143aa:	2300      	movs	r3, #0
 80143ac:	6123      	str	r3, [r4, #16]
 80143ae:	4615      	mov	r5, r2
 80143b0:	e7ba      	b.n	8014328 <_printf_i+0x150>
 80143b2:	682b      	ldr	r3, [r5, #0]
 80143b4:	1d1a      	adds	r2, r3, #4
 80143b6:	602a      	str	r2, [r5, #0]
 80143b8:	681d      	ldr	r5, [r3, #0]
 80143ba:	6862      	ldr	r2, [r4, #4]
 80143bc:	2100      	movs	r1, #0
 80143be:	4628      	mov	r0, r5
 80143c0:	f7eb ff0e 	bl	80001e0 <memchr>
 80143c4:	b108      	cbz	r0, 80143ca <_printf_i+0x1f2>
 80143c6:	1b40      	subs	r0, r0, r5
 80143c8:	6060      	str	r0, [r4, #4]
 80143ca:	6863      	ldr	r3, [r4, #4]
 80143cc:	6123      	str	r3, [r4, #16]
 80143ce:	2300      	movs	r3, #0
 80143d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80143d4:	e7a8      	b.n	8014328 <_printf_i+0x150>
 80143d6:	6923      	ldr	r3, [r4, #16]
 80143d8:	462a      	mov	r2, r5
 80143da:	4649      	mov	r1, r9
 80143dc:	4640      	mov	r0, r8
 80143de:	47d0      	blx	sl
 80143e0:	3001      	adds	r0, #1
 80143e2:	d0ab      	beq.n	801433c <_printf_i+0x164>
 80143e4:	6823      	ldr	r3, [r4, #0]
 80143e6:	079b      	lsls	r3, r3, #30
 80143e8:	d413      	bmi.n	8014412 <_printf_i+0x23a>
 80143ea:	68e0      	ldr	r0, [r4, #12]
 80143ec:	9b03      	ldr	r3, [sp, #12]
 80143ee:	4298      	cmp	r0, r3
 80143f0:	bfb8      	it	lt
 80143f2:	4618      	movlt	r0, r3
 80143f4:	e7a4      	b.n	8014340 <_printf_i+0x168>
 80143f6:	2301      	movs	r3, #1
 80143f8:	4632      	mov	r2, r6
 80143fa:	4649      	mov	r1, r9
 80143fc:	4640      	mov	r0, r8
 80143fe:	47d0      	blx	sl
 8014400:	3001      	adds	r0, #1
 8014402:	d09b      	beq.n	801433c <_printf_i+0x164>
 8014404:	3501      	adds	r5, #1
 8014406:	68e3      	ldr	r3, [r4, #12]
 8014408:	9903      	ldr	r1, [sp, #12]
 801440a:	1a5b      	subs	r3, r3, r1
 801440c:	42ab      	cmp	r3, r5
 801440e:	dcf2      	bgt.n	80143f6 <_printf_i+0x21e>
 8014410:	e7eb      	b.n	80143ea <_printf_i+0x212>
 8014412:	2500      	movs	r5, #0
 8014414:	f104 0619 	add.w	r6, r4, #25
 8014418:	e7f5      	b.n	8014406 <_printf_i+0x22e>
 801441a:	bf00      	nop
 801441c:	0801aa96 	.word	0x0801aa96
 8014420:	0801aaa7 	.word	0x0801aaa7

08014424 <iprintf>:
 8014424:	b40f      	push	{r0, r1, r2, r3}
 8014426:	4b0a      	ldr	r3, [pc, #40]	; (8014450 <iprintf+0x2c>)
 8014428:	b513      	push	{r0, r1, r4, lr}
 801442a:	681c      	ldr	r4, [r3, #0]
 801442c:	b124      	cbz	r4, 8014438 <iprintf+0x14>
 801442e:	69a3      	ldr	r3, [r4, #24]
 8014430:	b913      	cbnz	r3, 8014438 <iprintf+0x14>
 8014432:	4620      	mov	r0, r4
 8014434:	f7ff fa1c 	bl	8013870 <__sinit>
 8014438:	ab05      	add	r3, sp, #20
 801443a:	9a04      	ldr	r2, [sp, #16]
 801443c:	68a1      	ldr	r1, [r4, #8]
 801443e:	9301      	str	r3, [sp, #4]
 8014440:	4620      	mov	r0, r4
 8014442:	f001 ff0d 	bl	8016260 <_vfiprintf_r>
 8014446:	b002      	add	sp, #8
 8014448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801444c:	b004      	add	sp, #16
 801444e:	4770      	bx	lr
 8014450:	200000c4 	.word	0x200000c4

08014454 <_puts_r>:
 8014454:	b570      	push	{r4, r5, r6, lr}
 8014456:	460e      	mov	r6, r1
 8014458:	4605      	mov	r5, r0
 801445a:	b118      	cbz	r0, 8014464 <_puts_r+0x10>
 801445c:	6983      	ldr	r3, [r0, #24]
 801445e:	b90b      	cbnz	r3, 8014464 <_puts_r+0x10>
 8014460:	f7ff fa06 	bl	8013870 <__sinit>
 8014464:	69ab      	ldr	r3, [r5, #24]
 8014466:	68ac      	ldr	r4, [r5, #8]
 8014468:	b913      	cbnz	r3, 8014470 <_puts_r+0x1c>
 801446a:	4628      	mov	r0, r5
 801446c:	f7ff fa00 	bl	8013870 <__sinit>
 8014470:	4b2c      	ldr	r3, [pc, #176]	; (8014524 <_puts_r+0xd0>)
 8014472:	429c      	cmp	r4, r3
 8014474:	d120      	bne.n	80144b8 <_puts_r+0x64>
 8014476:	686c      	ldr	r4, [r5, #4]
 8014478:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801447a:	07db      	lsls	r3, r3, #31
 801447c:	d405      	bmi.n	801448a <_puts_r+0x36>
 801447e:	89a3      	ldrh	r3, [r4, #12]
 8014480:	0598      	lsls	r0, r3, #22
 8014482:	d402      	bmi.n	801448a <_puts_r+0x36>
 8014484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014486:	f7ff fab6 	bl	80139f6 <__retarget_lock_acquire_recursive>
 801448a:	89a3      	ldrh	r3, [r4, #12]
 801448c:	0719      	lsls	r1, r3, #28
 801448e:	d51d      	bpl.n	80144cc <_puts_r+0x78>
 8014490:	6923      	ldr	r3, [r4, #16]
 8014492:	b1db      	cbz	r3, 80144cc <_puts_r+0x78>
 8014494:	3e01      	subs	r6, #1
 8014496:	68a3      	ldr	r3, [r4, #8]
 8014498:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801449c:	3b01      	subs	r3, #1
 801449e:	60a3      	str	r3, [r4, #8]
 80144a0:	bb39      	cbnz	r1, 80144f2 <_puts_r+0x9e>
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	da38      	bge.n	8014518 <_puts_r+0xc4>
 80144a6:	4622      	mov	r2, r4
 80144a8:	210a      	movs	r1, #10
 80144aa:	4628      	mov	r0, r5
 80144ac:	f000 f8bc 	bl	8014628 <__swbuf_r>
 80144b0:	3001      	adds	r0, #1
 80144b2:	d011      	beq.n	80144d8 <_puts_r+0x84>
 80144b4:	250a      	movs	r5, #10
 80144b6:	e011      	b.n	80144dc <_puts_r+0x88>
 80144b8:	4b1b      	ldr	r3, [pc, #108]	; (8014528 <_puts_r+0xd4>)
 80144ba:	429c      	cmp	r4, r3
 80144bc:	d101      	bne.n	80144c2 <_puts_r+0x6e>
 80144be:	68ac      	ldr	r4, [r5, #8]
 80144c0:	e7da      	b.n	8014478 <_puts_r+0x24>
 80144c2:	4b1a      	ldr	r3, [pc, #104]	; (801452c <_puts_r+0xd8>)
 80144c4:	429c      	cmp	r4, r3
 80144c6:	bf08      	it	eq
 80144c8:	68ec      	ldreq	r4, [r5, #12]
 80144ca:	e7d5      	b.n	8014478 <_puts_r+0x24>
 80144cc:	4621      	mov	r1, r4
 80144ce:	4628      	mov	r0, r5
 80144d0:	f000 f90e 	bl	80146f0 <__swsetup_r>
 80144d4:	2800      	cmp	r0, #0
 80144d6:	d0dd      	beq.n	8014494 <_puts_r+0x40>
 80144d8:	f04f 35ff 	mov.w	r5, #4294967295
 80144dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80144de:	07da      	lsls	r2, r3, #31
 80144e0:	d405      	bmi.n	80144ee <_puts_r+0x9a>
 80144e2:	89a3      	ldrh	r3, [r4, #12]
 80144e4:	059b      	lsls	r3, r3, #22
 80144e6:	d402      	bmi.n	80144ee <_puts_r+0x9a>
 80144e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80144ea:	f7ff fa85 	bl	80139f8 <__retarget_lock_release_recursive>
 80144ee:	4628      	mov	r0, r5
 80144f0:	bd70      	pop	{r4, r5, r6, pc}
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	da04      	bge.n	8014500 <_puts_r+0xac>
 80144f6:	69a2      	ldr	r2, [r4, #24]
 80144f8:	429a      	cmp	r2, r3
 80144fa:	dc06      	bgt.n	801450a <_puts_r+0xb6>
 80144fc:	290a      	cmp	r1, #10
 80144fe:	d004      	beq.n	801450a <_puts_r+0xb6>
 8014500:	6823      	ldr	r3, [r4, #0]
 8014502:	1c5a      	adds	r2, r3, #1
 8014504:	6022      	str	r2, [r4, #0]
 8014506:	7019      	strb	r1, [r3, #0]
 8014508:	e7c5      	b.n	8014496 <_puts_r+0x42>
 801450a:	4622      	mov	r2, r4
 801450c:	4628      	mov	r0, r5
 801450e:	f000 f88b 	bl	8014628 <__swbuf_r>
 8014512:	3001      	adds	r0, #1
 8014514:	d1bf      	bne.n	8014496 <_puts_r+0x42>
 8014516:	e7df      	b.n	80144d8 <_puts_r+0x84>
 8014518:	6823      	ldr	r3, [r4, #0]
 801451a:	250a      	movs	r5, #10
 801451c:	1c5a      	adds	r2, r3, #1
 801451e:	6022      	str	r2, [r4, #0]
 8014520:	701d      	strb	r5, [r3, #0]
 8014522:	e7db      	b.n	80144dc <_puts_r+0x88>
 8014524:	0801aa40 	.word	0x0801aa40
 8014528:	0801aa60 	.word	0x0801aa60
 801452c:	0801aa20 	.word	0x0801aa20

08014530 <puts>:
 8014530:	4b02      	ldr	r3, [pc, #8]	; (801453c <puts+0xc>)
 8014532:	4601      	mov	r1, r0
 8014534:	6818      	ldr	r0, [r3, #0]
 8014536:	f7ff bf8d 	b.w	8014454 <_puts_r>
 801453a:	bf00      	nop
 801453c:	200000c4 	.word	0x200000c4

08014540 <_sbrk_r>:
 8014540:	b538      	push	{r3, r4, r5, lr}
 8014542:	4d06      	ldr	r5, [pc, #24]	; (801455c <_sbrk_r+0x1c>)
 8014544:	2300      	movs	r3, #0
 8014546:	4604      	mov	r4, r0
 8014548:	4608      	mov	r0, r1
 801454a:	602b      	str	r3, [r5, #0]
 801454c:	f7ee feca 	bl	80032e4 <_sbrk>
 8014550:	1c43      	adds	r3, r0, #1
 8014552:	d102      	bne.n	801455a <_sbrk_r+0x1a>
 8014554:	682b      	ldr	r3, [r5, #0]
 8014556:	b103      	cbz	r3, 801455a <_sbrk_r+0x1a>
 8014558:	6023      	str	r3, [r4, #0]
 801455a:	bd38      	pop	{r3, r4, r5, pc}
 801455c:	20005c18 	.word	0x20005c18

08014560 <siprintf>:
 8014560:	b40e      	push	{r1, r2, r3}
 8014562:	b500      	push	{lr}
 8014564:	b09c      	sub	sp, #112	; 0x70
 8014566:	ab1d      	add	r3, sp, #116	; 0x74
 8014568:	9002      	str	r0, [sp, #8]
 801456a:	9006      	str	r0, [sp, #24]
 801456c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014570:	4809      	ldr	r0, [pc, #36]	; (8014598 <siprintf+0x38>)
 8014572:	9107      	str	r1, [sp, #28]
 8014574:	9104      	str	r1, [sp, #16]
 8014576:	4909      	ldr	r1, [pc, #36]	; (801459c <siprintf+0x3c>)
 8014578:	f853 2b04 	ldr.w	r2, [r3], #4
 801457c:	9105      	str	r1, [sp, #20]
 801457e:	6800      	ldr	r0, [r0, #0]
 8014580:	9301      	str	r3, [sp, #4]
 8014582:	a902      	add	r1, sp, #8
 8014584:	f001 fd42 	bl	801600c <_svfiprintf_r>
 8014588:	9b02      	ldr	r3, [sp, #8]
 801458a:	2200      	movs	r2, #0
 801458c:	701a      	strb	r2, [r3, #0]
 801458e:	b01c      	add	sp, #112	; 0x70
 8014590:	f85d eb04 	ldr.w	lr, [sp], #4
 8014594:	b003      	add	sp, #12
 8014596:	4770      	bx	lr
 8014598:	200000c4 	.word	0x200000c4
 801459c:	ffff0208 	.word	0xffff0208

080145a0 <__sread>:
 80145a0:	b510      	push	{r4, lr}
 80145a2:	460c      	mov	r4, r1
 80145a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145a8:	f001 ff8a 	bl	80164c0 <_read_r>
 80145ac:	2800      	cmp	r0, #0
 80145ae:	bfab      	itete	ge
 80145b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80145b2:	89a3      	ldrhlt	r3, [r4, #12]
 80145b4:	181b      	addge	r3, r3, r0
 80145b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80145ba:	bfac      	ite	ge
 80145bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80145be:	81a3      	strhlt	r3, [r4, #12]
 80145c0:	bd10      	pop	{r4, pc}

080145c2 <__swrite>:
 80145c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145c6:	461f      	mov	r7, r3
 80145c8:	898b      	ldrh	r3, [r1, #12]
 80145ca:	05db      	lsls	r3, r3, #23
 80145cc:	4605      	mov	r5, r0
 80145ce:	460c      	mov	r4, r1
 80145d0:	4616      	mov	r6, r2
 80145d2:	d505      	bpl.n	80145e0 <__swrite+0x1e>
 80145d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145d8:	2302      	movs	r3, #2
 80145da:	2200      	movs	r2, #0
 80145dc:	f001 f848 	bl	8015670 <_lseek_r>
 80145e0:	89a3      	ldrh	r3, [r4, #12]
 80145e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80145ea:	81a3      	strh	r3, [r4, #12]
 80145ec:	4632      	mov	r2, r6
 80145ee:	463b      	mov	r3, r7
 80145f0:	4628      	mov	r0, r5
 80145f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80145f6:	f000 b869 	b.w	80146cc <_write_r>

080145fa <__sseek>:
 80145fa:	b510      	push	{r4, lr}
 80145fc:	460c      	mov	r4, r1
 80145fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014602:	f001 f835 	bl	8015670 <_lseek_r>
 8014606:	1c43      	adds	r3, r0, #1
 8014608:	89a3      	ldrh	r3, [r4, #12]
 801460a:	bf15      	itete	ne
 801460c:	6560      	strne	r0, [r4, #84]	; 0x54
 801460e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014616:	81a3      	strheq	r3, [r4, #12]
 8014618:	bf18      	it	ne
 801461a:	81a3      	strhne	r3, [r4, #12]
 801461c:	bd10      	pop	{r4, pc}

0801461e <__sclose>:
 801461e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014622:	f000 b8d3 	b.w	80147cc <_close_r>
	...

08014628 <__swbuf_r>:
 8014628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801462a:	460e      	mov	r6, r1
 801462c:	4614      	mov	r4, r2
 801462e:	4605      	mov	r5, r0
 8014630:	b118      	cbz	r0, 801463a <__swbuf_r+0x12>
 8014632:	6983      	ldr	r3, [r0, #24]
 8014634:	b90b      	cbnz	r3, 801463a <__swbuf_r+0x12>
 8014636:	f7ff f91b 	bl	8013870 <__sinit>
 801463a:	4b21      	ldr	r3, [pc, #132]	; (80146c0 <__swbuf_r+0x98>)
 801463c:	429c      	cmp	r4, r3
 801463e:	d12b      	bne.n	8014698 <__swbuf_r+0x70>
 8014640:	686c      	ldr	r4, [r5, #4]
 8014642:	69a3      	ldr	r3, [r4, #24]
 8014644:	60a3      	str	r3, [r4, #8]
 8014646:	89a3      	ldrh	r3, [r4, #12]
 8014648:	071a      	lsls	r2, r3, #28
 801464a:	d52f      	bpl.n	80146ac <__swbuf_r+0x84>
 801464c:	6923      	ldr	r3, [r4, #16]
 801464e:	b36b      	cbz	r3, 80146ac <__swbuf_r+0x84>
 8014650:	6923      	ldr	r3, [r4, #16]
 8014652:	6820      	ldr	r0, [r4, #0]
 8014654:	1ac0      	subs	r0, r0, r3
 8014656:	6963      	ldr	r3, [r4, #20]
 8014658:	b2f6      	uxtb	r6, r6
 801465a:	4283      	cmp	r3, r0
 801465c:	4637      	mov	r7, r6
 801465e:	dc04      	bgt.n	801466a <__swbuf_r+0x42>
 8014660:	4621      	mov	r1, r4
 8014662:	4628      	mov	r0, r5
 8014664:	f000 ffc4 	bl	80155f0 <_fflush_r>
 8014668:	bb30      	cbnz	r0, 80146b8 <__swbuf_r+0x90>
 801466a:	68a3      	ldr	r3, [r4, #8]
 801466c:	3b01      	subs	r3, #1
 801466e:	60a3      	str	r3, [r4, #8]
 8014670:	6823      	ldr	r3, [r4, #0]
 8014672:	1c5a      	adds	r2, r3, #1
 8014674:	6022      	str	r2, [r4, #0]
 8014676:	701e      	strb	r6, [r3, #0]
 8014678:	6963      	ldr	r3, [r4, #20]
 801467a:	3001      	adds	r0, #1
 801467c:	4283      	cmp	r3, r0
 801467e:	d004      	beq.n	801468a <__swbuf_r+0x62>
 8014680:	89a3      	ldrh	r3, [r4, #12]
 8014682:	07db      	lsls	r3, r3, #31
 8014684:	d506      	bpl.n	8014694 <__swbuf_r+0x6c>
 8014686:	2e0a      	cmp	r6, #10
 8014688:	d104      	bne.n	8014694 <__swbuf_r+0x6c>
 801468a:	4621      	mov	r1, r4
 801468c:	4628      	mov	r0, r5
 801468e:	f000 ffaf 	bl	80155f0 <_fflush_r>
 8014692:	b988      	cbnz	r0, 80146b8 <__swbuf_r+0x90>
 8014694:	4638      	mov	r0, r7
 8014696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014698:	4b0a      	ldr	r3, [pc, #40]	; (80146c4 <__swbuf_r+0x9c>)
 801469a:	429c      	cmp	r4, r3
 801469c:	d101      	bne.n	80146a2 <__swbuf_r+0x7a>
 801469e:	68ac      	ldr	r4, [r5, #8]
 80146a0:	e7cf      	b.n	8014642 <__swbuf_r+0x1a>
 80146a2:	4b09      	ldr	r3, [pc, #36]	; (80146c8 <__swbuf_r+0xa0>)
 80146a4:	429c      	cmp	r4, r3
 80146a6:	bf08      	it	eq
 80146a8:	68ec      	ldreq	r4, [r5, #12]
 80146aa:	e7ca      	b.n	8014642 <__swbuf_r+0x1a>
 80146ac:	4621      	mov	r1, r4
 80146ae:	4628      	mov	r0, r5
 80146b0:	f000 f81e 	bl	80146f0 <__swsetup_r>
 80146b4:	2800      	cmp	r0, #0
 80146b6:	d0cb      	beq.n	8014650 <__swbuf_r+0x28>
 80146b8:	f04f 37ff 	mov.w	r7, #4294967295
 80146bc:	e7ea      	b.n	8014694 <__swbuf_r+0x6c>
 80146be:	bf00      	nop
 80146c0:	0801aa40 	.word	0x0801aa40
 80146c4:	0801aa60 	.word	0x0801aa60
 80146c8:	0801aa20 	.word	0x0801aa20

080146cc <_write_r>:
 80146cc:	b538      	push	{r3, r4, r5, lr}
 80146ce:	4d07      	ldr	r5, [pc, #28]	; (80146ec <_write_r+0x20>)
 80146d0:	4604      	mov	r4, r0
 80146d2:	4608      	mov	r0, r1
 80146d4:	4611      	mov	r1, r2
 80146d6:	2200      	movs	r2, #0
 80146d8:	602a      	str	r2, [r5, #0]
 80146da:	461a      	mov	r2, r3
 80146dc:	f7fe fe6d 	bl	80133ba <_write>
 80146e0:	1c43      	adds	r3, r0, #1
 80146e2:	d102      	bne.n	80146ea <_write_r+0x1e>
 80146e4:	682b      	ldr	r3, [r5, #0]
 80146e6:	b103      	cbz	r3, 80146ea <_write_r+0x1e>
 80146e8:	6023      	str	r3, [r4, #0]
 80146ea:	bd38      	pop	{r3, r4, r5, pc}
 80146ec:	20005c18 	.word	0x20005c18

080146f0 <__swsetup_r>:
 80146f0:	4b32      	ldr	r3, [pc, #200]	; (80147bc <__swsetup_r+0xcc>)
 80146f2:	b570      	push	{r4, r5, r6, lr}
 80146f4:	681d      	ldr	r5, [r3, #0]
 80146f6:	4606      	mov	r6, r0
 80146f8:	460c      	mov	r4, r1
 80146fa:	b125      	cbz	r5, 8014706 <__swsetup_r+0x16>
 80146fc:	69ab      	ldr	r3, [r5, #24]
 80146fe:	b913      	cbnz	r3, 8014706 <__swsetup_r+0x16>
 8014700:	4628      	mov	r0, r5
 8014702:	f7ff f8b5 	bl	8013870 <__sinit>
 8014706:	4b2e      	ldr	r3, [pc, #184]	; (80147c0 <__swsetup_r+0xd0>)
 8014708:	429c      	cmp	r4, r3
 801470a:	d10f      	bne.n	801472c <__swsetup_r+0x3c>
 801470c:	686c      	ldr	r4, [r5, #4]
 801470e:	89a3      	ldrh	r3, [r4, #12]
 8014710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014714:	0719      	lsls	r1, r3, #28
 8014716:	d42c      	bmi.n	8014772 <__swsetup_r+0x82>
 8014718:	06dd      	lsls	r5, r3, #27
 801471a:	d411      	bmi.n	8014740 <__swsetup_r+0x50>
 801471c:	2309      	movs	r3, #9
 801471e:	6033      	str	r3, [r6, #0]
 8014720:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014724:	81a3      	strh	r3, [r4, #12]
 8014726:	f04f 30ff 	mov.w	r0, #4294967295
 801472a:	e03e      	b.n	80147aa <__swsetup_r+0xba>
 801472c:	4b25      	ldr	r3, [pc, #148]	; (80147c4 <__swsetup_r+0xd4>)
 801472e:	429c      	cmp	r4, r3
 8014730:	d101      	bne.n	8014736 <__swsetup_r+0x46>
 8014732:	68ac      	ldr	r4, [r5, #8]
 8014734:	e7eb      	b.n	801470e <__swsetup_r+0x1e>
 8014736:	4b24      	ldr	r3, [pc, #144]	; (80147c8 <__swsetup_r+0xd8>)
 8014738:	429c      	cmp	r4, r3
 801473a:	bf08      	it	eq
 801473c:	68ec      	ldreq	r4, [r5, #12]
 801473e:	e7e6      	b.n	801470e <__swsetup_r+0x1e>
 8014740:	0758      	lsls	r0, r3, #29
 8014742:	d512      	bpl.n	801476a <__swsetup_r+0x7a>
 8014744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014746:	b141      	cbz	r1, 801475a <__swsetup_r+0x6a>
 8014748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801474c:	4299      	cmp	r1, r3
 801474e:	d002      	beq.n	8014756 <__swsetup_r+0x66>
 8014750:	4630      	mov	r0, r6
 8014752:	f001 fbb3 	bl	8015ebc <_free_r>
 8014756:	2300      	movs	r3, #0
 8014758:	6363      	str	r3, [r4, #52]	; 0x34
 801475a:	89a3      	ldrh	r3, [r4, #12]
 801475c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014760:	81a3      	strh	r3, [r4, #12]
 8014762:	2300      	movs	r3, #0
 8014764:	6063      	str	r3, [r4, #4]
 8014766:	6923      	ldr	r3, [r4, #16]
 8014768:	6023      	str	r3, [r4, #0]
 801476a:	89a3      	ldrh	r3, [r4, #12]
 801476c:	f043 0308 	orr.w	r3, r3, #8
 8014770:	81a3      	strh	r3, [r4, #12]
 8014772:	6923      	ldr	r3, [r4, #16]
 8014774:	b94b      	cbnz	r3, 801478a <__swsetup_r+0x9a>
 8014776:	89a3      	ldrh	r3, [r4, #12]
 8014778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801477c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014780:	d003      	beq.n	801478a <__swsetup_r+0x9a>
 8014782:	4621      	mov	r1, r4
 8014784:	4630      	mov	r0, r6
 8014786:	f000 ffab 	bl	80156e0 <__smakebuf_r>
 801478a:	89a0      	ldrh	r0, [r4, #12]
 801478c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014790:	f010 0301 	ands.w	r3, r0, #1
 8014794:	d00a      	beq.n	80147ac <__swsetup_r+0xbc>
 8014796:	2300      	movs	r3, #0
 8014798:	60a3      	str	r3, [r4, #8]
 801479a:	6963      	ldr	r3, [r4, #20]
 801479c:	425b      	negs	r3, r3
 801479e:	61a3      	str	r3, [r4, #24]
 80147a0:	6923      	ldr	r3, [r4, #16]
 80147a2:	b943      	cbnz	r3, 80147b6 <__swsetup_r+0xc6>
 80147a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80147a8:	d1ba      	bne.n	8014720 <__swsetup_r+0x30>
 80147aa:	bd70      	pop	{r4, r5, r6, pc}
 80147ac:	0781      	lsls	r1, r0, #30
 80147ae:	bf58      	it	pl
 80147b0:	6963      	ldrpl	r3, [r4, #20]
 80147b2:	60a3      	str	r3, [r4, #8]
 80147b4:	e7f4      	b.n	80147a0 <__swsetup_r+0xb0>
 80147b6:	2000      	movs	r0, #0
 80147b8:	e7f7      	b.n	80147aa <__swsetup_r+0xba>
 80147ba:	bf00      	nop
 80147bc:	200000c4 	.word	0x200000c4
 80147c0:	0801aa40 	.word	0x0801aa40
 80147c4:	0801aa60 	.word	0x0801aa60
 80147c8:	0801aa20 	.word	0x0801aa20

080147cc <_close_r>:
 80147cc:	b538      	push	{r3, r4, r5, lr}
 80147ce:	4d06      	ldr	r5, [pc, #24]	; (80147e8 <_close_r+0x1c>)
 80147d0:	2300      	movs	r3, #0
 80147d2:	4604      	mov	r4, r0
 80147d4:	4608      	mov	r0, r1
 80147d6:	602b      	str	r3, [r5, #0]
 80147d8:	f7fe fe20 	bl	801341c <_close>
 80147dc:	1c43      	adds	r3, r0, #1
 80147de:	d102      	bne.n	80147e6 <_close_r+0x1a>
 80147e0:	682b      	ldr	r3, [r5, #0]
 80147e2:	b103      	cbz	r3, 80147e6 <_close_r+0x1a>
 80147e4:	6023      	str	r3, [r4, #0]
 80147e6:	bd38      	pop	{r3, r4, r5, pc}
 80147e8:	20005c18 	.word	0x20005c18

080147ec <quorem>:
 80147ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147f0:	6903      	ldr	r3, [r0, #16]
 80147f2:	690c      	ldr	r4, [r1, #16]
 80147f4:	42a3      	cmp	r3, r4
 80147f6:	4607      	mov	r7, r0
 80147f8:	f2c0 8081 	blt.w	80148fe <quorem+0x112>
 80147fc:	3c01      	subs	r4, #1
 80147fe:	f101 0814 	add.w	r8, r1, #20
 8014802:	f100 0514 	add.w	r5, r0, #20
 8014806:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801480a:	9301      	str	r3, [sp, #4]
 801480c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014810:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014814:	3301      	adds	r3, #1
 8014816:	429a      	cmp	r2, r3
 8014818:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801481c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014820:	fbb2 f6f3 	udiv	r6, r2, r3
 8014824:	d331      	bcc.n	801488a <quorem+0x9e>
 8014826:	f04f 0e00 	mov.w	lr, #0
 801482a:	4640      	mov	r0, r8
 801482c:	46ac      	mov	ip, r5
 801482e:	46f2      	mov	sl, lr
 8014830:	f850 2b04 	ldr.w	r2, [r0], #4
 8014834:	b293      	uxth	r3, r2
 8014836:	fb06 e303 	mla	r3, r6, r3, lr
 801483a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801483e:	b29b      	uxth	r3, r3
 8014840:	ebaa 0303 	sub.w	r3, sl, r3
 8014844:	f8dc a000 	ldr.w	sl, [ip]
 8014848:	0c12      	lsrs	r2, r2, #16
 801484a:	fa13 f38a 	uxtah	r3, r3, sl
 801484e:	fb06 e202 	mla	r2, r6, r2, lr
 8014852:	9300      	str	r3, [sp, #0]
 8014854:	9b00      	ldr	r3, [sp, #0]
 8014856:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801485a:	b292      	uxth	r2, r2
 801485c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014860:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014864:	f8bd 3000 	ldrh.w	r3, [sp]
 8014868:	4581      	cmp	r9, r0
 801486a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801486e:	f84c 3b04 	str.w	r3, [ip], #4
 8014872:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014876:	d2db      	bcs.n	8014830 <quorem+0x44>
 8014878:	f855 300b 	ldr.w	r3, [r5, fp]
 801487c:	b92b      	cbnz	r3, 801488a <quorem+0x9e>
 801487e:	9b01      	ldr	r3, [sp, #4]
 8014880:	3b04      	subs	r3, #4
 8014882:	429d      	cmp	r5, r3
 8014884:	461a      	mov	r2, r3
 8014886:	d32e      	bcc.n	80148e6 <quorem+0xfa>
 8014888:	613c      	str	r4, [r7, #16]
 801488a:	4638      	mov	r0, r7
 801488c:	f001 f9fe 	bl	8015c8c <__mcmp>
 8014890:	2800      	cmp	r0, #0
 8014892:	db24      	blt.n	80148de <quorem+0xf2>
 8014894:	3601      	adds	r6, #1
 8014896:	4628      	mov	r0, r5
 8014898:	f04f 0c00 	mov.w	ip, #0
 801489c:	f858 2b04 	ldr.w	r2, [r8], #4
 80148a0:	f8d0 e000 	ldr.w	lr, [r0]
 80148a4:	b293      	uxth	r3, r2
 80148a6:	ebac 0303 	sub.w	r3, ip, r3
 80148aa:	0c12      	lsrs	r2, r2, #16
 80148ac:	fa13 f38e 	uxtah	r3, r3, lr
 80148b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80148b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80148b8:	b29b      	uxth	r3, r3
 80148ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80148be:	45c1      	cmp	r9, r8
 80148c0:	f840 3b04 	str.w	r3, [r0], #4
 80148c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80148c8:	d2e8      	bcs.n	801489c <quorem+0xb0>
 80148ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80148ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80148d2:	b922      	cbnz	r2, 80148de <quorem+0xf2>
 80148d4:	3b04      	subs	r3, #4
 80148d6:	429d      	cmp	r5, r3
 80148d8:	461a      	mov	r2, r3
 80148da:	d30a      	bcc.n	80148f2 <quorem+0x106>
 80148dc:	613c      	str	r4, [r7, #16]
 80148de:	4630      	mov	r0, r6
 80148e0:	b003      	add	sp, #12
 80148e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148e6:	6812      	ldr	r2, [r2, #0]
 80148e8:	3b04      	subs	r3, #4
 80148ea:	2a00      	cmp	r2, #0
 80148ec:	d1cc      	bne.n	8014888 <quorem+0x9c>
 80148ee:	3c01      	subs	r4, #1
 80148f0:	e7c7      	b.n	8014882 <quorem+0x96>
 80148f2:	6812      	ldr	r2, [r2, #0]
 80148f4:	3b04      	subs	r3, #4
 80148f6:	2a00      	cmp	r2, #0
 80148f8:	d1f0      	bne.n	80148dc <quorem+0xf0>
 80148fa:	3c01      	subs	r4, #1
 80148fc:	e7eb      	b.n	80148d6 <quorem+0xea>
 80148fe:	2000      	movs	r0, #0
 8014900:	e7ee      	b.n	80148e0 <quorem+0xf4>
 8014902:	0000      	movs	r0, r0
 8014904:	0000      	movs	r0, r0
	...

08014908 <_dtoa_r>:
 8014908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801490c:	ed2d 8b04 	vpush	{d8-d9}
 8014910:	ec57 6b10 	vmov	r6, r7, d0
 8014914:	b093      	sub	sp, #76	; 0x4c
 8014916:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014918:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801491c:	9106      	str	r1, [sp, #24]
 801491e:	ee10 aa10 	vmov	sl, s0
 8014922:	4604      	mov	r4, r0
 8014924:	9209      	str	r2, [sp, #36]	; 0x24
 8014926:	930c      	str	r3, [sp, #48]	; 0x30
 8014928:	46bb      	mov	fp, r7
 801492a:	b975      	cbnz	r5, 801494a <_dtoa_r+0x42>
 801492c:	2010      	movs	r0, #16
 801492e:	f000 ff17 	bl	8015760 <malloc>
 8014932:	4602      	mov	r2, r0
 8014934:	6260      	str	r0, [r4, #36]	; 0x24
 8014936:	b920      	cbnz	r0, 8014942 <_dtoa_r+0x3a>
 8014938:	4ba7      	ldr	r3, [pc, #668]	; (8014bd8 <_dtoa_r+0x2d0>)
 801493a:	21ea      	movs	r1, #234	; 0xea
 801493c:	48a7      	ldr	r0, [pc, #668]	; (8014bdc <_dtoa_r+0x2d4>)
 801493e:	f001 fdd1 	bl	80164e4 <__assert_func>
 8014942:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014946:	6005      	str	r5, [r0, #0]
 8014948:	60c5      	str	r5, [r0, #12]
 801494a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801494c:	6819      	ldr	r1, [r3, #0]
 801494e:	b151      	cbz	r1, 8014966 <_dtoa_r+0x5e>
 8014950:	685a      	ldr	r2, [r3, #4]
 8014952:	604a      	str	r2, [r1, #4]
 8014954:	2301      	movs	r3, #1
 8014956:	4093      	lsls	r3, r2
 8014958:	608b      	str	r3, [r1, #8]
 801495a:	4620      	mov	r0, r4
 801495c:	f000 ff54 	bl	8015808 <_Bfree>
 8014960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014962:	2200      	movs	r2, #0
 8014964:	601a      	str	r2, [r3, #0]
 8014966:	1e3b      	subs	r3, r7, #0
 8014968:	bfaa      	itet	ge
 801496a:	2300      	movge	r3, #0
 801496c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8014970:	f8c8 3000 	strge.w	r3, [r8]
 8014974:	4b9a      	ldr	r3, [pc, #616]	; (8014be0 <_dtoa_r+0x2d8>)
 8014976:	bfbc      	itt	lt
 8014978:	2201      	movlt	r2, #1
 801497a:	f8c8 2000 	strlt.w	r2, [r8]
 801497e:	ea33 030b 	bics.w	r3, r3, fp
 8014982:	d11b      	bne.n	80149bc <_dtoa_r+0xb4>
 8014984:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014986:	f242 730f 	movw	r3, #9999	; 0x270f
 801498a:	6013      	str	r3, [r2, #0]
 801498c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014990:	4333      	orrs	r3, r6
 8014992:	f000 8592 	beq.w	80154ba <_dtoa_r+0xbb2>
 8014996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014998:	b963      	cbnz	r3, 80149b4 <_dtoa_r+0xac>
 801499a:	4b92      	ldr	r3, [pc, #584]	; (8014be4 <_dtoa_r+0x2dc>)
 801499c:	e022      	b.n	80149e4 <_dtoa_r+0xdc>
 801499e:	4b92      	ldr	r3, [pc, #584]	; (8014be8 <_dtoa_r+0x2e0>)
 80149a0:	9301      	str	r3, [sp, #4]
 80149a2:	3308      	adds	r3, #8
 80149a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80149a6:	6013      	str	r3, [r2, #0]
 80149a8:	9801      	ldr	r0, [sp, #4]
 80149aa:	b013      	add	sp, #76	; 0x4c
 80149ac:	ecbd 8b04 	vpop	{d8-d9}
 80149b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149b4:	4b8b      	ldr	r3, [pc, #556]	; (8014be4 <_dtoa_r+0x2dc>)
 80149b6:	9301      	str	r3, [sp, #4]
 80149b8:	3303      	adds	r3, #3
 80149ba:	e7f3      	b.n	80149a4 <_dtoa_r+0x9c>
 80149bc:	2200      	movs	r2, #0
 80149be:	2300      	movs	r3, #0
 80149c0:	4650      	mov	r0, sl
 80149c2:	4659      	mov	r1, fp
 80149c4:	f7ec f880 	bl	8000ac8 <__aeabi_dcmpeq>
 80149c8:	ec4b ab19 	vmov	d9, sl, fp
 80149cc:	4680      	mov	r8, r0
 80149ce:	b158      	cbz	r0, 80149e8 <_dtoa_r+0xe0>
 80149d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80149d2:	2301      	movs	r3, #1
 80149d4:	6013      	str	r3, [r2, #0]
 80149d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149d8:	2b00      	cmp	r3, #0
 80149da:	f000 856b 	beq.w	80154b4 <_dtoa_r+0xbac>
 80149de:	4883      	ldr	r0, [pc, #524]	; (8014bec <_dtoa_r+0x2e4>)
 80149e0:	6018      	str	r0, [r3, #0]
 80149e2:	1e43      	subs	r3, r0, #1
 80149e4:	9301      	str	r3, [sp, #4]
 80149e6:	e7df      	b.n	80149a8 <_dtoa_r+0xa0>
 80149e8:	ec4b ab10 	vmov	d0, sl, fp
 80149ec:	aa10      	add	r2, sp, #64	; 0x40
 80149ee:	a911      	add	r1, sp, #68	; 0x44
 80149f0:	4620      	mov	r0, r4
 80149f2:	f001 f9f1 	bl	8015dd8 <__d2b>
 80149f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80149fa:	ee08 0a10 	vmov	s16, r0
 80149fe:	2d00      	cmp	r5, #0
 8014a00:	f000 8084 	beq.w	8014b0c <_dtoa_r+0x204>
 8014a04:	ee19 3a90 	vmov	r3, s19
 8014a08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014a0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014a10:	4656      	mov	r6, sl
 8014a12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014a16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014a1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8014a1e:	4b74      	ldr	r3, [pc, #464]	; (8014bf0 <_dtoa_r+0x2e8>)
 8014a20:	2200      	movs	r2, #0
 8014a22:	4630      	mov	r0, r6
 8014a24:	4639      	mov	r1, r7
 8014a26:	f7eb fc2f 	bl	8000288 <__aeabi_dsub>
 8014a2a:	a365      	add	r3, pc, #404	; (adr r3, 8014bc0 <_dtoa_r+0x2b8>)
 8014a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a30:	f7eb fde2 	bl	80005f8 <__aeabi_dmul>
 8014a34:	a364      	add	r3, pc, #400	; (adr r3, 8014bc8 <_dtoa_r+0x2c0>)
 8014a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a3a:	f7eb fc27 	bl	800028c <__adddf3>
 8014a3e:	4606      	mov	r6, r0
 8014a40:	4628      	mov	r0, r5
 8014a42:	460f      	mov	r7, r1
 8014a44:	f7eb fd6e 	bl	8000524 <__aeabi_i2d>
 8014a48:	a361      	add	r3, pc, #388	; (adr r3, 8014bd0 <_dtoa_r+0x2c8>)
 8014a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a4e:	f7eb fdd3 	bl	80005f8 <__aeabi_dmul>
 8014a52:	4602      	mov	r2, r0
 8014a54:	460b      	mov	r3, r1
 8014a56:	4630      	mov	r0, r6
 8014a58:	4639      	mov	r1, r7
 8014a5a:	f7eb fc17 	bl	800028c <__adddf3>
 8014a5e:	4606      	mov	r6, r0
 8014a60:	460f      	mov	r7, r1
 8014a62:	f7ec f879 	bl	8000b58 <__aeabi_d2iz>
 8014a66:	2200      	movs	r2, #0
 8014a68:	9000      	str	r0, [sp, #0]
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	4630      	mov	r0, r6
 8014a6e:	4639      	mov	r1, r7
 8014a70:	f7ec f834 	bl	8000adc <__aeabi_dcmplt>
 8014a74:	b150      	cbz	r0, 8014a8c <_dtoa_r+0x184>
 8014a76:	9800      	ldr	r0, [sp, #0]
 8014a78:	f7eb fd54 	bl	8000524 <__aeabi_i2d>
 8014a7c:	4632      	mov	r2, r6
 8014a7e:	463b      	mov	r3, r7
 8014a80:	f7ec f822 	bl	8000ac8 <__aeabi_dcmpeq>
 8014a84:	b910      	cbnz	r0, 8014a8c <_dtoa_r+0x184>
 8014a86:	9b00      	ldr	r3, [sp, #0]
 8014a88:	3b01      	subs	r3, #1
 8014a8a:	9300      	str	r3, [sp, #0]
 8014a8c:	9b00      	ldr	r3, [sp, #0]
 8014a8e:	2b16      	cmp	r3, #22
 8014a90:	d85a      	bhi.n	8014b48 <_dtoa_r+0x240>
 8014a92:	9a00      	ldr	r2, [sp, #0]
 8014a94:	4b57      	ldr	r3, [pc, #348]	; (8014bf4 <_dtoa_r+0x2ec>)
 8014a96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a9e:	ec51 0b19 	vmov	r0, r1, d9
 8014aa2:	f7ec f81b 	bl	8000adc <__aeabi_dcmplt>
 8014aa6:	2800      	cmp	r0, #0
 8014aa8:	d050      	beq.n	8014b4c <_dtoa_r+0x244>
 8014aaa:	9b00      	ldr	r3, [sp, #0]
 8014aac:	3b01      	subs	r3, #1
 8014aae:	9300      	str	r3, [sp, #0]
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ab6:	1b5d      	subs	r5, r3, r5
 8014ab8:	1e6b      	subs	r3, r5, #1
 8014aba:	9305      	str	r3, [sp, #20]
 8014abc:	bf45      	ittet	mi
 8014abe:	f1c5 0301 	rsbmi	r3, r5, #1
 8014ac2:	9304      	strmi	r3, [sp, #16]
 8014ac4:	2300      	movpl	r3, #0
 8014ac6:	2300      	movmi	r3, #0
 8014ac8:	bf4c      	ite	mi
 8014aca:	9305      	strmi	r3, [sp, #20]
 8014acc:	9304      	strpl	r3, [sp, #16]
 8014ace:	9b00      	ldr	r3, [sp, #0]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	db3d      	blt.n	8014b50 <_dtoa_r+0x248>
 8014ad4:	9b05      	ldr	r3, [sp, #20]
 8014ad6:	9a00      	ldr	r2, [sp, #0]
 8014ad8:	920a      	str	r2, [sp, #40]	; 0x28
 8014ada:	4413      	add	r3, r2
 8014adc:	9305      	str	r3, [sp, #20]
 8014ade:	2300      	movs	r3, #0
 8014ae0:	9307      	str	r3, [sp, #28]
 8014ae2:	9b06      	ldr	r3, [sp, #24]
 8014ae4:	2b09      	cmp	r3, #9
 8014ae6:	f200 8089 	bhi.w	8014bfc <_dtoa_r+0x2f4>
 8014aea:	2b05      	cmp	r3, #5
 8014aec:	bfc4      	itt	gt
 8014aee:	3b04      	subgt	r3, #4
 8014af0:	9306      	strgt	r3, [sp, #24]
 8014af2:	9b06      	ldr	r3, [sp, #24]
 8014af4:	f1a3 0302 	sub.w	r3, r3, #2
 8014af8:	bfcc      	ite	gt
 8014afa:	2500      	movgt	r5, #0
 8014afc:	2501      	movle	r5, #1
 8014afe:	2b03      	cmp	r3, #3
 8014b00:	f200 8087 	bhi.w	8014c12 <_dtoa_r+0x30a>
 8014b04:	e8df f003 	tbb	[pc, r3]
 8014b08:	59383a2d 	.word	0x59383a2d
 8014b0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014b10:	441d      	add	r5, r3
 8014b12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014b16:	2b20      	cmp	r3, #32
 8014b18:	bfc1      	itttt	gt
 8014b1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014b1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014b22:	fa0b f303 	lslgt.w	r3, fp, r3
 8014b26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014b2a:	bfda      	itte	le
 8014b2c:	f1c3 0320 	rsble	r3, r3, #32
 8014b30:	fa06 f003 	lslle.w	r0, r6, r3
 8014b34:	4318      	orrgt	r0, r3
 8014b36:	f7eb fce5 	bl	8000504 <__aeabi_ui2d>
 8014b3a:	2301      	movs	r3, #1
 8014b3c:	4606      	mov	r6, r0
 8014b3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014b42:	3d01      	subs	r5, #1
 8014b44:	930e      	str	r3, [sp, #56]	; 0x38
 8014b46:	e76a      	b.n	8014a1e <_dtoa_r+0x116>
 8014b48:	2301      	movs	r3, #1
 8014b4a:	e7b2      	b.n	8014ab2 <_dtoa_r+0x1aa>
 8014b4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8014b4e:	e7b1      	b.n	8014ab4 <_dtoa_r+0x1ac>
 8014b50:	9b04      	ldr	r3, [sp, #16]
 8014b52:	9a00      	ldr	r2, [sp, #0]
 8014b54:	1a9b      	subs	r3, r3, r2
 8014b56:	9304      	str	r3, [sp, #16]
 8014b58:	4253      	negs	r3, r2
 8014b5a:	9307      	str	r3, [sp, #28]
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8014b60:	e7bf      	b.n	8014ae2 <_dtoa_r+0x1da>
 8014b62:	2300      	movs	r3, #0
 8014b64:	9308      	str	r3, [sp, #32]
 8014b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	dc55      	bgt.n	8014c18 <_dtoa_r+0x310>
 8014b6c:	2301      	movs	r3, #1
 8014b6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014b72:	461a      	mov	r2, r3
 8014b74:	9209      	str	r2, [sp, #36]	; 0x24
 8014b76:	e00c      	b.n	8014b92 <_dtoa_r+0x28a>
 8014b78:	2301      	movs	r3, #1
 8014b7a:	e7f3      	b.n	8014b64 <_dtoa_r+0x25c>
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b80:	9308      	str	r3, [sp, #32]
 8014b82:	9b00      	ldr	r3, [sp, #0]
 8014b84:	4413      	add	r3, r2
 8014b86:	9302      	str	r3, [sp, #8]
 8014b88:	3301      	adds	r3, #1
 8014b8a:	2b01      	cmp	r3, #1
 8014b8c:	9303      	str	r3, [sp, #12]
 8014b8e:	bfb8      	it	lt
 8014b90:	2301      	movlt	r3, #1
 8014b92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014b94:	2200      	movs	r2, #0
 8014b96:	6042      	str	r2, [r0, #4]
 8014b98:	2204      	movs	r2, #4
 8014b9a:	f102 0614 	add.w	r6, r2, #20
 8014b9e:	429e      	cmp	r6, r3
 8014ba0:	6841      	ldr	r1, [r0, #4]
 8014ba2:	d93d      	bls.n	8014c20 <_dtoa_r+0x318>
 8014ba4:	4620      	mov	r0, r4
 8014ba6:	f000 fdef 	bl	8015788 <_Balloc>
 8014baa:	9001      	str	r0, [sp, #4]
 8014bac:	2800      	cmp	r0, #0
 8014bae:	d13b      	bne.n	8014c28 <_dtoa_r+0x320>
 8014bb0:	4b11      	ldr	r3, [pc, #68]	; (8014bf8 <_dtoa_r+0x2f0>)
 8014bb2:	4602      	mov	r2, r0
 8014bb4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014bb8:	e6c0      	b.n	801493c <_dtoa_r+0x34>
 8014bba:	2301      	movs	r3, #1
 8014bbc:	e7df      	b.n	8014b7e <_dtoa_r+0x276>
 8014bbe:	bf00      	nop
 8014bc0:	636f4361 	.word	0x636f4361
 8014bc4:	3fd287a7 	.word	0x3fd287a7
 8014bc8:	8b60c8b3 	.word	0x8b60c8b3
 8014bcc:	3fc68a28 	.word	0x3fc68a28
 8014bd0:	509f79fb 	.word	0x509f79fb
 8014bd4:	3fd34413 	.word	0x3fd34413
 8014bd8:	0801aac5 	.word	0x0801aac5
 8014bdc:	0801aadc 	.word	0x0801aadc
 8014be0:	7ff00000 	.word	0x7ff00000
 8014be4:	0801aac1 	.word	0x0801aac1
 8014be8:	0801aab8 	.word	0x0801aab8
 8014bec:	0801aa95 	.word	0x0801aa95
 8014bf0:	3ff80000 	.word	0x3ff80000
 8014bf4:	0801abd0 	.word	0x0801abd0
 8014bf8:	0801ab37 	.word	0x0801ab37
 8014bfc:	2501      	movs	r5, #1
 8014bfe:	2300      	movs	r3, #0
 8014c00:	9306      	str	r3, [sp, #24]
 8014c02:	9508      	str	r5, [sp, #32]
 8014c04:	f04f 33ff 	mov.w	r3, #4294967295
 8014c08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	2312      	movs	r3, #18
 8014c10:	e7b0      	b.n	8014b74 <_dtoa_r+0x26c>
 8014c12:	2301      	movs	r3, #1
 8014c14:	9308      	str	r3, [sp, #32]
 8014c16:	e7f5      	b.n	8014c04 <_dtoa_r+0x2fc>
 8014c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014c1e:	e7b8      	b.n	8014b92 <_dtoa_r+0x28a>
 8014c20:	3101      	adds	r1, #1
 8014c22:	6041      	str	r1, [r0, #4]
 8014c24:	0052      	lsls	r2, r2, #1
 8014c26:	e7b8      	b.n	8014b9a <_dtoa_r+0x292>
 8014c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c2a:	9a01      	ldr	r2, [sp, #4]
 8014c2c:	601a      	str	r2, [r3, #0]
 8014c2e:	9b03      	ldr	r3, [sp, #12]
 8014c30:	2b0e      	cmp	r3, #14
 8014c32:	f200 809d 	bhi.w	8014d70 <_dtoa_r+0x468>
 8014c36:	2d00      	cmp	r5, #0
 8014c38:	f000 809a 	beq.w	8014d70 <_dtoa_r+0x468>
 8014c3c:	9b00      	ldr	r3, [sp, #0]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	dd32      	ble.n	8014ca8 <_dtoa_r+0x3a0>
 8014c42:	4ab7      	ldr	r2, [pc, #732]	; (8014f20 <_dtoa_r+0x618>)
 8014c44:	f003 030f 	and.w	r3, r3, #15
 8014c48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014c4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014c50:	9b00      	ldr	r3, [sp, #0]
 8014c52:	05d8      	lsls	r0, r3, #23
 8014c54:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014c58:	d516      	bpl.n	8014c88 <_dtoa_r+0x380>
 8014c5a:	4bb2      	ldr	r3, [pc, #712]	; (8014f24 <_dtoa_r+0x61c>)
 8014c5c:	ec51 0b19 	vmov	r0, r1, d9
 8014c60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014c64:	f7eb fdf2 	bl	800084c <__aeabi_ddiv>
 8014c68:	f007 070f 	and.w	r7, r7, #15
 8014c6c:	4682      	mov	sl, r0
 8014c6e:	468b      	mov	fp, r1
 8014c70:	2503      	movs	r5, #3
 8014c72:	4eac      	ldr	r6, [pc, #688]	; (8014f24 <_dtoa_r+0x61c>)
 8014c74:	b957      	cbnz	r7, 8014c8c <_dtoa_r+0x384>
 8014c76:	4642      	mov	r2, r8
 8014c78:	464b      	mov	r3, r9
 8014c7a:	4650      	mov	r0, sl
 8014c7c:	4659      	mov	r1, fp
 8014c7e:	f7eb fde5 	bl	800084c <__aeabi_ddiv>
 8014c82:	4682      	mov	sl, r0
 8014c84:	468b      	mov	fp, r1
 8014c86:	e028      	b.n	8014cda <_dtoa_r+0x3d2>
 8014c88:	2502      	movs	r5, #2
 8014c8a:	e7f2      	b.n	8014c72 <_dtoa_r+0x36a>
 8014c8c:	07f9      	lsls	r1, r7, #31
 8014c8e:	d508      	bpl.n	8014ca2 <_dtoa_r+0x39a>
 8014c90:	4640      	mov	r0, r8
 8014c92:	4649      	mov	r1, r9
 8014c94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014c98:	f7eb fcae 	bl	80005f8 <__aeabi_dmul>
 8014c9c:	3501      	adds	r5, #1
 8014c9e:	4680      	mov	r8, r0
 8014ca0:	4689      	mov	r9, r1
 8014ca2:	107f      	asrs	r7, r7, #1
 8014ca4:	3608      	adds	r6, #8
 8014ca6:	e7e5      	b.n	8014c74 <_dtoa_r+0x36c>
 8014ca8:	f000 809b 	beq.w	8014de2 <_dtoa_r+0x4da>
 8014cac:	9b00      	ldr	r3, [sp, #0]
 8014cae:	4f9d      	ldr	r7, [pc, #628]	; (8014f24 <_dtoa_r+0x61c>)
 8014cb0:	425e      	negs	r6, r3
 8014cb2:	4b9b      	ldr	r3, [pc, #620]	; (8014f20 <_dtoa_r+0x618>)
 8014cb4:	f006 020f 	and.w	r2, r6, #15
 8014cb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cc0:	ec51 0b19 	vmov	r0, r1, d9
 8014cc4:	f7eb fc98 	bl	80005f8 <__aeabi_dmul>
 8014cc8:	1136      	asrs	r6, r6, #4
 8014cca:	4682      	mov	sl, r0
 8014ccc:	468b      	mov	fp, r1
 8014cce:	2300      	movs	r3, #0
 8014cd0:	2502      	movs	r5, #2
 8014cd2:	2e00      	cmp	r6, #0
 8014cd4:	d17a      	bne.n	8014dcc <_dtoa_r+0x4c4>
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d1d3      	bne.n	8014c82 <_dtoa_r+0x37a>
 8014cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	f000 8082 	beq.w	8014de6 <_dtoa_r+0x4de>
 8014ce2:	4b91      	ldr	r3, [pc, #580]	; (8014f28 <_dtoa_r+0x620>)
 8014ce4:	2200      	movs	r2, #0
 8014ce6:	4650      	mov	r0, sl
 8014ce8:	4659      	mov	r1, fp
 8014cea:	f7eb fef7 	bl	8000adc <__aeabi_dcmplt>
 8014cee:	2800      	cmp	r0, #0
 8014cf0:	d079      	beq.n	8014de6 <_dtoa_r+0x4de>
 8014cf2:	9b03      	ldr	r3, [sp, #12]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d076      	beq.n	8014de6 <_dtoa_r+0x4de>
 8014cf8:	9b02      	ldr	r3, [sp, #8]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	dd36      	ble.n	8014d6c <_dtoa_r+0x464>
 8014cfe:	9b00      	ldr	r3, [sp, #0]
 8014d00:	4650      	mov	r0, sl
 8014d02:	4659      	mov	r1, fp
 8014d04:	1e5f      	subs	r7, r3, #1
 8014d06:	2200      	movs	r2, #0
 8014d08:	4b88      	ldr	r3, [pc, #544]	; (8014f2c <_dtoa_r+0x624>)
 8014d0a:	f7eb fc75 	bl	80005f8 <__aeabi_dmul>
 8014d0e:	9e02      	ldr	r6, [sp, #8]
 8014d10:	4682      	mov	sl, r0
 8014d12:	468b      	mov	fp, r1
 8014d14:	3501      	adds	r5, #1
 8014d16:	4628      	mov	r0, r5
 8014d18:	f7eb fc04 	bl	8000524 <__aeabi_i2d>
 8014d1c:	4652      	mov	r2, sl
 8014d1e:	465b      	mov	r3, fp
 8014d20:	f7eb fc6a 	bl	80005f8 <__aeabi_dmul>
 8014d24:	4b82      	ldr	r3, [pc, #520]	; (8014f30 <_dtoa_r+0x628>)
 8014d26:	2200      	movs	r2, #0
 8014d28:	f7eb fab0 	bl	800028c <__adddf3>
 8014d2c:	46d0      	mov	r8, sl
 8014d2e:	46d9      	mov	r9, fp
 8014d30:	4682      	mov	sl, r0
 8014d32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8014d36:	2e00      	cmp	r6, #0
 8014d38:	d158      	bne.n	8014dec <_dtoa_r+0x4e4>
 8014d3a:	4b7e      	ldr	r3, [pc, #504]	; (8014f34 <_dtoa_r+0x62c>)
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	4640      	mov	r0, r8
 8014d40:	4649      	mov	r1, r9
 8014d42:	f7eb faa1 	bl	8000288 <__aeabi_dsub>
 8014d46:	4652      	mov	r2, sl
 8014d48:	465b      	mov	r3, fp
 8014d4a:	4680      	mov	r8, r0
 8014d4c:	4689      	mov	r9, r1
 8014d4e:	f7eb fee3 	bl	8000b18 <__aeabi_dcmpgt>
 8014d52:	2800      	cmp	r0, #0
 8014d54:	f040 8295 	bne.w	8015282 <_dtoa_r+0x97a>
 8014d58:	4652      	mov	r2, sl
 8014d5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014d5e:	4640      	mov	r0, r8
 8014d60:	4649      	mov	r1, r9
 8014d62:	f7eb febb 	bl	8000adc <__aeabi_dcmplt>
 8014d66:	2800      	cmp	r0, #0
 8014d68:	f040 8289 	bne.w	801527e <_dtoa_r+0x976>
 8014d6c:	ec5b ab19 	vmov	sl, fp, d9
 8014d70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	f2c0 8148 	blt.w	8015008 <_dtoa_r+0x700>
 8014d78:	9a00      	ldr	r2, [sp, #0]
 8014d7a:	2a0e      	cmp	r2, #14
 8014d7c:	f300 8144 	bgt.w	8015008 <_dtoa_r+0x700>
 8014d80:	4b67      	ldr	r3, [pc, #412]	; (8014f20 <_dtoa_r+0x618>)
 8014d82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014d86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	f280 80d5 	bge.w	8014f3c <_dtoa_r+0x634>
 8014d92:	9b03      	ldr	r3, [sp, #12]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	f300 80d1 	bgt.w	8014f3c <_dtoa_r+0x634>
 8014d9a:	f040 826f 	bne.w	801527c <_dtoa_r+0x974>
 8014d9e:	4b65      	ldr	r3, [pc, #404]	; (8014f34 <_dtoa_r+0x62c>)
 8014da0:	2200      	movs	r2, #0
 8014da2:	4640      	mov	r0, r8
 8014da4:	4649      	mov	r1, r9
 8014da6:	f7eb fc27 	bl	80005f8 <__aeabi_dmul>
 8014daa:	4652      	mov	r2, sl
 8014dac:	465b      	mov	r3, fp
 8014dae:	f7eb fea9 	bl	8000b04 <__aeabi_dcmpge>
 8014db2:	9e03      	ldr	r6, [sp, #12]
 8014db4:	4637      	mov	r7, r6
 8014db6:	2800      	cmp	r0, #0
 8014db8:	f040 8245 	bne.w	8015246 <_dtoa_r+0x93e>
 8014dbc:	9d01      	ldr	r5, [sp, #4]
 8014dbe:	2331      	movs	r3, #49	; 0x31
 8014dc0:	f805 3b01 	strb.w	r3, [r5], #1
 8014dc4:	9b00      	ldr	r3, [sp, #0]
 8014dc6:	3301      	adds	r3, #1
 8014dc8:	9300      	str	r3, [sp, #0]
 8014dca:	e240      	b.n	801524e <_dtoa_r+0x946>
 8014dcc:	07f2      	lsls	r2, r6, #31
 8014dce:	d505      	bpl.n	8014ddc <_dtoa_r+0x4d4>
 8014dd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014dd4:	f7eb fc10 	bl	80005f8 <__aeabi_dmul>
 8014dd8:	3501      	adds	r5, #1
 8014dda:	2301      	movs	r3, #1
 8014ddc:	1076      	asrs	r6, r6, #1
 8014dde:	3708      	adds	r7, #8
 8014de0:	e777      	b.n	8014cd2 <_dtoa_r+0x3ca>
 8014de2:	2502      	movs	r5, #2
 8014de4:	e779      	b.n	8014cda <_dtoa_r+0x3d2>
 8014de6:	9f00      	ldr	r7, [sp, #0]
 8014de8:	9e03      	ldr	r6, [sp, #12]
 8014dea:	e794      	b.n	8014d16 <_dtoa_r+0x40e>
 8014dec:	9901      	ldr	r1, [sp, #4]
 8014dee:	4b4c      	ldr	r3, [pc, #304]	; (8014f20 <_dtoa_r+0x618>)
 8014df0:	4431      	add	r1, r6
 8014df2:	910d      	str	r1, [sp, #52]	; 0x34
 8014df4:	9908      	ldr	r1, [sp, #32]
 8014df6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014dfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014dfe:	2900      	cmp	r1, #0
 8014e00:	d043      	beq.n	8014e8a <_dtoa_r+0x582>
 8014e02:	494d      	ldr	r1, [pc, #308]	; (8014f38 <_dtoa_r+0x630>)
 8014e04:	2000      	movs	r0, #0
 8014e06:	f7eb fd21 	bl	800084c <__aeabi_ddiv>
 8014e0a:	4652      	mov	r2, sl
 8014e0c:	465b      	mov	r3, fp
 8014e0e:	f7eb fa3b 	bl	8000288 <__aeabi_dsub>
 8014e12:	9d01      	ldr	r5, [sp, #4]
 8014e14:	4682      	mov	sl, r0
 8014e16:	468b      	mov	fp, r1
 8014e18:	4649      	mov	r1, r9
 8014e1a:	4640      	mov	r0, r8
 8014e1c:	f7eb fe9c 	bl	8000b58 <__aeabi_d2iz>
 8014e20:	4606      	mov	r6, r0
 8014e22:	f7eb fb7f 	bl	8000524 <__aeabi_i2d>
 8014e26:	4602      	mov	r2, r0
 8014e28:	460b      	mov	r3, r1
 8014e2a:	4640      	mov	r0, r8
 8014e2c:	4649      	mov	r1, r9
 8014e2e:	f7eb fa2b 	bl	8000288 <__aeabi_dsub>
 8014e32:	3630      	adds	r6, #48	; 0x30
 8014e34:	f805 6b01 	strb.w	r6, [r5], #1
 8014e38:	4652      	mov	r2, sl
 8014e3a:	465b      	mov	r3, fp
 8014e3c:	4680      	mov	r8, r0
 8014e3e:	4689      	mov	r9, r1
 8014e40:	f7eb fe4c 	bl	8000adc <__aeabi_dcmplt>
 8014e44:	2800      	cmp	r0, #0
 8014e46:	d163      	bne.n	8014f10 <_dtoa_r+0x608>
 8014e48:	4642      	mov	r2, r8
 8014e4a:	464b      	mov	r3, r9
 8014e4c:	4936      	ldr	r1, [pc, #216]	; (8014f28 <_dtoa_r+0x620>)
 8014e4e:	2000      	movs	r0, #0
 8014e50:	f7eb fa1a 	bl	8000288 <__aeabi_dsub>
 8014e54:	4652      	mov	r2, sl
 8014e56:	465b      	mov	r3, fp
 8014e58:	f7eb fe40 	bl	8000adc <__aeabi_dcmplt>
 8014e5c:	2800      	cmp	r0, #0
 8014e5e:	f040 80b5 	bne.w	8014fcc <_dtoa_r+0x6c4>
 8014e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e64:	429d      	cmp	r5, r3
 8014e66:	d081      	beq.n	8014d6c <_dtoa_r+0x464>
 8014e68:	4b30      	ldr	r3, [pc, #192]	; (8014f2c <_dtoa_r+0x624>)
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	4650      	mov	r0, sl
 8014e6e:	4659      	mov	r1, fp
 8014e70:	f7eb fbc2 	bl	80005f8 <__aeabi_dmul>
 8014e74:	4b2d      	ldr	r3, [pc, #180]	; (8014f2c <_dtoa_r+0x624>)
 8014e76:	4682      	mov	sl, r0
 8014e78:	468b      	mov	fp, r1
 8014e7a:	4640      	mov	r0, r8
 8014e7c:	4649      	mov	r1, r9
 8014e7e:	2200      	movs	r2, #0
 8014e80:	f7eb fbba 	bl	80005f8 <__aeabi_dmul>
 8014e84:	4680      	mov	r8, r0
 8014e86:	4689      	mov	r9, r1
 8014e88:	e7c6      	b.n	8014e18 <_dtoa_r+0x510>
 8014e8a:	4650      	mov	r0, sl
 8014e8c:	4659      	mov	r1, fp
 8014e8e:	f7eb fbb3 	bl	80005f8 <__aeabi_dmul>
 8014e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e94:	9d01      	ldr	r5, [sp, #4]
 8014e96:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e98:	4682      	mov	sl, r0
 8014e9a:	468b      	mov	fp, r1
 8014e9c:	4649      	mov	r1, r9
 8014e9e:	4640      	mov	r0, r8
 8014ea0:	f7eb fe5a 	bl	8000b58 <__aeabi_d2iz>
 8014ea4:	4606      	mov	r6, r0
 8014ea6:	f7eb fb3d 	bl	8000524 <__aeabi_i2d>
 8014eaa:	3630      	adds	r6, #48	; 0x30
 8014eac:	4602      	mov	r2, r0
 8014eae:	460b      	mov	r3, r1
 8014eb0:	4640      	mov	r0, r8
 8014eb2:	4649      	mov	r1, r9
 8014eb4:	f7eb f9e8 	bl	8000288 <__aeabi_dsub>
 8014eb8:	f805 6b01 	strb.w	r6, [r5], #1
 8014ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ebe:	429d      	cmp	r5, r3
 8014ec0:	4680      	mov	r8, r0
 8014ec2:	4689      	mov	r9, r1
 8014ec4:	f04f 0200 	mov.w	r2, #0
 8014ec8:	d124      	bne.n	8014f14 <_dtoa_r+0x60c>
 8014eca:	4b1b      	ldr	r3, [pc, #108]	; (8014f38 <_dtoa_r+0x630>)
 8014ecc:	4650      	mov	r0, sl
 8014ece:	4659      	mov	r1, fp
 8014ed0:	f7eb f9dc 	bl	800028c <__adddf3>
 8014ed4:	4602      	mov	r2, r0
 8014ed6:	460b      	mov	r3, r1
 8014ed8:	4640      	mov	r0, r8
 8014eda:	4649      	mov	r1, r9
 8014edc:	f7eb fe1c 	bl	8000b18 <__aeabi_dcmpgt>
 8014ee0:	2800      	cmp	r0, #0
 8014ee2:	d173      	bne.n	8014fcc <_dtoa_r+0x6c4>
 8014ee4:	4652      	mov	r2, sl
 8014ee6:	465b      	mov	r3, fp
 8014ee8:	4913      	ldr	r1, [pc, #76]	; (8014f38 <_dtoa_r+0x630>)
 8014eea:	2000      	movs	r0, #0
 8014eec:	f7eb f9cc 	bl	8000288 <__aeabi_dsub>
 8014ef0:	4602      	mov	r2, r0
 8014ef2:	460b      	mov	r3, r1
 8014ef4:	4640      	mov	r0, r8
 8014ef6:	4649      	mov	r1, r9
 8014ef8:	f7eb fdf0 	bl	8000adc <__aeabi_dcmplt>
 8014efc:	2800      	cmp	r0, #0
 8014efe:	f43f af35 	beq.w	8014d6c <_dtoa_r+0x464>
 8014f02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014f04:	1e6b      	subs	r3, r5, #1
 8014f06:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014f0c:	2b30      	cmp	r3, #48	; 0x30
 8014f0e:	d0f8      	beq.n	8014f02 <_dtoa_r+0x5fa>
 8014f10:	9700      	str	r7, [sp, #0]
 8014f12:	e049      	b.n	8014fa8 <_dtoa_r+0x6a0>
 8014f14:	4b05      	ldr	r3, [pc, #20]	; (8014f2c <_dtoa_r+0x624>)
 8014f16:	f7eb fb6f 	bl	80005f8 <__aeabi_dmul>
 8014f1a:	4680      	mov	r8, r0
 8014f1c:	4689      	mov	r9, r1
 8014f1e:	e7bd      	b.n	8014e9c <_dtoa_r+0x594>
 8014f20:	0801abd0 	.word	0x0801abd0
 8014f24:	0801aba8 	.word	0x0801aba8
 8014f28:	3ff00000 	.word	0x3ff00000
 8014f2c:	40240000 	.word	0x40240000
 8014f30:	401c0000 	.word	0x401c0000
 8014f34:	40140000 	.word	0x40140000
 8014f38:	3fe00000 	.word	0x3fe00000
 8014f3c:	9d01      	ldr	r5, [sp, #4]
 8014f3e:	4656      	mov	r6, sl
 8014f40:	465f      	mov	r7, fp
 8014f42:	4642      	mov	r2, r8
 8014f44:	464b      	mov	r3, r9
 8014f46:	4630      	mov	r0, r6
 8014f48:	4639      	mov	r1, r7
 8014f4a:	f7eb fc7f 	bl	800084c <__aeabi_ddiv>
 8014f4e:	f7eb fe03 	bl	8000b58 <__aeabi_d2iz>
 8014f52:	4682      	mov	sl, r0
 8014f54:	f7eb fae6 	bl	8000524 <__aeabi_i2d>
 8014f58:	4642      	mov	r2, r8
 8014f5a:	464b      	mov	r3, r9
 8014f5c:	f7eb fb4c 	bl	80005f8 <__aeabi_dmul>
 8014f60:	4602      	mov	r2, r0
 8014f62:	460b      	mov	r3, r1
 8014f64:	4630      	mov	r0, r6
 8014f66:	4639      	mov	r1, r7
 8014f68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014f6c:	f7eb f98c 	bl	8000288 <__aeabi_dsub>
 8014f70:	f805 6b01 	strb.w	r6, [r5], #1
 8014f74:	9e01      	ldr	r6, [sp, #4]
 8014f76:	9f03      	ldr	r7, [sp, #12]
 8014f78:	1bae      	subs	r6, r5, r6
 8014f7a:	42b7      	cmp	r7, r6
 8014f7c:	4602      	mov	r2, r0
 8014f7e:	460b      	mov	r3, r1
 8014f80:	d135      	bne.n	8014fee <_dtoa_r+0x6e6>
 8014f82:	f7eb f983 	bl	800028c <__adddf3>
 8014f86:	4642      	mov	r2, r8
 8014f88:	464b      	mov	r3, r9
 8014f8a:	4606      	mov	r6, r0
 8014f8c:	460f      	mov	r7, r1
 8014f8e:	f7eb fdc3 	bl	8000b18 <__aeabi_dcmpgt>
 8014f92:	b9d0      	cbnz	r0, 8014fca <_dtoa_r+0x6c2>
 8014f94:	4642      	mov	r2, r8
 8014f96:	464b      	mov	r3, r9
 8014f98:	4630      	mov	r0, r6
 8014f9a:	4639      	mov	r1, r7
 8014f9c:	f7eb fd94 	bl	8000ac8 <__aeabi_dcmpeq>
 8014fa0:	b110      	cbz	r0, 8014fa8 <_dtoa_r+0x6a0>
 8014fa2:	f01a 0f01 	tst.w	sl, #1
 8014fa6:	d110      	bne.n	8014fca <_dtoa_r+0x6c2>
 8014fa8:	4620      	mov	r0, r4
 8014faa:	ee18 1a10 	vmov	r1, s16
 8014fae:	f000 fc2b 	bl	8015808 <_Bfree>
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	9800      	ldr	r0, [sp, #0]
 8014fb6:	702b      	strb	r3, [r5, #0]
 8014fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fba:	3001      	adds	r0, #1
 8014fbc:	6018      	str	r0, [r3, #0]
 8014fbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	f43f acf1 	beq.w	80149a8 <_dtoa_r+0xa0>
 8014fc6:	601d      	str	r5, [r3, #0]
 8014fc8:	e4ee      	b.n	80149a8 <_dtoa_r+0xa0>
 8014fca:	9f00      	ldr	r7, [sp, #0]
 8014fcc:	462b      	mov	r3, r5
 8014fce:	461d      	mov	r5, r3
 8014fd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014fd4:	2a39      	cmp	r2, #57	; 0x39
 8014fd6:	d106      	bne.n	8014fe6 <_dtoa_r+0x6de>
 8014fd8:	9a01      	ldr	r2, [sp, #4]
 8014fda:	429a      	cmp	r2, r3
 8014fdc:	d1f7      	bne.n	8014fce <_dtoa_r+0x6c6>
 8014fde:	9901      	ldr	r1, [sp, #4]
 8014fe0:	2230      	movs	r2, #48	; 0x30
 8014fe2:	3701      	adds	r7, #1
 8014fe4:	700a      	strb	r2, [r1, #0]
 8014fe6:	781a      	ldrb	r2, [r3, #0]
 8014fe8:	3201      	adds	r2, #1
 8014fea:	701a      	strb	r2, [r3, #0]
 8014fec:	e790      	b.n	8014f10 <_dtoa_r+0x608>
 8014fee:	4ba6      	ldr	r3, [pc, #664]	; (8015288 <_dtoa_r+0x980>)
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	f7eb fb01 	bl	80005f8 <__aeabi_dmul>
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	4606      	mov	r6, r0
 8014ffc:	460f      	mov	r7, r1
 8014ffe:	f7eb fd63 	bl	8000ac8 <__aeabi_dcmpeq>
 8015002:	2800      	cmp	r0, #0
 8015004:	d09d      	beq.n	8014f42 <_dtoa_r+0x63a>
 8015006:	e7cf      	b.n	8014fa8 <_dtoa_r+0x6a0>
 8015008:	9a08      	ldr	r2, [sp, #32]
 801500a:	2a00      	cmp	r2, #0
 801500c:	f000 80d7 	beq.w	80151be <_dtoa_r+0x8b6>
 8015010:	9a06      	ldr	r2, [sp, #24]
 8015012:	2a01      	cmp	r2, #1
 8015014:	f300 80ba 	bgt.w	801518c <_dtoa_r+0x884>
 8015018:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801501a:	2a00      	cmp	r2, #0
 801501c:	f000 80b2 	beq.w	8015184 <_dtoa_r+0x87c>
 8015020:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015024:	9e07      	ldr	r6, [sp, #28]
 8015026:	9d04      	ldr	r5, [sp, #16]
 8015028:	9a04      	ldr	r2, [sp, #16]
 801502a:	441a      	add	r2, r3
 801502c:	9204      	str	r2, [sp, #16]
 801502e:	9a05      	ldr	r2, [sp, #20]
 8015030:	2101      	movs	r1, #1
 8015032:	441a      	add	r2, r3
 8015034:	4620      	mov	r0, r4
 8015036:	9205      	str	r2, [sp, #20]
 8015038:	f000 fc9e 	bl	8015978 <__i2b>
 801503c:	4607      	mov	r7, r0
 801503e:	2d00      	cmp	r5, #0
 8015040:	dd0c      	ble.n	801505c <_dtoa_r+0x754>
 8015042:	9b05      	ldr	r3, [sp, #20]
 8015044:	2b00      	cmp	r3, #0
 8015046:	dd09      	ble.n	801505c <_dtoa_r+0x754>
 8015048:	42ab      	cmp	r3, r5
 801504a:	9a04      	ldr	r2, [sp, #16]
 801504c:	bfa8      	it	ge
 801504e:	462b      	movge	r3, r5
 8015050:	1ad2      	subs	r2, r2, r3
 8015052:	9204      	str	r2, [sp, #16]
 8015054:	9a05      	ldr	r2, [sp, #20]
 8015056:	1aed      	subs	r5, r5, r3
 8015058:	1ad3      	subs	r3, r2, r3
 801505a:	9305      	str	r3, [sp, #20]
 801505c:	9b07      	ldr	r3, [sp, #28]
 801505e:	b31b      	cbz	r3, 80150a8 <_dtoa_r+0x7a0>
 8015060:	9b08      	ldr	r3, [sp, #32]
 8015062:	2b00      	cmp	r3, #0
 8015064:	f000 80af 	beq.w	80151c6 <_dtoa_r+0x8be>
 8015068:	2e00      	cmp	r6, #0
 801506a:	dd13      	ble.n	8015094 <_dtoa_r+0x78c>
 801506c:	4639      	mov	r1, r7
 801506e:	4632      	mov	r2, r6
 8015070:	4620      	mov	r0, r4
 8015072:	f000 fd41 	bl	8015af8 <__pow5mult>
 8015076:	ee18 2a10 	vmov	r2, s16
 801507a:	4601      	mov	r1, r0
 801507c:	4607      	mov	r7, r0
 801507e:	4620      	mov	r0, r4
 8015080:	f000 fc90 	bl	80159a4 <__multiply>
 8015084:	ee18 1a10 	vmov	r1, s16
 8015088:	4680      	mov	r8, r0
 801508a:	4620      	mov	r0, r4
 801508c:	f000 fbbc 	bl	8015808 <_Bfree>
 8015090:	ee08 8a10 	vmov	s16, r8
 8015094:	9b07      	ldr	r3, [sp, #28]
 8015096:	1b9a      	subs	r2, r3, r6
 8015098:	d006      	beq.n	80150a8 <_dtoa_r+0x7a0>
 801509a:	ee18 1a10 	vmov	r1, s16
 801509e:	4620      	mov	r0, r4
 80150a0:	f000 fd2a 	bl	8015af8 <__pow5mult>
 80150a4:	ee08 0a10 	vmov	s16, r0
 80150a8:	2101      	movs	r1, #1
 80150aa:	4620      	mov	r0, r4
 80150ac:	f000 fc64 	bl	8015978 <__i2b>
 80150b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	4606      	mov	r6, r0
 80150b6:	f340 8088 	ble.w	80151ca <_dtoa_r+0x8c2>
 80150ba:	461a      	mov	r2, r3
 80150bc:	4601      	mov	r1, r0
 80150be:	4620      	mov	r0, r4
 80150c0:	f000 fd1a 	bl	8015af8 <__pow5mult>
 80150c4:	9b06      	ldr	r3, [sp, #24]
 80150c6:	2b01      	cmp	r3, #1
 80150c8:	4606      	mov	r6, r0
 80150ca:	f340 8081 	ble.w	80151d0 <_dtoa_r+0x8c8>
 80150ce:	f04f 0800 	mov.w	r8, #0
 80150d2:	6933      	ldr	r3, [r6, #16]
 80150d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80150d8:	6918      	ldr	r0, [r3, #16]
 80150da:	f000 fbfd 	bl	80158d8 <__hi0bits>
 80150de:	f1c0 0020 	rsb	r0, r0, #32
 80150e2:	9b05      	ldr	r3, [sp, #20]
 80150e4:	4418      	add	r0, r3
 80150e6:	f010 001f 	ands.w	r0, r0, #31
 80150ea:	f000 8092 	beq.w	8015212 <_dtoa_r+0x90a>
 80150ee:	f1c0 0320 	rsb	r3, r0, #32
 80150f2:	2b04      	cmp	r3, #4
 80150f4:	f340 808a 	ble.w	801520c <_dtoa_r+0x904>
 80150f8:	f1c0 001c 	rsb	r0, r0, #28
 80150fc:	9b04      	ldr	r3, [sp, #16]
 80150fe:	4403      	add	r3, r0
 8015100:	9304      	str	r3, [sp, #16]
 8015102:	9b05      	ldr	r3, [sp, #20]
 8015104:	4403      	add	r3, r0
 8015106:	4405      	add	r5, r0
 8015108:	9305      	str	r3, [sp, #20]
 801510a:	9b04      	ldr	r3, [sp, #16]
 801510c:	2b00      	cmp	r3, #0
 801510e:	dd07      	ble.n	8015120 <_dtoa_r+0x818>
 8015110:	ee18 1a10 	vmov	r1, s16
 8015114:	461a      	mov	r2, r3
 8015116:	4620      	mov	r0, r4
 8015118:	f000 fd48 	bl	8015bac <__lshift>
 801511c:	ee08 0a10 	vmov	s16, r0
 8015120:	9b05      	ldr	r3, [sp, #20]
 8015122:	2b00      	cmp	r3, #0
 8015124:	dd05      	ble.n	8015132 <_dtoa_r+0x82a>
 8015126:	4631      	mov	r1, r6
 8015128:	461a      	mov	r2, r3
 801512a:	4620      	mov	r0, r4
 801512c:	f000 fd3e 	bl	8015bac <__lshift>
 8015130:	4606      	mov	r6, r0
 8015132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015134:	2b00      	cmp	r3, #0
 8015136:	d06e      	beq.n	8015216 <_dtoa_r+0x90e>
 8015138:	ee18 0a10 	vmov	r0, s16
 801513c:	4631      	mov	r1, r6
 801513e:	f000 fda5 	bl	8015c8c <__mcmp>
 8015142:	2800      	cmp	r0, #0
 8015144:	da67      	bge.n	8015216 <_dtoa_r+0x90e>
 8015146:	9b00      	ldr	r3, [sp, #0]
 8015148:	3b01      	subs	r3, #1
 801514a:	ee18 1a10 	vmov	r1, s16
 801514e:	9300      	str	r3, [sp, #0]
 8015150:	220a      	movs	r2, #10
 8015152:	2300      	movs	r3, #0
 8015154:	4620      	mov	r0, r4
 8015156:	f000 fb79 	bl	801584c <__multadd>
 801515a:	9b08      	ldr	r3, [sp, #32]
 801515c:	ee08 0a10 	vmov	s16, r0
 8015160:	2b00      	cmp	r3, #0
 8015162:	f000 81b1 	beq.w	80154c8 <_dtoa_r+0xbc0>
 8015166:	2300      	movs	r3, #0
 8015168:	4639      	mov	r1, r7
 801516a:	220a      	movs	r2, #10
 801516c:	4620      	mov	r0, r4
 801516e:	f000 fb6d 	bl	801584c <__multadd>
 8015172:	9b02      	ldr	r3, [sp, #8]
 8015174:	2b00      	cmp	r3, #0
 8015176:	4607      	mov	r7, r0
 8015178:	f300 808e 	bgt.w	8015298 <_dtoa_r+0x990>
 801517c:	9b06      	ldr	r3, [sp, #24]
 801517e:	2b02      	cmp	r3, #2
 8015180:	dc51      	bgt.n	8015226 <_dtoa_r+0x91e>
 8015182:	e089      	b.n	8015298 <_dtoa_r+0x990>
 8015184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015186:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801518a:	e74b      	b.n	8015024 <_dtoa_r+0x71c>
 801518c:	9b03      	ldr	r3, [sp, #12]
 801518e:	1e5e      	subs	r6, r3, #1
 8015190:	9b07      	ldr	r3, [sp, #28]
 8015192:	42b3      	cmp	r3, r6
 8015194:	bfbf      	itttt	lt
 8015196:	9b07      	ldrlt	r3, [sp, #28]
 8015198:	9607      	strlt	r6, [sp, #28]
 801519a:	1af2      	sublt	r2, r6, r3
 801519c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801519e:	bfb6      	itet	lt
 80151a0:	189b      	addlt	r3, r3, r2
 80151a2:	1b9e      	subge	r6, r3, r6
 80151a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80151a6:	9b03      	ldr	r3, [sp, #12]
 80151a8:	bfb8      	it	lt
 80151aa:	2600      	movlt	r6, #0
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	bfb7      	itett	lt
 80151b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80151b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80151b8:	1a9d      	sublt	r5, r3, r2
 80151ba:	2300      	movlt	r3, #0
 80151bc:	e734      	b.n	8015028 <_dtoa_r+0x720>
 80151be:	9e07      	ldr	r6, [sp, #28]
 80151c0:	9d04      	ldr	r5, [sp, #16]
 80151c2:	9f08      	ldr	r7, [sp, #32]
 80151c4:	e73b      	b.n	801503e <_dtoa_r+0x736>
 80151c6:	9a07      	ldr	r2, [sp, #28]
 80151c8:	e767      	b.n	801509a <_dtoa_r+0x792>
 80151ca:	9b06      	ldr	r3, [sp, #24]
 80151cc:	2b01      	cmp	r3, #1
 80151ce:	dc18      	bgt.n	8015202 <_dtoa_r+0x8fa>
 80151d0:	f1ba 0f00 	cmp.w	sl, #0
 80151d4:	d115      	bne.n	8015202 <_dtoa_r+0x8fa>
 80151d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80151da:	b993      	cbnz	r3, 8015202 <_dtoa_r+0x8fa>
 80151dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80151e0:	0d1b      	lsrs	r3, r3, #20
 80151e2:	051b      	lsls	r3, r3, #20
 80151e4:	b183      	cbz	r3, 8015208 <_dtoa_r+0x900>
 80151e6:	9b04      	ldr	r3, [sp, #16]
 80151e8:	3301      	adds	r3, #1
 80151ea:	9304      	str	r3, [sp, #16]
 80151ec:	9b05      	ldr	r3, [sp, #20]
 80151ee:	3301      	adds	r3, #1
 80151f0:	9305      	str	r3, [sp, #20]
 80151f2:	f04f 0801 	mov.w	r8, #1
 80151f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	f47f af6a 	bne.w	80150d2 <_dtoa_r+0x7ca>
 80151fe:	2001      	movs	r0, #1
 8015200:	e76f      	b.n	80150e2 <_dtoa_r+0x7da>
 8015202:	f04f 0800 	mov.w	r8, #0
 8015206:	e7f6      	b.n	80151f6 <_dtoa_r+0x8ee>
 8015208:	4698      	mov	r8, r3
 801520a:	e7f4      	b.n	80151f6 <_dtoa_r+0x8ee>
 801520c:	f43f af7d 	beq.w	801510a <_dtoa_r+0x802>
 8015210:	4618      	mov	r0, r3
 8015212:	301c      	adds	r0, #28
 8015214:	e772      	b.n	80150fc <_dtoa_r+0x7f4>
 8015216:	9b03      	ldr	r3, [sp, #12]
 8015218:	2b00      	cmp	r3, #0
 801521a:	dc37      	bgt.n	801528c <_dtoa_r+0x984>
 801521c:	9b06      	ldr	r3, [sp, #24]
 801521e:	2b02      	cmp	r3, #2
 8015220:	dd34      	ble.n	801528c <_dtoa_r+0x984>
 8015222:	9b03      	ldr	r3, [sp, #12]
 8015224:	9302      	str	r3, [sp, #8]
 8015226:	9b02      	ldr	r3, [sp, #8]
 8015228:	b96b      	cbnz	r3, 8015246 <_dtoa_r+0x93e>
 801522a:	4631      	mov	r1, r6
 801522c:	2205      	movs	r2, #5
 801522e:	4620      	mov	r0, r4
 8015230:	f000 fb0c 	bl	801584c <__multadd>
 8015234:	4601      	mov	r1, r0
 8015236:	4606      	mov	r6, r0
 8015238:	ee18 0a10 	vmov	r0, s16
 801523c:	f000 fd26 	bl	8015c8c <__mcmp>
 8015240:	2800      	cmp	r0, #0
 8015242:	f73f adbb 	bgt.w	8014dbc <_dtoa_r+0x4b4>
 8015246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015248:	9d01      	ldr	r5, [sp, #4]
 801524a:	43db      	mvns	r3, r3
 801524c:	9300      	str	r3, [sp, #0]
 801524e:	f04f 0800 	mov.w	r8, #0
 8015252:	4631      	mov	r1, r6
 8015254:	4620      	mov	r0, r4
 8015256:	f000 fad7 	bl	8015808 <_Bfree>
 801525a:	2f00      	cmp	r7, #0
 801525c:	f43f aea4 	beq.w	8014fa8 <_dtoa_r+0x6a0>
 8015260:	f1b8 0f00 	cmp.w	r8, #0
 8015264:	d005      	beq.n	8015272 <_dtoa_r+0x96a>
 8015266:	45b8      	cmp	r8, r7
 8015268:	d003      	beq.n	8015272 <_dtoa_r+0x96a>
 801526a:	4641      	mov	r1, r8
 801526c:	4620      	mov	r0, r4
 801526e:	f000 facb 	bl	8015808 <_Bfree>
 8015272:	4639      	mov	r1, r7
 8015274:	4620      	mov	r0, r4
 8015276:	f000 fac7 	bl	8015808 <_Bfree>
 801527a:	e695      	b.n	8014fa8 <_dtoa_r+0x6a0>
 801527c:	2600      	movs	r6, #0
 801527e:	4637      	mov	r7, r6
 8015280:	e7e1      	b.n	8015246 <_dtoa_r+0x93e>
 8015282:	9700      	str	r7, [sp, #0]
 8015284:	4637      	mov	r7, r6
 8015286:	e599      	b.n	8014dbc <_dtoa_r+0x4b4>
 8015288:	40240000 	.word	0x40240000
 801528c:	9b08      	ldr	r3, [sp, #32]
 801528e:	2b00      	cmp	r3, #0
 8015290:	f000 80ca 	beq.w	8015428 <_dtoa_r+0xb20>
 8015294:	9b03      	ldr	r3, [sp, #12]
 8015296:	9302      	str	r3, [sp, #8]
 8015298:	2d00      	cmp	r5, #0
 801529a:	dd05      	ble.n	80152a8 <_dtoa_r+0x9a0>
 801529c:	4639      	mov	r1, r7
 801529e:	462a      	mov	r2, r5
 80152a0:	4620      	mov	r0, r4
 80152a2:	f000 fc83 	bl	8015bac <__lshift>
 80152a6:	4607      	mov	r7, r0
 80152a8:	f1b8 0f00 	cmp.w	r8, #0
 80152ac:	d05b      	beq.n	8015366 <_dtoa_r+0xa5e>
 80152ae:	6879      	ldr	r1, [r7, #4]
 80152b0:	4620      	mov	r0, r4
 80152b2:	f000 fa69 	bl	8015788 <_Balloc>
 80152b6:	4605      	mov	r5, r0
 80152b8:	b928      	cbnz	r0, 80152c6 <_dtoa_r+0x9be>
 80152ba:	4b87      	ldr	r3, [pc, #540]	; (80154d8 <_dtoa_r+0xbd0>)
 80152bc:	4602      	mov	r2, r0
 80152be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80152c2:	f7ff bb3b 	b.w	801493c <_dtoa_r+0x34>
 80152c6:	693a      	ldr	r2, [r7, #16]
 80152c8:	3202      	adds	r2, #2
 80152ca:	0092      	lsls	r2, r2, #2
 80152cc:	f107 010c 	add.w	r1, r7, #12
 80152d0:	300c      	adds	r0, #12
 80152d2:	f7fe fb92 	bl	80139fa <memcpy>
 80152d6:	2201      	movs	r2, #1
 80152d8:	4629      	mov	r1, r5
 80152da:	4620      	mov	r0, r4
 80152dc:	f000 fc66 	bl	8015bac <__lshift>
 80152e0:	9b01      	ldr	r3, [sp, #4]
 80152e2:	f103 0901 	add.w	r9, r3, #1
 80152e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80152ea:	4413      	add	r3, r2
 80152ec:	9305      	str	r3, [sp, #20]
 80152ee:	f00a 0301 	and.w	r3, sl, #1
 80152f2:	46b8      	mov	r8, r7
 80152f4:	9304      	str	r3, [sp, #16]
 80152f6:	4607      	mov	r7, r0
 80152f8:	4631      	mov	r1, r6
 80152fa:	ee18 0a10 	vmov	r0, s16
 80152fe:	f7ff fa75 	bl	80147ec <quorem>
 8015302:	4641      	mov	r1, r8
 8015304:	9002      	str	r0, [sp, #8]
 8015306:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801530a:	ee18 0a10 	vmov	r0, s16
 801530e:	f000 fcbd 	bl	8015c8c <__mcmp>
 8015312:	463a      	mov	r2, r7
 8015314:	9003      	str	r0, [sp, #12]
 8015316:	4631      	mov	r1, r6
 8015318:	4620      	mov	r0, r4
 801531a:	f000 fcd3 	bl	8015cc4 <__mdiff>
 801531e:	68c2      	ldr	r2, [r0, #12]
 8015320:	f109 3bff 	add.w	fp, r9, #4294967295
 8015324:	4605      	mov	r5, r0
 8015326:	bb02      	cbnz	r2, 801536a <_dtoa_r+0xa62>
 8015328:	4601      	mov	r1, r0
 801532a:	ee18 0a10 	vmov	r0, s16
 801532e:	f000 fcad 	bl	8015c8c <__mcmp>
 8015332:	4602      	mov	r2, r0
 8015334:	4629      	mov	r1, r5
 8015336:	4620      	mov	r0, r4
 8015338:	9207      	str	r2, [sp, #28]
 801533a:	f000 fa65 	bl	8015808 <_Bfree>
 801533e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015342:	ea43 0102 	orr.w	r1, r3, r2
 8015346:	9b04      	ldr	r3, [sp, #16]
 8015348:	430b      	orrs	r3, r1
 801534a:	464d      	mov	r5, r9
 801534c:	d10f      	bne.n	801536e <_dtoa_r+0xa66>
 801534e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015352:	d02a      	beq.n	80153aa <_dtoa_r+0xaa2>
 8015354:	9b03      	ldr	r3, [sp, #12]
 8015356:	2b00      	cmp	r3, #0
 8015358:	dd02      	ble.n	8015360 <_dtoa_r+0xa58>
 801535a:	9b02      	ldr	r3, [sp, #8]
 801535c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015360:	f88b a000 	strb.w	sl, [fp]
 8015364:	e775      	b.n	8015252 <_dtoa_r+0x94a>
 8015366:	4638      	mov	r0, r7
 8015368:	e7ba      	b.n	80152e0 <_dtoa_r+0x9d8>
 801536a:	2201      	movs	r2, #1
 801536c:	e7e2      	b.n	8015334 <_dtoa_r+0xa2c>
 801536e:	9b03      	ldr	r3, [sp, #12]
 8015370:	2b00      	cmp	r3, #0
 8015372:	db04      	blt.n	801537e <_dtoa_r+0xa76>
 8015374:	9906      	ldr	r1, [sp, #24]
 8015376:	430b      	orrs	r3, r1
 8015378:	9904      	ldr	r1, [sp, #16]
 801537a:	430b      	orrs	r3, r1
 801537c:	d122      	bne.n	80153c4 <_dtoa_r+0xabc>
 801537e:	2a00      	cmp	r2, #0
 8015380:	ddee      	ble.n	8015360 <_dtoa_r+0xa58>
 8015382:	ee18 1a10 	vmov	r1, s16
 8015386:	2201      	movs	r2, #1
 8015388:	4620      	mov	r0, r4
 801538a:	f000 fc0f 	bl	8015bac <__lshift>
 801538e:	4631      	mov	r1, r6
 8015390:	ee08 0a10 	vmov	s16, r0
 8015394:	f000 fc7a 	bl	8015c8c <__mcmp>
 8015398:	2800      	cmp	r0, #0
 801539a:	dc03      	bgt.n	80153a4 <_dtoa_r+0xa9c>
 801539c:	d1e0      	bne.n	8015360 <_dtoa_r+0xa58>
 801539e:	f01a 0f01 	tst.w	sl, #1
 80153a2:	d0dd      	beq.n	8015360 <_dtoa_r+0xa58>
 80153a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80153a8:	d1d7      	bne.n	801535a <_dtoa_r+0xa52>
 80153aa:	2339      	movs	r3, #57	; 0x39
 80153ac:	f88b 3000 	strb.w	r3, [fp]
 80153b0:	462b      	mov	r3, r5
 80153b2:	461d      	mov	r5, r3
 80153b4:	3b01      	subs	r3, #1
 80153b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80153ba:	2a39      	cmp	r2, #57	; 0x39
 80153bc:	d071      	beq.n	80154a2 <_dtoa_r+0xb9a>
 80153be:	3201      	adds	r2, #1
 80153c0:	701a      	strb	r2, [r3, #0]
 80153c2:	e746      	b.n	8015252 <_dtoa_r+0x94a>
 80153c4:	2a00      	cmp	r2, #0
 80153c6:	dd07      	ble.n	80153d8 <_dtoa_r+0xad0>
 80153c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80153cc:	d0ed      	beq.n	80153aa <_dtoa_r+0xaa2>
 80153ce:	f10a 0301 	add.w	r3, sl, #1
 80153d2:	f88b 3000 	strb.w	r3, [fp]
 80153d6:	e73c      	b.n	8015252 <_dtoa_r+0x94a>
 80153d8:	9b05      	ldr	r3, [sp, #20]
 80153da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80153de:	4599      	cmp	r9, r3
 80153e0:	d047      	beq.n	8015472 <_dtoa_r+0xb6a>
 80153e2:	ee18 1a10 	vmov	r1, s16
 80153e6:	2300      	movs	r3, #0
 80153e8:	220a      	movs	r2, #10
 80153ea:	4620      	mov	r0, r4
 80153ec:	f000 fa2e 	bl	801584c <__multadd>
 80153f0:	45b8      	cmp	r8, r7
 80153f2:	ee08 0a10 	vmov	s16, r0
 80153f6:	f04f 0300 	mov.w	r3, #0
 80153fa:	f04f 020a 	mov.w	r2, #10
 80153fe:	4641      	mov	r1, r8
 8015400:	4620      	mov	r0, r4
 8015402:	d106      	bne.n	8015412 <_dtoa_r+0xb0a>
 8015404:	f000 fa22 	bl	801584c <__multadd>
 8015408:	4680      	mov	r8, r0
 801540a:	4607      	mov	r7, r0
 801540c:	f109 0901 	add.w	r9, r9, #1
 8015410:	e772      	b.n	80152f8 <_dtoa_r+0x9f0>
 8015412:	f000 fa1b 	bl	801584c <__multadd>
 8015416:	4639      	mov	r1, r7
 8015418:	4680      	mov	r8, r0
 801541a:	2300      	movs	r3, #0
 801541c:	220a      	movs	r2, #10
 801541e:	4620      	mov	r0, r4
 8015420:	f000 fa14 	bl	801584c <__multadd>
 8015424:	4607      	mov	r7, r0
 8015426:	e7f1      	b.n	801540c <_dtoa_r+0xb04>
 8015428:	9b03      	ldr	r3, [sp, #12]
 801542a:	9302      	str	r3, [sp, #8]
 801542c:	9d01      	ldr	r5, [sp, #4]
 801542e:	ee18 0a10 	vmov	r0, s16
 8015432:	4631      	mov	r1, r6
 8015434:	f7ff f9da 	bl	80147ec <quorem>
 8015438:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801543c:	9b01      	ldr	r3, [sp, #4]
 801543e:	f805 ab01 	strb.w	sl, [r5], #1
 8015442:	1aea      	subs	r2, r5, r3
 8015444:	9b02      	ldr	r3, [sp, #8]
 8015446:	4293      	cmp	r3, r2
 8015448:	dd09      	ble.n	801545e <_dtoa_r+0xb56>
 801544a:	ee18 1a10 	vmov	r1, s16
 801544e:	2300      	movs	r3, #0
 8015450:	220a      	movs	r2, #10
 8015452:	4620      	mov	r0, r4
 8015454:	f000 f9fa 	bl	801584c <__multadd>
 8015458:	ee08 0a10 	vmov	s16, r0
 801545c:	e7e7      	b.n	801542e <_dtoa_r+0xb26>
 801545e:	9b02      	ldr	r3, [sp, #8]
 8015460:	2b00      	cmp	r3, #0
 8015462:	bfc8      	it	gt
 8015464:	461d      	movgt	r5, r3
 8015466:	9b01      	ldr	r3, [sp, #4]
 8015468:	bfd8      	it	le
 801546a:	2501      	movle	r5, #1
 801546c:	441d      	add	r5, r3
 801546e:	f04f 0800 	mov.w	r8, #0
 8015472:	ee18 1a10 	vmov	r1, s16
 8015476:	2201      	movs	r2, #1
 8015478:	4620      	mov	r0, r4
 801547a:	f000 fb97 	bl	8015bac <__lshift>
 801547e:	4631      	mov	r1, r6
 8015480:	ee08 0a10 	vmov	s16, r0
 8015484:	f000 fc02 	bl	8015c8c <__mcmp>
 8015488:	2800      	cmp	r0, #0
 801548a:	dc91      	bgt.n	80153b0 <_dtoa_r+0xaa8>
 801548c:	d102      	bne.n	8015494 <_dtoa_r+0xb8c>
 801548e:	f01a 0f01 	tst.w	sl, #1
 8015492:	d18d      	bne.n	80153b0 <_dtoa_r+0xaa8>
 8015494:	462b      	mov	r3, r5
 8015496:	461d      	mov	r5, r3
 8015498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801549c:	2a30      	cmp	r2, #48	; 0x30
 801549e:	d0fa      	beq.n	8015496 <_dtoa_r+0xb8e>
 80154a0:	e6d7      	b.n	8015252 <_dtoa_r+0x94a>
 80154a2:	9a01      	ldr	r2, [sp, #4]
 80154a4:	429a      	cmp	r2, r3
 80154a6:	d184      	bne.n	80153b2 <_dtoa_r+0xaaa>
 80154a8:	9b00      	ldr	r3, [sp, #0]
 80154aa:	3301      	adds	r3, #1
 80154ac:	9300      	str	r3, [sp, #0]
 80154ae:	2331      	movs	r3, #49	; 0x31
 80154b0:	7013      	strb	r3, [r2, #0]
 80154b2:	e6ce      	b.n	8015252 <_dtoa_r+0x94a>
 80154b4:	4b09      	ldr	r3, [pc, #36]	; (80154dc <_dtoa_r+0xbd4>)
 80154b6:	f7ff ba95 	b.w	80149e4 <_dtoa_r+0xdc>
 80154ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80154bc:	2b00      	cmp	r3, #0
 80154be:	f47f aa6e 	bne.w	801499e <_dtoa_r+0x96>
 80154c2:	4b07      	ldr	r3, [pc, #28]	; (80154e0 <_dtoa_r+0xbd8>)
 80154c4:	f7ff ba8e 	b.w	80149e4 <_dtoa_r+0xdc>
 80154c8:	9b02      	ldr	r3, [sp, #8]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	dcae      	bgt.n	801542c <_dtoa_r+0xb24>
 80154ce:	9b06      	ldr	r3, [sp, #24]
 80154d0:	2b02      	cmp	r3, #2
 80154d2:	f73f aea8 	bgt.w	8015226 <_dtoa_r+0x91e>
 80154d6:	e7a9      	b.n	801542c <_dtoa_r+0xb24>
 80154d8:	0801ab37 	.word	0x0801ab37
 80154dc:	0801aa94 	.word	0x0801aa94
 80154e0:	0801aab8 	.word	0x0801aab8

080154e4 <__sflush_r>:
 80154e4:	898a      	ldrh	r2, [r1, #12]
 80154e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154ea:	4605      	mov	r5, r0
 80154ec:	0710      	lsls	r0, r2, #28
 80154ee:	460c      	mov	r4, r1
 80154f0:	d458      	bmi.n	80155a4 <__sflush_r+0xc0>
 80154f2:	684b      	ldr	r3, [r1, #4]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	dc05      	bgt.n	8015504 <__sflush_r+0x20>
 80154f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	dc02      	bgt.n	8015504 <__sflush_r+0x20>
 80154fe:	2000      	movs	r0, #0
 8015500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015504:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015506:	2e00      	cmp	r6, #0
 8015508:	d0f9      	beq.n	80154fe <__sflush_r+0x1a>
 801550a:	2300      	movs	r3, #0
 801550c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015510:	682f      	ldr	r7, [r5, #0]
 8015512:	602b      	str	r3, [r5, #0]
 8015514:	d032      	beq.n	801557c <__sflush_r+0x98>
 8015516:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015518:	89a3      	ldrh	r3, [r4, #12]
 801551a:	075a      	lsls	r2, r3, #29
 801551c:	d505      	bpl.n	801552a <__sflush_r+0x46>
 801551e:	6863      	ldr	r3, [r4, #4]
 8015520:	1ac0      	subs	r0, r0, r3
 8015522:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015524:	b10b      	cbz	r3, 801552a <__sflush_r+0x46>
 8015526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015528:	1ac0      	subs	r0, r0, r3
 801552a:	2300      	movs	r3, #0
 801552c:	4602      	mov	r2, r0
 801552e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015530:	6a21      	ldr	r1, [r4, #32]
 8015532:	4628      	mov	r0, r5
 8015534:	47b0      	blx	r6
 8015536:	1c43      	adds	r3, r0, #1
 8015538:	89a3      	ldrh	r3, [r4, #12]
 801553a:	d106      	bne.n	801554a <__sflush_r+0x66>
 801553c:	6829      	ldr	r1, [r5, #0]
 801553e:	291d      	cmp	r1, #29
 8015540:	d82c      	bhi.n	801559c <__sflush_r+0xb8>
 8015542:	4a2a      	ldr	r2, [pc, #168]	; (80155ec <__sflush_r+0x108>)
 8015544:	40ca      	lsrs	r2, r1
 8015546:	07d6      	lsls	r6, r2, #31
 8015548:	d528      	bpl.n	801559c <__sflush_r+0xb8>
 801554a:	2200      	movs	r2, #0
 801554c:	6062      	str	r2, [r4, #4]
 801554e:	04d9      	lsls	r1, r3, #19
 8015550:	6922      	ldr	r2, [r4, #16]
 8015552:	6022      	str	r2, [r4, #0]
 8015554:	d504      	bpl.n	8015560 <__sflush_r+0x7c>
 8015556:	1c42      	adds	r2, r0, #1
 8015558:	d101      	bne.n	801555e <__sflush_r+0x7a>
 801555a:	682b      	ldr	r3, [r5, #0]
 801555c:	b903      	cbnz	r3, 8015560 <__sflush_r+0x7c>
 801555e:	6560      	str	r0, [r4, #84]	; 0x54
 8015560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015562:	602f      	str	r7, [r5, #0]
 8015564:	2900      	cmp	r1, #0
 8015566:	d0ca      	beq.n	80154fe <__sflush_r+0x1a>
 8015568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801556c:	4299      	cmp	r1, r3
 801556e:	d002      	beq.n	8015576 <__sflush_r+0x92>
 8015570:	4628      	mov	r0, r5
 8015572:	f000 fca3 	bl	8015ebc <_free_r>
 8015576:	2000      	movs	r0, #0
 8015578:	6360      	str	r0, [r4, #52]	; 0x34
 801557a:	e7c1      	b.n	8015500 <__sflush_r+0x1c>
 801557c:	6a21      	ldr	r1, [r4, #32]
 801557e:	2301      	movs	r3, #1
 8015580:	4628      	mov	r0, r5
 8015582:	47b0      	blx	r6
 8015584:	1c41      	adds	r1, r0, #1
 8015586:	d1c7      	bne.n	8015518 <__sflush_r+0x34>
 8015588:	682b      	ldr	r3, [r5, #0]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d0c4      	beq.n	8015518 <__sflush_r+0x34>
 801558e:	2b1d      	cmp	r3, #29
 8015590:	d001      	beq.n	8015596 <__sflush_r+0xb2>
 8015592:	2b16      	cmp	r3, #22
 8015594:	d101      	bne.n	801559a <__sflush_r+0xb6>
 8015596:	602f      	str	r7, [r5, #0]
 8015598:	e7b1      	b.n	80154fe <__sflush_r+0x1a>
 801559a:	89a3      	ldrh	r3, [r4, #12]
 801559c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155a0:	81a3      	strh	r3, [r4, #12]
 80155a2:	e7ad      	b.n	8015500 <__sflush_r+0x1c>
 80155a4:	690f      	ldr	r7, [r1, #16]
 80155a6:	2f00      	cmp	r7, #0
 80155a8:	d0a9      	beq.n	80154fe <__sflush_r+0x1a>
 80155aa:	0793      	lsls	r3, r2, #30
 80155ac:	680e      	ldr	r6, [r1, #0]
 80155ae:	bf08      	it	eq
 80155b0:	694b      	ldreq	r3, [r1, #20]
 80155b2:	600f      	str	r7, [r1, #0]
 80155b4:	bf18      	it	ne
 80155b6:	2300      	movne	r3, #0
 80155b8:	eba6 0807 	sub.w	r8, r6, r7
 80155bc:	608b      	str	r3, [r1, #8]
 80155be:	f1b8 0f00 	cmp.w	r8, #0
 80155c2:	dd9c      	ble.n	80154fe <__sflush_r+0x1a>
 80155c4:	6a21      	ldr	r1, [r4, #32]
 80155c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80155c8:	4643      	mov	r3, r8
 80155ca:	463a      	mov	r2, r7
 80155cc:	4628      	mov	r0, r5
 80155ce:	47b0      	blx	r6
 80155d0:	2800      	cmp	r0, #0
 80155d2:	dc06      	bgt.n	80155e2 <__sflush_r+0xfe>
 80155d4:	89a3      	ldrh	r3, [r4, #12]
 80155d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155da:	81a3      	strh	r3, [r4, #12]
 80155dc:	f04f 30ff 	mov.w	r0, #4294967295
 80155e0:	e78e      	b.n	8015500 <__sflush_r+0x1c>
 80155e2:	4407      	add	r7, r0
 80155e4:	eba8 0800 	sub.w	r8, r8, r0
 80155e8:	e7e9      	b.n	80155be <__sflush_r+0xda>
 80155ea:	bf00      	nop
 80155ec:	20400001 	.word	0x20400001

080155f0 <_fflush_r>:
 80155f0:	b538      	push	{r3, r4, r5, lr}
 80155f2:	690b      	ldr	r3, [r1, #16]
 80155f4:	4605      	mov	r5, r0
 80155f6:	460c      	mov	r4, r1
 80155f8:	b913      	cbnz	r3, 8015600 <_fflush_r+0x10>
 80155fa:	2500      	movs	r5, #0
 80155fc:	4628      	mov	r0, r5
 80155fe:	bd38      	pop	{r3, r4, r5, pc}
 8015600:	b118      	cbz	r0, 801560a <_fflush_r+0x1a>
 8015602:	6983      	ldr	r3, [r0, #24]
 8015604:	b90b      	cbnz	r3, 801560a <_fflush_r+0x1a>
 8015606:	f7fe f933 	bl	8013870 <__sinit>
 801560a:	4b14      	ldr	r3, [pc, #80]	; (801565c <_fflush_r+0x6c>)
 801560c:	429c      	cmp	r4, r3
 801560e:	d11b      	bne.n	8015648 <_fflush_r+0x58>
 8015610:	686c      	ldr	r4, [r5, #4]
 8015612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d0ef      	beq.n	80155fa <_fflush_r+0xa>
 801561a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801561c:	07d0      	lsls	r0, r2, #31
 801561e:	d404      	bmi.n	801562a <_fflush_r+0x3a>
 8015620:	0599      	lsls	r1, r3, #22
 8015622:	d402      	bmi.n	801562a <_fflush_r+0x3a>
 8015624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015626:	f7fe f9e6 	bl	80139f6 <__retarget_lock_acquire_recursive>
 801562a:	4628      	mov	r0, r5
 801562c:	4621      	mov	r1, r4
 801562e:	f7ff ff59 	bl	80154e4 <__sflush_r>
 8015632:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015634:	07da      	lsls	r2, r3, #31
 8015636:	4605      	mov	r5, r0
 8015638:	d4e0      	bmi.n	80155fc <_fflush_r+0xc>
 801563a:	89a3      	ldrh	r3, [r4, #12]
 801563c:	059b      	lsls	r3, r3, #22
 801563e:	d4dd      	bmi.n	80155fc <_fflush_r+0xc>
 8015640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015642:	f7fe f9d9 	bl	80139f8 <__retarget_lock_release_recursive>
 8015646:	e7d9      	b.n	80155fc <_fflush_r+0xc>
 8015648:	4b05      	ldr	r3, [pc, #20]	; (8015660 <_fflush_r+0x70>)
 801564a:	429c      	cmp	r4, r3
 801564c:	d101      	bne.n	8015652 <_fflush_r+0x62>
 801564e:	68ac      	ldr	r4, [r5, #8]
 8015650:	e7df      	b.n	8015612 <_fflush_r+0x22>
 8015652:	4b04      	ldr	r3, [pc, #16]	; (8015664 <_fflush_r+0x74>)
 8015654:	429c      	cmp	r4, r3
 8015656:	bf08      	it	eq
 8015658:	68ec      	ldreq	r4, [r5, #12]
 801565a:	e7da      	b.n	8015612 <_fflush_r+0x22>
 801565c:	0801aa40 	.word	0x0801aa40
 8015660:	0801aa60 	.word	0x0801aa60
 8015664:	0801aa20 	.word	0x0801aa20

08015668 <_localeconv_r>:
 8015668:	4800      	ldr	r0, [pc, #0]	; (801566c <_localeconv_r+0x4>)
 801566a:	4770      	bx	lr
 801566c:	20000218 	.word	0x20000218

08015670 <_lseek_r>:
 8015670:	b538      	push	{r3, r4, r5, lr}
 8015672:	4d07      	ldr	r5, [pc, #28]	; (8015690 <_lseek_r+0x20>)
 8015674:	4604      	mov	r4, r0
 8015676:	4608      	mov	r0, r1
 8015678:	4611      	mov	r1, r2
 801567a:	2200      	movs	r2, #0
 801567c:	602a      	str	r2, [r5, #0]
 801567e:	461a      	mov	r2, r3
 8015680:	f7fd fe89 	bl	8013396 <_lseek>
 8015684:	1c43      	adds	r3, r0, #1
 8015686:	d102      	bne.n	801568e <_lseek_r+0x1e>
 8015688:	682b      	ldr	r3, [r5, #0]
 801568a:	b103      	cbz	r3, 801568e <_lseek_r+0x1e>
 801568c:	6023      	str	r3, [r4, #0]
 801568e:	bd38      	pop	{r3, r4, r5, pc}
 8015690:	20005c18 	.word	0x20005c18

08015694 <__swhatbuf_r>:
 8015694:	b570      	push	{r4, r5, r6, lr}
 8015696:	460e      	mov	r6, r1
 8015698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801569c:	2900      	cmp	r1, #0
 801569e:	b096      	sub	sp, #88	; 0x58
 80156a0:	4614      	mov	r4, r2
 80156a2:	461d      	mov	r5, r3
 80156a4:	da08      	bge.n	80156b8 <__swhatbuf_r+0x24>
 80156a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80156aa:	2200      	movs	r2, #0
 80156ac:	602a      	str	r2, [r5, #0]
 80156ae:	061a      	lsls	r2, r3, #24
 80156b0:	d410      	bmi.n	80156d4 <__swhatbuf_r+0x40>
 80156b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80156b6:	e00e      	b.n	80156d6 <__swhatbuf_r+0x42>
 80156b8:	466a      	mov	r2, sp
 80156ba:	f000 ff43 	bl	8016544 <_fstat_r>
 80156be:	2800      	cmp	r0, #0
 80156c0:	dbf1      	blt.n	80156a6 <__swhatbuf_r+0x12>
 80156c2:	9a01      	ldr	r2, [sp, #4]
 80156c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80156c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80156cc:	425a      	negs	r2, r3
 80156ce:	415a      	adcs	r2, r3
 80156d0:	602a      	str	r2, [r5, #0]
 80156d2:	e7ee      	b.n	80156b2 <__swhatbuf_r+0x1e>
 80156d4:	2340      	movs	r3, #64	; 0x40
 80156d6:	2000      	movs	r0, #0
 80156d8:	6023      	str	r3, [r4, #0]
 80156da:	b016      	add	sp, #88	; 0x58
 80156dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080156e0 <__smakebuf_r>:
 80156e0:	898b      	ldrh	r3, [r1, #12]
 80156e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80156e4:	079d      	lsls	r5, r3, #30
 80156e6:	4606      	mov	r6, r0
 80156e8:	460c      	mov	r4, r1
 80156ea:	d507      	bpl.n	80156fc <__smakebuf_r+0x1c>
 80156ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80156f0:	6023      	str	r3, [r4, #0]
 80156f2:	6123      	str	r3, [r4, #16]
 80156f4:	2301      	movs	r3, #1
 80156f6:	6163      	str	r3, [r4, #20]
 80156f8:	b002      	add	sp, #8
 80156fa:	bd70      	pop	{r4, r5, r6, pc}
 80156fc:	ab01      	add	r3, sp, #4
 80156fe:	466a      	mov	r2, sp
 8015700:	f7ff ffc8 	bl	8015694 <__swhatbuf_r>
 8015704:	9900      	ldr	r1, [sp, #0]
 8015706:	4605      	mov	r5, r0
 8015708:	4630      	mov	r0, r6
 801570a:	f7fe f9ad 	bl	8013a68 <_malloc_r>
 801570e:	b948      	cbnz	r0, 8015724 <__smakebuf_r+0x44>
 8015710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015714:	059a      	lsls	r2, r3, #22
 8015716:	d4ef      	bmi.n	80156f8 <__smakebuf_r+0x18>
 8015718:	f023 0303 	bic.w	r3, r3, #3
 801571c:	f043 0302 	orr.w	r3, r3, #2
 8015720:	81a3      	strh	r3, [r4, #12]
 8015722:	e7e3      	b.n	80156ec <__smakebuf_r+0xc>
 8015724:	4b0d      	ldr	r3, [pc, #52]	; (801575c <__smakebuf_r+0x7c>)
 8015726:	62b3      	str	r3, [r6, #40]	; 0x28
 8015728:	89a3      	ldrh	r3, [r4, #12]
 801572a:	6020      	str	r0, [r4, #0]
 801572c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015730:	81a3      	strh	r3, [r4, #12]
 8015732:	9b00      	ldr	r3, [sp, #0]
 8015734:	6163      	str	r3, [r4, #20]
 8015736:	9b01      	ldr	r3, [sp, #4]
 8015738:	6120      	str	r0, [r4, #16]
 801573a:	b15b      	cbz	r3, 8015754 <__smakebuf_r+0x74>
 801573c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015740:	4630      	mov	r0, r6
 8015742:	f000 ff11 	bl	8016568 <_isatty_r>
 8015746:	b128      	cbz	r0, 8015754 <__smakebuf_r+0x74>
 8015748:	89a3      	ldrh	r3, [r4, #12]
 801574a:	f023 0303 	bic.w	r3, r3, #3
 801574e:	f043 0301 	orr.w	r3, r3, #1
 8015752:	81a3      	strh	r3, [r4, #12]
 8015754:	89a0      	ldrh	r0, [r4, #12]
 8015756:	4305      	orrs	r5, r0
 8015758:	81a5      	strh	r5, [r4, #12]
 801575a:	e7cd      	b.n	80156f8 <__smakebuf_r+0x18>
 801575c:	08013809 	.word	0x08013809

08015760 <malloc>:
 8015760:	4b02      	ldr	r3, [pc, #8]	; (801576c <malloc+0xc>)
 8015762:	4601      	mov	r1, r0
 8015764:	6818      	ldr	r0, [r3, #0]
 8015766:	f7fe b97f 	b.w	8013a68 <_malloc_r>
 801576a:	bf00      	nop
 801576c:	200000c4 	.word	0x200000c4

08015770 <__malloc_lock>:
 8015770:	4801      	ldr	r0, [pc, #4]	; (8015778 <__malloc_lock+0x8>)
 8015772:	f7fe b940 	b.w	80139f6 <__retarget_lock_acquire_recursive>
 8015776:	bf00      	nop
 8015778:	20005c0c 	.word	0x20005c0c

0801577c <__malloc_unlock>:
 801577c:	4801      	ldr	r0, [pc, #4]	; (8015784 <__malloc_unlock+0x8>)
 801577e:	f7fe b93b 	b.w	80139f8 <__retarget_lock_release_recursive>
 8015782:	bf00      	nop
 8015784:	20005c0c 	.word	0x20005c0c

08015788 <_Balloc>:
 8015788:	b570      	push	{r4, r5, r6, lr}
 801578a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801578c:	4604      	mov	r4, r0
 801578e:	460d      	mov	r5, r1
 8015790:	b976      	cbnz	r6, 80157b0 <_Balloc+0x28>
 8015792:	2010      	movs	r0, #16
 8015794:	f7ff ffe4 	bl	8015760 <malloc>
 8015798:	4602      	mov	r2, r0
 801579a:	6260      	str	r0, [r4, #36]	; 0x24
 801579c:	b920      	cbnz	r0, 80157a8 <_Balloc+0x20>
 801579e:	4b18      	ldr	r3, [pc, #96]	; (8015800 <_Balloc+0x78>)
 80157a0:	4818      	ldr	r0, [pc, #96]	; (8015804 <_Balloc+0x7c>)
 80157a2:	2166      	movs	r1, #102	; 0x66
 80157a4:	f000 fe9e 	bl	80164e4 <__assert_func>
 80157a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80157ac:	6006      	str	r6, [r0, #0]
 80157ae:	60c6      	str	r6, [r0, #12]
 80157b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80157b2:	68f3      	ldr	r3, [r6, #12]
 80157b4:	b183      	cbz	r3, 80157d8 <_Balloc+0x50>
 80157b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80157b8:	68db      	ldr	r3, [r3, #12]
 80157ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80157be:	b9b8      	cbnz	r0, 80157f0 <_Balloc+0x68>
 80157c0:	2101      	movs	r1, #1
 80157c2:	fa01 f605 	lsl.w	r6, r1, r5
 80157c6:	1d72      	adds	r2, r6, #5
 80157c8:	0092      	lsls	r2, r2, #2
 80157ca:	4620      	mov	r0, r4
 80157cc:	f000 fb60 	bl	8015e90 <_calloc_r>
 80157d0:	b160      	cbz	r0, 80157ec <_Balloc+0x64>
 80157d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80157d6:	e00e      	b.n	80157f6 <_Balloc+0x6e>
 80157d8:	2221      	movs	r2, #33	; 0x21
 80157da:	2104      	movs	r1, #4
 80157dc:	4620      	mov	r0, r4
 80157de:	f000 fb57 	bl	8015e90 <_calloc_r>
 80157e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80157e4:	60f0      	str	r0, [r6, #12]
 80157e6:	68db      	ldr	r3, [r3, #12]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d1e4      	bne.n	80157b6 <_Balloc+0x2e>
 80157ec:	2000      	movs	r0, #0
 80157ee:	bd70      	pop	{r4, r5, r6, pc}
 80157f0:	6802      	ldr	r2, [r0, #0]
 80157f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80157f6:	2300      	movs	r3, #0
 80157f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80157fc:	e7f7      	b.n	80157ee <_Balloc+0x66>
 80157fe:	bf00      	nop
 8015800:	0801aac5 	.word	0x0801aac5
 8015804:	0801ab48 	.word	0x0801ab48

08015808 <_Bfree>:
 8015808:	b570      	push	{r4, r5, r6, lr}
 801580a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801580c:	4605      	mov	r5, r0
 801580e:	460c      	mov	r4, r1
 8015810:	b976      	cbnz	r6, 8015830 <_Bfree+0x28>
 8015812:	2010      	movs	r0, #16
 8015814:	f7ff ffa4 	bl	8015760 <malloc>
 8015818:	4602      	mov	r2, r0
 801581a:	6268      	str	r0, [r5, #36]	; 0x24
 801581c:	b920      	cbnz	r0, 8015828 <_Bfree+0x20>
 801581e:	4b09      	ldr	r3, [pc, #36]	; (8015844 <_Bfree+0x3c>)
 8015820:	4809      	ldr	r0, [pc, #36]	; (8015848 <_Bfree+0x40>)
 8015822:	218a      	movs	r1, #138	; 0x8a
 8015824:	f000 fe5e 	bl	80164e4 <__assert_func>
 8015828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801582c:	6006      	str	r6, [r0, #0]
 801582e:	60c6      	str	r6, [r0, #12]
 8015830:	b13c      	cbz	r4, 8015842 <_Bfree+0x3a>
 8015832:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015834:	6862      	ldr	r2, [r4, #4]
 8015836:	68db      	ldr	r3, [r3, #12]
 8015838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801583c:	6021      	str	r1, [r4, #0]
 801583e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015842:	bd70      	pop	{r4, r5, r6, pc}
 8015844:	0801aac5 	.word	0x0801aac5
 8015848:	0801ab48 	.word	0x0801ab48

0801584c <__multadd>:
 801584c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015850:	690d      	ldr	r5, [r1, #16]
 8015852:	4607      	mov	r7, r0
 8015854:	460c      	mov	r4, r1
 8015856:	461e      	mov	r6, r3
 8015858:	f101 0c14 	add.w	ip, r1, #20
 801585c:	2000      	movs	r0, #0
 801585e:	f8dc 3000 	ldr.w	r3, [ip]
 8015862:	b299      	uxth	r1, r3
 8015864:	fb02 6101 	mla	r1, r2, r1, r6
 8015868:	0c1e      	lsrs	r6, r3, #16
 801586a:	0c0b      	lsrs	r3, r1, #16
 801586c:	fb02 3306 	mla	r3, r2, r6, r3
 8015870:	b289      	uxth	r1, r1
 8015872:	3001      	adds	r0, #1
 8015874:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015878:	4285      	cmp	r5, r0
 801587a:	f84c 1b04 	str.w	r1, [ip], #4
 801587e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015882:	dcec      	bgt.n	801585e <__multadd+0x12>
 8015884:	b30e      	cbz	r6, 80158ca <__multadd+0x7e>
 8015886:	68a3      	ldr	r3, [r4, #8]
 8015888:	42ab      	cmp	r3, r5
 801588a:	dc19      	bgt.n	80158c0 <__multadd+0x74>
 801588c:	6861      	ldr	r1, [r4, #4]
 801588e:	4638      	mov	r0, r7
 8015890:	3101      	adds	r1, #1
 8015892:	f7ff ff79 	bl	8015788 <_Balloc>
 8015896:	4680      	mov	r8, r0
 8015898:	b928      	cbnz	r0, 80158a6 <__multadd+0x5a>
 801589a:	4602      	mov	r2, r0
 801589c:	4b0c      	ldr	r3, [pc, #48]	; (80158d0 <__multadd+0x84>)
 801589e:	480d      	ldr	r0, [pc, #52]	; (80158d4 <__multadd+0x88>)
 80158a0:	21b5      	movs	r1, #181	; 0xb5
 80158a2:	f000 fe1f 	bl	80164e4 <__assert_func>
 80158a6:	6922      	ldr	r2, [r4, #16]
 80158a8:	3202      	adds	r2, #2
 80158aa:	f104 010c 	add.w	r1, r4, #12
 80158ae:	0092      	lsls	r2, r2, #2
 80158b0:	300c      	adds	r0, #12
 80158b2:	f7fe f8a2 	bl	80139fa <memcpy>
 80158b6:	4621      	mov	r1, r4
 80158b8:	4638      	mov	r0, r7
 80158ba:	f7ff ffa5 	bl	8015808 <_Bfree>
 80158be:	4644      	mov	r4, r8
 80158c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80158c4:	3501      	adds	r5, #1
 80158c6:	615e      	str	r6, [r3, #20]
 80158c8:	6125      	str	r5, [r4, #16]
 80158ca:	4620      	mov	r0, r4
 80158cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158d0:	0801ab37 	.word	0x0801ab37
 80158d4:	0801ab48 	.word	0x0801ab48

080158d8 <__hi0bits>:
 80158d8:	0c03      	lsrs	r3, r0, #16
 80158da:	041b      	lsls	r3, r3, #16
 80158dc:	b9d3      	cbnz	r3, 8015914 <__hi0bits+0x3c>
 80158de:	0400      	lsls	r0, r0, #16
 80158e0:	2310      	movs	r3, #16
 80158e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80158e6:	bf04      	itt	eq
 80158e8:	0200      	lsleq	r0, r0, #8
 80158ea:	3308      	addeq	r3, #8
 80158ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80158f0:	bf04      	itt	eq
 80158f2:	0100      	lsleq	r0, r0, #4
 80158f4:	3304      	addeq	r3, #4
 80158f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80158fa:	bf04      	itt	eq
 80158fc:	0080      	lsleq	r0, r0, #2
 80158fe:	3302      	addeq	r3, #2
 8015900:	2800      	cmp	r0, #0
 8015902:	db05      	blt.n	8015910 <__hi0bits+0x38>
 8015904:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015908:	f103 0301 	add.w	r3, r3, #1
 801590c:	bf08      	it	eq
 801590e:	2320      	moveq	r3, #32
 8015910:	4618      	mov	r0, r3
 8015912:	4770      	bx	lr
 8015914:	2300      	movs	r3, #0
 8015916:	e7e4      	b.n	80158e2 <__hi0bits+0xa>

08015918 <__lo0bits>:
 8015918:	6803      	ldr	r3, [r0, #0]
 801591a:	f013 0207 	ands.w	r2, r3, #7
 801591e:	4601      	mov	r1, r0
 8015920:	d00b      	beq.n	801593a <__lo0bits+0x22>
 8015922:	07da      	lsls	r2, r3, #31
 8015924:	d423      	bmi.n	801596e <__lo0bits+0x56>
 8015926:	0798      	lsls	r0, r3, #30
 8015928:	bf49      	itett	mi
 801592a:	085b      	lsrmi	r3, r3, #1
 801592c:	089b      	lsrpl	r3, r3, #2
 801592e:	2001      	movmi	r0, #1
 8015930:	600b      	strmi	r3, [r1, #0]
 8015932:	bf5c      	itt	pl
 8015934:	600b      	strpl	r3, [r1, #0]
 8015936:	2002      	movpl	r0, #2
 8015938:	4770      	bx	lr
 801593a:	b298      	uxth	r0, r3
 801593c:	b9a8      	cbnz	r0, 801596a <__lo0bits+0x52>
 801593e:	0c1b      	lsrs	r3, r3, #16
 8015940:	2010      	movs	r0, #16
 8015942:	b2da      	uxtb	r2, r3
 8015944:	b90a      	cbnz	r2, 801594a <__lo0bits+0x32>
 8015946:	3008      	adds	r0, #8
 8015948:	0a1b      	lsrs	r3, r3, #8
 801594a:	071a      	lsls	r2, r3, #28
 801594c:	bf04      	itt	eq
 801594e:	091b      	lsreq	r3, r3, #4
 8015950:	3004      	addeq	r0, #4
 8015952:	079a      	lsls	r2, r3, #30
 8015954:	bf04      	itt	eq
 8015956:	089b      	lsreq	r3, r3, #2
 8015958:	3002      	addeq	r0, #2
 801595a:	07da      	lsls	r2, r3, #31
 801595c:	d403      	bmi.n	8015966 <__lo0bits+0x4e>
 801595e:	085b      	lsrs	r3, r3, #1
 8015960:	f100 0001 	add.w	r0, r0, #1
 8015964:	d005      	beq.n	8015972 <__lo0bits+0x5a>
 8015966:	600b      	str	r3, [r1, #0]
 8015968:	4770      	bx	lr
 801596a:	4610      	mov	r0, r2
 801596c:	e7e9      	b.n	8015942 <__lo0bits+0x2a>
 801596e:	2000      	movs	r0, #0
 8015970:	4770      	bx	lr
 8015972:	2020      	movs	r0, #32
 8015974:	4770      	bx	lr
	...

08015978 <__i2b>:
 8015978:	b510      	push	{r4, lr}
 801597a:	460c      	mov	r4, r1
 801597c:	2101      	movs	r1, #1
 801597e:	f7ff ff03 	bl	8015788 <_Balloc>
 8015982:	4602      	mov	r2, r0
 8015984:	b928      	cbnz	r0, 8015992 <__i2b+0x1a>
 8015986:	4b05      	ldr	r3, [pc, #20]	; (801599c <__i2b+0x24>)
 8015988:	4805      	ldr	r0, [pc, #20]	; (80159a0 <__i2b+0x28>)
 801598a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801598e:	f000 fda9 	bl	80164e4 <__assert_func>
 8015992:	2301      	movs	r3, #1
 8015994:	6144      	str	r4, [r0, #20]
 8015996:	6103      	str	r3, [r0, #16]
 8015998:	bd10      	pop	{r4, pc}
 801599a:	bf00      	nop
 801599c:	0801ab37 	.word	0x0801ab37
 80159a0:	0801ab48 	.word	0x0801ab48

080159a4 <__multiply>:
 80159a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159a8:	4691      	mov	r9, r2
 80159aa:	690a      	ldr	r2, [r1, #16]
 80159ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80159b0:	429a      	cmp	r2, r3
 80159b2:	bfb8      	it	lt
 80159b4:	460b      	movlt	r3, r1
 80159b6:	460c      	mov	r4, r1
 80159b8:	bfbc      	itt	lt
 80159ba:	464c      	movlt	r4, r9
 80159bc:	4699      	movlt	r9, r3
 80159be:	6927      	ldr	r7, [r4, #16]
 80159c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80159c4:	68a3      	ldr	r3, [r4, #8]
 80159c6:	6861      	ldr	r1, [r4, #4]
 80159c8:	eb07 060a 	add.w	r6, r7, sl
 80159cc:	42b3      	cmp	r3, r6
 80159ce:	b085      	sub	sp, #20
 80159d0:	bfb8      	it	lt
 80159d2:	3101      	addlt	r1, #1
 80159d4:	f7ff fed8 	bl	8015788 <_Balloc>
 80159d8:	b930      	cbnz	r0, 80159e8 <__multiply+0x44>
 80159da:	4602      	mov	r2, r0
 80159dc:	4b44      	ldr	r3, [pc, #272]	; (8015af0 <__multiply+0x14c>)
 80159de:	4845      	ldr	r0, [pc, #276]	; (8015af4 <__multiply+0x150>)
 80159e0:	f240 115d 	movw	r1, #349	; 0x15d
 80159e4:	f000 fd7e 	bl	80164e4 <__assert_func>
 80159e8:	f100 0514 	add.w	r5, r0, #20
 80159ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80159f0:	462b      	mov	r3, r5
 80159f2:	2200      	movs	r2, #0
 80159f4:	4543      	cmp	r3, r8
 80159f6:	d321      	bcc.n	8015a3c <__multiply+0x98>
 80159f8:	f104 0314 	add.w	r3, r4, #20
 80159fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015a00:	f109 0314 	add.w	r3, r9, #20
 8015a04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015a08:	9202      	str	r2, [sp, #8]
 8015a0a:	1b3a      	subs	r2, r7, r4
 8015a0c:	3a15      	subs	r2, #21
 8015a0e:	f022 0203 	bic.w	r2, r2, #3
 8015a12:	3204      	adds	r2, #4
 8015a14:	f104 0115 	add.w	r1, r4, #21
 8015a18:	428f      	cmp	r7, r1
 8015a1a:	bf38      	it	cc
 8015a1c:	2204      	movcc	r2, #4
 8015a1e:	9201      	str	r2, [sp, #4]
 8015a20:	9a02      	ldr	r2, [sp, #8]
 8015a22:	9303      	str	r3, [sp, #12]
 8015a24:	429a      	cmp	r2, r3
 8015a26:	d80c      	bhi.n	8015a42 <__multiply+0x9e>
 8015a28:	2e00      	cmp	r6, #0
 8015a2a:	dd03      	ble.n	8015a34 <__multiply+0x90>
 8015a2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d05a      	beq.n	8015aea <__multiply+0x146>
 8015a34:	6106      	str	r6, [r0, #16]
 8015a36:	b005      	add	sp, #20
 8015a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a3c:	f843 2b04 	str.w	r2, [r3], #4
 8015a40:	e7d8      	b.n	80159f4 <__multiply+0x50>
 8015a42:	f8b3 a000 	ldrh.w	sl, [r3]
 8015a46:	f1ba 0f00 	cmp.w	sl, #0
 8015a4a:	d024      	beq.n	8015a96 <__multiply+0xf2>
 8015a4c:	f104 0e14 	add.w	lr, r4, #20
 8015a50:	46a9      	mov	r9, r5
 8015a52:	f04f 0c00 	mov.w	ip, #0
 8015a56:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015a5a:	f8d9 1000 	ldr.w	r1, [r9]
 8015a5e:	fa1f fb82 	uxth.w	fp, r2
 8015a62:	b289      	uxth	r1, r1
 8015a64:	fb0a 110b 	mla	r1, sl, fp, r1
 8015a68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015a6c:	f8d9 2000 	ldr.w	r2, [r9]
 8015a70:	4461      	add	r1, ip
 8015a72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015a76:	fb0a c20b 	mla	r2, sl, fp, ip
 8015a7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015a7e:	b289      	uxth	r1, r1
 8015a80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015a84:	4577      	cmp	r7, lr
 8015a86:	f849 1b04 	str.w	r1, [r9], #4
 8015a8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015a8e:	d8e2      	bhi.n	8015a56 <__multiply+0xb2>
 8015a90:	9a01      	ldr	r2, [sp, #4]
 8015a92:	f845 c002 	str.w	ip, [r5, r2]
 8015a96:	9a03      	ldr	r2, [sp, #12]
 8015a98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015a9c:	3304      	adds	r3, #4
 8015a9e:	f1b9 0f00 	cmp.w	r9, #0
 8015aa2:	d020      	beq.n	8015ae6 <__multiply+0x142>
 8015aa4:	6829      	ldr	r1, [r5, #0]
 8015aa6:	f104 0c14 	add.w	ip, r4, #20
 8015aaa:	46ae      	mov	lr, r5
 8015aac:	f04f 0a00 	mov.w	sl, #0
 8015ab0:	f8bc b000 	ldrh.w	fp, [ip]
 8015ab4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015ab8:	fb09 220b 	mla	r2, r9, fp, r2
 8015abc:	4492      	add	sl, r2
 8015abe:	b289      	uxth	r1, r1
 8015ac0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015ac4:	f84e 1b04 	str.w	r1, [lr], #4
 8015ac8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015acc:	f8be 1000 	ldrh.w	r1, [lr]
 8015ad0:	0c12      	lsrs	r2, r2, #16
 8015ad2:	fb09 1102 	mla	r1, r9, r2, r1
 8015ad6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015ada:	4567      	cmp	r7, ip
 8015adc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015ae0:	d8e6      	bhi.n	8015ab0 <__multiply+0x10c>
 8015ae2:	9a01      	ldr	r2, [sp, #4]
 8015ae4:	50a9      	str	r1, [r5, r2]
 8015ae6:	3504      	adds	r5, #4
 8015ae8:	e79a      	b.n	8015a20 <__multiply+0x7c>
 8015aea:	3e01      	subs	r6, #1
 8015aec:	e79c      	b.n	8015a28 <__multiply+0x84>
 8015aee:	bf00      	nop
 8015af0:	0801ab37 	.word	0x0801ab37
 8015af4:	0801ab48 	.word	0x0801ab48

08015af8 <__pow5mult>:
 8015af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015afc:	4615      	mov	r5, r2
 8015afe:	f012 0203 	ands.w	r2, r2, #3
 8015b02:	4606      	mov	r6, r0
 8015b04:	460f      	mov	r7, r1
 8015b06:	d007      	beq.n	8015b18 <__pow5mult+0x20>
 8015b08:	4c25      	ldr	r4, [pc, #148]	; (8015ba0 <__pow5mult+0xa8>)
 8015b0a:	3a01      	subs	r2, #1
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015b12:	f7ff fe9b 	bl	801584c <__multadd>
 8015b16:	4607      	mov	r7, r0
 8015b18:	10ad      	asrs	r5, r5, #2
 8015b1a:	d03d      	beq.n	8015b98 <__pow5mult+0xa0>
 8015b1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015b1e:	b97c      	cbnz	r4, 8015b40 <__pow5mult+0x48>
 8015b20:	2010      	movs	r0, #16
 8015b22:	f7ff fe1d 	bl	8015760 <malloc>
 8015b26:	4602      	mov	r2, r0
 8015b28:	6270      	str	r0, [r6, #36]	; 0x24
 8015b2a:	b928      	cbnz	r0, 8015b38 <__pow5mult+0x40>
 8015b2c:	4b1d      	ldr	r3, [pc, #116]	; (8015ba4 <__pow5mult+0xac>)
 8015b2e:	481e      	ldr	r0, [pc, #120]	; (8015ba8 <__pow5mult+0xb0>)
 8015b30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015b34:	f000 fcd6 	bl	80164e4 <__assert_func>
 8015b38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015b3c:	6004      	str	r4, [r0, #0]
 8015b3e:	60c4      	str	r4, [r0, #12]
 8015b40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015b44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015b48:	b94c      	cbnz	r4, 8015b5e <__pow5mult+0x66>
 8015b4a:	f240 2171 	movw	r1, #625	; 0x271
 8015b4e:	4630      	mov	r0, r6
 8015b50:	f7ff ff12 	bl	8015978 <__i2b>
 8015b54:	2300      	movs	r3, #0
 8015b56:	f8c8 0008 	str.w	r0, [r8, #8]
 8015b5a:	4604      	mov	r4, r0
 8015b5c:	6003      	str	r3, [r0, #0]
 8015b5e:	f04f 0900 	mov.w	r9, #0
 8015b62:	07eb      	lsls	r3, r5, #31
 8015b64:	d50a      	bpl.n	8015b7c <__pow5mult+0x84>
 8015b66:	4639      	mov	r1, r7
 8015b68:	4622      	mov	r2, r4
 8015b6a:	4630      	mov	r0, r6
 8015b6c:	f7ff ff1a 	bl	80159a4 <__multiply>
 8015b70:	4639      	mov	r1, r7
 8015b72:	4680      	mov	r8, r0
 8015b74:	4630      	mov	r0, r6
 8015b76:	f7ff fe47 	bl	8015808 <_Bfree>
 8015b7a:	4647      	mov	r7, r8
 8015b7c:	106d      	asrs	r5, r5, #1
 8015b7e:	d00b      	beq.n	8015b98 <__pow5mult+0xa0>
 8015b80:	6820      	ldr	r0, [r4, #0]
 8015b82:	b938      	cbnz	r0, 8015b94 <__pow5mult+0x9c>
 8015b84:	4622      	mov	r2, r4
 8015b86:	4621      	mov	r1, r4
 8015b88:	4630      	mov	r0, r6
 8015b8a:	f7ff ff0b 	bl	80159a4 <__multiply>
 8015b8e:	6020      	str	r0, [r4, #0]
 8015b90:	f8c0 9000 	str.w	r9, [r0]
 8015b94:	4604      	mov	r4, r0
 8015b96:	e7e4      	b.n	8015b62 <__pow5mult+0x6a>
 8015b98:	4638      	mov	r0, r7
 8015b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b9e:	bf00      	nop
 8015ba0:	0801ac98 	.word	0x0801ac98
 8015ba4:	0801aac5 	.word	0x0801aac5
 8015ba8:	0801ab48 	.word	0x0801ab48

08015bac <__lshift>:
 8015bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bb0:	460c      	mov	r4, r1
 8015bb2:	6849      	ldr	r1, [r1, #4]
 8015bb4:	6923      	ldr	r3, [r4, #16]
 8015bb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015bba:	68a3      	ldr	r3, [r4, #8]
 8015bbc:	4607      	mov	r7, r0
 8015bbe:	4691      	mov	r9, r2
 8015bc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015bc4:	f108 0601 	add.w	r6, r8, #1
 8015bc8:	42b3      	cmp	r3, r6
 8015bca:	db0b      	blt.n	8015be4 <__lshift+0x38>
 8015bcc:	4638      	mov	r0, r7
 8015bce:	f7ff fddb 	bl	8015788 <_Balloc>
 8015bd2:	4605      	mov	r5, r0
 8015bd4:	b948      	cbnz	r0, 8015bea <__lshift+0x3e>
 8015bd6:	4602      	mov	r2, r0
 8015bd8:	4b2a      	ldr	r3, [pc, #168]	; (8015c84 <__lshift+0xd8>)
 8015bda:	482b      	ldr	r0, [pc, #172]	; (8015c88 <__lshift+0xdc>)
 8015bdc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015be0:	f000 fc80 	bl	80164e4 <__assert_func>
 8015be4:	3101      	adds	r1, #1
 8015be6:	005b      	lsls	r3, r3, #1
 8015be8:	e7ee      	b.n	8015bc8 <__lshift+0x1c>
 8015bea:	2300      	movs	r3, #0
 8015bec:	f100 0114 	add.w	r1, r0, #20
 8015bf0:	f100 0210 	add.w	r2, r0, #16
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	4553      	cmp	r3, sl
 8015bf8:	db37      	blt.n	8015c6a <__lshift+0xbe>
 8015bfa:	6920      	ldr	r0, [r4, #16]
 8015bfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015c00:	f104 0314 	add.w	r3, r4, #20
 8015c04:	f019 091f 	ands.w	r9, r9, #31
 8015c08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015c0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015c10:	d02f      	beq.n	8015c72 <__lshift+0xc6>
 8015c12:	f1c9 0e20 	rsb	lr, r9, #32
 8015c16:	468a      	mov	sl, r1
 8015c18:	f04f 0c00 	mov.w	ip, #0
 8015c1c:	681a      	ldr	r2, [r3, #0]
 8015c1e:	fa02 f209 	lsl.w	r2, r2, r9
 8015c22:	ea42 020c 	orr.w	r2, r2, ip
 8015c26:	f84a 2b04 	str.w	r2, [sl], #4
 8015c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c2e:	4298      	cmp	r0, r3
 8015c30:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015c34:	d8f2      	bhi.n	8015c1c <__lshift+0x70>
 8015c36:	1b03      	subs	r3, r0, r4
 8015c38:	3b15      	subs	r3, #21
 8015c3a:	f023 0303 	bic.w	r3, r3, #3
 8015c3e:	3304      	adds	r3, #4
 8015c40:	f104 0215 	add.w	r2, r4, #21
 8015c44:	4290      	cmp	r0, r2
 8015c46:	bf38      	it	cc
 8015c48:	2304      	movcc	r3, #4
 8015c4a:	f841 c003 	str.w	ip, [r1, r3]
 8015c4e:	f1bc 0f00 	cmp.w	ip, #0
 8015c52:	d001      	beq.n	8015c58 <__lshift+0xac>
 8015c54:	f108 0602 	add.w	r6, r8, #2
 8015c58:	3e01      	subs	r6, #1
 8015c5a:	4638      	mov	r0, r7
 8015c5c:	612e      	str	r6, [r5, #16]
 8015c5e:	4621      	mov	r1, r4
 8015c60:	f7ff fdd2 	bl	8015808 <_Bfree>
 8015c64:	4628      	mov	r0, r5
 8015c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8015c6e:	3301      	adds	r3, #1
 8015c70:	e7c1      	b.n	8015bf6 <__lshift+0x4a>
 8015c72:	3904      	subs	r1, #4
 8015c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c78:	f841 2f04 	str.w	r2, [r1, #4]!
 8015c7c:	4298      	cmp	r0, r3
 8015c7e:	d8f9      	bhi.n	8015c74 <__lshift+0xc8>
 8015c80:	e7ea      	b.n	8015c58 <__lshift+0xac>
 8015c82:	bf00      	nop
 8015c84:	0801ab37 	.word	0x0801ab37
 8015c88:	0801ab48 	.word	0x0801ab48

08015c8c <__mcmp>:
 8015c8c:	b530      	push	{r4, r5, lr}
 8015c8e:	6902      	ldr	r2, [r0, #16]
 8015c90:	690c      	ldr	r4, [r1, #16]
 8015c92:	1b12      	subs	r2, r2, r4
 8015c94:	d10e      	bne.n	8015cb4 <__mcmp+0x28>
 8015c96:	f100 0314 	add.w	r3, r0, #20
 8015c9a:	3114      	adds	r1, #20
 8015c9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015ca0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015ca4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015ca8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015cac:	42a5      	cmp	r5, r4
 8015cae:	d003      	beq.n	8015cb8 <__mcmp+0x2c>
 8015cb0:	d305      	bcc.n	8015cbe <__mcmp+0x32>
 8015cb2:	2201      	movs	r2, #1
 8015cb4:	4610      	mov	r0, r2
 8015cb6:	bd30      	pop	{r4, r5, pc}
 8015cb8:	4283      	cmp	r3, r0
 8015cba:	d3f3      	bcc.n	8015ca4 <__mcmp+0x18>
 8015cbc:	e7fa      	b.n	8015cb4 <__mcmp+0x28>
 8015cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8015cc2:	e7f7      	b.n	8015cb4 <__mcmp+0x28>

08015cc4 <__mdiff>:
 8015cc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cc8:	460c      	mov	r4, r1
 8015cca:	4606      	mov	r6, r0
 8015ccc:	4611      	mov	r1, r2
 8015cce:	4620      	mov	r0, r4
 8015cd0:	4690      	mov	r8, r2
 8015cd2:	f7ff ffdb 	bl	8015c8c <__mcmp>
 8015cd6:	1e05      	subs	r5, r0, #0
 8015cd8:	d110      	bne.n	8015cfc <__mdiff+0x38>
 8015cda:	4629      	mov	r1, r5
 8015cdc:	4630      	mov	r0, r6
 8015cde:	f7ff fd53 	bl	8015788 <_Balloc>
 8015ce2:	b930      	cbnz	r0, 8015cf2 <__mdiff+0x2e>
 8015ce4:	4b3a      	ldr	r3, [pc, #232]	; (8015dd0 <__mdiff+0x10c>)
 8015ce6:	4602      	mov	r2, r0
 8015ce8:	f240 2132 	movw	r1, #562	; 0x232
 8015cec:	4839      	ldr	r0, [pc, #228]	; (8015dd4 <__mdiff+0x110>)
 8015cee:	f000 fbf9 	bl	80164e4 <__assert_func>
 8015cf2:	2301      	movs	r3, #1
 8015cf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cfc:	bfa4      	itt	ge
 8015cfe:	4643      	movge	r3, r8
 8015d00:	46a0      	movge	r8, r4
 8015d02:	4630      	mov	r0, r6
 8015d04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015d08:	bfa6      	itte	ge
 8015d0a:	461c      	movge	r4, r3
 8015d0c:	2500      	movge	r5, #0
 8015d0e:	2501      	movlt	r5, #1
 8015d10:	f7ff fd3a 	bl	8015788 <_Balloc>
 8015d14:	b920      	cbnz	r0, 8015d20 <__mdiff+0x5c>
 8015d16:	4b2e      	ldr	r3, [pc, #184]	; (8015dd0 <__mdiff+0x10c>)
 8015d18:	4602      	mov	r2, r0
 8015d1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015d1e:	e7e5      	b.n	8015cec <__mdiff+0x28>
 8015d20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015d24:	6926      	ldr	r6, [r4, #16]
 8015d26:	60c5      	str	r5, [r0, #12]
 8015d28:	f104 0914 	add.w	r9, r4, #20
 8015d2c:	f108 0514 	add.w	r5, r8, #20
 8015d30:	f100 0e14 	add.w	lr, r0, #20
 8015d34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015d38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015d3c:	f108 0210 	add.w	r2, r8, #16
 8015d40:	46f2      	mov	sl, lr
 8015d42:	2100      	movs	r1, #0
 8015d44:	f859 3b04 	ldr.w	r3, [r9], #4
 8015d48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015d4c:	fa1f f883 	uxth.w	r8, r3
 8015d50:	fa11 f18b 	uxtah	r1, r1, fp
 8015d54:	0c1b      	lsrs	r3, r3, #16
 8015d56:	eba1 0808 	sub.w	r8, r1, r8
 8015d5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015d5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015d62:	fa1f f888 	uxth.w	r8, r8
 8015d66:	1419      	asrs	r1, r3, #16
 8015d68:	454e      	cmp	r6, r9
 8015d6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015d6e:	f84a 3b04 	str.w	r3, [sl], #4
 8015d72:	d8e7      	bhi.n	8015d44 <__mdiff+0x80>
 8015d74:	1b33      	subs	r3, r6, r4
 8015d76:	3b15      	subs	r3, #21
 8015d78:	f023 0303 	bic.w	r3, r3, #3
 8015d7c:	3304      	adds	r3, #4
 8015d7e:	3415      	adds	r4, #21
 8015d80:	42a6      	cmp	r6, r4
 8015d82:	bf38      	it	cc
 8015d84:	2304      	movcc	r3, #4
 8015d86:	441d      	add	r5, r3
 8015d88:	4473      	add	r3, lr
 8015d8a:	469e      	mov	lr, r3
 8015d8c:	462e      	mov	r6, r5
 8015d8e:	4566      	cmp	r6, ip
 8015d90:	d30e      	bcc.n	8015db0 <__mdiff+0xec>
 8015d92:	f10c 0203 	add.w	r2, ip, #3
 8015d96:	1b52      	subs	r2, r2, r5
 8015d98:	f022 0203 	bic.w	r2, r2, #3
 8015d9c:	3d03      	subs	r5, #3
 8015d9e:	45ac      	cmp	ip, r5
 8015da0:	bf38      	it	cc
 8015da2:	2200      	movcc	r2, #0
 8015da4:	441a      	add	r2, r3
 8015da6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015daa:	b17b      	cbz	r3, 8015dcc <__mdiff+0x108>
 8015dac:	6107      	str	r7, [r0, #16]
 8015dae:	e7a3      	b.n	8015cf8 <__mdiff+0x34>
 8015db0:	f856 8b04 	ldr.w	r8, [r6], #4
 8015db4:	fa11 f288 	uxtah	r2, r1, r8
 8015db8:	1414      	asrs	r4, r2, #16
 8015dba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015dbe:	b292      	uxth	r2, r2
 8015dc0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015dc4:	f84e 2b04 	str.w	r2, [lr], #4
 8015dc8:	1421      	asrs	r1, r4, #16
 8015dca:	e7e0      	b.n	8015d8e <__mdiff+0xca>
 8015dcc:	3f01      	subs	r7, #1
 8015dce:	e7ea      	b.n	8015da6 <__mdiff+0xe2>
 8015dd0:	0801ab37 	.word	0x0801ab37
 8015dd4:	0801ab48 	.word	0x0801ab48

08015dd8 <__d2b>:
 8015dd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015ddc:	4689      	mov	r9, r1
 8015dde:	2101      	movs	r1, #1
 8015de0:	ec57 6b10 	vmov	r6, r7, d0
 8015de4:	4690      	mov	r8, r2
 8015de6:	f7ff fccf 	bl	8015788 <_Balloc>
 8015dea:	4604      	mov	r4, r0
 8015dec:	b930      	cbnz	r0, 8015dfc <__d2b+0x24>
 8015dee:	4602      	mov	r2, r0
 8015df0:	4b25      	ldr	r3, [pc, #148]	; (8015e88 <__d2b+0xb0>)
 8015df2:	4826      	ldr	r0, [pc, #152]	; (8015e8c <__d2b+0xb4>)
 8015df4:	f240 310a 	movw	r1, #778	; 0x30a
 8015df8:	f000 fb74 	bl	80164e4 <__assert_func>
 8015dfc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015e00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015e04:	bb35      	cbnz	r5, 8015e54 <__d2b+0x7c>
 8015e06:	2e00      	cmp	r6, #0
 8015e08:	9301      	str	r3, [sp, #4]
 8015e0a:	d028      	beq.n	8015e5e <__d2b+0x86>
 8015e0c:	4668      	mov	r0, sp
 8015e0e:	9600      	str	r6, [sp, #0]
 8015e10:	f7ff fd82 	bl	8015918 <__lo0bits>
 8015e14:	9900      	ldr	r1, [sp, #0]
 8015e16:	b300      	cbz	r0, 8015e5a <__d2b+0x82>
 8015e18:	9a01      	ldr	r2, [sp, #4]
 8015e1a:	f1c0 0320 	rsb	r3, r0, #32
 8015e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8015e22:	430b      	orrs	r3, r1
 8015e24:	40c2      	lsrs	r2, r0
 8015e26:	6163      	str	r3, [r4, #20]
 8015e28:	9201      	str	r2, [sp, #4]
 8015e2a:	9b01      	ldr	r3, [sp, #4]
 8015e2c:	61a3      	str	r3, [r4, #24]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	bf14      	ite	ne
 8015e32:	2202      	movne	r2, #2
 8015e34:	2201      	moveq	r2, #1
 8015e36:	6122      	str	r2, [r4, #16]
 8015e38:	b1d5      	cbz	r5, 8015e70 <__d2b+0x98>
 8015e3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015e3e:	4405      	add	r5, r0
 8015e40:	f8c9 5000 	str.w	r5, [r9]
 8015e44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015e48:	f8c8 0000 	str.w	r0, [r8]
 8015e4c:	4620      	mov	r0, r4
 8015e4e:	b003      	add	sp, #12
 8015e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015e58:	e7d5      	b.n	8015e06 <__d2b+0x2e>
 8015e5a:	6161      	str	r1, [r4, #20]
 8015e5c:	e7e5      	b.n	8015e2a <__d2b+0x52>
 8015e5e:	a801      	add	r0, sp, #4
 8015e60:	f7ff fd5a 	bl	8015918 <__lo0bits>
 8015e64:	9b01      	ldr	r3, [sp, #4]
 8015e66:	6163      	str	r3, [r4, #20]
 8015e68:	2201      	movs	r2, #1
 8015e6a:	6122      	str	r2, [r4, #16]
 8015e6c:	3020      	adds	r0, #32
 8015e6e:	e7e3      	b.n	8015e38 <__d2b+0x60>
 8015e70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015e74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015e78:	f8c9 0000 	str.w	r0, [r9]
 8015e7c:	6918      	ldr	r0, [r3, #16]
 8015e7e:	f7ff fd2b 	bl	80158d8 <__hi0bits>
 8015e82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015e86:	e7df      	b.n	8015e48 <__d2b+0x70>
 8015e88:	0801ab37 	.word	0x0801ab37
 8015e8c:	0801ab48 	.word	0x0801ab48

08015e90 <_calloc_r>:
 8015e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015e92:	fba1 2402 	umull	r2, r4, r1, r2
 8015e96:	b94c      	cbnz	r4, 8015eac <_calloc_r+0x1c>
 8015e98:	4611      	mov	r1, r2
 8015e9a:	9201      	str	r2, [sp, #4]
 8015e9c:	f7fd fde4 	bl	8013a68 <_malloc_r>
 8015ea0:	9a01      	ldr	r2, [sp, #4]
 8015ea2:	4605      	mov	r5, r0
 8015ea4:	b930      	cbnz	r0, 8015eb4 <_calloc_r+0x24>
 8015ea6:	4628      	mov	r0, r5
 8015ea8:	b003      	add	sp, #12
 8015eaa:	bd30      	pop	{r4, r5, pc}
 8015eac:	220c      	movs	r2, #12
 8015eae:	6002      	str	r2, [r0, #0]
 8015eb0:	2500      	movs	r5, #0
 8015eb2:	e7f8      	b.n	8015ea6 <_calloc_r+0x16>
 8015eb4:	4621      	mov	r1, r4
 8015eb6:	f7fd fdae 	bl	8013a16 <memset>
 8015eba:	e7f4      	b.n	8015ea6 <_calloc_r+0x16>

08015ebc <_free_r>:
 8015ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015ebe:	2900      	cmp	r1, #0
 8015ec0:	d044      	beq.n	8015f4c <_free_r+0x90>
 8015ec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ec6:	9001      	str	r0, [sp, #4]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	f1a1 0404 	sub.w	r4, r1, #4
 8015ece:	bfb8      	it	lt
 8015ed0:	18e4      	addlt	r4, r4, r3
 8015ed2:	f7ff fc4d 	bl	8015770 <__malloc_lock>
 8015ed6:	4a1e      	ldr	r2, [pc, #120]	; (8015f50 <_free_r+0x94>)
 8015ed8:	9801      	ldr	r0, [sp, #4]
 8015eda:	6813      	ldr	r3, [r2, #0]
 8015edc:	b933      	cbnz	r3, 8015eec <_free_r+0x30>
 8015ede:	6063      	str	r3, [r4, #4]
 8015ee0:	6014      	str	r4, [r2, #0]
 8015ee2:	b003      	add	sp, #12
 8015ee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ee8:	f7ff bc48 	b.w	801577c <__malloc_unlock>
 8015eec:	42a3      	cmp	r3, r4
 8015eee:	d908      	bls.n	8015f02 <_free_r+0x46>
 8015ef0:	6825      	ldr	r5, [r4, #0]
 8015ef2:	1961      	adds	r1, r4, r5
 8015ef4:	428b      	cmp	r3, r1
 8015ef6:	bf01      	itttt	eq
 8015ef8:	6819      	ldreq	r1, [r3, #0]
 8015efa:	685b      	ldreq	r3, [r3, #4]
 8015efc:	1949      	addeq	r1, r1, r5
 8015efe:	6021      	streq	r1, [r4, #0]
 8015f00:	e7ed      	b.n	8015ede <_free_r+0x22>
 8015f02:	461a      	mov	r2, r3
 8015f04:	685b      	ldr	r3, [r3, #4]
 8015f06:	b10b      	cbz	r3, 8015f0c <_free_r+0x50>
 8015f08:	42a3      	cmp	r3, r4
 8015f0a:	d9fa      	bls.n	8015f02 <_free_r+0x46>
 8015f0c:	6811      	ldr	r1, [r2, #0]
 8015f0e:	1855      	adds	r5, r2, r1
 8015f10:	42a5      	cmp	r5, r4
 8015f12:	d10b      	bne.n	8015f2c <_free_r+0x70>
 8015f14:	6824      	ldr	r4, [r4, #0]
 8015f16:	4421      	add	r1, r4
 8015f18:	1854      	adds	r4, r2, r1
 8015f1a:	42a3      	cmp	r3, r4
 8015f1c:	6011      	str	r1, [r2, #0]
 8015f1e:	d1e0      	bne.n	8015ee2 <_free_r+0x26>
 8015f20:	681c      	ldr	r4, [r3, #0]
 8015f22:	685b      	ldr	r3, [r3, #4]
 8015f24:	6053      	str	r3, [r2, #4]
 8015f26:	4421      	add	r1, r4
 8015f28:	6011      	str	r1, [r2, #0]
 8015f2a:	e7da      	b.n	8015ee2 <_free_r+0x26>
 8015f2c:	d902      	bls.n	8015f34 <_free_r+0x78>
 8015f2e:	230c      	movs	r3, #12
 8015f30:	6003      	str	r3, [r0, #0]
 8015f32:	e7d6      	b.n	8015ee2 <_free_r+0x26>
 8015f34:	6825      	ldr	r5, [r4, #0]
 8015f36:	1961      	adds	r1, r4, r5
 8015f38:	428b      	cmp	r3, r1
 8015f3a:	bf04      	itt	eq
 8015f3c:	6819      	ldreq	r1, [r3, #0]
 8015f3e:	685b      	ldreq	r3, [r3, #4]
 8015f40:	6063      	str	r3, [r4, #4]
 8015f42:	bf04      	itt	eq
 8015f44:	1949      	addeq	r1, r1, r5
 8015f46:	6021      	streq	r1, [r4, #0]
 8015f48:	6054      	str	r4, [r2, #4]
 8015f4a:	e7ca      	b.n	8015ee2 <_free_r+0x26>
 8015f4c:	b003      	add	sp, #12
 8015f4e:	bd30      	pop	{r4, r5, pc}
 8015f50:	20005c10 	.word	0x20005c10

08015f54 <__ssputs_r>:
 8015f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f58:	688e      	ldr	r6, [r1, #8]
 8015f5a:	429e      	cmp	r6, r3
 8015f5c:	4682      	mov	sl, r0
 8015f5e:	460c      	mov	r4, r1
 8015f60:	4690      	mov	r8, r2
 8015f62:	461f      	mov	r7, r3
 8015f64:	d838      	bhi.n	8015fd8 <__ssputs_r+0x84>
 8015f66:	898a      	ldrh	r2, [r1, #12]
 8015f68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015f6c:	d032      	beq.n	8015fd4 <__ssputs_r+0x80>
 8015f6e:	6825      	ldr	r5, [r4, #0]
 8015f70:	6909      	ldr	r1, [r1, #16]
 8015f72:	eba5 0901 	sub.w	r9, r5, r1
 8015f76:	6965      	ldr	r5, [r4, #20]
 8015f78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015f7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015f80:	3301      	adds	r3, #1
 8015f82:	444b      	add	r3, r9
 8015f84:	106d      	asrs	r5, r5, #1
 8015f86:	429d      	cmp	r5, r3
 8015f88:	bf38      	it	cc
 8015f8a:	461d      	movcc	r5, r3
 8015f8c:	0553      	lsls	r3, r2, #21
 8015f8e:	d531      	bpl.n	8015ff4 <__ssputs_r+0xa0>
 8015f90:	4629      	mov	r1, r5
 8015f92:	f7fd fd69 	bl	8013a68 <_malloc_r>
 8015f96:	4606      	mov	r6, r0
 8015f98:	b950      	cbnz	r0, 8015fb0 <__ssputs_r+0x5c>
 8015f9a:	230c      	movs	r3, #12
 8015f9c:	f8ca 3000 	str.w	r3, [sl]
 8015fa0:	89a3      	ldrh	r3, [r4, #12]
 8015fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fa6:	81a3      	strh	r3, [r4, #12]
 8015fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8015fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fb0:	6921      	ldr	r1, [r4, #16]
 8015fb2:	464a      	mov	r2, r9
 8015fb4:	f7fd fd21 	bl	80139fa <memcpy>
 8015fb8:	89a3      	ldrh	r3, [r4, #12]
 8015fba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015fc2:	81a3      	strh	r3, [r4, #12]
 8015fc4:	6126      	str	r6, [r4, #16]
 8015fc6:	6165      	str	r5, [r4, #20]
 8015fc8:	444e      	add	r6, r9
 8015fca:	eba5 0509 	sub.w	r5, r5, r9
 8015fce:	6026      	str	r6, [r4, #0]
 8015fd0:	60a5      	str	r5, [r4, #8]
 8015fd2:	463e      	mov	r6, r7
 8015fd4:	42be      	cmp	r6, r7
 8015fd6:	d900      	bls.n	8015fda <__ssputs_r+0x86>
 8015fd8:	463e      	mov	r6, r7
 8015fda:	6820      	ldr	r0, [r4, #0]
 8015fdc:	4632      	mov	r2, r6
 8015fde:	4641      	mov	r1, r8
 8015fe0:	f000 fae4 	bl	80165ac <memmove>
 8015fe4:	68a3      	ldr	r3, [r4, #8]
 8015fe6:	1b9b      	subs	r3, r3, r6
 8015fe8:	60a3      	str	r3, [r4, #8]
 8015fea:	6823      	ldr	r3, [r4, #0]
 8015fec:	4433      	add	r3, r6
 8015fee:	6023      	str	r3, [r4, #0]
 8015ff0:	2000      	movs	r0, #0
 8015ff2:	e7db      	b.n	8015fac <__ssputs_r+0x58>
 8015ff4:	462a      	mov	r2, r5
 8015ff6:	f000 faf3 	bl	80165e0 <_realloc_r>
 8015ffa:	4606      	mov	r6, r0
 8015ffc:	2800      	cmp	r0, #0
 8015ffe:	d1e1      	bne.n	8015fc4 <__ssputs_r+0x70>
 8016000:	6921      	ldr	r1, [r4, #16]
 8016002:	4650      	mov	r0, sl
 8016004:	f7ff ff5a 	bl	8015ebc <_free_r>
 8016008:	e7c7      	b.n	8015f9a <__ssputs_r+0x46>
	...

0801600c <_svfiprintf_r>:
 801600c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016010:	4698      	mov	r8, r3
 8016012:	898b      	ldrh	r3, [r1, #12]
 8016014:	061b      	lsls	r3, r3, #24
 8016016:	b09d      	sub	sp, #116	; 0x74
 8016018:	4607      	mov	r7, r0
 801601a:	460d      	mov	r5, r1
 801601c:	4614      	mov	r4, r2
 801601e:	d50e      	bpl.n	801603e <_svfiprintf_r+0x32>
 8016020:	690b      	ldr	r3, [r1, #16]
 8016022:	b963      	cbnz	r3, 801603e <_svfiprintf_r+0x32>
 8016024:	2140      	movs	r1, #64	; 0x40
 8016026:	f7fd fd1f 	bl	8013a68 <_malloc_r>
 801602a:	6028      	str	r0, [r5, #0]
 801602c:	6128      	str	r0, [r5, #16]
 801602e:	b920      	cbnz	r0, 801603a <_svfiprintf_r+0x2e>
 8016030:	230c      	movs	r3, #12
 8016032:	603b      	str	r3, [r7, #0]
 8016034:	f04f 30ff 	mov.w	r0, #4294967295
 8016038:	e0d1      	b.n	80161de <_svfiprintf_r+0x1d2>
 801603a:	2340      	movs	r3, #64	; 0x40
 801603c:	616b      	str	r3, [r5, #20]
 801603e:	2300      	movs	r3, #0
 8016040:	9309      	str	r3, [sp, #36]	; 0x24
 8016042:	2320      	movs	r3, #32
 8016044:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016048:	f8cd 800c 	str.w	r8, [sp, #12]
 801604c:	2330      	movs	r3, #48	; 0x30
 801604e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80161f8 <_svfiprintf_r+0x1ec>
 8016052:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016056:	f04f 0901 	mov.w	r9, #1
 801605a:	4623      	mov	r3, r4
 801605c:	469a      	mov	sl, r3
 801605e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016062:	b10a      	cbz	r2, 8016068 <_svfiprintf_r+0x5c>
 8016064:	2a25      	cmp	r2, #37	; 0x25
 8016066:	d1f9      	bne.n	801605c <_svfiprintf_r+0x50>
 8016068:	ebba 0b04 	subs.w	fp, sl, r4
 801606c:	d00b      	beq.n	8016086 <_svfiprintf_r+0x7a>
 801606e:	465b      	mov	r3, fp
 8016070:	4622      	mov	r2, r4
 8016072:	4629      	mov	r1, r5
 8016074:	4638      	mov	r0, r7
 8016076:	f7ff ff6d 	bl	8015f54 <__ssputs_r>
 801607a:	3001      	adds	r0, #1
 801607c:	f000 80aa 	beq.w	80161d4 <_svfiprintf_r+0x1c8>
 8016080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016082:	445a      	add	r2, fp
 8016084:	9209      	str	r2, [sp, #36]	; 0x24
 8016086:	f89a 3000 	ldrb.w	r3, [sl]
 801608a:	2b00      	cmp	r3, #0
 801608c:	f000 80a2 	beq.w	80161d4 <_svfiprintf_r+0x1c8>
 8016090:	2300      	movs	r3, #0
 8016092:	f04f 32ff 	mov.w	r2, #4294967295
 8016096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801609a:	f10a 0a01 	add.w	sl, sl, #1
 801609e:	9304      	str	r3, [sp, #16]
 80160a0:	9307      	str	r3, [sp, #28]
 80160a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80160a6:	931a      	str	r3, [sp, #104]	; 0x68
 80160a8:	4654      	mov	r4, sl
 80160aa:	2205      	movs	r2, #5
 80160ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160b0:	4851      	ldr	r0, [pc, #324]	; (80161f8 <_svfiprintf_r+0x1ec>)
 80160b2:	f7ea f895 	bl	80001e0 <memchr>
 80160b6:	9a04      	ldr	r2, [sp, #16]
 80160b8:	b9d8      	cbnz	r0, 80160f2 <_svfiprintf_r+0xe6>
 80160ba:	06d0      	lsls	r0, r2, #27
 80160bc:	bf44      	itt	mi
 80160be:	2320      	movmi	r3, #32
 80160c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80160c4:	0711      	lsls	r1, r2, #28
 80160c6:	bf44      	itt	mi
 80160c8:	232b      	movmi	r3, #43	; 0x2b
 80160ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80160ce:	f89a 3000 	ldrb.w	r3, [sl]
 80160d2:	2b2a      	cmp	r3, #42	; 0x2a
 80160d4:	d015      	beq.n	8016102 <_svfiprintf_r+0xf6>
 80160d6:	9a07      	ldr	r2, [sp, #28]
 80160d8:	4654      	mov	r4, sl
 80160da:	2000      	movs	r0, #0
 80160dc:	f04f 0c0a 	mov.w	ip, #10
 80160e0:	4621      	mov	r1, r4
 80160e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80160e6:	3b30      	subs	r3, #48	; 0x30
 80160e8:	2b09      	cmp	r3, #9
 80160ea:	d94e      	bls.n	801618a <_svfiprintf_r+0x17e>
 80160ec:	b1b0      	cbz	r0, 801611c <_svfiprintf_r+0x110>
 80160ee:	9207      	str	r2, [sp, #28]
 80160f0:	e014      	b.n	801611c <_svfiprintf_r+0x110>
 80160f2:	eba0 0308 	sub.w	r3, r0, r8
 80160f6:	fa09 f303 	lsl.w	r3, r9, r3
 80160fa:	4313      	orrs	r3, r2
 80160fc:	9304      	str	r3, [sp, #16]
 80160fe:	46a2      	mov	sl, r4
 8016100:	e7d2      	b.n	80160a8 <_svfiprintf_r+0x9c>
 8016102:	9b03      	ldr	r3, [sp, #12]
 8016104:	1d19      	adds	r1, r3, #4
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	9103      	str	r1, [sp, #12]
 801610a:	2b00      	cmp	r3, #0
 801610c:	bfbb      	ittet	lt
 801610e:	425b      	neglt	r3, r3
 8016110:	f042 0202 	orrlt.w	r2, r2, #2
 8016114:	9307      	strge	r3, [sp, #28]
 8016116:	9307      	strlt	r3, [sp, #28]
 8016118:	bfb8      	it	lt
 801611a:	9204      	strlt	r2, [sp, #16]
 801611c:	7823      	ldrb	r3, [r4, #0]
 801611e:	2b2e      	cmp	r3, #46	; 0x2e
 8016120:	d10c      	bne.n	801613c <_svfiprintf_r+0x130>
 8016122:	7863      	ldrb	r3, [r4, #1]
 8016124:	2b2a      	cmp	r3, #42	; 0x2a
 8016126:	d135      	bne.n	8016194 <_svfiprintf_r+0x188>
 8016128:	9b03      	ldr	r3, [sp, #12]
 801612a:	1d1a      	adds	r2, r3, #4
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	9203      	str	r2, [sp, #12]
 8016130:	2b00      	cmp	r3, #0
 8016132:	bfb8      	it	lt
 8016134:	f04f 33ff 	movlt.w	r3, #4294967295
 8016138:	3402      	adds	r4, #2
 801613a:	9305      	str	r3, [sp, #20]
 801613c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016208 <_svfiprintf_r+0x1fc>
 8016140:	7821      	ldrb	r1, [r4, #0]
 8016142:	2203      	movs	r2, #3
 8016144:	4650      	mov	r0, sl
 8016146:	f7ea f84b 	bl	80001e0 <memchr>
 801614a:	b140      	cbz	r0, 801615e <_svfiprintf_r+0x152>
 801614c:	2340      	movs	r3, #64	; 0x40
 801614e:	eba0 000a 	sub.w	r0, r0, sl
 8016152:	fa03 f000 	lsl.w	r0, r3, r0
 8016156:	9b04      	ldr	r3, [sp, #16]
 8016158:	4303      	orrs	r3, r0
 801615a:	3401      	adds	r4, #1
 801615c:	9304      	str	r3, [sp, #16]
 801615e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016162:	4826      	ldr	r0, [pc, #152]	; (80161fc <_svfiprintf_r+0x1f0>)
 8016164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016168:	2206      	movs	r2, #6
 801616a:	f7ea f839 	bl	80001e0 <memchr>
 801616e:	2800      	cmp	r0, #0
 8016170:	d038      	beq.n	80161e4 <_svfiprintf_r+0x1d8>
 8016172:	4b23      	ldr	r3, [pc, #140]	; (8016200 <_svfiprintf_r+0x1f4>)
 8016174:	bb1b      	cbnz	r3, 80161be <_svfiprintf_r+0x1b2>
 8016176:	9b03      	ldr	r3, [sp, #12]
 8016178:	3307      	adds	r3, #7
 801617a:	f023 0307 	bic.w	r3, r3, #7
 801617e:	3308      	adds	r3, #8
 8016180:	9303      	str	r3, [sp, #12]
 8016182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016184:	4433      	add	r3, r6
 8016186:	9309      	str	r3, [sp, #36]	; 0x24
 8016188:	e767      	b.n	801605a <_svfiprintf_r+0x4e>
 801618a:	fb0c 3202 	mla	r2, ip, r2, r3
 801618e:	460c      	mov	r4, r1
 8016190:	2001      	movs	r0, #1
 8016192:	e7a5      	b.n	80160e0 <_svfiprintf_r+0xd4>
 8016194:	2300      	movs	r3, #0
 8016196:	3401      	adds	r4, #1
 8016198:	9305      	str	r3, [sp, #20]
 801619a:	4619      	mov	r1, r3
 801619c:	f04f 0c0a 	mov.w	ip, #10
 80161a0:	4620      	mov	r0, r4
 80161a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80161a6:	3a30      	subs	r2, #48	; 0x30
 80161a8:	2a09      	cmp	r2, #9
 80161aa:	d903      	bls.n	80161b4 <_svfiprintf_r+0x1a8>
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d0c5      	beq.n	801613c <_svfiprintf_r+0x130>
 80161b0:	9105      	str	r1, [sp, #20]
 80161b2:	e7c3      	b.n	801613c <_svfiprintf_r+0x130>
 80161b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80161b8:	4604      	mov	r4, r0
 80161ba:	2301      	movs	r3, #1
 80161bc:	e7f0      	b.n	80161a0 <_svfiprintf_r+0x194>
 80161be:	ab03      	add	r3, sp, #12
 80161c0:	9300      	str	r3, [sp, #0]
 80161c2:	462a      	mov	r2, r5
 80161c4:	4b0f      	ldr	r3, [pc, #60]	; (8016204 <_svfiprintf_r+0x1f8>)
 80161c6:	a904      	add	r1, sp, #16
 80161c8:	4638      	mov	r0, r7
 80161ca:	f7fd fd61 	bl	8013c90 <_printf_float>
 80161ce:	1c42      	adds	r2, r0, #1
 80161d0:	4606      	mov	r6, r0
 80161d2:	d1d6      	bne.n	8016182 <_svfiprintf_r+0x176>
 80161d4:	89ab      	ldrh	r3, [r5, #12]
 80161d6:	065b      	lsls	r3, r3, #25
 80161d8:	f53f af2c 	bmi.w	8016034 <_svfiprintf_r+0x28>
 80161dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80161de:	b01d      	add	sp, #116	; 0x74
 80161e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161e4:	ab03      	add	r3, sp, #12
 80161e6:	9300      	str	r3, [sp, #0]
 80161e8:	462a      	mov	r2, r5
 80161ea:	4b06      	ldr	r3, [pc, #24]	; (8016204 <_svfiprintf_r+0x1f8>)
 80161ec:	a904      	add	r1, sp, #16
 80161ee:	4638      	mov	r0, r7
 80161f0:	f7fd fff2 	bl	80141d8 <_printf_i>
 80161f4:	e7eb      	b.n	80161ce <_svfiprintf_r+0x1c2>
 80161f6:	bf00      	nop
 80161f8:	0801aca4 	.word	0x0801aca4
 80161fc:	0801acae 	.word	0x0801acae
 8016200:	08013c91 	.word	0x08013c91
 8016204:	08015f55 	.word	0x08015f55
 8016208:	0801acaa 	.word	0x0801acaa

0801620c <__sfputc_r>:
 801620c:	6893      	ldr	r3, [r2, #8]
 801620e:	3b01      	subs	r3, #1
 8016210:	2b00      	cmp	r3, #0
 8016212:	b410      	push	{r4}
 8016214:	6093      	str	r3, [r2, #8]
 8016216:	da08      	bge.n	801622a <__sfputc_r+0x1e>
 8016218:	6994      	ldr	r4, [r2, #24]
 801621a:	42a3      	cmp	r3, r4
 801621c:	db01      	blt.n	8016222 <__sfputc_r+0x16>
 801621e:	290a      	cmp	r1, #10
 8016220:	d103      	bne.n	801622a <__sfputc_r+0x1e>
 8016222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016226:	f7fe b9ff 	b.w	8014628 <__swbuf_r>
 801622a:	6813      	ldr	r3, [r2, #0]
 801622c:	1c58      	adds	r0, r3, #1
 801622e:	6010      	str	r0, [r2, #0]
 8016230:	7019      	strb	r1, [r3, #0]
 8016232:	4608      	mov	r0, r1
 8016234:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016238:	4770      	bx	lr

0801623a <__sfputs_r>:
 801623a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801623c:	4606      	mov	r6, r0
 801623e:	460f      	mov	r7, r1
 8016240:	4614      	mov	r4, r2
 8016242:	18d5      	adds	r5, r2, r3
 8016244:	42ac      	cmp	r4, r5
 8016246:	d101      	bne.n	801624c <__sfputs_r+0x12>
 8016248:	2000      	movs	r0, #0
 801624a:	e007      	b.n	801625c <__sfputs_r+0x22>
 801624c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016250:	463a      	mov	r2, r7
 8016252:	4630      	mov	r0, r6
 8016254:	f7ff ffda 	bl	801620c <__sfputc_r>
 8016258:	1c43      	adds	r3, r0, #1
 801625a:	d1f3      	bne.n	8016244 <__sfputs_r+0xa>
 801625c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016260 <_vfiprintf_r>:
 8016260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016264:	460d      	mov	r5, r1
 8016266:	b09d      	sub	sp, #116	; 0x74
 8016268:	4614      	mov	r4, r2
 801626a:	4698      	mov	r8, r3
 801626c:	4606      	mov	r6, r0
 801626e:	b118      	cbz	r0, 8016278 <_vfiprintf_r+0x18>
 8016270:	6983      	ldr	r3, [r0, #24]
 8016272:	b90b      	cbnz	r3, 8016278 <_vfiprintf_r+0x18>
 8016274:	f7fd fafc 	bl	8013870 <__sinit>
 8016278:	4b89      	ldr	r3, [pc, #548]	; (80164a0 <_vfiprintf_r+0x240>)
 801627a:	429d      	cmp	r5, r3
 801627c:	d11b      	bne.n	80162b6 <_vfiprintf_r+0x56>
 801627e:	6875      	ldr	r5, [r6, #4]
 8016280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016282:	07d9      	lsls	r1, r3, #31
 8016284:	d405      	bmi.n	8016292 <_vfiprintf_r+0x32>
 8016286:	89ab      	ldrh	r3, [r5, #12]
 8016288:	059a      	lsls	r2, r3, #22
 801628a:	d402      	bmi.n	8016292 <_vfiprintf_r+0x32>
 801628c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801628e:	f7fd fbb2 	bl	80139f6 <__retarget_lock_acquire_recursive>
 8016292:	89ab      	ldrh	r3, [r5, #12]
 8016294:	071b      	lsls	r3, r3, #28
 8016296:	d501      	bpl.n	801629c <_vfiprintf_r+0x3c>
 8016298:	692b      	ldr	r3, [r5, #16]
 801629a:	b9eb      	cbnz	r3, 80162d8 <_vfiprintf_r+0x78>
 801629c:	4629      	mov	r1, r5
 801629e:	4630      	mov	r0, r6
 80162a0:	f7fe fa26 	bl	80146f0 <__swsetup_r>
 80162a4:	b1c0      	cbz	r0, 80162d8 <_vfiprintf_r+0x78>
 80162a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80162a8:	07dc      	lsls	r4, r3, #31
 80162aa:	d50e      	bpl.n	80162ca <_vfiprintf_r+0x6a>
 80162ac:	f04f 30ff 	mov.w	r0, #4294967295
 80162b0:	b01d      	add	sp, #116	; 0x74
 80162b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162b6:	4b7b      	ldr	r3, [pc, #492]	; (80164a4 <_vfiprintf_r+0x244>)
 80162b8:	429d      	cmp	r5, r3
 80162ba:	d101      	bne.n	80162c0 <_vfiprintf_r+0x60>
 80162bc:	68b5      	ldr	r5, [r6, #8]
 80162be:	e7df      	b.n	8016280 <_vfiprintf_r+0x20>
 80162c0:	4b79      	ldr	r3, [pc, #484]	; (80164a8 <_vfiprintf_r+0x248>)
 80162c2:	429d      	cmp	r5, r3
 80162c4:	bf08      	it	eq
 80162c6:	68f5      	ldreq	r5, [r6, #12]
 80162c8:	e7da      	b.n	8016280 <_vfiprintf_r+0x20>
 80162ca:	89ab      	ldrh	r3, [r5, #12]
 80162cc:	0598      	lsls	r0, r3, #22
 80162ce:	d4ed      	bmi.n	80162ac <_vfiprintf_r+0x4c>
 80162d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80162d2:	f7fd fb91 	bl	80139f8 <__retarget_lock_release_recursive>
 80162d6:	e7e9      	b.n	80162ac <_vfiprintf_r+0x4c>
 80162d8:	2300      	movs	r3, #0
 80162da:	9309      	str	r3, [sp, #36]	; 0x24
 80162dc:	2320      	movs	r3, #32
 80162de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80162e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80162e6:	2330      	movs	r3, #48	; 0x30
 80162e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80164ac <_vfiprintf_r+0x24c>
 80162ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80162f0:	f04f 0901 	mov.w	r9, #1
 80162f4:	4623      	mov	r3, r4
 80162f6:	469a      	mov	sl, r3
 80162f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80162fc:	b10a      	cbz	r2, 8016302 <_vfiprintf_r+0xa2>
 80162fe:	2a25      	cmp	r2, #37	; 0x25
 8016300:	d1f9      	bne.n	80162f6 <_vfiprintf_r+0x96>
 8016302:	ebba 0b04 	subs.w	fp, sl, r4
 8016306:	d00b      	beq.n	8016320 <_vfiprintf_r+0xc0>
 8016308:	465b      	mov	r3, fp
 801630a:	4622      	mov	r2, r4
 801630c:	4629      	mov	r1, r5
 801630e:	4630      	mov	r0, r6
 8016310:	f7ff ff93 	bl	801623a <__sfputs_r>
 8016314:	3001      	adds	r0, #1
 8016316:	f000 80aa 	beq.w	801646e <_vfiprintf_r+0x20e>
 801631a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801631c:	445a      	add	r2, fp
 801631e:	9209      	str	r2, [sp, #36]	; 0x24
 8016320:	f89a 3000 	ldrb.w	r3, [sl]
 8016324:	2b00      	cmp	r3, #0
 8016326:	f000 80a2 	beq.w	801646e <_vfiprintf_r+0x20e>
 801632a:	2300      	movs	r3, #0
 801632c:	f04f 32ff 	mov.w	r2, #4294967295
 8016330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016334:	f10a 0a01 	add.w	sl, sl, #1
 8016338:	9304      	str	r3, [sp, #16]
 801633a:	9307      	str	r3, [sp, #28]
 801633c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016340:	931a      	str	r3, [sp, #104]	; 0x68
 8016342:	4654      	mov	r4, sl
 8016344:	2205      	movs	r2, #5
 8016346:	f814 1b01 	ldrb.w	r1, [r4], #1
 801634a:	4858      	ldr	r0, [pc, #352]	; (80164ac <_vfiprintf_r+0x24c>)
 801634c:	f7e9 ff48 	bl	80001e0 <memchr>
 8016350:	9a04      	ldr	r2, [sp, #16]
 8016352:	b9d8      	cbnz	r0, 801638c <_vfiprintf_r+0x12c>
 8016354:	06d1      	lsls	r1, r2, #27
 8016356:	bf44      	itt	mi
 8016358:	2320      	movmi	r3, #32
 801635a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801635e:	0713      	lsls	r3, r2, #28
 8016360:	bf44      	itt	mi
 8016362:	232b      	movmi	r3, #43	; 0x2b
 8016364:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016368:	f89a 3000 	ldrb.w	r3, [sl]
 801636c:	2b2a      	cmp	r3, #42	; 0x2a
 801636e:	d015      	beq.n	801639c <_vfiprintf_r+0x13c>
 8016370:	9a07      	ldr	r2, [sp, #28]
 8016372:	4654      	mov	r4, sl
 8016374:	2000      	movs	r0, #0
 8016376:	f04f 0c0a 	mov.w	ip, #10
 801637a:	4621      	mov	r1, r4
 801637c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016380:	3b30      	subs	r3, #48	; 0x30
 8016382:	2b09      	cmp	r3, #9
 8016384:	d94e      	bls.n	8016424 <_vfiprintf_r+0x1c4>
 8016386:	b1b0      	cbz	r0, 80163b6 <_vfiprintf_r+0x156>
 8016388:	9207      	str	r2, [sp, #28]
 801638a:	e014      	b.n	80163b6 <_vfiprintf_r+0x156>
 801638c:	eba0 0308 	sub.w	r3, r0, r8
 8016390:	fa09 f303 	lsl.w	r3, r9, r3
 8016394:	4313      	orrs	r3, r2
 8016396:	9304      	str	r3, [sp, #16]
 8016398:	46a2      	mov	sl, r4
 801639a:	e7d2      	b.n	8016342 <_vfiprintf_r+0xe2>
 801639c:	9b03      	ldr	r3, [sp, #12]
 801639e:	1d19      	adds	r1, r3, #4
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	9103      	str	r1, [sp, #12]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	bfbb      	ittet	lt
 80163a8:	425b      	neglt	r3, r3
 80163aa:	f042 0202 	orrlt.w	r2, r2, #2
 80163ae:	9307      	strge	r3, [sp, #28]
 80163b0:	9307      	strlt	r3, [sp, #28]
 80163b2:	bfb8      	it	lt
 80163b4:	9204      	strlt	r2, [sp, #16]
 80163b6:	7823      	ldrb	r3, [r4, #0]
 80163b8:	2b2e      	cmp	r3, #46	; 0x2e
 80163ba:	d10c      	bne.n	80163d6 <_vfiprintf_r+0x176>
 80163bc:	7863      	ldrb	r3, [r4, #1]
 80163be:	2b2a      	cmp	r3, #42	; 0x2a
 80163c0:	d135      	bne.n	801642e <_vfiprintf_r+0x1ce>
 80163c2:	9b03      	ldr	r3, [sp, #12]
 80163c4:	1d1a      	adds	r2, r3, #4
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	9203      	str	r2, [sp, #12]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	bfb8      	it	lt
 80163ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80163d2:	3402      	adds	r4, #2
 80163d4:	9305      	str	r3, [sp, #20]
 80163d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80164bc <_vfiprintf_r+0x25c>
 80163da:	7821      	ldrb	r1, [r4, #0]
 80163dc:	2203      	movs	r2, #3
 80163de:	4650      	mov	r0, sl
 80163e0:	f7e9 fefe 	bl	80001e0 <memchr>
 80163e4:	b140      	cbz	r0, 80163f8 <_vfiprintf_r+0x198>
 80163e6:	2340      	movs	r3, #64	; 0x40
 80163e8:	eba0 000a 	sub.w	r0, r0, sl
 80163ec:	fa03 f000 	lsl.w	r0, r3, r0
 80163f0:	9b04      	ldr	r3, [sp, #16]
 80163f2:	4303      	orrs	r3, r0
 80163f4:	3401      	adds	r4, #1
 80163f6:	9304      	str	r3, [sp, #16]
 80163f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163fc:	482c      	ldr	r0, [pc, #176]	; (80164b0 <_vfiprintf_r+0x250>)
 80163fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016402:	2206      	movs	r2, #6
 8016404:	f7e9 feec 	bl	80001e0 <memchr>
 8016408:	2800      	cmp	r0, #0
 801640a:	d03f      	beq.n	801648c <_vfiprintf_r+0x22c>
 801640c:	4b29      	ldr	r3, [pc, #164]	; (80164b4 <_vfiprintf_r+0x254>)
 801640e:	bb1b      	cbnz	r3, 8016458 <_vfiprintf_r+0x1f8>
 8016410:	9b03      	ldr	r3, [sp, #12]
 8016412:	3307      	adds	r3, #7
 8016414:	f023 0307 	bic.w	r3, r3, #7
 8016418:	3308      	adds	r3, #8
 801641a:	9303      	str	r3, [sp, #12]
 801641c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801641e:	443b      	add	r3, r7
 8016420:	9309      	str	r3, [sp, #36]	; 0x24
 8016422:	e767      	b.n	80162f4 <_vfiprintf_r+0x94>
 8016424:	fb0c 3202 	mla	r2, ip, r2, r3
 8016428:	460c      	mov	r4, r1
 801642a:	2001      	movs	r0, #1
 801642c:	e7a5      	b.n	801637a <_vfiprintf_r+0x11a>
 801642e:	2300      	movs	r3, #0
 8016430:	3401      	adds	r4, #1
 8016432:	9305      	str	r3, [sp, #20]
 8016434:	4619      	mov	r1, r3
 8016436:	f04f 0c0a 	mov.w	ip, #10
 801643a:	4620      	mov	r0, r4
 801643c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016440:	3a30      	subs	r2, #48	; 0x30
 8016442:	2a09      	cmp	r2, #9
 8016444:	d903      	bls.n	801644e <_vfiprintf_r+0x1ee>
 8016446:	2b00      	cmp	r3, #0
 8016448:	d0c5      	beq.n	80163d6 <_vfiprintf_r+0x176>
 801644a:	9105      	str	r1, [sp, #20]
 801644c:	e7c3      	b.n	80163d6 <_vfiprintf_r+0x176>
 801644e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016452:	4604      	mov	r4, r0
 8016454:	2301      	movs	r3, #1
 8016456:	e7f0      	b.n	801643a <_vfiprintf_r+0x1da>
 8016458:	ab03      	add	r3, sp, #12
 801645a:	9300      	str	r3, [sp, #0]
 801645c:	462a      	mov	r2, r5
 801645e:	4b16      	ldr	r3, [pc, #88]	; (80164b8 <_vfiprintf_r+0x258>)
 8016460:	a904      	add	r1, sp, #16
 8016462:	4630      	mov	r0, r6
 8016464:	f7fd fc14 	bl	8013c90 <_printf_float>
 8016468:	4607      	mov	r7, r0
 801646a:	1c78      	adds	r0, r7, #1
 801646c:	d1d6      	bne.n	801641c <_vfiprintf_r+0x1bc>
 801646e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016470:	07d9      	lsls	r1, r3, #31
 8016472:	d405      	bmi.n	8016480 <_vfiprintf_r+0x220>
 8016474:	89ab      	ldrh	r3, [r5, #12]
 8016476:	059a      	lsls	r2, r3, #22
 8016478:	d402      	bmi.n	8016480 <_vfiprintf_r+0x220>
 801647a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801647c:	f7fd fabc 	bl	80139f8 <__retarget_lock_release_recursive>
 8016480:	89ab      	ldrh	r3, [r5, #12]
 8016482:	065b      	lsls	r3, r3, #25
 8016484:	f53f af12 	bmi.w	80162ac <_vfiprintf_r+0x4c>
 8016488:	9809      	ldr	r0, [sp, #36]	; 0x24
 801648a:	e711      	b.n	80162b0 <_vfiprintf_r+0x50>
 801648c:	ab03      	add	r3, sp, #12
 801648e:	9300      	str	r3, [sp, #0]
 8016490:	462a      	mov	r2, r5
 8016492:	4b09      	ldr	r3, [pc, #36]	; (80164b8 <_vfiprintf_r+0x258>)
 8016494:	a904      	add	r1, sp, #16
 8016496:	4630      	mov	r0, r6
 8016498:	f7fd fe9e 	bl	80141d8 <_printf_i>
 801649c:	e7e4      	b.n	8016468 <_vfiprintf_r+0x208>
 801649e:	bf00      	nop
 80164a0:	0801aa40 	.word	0x0801aa40
 80164a4:	0801aa60 	.word	0x0801aa60
 80164a8:	0801aa20 	.word	0x0801aa20
 80164ac:	0801aca4 	.word	0x0801aca4
 80164b0:	0801acae 	.word	0x0801acae
 80164b4:	08013c91 	.word	0x08013c91
 80164b8:	0801623b 	.word	0x0801623b
 80164bc:	0801acaa 	.word	0x0801acaa

080164c0 <_read_r>:
 80164c0:	b538      	push	{r3, r4, r5, lr}
 80164c2:	4d07      	ldr	r5, [pc, #28]	; (80164e0 <_read_r+0x20>)
 80164c4:	4604      	mov	r4, r0
 80164c6:	4608      	mov	r0, r1
 80164c8:	4611      	mov	r1, r2
 80164ca:	2200      	movs	r2, #0
 80164cc:	602a      	str	r2, [r5, #0]
 80164ce:	461a      	mov	r2, r3
 80164d0:	f7fc ff09 	bl	80132e6 <_read>
 80164d4:	1c43      	adds	r3, r0, #1
 80164d6:	d102      	bne.n	80164de <_read_r+0x1e>
 80164d8:	682b      	ldr	r3, [r5, #0]
 80164da:	b103      	cbz	r3, 80164de <_read_r+0x1e>
 80164dc:	6023      	str	r3, [r4, #0]
 80164de:	bd38      	pop	{r3, r4, r5, pc}
 80164e0:	20005c18 	.word	0x20005c18

080164e4 <__assert_func>:
 80164e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80164e6:	4614      	mov	r4, r2
 80164e8:	461a      	mov	r2, r3
 80164ea:	4b09      	ldr	r3, [pc, #36]	; (8016510 <__assert_func+0x2c>)
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	4605      	mov	r5, r0
 80164f0:	68d8      	ldr	r0, [r3, #12]
 80164f2:	b14c      	cbz	r4, 8016508 <__assert_func+0x24>
 80164f4:	4b07      	ldr	r3, [pc, #28]	; (8016514 <__assert_func+0x30>)
 80164f6:	9100      	str	r1, [sp, #0]
 80164f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80164fc:	4906      	ldr	r1, [pc, #24]	; (8016518 <__assert_func+0x34>)
 80164fe:	462b      	mov	r3, r5
 8016500:	f000 f80e 	bl	8016520 <fiprintf>
 8016504:	f000 f8a8 	bl	8016658 <abort>
 8016508:	4b04      	ldr	r3, [pc, #16]	; (801651c <__assert_func+0x38>)
 801650a:	461c      	mov	r4, r3
 801650c:	e7f3      	b.n	80164f6 <__assert_func+0x12>
 801650e:	bf00      	nop
 8016510:	200000c4 	.word	0x200000c4
 8016514:	0801acb5 	.word	0x0801acb5
 8016518:	0801acc2 	.word	0x0801acc2
 801651c:	0801acf0 	.word	0x0801acf0

08016520 <fiprintf>:
 8016520:	b40e      	push	{r1, r2, r3}
 8016522:	b503      	push	{r0, r1, lr}
 8016524:	4601      	mov	r1, r0
 8016526:	ab03      	add	r3, sp, #12
 8016528:	4805      	ldr	r0, [pc, #20]	; (8016540 <fiprintf+0x20>)
 801652a:	f853 2b04 	ldr.w	r2, [r3], #4
 801652e:	6800      	ldr	r0, [r0, #0]
 8016530:	9301      	str	r3, [sp, #4]
 8016532:	f7ff fe95 	bl	8016260 <_vfiprintf_r>
 8016536:	b002      	add	sp, #8
 8016538:	f85d eb04 	ldr.w	lr, [sp], #4
 801653c:	b003      	add	sp, #12
 801653e:	4770      	bx	lr
 8016540:	200000c4 	.word	0x200000c4

08016544 <_fstat_r>:
 8016544:	b538      	push	{r3, r4, r5, lr}
 8016546:	4d07      	ldr	r5, [pc, #28]	; (8016564 <_fstat_r+0x20>)
 8016548:	2300      	movs	r3, #0
 801654a:	4604      	mov	r4, r0
 801654c:	4608      	mov	r0, r1
 801654e:	4611      	mov	r1, r2
 8016550:	602b      	str	r3, [r5, #0]
 8016552:	f7fc ffac 	bl	80134ae <_fstat>
 8016556:	1c43      	adds	r3, r0, #1
 8016558:	d102      	bne.n	8016560 <_fstat_r+0x1c>
 801655a:	682b      	ldr	r3, [r5, #0]
 801655c:	b103      	cbz	r3, 8016560 <_fstat_r+0x1c>
 801655e:	6023      	str	r3, [r4, #0]
 8016560:	bd38      	pop	{r3, r4, r5, pc}
 8016562:	bf00      	nop
 8016564:	20005c18 	.word	0x20005c18

08016568 <_isatty_r>:
 8016568:	b538      	push	{r3, r4, r5, lr}
 801656a:	4d06      	ldr	r5, [pc, #24]	; (8016584 <_isatty_r+0x1c>)
 801656c:	2300      	movs	r3, #0
 801656e:	4604      	mov	r4, r0
 8016570:	4608      	mov	r0, r1
 8016572:	602b      	str	r3, [r5, #0]
 8016574:	f7fd f902 	bl	801377c <_isatty>
 8016578:	1c43      	adds	r3, r0, #1
 801657a:	d102      	bne.n	8016582 <_isatty_r+0x1a>
 801657c:	682b      	ldr	r3, [r5, #0]
 801657e:	b103      	cbz	r3, 8016582 <_isatty_r+0x1a>
 8016580:	6023      	str	r3, [r4, #0]
 8016582:	bd38      	pop	{r3, r4, r5, pc}
 8016584:	20005c18 	.word	0x20005c18

08016588 <__ascii_mbtowc>:
 8016588:	b082      	sub	sp, #8
 801658a:	b901      	cbnz	r1, 801658e <__ascii_mbtowc+0x6>
 801658c:	a901      	add	r1, sp, #4
 801658e:	b142      	cbz	r2, 80165a2 <__ascii_mbtowc+0x1a>
 8016590:	b14b      	cbz	r3, 80165a6 <__ascii_mbtowc+0x1e>
 8016592:	7813      	ldrb	r3, [r2, #0]
 8016594:	600b      	str	r3, [r1, #0]
 8016596:	7812      	ldrb	r2, [r2, #0]
 8016598:	1e10      	subs	r0, r2, #0
 801659a:	bf18      	it	ne
 801659c:	2001      	movne	r0, #1
 801659e:	b002      	add	sp, #8
 80165a0:	4770      	bx	lr
 80165a2:	4610      	mov	r0, r2
 80165a4:	e7fb      	b.n	801659e <__ascii_mbtowc+0x16>
 80165a6:	f06f 0001 	mvn.w	r0, #1
 80165aa:	e7f8      	b.n	801659e <__ascii_mbtowc+0x16>

080165ac <memmove>:
 80165ac:	4288      	cmp	r0, r1
 80165ae:	b510      	push	{r4, lr}
 80165b0:	eb01 0402 	add.w	r4, r1, r2
 80165b4:	d902      	bls.n	80165bc <memmove+0x10>
 80165b6:	4284      	cmp	r4, r0
 80165b8:	4623      	mov	r3, r4
 80165ba:	d807      	bhi.n	80165cc <memmove+0x20>
 80165bc:	1e43      	subs	r3, r0, #1
 80165be:	42a1      	cmp	r1, r4
 80165c0:	d008      	beq.n	80165d4 <memmove+0x28>
 80165c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80165c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80165ca:	e7f8      	b.n	80165be <memmove+0x12>
 80165cc:	4402      	add	r2, r0
 80165ce:	4601      	mov	r1, r0
 80165d0:	428a      	cmp	r2, r1
 80165d2:	d100      	bne.n	80165d6 <memmove+0x2a>
 80165d4:	bd10      	pop	{r4, pc}
 80165d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80165da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80165de:	e7f7      	b.n	80165d0 <memmove+0x24>

080165e0 <_realloc_r>:
 80165e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165e4:	4680      	mov	r8, r0
 80165e6:	4614      	mov	r4, r2
 80165e8:	460e      	mov	r6, r1
 80165ea:	b921      	cbnz	r1, 80165f6 <_realloc_r+0x16>
 80165ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80165f0:	4611      	mov	r1, r2
 80165f2:	f7fd ba39 	b.w	8013a68 <_malloc_r>
 80165f6:	b92a      	cbnz	r2, 8016604 <_realloc_r+0x24>
 80165f8:	f7ff fc60 	bl	8015ebc <_free_r>
 80165fc:	4625      	mov	r5, r4
 80165fe:	4628      	mov	r0, r5
 8016600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016604:	f000 f82f 	bl	8016666 <_malloc_usable_size_r>
 8016608:	4284      	cmp	r4, r0
 801660a:	4607      	mov	r7, r0
 801660c:	d802      	bhi.n	8016614 <_realloc_r+0x34>
 801660e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016612:	d812      	bhi.n	801663a <_realloc_r+0x5a>
 8016614:	4621      	mov	r1, r4
 8016616:	4640      	mov	r0, r8
 8016618:	f7fd fa26 	bl	8013a68 <_malloc_r>
 801661c:	4605      	mov	r5, r0
 801661e:	2800      	cmp	r0, #0
 8016620:	d0ed      	beq.n	80165fe <_realloc_r+0x1e>
 8016622:	42bc      	cmp	r4, r7
 8016624:	4622      	mov	r2, r4
 8016626:	4631      	mov	r1, r6
 8016628:	bf28      	it	cs
 801662a:	463a      	movcs	r2, r7
 801662c:	f7fd f9e5 	bl	80139fa <memcpy>
 8016630:	4631      	mov	r1, r6
 8016632:	4640      	mov	r0, r8
 8016634:	f7ff fc42 	bl	8015ebc <_free_r>
 8016638:	e7e1      	b.n	80165fe <_realloc_r+0x1e>
 801663a:	4635      	mov	r5, r6
 801663c:	e7df      	b.n	80165fe <_realloc_r+0x1e>

0801663e <__ascii_wctomb>:
 801663e:	b149      	cbz	r1, 8016654 <__ascii_wctomb+0x16>
 8016640:	2aff      	cmp	r2, #255	; 0xff
 8016642:	bf85      	ittet	hi
 8016644:	238a      	movhi	r3, #138	; 0x8a
 8016646:	6003      	strhi	r3, [r0, #0]
 8016648:	700a      	strbls	r2, [r1, #0]
 801664a:	f04f 30ff 	movhi.w	r0, #4294967295
 801664e:	bf98      	it	ls
 8016650:	2001      	movls	r0, #1
 8016652:	4770      	bx	lr
 8016654:	4608      	mov	r0, r1
 8016656:	4770      	bx	lr

08016658 <abort>:
 8016658:	b508      	push	{r3, lr}
 801665a:	2006      	movs	r0, #6
 801665c:	f000 f834 	bl	80166c8 <raise>
 8016660:	2001      	movs	r0, #1
 8016662:	f000 f855 	bl	8016710 <_exit>

08016666 <_malloc_usable_size_r>:
 8016666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801666a:	1f18      	subs	r0, r3, #4
 801666c:	2b00      	cmp	r3, #0
 801666e:	bfbc      	itt	lt
 8016670:	580b      	ldrlt	r3, [r1, r0]
 8016672:	18c0      	addlt	r0, r0, r3
 8016674:	4770      	bx	lr

08016676 <_raise_r>:
 8016676:	291f      	cmp	r1, #31
 8016678:	b538      	push	{r3, r4, r5, lr}
 801667a:	4604      	mov	r4, r0
 801667c:	460d      	mov	r5, r1
 801667e:	d904      	bls.n	801668a <_raise_r+0x14>
 8016680:	2316      	movs	r3, #22
 8016682:	6003      	str	r3, [r0, #0]
 8016684:	f04f 30ff 	mov.w	r0, #4294967295
 8016688:	bd38      	pop	{r3, r4, r5, pc}
 801668a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801668c:	b112      	cbz	r2, 8016694 <_raise_r+0x1e>
 801668e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016692:	b94b      	cbnz	r3, 80166a8 <_raise_r+0x32>
 8016694:	4620      	mov	r0, r4
 8016696:	f000 f831 	bl	80166fc <_getpid_r>
 801669a:	462a      	mov	r2, r5
 801669c:	4601      	mov	r1, r0
 801669e:	4620      	mov	r0, r4
 80166a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166a4:	f000 b818 	b.w	80166d8 <_kill_r>
 80166a8:	2b01      	cmp	r3, #1
 80166aa:	d00a      	beq.n	80166c2 <_raise_r+0x4c>
 80166ac:	1c59      	adds	r1, r3, #1
 80166ae:	d103      	bne.n	80166b8 <_raise_r+0x42>
 80166b0:	2316      	movs	r3, #22
 80166b2:	6003      	str	r3, [r0, #0]
 80166b4:	2001      	movs	r0, #1
 80166b6:	e7e7      	b.n	8016688 <_raise_r+0x12>
 80166b8:	2400      	movs	r4, #0
 80166ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80166be:	4628      	mov	r0, r5
 80166c0:	4798      	blx	r3
 80166c2:	2000      	movs	r0, #0
 80166c4:	e7e0      	b.n	8016688 <_raise_r+0x12>
	...

080166c8 <raise>:
 80166c8:	4b02      	ldr	r3, [pc, #8]	; (80166d4 <raise+0xc>)
 80166ca:	4601      	mov	r1, r0
 80166cc:	6818      	ldr	r0, [r3, #0]
 80166ce:	f7ff bfd2 	b.w	8016676 <_raise_r>
 80166d2:	bf00      	nop
 80166d4:	200000c4 	.word	0x200000c4

080166d8 <_kill_r>:
 80166d8:	b538      	push	{r3, r4, r5, lr}
 80166da:	4d07      	ldr	r5, [pc, #28]	; (80166f8 <_kill_r+0x20>)
 80166dc:	2300      	movs	r3, #0
 80166de:	4604      	mov	r4, r0
 80166e0:	4608      	mov	r0, r1
 80166e2:	4611      	mov	r1, r2
 80166e4:	602b      	str	r3, [r5, #0]
 80166e6:	f000 f80b 	bl	8016700 <_kill>
 80166ea:	1c43      	adds	r3, r0, #1
 80166ec:	d102      	bne.n	80166f4 <_kill_r+0x1c>
 80166ee:	682b      	ldr	r3, [r5, #0]
 80166f0:	b103      	cbz	r3, 80166f4 <_kill_r+0x1c>
 80166f2:	6023      	str	r3, [r4, #0]
 80166f4:	bd38      	pop	{r3, r4, r5, pc}
 80166f6:	bf00      	nop
 80166f8:	20005c18 	.word	0x20005c18

080166fc <_getpid_r>:
 80166fc:	f7fc beb4 	b.w	8013468 <_getpid>

08016700 <_kill>:
 8016700:	4b02      	ldr	r3, [pc, #8]	; (801670c <_kill+0xc>)
 8016702:	2258      	movs	r2, #88	; 0x58
 8016704:	601a      	str	r2, [r3, #0]
 8016706:	f04f 30ff 	mov.w	r0, #4294967295
 801670a:	4770      	bx	lr
 801670c:	20005c18 	.word	0x20005c18

08016710 <_exit>:
 8016710:	e7fe      	b.n	8016710 <_exit>
	...

08016714 <_init>:
 8016714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016716:	bf00      	nop
 8016718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801671a:	bc08      	pop	{r3}
 801671c:	469e      	mov	lr, r3
 801671e:	4770      	bx	lr

08016720 <_fini>:
 8016720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016722:	bf00      	nop
 8016724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016726:	bc08      	pop	{r3}
 8016728:	469e      	mov	lr, r3
 801672a:	4770      	bx	lr
