
ELEC3730Ass3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015a6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000467c  08015c00  08015c00  00025c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a27c  0801a27c  00030250  2**0
                  CONTENTS
  4 .ARM          00000008  0801a27c  0801a27c  0002a27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a284  0801a284  00030250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a284  0801a284  0002a284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a288  0801a288  0002a288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0801a28c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030250  2**0
                  CONTENTS
 10 .bss          0000552c  20000250  20000250  00030250  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000577c  2000577c  00030250  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b90c  00000000  00000000  00030280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000750d  00000000  00000000  0005bb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024e0  00000000  00000000  000630a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002110  00000000  00000000  00065580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d14b  00000000  00000000  00067690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035a1f  00000000  00000000  000947db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e63b9  00000000  00000000  000ca1fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b05b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000aa3c  00000000  00000000  001b0604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  001bb040  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000003c  00000000  00000000  001bb064  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015be4 	.word	0x08015be4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	08015be4 	.word	0x08015be4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <HAL_DCMI_FrameEventCallback>:

/*
 * Entire frame is scanned
 */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	FrameXferCplt = 1;
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <HAL_DCMI_FrameEventCallback+0x1c>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	200004ec 	.word	0x200004ec

08000f0c <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	FrameXferCplt = 1;
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_DCMI_VsyncEventCallback+0x1c>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	200004ec 	.word	0x200004ec

08000f2c <HAL_DCMI_LineEventCallback>:

/*
 * Entire line is scanned
 */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	LineXferCplt = 1;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_DCMI_LineEventCallback+0x2c>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
	LineCounter++;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_DCMI_LineEventCallback+0x30>)
 8000f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	3301      	adds	r3, #1
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <HAL_DCMI_LineEventCallback+0x30>)
 8000f4a:	801a      	strh	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	200004ed 	.word	0x200004ed
 8000f5c:	200004ee 	.word	0x200004ee

08000f60 <DMA_IT_Callback_Fn>:

void DMA_IT_Callback_Fn(DMA_HandleTypeDef *_hdma)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	osSignalSet(cameraTaskHandle, 1);
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <DMA_IT_Callback_Fn+0x1c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f00d fe4c 	bl	800ec0c <osSignalSet>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000848 	.word	0x20000848

08000f80 <StartCameraTask>:
	}
}
*/

void StartCameraTask(void const * argument)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6178      	str	r0, [r7, #20]
	osSemaphoreWait(startSemHandle, osWaitForever);
 8000f88:	4b37      	ldr	r3, [pc, #220]	; (8001068 <StartCameraTask+0xe8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00d ff95 	bl	800eec0 <osSemaphoreWait>

	// Prepare to write GRAM (0x22)
	LCD_IO_WriteReg(LCD_REG_34);
 8000f96:	2022      	movs	r0, #34	; 0x22
 8000f98:	f002 f80a 	bl	8002fb0 <LCD_IO_WriteReg>

	// Start camera capture
	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)camera_buffer, CAM_BUFFER_LENGTH / 2);
 8000f9c:	4a33      	ldr	r2, [pc, #204]	; (800106c <StartCameraTask+0xec>)
 8000f9e:	23a0      	movs	r3, #160	; 0xa0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4833      	ldr	r0, [pc, #204]	; (8001070 <StartCameraTask+0xf0>)
 8000fa4:	f004 f80c 	bl	8004fc0 <HAL_DCMI_Start_DMA>

	// Set the window for the camera image
	ili9325_SetDisplayWindow(10, 10, CAM_HEIGHT/2, CAM_WIDTH/2);
 8000fa8:	23a0      	movs	r3, #160	; 0xa0
 8000faa:	2278      	movs	r2, #120	; 0x78
 8000fac:	210a      	movs	r1, #10
 8000fae:	200a      	movs	r0, #10
 8000fb0:	f002 f9ee 	bl	8003390 <ili9325_SetDisplayWindow>

	// Change update direction
	ili9325_WriteReg(LCD_REG_3, 0x1020);
 8000fb4:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f002 f9c4 	bl	8003346 <ili9325_WriteReg>

	// Register the callback function
	HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_CPLT_CB_ID, DMA_IT_Callback_Fn);
 8000fbe:	4a2d      	ldr	r2, [pc, #180]	; (8001074 <StartCameraTask+0xf4>)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	482d      	ldr	r0, [pc, #180]	; (8001078 <StartCameraTask+0xf8>)
 8000fc4:	f004 fcf0 	bl	80059a8 <HAL_DMA_RegisterCallback>

	while (1) {
		if (osMutexWait(lcdMutexHandle, osWaitForever) == osOK) {
 8000fc8:	4b2c      	ldr	r3, [pc, #176]	; (800107c <StartCameraTask+0xfc>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00d febf 	bl	800ed54 <osMutexWait>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d142      	bne.n	8001062 <StartCameraTask+0xe2>
			// Check if line transfer has been complete
			if (LineXferCplt) {
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <StartCameraTask+0x100>)
 8000fde:	f993 3000 	ldrsb.w	r3, [r3]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d038      	beq.n	8001058 <StartCameraTask+0xd8>
				// Check if end of the frame, if so reset the cursor, frame complete, and line counter
				if (FrameXferCplt) {
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <StartCameraTask+0x104>)
 8000fe8:	f993 3000 	ldrsb.w	r3, [r3]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d005      	beq.n	8000ffc <StartCameraTask+0x7c>
					FrameXferCplt = 0;
 8000ff0:	4b24      	ldr	r3, [pc, #144]	; (8001084 <StartCameraTask+0x104>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
					LineCounter = 0;
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <StartCameraTask+0x108>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	801a      	strh	r2, [r3, #0]
				}
				if (LineCounter < CAM_HEIGHT/2) {
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <StartCameraTask+0x108>)
 8000ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001002:	2b77      	cmp	r3, #119	; 0x77
 8001004:	dc1f      	bgt.n	8001046 <StartCameraTask+0xc6>
					// Set start of line and get ready to write to LCD GRAM
					ili9325_SetCursor(10 + LineCounter, 10);
 8001006:	4b20      	ldr	r3, [pc, #128]	; (8001088 <StartCameraTask+0x108>)
 8001008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100c:	b29b      	uxth	r3, r3
 800100e:	330a      	adds	r3, #10
 8001010:	b29b      	uxth	r3, r3
 8001012:	210a      	movs	r1, #10
 8001014:	4618      	mov	r0, r3
 8001016:	f002 f948 	bl	80032aa <ili9325_SetCursor>
					LCD_IO_WriteReg(LCD_REG_34);
 800101a:	2022      	movs	r0, #34	; 0x22
 800101c:	f001 ffc8 	bl	8002fb0 <LCD_IO_WriteReg>
					//		(uint32_t) &LCD_RAM, CAM_BUFFER_LENGTH/2) != HAL_OK)
					//	printf("Error.\n");
					//HAL_DMA_PollForTransfer(&hdma_memtomem_dma2_stream0, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);

					// Interrupt Mode DMA
					if (HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, (uint32_t)camera_buffer,
 8001020:	4912      	ldr	r1, [pc, #72]	; (800106c <StartCameraTask+0xec>)
 8001022:	23a0      	movs	r3, #160	; 0xa0
 8001024:	4a19      	ldr	r2, [pc, #100]	; (800108c <StartCameraTask+0x10c>)
 8001026:	4814      	ldr	r0, [pc, #80]	; (8001078 <StartCameraTask+0xf8>)
 8001028:	f004 faba 	bl	80055a0 <HAL_DMA_Start_IT>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <StartCameraTask+0xb8>
							(uint32_t)&LCD_RAM, CAM_BUFFER_LENGTH/2) != HAL_OK)
						printf("Error.\n");
 8001032:	4817      	ldr	r0, [pc, #92]	; (8001090 <StartCameraTask+0x110>)
 8001034:	f012 fce4 	bl	8013a00 <puts>
					osSignalWait(1, osWaitForever);		// TODO: Replace with semaphore
 8001038:	463b      	mov	r3, r7
 800103a:	f04f 32ff 	mov.w	r2, #4294967295
 800103e:	2101      	movs	r1, #1
 8001040:	4618      	mov	r0, r3
 8001042:	f00d fe23 	bl	800ec8c <osSignalWait>

				}
				// Converts uint16_t camera_buffer to uint32_t, so the actual length is BUFFER_LEN / 2
				HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)camera_buffer, CAM_BUFFER_LENGTH / 2);
 8001046:	4a09      	ldr	r2, [pc, #36]	; (800106c <StartCameraTask+0xec>)
 8001048:	23a0      	movs	r3, #160	; 0xa0
 800104a:	2100      	movs	r1, #0
 800104c:	4808      	ldr	r0, [pc, #32]	; (8001070 <StartCameraTask+0xf0>)
 800104e:	f003 ffb7 	bl	8004fc0 <HAL_DCMI_Start_DMA>
				LineXferCplt = 0;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <StartCameraTask+0x100>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
			}
			//osDelay(100);
			osMutexRelease(lcdMutexHandle);
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <StartCameraTask+0xfc>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f00d fec7 	bl	800edf0 <osMutexRelease>
		}
		osThreadYield();
 8001062:	f00d fcf9 	bl	800ea58 <osThreadYield>
		if (osMutexWait(lcdMutexHandle, osWaitForever) == osOK) {
 8001066:	e7af      	b.n	8000fc8 <StartCameraTask+0x48>
 8001068:	20000868 	.word	0x20000868
 800106c:	2000026c 	.word	0x2000026c
 8001070:	20000730 	.word	0x20000730
 8001074:	08000f61 	.word	0x08000f61
 8001078:	200007d0 	.word	0x200007d0
 800107c:	20000860 	.word	0x20000860
 8001080:	200004ed 	.word	0x200004ed
 8001084:	200004ec 	.word	0x200004ec
 8001088:	200004ee 	.word	0x200004ee
 800108c:	60020000 	.word	0x60020000
 8001090:	08015c00 	.word	0x08015c00

08001094 <StartControlTask>:
#include "Ass-03.h"

enum State state = WELCOME;		// State of the system

void StartControlTask(void const * argument)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	osEvent event;												// Event structure to receive message from queue
	while(1) {
		event = osMessageGet(stateQueueHandle, osWaitForever);	// Wait and get message
 800109c:	4b50      	ldr	r3, [pc, #320]	; (80011e0 <StartControlTask+0x14c>)
 800109e:	6819      	ldr	r1, [r3, #0]
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00e f809 	bl	800f0c0 <osMessageGet>
		if (event.status == 0x10) {
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2b10      	cmp	r3, #16
 80010b2:	f040 8090 	bne.w	80011d6 <StartControlTask+0x142>
			switch (event.value.v) {
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	2b07      	cmp	r3, #7
 80010ba:	f200 808d 	bhi.w	80011d8 <StartControlTask+0x144>
 80010be:	a201      	add	r2, pc, #4	; (adr r2, 80010c4 <StartControlTask+0x30>)
 80010c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c4:	080010e5 	.word	0x080010e5
 80010c8:	08001107 	.word	0x08001107
 80010cc:	0800112f 	.word	0x0800112f
 80010d0:	08001147 	.word	0x08001147
 80010d4:	0800115f 	.word	0x0800115f
 80010d8:	0800117f 	.word	0x0800117f
 80010dc:	08001197 	.word	0x08001197
 80010e0:	080011b7 	.word	0x080011b7
				case (FINISHED):
					osTimerStop(messageTimerHandle);					// Stop the message timer
 80010e4:	4b3f      	ldr	r3, [pc, #252]	; (80011e4 <StartControlTask+0x150>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f00d fd53 	bl	800eb94 <osTimerStop>
					osMessagePut(renderQueueHandle, FINISHED, osWaitForever);
 80010ee:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <StartControlTask+0x154>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f04f 32ff 	mov.w	r2, #4294967295
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f00d ffa1 	bl	800f040 <osMessagePut>
					state = WELCOME;
 80010fe:	4b3b      	ldr	r3, [pc, #236]	; (80011ec <StartControlTask+0x158>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
					break;
 8001104:	e068      	b.n	80011d8 <StartControlTask+0x144>
				case (REG_ID):
					osMessagePut(renderQueueHandle, REG_ID, osWaitForever);
 8001106:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <StartControlTask+0x154>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f04f 32ff 	mov.w	r2, #4294967295
 800110e:	2101      	movs	r1, #1
 8001110:	4618      	mov	r0, r3
 8001112:	f00d ff95 	bl	800f040 <osMessagePut>
					//osMessagePut(sdQueueHandle, GET_USER_ID, osWaitForever);
					osMessagePut(fileSystemQueueHandle, 0, osWaitForever);
 8001116:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <StartControlTask+0x15c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f04f 32ff 	mov.w	r2, #4294967295
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f00d ff8d 	bl	800f040 <osMessagePut>
					state = REGISTER_ID;
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <StartControlTask+0x158>)
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
					break;
 800112c:	e054      	b.n	80011d8 <StartControlTask+0x144>
				case (REG_PIN):
					osMessagePut(renderQueueHandle, REG_PIN, osWaitForever);
 800112e:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <StartControlTask+0x154>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f04f 32ff 	mov.w	r2, #4294967295
 8001136:	2102      	movs	r1, #2
 8001138:	4618      	mov	r0, r3
 800113a:	f00d ff81 	bl	800f040 <osMessagePut>
					state = REGISTER_PIN;
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <StartControlTask+0x158>)
 8001140:	2202      	movs	r2, #2
 8001142:	701a      	strb	r2, [r3, #0]
					break;
 8001144:	e048      	b.n	80011d8 <StartControlTask+0x144>
				case (LOG_ID):
					osMessagePut(renderQueueHandle, LOG_ID, osWaitForever);
 8001146:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <StartControlTask+0x154>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f04f 32ff 	mov.w	r2, #4294967295
 800114e:	2103      	movs	r1, #3
 8001150:	4618      	mov	r0, r3
 8001152:	f00d ff75 	bl	800f040 <osMessagePut>
					state = LOGIN_ID;
 8001156:	4b25      	ldr	r3, [pc, #148]	; (80011ec <StartControlTask+0x158>)
 8001158:	2203      	movs	r2, #3
 800115a:	701a      	strb	r2, [r3, #0]
					break;
 800115c:	e03c      	b.n	80011d8 <StartControlTask+0x144>
				// Display error message for id not registered and change state to welcome
				case (LOG_ID_ERR):
					osMessagePut(renderQueueHandle, LOG_ID_ERR, osWaitForever);
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <StartControlTask+0x154>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f04f 32ff 	mov.w	r2, #4294967295
 8001166:	2104      	movs	r1, #4
 8001168:	4618      	mov	r0, r3
 800116a:	f00d ff69 	bl	800f040 <osMessagePut>
					osTimerStart(messageTimerHandle, 2000);			// Start the message timer
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <StartControlTask+0x150>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001176:	4618      	mov	r0, r3
 8001178:	f00d fcc8 	bl	800eb0c <osTimerStart>
					break;
 800117c:	e02c      	b.n	80011d8 <StartControlTask+0x144>
				// Display login screen with prompt to enter Pin and change state to login
				case (LOG_ID_OK):
					osMessagePut(renderQueueHandle, LOG_ID_OK, osWaitForever);
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <StartControlTask+0x154>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f04f 32ff 	mov.w	r2, #4294967295
 8001186:	2105      	movs	r1, #5
 8001188:	4618      	mov	r0, r3
 800118a:	f00d ff59 	bl	800f040 <osMessagePut>
					state = LOGIN_PIN;
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <StartControlTask+0x158>)
 8001190:	2204      	movs	r2, #4
 8001192:	701a      	strb	r2, [r3, #0]
					break;
 8001194:	e020      	b.n	80011d8 <StartControlTask+0x144>
				// Display "Access Denied" for 2 seconds then change state to welcome
				case (LOG_AUTH_ERR):
					osMessagePut(renderQueueHandle, LOG_AUTH_ERR, osWaitForever);
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <StartControlTask+0x154>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f04f 32ff 	mov.w	r2, #4294967295
 800119e:	2106      	movs	r1, #6
 80011a0:	4618      	mov	r0, r3
 80011a2:	f00d ff4d 	bl	800f040 <osMessagePut>
					osTimerStart(messageTimerHandle, 2000);			// Start the message timer
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <StartControlTask+0x150>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f00d fcac 	bl	800eb0c <osTimerStart>
					break;
 80011b4:	e010      	b.n	80011d8 <StartControlTask+0x144>
				// Display "Access Granted" for 2 seconds then change state to welcome
				case (LOG_AUTH_OK):
					osMessagePut(renderQueueHandle, LOG_AUTH_OK, osWaitForever);
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <StartControlTask+0x154>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f04f 32ff 	mov.w	r2, #4294967295
 80011be:	2107      	movs	r1, #7
 80011c0:	4618      	mov	r0, r3
 80011c2:	f00d ff3d 	bl	800f040 <osMessagePut>
					osTimerStart(messageTimerHandle, 2000);			// Start the message timer
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <StartControlTask+0x150>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f00d fc9c 	bl	800eb0c <osTimerStart>
					break;
 80011d4:	e000      	b.n	80011d8 <StartControlTask+0x144>
			}
		}
 80011d6:	bf00      	nop
		osDelay(100);
 80011d8:	2064      	movs	r0, #100	; 0x64
 80011da:	f00d fc4f 	bl	800ea7c <osDelay>
		event = osMessageGet(stateQueueHandle, osWaitForever);	// Wait and get message
 80011de:	e75d      	b.n	800109c <StartControlTask+0x8>
 80011e0:	2000084c 	.word	0x2000084c
 80011e4:	2000085c 	.word	0x2000085c
 80011e8:	20000850 	.word	0x20000850
 80011ec:	200004f0 	.word	0x200004f0
 80011f0:	20000858 	.word	0x20000858

080011f4 <StartKeypadTask>:
#include "Ass-03.h"

extern enum State state;		// State of the system

void StartKeypadTask(void const * argument)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b08b      	sub	sp, #44	; 0x2c
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	uint16_t keys[4];
	uint8_t index = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	osEvent event;							// Event structure to receive message from queue
	uint16_t display_text_x_pos = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	847b      	strh	r3, [r7, #34]	; 0x22

	while(1) {
		event = osMessageGet(keypadQueueHandle, osWaitForever);	// Wait and get message
 8001206:	4b50      	ldr	r3, [pc, #320]	; (8001348 <StartKeypadTask+0x154>)
 8001208:	6819      	ldr	r1, [r3, #0]
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	f04f 32ff 	mov.w	r2, #4294967295
 8001212:	4618      	mov	r0, r3
 8001214:	f00d ff54 	bl	800f0c0 <osMessageGet>
		if (event.status == 0x10) {
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b10      	cmp	r3, #16
 800121c:	f040 8090 	bne.w	8001340 <StartKeypadTask+0x14c>
			keys[index] = event.value.v;		// Get key input from message queue and add it to the array
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001226:	b292      	uxth	r2, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	3328      	adds	r3, #40	; 0x28
 800122c:	443b      	add	r3, r7
 800122e:	f823 2c14 	strh.w	r2, [r3, #-20]
			index++;
 8001232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001236:	3301      	adds	r3, #1
 8001238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			//char display[4] = "";
			const char* display = "";
 800123c:	4b43      	ldr	r3, [pc, #268]	; (800134c <StartKeypadTask+0x158>)
 800123e:	61fb      	str	r3, [r7, #28]
				case 4:
					display_text_x_pos = 218;
					break;
			}
			*/
			for (uint8_t i = 0; i < index; i++)
 8001240:	2300      	movs	r3, #0
 8001242:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001246:	e013      	b.n	8001270 <StartKeypadTask+0x7c>
				sprintf(&display[i], "%d", keys[i]);
 8001248:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	18d0      	adds	r0, r2, r3
 8001250:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	3328      	adds	r3, #40	; 0x28
 8001258:	443b      	add	r3, r7
 800125a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800125e:	461a      	mov	r2, r3
 8001260:	493b      	ldr	r1, [pc, #236]	; (8001350 <StartKeypadTask+0x15c>)
 8001262:	f012 fbe5 	bl	8013a30 <siprintf>
			for (uint8_t i = 0; i < index; i++)
 8001266:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800126a:	3301      	adds	r3, #1
 800126c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001270:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001278:	429a      	cmp	r2, r3
 800127a:	d3e5      	bcc.n	8001248 <StartKeypadTask+0x54>

			BSP_LCD_DisplayStringAt(display_text_x_pos, (uint16_t)92, (uint8_t*)display, LEFT_MODE);
 800127c:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800127e:	2303      	movs	r3, #3
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	215c      	movs	r1, #92	; 0x5c
 8001284:	f002 faa4 	bl	80037d0 <BSP_LCD_DisplayStringAt>

			// TODO: Add mutex
			BSP_LCD_DisplayStringAt(240 - get_string_width(display)/2, 100 - BSP_LCD_GetFont()->Height/2, (uint8_t *)display, LEFT_MODE);
 8001288:	69f8      	ldr	r0, [r7, #28]
 800128a:	f000 f867 	bl	800135c <get_string_width>
 800128e:	4603      	mov	r3, r0
 8001290:	0fda      	lsrs	r2, r3, #31
 8001292:	4413      	add	r3, r2
 8001294:	105b      	asrs	r3, r3, #1
 8001296:	425b      	negs	r3, r3
 8001298:	b29b      	uxth	r3, r3
 800129a:	33f0      	adds	r3, #240	; 0xf0
 800129c:	b29c      	uxth	r4, r3
 800129e:	f002 fa2d 	bl	80036fc <BSP_LCD_GetFont>
 80012a2:	4603      	mov	r3, r0
 80012a4:	88db      	ldrh	r3, [r3, #6]
 80012a6:	085b      	lsrs	r3, r3, #1
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80012ae:	b299      	uxth	r1, r3
 80012b0:	2303      	movs	r3, #3
 80012b2:	69fa      	ldr	r2, [r7, #28]
 80012b4:	4620      	mov	r0, r4
 80012b6:	f002 fa8b 	bl	80037d0 <BSP_LCD_DisplayStringAt>

			if ((state == LOGIN_ID && index == 3) || ((state == REGISTER_PIN || state == LOGIN_PIN) && index == 4)) {
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <StartKeypadTask+0x160>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d103      	bne.n	80012ca <StartKeypadTask+0xd6>
 80012c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d00b      	beq.n	80012e2 <StartKeypadTask+0xee>
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <StartKeypadTask+0x160>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d003      	beq.n	80012da <StartKeypadTask+0xe6>
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <StartKeypadTask+0x160>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d132      	bne.n	8001340 <StartKeypadTask+0x14c>
 80012da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d12e      	bne.n	8001340 <StartKeypadTask+0x14c>
				for (uint8_t i = 0; i < index; i++) {
 80012e2:	2300      	movs	r3, #0
 80012e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80012e8:	e00c      	b.n	8001304 <StartKeypadTask+0x110>
					keys[i] = 0;
 80012ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	3328      	adds	r3, #40	; 0x28
 80012f2:	443b      	add	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	f823 2c14 	strh.w	r2, [r3, #-20]
				for (uint8_t i = 0; i < index; i++) {
 80012fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012fe:	3301      	adds	r3, #1
 8001300:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001304:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800130c:	429a      	cmp	r2, r3
 800130e:	d3ec      	bcc.n	80012ea <StartKeypadTask+0xf6>
			    }
			    index = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			    if (state == LOGIN_ID) {
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <StartKeypadTask+0x160>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d108      	bne.n	8001330 <StartKeypadTask+0x13c>
			      // TODO: Read from SD to see if ID is valid
			    	osMessagePut(stateQueueHandle, LOG_ID_OK, osWaitForever);
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <StartKeypadTask+0x164>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f04f 32ff 	mov.w	r2, #4294967295
 8001326:	2105      	movs	r1, #5
 8001328:	4618      	mov	r0, r3
 800132a:	f00d fe89 	bl	800f040 <osMessagePut>
 800132e:	e007      	b.n	8001340 <StartKeypadTask+0x14c>
			      // TODO: Add invalid ID
			    } else {
			      osMessagePut(stateQueueHandle, WELCOME, osWaitForever);
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <StartKeypadTask+0x164>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f04f 32ff 	mov.w	r2, #4294967295
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f00d fe80 	bl	800f040 <osMessagePut>
			      // TODO: Add valid and invalid PINs
			    }
			}
		}
		osDelay(100);
 8001340:	2064      	movs	r0, #100	; 0x64
 8001342:	f00d fb9b 	bl	800ea7c <osDelay>
		event = osMessageGet(keypadQueueHandle, osWaitForever);	// Wait and get message
 8001346:	e75e      	b.n	8001206 <StartKeypadTask+0x12>
 8001348:	20000854 	.word	0x20000854
 800134c:	08015c08 	.word	0x08015c08
 8001350:	08015c0c 	.word	0x08015c0c
 8001354:	200004f0 	.word	0x200004f0
 8001358:	2000084c 	.word	0x2000084c

0800135c <get_string_width>:

//extern enum State state;		// State of the system
//extern enum Command;

uint16_t get_string_width(const char* str)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	uint16_t charCount = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	81fb      	strh	r3, [r7, #14]
	for (const char* p = str; *p != '\0'; p++) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	e005      	b.n	800137a <get_string_width+0x1e>
		charCount++;
 800136e:	89fb      	ldrh	r3, [r7, #14]
 8001370:	3301      	adds	r3, #1
 8001372:	81fb      	strh	r3, [r7, #14]
	for (const char* p = str; *p != '\0'; p++) {
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	3301      	adds	r3, #1
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f5      	bne.n	800136e <get_string_width+0x12>
	}
	return charCount * BSP_LCD_GetFont()->Width;
 8001382:	f002 f9bb 	bl	80036fc <BSP_LCD_GetFont>
 8001386:	4603      	mov	r3, r0
 8001388:	889b      	ldrh	r3, [r3, #4]
 800138a:	89fa      	ldrh	r2, [r7, #14]
 800138c:	fb12 f303 	smulbb	r3, r2, r3
 8001390:	b29b      	uxth	r3, r3
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <drawButtonBeveled>:

void drawButtonBeveled(uint16_t x, uint16_t y, uint16_t width, uint16_t height, const char* text) {
 800139a:	b590      	push	{r4, r7, lr}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4604      	mov	r4, r0
 80013a2:	4608      	mov	r0, r1
 80013a4:	4611      	mov	r1, r2
 80013a6:	461a      	mov	r2, r3
 80013a8:	4623      	mov	r3, r4
 80013aa:	80fb      	strh	r3, [r7, #6]
 80013ac:	4603      	mov	r3, r0
 80013ae:	80bb      	strh	r3, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	807b      	strh	r3, [r7, #2]
 80013b4:	4613      	mov	r3, r2
 80013b6:	803b      	strh	r3, [r7, #0]
	ili9325_WriteReg(LCD_REG_3, 0x1028);
 80013b8:	f241 0128 	movw	r1, #4136	; 0x1028
 80013bc:	2003      	movs	r0, #3
 80013be:	f001 ffc2 	bl	8003346 <ili9325_WriteReg>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);  // Set the button color
 80013c2:	f244 2008 	movw	r0, #16904	; 0x4208
 80013c6:	f002 f979 	bl	80036bc <BSP_LCD_SetTextColor>

	// Draw the button body
	BSP_LCD_FillRect(x, y, width, height);
 80013ca:	883b      	ldrh	r3, [r7, #0]
 80013cc:	887a      	ldrh	r2, [r7, #2]
 80013ce:	88b9      	ldrh	r1, [r7, #4]
 80013d0:	88f8      	ldrh	r0, [r7, #6]
 80013d2:	f002 fce1 	bl	8003d98 <BSP_LCD_FillRect>

	// Draw the top bevel
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 80013d6:	f24d 609a 	movw	r0, #54938	; 0xd69a
 80013da:	f002 f96f 	bl	80036bc <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(x, y, x + width - 1, y);
 80013de:	88fa      	ldrh	r2, [r7, #6]
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	4413      	add	r3, r2
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	3b01      	subs	r3, #1
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	88bb      	ldrh	r3, [r7, #4]
 80013ec:	88b9      	ldrh	r1, [r7, #4]
 80013ee:	88f8      	ldrh	r0, [r7, #6]
 80013f0:	f002 fb08 	bl	8003a04 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(x, y + 1, x + width - 2, y + 1);
 80013f4:	88bb      	ldrh	r3, [r7, #4]
 80013f6:	3301      	adds	r3, #1
 80013f8:	b299      	uxth	r1, r3
 80013fa:	88fa      	ldrh	r2, [r7, #6]
 80013fc:	887b      	ldrh	r3, [r7, #2]
 80013fe:	4413      	add	r3, r2
 8001400:	b29b      	uxth	r3, r3
 8001402:	3b02      	subs	r3, #2
 8001404:	b29a      	uxth	r2, r3
 8001406:	88bb      	ldrh	r3, [r7, #4]
 8001408:	3301      	adds	r3, #1
 800140a:	b29b      	uxth	r3, r3
 800140c:	88f8      	ldrh	r0, [r7, #6]
 800140e:	f002 faf9 	bl	8003a04 <BSP_LCD_DrawLine>

	// Draw the left bevel
	BSP_LCD_DrawLine(x, y, x, y + height - 1);
 8001412:	88ba      	ldrh	r2, [r7, #4]
 8001414:	883b      	ldrh	r3, [r7, #0]
 8001416:	4413      	add	r3, r2
 8001418:	b29b      	uxth	r3, r3
 800141a:	3b01      	subs	r3, #1
 800141c:	b29b      	uxth	r3, r3
 800141e:	88fa      	ldrh	r2, [r7, #6]
 8001420:	88b9      	ldrh	r1, [r7, #4]
 8001422:	88f8      	ldrh	r0, [r7, #6]
 8001424:	f002 faee 	bl	8003a04 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(x + 1, y, x + 1, y + height - 2);
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	3301      	adds	r3, #1
 800142c:	b298      	uxth	r0, r3
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	3301      	adds	r3, #1
 8001432:	b29c      	uxth	r4, r3
 8001434:	88ba      	ldrh	r2, [r7, #4]
 8001436:	883b      	ldrh	r3, [r7, #0]
 8001438:	4413      	add	r3, r2
 800143a:	b29b      	uxth	r3, r3
 800143c:	3b02      	subs	r3, #2
 800143e:	b29b      	uxth	r3, r3
 8001440:	88b9      	ldrh	r1, [r7, #4]
 8001442:	4622      	mov	r2, r4
 8001444:	f002 fade 	bl	8003a04 <BSP_LCD_DrawLine>

	// Draw the bottom bevel
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001448:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800144c:	f002 f936 	bl	80036bc <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(x, y + height - 1, x + width - 1, y + height - 1);
 8001450:	88ba      	ldrh	r2, [r7, #4]
 8001452:	883b      	ldrh	r3, [r7, #0]
 8001454:	4413      	add	r3, r2
 8001456:	b29b      	uxth	r3, r3
 8001458:	3b01      	subs	r3, #1
 800145a:	b299      	uxth	r1, r3
 800145c:	88fa      	ldrh	r2, [r7, #6]
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	4413      	add	r3, r2
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29c      	uxth	r4, r3
 8001468:	88ba      	ldrh	r2, [r7, #4]
 800146a:	883b      	ldrh	r3, [r7, #0]
 800146c:	4413      	add	r3, r2
 800146e:	b29b      	uxth	r3, r3
 8001470:	3b01      	subs	r3, #1
 8001472:	b29b      	uxth	r3, r3
 8001474:	88f8      	ldrh	r0, [r7, #6]
 8001476:	4622      	mov	r2, r4
 8001478:	f002 fac4 	bl	8003a04 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(x, y + height - 2, x + width - 2, y + height - 2);
 800147c:	88ba      	ldrh	r2, [r7, #4]
 800147e:	883b      	ldrh	r3, [r7, #0]
 8001480:	4413      	add	r3, r2
 8001482:	b29b      	uxth	r3, r3
 8001484:	3b02      	subs	r3, #2
 8001486:	b299      	uxth	r1, r3
 8001488:	88fa      	ldrh	r2, [r7, #6]
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	4413      	add	r3, r2
 800148e:	b29b      	uxth	r3, r3
 8001490:	3b02      	subs	r3, #2
 8001492:	b29c      	uxth	r4, r3
 8001494:	88ba      	ldrh	r2, [r7, #4]
 8001496:	883b      	ldrh	r3, [r7, #0]
 8001498:	4413      	add	r3, r2
 800149a:	b29b      	uxth	r3, r3
 800149c:	3b02      	subs	r3, #2
 800149e:	b29b      	uxth	r3, r3
 80014a0:	88f8      	ldrh	r0, [r7, #6]
 80014a2:	4622      	mov	r2, r4
 80014a4:	f002 faae 	bl	8003a04 <BSP_LCD_DrawLine>

	// Draw the right bevel
	BSP_LCD_DrawLine(x + width - 1, y, x + width - 1, y + height - 1);
 80014a8:	88fa      	ldrh	r2, [r7, #6]
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	4413      	add	r3, r2
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	3b01      	subs	r3, #1
 80014b2:	b298      	uxth	r0, r3
 80014b4:	88fa      	ldrh	r2, [r7, #6]
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	4413      	add	r3, r2
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	3b01      	subs	r3, #1
 80014be:	b29c      	uxth	r4, r3
 80014c0:	88ba      	ldrh	r2, [r7, #4]
 80014c2:	883b      	ldrh	r3, [r7, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	3b01      	subs	r3, #1
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	88b9      	ldrh	r1, [r7, #4]
 80014ce:	4622      	mov	r2, r4
 80014d0:	f002 fa98 	bl	8003a04 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(x + width - 2, y, x + width - 2, y + height - 2);
 80014d4:	88fa      	ldrh	r2, [r7, #6]
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	4413      	add	r3, r2
 80014da:	b29b      	uxth	r3, r3
 80014dc:	3b02      	subs	r3, #2
 80014de:	b298      	uxth	r0, r3
 80014e0:	88fa      	ldrh	r2, [r7, #6]
 80014e2:	887b      	ldrh	r3, [r7, #2]
 80014e4:	4413      	add	r3, r2
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	3b02      	subs	r3, #2
 80014ea:	b29c      	uxth	r4, r3
 80014ec:	88ba      	ldrh	r2, [r7, #4]
 80014ee:	883b      	ldrh	r3, [r7, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	3b02      	subs	r3, #2
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	88b9      	ldrh	r1, [r7, #4]
 80014fa:	4622      	mov	r2, r4
 80014fc:	f002 fa82 	bl	8003a04 <BSP_LCD_DrawLine>

	// Add the text
	BSP_LCD_DisplayStringAt(x + BTN_WIDTH/2 - get_string_width(text)/2, y + BTN_HEIGHT/2 - BSP_LCD_GetFont()->Height/2, (uint8_t *)text, LEFT_MODE);
 8001500:	69b8      	ldr	r0, [r7, #24]
 8001502:	f7ff ff2b 	bl	800135c <get_string_width>
 8001506:	4603      	mov	r3, r0
 8001508:	085b      	lsrs	r3, r3, #1
 800150a:	b29b      	uxth	r3, r3
 800150c:	88fa      	ldrh	r2, [r7, #6]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	b29b      	uxth	r3, r3
 8001512:	3332      	adds	r3, #50	; 0x32
 8001514:	b29c      	uxth	r4, r3
 8001516:	f002 f8f1 	bl	80036fc <BSP_LCD_GetFont>
 800151a:	4603      	mov	r3, r0
 800151c:	88db      	ldrh	r3, [r3, #6]
 800151e:	085b      	lsrs	r3, r3, #1
 8001520:	b29b      	uxth	r3, r3
 8001522:	88ba      	ldrh	r2, [r7, #4]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	b29b      	uxth	r3, r3
 8001528:	330f      	adds	r3, #15
 800152a:	b299      	uxth	r1, r3
 800152c:	2303      	movs	r3, #3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4620      	mov	r0, r4
 8001532:	f002 f94d 	bl	80037d0 <BSP_LCD_DisplayStringAt>
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bd90      	pop	{r4, r7, pc}

0800153e <draw_button>:

void draw_button(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t radius, const char* text) {
 800153e:	b590      	push	{r4, r7, lr}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	4604      	mov	r4, r0
 8001546:	4608      	mov	r0, r1
 8001548:	4611      	mov	r1, r2
 800154a:	461a      	mov	r2, r3
 800154c:	4623      	mov	r3, r4
 800154e:	80fb      	strh	r3, [r7, #6]
 8001550:	4603      	mov	r3, r0
 8001552:	80bb      	strh	r3, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
 8001558:	4613      	mov	r3, r2
 800155a:	803b      	strh	r3, [r7, #0]
    ili9325_WriteReg(LCD_REG_3, 0x1028);
 800155c:	f241 0128 	movw	r1, #4136	; 0x1028
 8001560:	2003      	movs	r0, #3
 8001562:	f001 fef0 	bl	8003346 <ili9325_WriteReg>
	BSP_LCD_FillCircle(x + radius, y + radius, radius);
 8001566:	88fa      	ldrh	r2, [r7, #6]
 8001568:	8b3b      	ldrh	r3, [r7, #24]
 800156a:	4413      	add	r3, r2
 800156c:	b298      	uxth	r0, r3
 800156e:	88ba      	ldrh	r2, [r7, #4]
 8001570:	8b3b      	ldrh	r3, [r7, #24]
 8001572:	4413      	add	r3, r2
 8001574:	b29b      	uxth	r3, r3
 8001576:	8b3a      	ldrh	r2, [r7, #24]
 8001578:	4619      	mov	r1, r3
 800157a:	f002 fc37 	bl	8003dec <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(x + radius, y + height - radius - 1, radius);
 800157e:	88fa      	ldrh	r2, [r7, #6]
 8001580:	8b3b      	ldrh	r3, [r7, #24]
 8001582:	4413      	add	r3, r2
 8001584:	b298      	uxth	r0, r3
 8001586:	88ba      	ldrh	r2, [r7, #4]
 8001588:	883b      	ldrh	r3, [r7, #0]
 800158a:	4413      	add	r3, r2
 800158c:	b29a      	uxth	r2, r3
 800158e:	8b3b      	ldrh	r3, [r7, #24]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	b29b      	uxth	r3, r3
 8001594:	3b01      	subs	r3, #1
 8001596:	b29b      	uxth	r3, r3
 8001598:	8b3a      	ldrh	r2, [r7, #24]
 800159a:	4619      	mov	r1, r3
 800159c:	f002 fc26 	bl	8003dec <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(x + width - radius - 1, y + radius, radius);
 80015a0:	88fa      	ldrh	r2, [r7, #6]
 80015a2:	887b      	ldrh	r3, [r7, #2]
 80015a4:	4413      	add	r3, r2
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	8b3b      	ldrh	r3, [r7, #24]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	3b01      	subs	r3, #1
 80015b0:	b298      	uxth	r0, r3
 80015b2:	88ba      	ldrh	r2, [r7, #4]
 80015b4:	8b3b      	ldrh	r3, [r7, #24]
 80015b6:	4413      	add	r3, r2
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	8b3a      	ldrh	r2, [r7, #24]
 80015bc:	4619      	mov	r1, r3
 80015be:	f002 fc15 	bl	8003dec <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(x + width - radius - 1, y + height - radius - 1, radius);
 80015c2:	88fa      	ldrh	r2, [r7, #6]
 80015c4:	887b      	ldrh	r3, [r7, #2]
 80015c6:	4413      	add	r3, r2
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	8b3b      	ldrh	r3, [r7, #24]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b298      	uxth	r0, r3
 80015d4:	88ba      	ldrh	r2, [r7, #4]
 80015d6:	883b      	ldrh	r3, [r7, #0]
 80015d8:	4413      	add	r3, r2
 80015da:	b29a      	uxth	r2, r3
 80015dc:	8b3b      	ldrh	r3, [r7, #24]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	3b01      	subs	r3, #1
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	8b3a      	ldrh	r2, [r7, #24]
 80015e8:	4619      	mov	r1, r3
 80015ea:	f002 fbff 	bl	8003dec <BSP_LCD_FillCircle>

    BSP_LCD_FillRect(x + radius, y, width - 2 * radius, height);
 80015ee:	88fa      	ldrh	r2, [r7, #6]
 80015f0:	8b3b      	ldrh	r3, [r7, #24]
 80015f2:	4413      	add	r3, r2
 80015f4:	b298      	uxth	r0, r3
 80015f6:	8b3b      	ldrh	r3, [r7, #24]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	887a      	ldrh	r2, [r7, #2]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	b29a      	uxth	r2, r3
 8001602:	883b      	ldrh	r3, [r7, #0]
 8001604:	88b9      	ldrh	r1, [r7, #4]
 8001606:	f002 fbc7 	bl	8003d98 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(x, y + radius, width, height - 2 * radius);
 800160a:	88ba      	ldrh	r2, [r7, #4]
 800160c:	8b3b      	ldrh	r3, [r7, #24]
 800160e:	4413      	add	r3, r2
 8001610:	b299      	uxth	r1, r3
 8001612:	8b3b      	ldrh	r3, [r7, #24]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	b29b      	uxth	r3, r3
 8001618:	883a      	ldrh	r2, [r7, #0]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	b29b      	uxth	r3, r3
 800161e:	887a      	ldrh	r2, [r7, #2]
 8001620:	88f8      	ldrh	r0, [r7, #6]
 8001622:	f002 fbb9 	bl	8003d98 <BSP_LCD_FillRect>

    // Add the text
	BSP_LCD_DisplayStringAt(x + BTN_WIDTH/2 - get_string_width(text)/2, y + BTN_HEIGHT/2 - BSP_LCD_GetFont()->Height/2, (uint8_t *)text, LEFT_MODE);
 8001626:	69f8      	ldr	r0, [r7, #28]
 8001628:	f7ff fe98 	bl	800135c <get_string_width>
 800162c:	4603      	mov	r3, r0
 800162e:	085b      	lsrs	r3, r3, #1
 8001630:	b29b      	uxth	r3, r3
 8001632:	88fa      	ldrh	r2, [r7, #6]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	b29b      	uxth	r3, r3
 8001638:	3332      	adds	r3, #50	; 0x32
 800163a:	b29c      	uxth	r4, r3
 800163c:	f002 f85e 	bl	80036fc <BSP_LCD_GetFont>
 8001640:	4603      	mov	r3, r0
 8001642:	88db      	ldrh	r3, [r3, #6]
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	b29b      	uxth	r3, r3
 8001648:	88ba      	ldrh	r2, [r7, #4]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	b29b      	uxth	r3, r3
 800164e:	330f      	adds	r3, #15
 8001650:	b299      	uxth	r1, r3
 8001652:	2303      	movs	r3, #3
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	4620      	mov	r0, r4
 8001658:	f002 f8ba 	bl	80037d0 <BSP_LCD_DisplayStringAt>
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	bd90      	pop	{r4, r7, pc}

08001664 <display_welcome>:

void display_welcome()
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af02      	add	r7, sp, #8
	BSP_LCD_Clear(LCD_COLOR_WHITE);										// Clear the LCD and set background to white
 800166a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800166e:	f002 f851 	bl	8003714 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font20);											// Set the font to be used
 8001672:	4811      	ldr	r0, [pc, #68]	; (80016b8 <display_welcome+0x54>)
 8001674:	f002 f832 	bl	80036dc <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);								// Set the text colour to black
 8001678:	2000      	movs	r0, #0
 800167a:	f002 f81f 	bl	80036bc <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(191, 20, (uint8_t*)"WELCOME", LEFT_MODE);	// Display welcome statement
 800167e:	2303      	movs	r3, #3
 8001680:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <display_welcome+0x58>)
 8001682:	2114      	movs	r1, #20
 8001684:	20bf      	movs	r0, #191	; 0xbf
 8001686:	f002 f8a3 	bl	80037d0 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font16);											// Set the font to be used for buttons
 800168a:	480d      	ldr	r0, [pc, #52]	; (80016c0 <display_welcome+0x5c>)
 800168c:	f002 f826 	bl	80036dc <BSP_LCD_SetFont>

	drawButtonBeveled(BTN_REGISTER_X_POS, BTN_REGISTER_Y_POS, BTN_WIDTH, BTN_HEIGHT, "Register");
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <display_welcome+0x60>)
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	231e      	movs	r3, #30
 8001696:	2264      	movs	r2, #100	; 0x64
 8001698:	215a      	movs	r1, #90	; 0x5a
 800169a:	20be      	movs	r0, #190	; 0xbe
 800169c:	f7ff fe7d 	bl	800139a <drawButtonBeveled>
	drawButtonBeveled(BTN_LOGIN_X_POS, BTN_LOGIN_Y_POS, BTN_WIDTH, BTN_HEIGHT, "Login");
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <display_welcome+0x64>)
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	231e      	movs	r3, #30
 80016a6:	2264      	movs	r2, #100	; 0x64
 80016a8:	218c      	movs	r1, #140	; 0x8c
 80016aa:	20be      	movs	r0, #190	; 0xbe
 80016ac:	f7ff fe75 	bl	800139a <drawButtonBeveled>
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000005c 	.word	0x2000005c
 80016bc:	08015c10 	.word	0x08015c10
 80016c0:	20000054 	.word	0x20000054
 80016c4:	08015c18 	.word	0x08015c18
 80016c8:	08015c24 	.word	0x08015c24

080016cc <display_keypad>:

void display_keypad()
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af02      	add	r7, sp, #8
	draw_button(KEY_DISPLAY_X_POS, KEY_DISPLAY_Y_POS, KEY_DISPLAY_WIDTH, KEY_DISPLAY_HEIGHT, 5, "");
 80016d2:	4b21      	ldr	r3, [pc, #132]	; (8001758 <display_keypad+0x8c>)
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	2305      	movs	r3, #5
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2314      	movs	r3, #20
 80016dc:	2250      	movs	r2, #80	; 0x50
 80016de:	215a      	movs	r1, #90	; 0x5a
 80016e0:	20c8      	movs	r0, #200	; 0xc8
 80016e2:	f7ff ff2c 	bl	800153e <draw_button>
	uint16_t y_pos = KEY_BTN_Y_POS;
 80016e6:	2378      	movs	r3, #120	; 0x78
 80016e8:	81fb      	strh	r3, [r7, #14]
	char btn_number = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	737b      	strb	r3, [r7, #13]
	for (int row = 1; row <= 3; row++) {
 80016ee:	2301      	movs	r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	e020      	b.n	8001736 <display_keypad+0x6a>
		uint16_t x_pos = KEY_BTN_X_POS;
 80016f4:	23c8      	movs	r3, #200	; 0xc8
 80016f6:	80fb      	strh	r3, [r7, #6]
		for (int column = 1; column <= 3; column++) {
 80016f8:	2301      	movs	r3, #1
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	e012      	b.n	8001724 <display_keypad+0x58>
			draw_button(x_pos, y_pos, KEY_BTN_SIZE, KEY_BTN_SIZE, 2, ++btn_number);
 80016fe:	7b7b      	ldrb	r3, [r7, #13]
 8001700:	3301      	adds	r3, #1
 8001702:	737b      	strb	r3, [r7, #13]
 8001704:	7b7b      	ldrb	r3, [r7, #13]
 8001706:	89f9      	ldrh	r1, [r7, #14]
 8001708:	88f8      	ldrh	r0, [r7, #6]
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	2302      	movs	r3, #2
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	2314      	movs	r3, #20
 8001712:	2214      	movs	r2, #20
 8001714:	f7ff ff13 	bl	800153e <draw_button>
			x_pos += 30;
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	331e      	adds	r3, #30
 800171c:	80fb      	strh	r3, [r7, #6]
		for (int column = 1; column <= 3; column++) {
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	2b03      	cmp	r3, #3
 8001728:	dde9      	ble.n	80016fe <display_keypad+0x32>
		}
		y_pos += 30;
 800172a:	89fb      	ldrh	r3, [r7, #14]
 800172c:	331e      	adds	r3, #30
 800172e:	81fb      	strh	r3, [r7, #14]
	for (int row = 1; row <= 3; row++) {
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	3301      	adds	r3, #1
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	2b03      	cmp	r3, #3
 800173a:	dddb      	ble.n	80016f4 <display_keypad+0x28>
	}
	draw_button(230, 210, KEY_BTN_SIZE, KEY_BTN_SIZE, 2, '0');
 800173c:	2330      	movs	r3, #48	; 0x30
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	2302      	movs	r3, #2
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2314      	movs	r3, #20
 8001746:	2214      	movs	r2, #20
 8001748:	21d2      	movs	r1, #210	; 0xd2
 800174a:	20e6      	movs	r0, #230	; 0xe6
 800174c:	f7ff fef7 	bl	800153e <draw_button>
}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	08015c2c 	.word	0x08015c2c

0800175c <get_next_user>:

uint16_t get_next_user()
{
 800175c:	b580      	push	{r7, lr}
 800175e:	f5ad 7d4e 	sub.w	sp, sp, #824	; 0x338
 8001762:	af00      	add	r7, sp, #0
	uint16_t line_count = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	f8a7 3336 	strh.w	r3, [r7, #822]	; 0x336
	char rtext[256]; 					// File read buffer
	FIL MyFile; 						// File object
	FRESULT res; 						// FatFs function common result code
	// Open the text file object for reading
	if ((res = f_open(&MyFile, "storage_file.txt", FA_READ)) != FR_OK)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2201      	movs	r2, #1
 800176e:	4917      	ldr	r1, [pc, #92]	; (80017cc <get_next_user+0x70>)
 8001770:	4618      	mov	r0, r3
 8001772:	f00c fa47 	bl	800dc04 <f_open>
 8001776:	4603      	mov	r3, r0
 8001778:	f887 3335 	strb.w	r3, [r7, #821]	; 0x335
 800177c:	f897 3335 	ldrb.w	r3, [r7, #821]	; 0x335
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00c      	beq.n	800179e <get_next_user+0x42>
		printf("ERROR: %s file Open for read Error: %d\r\n", "storage_file.txt", res);
 8001784:	f897 3335 	ldrb.w	r3, [r7, #821]	; 0x335
 8001788:	461a      	mov	r2, r3
 800178a:	4910      	ldr	r1, [pc, #64]	; (80017cc <get_next_user+0x70>)
 800178c:	4810      	ldr	r0, [pc, #64]	; (80017d0 <get_next_user+0x74>)
 800178e:	f012 f8b1 	bl	80138f4 <iprintf>
	// Read the file line by line
	while (f_gets(rtext, sizeof(rtext), &MyFile) != NULL)
 8001792:	e004      	b.n	800179e <get_next_user+0x42>
		line_count++;
 8001794:	f8b7 3336 	ldrh.w	r3, [r7, #822]	; 0x336
 8001798:	3301      	adds	r3, #1
 800179a:	f8a7 3336 	strh.w	r3, [r7, #822]	; 0x336
	while (f_gets(rtext, sizeof(rtext), &MyFile) != NULL)
 800179e:	1d3a      	adds	r2, r7, #4
 80017a0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80017a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a8:	4618      	mov	r0, r3
 80017aa:	f00c ff10 	bl	800e5ce <f_gets>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1ef      	bne.n	8001794 <get_next_user+0x38>
	// Close the file
	f_close(&MyFile);
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	4618      	mov	r0, r3
 80017b8:	f00c feda 	bl	800e570 <f_close>
	return line_count;
 80017bc:	f8b7 3336 	ldrh.w	r3, [r7, #822]	; 0x336
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	f507 774e 	add.w	r7, r7, #824	; 0x338
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	08015c30 	.word	0x08015c30
 80017d0:	08015c44 	.word	0x08015c44

080017d4 <display_registration>:

void display_registration(bool hasTakenPhoto)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af02      	add	r7, sp, #8
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
	BSP_LCD_Clear(LCD_COLOR_WHITE);										// Clear the LCD and set background to white
 80017de:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017e2:	f001 ff97 	bl	8003714 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font20);											// Set the font to be used
 80017e6:	4824      	ldr	r0, [pc, #144]	; (8001878 <display_registration+0xa4>)
 80017e8:	f001 ff78 	bl	80036dc <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);								// Set the text colour to black
 80017ec:	2000      	movs	r0, #0
 80017ee:	f001 ff65 	bl	80036bc <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(184, 20, (uint8_t*)"REGISTER", LEFT_MODE);			// Display register statement
 80017f2:	2303      	movs	r3, #3
 80017f4:	4a21      	ldr	r2, [pc, #132]	; (800187c <display_registration+0xa8>)
 80017f6:	2114      	movs	r1, #20
 80017f8:	20b8      	movs	r0, #184	; 0xb8
 80017fa:	f001 ffe9 	bl	80037d0 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font16);											// Set the font to be used for buttons
 80017fe:	4820      	ldr	r0, [pc, #128]	; (8001880 <display_registration+0xac>)
 8001800:	f001 ff6c 	bl	80036dc <BSP_LCD_SetFont>

	// TODO: Read SD to get user ID
	char id[4];
	sprintf(id, "%03d", get_next_user());
 8001804:	f7ff ffaa 	bl	800175c <get_next_user>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	491c      	ldr	r1, [pc, #112]	; (8001884 <display_registration+0xb0>)
 8001812:	4618      	mov	r0, r3
 8001814:	f012 f90c 	bl	8013a30 <siprintf>
	BSP_LCD_DisplayStringAt(240 - get_string_width(id)/2, 50, (uint8_t*)id, LEFT_MODE);			// Display User ID
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fd9d 	bl	800135c <get_string_width>
 8001822:	4603      	mov	r3, r0
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	b29b      	uxth	r3, r3
 8001828:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800182c:	b298      	uxth	r0, r3
 800182e:	f107 020c 	add.w	r2, r7, #12
 8001832:	2303      	movs	r3, #3
 8001834:	2132      	movs	r1, #50	; 0x32
 8001836:	f001 ffcb 	bl	80037d0 <BSP_LCD_DisplayStringAt>

	draw_button(BTN_CANCEL_X_POS, BTN_CANCEL_Y_POS, BTN_WIDTH, BTN_HEIGHT, 5, "Cancel");
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <display_registration+0xb4>)
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	2305      	movs	r3, #5
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	231e      	movs	r3, #30
 8001844:	2264      	movs	r2, #100	; 0x64
 8001846:	21be      	movs	r1, #190	; 0xbe
 8001848:	2014      	movs	r0, #20
 800184a:	f7ff fe78 	bl	800153e <draw_button>

	if (hasTakenPhoto)
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d002      	beq.n	800185a <display_registration+0x86>
		display_keypad();
 8001854:	f7ff ff3a 	bl	80016cc <display_keypad>
	else
		draw_button(BTN_PHOTO_X_POS, BTN_PHOTO_Y_POS, BTN_WIDTH, BTN_HEIGHT, 5, "Photo");
}
 8001858:	e009      	b.n	800186e <display_registration+0x9a>
		draw_button(BTN_PHOTO_X_POS, BTN_PHOTO_Y_POS, BTN_WIDTH, BTN_HEIGHT, 5, "Photo");
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <display_registration+0xb8>)
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	2305      	movs	r3, #5
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	231e      	movs	r3, #30
 8001864:	2264      	movs	r2, #100	; 0x64
 8001866:	2173      	movs	r1, #115	; 0x73
 8001868:	20be      	movs	r0, #190	; 0xbe
 800186a:	f7ff fe68 	bl	800153e <draw_button>
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	2000005c 	.word	0x2000005c
 800187c:	08015c70 	.word	0x08015c70
 8001880:	20000054 	.word	0x20000054
 8001884:	08015c7c 	.word	0x08015c7c
 8001888:	08015c84 	.word	0x08015c84
 800188c:	08015c8c 	.word	0x08015c8c

08001890 <display_login>:

void display_login(const char* text)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af02      	add	r7, sp, #8
 8001896:	6078      	str	r0, [r7, #4]
	BSP_LCD_Clear(LCD_COLOR_WHITE);										// Clear the LCD and set background to white
 8001898:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800189c:	f001 ff3a 	bl	8003714 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font20);											// Set the font to be used
 80018a0:	4816      	ldr	r0, [pc, #88]	; (80018fc <display_login+0x6c>)
 80018a2:	f001 ff1b 	bl	80036dc <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);								// Set the text colour to black
 80018a6:	2000      	movs	r0, #0
 80018a8:	f001 ff08 	bl	80036bc <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(205, 20, (uint8_t*)"LOGIN", LEFT_MODE);		// Display login statement
 80018ac:	2303      	movs	r3, #3
 80018ae:	4a14      	ldr	r2, [pc, #80]	; (8001900 <display_login+0x70>)
 80018b0:	2114      	movs	r1, #20
 80018b2:	20cd      	movs	r0, #205	; 0xcd
 80018b4:	f001 ff8c 	bl	80037d0 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font16);											// Set the font to be used for buttons
 80018b8:	4812      	ldr	r0, [pc, #72]	; (8001904 <display_login+0x74>)
 80018ba:	f001 ff0f 	bl	80036dc <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(240 - get_string_width(text)/2, 50, (uint8_t*)text, LEFT_MODE);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fd4c 	bl	800135c <get_string_width>
 80018c4:	4603      	mov	r3, r0
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80018ce:	b298      	uxth	r0, r3
 80018d0:	2303      	movs	r3, #3
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	2132      	movs	r1, #50	; 0x32
 80018d6:	f001 ff7b 	bl	80037d0 <BSP_LCD_DisplayStringAt>
	display_keypad();
 80018da:	f7ff fef7 	bl	80016cc <display_keypad>
	draw_button(BTN_CANCEL_X_POS, BTN_CANCEL_Y_POS, BTN_WIDTH, BTN_HEIGHT, 5, "Cancel");
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <display_login+0x78>)
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	2305      	movs	r3, #5
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	231e      	movs	r3, #30
 80018e8:	2264      	movs	r2, #100	; 0x64
 80018ea:	21be      	movs	r1, #190	; 0xbe
 80018ec:	2014      	movs	r0, #20
 80018ee:	f7ff fe26 	bl	800153e <draw_button>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000005c 	.word	0x2000005c
 8001900:	08015c94 	.word	0x08015c94
 8001904:	20000054 	.word	0x20000054
 8001908:	08015c84 	.word	0x08015c84

0800190c <StartLCDTask>:
	}

}

void StartLCDTask(void const * argument)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	BSP_LCD_Init();							// Initialize the LCD
 8001914:	f001 fe80 	bl	8003618 <BSP_LCD_Init>
	BSP_LCD_DisplayOn();					// Enable the LCD
 8001918:	f002 fafa 	bl	8003f10 <BSP_LCD_DisplayOn>
	osEvent event;							// Event structure to receive message from queue
	osSemaphoreWait(startSemHandle, osWaitForever);
 800191c:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <StartLCDTask+0xcc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	4618      	mov	r0, r3
 8001926:	f00d facb 	bl	800eec0 <osSemaphoreWait>
	display_welcome();
 800192a:	f7ff fe9b 	bl	8001664 <display_welcome>
	while(1) {
		event = osMessageGet(renderQueueHandle, osWaitForever);
 800192e:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <StartLCDTask+0xd0>)
 8001930:	6819      	ldr	r1, [r3, #0]
 8001932:	f107 030c 	add.w	r3, r7, #12
 8001936:	f04f 32ff 	mov.w	r2, #4294967295
 800193a:	4618      	mov	r0, r3
 800193c:	f00d fbc0 	bl	800f0c0 <osMessageGet>
		if (event.status == 0x10) {
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2b10      	cmp	r3, #16
 8001944:	d144      	bne.n	80019d0 <StartLCDTask+0xc4>
			if (osMutexWait(lcdMutexHandle, osWaitForever) == osOK) {
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <StartLCDTask+0xd4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f04f 31ff 	mov.w	r1, #4294967295
 800194e:	4618      	mov	r0, r3
 8001950:	f00d fa00 	bl	800ed54 <osMutexWait>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d13a      	bne.n	80019d0 <StartLCDTask+0xc4>
				switch (event.value.v) {
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	2b07      	cmp	r3, #7
 800195e:	d832      	bhi.n	80019c6 <StartLCDTask+0xba>
 8001960:	a201      	add	r2, pc, #4	; (adr r2, 8001968 <StartLCDTask+0x5c>)
 8001962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001966:	bf00      	nop
 8001968:	08001989 	.word	0x08001989
 800196c:	0800198f 	.word	0x0800198f
 8001970:	08001997 	.word	0x08001997
 8001974:	0800199f 	.word	0x0800199f
 8001978:	080019a7 	.word	0x080019a7
 800197c:	080019af 	.word	0x080019af
 8001980:	080019b7 	.word	0x080019b7
 8001984:	080019bf 	.word	0x080019bf
					case (FINISHED):
						display_welcome();
 8001988:	f7ff fe6c 	bl	8001664 <display_welcome>
						break;
 800198c:	e01b      	b.n	80019c6 <StartLCDTask+0xba>
					case (REG_ID):
						display_registration(0);
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff ff20 	bl	80017d4 <display_registration>
						break;
 8001994:	e017      	b.n	80019c6 <StartLCDTask+0xba>
					case (REG_PIN):
						display_registration(1);
 8001996:	2001      	movs	r0, #1
 8001998:	f7ff ff1c 	bl	80017d4 <display_registration>
						break;
 800199c:	e013      	b.n	80019c6 <StartLCDTask+0xba>
					case (LOG_ID):
						display_login("Enter ID:");
 800199e:	4811      	ldr	r0, [pc, #68]	; (80019e4 <StartLCDTask+0xd8>)
 80019a0:	f7ff ff76 	bl	8001890 <display_login>
						break;
 80019a4:	e00f      	b.n	80019c6 <StartLCDTask+0xba>
					case (LOG_ID_ERR):
						display_login("Invalid ID");
 80019a6:	4810      	ldr	r0, [pc, #64]	; (80019e8 <StartLCDTask+0xdc>)
 80019a8:	f7ff ff72 	bl	8001890 <display_login>
						break;
 80019ac:	e00b      	b.n	80019c6 <StartLCDTask+0xba>
					case (LOG_ID_OK):
						display_login("Enter Prompt:");
 80019ae:	480f      	ldr	r0, [pc, #60]	; (80019ec <StartLCDTask+0xe0>)
 80019b0:	f7ff ff6e 	bl	8001890 <display_login>
						break;
 80019b4:	e007      	b.n	80019c6 <StartLCDTask+0xba>
					case (LOG_AUTH_ERR):
						display_login("Access Denied");
 80019b6:	480e      	ldr	r0, [pc, #56]	; (80019f0 <StartLCDTask+0xe4>)
 80019b8:	f7ff ff6a 	bl	8001890 <display_login>
						break;
 80019bc:	e003      	b.n	80019c6 <StartLCDTask+0xba>
					case (LOG_AUTH_OK):
						display_login("Access Granted");
 80019be:	480d      	ldr	r0, [pc, #52]	; (80019f4 <StartLCDTask+0xe8>)
 80019c0:	f7ff ff66 	bl	8001890 <display_login>
						break;
 80019c4:	bf00      	nop
				}
			osMutexRelease(lcdMutexHandle);
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <StartLCDTask+0xd4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f00d fa10 	bl	800edf0 <osMutexRelease>
			}
		}
		osDelay(100);
 80019d0:	2064      	movs	r0, #100	; 0x64
 80019d2:	f00d f853 	bl	800ea7c <osDelay>
		event = osMessageGet(renderQueueHandle, osWaitForever);
 80019d6:	e7aa      	b.n	800192e <StartLCDTask+0x22>
 80019d8:	20000868 	.word	0x20000868
 80019dc:	20000850 	.word	0x20000850
 80019e0:	20000860 	.word	0x20000860
 80019e4:	08015c9c 	.word	0x08015c9c
 80019e8:	08015cb4 	.word	0x08015cb4
 80019ec:	08015cc0 	.word	0x08015cc0
 80019f0:	08015cd0 	.word	0x08015cd0
 80019f4:	08015ce0 	.word	0x08015ce0

080019f8 <MessageTimerCallback>:
 */

#include "Ass-03.h"

void MessageTimerCallback(void const * argument)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	osMessagePut(stateQueueHandle, FINISHED, osWaitForever);
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <MessageTimerCallback+0x20>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f00d fb18 	bl	800f040 <osMessagePut>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	2000084c 	.word	0x2000084c

08001a1c <initialise>:
char rtext[256]; 					// File read buffer

uint32_t current_user_id = 0;

void initialise()
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) != 0)							// Card detection status
 8001a20:	2108      	movs	r1, #8
 8001a22:	4812      	ldr	r0, [pc, #72]	; (8001a6c <initialise+0x50>)
 8001a24:	f005 fc24 	bl	8007270 <HAL_GPIO_ReadPin>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <initialise+0x18>
		printf("ERROR: No card detect\n");
 8001a2e:	4810      	ldr	r0, [pc, #64]	; (8001a70 <initialise+0x54>)
 8001a30:	f011 ffe6 	bl	8013a00 <puts>
	if (retSD != 0)															// SD link I/O driver link status
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <initialise+0x58>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <initialise+0x26>
		printf("ERROR: Linking of SD disk I/O driver failed\n");
 8001a3c:	480e      	ldr	r0, [pc, #56]	; (8001a78 <initialise+0x5c>)
 8001a3e:	f011 ffdf 	bl	8013a00 <puts>
	if ((res = f_mount(&SDFatFs, (TCHAR const*)SDPath, 1)) != FR_OK)		// Register the file system object to the module
 8001a42:	2201      	movs	r2, #1
 8001a44:	490d      	ldr	r1, [pc, #52]	; (8001a7c <initialise+0x60>)
 8001a46:	480e      	ldr	r0, [pc, #56]	; (8001a80 <initialise+0x64>)
 8001a48:	f00c f878 	bl	800db3c <f_mount>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <initialise+0x68>)
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <initialise+0x68>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <initialise+0x4c>
		printf("ERROR: Could not mount SD card (%d).\n", res);
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <initialise+0x68>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	4809      	ldr	r0, [pc, #36]	; (8001a88 <initialise+0x6c>)
 8001a64:	f011 ff46 	bl	80138f4 <iprintf>
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40020c00 	.word	0x40020c00
 8001a70:	08015d04 	.word	0x08015d04
 8001a74:	200017f0 	.word	0x200017f0
 8001a78:	08015d1c 	.word	0x08015d1c
 8001a7c:	200017f4 	.word	0x200017f4
 8001a80:	200004f4 	.word	0x200004f4
 8001a84:	2000072c 	.word	0x2000072c
 8001a88:	08015d48 	.word	0x08015d48

08001a8c <StartFileSystemTask>:
	// Read the image data from the file

}

void StartFileSystemTask(void const * argument)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	osSemaphoreWait(startSemHandle, osWaitForever);
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <StartFileSystemTask+0x34>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f00d fa0f 	bl	800eec0 <osSemaphoreWait>
	initialise();
 8001aa2:	f7ff ffbb 	bl	8001a1c <initialise>
	osEvent event;												// Event structure to receive message from queue

	while(1) {
		event = osMessageGet(fileSystemQueueHandle, osWaitForever);	// Wait and get message
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <StartFileSystemTask+0x38>)
 8001aa8:	6819      	ldr	r1, [r3, #0]
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f00d fb04 	bl	800f0c0 <osMessageGet>
		if (event.status == 0x10) {
			// TODO: Add functionality
		}
		osThreadYield();
 8001ab8:	f00c ffce 	bl	800ea58 <osThreadYield>
		event = osMessageGet(fileSystemQueueHandle, osWaitForever);	// Wait and get message
 8001abc:	e7f3      	b.n	8001aa6 <StartFileSystemTask+0x1a>
 8001abe:	bf00      	nop
 8001ac0:	20000868 	.word	0x20000868
 8001ac4:	20000858 	.word	0x20000858

08001ac8 <is_btn_touched>:
#include "Ass-03.h"

extern enum State state;		// State of the system

bool is_btn_touched(uint16_t corr_x_pos, uint16_t corr_y_pos, uint16_t btn_x_pos, uint16_t btn_y_pos)
{
 8001ac8:	b490      	push	{r4, r7}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4604      	mov	r4, r0
 8001ad0:	4608      	mov	r0, r1
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4623      	mov	r3, r4
 8001ad8:	80fb      	strh	r3, [r7, #6]
 8001ada:	4603      	mov	r3, r0
 8001adc:	80bb      	strh	r3, [r7, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	807b      	strh	r3, [r7, #2]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	803b      	strh	r3, [r7, #0]
	return (corr_x_pos >= btn_x_pos && corr_x_pos <= btn_x_pos + BTN_WIDTH &&
			corr_y_pos >= btn_y_pos && corr_y_pos <= btn_y_pos + BTN_HEIGHT);
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d30f      	bcc.n	8001b0e <is_btn_touched+0x46>
	return (corr_x_pos >= btn_x_pos && corr_x_pos <= btn_x_pos + BTN_WIDTH &&
 8001aee:	88fa      	ldrh	r2, [r7, #6]
 8001af0:	887b      	ldrh	r3, [r7, #2]
 8001af2:	3364      	adds	r3, #100	; 0x64
 8001af4:	429a      	cmp	r2, r3
 8001af6:	dc0a      	bgt.n	8001b0e <is_btn_touched+0x46>
 8001af8:	88ba      	ldrh	r2, [r7, #4]
 8001afa:	883b      	ldrh	r3, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d306      	bcc.n	8001b0e <is_btn_touched+0x46>
			corr_y_pos >= btn_y_pos && corr_y_pos <= btn_y_pos + BTN_HEIGHT);
 8001b00:	88ba      	ldrh	r2, [r7, #4]
 8001b02:	883b      	ldrh	r3, [r7, #0]
 8001b04:	331e      	adds	r3, #30
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dc01      	bgt.n	8001b0e <is_btn_touched+0x46>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <is_btn_touched+0x48>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	b2db      	uxtb	r3, r3
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc90      	pop	{r4, r7}
 8001b1e:	4770      	bx	lr

08001b20 <touch_keypad>:

void touch_keypad(uint16_t x, uint16_t y)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	460a      	mov	r2, r1
 8001b2a:	80fb      	strh	r3, [r7, #6]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	80bb      	strh	r3, [r7, #4]
	switch (x) {
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8001b36:	f300 809e 	bgt.w	8001c76 <touch_keypad+0x156>
 8001b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b3e:	da6b      	bge.n	8001c18 <touch_keypad+0xf8>
 8001b40:	2bdc      	cmp	r3, #220	; 0xdc
 8001b42:	dc02      	bgt.n	8001b4a <touch_keypad+0x2a>
 8001b44:	2bc8      	cmp	r3, #200	; 0xc8
 8001b46:	da05      	bge.n	8001b54 <touch_keypad+0x34>
					osMessagePut(keypadQueueHandle, 9, osWaitForever);
					break;
			}
			break;
	}
}
 8001b48:	e095      	b.n	8001c76 <touch_keypad+0x156>
 8001b4a:	3be6      	subs	r3, #230	; 0xe6
	switch (x) {
 8001b4c:	2b14      	cmp	r3, #20
 8001b4e:	f200 8092 	bhi.w	8001c76 <touch_keypad+0x156>
 8001b52:	e02a      	b.n	8001baa <touch_keypad+0x8a>
			switch (y) {
 8001b54:	88bb      	ldrh	r3, [r7, #4]
 8001b56:	2bc8      	cmp	r3, #200	; 0xc8
 8001b58:	f300 8088 	bgt.w	8001c6c <touch_keypad+0x14c>
 8001b5c:	2bb4      	cmp	r3, #180	; 0xb4
 8001b5e:	da1a      	bge.n	8001b96 <touch_keypad+0x76>
 8001b60:	2b8c      	cmp	r3, #140	; 0x8c
 8001b62:	dc02      	bgt.n	8001b6a <touch_keypad+0x4a>
 8001b64:	2b78      	cmp	r3, #120	; 0x78
 8001b66:	da04      	bge.n	8001b72 <touch_keypad+0x52>
			break;
 8001b68:	e080      	b.n	8001c6c <touch_keypad+0x14c>
 8001b6a:	3b96      	subs	r3, #150	; 0x96
 8001b6c:	2b14      	cmp	r3, #20
 8001b6e:	d87d      	bhi.n	8001c6c <touch_keypad+0x14c>
 8001b70:	e008      	b.n	8001b84 <touch_keypad+0x64>
					osMessagePut(keypadQueueHandle, 1, osWaitForever);
 8001b72:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <touch_keypad+0x160>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f00d fa5f 	bl	800f040 <osMessagePut>
					break;
 8001b82:	e011      	b.n	8001ba8 <touch_keypad+0x88>
					osMessagePut(keypadQueueHandle, 4, osWaitForever);
 8001b84:	4b3e      	ldr	r3, [pc, #248]	; (8001c80 <touch_keypad+0x160>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f00d fa56 	bl	800f040 <osMessagePut>
					break;
 8001b94:	e008      	b.n	8001ba8 <touch_keypad+0x88>
					osMessagePut(keypadQueueHandle, 7, osWaitForever);
 8001b96:	4b3a      	ldr	r3, [pc, #232]	; (8001c80 <touch_keypad+0x160>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9e:	2107      	movs	r1, #7
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f00d fa4d 	bl	800f040 <osMessagePut>
					break;
 8001ba6:	bf00      	nop
			break;
 8001ba8:	e060      	b.n	8001c6c <touch_keypad+0x14c>
			switch (y) {
 8001baa:	88bb      	ldrh	r3, [r7, #4]
 8001bac:	2be6      	cmp	r3, #230	; 0xe6
 8001bae:	dc5f      	bgt.n	8001c70 <touch_keypad+0x150>
 8001bb0:	2bd2      	cmp	r3, #210	; 0xd2
 8001bb2:	da27      	bge.n	8001c04 <touch_keypad+0xe4>
 8001bb4:	2bc8      	cmp	r3, #200	; 0xc8
 8001bb6:	dc5b      	bgt.n	8001c70 <touch_keypad+0x150>
 8001bb8:	2bb4      	cmp	r3, #180	; 0xb4
 8001bba:	da1a      	bge.n	8001bf2 <touch_keypad+0xd2>
 8001bbc:	2b8c      	cmp	r3, #140	; 0x8c
 8001bbe:	dc02      	bgt.n	8001bc6 <touch_keypad+0xa6>
 8001bc0:	2b78      	cmp	r3, #120	; 0x78
 8001bc2:	da04      	bge.n	8001bce <touch_keypad+0xae>
			break;
 8001bc4:	e054      	b.n	8001c70 <touch_keypad+0x150>
 8001bc6:	3b96      	subs	r3, #150	; 0x96
 8001bc8:	2b14      	cmp	r3, #20
 8001bca:	d851      	bhi.n	8001c70 <touch_keypad+0x150>
 8001bcc:	e008      	b.n	8001be0 <touch_keypad+0xc0>
					osMessagePut(keypadQueueHandle, 2, osWaitForever);
 8001bce:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <touch_keypad+0x160>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd6:	2102      	movs	r1, #2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f00d fa31 	bl	800f040 <osMessagePut>
					break;
 8001bde:	e01a      	b.n	8001c16 <touch_keypad+0xf6>
					osMessagePut(keypadQueueHandle, 5, osWaitForever);
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <touch_keypad+0x160>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	2105      	movs	r1, #5
 8001bea:	4618      	mov	r0, r3
 8001bec:	f00d fa28 	bl	800f040 <osMessagePut>
					break;
 8001bf0:	e011      	b.n	8001c16 <touch_keypad+0xf6>
					osMessagePut(keypadQueueHandle, 8, osWaitForever);
 8001bf2:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <touch_keypad+0x160>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfa:	2108      	movs	r1, #8
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f00d fa1f 	bl	800f040 <osMessagePut>
					break;
 8001c02:	e008      	b.n	8001c16 <touch_keypad+0xf6>
					osMessagePut(keypadQueueHandle, 0, osWaitForever);
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <touch_keypad+0x160>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f00d fa16 	bl	800f040 <osMessagePut>
					break;
 8001c14:	bf00      	nop
			break;
 8001c16:	e02b      	b.n	8001c70 <touch_keypad+0x150>
			switch (y) {
 8001c18:	88bb      	ldrh	r3, [r7, #4]
 8001c1a:	2bc8      	cmp	r3, #200	; 0xc8
 8001c1c:	dc2a      	bgt.n	8001c74 <touch_keypad+0x154>
 8001c1e:	2bb4      	cmp	r3, #180	; 0xb4
 8001c20:	da1a      	bge.n	8001c58 <touch_keypad+0x138>
 8001c22:	2b8c      	cmp	r3, #140	; 0x8c
 8001c24:	dc02      	bgt.n	8001c2c <touch_keypad+0x10c>
 8001c26:	2b78      	cmp	r3, #120	; 0x78
 8001c28:	da04      	bge.n	8001c34 <touch_keypad+0x114>
			break;
 8001c2a:	e023      	b.n	8001c74 <touch_keypad+0x154>
 8001c2c:	3b96      	subs	r3, #150	; 0x96
 8001c2e:	2b14      	cmp	r3, #20
 8001c30:	d820      	bhi.n	8001c74 <touch_keypad+0x154>
 8001c32:	e008      	b.n	8001c46 <touch_keypad+0x126>
					osMessagePut(keypadQueueHandle, 3, osWaitForever);
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <touch_keypad+0x160>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	2103      	movs	r1, #3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f00d f9fe 	bl	800f040 <osMessagePut>
					break;
 8001c44:	e011      	b.n	8001c6a <touch_keypad+0x14a>
					osMessagePut(keypadQueueHandle, 6, osWaitForever);
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <touch_keypad+0x160>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4e:	2106      	movs	r1, #6
 8001c50:	4618      	mov	r0, r3
 8001c52:	f00d f9f5 	bl	800f040 <osMessagePut>
					break;
 8001c56:	e008      	b.n	8001c6a <touch_keypad+0x14a>
					osMessagePut(keypadQueueHandle, 9, osWaitForever);
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <touch_keypad+0x160>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c60:	2109      	movs	r1, #9
 8001c62:	4618      	mov	r0, r3
 8001c64:	f00d f9ec 	bl	800f040 <osMessagePut>
					break;
 8001c68:	bf00      	nop
			break;
 8001c6a:	e003      	b.n	8001c74 <touch_keypad+0x154>
			break;
 8001c6c:	bf00      	nop
 8001c6e:	e002      	b.n	8001c76 <touch_keypad+0x156>
			break;
 8001c70:	bf00      	nop
 8001c72:	e000      	b.n	8001c76 <touch_keypad+0x156>
			break;
 8001c74:	bf00      	nop
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000854 	.word	0x20000854

08001c84 <StartTouchPanelTask>:

void StartTouchPanelTask(void const * argument)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	TouchPanel_Calibrate();					// Touch Panel configuration
 8001c8c:	f002 fff0 	bl	8004c70 <TouchPanel_Calibrate>
	osSemaphoreRelease(startSemHandle);
 8001c90:	4b46      	ldr	r3, [pc, #280]	; (8001dac <StartTouchPanelTask+0x128>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f00d f961 	bl	800ef5c <osSemaphoreRelease>
	while (1) {
		getDisplayPoint(&display, Read_Ads7846(), &matrix);
 8001c9a:	f002 fc7d 	bl	8004598 <Read_Ads7846>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4a43      	ldr	r2, [pc, #268]	; (8001db0 <StartTouchPanelTask+0x12c>)
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4843      	ldr	r0, [pc, #268]	; (8001db4 <StartTouchPanelTask+0x130>)
 8001ca6:	f002 ff40 	bl	8004b2a <getDisplayPoint>
		switch (state) {
 8001caa:	4b43      	ldr	r3, [pc, #268]	; (8001db8 <StartTouchPanelTask+0x134>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	dc77      	bgt.n	8001da2 <StartTouchPanelTask+0x11e>
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	da54      	bge.n	8001d60 <StartTouchPanelTask+0xdc>
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <StartTouchPanelTask+0x3c>
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d028      	beq.n	8001d10 <StartTouchPanelTask+0x8c>
 8001cbe:	e070      	b.n	8001da2 <StartTouchPanelTask+0x11e>
			case (WELCOME):
				if (is_btn_touched(display.x, display.y, BTN_REGISTER_X_POS, BTN_REGISTER_Y_POS))		// Tell Control Task that register button has been pressed
 8001cc0:	4b3c      	ldr	r3, [pc, #240]	; (8001db4 <StartTouchPanelTask+0x130>)
 8001cc2:	8818      	ldrh	r0, [r3, #0]
 8001cc4:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <StartTouchPanelTask+0x130>)
 8001cc6:	8859      	ldrh	r1, [r3, #2]
 8001cc8:	235a      	movs	r3, #90	; 0x5a
 8001cca:	22be      	movs	r2, #190	; 0xbe
 8001ccc:	f7ff fefc 	bl	8001ac8 <is_btn_touched>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d008      	beq.n	8001ce8 <StartTouchPanelTask+0x64>
					osMessagePut(stateQueueHandle, REG_ID, osWaitForever);
 8001cd6:	4b39      	ldr	r3, [pc, #228]	; (8001dbc <StartTouchPanelTask+0x138>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f04f 32ff 	mov.w	r2, #4294967295
 8001cde:	2101      	movs	r1, #1
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f00d f9ad 	bl	800f040 <osMessagePut>
				else if (is_btn_touched(display.x, display.y, BTN_LOGIN_X_POS, BTN_LOGIN_Y_POS))		// Tell Control Task that login button has been pressed
					osMessagePut(stateQueueHandle, LOG_ID, osWaitForever);
				break;
 8001ce6:	e057      	b.n	8001d98 <StartTouchPanelTask+0x114>
				else if (is_btn_touched(display.x, display.y, BTN_LOGIN_X_POS, BTN_LOGIN_Y_POS))		// Tell Control Task that login button has been pressed
 8001ce8:	4b32      	ldr	r3, [pc, #200]	; (8001db4 <StartTouchPanelTask+0x130>)
 8001cea:	8818      	ldrh	r0, [r3, #0]
 8001cec:	4b31      	ldr	r3, [pc, #196]	; (8001db4 <StartTouchPanelTask+0x130>)
 8001cee:	8859      	ldrh	r1, [r3, #2]
 8001cf0:	238c      	movs	r3, #140	; 0x8c
 8001cf2:	22be      	movs	r2, #190	; 0xbe
 8001cf4:	f7ff fee8 	bl	8001ac8 <is_btn_touched>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d04c      	beq.n	8001d98 <StartTouchPanelTask+0x114>
					osMessagePut(stateQueueHandle, LOG_ID, osWaitForever);
 8001cfe:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <StartTouchPanelTask+0x138>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f04f 32ff 	mov.w	r2, #4294967295
 8001d06:	2103      	movs	r1, #3
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f00d f999 	bl	800f040 <osMessagePut>
				break;
 8001d0e:	e043      	b.n	8001d98 <StartTouchPanelTask+0x114>
			case (REGISTER_ID):
				if (is_btn_touched(display.x, display.y, BTN_PHOTO_X_POS, BTN_PHOTO_Y_POS))				// Tell Control Task that photo button has been pressed
 8001d10:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <StartTouchPanelTask+0x130>)
 8001d12:	8818      	ldrh	r0, [r3, #0]
 8001d14:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <StartTouchPanelTask+0x130>)
 8001d16:	8859      	ldrh	r1, [r3, #2]
 8001d18:	2373      	movs	r3, #115	; 0x73
 8001d1a:	22be      	movs	r2, #190	; 0xbe
 8001d1c:	f7ff fed4 	bl	8001ac8 <is_btn_touched>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d008      	beq.n	8001d38 <StartTouchPanelTask+0xb4>
					osMessagePut(stateQueueHandle, REG_PIN, osWaitForever);
 8001d26:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <StartTouchPanelTask+0x138>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2e:	2102      	movs	r1, #2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f00d f985 	bl	800f040 <osMessagePut>
				else if (is_btn_touched(display.x, display.y, BTN_CANCEL_X_POS, BTN_CANCEL_Y_POS))		// Tell Control Task that cancel button has been pressed
					osMessagePut(stateQueueHandle, FINISHED, osWaitForever);
				break;
 8001d36:	e031      	b.n	8001d9c <StartTouchPanelTask+0x118>
				else if (is_btn_touched(display.x, display.y, BTN_CANCEL_X_POS, BTN_CANCEL_Y_POS))		// Tell Control Task that cancel button has been pressed
 8001d38:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <StartTouchPanelTask+0x130>)
 8001d3a:	8818      	ldrh	r0, [r3, #0]
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <StartTouchPanelTask+0x130>)
 8001d3e:	8859      	ldrh	r1, [r3, #2]
 8001d40:	23be      	movs	r3, #190	; 0xbe
 8001d42:	2214      	movs	r2, #20
 8001d44:	f7ff fec0 	bl	8001ac8 <is_btn_touched>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d026      	beq.n	8001d9c <StartTouchPanelTask+0x118>
					osMessagePut(stateQueueHandle, FINISHED, osWaitForever);
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <StartTouchPanelTask+0x138>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f04f 32ff 	mov.w	r2, #4294967295
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f00d f971 	bl	800f040 <osMessagePut>
				break;
 8001d5e:	e01d      	b.n	8001d9c <StartTouchPanelTask+0x118>
			case (REGISTER_PIN):
			case (LOGIN_ID):
			case (LOGIN_PIN):
				touch_keypad(display.x, display.y);
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <StartTouchPanelTask+0x130>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <StartTouchPanelTask+0x130>)
 8001d66:	8852      	ldrh	r2, [r2, #2]
 8001d68:	4611      	mov	r1, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fed8 	bl	8001b20 <touch_keypad>
				if (is_btn_touched(display.x, display.y, BTN_CANCEL_X_POS, BTN_CANCEL_Y_POS))			// Tell Control Task that cancel button has been pressed
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <StartTouchPanelTask+0x130>)
 8001d72:	8818      	ldrh	r0, [r3, #0]
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <StartTouchPanelTask+0x130>)
 8001d76:	8859      	ldrh	r1, [r3, #2]
 8001d78:	23be      	movs	r3, #190	; 0xbe
 8001d7a:	2214      	movs	r2, #20
 8001d7c:	f7ff fea4 	bl	8001ac8 <is_btn_touched>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00c      	beq.n	8001da0 <StartTouchPanelTask+0x11c>
					osMessagePut(stateQueueHandle, FINISHED, osWaitForever);
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <StartTouchPanelTask+0x138>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f00d f955 	bl	800f040 <osMessagePut>
				break;
 8001d96:	e003      	b.n	8001da0 <StartTouchPanelTask+0x11c>
				break;
 8001d98:	bf00      	nop
 8001d9a:	e002      	b.n	8001da2 <StartTouchPanelTask+0x11e>
				break;
 8001d9c:	bf00      	nop
 8001d9e:	e000      	b.n	8001da2 <StartTouchPanelTask+0x11e>
				break;
 8001da0:	bf00      	nop
		}
		osDelay(100);
 8001da2:	2064      	movs	r0, #100	; 0x64
 8001da4:	f00c fe6a 	bl	800ea7c <osDelay>
		getDisplayPoint(&display, Read_Ads7846(), &matrix);
 8001da8:	e777      	b.n	8001c9a <StartTouchPanelTask+0x16>
 8001daa:	bf00      	nop
 8001dac:	20000868 	.word	0x20000868
 8001db0:	200017a0 	.word	0x200017a0
 8001db4:	200017d8 	.word	0x200017d8
 8001db8:	200004f0 	.word	0x200004f0
 8001dbc:	2000084c 	.word	0x2000084c

08001dc0 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <MX_DCMI_Init+0x48>)
 8001dc6:	4a11      	ldr	r2, [pc, #68]	; (8001e0c <MX_DCMI_Init+0x4c>)
 8001dc8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <MX_DCMI_Init+0x48>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <MX_DCMI_Init+0x48>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MX_DCMI_Init+0x48>)
 8001dd8:	2280      	movs	r2, #128	; 0x80
 8001dda:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <MX_DCMI_Init+0x48>)
 8001dde:	2240      	movs	r2, #64	; 0x40
 8001de0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_DCMI_Init+0x48>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <MX_DCMI_Init+0x48>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_DCMI_Init+0x48>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001df4:	4804      	ldr	r0, [pc, #16]	; (8001e08 <MX_DCMI_Init+0x48>)
 8001df6:	f003 fab7 	bl	8005368 <HAL_DCMI_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8001e00:	f000 fd82 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000730 	.word	0x20000730
 8001e0c:	50050000 	.word	0x50050000

08001e10 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08c      	sub	sp, #48	; 0x30
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a68      	ldr	r2, [pc, #416]	; (8001fd0 <HAL_DCMI_MspInit+0x1c0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	f040 80c9 	bne.w	8001fc6 <HAL_DCMI_MspInit+0x1b6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	4b66      	ldr	r3, [pc, #408]	; (8001fd4 <HAL_DCMI_MspInit+0x1c4>)
 8001e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3c:	4a65      	ldr	r2, [pc, #404]	; (8001fd4 <HAL_DCMI_MspInit+0x1c4>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6353      	str	r3, [r2, #52]	; 0x34
 8001e44:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <HAL_DCMI_MspInit+0x1c4>)
 8001e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	61bb      	str	r3, [r7, #24]
 8001e4e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	4b5f      	ldr	r3, [pc, #380]	; (8001fd4 <HAL_DCMI_MspInit+0x1c4>)
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	4a5e      	ldr	r2, [pc, #376]	; (8001fd4 <HAL_DCMI_MspInit+0x1c4>)
 8001e5a:	f043 0310 	orr.w	r3, r3, #16
 8001e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e60:	4b5c      	ldr	r3, [pc, #368]	; (8001fd4 <HAL_DCMI_MspInit+0x1c4>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	4b58      	ldr	r3, [pc, #352]	; (8001fd4 <HAL_DCMI_MspInit+0x1c4>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	4a57      	ldr	r2, [pc, #348]	; (8001fd4 <HAL_DCMI_MspInit+0x1c4>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7c:	4b55      	ldr	r3, [pc, #340]	; (8001fd4 <HAL_DCMI_MspInit+0x1c4>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	4b51      	ldr	r3, [pc, #324]	; (8001fd4 <HAL_DCMI_MspInit+0x1c4>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	4a50      	ldr	r2, [pc, #320]	; (8001fd4 <HAL_DCMI_MspInit+0x1c4>)
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	6313      	str	r3, [r2, #48]	; 0x30
 8001e98:	4b4e      	ldr	r3, [pc, #312]	; (8001fd4 <HAL_DCMI_MspInit+0x1c4>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <HAL_DCMI_MspInit+0x1c4>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4a49      	ldr	r2, [pc, #292]	; (8001fd4 <HAL_DCMI_MspInit+0x1c4>)
 8001eae:	f043 0302 	orr.w	r3, r3, #2
 8001eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb4:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <HAL_DCMI_MspInit+0x1c4>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8001ec0:	2373      	movs	r3, #115	; 0x73
 8001ec2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ed0:	230d      	movs	r3, #13
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ed4:	f107 031c 	add.w	r3, r7, #28
 8001ed8:	4619      	mov	r1, r3
 8001eda:	483f      	ldr	r0, [pc, #252]	; (8001fd8 <HAL_DCMI_MspInit+0x1c8>)
 8001edc:	f005 f82c 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_10;
 8001ee0:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8001ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ef2:	230d      	movs	r3, #13
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef6:	f107 031c 	add.w	r3, r7, #28
 8001efa:	4619      	mov	r1, r3
 8001efc:	4837      	ldr	r0, [pc, #220]	; (8001fdc <HAL_DCMI_MspInit+0x1cc>)
 8001efe:	f005 f81b 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f02:	2340      	movs	r3, #64	; 0x40
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001f12:	230d      	movs	r3, #13
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4830      	ldr	r0, [pc, #192]	; (8001fe0 <HAL_DCMI_MspInit+0x1d0>)
 8001f1e:	f005 f80b 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f22:	23c0      	movs	r3, #192	; 0xc0
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001f32:	230d      	movs	r3, #13
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f36:	f107 031c 	add.w	r3, r7, #28
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4829      	ldr	r0, [pc, #164]	; (8001fe4 <HAL_DCMI_MspInit+0x1d4>)
 8001f3e:	f004 fffb 	bl	8006f38 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001f42:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <HAL_DCMI_MspInit+0x1d8>)
 8001f44:	4a29      	ldr	r2, [pc, #164]	; (8001fec <HAL_DCMI_MspInit+0x1dc>)
 8001f46:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001f48:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <HAL_DCMI_MspInit+0x1d8>)
 8001f4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f4e:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f50:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <HAL_DCMI_MspInit+0x1d8>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <HAL_DCMI_MspInit+0x1d8>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001f5c:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <HAL_DCMI_MspInit+0x1d8>)
 8001f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f62:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f64:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_DCMI_MspInit+0x1d8>)
 8001f66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f6a:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f6c:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_DCMI_MspInit+0x1d8>)
 8001f6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f72:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001f74:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <HAL_DCMI_MspInit+0x1d8>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_DCMI_MspInit+0x1d8>)
 8001f7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f80:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f82:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_DCMI_MspInit+0x1d8>)
 8001f84:	2204      	movs	r2, #4
 8001f86:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f88:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_DCMI_MspInit+0x1d8>)
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_DCMI_MspInit+0x1d8>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_DCMI_MspInit+0x1d8>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001f9a:	4813      	ldr	r0, [pc, #76]	; (8001fe8 <HAL_DCMI_MspInit+0x1d8>)
 8001f9c:	f003 fa52 	bl	8005444 <HAL_DMA_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_DCMI_MspInit+0x19a>
    {
      Error_Handler();
 8001fa6:	f000 fcaf 	bl	8002908 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <HAL_DCMI_MspInit+0x1d8>)
 8001fae:	639a      	str	r2, [r3, #56]	; 0x38
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <HAL_DCMI_MspInit+0x1d8>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2105      	movs	r1, #5
 8001fba:	204e      	movs	r0, #78	; 0x4e
 8001fbc:	f002 ffd6 	bl	8004f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001fc0:	204e      	movs	r0, #78	; 0x4e
 8001fc2:	f002 ffef 	bl	8004fa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	3730      	adds	r7, #48	; 0x30
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	50050000 	.word	0x50050000
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40020000 	.word	0x40020000
 8001fe0:	40020800 	.word	0x40020800
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	20000770 	.word	0x20000770
 8001fec:	40026428 	.word	0x40026428

08001ff0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <MX_DMA_Init+0xc0>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a2c      	ldr	r2, [pc, #176]	; (80020b0 <MX_DMA_Init+0xc0>)
 8002000:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <MX_DMA_Init+0xc0>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8002012:	4b28      	ldr	r3, [pc, #160]	; (80020b4 <MX_DMA_Init+0xc4>)
 8002014:	4a28      	ldr	r2, [pc, #160]	; (80020b8 <MX_DMA_Init+0xc8>)
 8002016:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002018:	4b26      	ldr	r3, [pc, #152]	; (80020b4 <MX_DMA_Init+0xc4>)
 800201a:	2200      	movs	r2, #0
 800201c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800201e:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <MX_DMA_Init+0xc4>)
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8002024:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <MX_DMA_Init+0xc4>)
 8002026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_DISABLE;
 800202c:	4b21      	ldr	r3, [pc, #132]	; (80020b4 <MX_DMA_Init+0xc4>)
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002032:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <MX_DMA_Init+0xc4>)
 8002034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002038:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800203a:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <MX_DMA_Init+0xc4>)
 800203c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002040:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8002042:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <MX_DMA_Init+0xc4>)
 8002044:	2200      	movs	r2, #0
 8002046:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002048:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <MX_DMA_Init+0xc4>)
 800204a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800204e:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002050:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <MX_DMA_Init+0xc4>)
 8002052:	2204      	movs	r2, #4
 8002054:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002056:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <MX_DMA_Init+0xc4>)
 8002058:	2203      	movs	r2, #3
 800205a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800205c:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <MX_DMA_Init+0xc4>)
 800205e:	2200      	movs	r2, #0
 8002060:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002062:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <MX_DMA_Init+0xc4>)
 8002064:	2200      	movs	r2, #0
 8002066:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8002068:	4812      	ldr	r0, [pc, #72]	; (80020b4 <MX_DMA_Init+0xc4>)
 800206a:	f003 f9eb 	bl	8005444 <HAL_DMA_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_DMA_Init+0x88>
  {
    Error_Handler();
 8002074:	f000 fc48 	bl	8002908 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	2105      	movs	r1, #5
 800207c:	2039      	movs	r0, #57	; 0x39
 800207e:	f002 ff75 	bl	8004f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002082:	2039      	movs	r0, #57	; 0x39
 8002084:	f002 ff8e 	bl	8004fa4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8002088:	2200      	movs	r2, #0
 800208a:	2105      	movs	r1, #5
 800208c:	203b      	movs	r0, #59	; 0x3b
 800208e:	f002 ff6d 	bl	8004f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002092:	203b      	movs	r0, #59	; 0x3b
 8002094:	f002 ff86 	bl	8004fa4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	2105      	movs	r1, #5
 800209c:	2045      	movs	r0, #69	; 0x45
 800209e:	f002 ff65 	bl	8004f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80020a2:	2045      	movs	r0, #69	; 0x45
 80020a4:	f002 ff7e 	bl	8004fa4 <HAL_NVIC_EnableIRQ>

}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40023800 	.word	0x40023800
 80020b4:	200007d0 	.word	0x200007d0
 80020b8:	40026410 	.word	0x40026410

080020bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4a07      	ldr	r2, [pc, #28]	; (80020e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80020cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	4a06      	ldr	r2, [pc, #24]	; (80020ec <vApplicationGetIdleTaskMemory+0x30>)
 80020d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2280      	movs	r2, #128	; 0x80
 80020d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	2000086c 	.word	0x2000086c
 80020ec:	200008c0 	.word	0x200008c0

080020f0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4a07      	ldr	r2, [pc, #28]	; (800211c <vApplicationGetTimerTaskMemory+0x2c>)
 8002100:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	4a06      	ldr	r2, [pc, #24]	; (8002120 <vApplicationGetTimerTaskMemory+0x30>)
 8002106:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800210e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	20000ac0 	.word	0x20000ac0
 8002120:	20000b14 	.word	0x20000b14

08002124 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002124:	b5b0      	push	{r4, r5, r7, lr}
 8002126:	b0ca      	sub	sp, #296	; 0x128
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of lcdMutex */
  osMutexDef(lcdMutex);
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  lcdMutexHandle = osMutexCreate(osMutex(lcdMutex));
 8002136:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800213a:	4618      	mov	r0, r3
 800213c:	f00c fdf2 	bl	800ed24 <osMutexCreate>
 8002140:	4603      	mov	r3, r0
 8002142:	4a7d      	ldr	r2, [pc, #500]	; (8002338 <MX_FREERTOS_Init+0x214>)
 8002144:	6013      	str	r3, [r2, #0]

  /* definition and creation of sdMutex */
  osMutexDef(sdMutex);
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  sdMutexHandle = osMutexCreate(osMutex(sdMutex));
 8002152:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002156:	4618      	mov	r0, r3
 8002158:	f00c fde4 	bl	800ed24 <osMutexCreate>
 800215c:	4603      	mov	r3, r0
 800215e:	4a77      	ldr	r2, [pc, #476]	; (800233c <MX_FREERTOS_Init+0x218>)
 8002160:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of startSem */
  osSemaphoreDef(startSem);
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  startSemHandle = osSemaphoreCreate(osSemaphore(startSem), 1);
 800216e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002172:	2101      	movs	r1, #1
 8002174:	4618      	mov	r0, r3
 8002176:	f00c fe71 	bl	800ee5c <osSemaphoreCreate>
 800217a:	4603      	mov	r3, r0
 800217c:	4a70      	ldr	r2, [pc, #448]	; (8002340 <MX_FREERTOS_Init+0x21c>)
 800217e:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of messageTimer */
  osTimerDef(messageTimer, MessageTimerCallback);
 8002180:	4b70      	ldr	r3, [pc, #448]	; (8002344 <MX_FREERTOS_Init+0x220>)
 8002182:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  messageTimerHandle = osTimerCreate(osTimer(messageTimer), osTimerOnce, NULL);
 800218c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002190:	2200      	movs	r2, #0
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f00c fc85 	bl	800eaa4 <osTimerCreate>
 800219a:	4603      	mov	r3, r0
 800219c:	4a6a      	ldr	r2, [pc, #424]	; (8002348 <MX_FREERTOS_Init+0x224>)
 800219e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of stateQueue */
  osMessageQDef(stateQueue, 16, uint16_t);
 80021a0:	4b6a      	ldr	r3, [pc, #424]	; (800234c <MX_FREERTOS_Init+0x228>)
 80021a2:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 80021a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  stateQueueHandle = osMessageCreate(osMessageQ(stateQueue), NULL);
 80021ac:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f00c ff1b 	bl	800efee <osMessageCreate>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4a65      	ldr	r2, [pc, #404]	; (8002350 <MX_FREERTOS_Init+0x22c>)
 80021bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of renderQueue */
  osMessageQDef(renderQueue, 16, uint16_t);
 80021be:	4b63      	ldr	r3, [pc, #396]	; (800234c <MX_FREERTOS_Init+0x228>)
 80021c0:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 80021c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  renderQueueHandle = osMessageCreate(osMessageQ(renderQueue), NULL);
 80021ca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80021ce:	2100      	movs	r1, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f00c ff0c 	bl	800efee <osMessageCreate>
 80021d6:	4603      	mov	r3, r0
 80021d8:	4a5e      	ldr	r2, [pc, #376]	; (8002354 <MX_FREERTOS_Init+0x230>)
 80021da:	6013      	str	r3, [r2, #0]

  /* definition and creation of keypadQueue */
  osMessageQDef(keypadQueue, 4, uint16_t);
 80021dc:	4b5e      	ldr	r3, [pc, #376]	; (8002358 <MX_FREERTOS_Init+0x234>)
 80021de:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 80021e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  keypadQueueHandle = osMessageCreate(osMessageQ(keypadQueue), NULL);
 80021e8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f00c fefd 	bl	800efee <osMessageCreate>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4a59      	ldr	r2, [pc, #356]	; (800235c <MX_FREERTOS_Init+0x238>)
 80021f8:	6013      	str	r3, [r2, #0]

  /* definition and creation of fileSystemQueue */
  osMessageQDef(fileSystemQueue, 16, uint16_t);
 80021fa:	4b54      	ldr	r3, [pc, #336]	; (800234c <MX_FREERTOS_Init+0x228>)
 80021fc:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8002200:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002202:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  fileSystemQueueHandle = osMessageCreate(osMessageQ(fileSystemQueue), NULL);
 8002206:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f00c feee 	bl	800efee <osMessageCreate>
 8002212:	4603      	mov	r3, r0
 8002214:	4a52      	ldr	r2, [pc, #328]	; (8002360 <MX_FREERTOS_Init+0x23c>)
 8002216:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002218:	4b52      	ldr	r3, [pc, #328]	; (8002364 <MX_FREERTOS_Init+0x240>)
 800221a:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800221e:	461d      	mov	r5, r3
 8002220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800222c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f00c fbc3 	bl	800e9be <osThreadCreate>
 8002238:	4603      	mov	r3, r0
 800223a:	4a4b      	ldr	r2, [pc, #300]	; (8002368 <MX_FREERTOS_Init+0x244>)
 800223c:	6013      	str	r3, [r2, #0]

  /* definition and creation of controlTask */
  osThreadDef(controlTask, StartControlTask, osPriorityNormal, 0, 128);
 800223e:	4b4b      	ldr	r3, [pc, #300]	; (800236c <MX_FREERTOS_Init+0x248>)
 8002240:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002244:	461d      	mov	r5, r3
 8002246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800224a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800224e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8002252:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f00c fbb0 	bl	800e9be <osThreadCreate>
 800225e:	4603      	mov	r3, r0
 8002260:	4a43      	ldr	r2, [pc, #268]	; (8002370 <MX_FREERTOS_Init+0x24c>)
 8002262:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdTask */
  osThreadDef(lcdTask, StartLCDTask, osPriorityNormal, 0, 128);
 8002264:	4b43      	ldr	r3, [pc, #268]	; (8002374 <MX_FREERTOS_Init+0x250>)
 8002266:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800226a:	461d      	mov	r5, r3
 800226c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800226e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002270:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002274:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 8002278:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f00c fb9d 	bl	800e9be <osThreadCreate>
 8002284:	4603      	mov	r3, r0
 8002286:	4a3c      	ldr	r2, [pc, #240]	; (8002378 <MX_FREERTOS_Init+0x254>)
 8002288:	6013      	str	r3, [r2, #0]

  /* definition and creation of touchPanelTask */
  osThreadDef(touchPanelTask, StartTouchPanelTask, osPriorityNormal, 0, 128);
 800228a:	4b3c      	ldr	r3, [pc, #240]	; (800237c <MX_FREERTOS_Init+0x258>)
 800228c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002290:	461d      	mov	r5, r3
 8002292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002296:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800229a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  touchPanelTaskHandle = osThreadCreate(osThread(touchPanelTask), NULL);
 800229e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f00c fb8a 	bl	800e9be <osThreadCreate>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4a34      	ldr	r2, [pc, #208]	; (8002380 <MX_FREERTOS_Init+0x25c>)
 80022ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of keypadTask */
  osThreadDef(keypadTask, StartKeypadTask, osPriorityNormal, 0, 128);
 80022b0:	4b34      	ldr	r3, [pc, #208]	; (8002384 <MX_FREERTOS_Init+0x260>)
 80022b2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80022b6:	461d      	mov	r5, r3
 80022b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  keypadTaskHandle = osThreadCreate(osThread(keypadTask), NULL);
 80022c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f00c fb77 	bl	800e9be <osThreadCreate>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4a2d      	ldr	r2, [pc, #180]	; (8002388 <MX_FREERTOS_Init+0x264>)
 80022d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of fileSystemTask */
  osThreadDef(fileSystemTask, StartFileSystemTask, osPriorityNormal, 0, 128);
 80022d6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80022da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80022de:	4a2b      	ldr	r2, [pc, #172]	; (800238c <MX_FREERTOS_Init+0x268>)
 80022e0:	461c      	mov	r4, r3
 80022e2:	4615      	mov	r5, r2
 80022e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  fileSystemTaskHandle = osThreadCreate(osThread(fileSystemTask), NULL);
 80022f0:	f107 0320 	add.w	r3, r7, #32
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f00c fb61 	bl	800e9be <osThreadCreate>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4a24      	ldr	r2, [pc, #144]	; (8002390 <MX_FREERTOS_Init+0x26c>)
 8002300:	6013      	str	r3, [r2, #0]

  /* definition and creation of cameraTask */
  osThreadDef(cameraTask, StartCameraTask, osPriorityNormal, 0, 128);
 8002302:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002306:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800230a:	4a22      	ldr	r2, [pc, #136]	; (8002394 <MX_FREERTOS_Init+0x270>)
 800230c:	461c      	mov	r4, r3
 800230e:	4615      	mov	r5, r2
 8002310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002314:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002318:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cameraTaskHandle = osThreadCreate(osThread(cameraTask), NULL);
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f00c fb4c 	bl	800e9be <osThreadCreate>
 8002326:	4603      	mov	r3, r0
 8002328:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <MX_FREERTOS_Init+0x274>)
 800232a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800232c:	bf00      	nop
 800232e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002332:	46bd      	mov	sp, r7
 8002334:	bdb0      	pop	{r4, r5, r7, pc}
 8002336:	bf00      	nop
 8002338:	20000860 	.word	0x20000860
 800233c:	20000864 	.word	0x20000864
 8002340:	20000868 	.word	0x20000868
 8002344:	080019f9 	.word	0x080019f9
 8002348:	2000085c 	.word	0x2000085c
 800234c:	08015e64 	.word	0x08015e64
 8002350:	2000084c 	.word	0x2000084c
 8002354:	20000850 	.word	0x20000850
 8002358:	08015e74 	.word	0x08015e74
 800235c:	20000854 	.word	0x20000854
 8002360:	20000858 	.word	0x20000858
 8002364:	08015e84 	.word	0x08015e84
 8002368:	20000830 	.word	0x20000830
 800236c:	08015ea0 	.word	0x08015ea0
 8002370:	20000834 	.word	0x20000834
 8002374:	08015ebc 	.word	0x08015ebc
 8002378:	20000838 	.word	0x20000838
 800237c:	08015ed8 	.word	0x08015ed8
 8002380:	2000083c 	.word	0x2000083c
 8002384:	08015ef4 	.word	0x08015ef4
 8002388:	20000840 	.word	0x20000840
 800238c:	08015f10 	.word	0x08015f10
 8002390:	20000844 	.word	0x20000844
 8002394:	08015f2c 	.word	0x08015f2c
 8002398:	20000848 	.word	0x20000848

0800239c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void const * argument)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80023a4:	2001      	movs	r0, #1
 80023a6:	f00c fb69 	bl	800ea7c <osDelay>
 80023aa:	e7fb      	b.n	80023a4 <StartDefaultTask+0x8>

080023ac <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
 80023c0:	615a      	str	r2, [r3, #20]
 80023c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80023c4:	4b27      	ldr	r3, [pc, #156]	; (8002464 <MX_FSMC_Init+0xb8>)
 80023c6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80023ca:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80023cc:	4b25      	ldr	r3, [pc, #148]	; (8002464 <MX_FSMC_Init+0xb8>)
 80023ce:	4a26      	ldr	r2, [pc, #152]	; (8002468 <MX_FSMC_Init+0xbc>)
 80023d0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80023d2:	4b24      	ldr	r3, [pc, #144]	; (8002464 <MX_FSMC_Init+0xb8>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80023d8:	4b22      	ldr	r3, [pc, #136]	; (8002464 <MX_FSMC_Init+0xb8>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80023de:	4b21      	ldr	r3, [pc, #132]	; (8002464 <MX_FSMC_Init+0xb8>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80023e4:	4b1f      	ldr	r3, [pc, #124]	; (8002464 <MX_FSMC_Init+0xb8>)
 80023e6:	2210      	movs	r2, #16
 80023e8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80023ea:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <MX_FSMC_Init+0xb8>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80023f0:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <MX_FSMC_Init+0xb8>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80023f6:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <MX_FSMC_Init+0xb8>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <MX_FSMC_Init+0xb8>)
 80023fe:	2200      	movs	r2, #0
 8002400:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002402:	4b18      	ldr	r3, [pc, #96]	; (8002464 <MX_FSMC_Init+0xb8>)
 8002404:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002408:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800240a:	4b16      	ldr	r3, [pc, #88]	; (8002464 <MX_FSMC_Init+0xb8>)
 800240c:	2200      	movs	r2, #0
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002410:	4b14      	ldr	r3, [pc, #80]	; (8002464 <MX_FSMC_Init+0xb8>)
 8002412:	2200      	movs	r2, #0
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <MX_FSMC_Init+0xb8>)
 8002418:	2200      	movs	r2, #0
 800241a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <MX_FSMC_Init+0xb8>)
 800241e:	2200      	movs	r2, #0
 8002420:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <MX_FSMC_Init+0xb8>)
 8002424:	2200      	movs	r2, #0
 8002426:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 4;
 8002428:	2304      	movs	r3, #4
 800242a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800242c:	230f      	movs	r3, #15
 800242e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 40;
 8002430:	2328      	movs	r3, #40	; 0x28
 8002432:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002438:	2310      	movs	r3, #16
 800243a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800243c:	2311      	movs	r3, #17
 800243e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	2200      	movs	r2, #0
 8002448:	4619      	mov	r1, r3
 800244a:	4806      	ldr	r0, [pc, #24]	; (8002464 <MX_FSMC_Init+0xb8>)
 800244c:	f007 fe5a 	bl	800a104 <HAL_SRAM_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8002456:	f000 fa57 	bl	8002908 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800245a:	bf00      	nop
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000f14 	.word	0x20000f14
 8002468:	a0000104 	.word	0xa0000104

0800246c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002480:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <HAL_FSMC_MspInit+0x88>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d131      	bne.n	80024ec <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8002488:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <HAL_FSMC_MspInit+0x88>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <HAL_FSMC_MspInit+0x8c>)
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <HAL_FSMC_MspInit+0x8c>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6393      	str	r3, [r2, #56]	; 0x38
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <HAL_FSMC_MspInit+0x8c>)
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80024aa:	f64f 7380 	movw	r3, #65408	; 0xff80
 80024ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b8:	2303      	movs	r3, #3
 80024ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80024bc:	230c      	movs	r3, #12
 80024be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	4619      	mov	r1, r3
 80024c4:	480d      	ldr	r0, [pc, #52]	; (80024fc <HAL_FSMC_MspInit+0x90>)
 80024c6:	f004 fd37 	bl	8006f38 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80024ca:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80024ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d8:	2303      	movs	r3, #3
 80024da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80024dc:	230c      	movs	r3, #12
 80024de:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024e0:	1d3b      	adds	r3, r7, #4
 80024e2:	4619      	mov	r1, r3
 80024e4:	4806      	ldr	r0, [pc, #24]	; (8002500 <HAL_FSMC_MspInit+0x94>)
 80024e6:	f004 fd27 	bl	8006f38 <HAL_GPIO_Init>
 80024ea:	e000      	b.n	80024ee <HAL_FSMC_MspInit+0x82>
    return;
 80024ec:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000f64 	.word	0x20000f64
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40021000 	.word	0x40021000
 8002500:	40020c00 	.word	0x40020c00

08002504 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800250c:	f7ff ffae 	bl	800246c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08c      	sub	sp, #48	; 0x30
 800251c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251e:	f107 031c 	add.w	r3, r7, #28
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
 800252c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	4b63      	ldr	r3, [pc, #396]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a62      	ldr	r2, [pc, #392]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 8002538:	f043 0310 	orr.w	r3, r3, #16
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b60      	ldr	r3, [pc, #384]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	61bb      	str	r3, [r7, #24]
 8002548:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	4b5c      	ldr	r3, [pc, #368]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a5b      	ldr	r2, [pc, #364]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 8002554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b59      	ldr	r3, [pc, #356]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	4b55      	ldr	r3, [pc, #340]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a54      	ldr	r2, [pc, #336]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b52      	ldr	r3, [pc, #328]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	4b4e      	ldr	r3, [pc, #312]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a4d      	ldr	r2, [pc, #308]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 800258c:	f043 0304 	orr.w	r3, r3, #4
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b4b      	ldr	r3, [pc, #300]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a46      	ldr	r2, [pc, #280]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b44      	ldr	r3, [pc, #272]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	4b40      	ldr	r3, [pc, #256]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a3f      	ldr	r2, [pc, #252]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 80025c4:	f043 0308 	orr.w	r3, r3, #8
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b3d      	ldr	r3, [pc, #244]	; (80026c0 <MX_GPIO_Init+0x1a8>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	607b      	str	r3, [r7, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCDTP_CS_GPIO_Port, LCDTP_CS_Pin, GPIO_PIN_RESET);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2110      	movs	r1, #16
 80025da:	483a      	ldr	r0, [pc, #232]	; (80026c4 <MX_GPIO_Init+0x1ac>)
 80025dc:	f004 fe60 	bl	80072a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BL_PWM_GPIO_Port, BL_PWM_Pin, GPIO_PIN_RESET);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2101      	movs	r1, #1
 80025e4:	4838      	ldr	r0, [pc, #224]	; (80026c8 <MX_GPIO_Init+0x1b0>)
 80025e6:	f004 fe5b 	bl	80072a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80025ea:	2200      	movs	r2, #0
 80025ec:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80025f0:	4836      	ldr	r0, [pc, #216]	; (80026cc <MX_GPIO_Init+0x1b4>)
 80025f2:	f004 fe55 	bl	80072a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80025f6:	2301      	movs	r3, #1
 80025f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80025fa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80025fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002604:	f107 031c 	add.w	r3, r7, #28
 8002608:	4619      	mov	r1, r3
 800260a:	4831      	ldr	r0, [pc, #196]	; (80026d0 <MX_GPIO_Init+0x1b8>)
 800260c:	f004 fc94 	bl	8006f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCDTP_CS_Pin;
 8002610:	2310      	movs	r3, #16
 8002612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002614:	2301      	movs	r3, #1
 8002616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002618:	2302      	movs	r3, #2
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	2300      	movs	r3, #0
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCDTP_CS_GPIO_Port, &GPIO_InitStruct);
 8002620:	f107 031c 	add.w	r3, r7, #28
 8002624:	4619      	mov	r1, r3
 8002626:	4827      	ldr	r0, [pc, #156]	; (80026c4 <MX_GPIO_Init+0x1ac>)
 8002628:	f004 fc86 	bl	8006f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCDTP_IRQ_Pin;
 800262c:	2320      	movs	r3, #32
 800262e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002630:	2300      	movs	r3, #0
 8002632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCDTP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002638:	f107 031c 	add.w	r3, r7, #28
 800263c:	4619      	mov	r1, r3
 800263e:	4821      	ldr	r0, [pc, #132]	; (80026c4 <MX_GPIO_Init+0x1ac>)
 8002640:	f004 fc7a 	bl	8006f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BL_PWM_Pin;
 8002644:	2301      	movs	r3, #1
 8002646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002648:	2301      	movs	r3, #1
 800264a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002650:	2300      	movs	r3, #0
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 8002654:	f107 031c 	add.w	r3, r7, #28
 8002658:	4619      	mov	r1, r3
 800265a:	481b      	ldr	r0, [pc, #108]	; (80026c8 <MX_GPIO_Init+0x1b0>)
 800265c:	f004 fc6c 	bl	8006f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8002660:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002666:	2301      	movs	r3, #1
 8002668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002672:	f107 031c 	add.w	r3, r7, #28
 8002676:	4619      	mov	r1, r3
 8002678:	4814      	ldr	r0, [pc, #80]	; (80026cc <MX_GPIO_Init+0x1b4>)
 800267a:	f004 fc5d 	bl	8006f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800267e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002690:	2300      	movs	r3, #0
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	4619      	mov	r1, r3
 800269a:	480d      	ldr	r0, [pc, #52]	; (80026d0 <MX_GPIO_Init+0x1b8>)
 800269c:	f004 fc4c 	bl	8006f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 80026a0:	2308      	movs	r3, #8
 80026a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a4:	2300      	movs	r3, #0
 80026a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 80026ac:	f107 031c 	add.w	r3, r7, #28
 80026b0:	4619      	mov	r1, r3
 80026b2:	4806      	ldr	r0, [pc, #24]	; (80026cc <MX_GPIO_Init+0x1b4>)
 80026b4:	f004 fc40 	bl	8006f38 <HAL_GPIO_Init>

}
 80026b8:	bf00      	nop
 80026ba:	3730      	adds	r7, #48	; 0x30
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40020800 	.word	0x40020800
 80026c8:	40020400 	.word	0x40020400
 80026cc:	40020c00 	.word	0x40020c00
 80026d0:	40020000 	.word	0x40020000

080026d4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <MX_I2C2_Init+0x50>)
 80026da:	4a13      	ldr	r2, [pc, #76]	; (8002728 <MX_I2C2_Init+0x54>)
 80026dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <MX_I2C2_Init+0x50>)
 80026e0:	4a12      	ldr	r2, [pc, #72]	; (800272c <MX_I2C2_Init+0x58>)
 80026e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026e4:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <MX_I2C2_Init+0x50>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80026ea:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <MX_I2C2_Init+0x50>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <MX_I2C2_Init+0x50>)
 80026f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <MX_I2C2_Init+0x50>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <MX_I2C2_Init+0x50>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002704:	4b07      	ldr	r3, [pc, #28]	; (8002724 <MX_I2C2_Init+0x50>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <MX_I2C2_Init+0x50>)
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002710:	4804      	ldr	r0, [pc, #16]	; (8002724 <MX_I2C2_Init+0x50>)
 8002712:	f001 fd37 	bl	8004184 <HAL_I2C_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800271c:	f000 f8f4 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000f68 	.word	0x20000f68
 8002728:	40005800 	.word	0x40005800
 800272c:	000186a0 	.word	0x000186a0

08002730 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	; 0x28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a19      	ldr	r2, [pc, #100]	; (80027b4 <HAL_I2C_MspInit+0x84>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d12c      	bne.n	80027ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	4b18      	ldr	r3, [pc, #96]	; (80027b8 <HAL_I2C_MspInit+0x88>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <HAL_I2C_MspInit+0x88>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <HAL_I2C_MspInit+0x88>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_SIOC_Pin|I2C_SIOD_Pin;
 800276e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002774:	2312      	movs	r3, #18
 8002776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002778:	2301      	movs	r3, #1
 800277a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277c:	2303      	movs	r3, #3
 800277e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002780:	2304      	movs	r3, #4
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002784:	f107 0314 	add.w	r3, r7, #20
 8002788:	4619      	mov	r1, r3
 800278a:	480c      	ldr	r0, [pc, #48]	; (80027bc <HAL_I2C_MspInit+0x8c>)
 800278c:	f004 fbd4 	bl	8006f38 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <HAL_I2C_MspInit+0x88>)
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <HAL_I2C_MspInit+0x88>)
 800279a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800279e:	6413      	str	r3, [r2, #64]	; 0x40
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_I2C_MspInit+0x88>)
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80027ac:	bf00      	nop
 80027ae:	3728      	adds	r7, #40	; 0x28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40005800 	.word	0x40005800
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40020400 	.word	0x40020400

080027c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80027c4:	f010 f9e2 	bl	8012b8c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027c8:	f002 fab2 	bl	8004d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027cc:	f000 f816 	bl	80027fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027d0:	f7ff fea2 	bl	8002518 <MX_GPIO_Init>
  MX_DMA_Init();
 80027d4:	f7ff fc0c 	bl	8001ff0 <MX_DMA_Init>
  MX_FSMC_Init();
 80027d8:	f7ff fde8 	bl	80023ac <MX_FSMC_Init>
  MX_DCMI_Init();
 80027dc:	f7ff faf0 	bl	8001dc0 <MX_DCMI_Init>
  MX_I2C2_Init();
 80027e0:	f7ff ff78 	bl	80026d4 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80027e4:	f000 f896 	bl	8002914 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80027e8:	f000 f9bc 	bl	8002b64 <MX_SPI2_Init>
  MX_FATFS_Init();
 80027ec:	f008 fdcc 	bl	800b388 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80027f0:	f7ff fc98 	bl	8002124 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80027f4:	f00c f8c0 	bl	800e978 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <main+0x38>
	...

080027fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b094      	sub	sp, #80	; 0x50
 8002800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002802:	f107 0320 	add.w	r3, r7, #32
 8002806:	2230      	movs	r2, #48	; 0x30
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f010 fb6b 	bl	8012ee6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002810:	f107 030c 	add.w	r3, r7, #12
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002820:	2300      	movs	r3, #0
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	4b2d      	ldr	r3, [pc, #180]	; (80028dc <SystemClock_Config+0xe0>)
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	4a2c      	ldr	r2, [pc, #176]	; (80028dc <SystemClock_Config+0xe0>)
 800282a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282e:	6413      	str	r3, [r2, #64]	; 0x40
 8002830:	4b2a      	ldr	r3, [pc, #168]	; (80028dc <SystemClock_Config+0xe0>)
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800283c:	2300      	movs	r3, #0
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <SystemClock_Config+0xe4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a26      	ldr	r2, [pc, #152]	; (80028e0 <SystemClock_Config+0xe4>)
 8002846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <SystemClock_Config+0xe4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002858:	2303      	movs	r3, #3
 800285a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800285c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002862:	2301      	movs	r3, #1
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002866:	2310      	movs	r3, #16
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800286a:	2302      	movs	r3, #2
 800286c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800286e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002874:	2308      	movs	r3, #8
 8002876:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002878:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800287c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800287e:	2302      	movs	r3, #2
 8002880:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002882:	2307      	movs	r3, #7
 8002884:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002886:	f107 0320 	add.w	r3, r7, #32
 800288a:	4618      	mov	r0, r3
 800288c:	f004 fd22 	bl	80072d4 <HAL_RCC_OscConfig>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002896:	f000 f837 	bl	8002908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800289a:	230f      	movs	r3, #15
 800289c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800289e:	2302      	movs	r3, #2
 80028a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80028b2:	f107 030c 	add.w	r3, r7, #12
 80028b6:	2105      	movs	r1, #5
 80028b8:	4618      	mov	r0, r3
 80028ba:	f004 ff83 	bl	80077c4 <HAL_RCC_ClockConfig>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80028c4:	f000 f820 	bl	8002908 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80028c8:	2200      	movs	r2, #0
 80028ca:	2100      	movs	r1, #0
 80028cc:	2000      	movs	r0, #0
 80028ce:	f005 f85f 	bl	8007990 <HAL_RCC_MCOConfig>
}
 80028d2:	bf00      	nop
 80028d4:	3750      	adds	r7, #80	; 0x50
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40007000 	.word	0x40007000

080028e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a04      	ldr	r2, [pc, #16]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d101      	bne.n	80028fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028f6:	f002 fa3d 	bl	8004d74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40001000 	.word	0x40001000

08002908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800290c:	b672      	cpsid	i
}
 800290e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002910:	e7fe      	b.n	8002910 <Error_Handler+0x8>
	...

08002914 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002918:	4b15      	ldr	r3, [pc, #84]	; (8002970 <MX_SDIO_SD_Init+0x5c>)
 800291a:	4a16      	ldr	r2, [pc, #88]	; (8002974 <MX_SDIO_SD_Init+0x60>)
 800291c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800291e:	4b14      	ldr	r3, [pc, #80]	; (8002970 <MX_SDIO_SD_Init+0x5c>)
 8002920:	2200      	movs	r2, #0
 8002922:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002924:	4b12      	ldr	r3, [pc, #72]	; (8002970 <MX_SDIO_SD_Init+0x5c>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800292a:	4b11      	ldr	r3, [pc, #68]	; (8002970 <MX_SDIO_SD_Init+0x5c>)
 800292c:	2200      	movs	r2, #0
 800292e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <MX_SDIO_SD_Init+0x5c>)
 8002932:	2200      	movs	r2, #0
 8002934:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <MX_SDIO_SD_Init+0x5c>)
 8002938:	2200      	movs	r2, #0
 800293a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <MX_SDIO_SD_Init+0x5c>)
 800293e:	2200      	movs	r2, #0
 8002940:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  if (HAL_SD_Init(&hsd) != HAL_OK) {
 8002942:	480b      	ldr	r0, [pc, #44]	; (8002970 <MX_SDIO_SD_Init+0x5c>)
 8002944:	f005 f9e4 	bl	8007d10 <HAL_SD_Init>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <MX_SDIO_SD_Init+0x40>
	  printf("ERROR: SD Init error\n");
 800294e:	480a      	ldr	r0, [pc, #40]	; (8002978 <MX_SDIO_SD_Init+0x64>)
 8002950:	f011 f856 	bl	8013a00 <puts>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK) {
 8002954:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002958:	4805      	ldr	r0, [pc, #20]	; (8002970 <MX_SDIO_SD_Init+0x5c>)
 800295a:	f005 ffb1 	bl	80088c0 <HAL_SD_ConfigWideBusOperation>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <MX_SDIO_SD_Init+0x56>
	  printf("ERROR: WideBus Config error\n");
 8002964:	4805      	ldr	r0, [pc, #20]	; (800297c <MX_SDIO_SD_Init+0x68>)
 8002966:	f011 f84b 	bl	8013a00 <puts>
  }
  /* USER CODE END SDIO_Init 2 */

}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000fbc 	.word	0x20000fbc
 8002974:	40012c00 	.word	0x40012c00
 8002978:	08015f48 	.word	0x08015f48
 800297c:	08015f60 	.word	0x08015f60

08002980 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a69      	ldr	r2, [pc, #420]	; (8002b44 <HAL_SD_MspInit+0x1c4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	f040 80cb 	bne.w	8002b3a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80029a4:	2300      	movs	r3, #0
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	4b67      	ldr	r3, [pc, #412]	; (8002b48 <HAL_SD_MspInit+0x1c8>)
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	4a66      	ldr	r2, [pc, #408]	; (8002b48 <HAL_SD_MspInit+0x1c8>)
 80029ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029b2:	6453      	str	r3, [r2, #68]	; 0x44
 80029b4:	4b64      	ldr	r3, [pc, #400]	; (8002b48 <HAL_SD_MspInit+0x1c8>)
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	4b60      	ldr	r3, [pc, #384]	; (8002b48 <HAL_SD_MspInit+0x1c8>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	4a5f      	ldr	r2, [pc, #380]	; (8002b48 <HAL_SD_MspInit+0x1c8>)
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	6313      	str	r3, [r2, #48]	; 0x30
 80029d0:	4b5d      	ldr	r3, [pc, #372]	; (8002b48 <HAL_SD_MspInit+0x1c8>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029dc:	2300      	movs	r3, #0
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	4b59      	ldr	r3, [pc, #356]	; (8002b48 <HAL_SD_MspInit+0x1c8>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	4a58      	ldr	r2, [pc, #352]	; (8002b48 <HAL_SD_MspInit+0x1c8>)
 80029e6:	f043 0308 	orr.w	r3, r3, #8
 80029ea:	6313      	str	r3, [r2, #48]	; 0x30
 80029ec:	4b56      	ldr	r3, [pc, #344]	; (8002b48 <HAL_SD_MspInit+0x1c8>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80029f8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80029fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a06:	2303      	movs	r3, #3
 8002a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002a0a:	230c      	movs	r3, #12
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	4619      	mov	r1, r3
 8002a14:	484d      	ldr	r0, [pc, #308]	; (8002b4c <HAL_SD_MspInit+0x1cc>)
 8002a16:	f004 fa8f 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a26:	2303      	movs	r3, #3
 8002a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002a2a:	230c      	movs	r3, #12
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4619      	mov	r1, r3
 8002a34:	4846      	ldr	r0, [pc, #280]	; (8002b50 <HAL_SD_MspInit+0x1d0>)
 8002a36:	f004 fa7f 	bl	8006f38 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002a3a:	4b46      	ldr	r3, [pc, #280]	; (8002b54 <HAL_SD_MspInit+0x1d4>)
 8002a3c:	4a46      	ldr	r2, [pc, #280]	; (8002b58 <HAL_SD_MspInit+0x1d8>)
 8002a3e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002a40:	4b44      	ldr	r3, [pc, #272]	; (8002b54 <HAL_SD_MspInit+0x1d4>)
 8002a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a46:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a48:	4b42      	ldr	r3, [pc, #264]	; (8002b54 <HAL_SD_MspInit+0x1d4>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a4e:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <HAL_SD_MspInit+0x1d4>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a54:	4b3f      	ldr	r3, [pc, #252]	; (8002b54 <HAL_SD_MspInit+0x1d4>)
 8002a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a5a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a5c:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <HAL_SD_MspInit+0x1d4>)
 8002a5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a62:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a64:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <HAL_SD_MspInit+0x1d4>)
 8002a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a6a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002a6c:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <HAL_SD_MspInit+0x1d4>)
 8002a6e:	2220      	movs	r2, #32
 8002a70:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a72:	4b38      	ldr	r3, [pc, #224]	; (8002b54 <HAL_SD_MspInit+0x1d4>)
 8002a74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a78:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a7a:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <HAL_SD_MspInit+0x1d4>)
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a80:	4b34      	ldr	r3, [pc, #208]	; (8002b54 <HAL_SD_MspInit+0x1d4>)
 8002a82:	2203      	movs	r2, #3
 8002a84:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002a86:	4b33      	ldr	r3, [pc, #204]	; (8002b54 <HAL_SD_MspInit+0x1d4>)
 8002a88:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002a8e:	4b31      	ldr	r3, [pc, #196]	; (8002b54 <HAL_SD_MspInit+0x1d4>)
 8002a90:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a94:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002a96:	482f      	ldr	r0, [pc, #188]	; (8002b54 <HAL_SD_MspInit+0x1d4>)
 8002a98:	f002 fcd4 	bl	8005444 <HAL_DMA_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8002aa2:	f7ff ff31 	bl	8002908 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a2a      	ldr	r2, [pc, #168]	; (8002b54 <HAL_SD_MspInit+0x1d4>)
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
 8002aac:	4a29      	ldr	r2, [pc, #164]	; (8002b54 <HAL_SD_MspInit+0x1d4>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002ab2:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <HAL_SD_MspInit+0x1dc>)
 8002ab4:	4a2a      	ldr	r2, [pc, #168]	; (8002b60 <HAL_SD_MspInit+0x1e0>)
 8002ab6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002ab8:	4b28      	ldr	r3, [pc, #160]	; (8002b5c <HAL_SD_MspInit+0x1dc>)
 8002aba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002abe:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ac0:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <HAL_SD_MspInit+0x1dc>)
 8002ac2:	2240      	movs	r2, #64	; 0x40
 8002ac4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac6:	4b25      	ldr	r3, [pc, #148]	; (8002b5c <HAL_SD_MspInit+0x1dc>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002acc:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <HAL_SD_MspInit+0x1dc>)
 8002ace:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ad2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ad4:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <HAL_SD_MspInit+0x1dc>)
 8002ad6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ada:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002adc:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <HAL_SD_MspInit+0x1dc>)
 8002ade:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ae2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002ae4:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <HAL_SD_MspInit+0x1dc>)
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002aea:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <HAL_SD_MspInit+0x1dc>)
 8002aec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002af0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002af2:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <HAL_SD_MspInit+0x1dc>)
 8002af4:	2204      	movs	r2, #4
 8002af6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002af8:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <HAL_SD_MspInit+0x1dc>)
 8002afa:	2203      	movs	r2, #3
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002afe:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <HAL_SD_MspInit+0x1dc>)
 8002b00:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b04:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002b06:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <HAL_SD_MspInit+0x1dc>)
 8002b08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002b0e:	4813      	ldr	r0, [pc, #76]	; (8002b5c <HAL_SD_MspInit+0x1dc>)
 8002b10:	f002 fc98 	bl	8005444 <HAL_DMA_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8002b1a:	f7ff fef5 	bl	8002908 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a0e      	ldr	r2, [pc, #56]	; (8002b5c <HAL_SD_MspInit+0x1dc>)
 8002b22:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b24:	4a0d      	ldr	r2, [pc, #52]	; (8002b5c <HAL_SD_MspInit+0x1dc>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2105      	movs	r1, #5
 8002b2e:	2031      	movs	r0, #49	; 0x31
 8002b30:	f002 fa1c 	bl	8004f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002b34:	2031      	movs	r0, #49	; 0x31
 8002b36:	f002 fa35 	bl	8004fa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	3728      	adds	r7, #40	; 0x28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40012c00 	.word	0x40012c00
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40020800 	.word	0x40020800
 8002b50:	40020c00 	.word	0x40020c00
 8002b54:	20001040 	.word	0x20001040
 8002b58:	40026458 	.word	0x40026458
 8002b5c:	200010a0 	.word	0x200010a0
 8002b60:	400264a0 	.word	0x400264a0

08002b64 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002b68:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <MX_SPI2_Init+0x64>)
 8002b6a:	4a18      	ldr	r2, [pc, #96]	; (8002bcc <MX_SPI2_Init+0x68>)
 8002b6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b6e:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <MX_SPI2_Init+0x64>)
 8002b70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b76:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <MX_SPI2_Init+0x64>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <MX_SPI2_Init+0x64>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b82:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <MX_SPI2_Init+0x64>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b88:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <MX_SPI2_Init+0x64>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <MX_SPI2_Init+0x64>)
 8002b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002b96:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <MX_SPI2_Init+0x64>)
 8002b98:	2220      	movs	r2, #32
 8002b9a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <MX_SPI2_Init+0x64>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <MX_SPI2_Init+0x64>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba8:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <MX_SPI2_Init+0x64>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <MX_SPI2_Init+0x64>)
 8002bb0:	220a      	movs	r2, #10
 8002bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002bb4:	4804      	ldr	r0, [pc, #16]	; (8002bc8 <MX_SPI2_Init+0x64>)
 8002bb6:	f006 fbde 	bl	8009376 <HAL_SPI_Init>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002bc0:	f7ff fea2 	bl	8002908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20001100 	.word	0x20001100
 8002bcc:	40003800 	.word	0x40003800

08002bd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	; 0x28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 0314 	add.w	r3, r7, #20
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1d      	ldr	r2, [pc, #116]	; (8002c64 <HAL_SPI_MspInit+0x94>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d134      	bne.n	8002c5c <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <HAL_SPI_MspInit+0x98>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	4a1b      	ldr	r2, [pc, #108]	; (8002c68 <HAL_SPI_MspInit+0x98>)
 8002bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c00:	6413      	str	r3, [r2, #64]	; 0x40
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_SPI_MspInit+0x98>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_SPI_MspInit+0x98>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <HAL_SPI_MspInit+0x98>)
 8002c18:	f043 0302 	orr.w	r3, r3, #2
 8002c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <HAL_SPI_MspInit+0x98>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCDTP_CLK_Pin|LCDTP_DOUT_Pin|LCDTP_DIN_Pin;
 8002c2a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c3c:	2305      	movs	r3, #5
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	4619      	mov	r1, r3
 8002c46:	4809      	ldr	r0, [pc, #36]	; (8002c6c <HAL_SPI_MspInit+0x9c>)
 8002c48:	f004 f976 	bl	8006f38 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2105      	movs	r1, #5
 8002c50:	2024      	movs	r0, #36	; 0x24
 8002c52:	f002 f98b 	bl	8004f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002c56:	2024      	movs	r0, #36	; 0x24
 8002c58:	f002 f9a4 	bl	8004fa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3728      	adds	r7, #40	; 0x28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40003800 	.word	0x40003800
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40020400 	.word	0x40020400

08002c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <HAL_MspInit+0x54>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	4a11      	ldr	r2, [pc, #68]	; (8002cc4 <HAL_MspInit+0x54>)
 8002c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c84:	6453      	str	r3, [r2, #68]	; 0x44
 8002c86:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <HAL_MspInit+0x54>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	603b      	str	r3, [r7, #0]
 8002c96:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_MspInit+0x54>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <HAL_MspInit+0x54>)
 8002c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca2:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <HAL_MspInit+0x54>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	210f      	movs	r1, #15
 8002cb2:	f06f 0001 	mvn.w	r0, #1
 8002cb6:	f002 f959 	bl	8004f6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800

08002cc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08e      	sub	sp, #56	; 0x38
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	4b33      	ldr	r3, [pc, #204]	; (8002dac <HAL_InitTick+0xe4>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	4a32      	ldr	r2, [pc, #200]	; (8002dac <HAL_InitTick+0xe4>)
 8002ce2:	f043 0310 	orr.w	r3, r3, #16
 8002ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce8:	4b30      	ldr	r3, [pc, #192]	; (8002dac <HAL_InitTick+0xe4>)
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cf4:	f107 0210 	add.w	r2, r7, #16
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f004 ffd4 	bl	8007cac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d103      	bne.n	8002d16 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002d0e:	f004 ffb9 	bl	8007c84 <HAL_RCC_GetPCLK1Freq>
 8002d12:	6378      	str	r0, [r7, #52]	; 0x34
 8002d14:	e004      	b.n	8002d20 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002d16:	f004 ffb5 	bl	8007c84 <HAL_RCC_GetPCLK1Freq>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d22:	4a23      	ldr	r2, [pc, #140]	; (8002db0 <HAL_InitTick+0xe8>)
 8002d24:	fba2 2303 	umull	r2, r3, r2, r3
 8002d28:	0c9b      	lsrs	r3, r3, #18
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002d2e:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <HAL_InitTick+0xec>)
 8002d30:	4a21      	ldr	r2, [pc, #132]	; (8002db8 <HAL_InitTick+0xf0>)
 8002d32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002d34:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <HAL_InitTick+0xec>)
 8002d36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d3a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d3c:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <HAL_InitTick+0xec>)
 8002d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d40:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d42:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <HAL_InitTick+0xec>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d48:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <HAL_InitTick+0xec>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d4e:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_InitTick+0xec>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002d54:	4817      	ldr	r0, [pc, #92]	; (8002db4 <HAL_InitTick+0xec>)
 8002d56:	f007 fa1d 	bl	800a194 <HAL_TIM_Base_Init>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002d60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d11b      	bne.n	8002da0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002d68:	4812      	ldr	r0, [pc, #72]	; (8002db4 <HAL_InitTick+0xec>)
 8002d6a:	f007 fa6d 	bl	800a248 <HAL_TIM_Base_Start_IT>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002d74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d111      	bne.n	8002da0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d7c:	2036      	movs	r0, #54	; 0x36
 8002d7e:	f002 f911 	bl	8004fa4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b0f      	cmp	r3, #15
 8002d86:	d808      	bhi.n	8002d9a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	2036      	movs	r0, #54	; 0x36
 8002d8e:	f002 f8ed 	bl	8004f6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <HAL_InitTick+0xf4>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	e002      	b.n	8002da0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002da0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3738      	adds	r7, #56	; 0x38
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40023800 	.word	0x40023800
 8002db0:	431bde83 	.word	0x431bde83
 8002db4:	20001158 	.word	0x20001158
 8002db8:	40001000 	.word	0x40001000
 8002dbc:	2000006c 	.word	0x2000006c

08002dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <NMI_Handler+0x4>

08002dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dca:	e7fe      	b.n	8002dca <HardFault_Handler+0x4>

08002dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd0:	e7fe      	b.n	8002dd0 <MemManage_Handler+0x4>

08002dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dd6:	e7fe      	b.n	8002dd6 <BusFault_Handler+0x4>

08002dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ddc:	e7fe      	b.n	8002ddc <UsageFault_Handler+0x4>

08002dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002df0:	4802      	ldr	r0, [pc, #8]	; (8002dfc <SPI2_IRQHandler+0x10>)
 8002df2:	f006 ff39 	bl	8009c68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20001100 	.word	0x20001100

08002e00 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002e04:	4802      	ldr	r0, [pc, #8]	; (8002e10 <SDIO_IRQHandler+0x10>)
 8002e06:	f005 f9fb 	bl	8008200 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000fbc 	.word	0x20000fbc

08002e14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e18:	4802      	ldr	r0, [pc, #8]	; (8002e24 <TIM6_DAC_IRQHandler+0x10>)
 8002e1a:	f007 fa85 	bl	800a328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20001158 	.word	0x20001158

08002e28 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002e2c:	4802      	ldr	r0, [pc, #8]	; (8002e38 <DMA2_Stream1_IRQHandler+0x10>)
 8002e2e:	f002 fc31 	bl	8005694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000770 	.word	0x20000770

08002e3c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002e40:	4802      	ldr	r0, [pc, #8]	; (8002e4c <DMA2_Stream3_IRQHandler+0x10>)
 8002e42:	f002 fc27 	bl	8005694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20001040 	.word	0x20001040

08002e50 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002e54:	4802      	ldr	r0, [pc, #8]	; (8002e60 <DMA2_Stream6_IRQHandler+0x10>)
 8002e56:	f002 fc1d 	bl	8005694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	200010a0 	.word	0x200010a0

08002e64 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002e68:	4802      	ldr	r0, [pc, #8]	; (8002e74 <DCMI_IRQHandler+0x10>)
 8002e6a:	f002 f949 	bl	8005100 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000730 	.word	0x20000730

08002e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e80:	4a14      	ldr	r2, [pc, #80]	; (8002ed4 <_sbrk+0x5c>)
 8002e82:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <_sbrk+0x60>)
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e8c:	4b13      	ldr	r3, [pc, #76]	; (8002edc <_sbrk+0x64>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d102      	bne.n	8002e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <_sbrk+0x64>)
 8002e96:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <_sbrk+0x68>)
 8002e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e9a:	4b10      	ldr	r3, [pc, #64]	; (8002edc <_sbrk+0x64>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d207      	bcs.n	8002eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ea8:	f00f feec 	bl	8012c84 <__errno>
 8002eac:	4603      	mov	r3, r0
 8002eae:	220c      	movs	r2, #12
 8002eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb6:	e009      	b.n	8002ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <_sbrk+0x64>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <_sbrk+0x64>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	4a05      	ldr	r2, [pc, #20]	; (8002edc <_sbrk+0x64>)
 8002ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eca:	68fb      	ldr	r3, [r7, #12]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20020000 	.word	0x20020000
 8002ed8:	00000400 	.word	0x00000400
 8002edc:	200011a0 	.word	0x200011a0
 8002ee0:	20005780 	.word	0x20005780

08002ee4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <SystemInit+0x20>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eee:	4a05      	ldr	r2, [pc, #20]	; (8002f04 <SystemInit+0x20>)
 8002ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f0c:	480d      	ldr	r0, [pc, #52]	; (8002f44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f0e:	490e      	ldr	r1, [pc, #56]	; (8002f48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f10:	4a0e      	ldr	r2, [pc, #56]	; (8002f4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f14:	e002      	b.n	8002f1c <LoopCopyDataInit>

08002f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f1a:	3304      	adds	r3, #4

08002f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f20:	d3f9      	bcc.n	8002f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f22:	4a0b      	ldr	r2, [pc, #44]	; (8002f50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f24:	4c0b      	ldr	r4, [pc, #44]	; (8002f54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f28:	e001      	b.n	8002f2e <LoopFillZerobss>

08002f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f2c:	3204      	adds	r2, #4

08002f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f30:	d3fb      	bcc.n	8002f2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f32:	f7ff ffd7 	bl	8002ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f36:	f00f ffa1 	bl	8012e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f3a:	f7ff fc41 	bl	80027c0 <main>
  bx  lr    
 8002f3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f48:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8002f4c:	0801a28c 	.word	0x0801a28c
  ldr r2, =_sbss
 8002f50:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8002f54:	2000577c 	.word	0x2000577c

08002f58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f58:	e7fe      	b.n	8002f58 <ADC_IRQHandler>

08002f5a <LCD_IO_Init>:
/**
  * @brief  Configures the LCD_SPI interface.
  * @retval None
  */
void LCD_IO_Init(void)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
//  HAL_Delay(100);
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
//  HAL_Delay(300);

}
 8002f5e:	bf00      	nop
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LCD_IO_WriteMultipleData>:
  * @param  pData Pointer on the register value
  * @param  Size Size of byte to transmit to the register
  * @retval None
  */
void LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t counter = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]

  for (counter = Size; counter != 0; counter--)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	e00c      	b.n	8002f96 <LCD_IO_WriteMultipleData+0x2e>
  {
    /* Write 16-bit Data */
    LCD_RAM = *(uint16_t *)pData;
 8002f7c:	4a0b      	ldr	r2, [pc, #44]	; (8002fac <LCD_IO_WriteMultipleData+0x44>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	8013      	strh	r3, [r2, #0]
    counter--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]
    pData += 2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	607b      	str	r3, [r7, #4]
  for (counter = Size; counter != 0; counter--)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1ef      	bne.n	8002f7c <LCD_IO_WriteMultipleData+0x14>
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	60020000 	.word	0x60020000

08002fb0 <LCD_IO_WriteReg>:
  * @brief  register address.
  * @param  Reg
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Data */
  LCD_REG  = (uint16_t)Reg;
 8002fba:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002fbe:	79fa      	ldrb	r2, [r7, #7]
 8002fc0:	b292      	uxth	r2, r2
 8002fc2:	801a      	strh	r2, [r3, #0]

}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <LCD_IO_ReadData>:
  * @brief  Read register value.
  * @param  Reg
  * @retval None
  */
uint16_t LCD_IO_ReadData(void) 
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* Read 16-bit Reg */
  return (uint16_t)LCD_RAM;
 8002fd4:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <LCD_IO_ReadData+0x14>)
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	b29b      	uxth	r3, r3
  
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	60020000 	.word	0x60020000

08002fe8 <ili9325_Init>:
  * @brief  Initialize the ILI9325 LCD Component.
  * @param  None
  * @retval None
  */
void ili9325_Init(void)
{  
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Initialize ILI9325 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002fec:	f7ff ffb5 	bl	8002f5a <LCD_IO_Init>
  
  /* Start Initial Sequence --------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f000 f9a7 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
 8002ff8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f000 f9a2 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
 8003002:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003006:	2002      	movs	r0, #2
 8003008:	f000 f99d 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
 800300c:	f241 0118 	movw	r1, #4120	; 0x1018
 8003010:	2003      	movs	r0, #3
 8003012:	f000 f998 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
 8003016:	2100      	movs	r1, #0
 8003018:	2004      	movs	r0, #4
 800301a:	f000 f994 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
 800301e:	f240 2102 	movw	r1, #514	; 0x202
 8003022:	2008      	movs	r0, #8
 8003024:	f000 f98f 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
 8003028:	2100      	movs	r1, #0
 800302a:	2009      	movs	r0, #9
 800302c:	f000 f98b 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 8003030:	2100      	movs	r1, #0
 8003032:	200a      	movs	r0, #10
 8003034:	f000 f987 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 8003038:	2100      	movs	r1, #0
 800303a:	200c      	movs	r0, #12
 800303c:	f000 f983 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 8003040:	2100      	movs	r1, #0
 8003042:	200d      	movs	r0, #13
 8003044:	f000 f97f 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 8003048:	2100      	movs	r1, #0
 800304a:	200f      	movs	r0, #15
 800304c:	f000 f97b 	bl	8003346 <ili9325_WriteReg>
  
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8003050:	2100      	movs	r1, #0
 8003052:	2010      	movs	r0, #16
 8003054:	f000 f977 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8003058:	2100      	movs	r1, #0
 800305a:	2011      	movs	r0, #17
 800305c:	f000 f973 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8003060:	2100      	movs	r1, #0
 8003062:	2012      	movs	r0, #18
 8003064:	f000 f96f 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 8003068:	2100      	movs	r1, #0
 800306a:	2013      	movs	r0, #19
 800306c:	f000 f96b 	bl	8003346 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8003070:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8003074:	2010      	movs	r0, #16
 8003076:	f000 f966 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 800307a:	f240 1137 	movw	r1, #311	; 0x137
 800307e:	2011      	movs	r0, #17
 8003080:	f000 f961 	bl	8003346 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8003084:	f240 1139 	movw	r1, #313	; 0x139
 8003088:	2012      	movs	r0, #18
 800308a:	f000 f95c 	bl	8003346 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 800308e:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8003092:	2013      	movs	r0, #19
 8003094:	f000 f957 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8003098:	2113      	movs	r1, #19
 800309a:	2029      	movs	r0, #41	; 0x29
 800309c:	f000 f953 	bl	8003346 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 80030a0:	2100      	movs	r1, #0
 80030a2:	2020      	movs	r0, #32
 80030a4:	f000 f94f 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 80030a8:	2100      	movs	r1, #0
 80030aa:	2021      	movs	r0, #33	; 0x21
 80030ac:	f000 f94b 	bl	8003346 <ili9325_WriteReg>

  /* Adjust the Gamma Curve (ILI9325) ----------------------------------------*/
  ili9325_WriteReg(LCD_REG_48, 0x0007);
 80030b0:	2107      	movs	r1, #7
 80030b2:	2030      	movs	r0, #48	; 0x30
 80030b4:	f000 f947 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_49, 0x0302);
 80030b8:	f240 3102 	movw	r1, #770	; 0x302
 80030bc:	2031      	movs	r0, #49	; 0x31
 80030be:	f000 f942 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_50, 0x0105);
 80030c2:	f240 1105 	movw	r1, #261	; 0x105
 80030c6:	2032      	movs	r0, #50	; 0x32
 80030c8:	f000 f93d 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_53, 0x0206);
 80030cc:	f240 2106 	movw	r1, #518	; 0x206
 80030d0:	2035      	movs	r0, #53	; 0x35
 80030d2:	f000 f938 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_54, 0x0808);
 80030d6:	f640 0108 	movw	r1, #2056	; 0x808
 80030da:	2036      	movs	r0, #54	; 0x36
 80030dc:	f000 f933 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_55, 0x0206);
 80030e0:	f240 2106 	movw	r1, #518	; 0x206
 80030e4:	2037      	movs	r0, #55	; 0x37
 80030e6:	f000 f92e 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_56, 0x0504);
 80030ea:	f240 5104 	movw	r1, #1284	; 0x504
 80030ee:	2038      	movs	r0, #56	; 0x38
 80030f0:	f000 f929 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_57, 0x0007);
 80030f4:	2107      	movs	r1, #7
 80030f6:	2039      	movs	r0, #57	; 0x39
 80030f8:	f000 f925 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_60, 0x0105);
 80030fc:	f240 1105 	movw	r1, #261	; 0x105
 8003100:	203c      	movs	r0, #60	; 0x3c
 8003102:	f000 f920 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_61, 0x0808);
 8003106:	f640 0108 	movw	r1, #2056	; 0x808
 800310a:	203d      	movs	r0, #61	; 0x3d
 800310c:	f000 f91b 	bl	8003346 <ili9325_WriteReg>
  HAL_Delay(50); 
 8003110:	2032      	movs	r0, #50	; 0x32
 8003112:	f001 fe4f 	bl	8004db4 <HAL_Delay>
  /* Set GRAM area -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 8003116:	2100      	movs	r1, #0
 8003118:	2050      	movs	r0, #80	; 0x50
 800311a:	f000 f914 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 800311e:	21ef      	movs	r1, #239	; 0xef
 8003120:	2051      	movs	r0, #81	; 0x51
 8003122:	f000 f910 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 8003126:	2100      	movs	r1, #0
 8003128:	2052      	movs	r0, #82	; 0x52
 800312a:	f000 f90c 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 800312e:	f240 113f 	movw	r1, #319	; 0x13f
 8003132:	2053      	movs	r0, #83	; 0x53
 8003134:	f000 f907 	bl	8003346 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
 8003138:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 800313c:	2060      	movs	r0, #96	; 0x60
 800313e:	f000 f902 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 8003142:	2101      	movs	r1, #1
 8003144:	2061      	movs	r0, #97	; 0x61
 8003146:	f000 f8fe 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 800314a:	2100      	movs	r1, #0
 800314c:	206a      	movs	r0, #106	; 0x6a
 800314e:	f000 f8fa 	bl	8003346 <ili9325_WriteReg>
  
  /* Partial Display Control -------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_128, 0x0000);
 8003152:	2100      	movs	r1, #0
 8003154:	2080      	movs	r0, #128	; 0x80
 8003156:	f000 f8f6 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_129, 0x0000);
 800315a:	2100      	movs	r1, #0
 800315c:	2081      	movs	r0, #129	; 0x81
 800315e:	f000 f8f2 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_130, 0x0000);
 8003162:	2100      	movs	r1, #0
 8003164:	2082      	movs	r0, #130	; 0x82
 8003166:	f000 f8ee 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_131, 0x0000);
 800316a:	2100      	movs	r1, #0
 800316c:	2083      	movs	r0, #131	; 0x83
 800316e:	f000 f8ea 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_132, 0x0000);
 8003172:	2100      	movs	r1, #0
 8003174:	2084      	movs	r0, #132	; 0x84
 8003176:	f000 f8e6 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_133, 0x0000);
 800317a:	2100      	movs	r1, #0
 800317c:	2085      	movs	r0, #133	; 0x85
 800317e:	f000 f8e2 	bl	8003346 <ili9325_WriteReg>
  
  /* Panel Control -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_144, 0x0010);
 8003182:	2110      	movs	r1, #16
 8003184:	2090      	movs	r0, #144	; 0x90
 8003186:	f000 f8de 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_146, 0x0000);
 800318a:	2100      	movs	r1, #0
 800318c:	2092      	movs	r0, #146	; 0x92
 800318e:	f000 f8da 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_147, 0x0003);
 8003192:	2103      	movs	r1, #3
 8003194:	2093      	movs	r0, #147	; 0x93
 8003196:	f000 f8d6 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_149, 0x0110);
 800319a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800319e:	2095      	movs	r0, #149	; 0x95
 80031a0:	f000 f8d1 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_151, 0x0000);
 80031a4:	2100      	movs	r1, #0
 80031a6:	2097      	movs	r0, #151	; 0x97
 80031a8:	f000 f8cd 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_152, 0x0000);
 80031ac:	2100      	movs	r1, #0
 80031ae:	2098      	movs	r0, #152	; 0x98
 80031b0:	f000 f8c9 	bl	8003346 <ili9325_WriteReg>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 80031b4:	f241 0128 	movw	r1, #4136	; 0x1028
 80031b8:	2003      	movs	r0, #3
 80031ba:	f000 f8c4 	bl	8003346 <ili9325_WriteReg>
  
  /* 262K color and display ON */ 
  ili9325_WriteReg(LCD_REG_7, 0x0173);    
 80031be:	f240 1173 	movw	r1, #371	; 0x173
 80031c2:	2007      	movs	r0, #7
 80031c4:	f000 f8bf 	bl	8003346 <ili9325_WriteReg>
  
  /* Set the Cursor */ 
  ili9325_SetCursor(0, 0);
 80031c8:	2100      	movs	r1, #0
 80031ca:	2000      	movs	r0, #0
 80031cc:	f000 f86d 	bl	80032aa <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80031d0:	2022      	movs	r0, #34	; 0x22
 80031d2:	f7ff feed 	bl	8002fb0 <LCD_IO_WriteReg>
}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}

080031da <ili9325_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOn(void)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	af00      	add	r7, sp, #0
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80031de:	2100      	movs	r1, #0
 80031e0:	2010      	movs	r0, #16
 80031e2:	f000 f8b0 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80031e6:	2100      	movs	r1, #0
 80031e8:	2011      	movs	r0, #17
 80031ea:	f000 f8ac 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 80031ee:	2100      	movs	r1, #0
 80031f0:	2012      	movs	r0, #18
 80031f2:	f000 f8a8 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 80031f6:	2100      	movs	r1, #0
 80031f8:	2013      	movs	r0, #19
 80031fa:	f000 f8a4 	bl	8003346 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80031fe:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8003202:	2010      	movs	r0, #16
 8003204:	f000 f89f 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8003208:	f240 1137 	movw	r1, #311	; 0x137
 800320c:	2011      	movs	r0, #17
 800320e:	f000 f89a 	bl	8003346 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8003212:	f240 1139 	movw	r1, #313	; 0x139
 8003216:	2012      	movs	r0, #18
 8003218:	f000 f895 	bl	8003346 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 800321c:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8003220:	2013      	movs	r0, #19
 8003222:	f000 f890 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8003226:	2113      	movs	r1, #19
 8003228:	2029      	movs	r0, #41	; 0x29
 800322a:	f000 f88c 	bl	8003346 <ili9325_WriteReg>
 
  /* Display On */
  ili9325_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
 800322e:	f240 1173 	movw	r1, #371	; 0x173
 8003232:	2007      	movs	r0, #7
 8003234:	f000 f887 	bl	8003346 <ili9325_WriteReg>
}
 8003238:	bf00      	nop
 800323a:	bd80      	pop	{r7, pc}

0800323c <ili9325_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOff(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* Power Off sequence ------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8003240:	2100      	movs	r1, #0
 8003242:	2010      	movs	r0, #16
 8003244:	f000 f87f 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8003248:	2100      	movs	r1, #0
 800324a:	2011      	movs	r0, #17
 800324c:	f000 f87b 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8003250:	2100      	movs	r1, #0
 8003252:	2012      	movs	r0, #18
 8003254:	f000 f877 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 8003258:	2100      	movs	r1, #0
 800325a:	2013      	movs	r0, #19
 800325c:	f000 f873 	bl	8003346 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_41, 0x0000); /* VCM[4:0] for VCOMH */
 8003260:	2100      	movs	r1, #0
 8003262:	2029      	movs	r0, #41	; 0x29
 8003264:	f000 f86f 	bl	8003346 <ili9325_WriteReg>
  
  /* Display Off */
  ili9325_WriteReg(LCD_REG_7, 0x0); 
 8003268:	2100      	movs	r1, #0
 800326a:	2007      	movs	r0, #7
 800326c:	f000 f86b 	bl	8003346 <ili9325_WriteReg>
}
 8003270:	bf00      	nop
 8003272:	bd80      	pop	{r7, pc}

08003274 <ili9325_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9325_GetLcdPixelWidth(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
 return (uint16_t)320;
 8003278:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <ili9325_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9325_GetLcdPixelHeight(void)
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0
 return (uint16_t)240;
 800328a:	23f0      	movs	r3, #240	; 0xf0
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <ili9325_ReadID>:
  * @brief  Get the ILI9325 ID.
  * @param  None
  * @retval The ILI9325 ID 
  */
uint16_t ili9325_ReadID(void)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 800329a:	f7ff fe5e 	bl	8002f5a <LCD_IO_Init>
  return (ili9325_ReadReg(0x00));
 800329e:	2000      	movs	r0, #0
 80032a0:	f000 f866 	bl	8003370 <ili9325_ReadReg>
 80032a4:	4603      	mov	r3, r0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	bd80      	pop	{r7, pc}

080032aa <ili9325_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9325_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	4603      	mov	r3, r0
 80032b2:	460a      	mov	r2, r1
 80032b4:	80fb      	strh	r3, [r7, #6]
 80032b6:	4613      	mov	r3, r2
 80032b8:	80bb      	strh	r3, [r7, #4]
//  ili9325_WriteReg(LCD_REG_32, Ypos);
//  ili9325_WriteReg(LCD_REG_33, (ILI9325_LCD_PIXEL_WIDTH - 1 - Xpos));

  ili9325_WriteReg(LCD_REG_32, (ILI9325_LCD_PIXEL_HEIGHT- 1 - Ypos));
 80032ba:	88bb      	ldrh	r3, [r7, #4]
 80032bc:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	4619      	mov	r1, r3
 80032c4:	2020      	movs	r0, #32
 80032c6:	f000 f83e 	bl	8003346 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, Xpos);
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	4619      	mov	r1, r3
 80032ce:	2021      	movs	r0, #33	; 0x21
 80032d0:	f000 f839 	bl	8003346 <ili9325_WriteReg>

}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <ili9325_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9325_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	80fb      	strh	r3, [r7, #6]
 80032e6:	460b      	mov	r3, r1
 80032e8:	80bb      	strh	r3, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 80032ee:	88ba      	ldrh	r2, [r7, #4]
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ffd8 	bl	80032aa <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80032fa:	2022      	movs	r0, #34	; 0x22
 80032fc:	f7ff fe58 	bl	8002fb0 <LCD_IO_WriteReg>

  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&RGBCode, 2);
 8003300:	1cbb      	adds	r3, r7, #2
 8003302:	2102      	movs	r1, #2
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fe2f 	bl	8002f68 <LCD_IO_WriteMultipleData>
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <ili9325_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval The RGB pixel color
  */
uint16_t ili9325_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	4603      	mov	r3, r0
 800331a:	460a      	mov	r2, r1
 800331c:	80fb      	strh	r3, [r7, #6]
 800331e:	4613      	mov	r3, r2
 8003320:	80bb      	strh	r3, [r7, #4]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8003322:	88ba      	ldrh	r2, [r7, #4]
 8003324:	88fb      	ldrh	r3, [r7, #6]
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff ffbe 	bl	80032aa <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 800332e:	2022      	movs	r0, #34	; 0x22
 8003330:	f7ff fe3e 	bl	8002fb0 <LCD_IO_WriteReg>
  
  /* Dummy read */
  LCD_IO_ReadData();
 8003334:	f7ff fe4c 	bl	8002fd0 <LCD_IO_ReadData>
  
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 8003338:	f7ff fe4a 	bl	8002fd0 <LCD_IO_ReadData>
 800333c:	4603      	mov	r3, r0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <ili9325_WriteReg>:
  * @param  LCDReg: Address of the selected register.
  * @param  LCDRegValue: Value to write to the selected register.
  * @retval None
  */
void ili9325_WriteReg(uint8_t LCDReg, uint16_t LCDRegValue)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	4603      	mov	r3, r0
 800334e:	460a      	mov	r2, r1
 8003350:	71fb      	strb	r3, [r7, #7]
 8003352:	4613      	mov	r3, r2
 8003354:	80bb      	strh	r3, [r7, #4]
  LCD_IO_WriteReg(LCDReg);
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fe29 	bl	8002fb0 <LCD_IO_WriteReg>
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&LCDRegValue, 2);
 800335e:	1d3b      	adds	r3, r7, #4
 8003360:	2102      	movs	r1, #2
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fe00 	bl	8002f68 <LCD_IO_WriteMultipleData>
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <ili9325_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCDReg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t ili9325_ReadReg(uint8_t LCDReg)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index (then Read Reg) */
  LCD_IO_WriteReg(LCDReg);
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fe17 	bl	8002fb0 <LCD_IO_WriteReg>

  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 8003382:	f7ff fe25 	bl	8002fd0 <LCD_IO_ReadData>
 8003386:	4603      	mov	r3, r0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <ili9325_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9325_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003390:	b590      	push	{r4, r7, lr}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4604      	mov	r4, r0
 8003398:	4608      	mov	r0, r1
 800339a:	4611      	mov	r1, r2
 800339c:	461a      	mov	r2, r3
 800339e:	4623      	mov	r3, r4
 80033a0:	80fb      	strh	r3, [r7, #6]
 80033a2:	4603      	mov	r3, r0
 80033a4:	80bb      	strh	r3, [r7, #4]
 80033a6:	460b      	mov	r3, r1
 80033a8:	807b      	strh	r3, [r7, #2]
 80033aa:	4613      	mov	r3, r2
 80033ac:	803b      	strh	r3, [r7, #0]
//  ili9325_WriteReg(LCD_REG_82, ILI9325_LCD_PIXEL_WIDTH - Xpos - Width);
//  /* Vertical GRAM End Address */
//  ili9325_WriteReg(LCD_REG_83, ILI9325_LCD_PIXEL_WIDTH - Xpos - 1);   
  
  /* Horizontal GRAM Start Address */
  ili9325_WriteReg(LCD_REG_80, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - Height));
 80033ae:	88ba      	ldrh	r2, [r7, #4]
 80033b0:	883b      	ldrh	r3, [r7, #0]
 80033b2:	4413      	add	r3, r2
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	4619      	mov	r1, r3
 80033be:	2050      	movs	r0, #80	; 0x50
 80033c0:	f7ff ffc1 	bl	8003346 <ili9325_WriteReg>
  /* Horizontal GRAM End Address */
  ili9325_WriteReg(LCD_REG_81, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - 1));
 80033c4:	88bb      	ldrh	r3, [r7, #4]
 80033c6:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	4619      	mov	r1, r3
 80033ce:	2051      	movs	r0, #81	; 0x51
 80033d0:	f7ff ffb9 	bl	8003346 <ili9325_WriteReg>
  
  /* Vertical GRAM Start Address */
  ili9325_WriteReg(LCD_REG_82,  Xpos);
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	4619      	mov	r1, r3
 80033d8:	2052      	movs	r0, #82	; 0x52
 80033da:	f7ff ffb4 	bl	8003346 <ili9325_WriteReg>
  /* Vertical GRAM End Address */
  ili9325_WriteReg(LCD_REG_83, (Xpos + Width - 1));
 80033de:	88fa      	ldrh	r2, [r7, #6]
 80033e0:	887b      	ldrh	r3, [r7, #2]
 80033e2:	4413      	add	r3, r2
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	4619      	mov	r1, r3
 80033ec:	2053      	movs	r0, #83	; 0x53
 80033ee:	f7ff ffaa 	bl	8003346 <ili9325_WriteReg>
  
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd90      	pop	{r4, r7, pc}
	...

080033fc <ili9325_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	4604      	mov	r4, r0
 8003404:	4608      	mov	r0, r1
 8003406:	4611      	mov	r1, r2
 8003408:	461a      	mov	r2, r3
 800340a:	4623      	mov	r3, r4
 800340c:	80fb      	strh	r3, [r7, #6]
 800340e:	4603      	mov	r3, r0
 8003410:	80bb      	strh	r3, [r7, #4]
 8003412:	460b      	mov	r3, r1
 8003414:	807b      	strh	r3, [r7, #2]
 8003416:	4613      	mov	r3, r2
 8003418:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos); 
 800341e:	887a      	ldrh	r2, [r7, #2]
 8003420:	88bb      	ldrh	r3, [r7, #4]
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff40 	bl	80032aa <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 800342a:	2022      	movs	r0, #34	; 0x22
 800342c:	f7ff fdc0 	bl	8002fb0 <LCD_IO_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8003430:	2300      	movs	r3, #0
 8003432:	81fb      	strh	r3, [r7, #14]
 8003434:	e007      	b.n	8003446 <ili9325_DrawHLine+0x4a>
  {
    ArrayRGB[counter] = RGBCode;
 8003436:	89fb      	ldrh	r3, [r7, #14]
 8003438:	490a      	ldr	r1, [pc, #40]	; (8003464 <ili9325_DrawHLine+0x68>)
 800343a:	88fa      	ldrh	r2, [r7, #6]
 800343c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8003440:	89fb      	ldrh	r3, [r7, #14]
 8003442:	3301      	adds	r3, #1
 8003444:	81fb      	strh	r3, [r7, #14]
 8003446:	89fa      	ldrh	r2, [r7, #14]
 8003448:	883b      	ldrh	r3, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d3f3      	bcc.n	8003436 <ili9325_DrawHLine+0x3a>
  }  

  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 800344e:	883b      	ldrh	r3, [r7, #0]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4619      	mov	r1, r3
 8003454:	4803      	ldr	r0, [pc, #12]	; (8003464 <ili9325_DrawHLine+0x68>)
 8003456:	f7ff fd87 	bl	8002f68 <LCD_IO_WriteMultipleData>
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bd90      	pop	{r4, r7, pc}
 8003462:	bf00      	nop
 8003464:	200011a4 	.word	0x200011a4

08003468 <ili9325_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003468:	b590      	push	{r4, r7, lr}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	4604      	mov	r4, r0
 8003470:	4608      	mov	r0, r1
 8003472:	4611      	mov	r1, r2
 8003474:	461a      	mov	r2, r3
 8003476:	4623      	mov	r3, r4
 8003478:	80fb      	strh	r3, [r7, #6]
 800347a:	4603      	mov	r3, r0
 800347c:	80bb      	strh	r3, [r7, #4]
 800347e:	460b      	mov	r3, r1
 8003480:	807b      	strh	r3, [r7, #2]
 8003482:	4613      	mov	r3, r2
 8003484:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	81fb      	strh	r3, [r7, #14]

  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1020);
 800348a:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 800348e:	2003      	movs	r0, #3
 8003490:	f7ff ff59 	bl	8003346 <ili9325_WriteReg>
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8003494:	887a      	ldrh	r2, [r7, #2]
 8003496:	88bb      	ldrh	r3, [r7, #4]
 8003498:	4611      	mov	r1, r2
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff ff05 	bl	80032aa <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80034a0:	2022      	movs	r0, #34	; 0x22
 80034a2:	f7ff fd85 	bl	8002fb0 <LCD_IO_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 80034a6:	2300      	movs	r3, #0
 80034a8:	81fb      	strh	r3, [r7, #14]
 80034aa:	e007      	b.n	80034bc <ili9325_DrawVLine+0x54>
  {
    ArrayRGB[counter] = RGBCode;
 80034ac:	89fb      	ldrh	r3, [r7, #14]
 80034ae:	490d      	ldr	r1, [pc, #52]	; (80034e4 <ili9325_DrawVLine+0x7c>)
 80034b0:	88fa      	ldrh	r2, [r7, #6]
 80034b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 80034b6:	89fb      	ldrh	r3, [r7, #14]
 80034b8:	3301      	adds	r3, #1
 80034ba:	81fb      	strh	r3, [r7, #14]
 80034bc:	89fa      	ldrh	r2, [r7, #14]
 80034be:	883b      	ldrh	r3, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d3f3      	bcc.n	80034ac <ili9325_DrawVLine+0x44>
  }
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 80034c4:	883b      	ldrh	r3, [r7, #0]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	4619      	mov	r1, r3
 80034ca:	4806      	ldr	r0, [pc, #24]	; (80034e4 <ili9325_DrawVLine+0x7c>)
 80034cc:	f7ff fd4c 	bl	8002f68 <LCD_IO_WriteMultipleData>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);  
 80034d0:	f241 0128 	movw	r1, #4136	; 0x1028
 80034d4:	2003      	movs	r0, #3
 80034d6:	f7ff ff36 	bl	8003346 <ili9325_WriteReg>
}
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd90      	pop	{r4, r7, pc}
 80034e2:	bf00      	nop
 80034e4:	200011a4 	.word	0x200011a4

080034e8 <ili9325_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ili9325_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	603a      	str	r2, [r7, #0]
 80034f2:	80fb      	strh	r3, [r7, #6]
 80034f4:	460b      	mov	r3, r1
 80034f6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	2300      	movs	r3, #0
 80034fe:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	3302      	adds	r3, #2
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	b29b      	uxth	r3, r3
 8003508:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	3304      	adds	r3, #4
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	041b      	lsls	r3, r3, #16
 8003514:	461a      	mov	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4313      	orrs	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	330a      	adds	r3, #10
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	b29b      	uxth	r3, r3
 8003524:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	b29b      	uxth	r3, r3
 800352e:	041b      	lsls	r3, r3, #16
 8003530:	461a      	mov	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	085b      	lsrs	r3, r3, #1
 8003540:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	603b      	str	r3, [r7, #0]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : decrement, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1038);
 800354a:	f241 0138 	movw	r1, #4152	; 0x1038
 800354e:	2003      	movs	r0, #3
 8003550:	f7ff fef9 	bl	8003346 <ili9325_WriteReg>

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8003554:	88ba      	ldrh	r2, [r7, #4]
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fea5 	bl	80032aa <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8003560:	2022      	movs	r0, #34	; 0x22
 8003562:	f7ff fd25 	bl	8002fb0 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4619      	mov	r1, r3
 800356c:	6838      	ldr	r0, [r7, #0]
 800356e:	f7ff fcfb 	bl	8002f68 <LCD_IO_WriteMultipleData>
 
  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 8003572:	f241 0128 	movw	r1, #4136	; 0x1028
 8003576:	2003      	movs	r0, #3
 8003578:	f7ff fee5 	bl	8003346 <ili9325_WriteReg>
}
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <ili9325_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ili9325_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8003584:	b590      	push	{r4, r7, lr}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	4604      	mov	r4, r0
 800358c:	4608      	mov	r0, r1
 800358e:	4611      	mov	r1, r2
 8003590:	461a      	mov	r2, r3
 8003592:	4623      	mov	r3, r4
 8003594:	80fb      	strh	r3, [r7, #6]
 8003596:	4603      	mov	r3, r0
 8003598:	80bb      	strh	r3, [r7, #4]
 800359a:	460b      	mov	r3, r1
 800359c:	807b      	strh	r3, [r7, #2]
 800359e:	4613      	mov	r3, r2
 80035a0:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]

  size = (Xsize * Ysize);
 80035a6:	887b      	ldrh	r3, [r7, #2]
 80035a8:	883a      	ldrh	r2, [r7, #0]
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 80035b0:	88ba      	ldrh	r2, [r7, #4]
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fe77 	bl	80032aa <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80035bc:	2022      	movs	r0, #34	; 0x22
 80035be:	f7ff fcf7 	bl	8002fb0 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pdata, size*2);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	4619      	mov	r1, r3
 80035c8:	6a38      	ldr	r0, [r7, #32]
 80035ca:	f7ff fccd 	bl	8002f68 <LCD_IO_WriteMultipleData>
}
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd90      	pop	{r4, r7, pc}
	...

080035d8 <ili9325_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void ili9325_Clear(uint16_t Color)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	80fb      	strh	r3, [r7, #6]
  uint32_t size = ILI9325_LCD_PIXEL_HEIGHT * ILI9325_LCD_PIXEL_WIDTH;
 80035e2:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80035e6:	60fb      	str	r3, [r7, #12]
  
  /* Set Cursor */
  ili9325_SetCursor(0, 0);  
 80035e8:	2100      	movs	r1, #0
 80035ea:	2000      	movs	r0, #0
 80035ec:	f7ff fe5d 	bl	80032aa <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80035f0:	2022      	movs	r0, #34	; 0x22
 80035f2:	f7ff fcdd 	bl	8002fb0 <LCD_IO_WriteReg>
  
  while((size--) != 0)
 80035f6:	e002      	b.n	80035fe <ili9325_Clear+0x26>
  {
    /* Write 16-bit Data */
    LCD_RAM = Color;
 80035f8:	4a06      	ldr	r2, [pc, #24]	; (8003614 <ili9325_Clear+0x3c>)
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	8013      	strh	r3, [r2, #0]
  while((size--) != 0)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1e5a      	subs	r2, r3, #1
 8003602:	60fa      	str	r2, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f7      	bne.n	80035f8 <ili9325_Clear+0x20>
  }
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	60020000 	.word	0x60020000

08003618 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8003622:	4b16      	ldr	r3, [pc, #88]	; (800367c <BSP_LCD_Init+0x64>)
 8003624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003628:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 800362a:	4b14      	ldr	r3, [pc, #80]	; (800367c <BSP_LCD_Init+0x64>)
 800362c:	4a14      	ldr	r2, [pc, #80]	; (8003680 <BSP_LCD_Init+0x68>)
 800362e:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8003630:	4b12      	ldr	r3, [pc, #72]	; (800367c <BSP_LCD_Init+0x64>)
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
  if(ili9325_drv.ReadID() == ILI9325_ID || ili9325_drv.ReadID() == ILI9328_ID)
 8003636:	4b13      	ldr	r3, [pc, #76]	; (8003684 <BSP_LCD_Init+0x6c>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	4798      	blx	r3
 800363c:	4603      	mov	r3, r0
 800363e:	461a      	mov	r2, r3
 8003640:	f249 3325 	movw	r3, #37669	; 0x9325
 8003644:	429a      	cmp	r2, r3
 8003646:	d008      	beq.n	800365a <BSP_LCD_Init+0x42>
 8003648:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <BSP_LCD_Init+0x6c>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	4798      	blx	r3
 800364e:	4603      	mov	r3, r0
 8003650:	461a      	mov	r2, r3
 8003652:	f249 3328 	movw	r3, #37672	; 0x9328
 8003656:	429a      	cmp	r2, r3
 8003658:	d10b      	bne.n	8003672 <BSP_LCD_Init+0x5a>
  {
    lcd_drv = &ili9325_drv;
 800365a:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <BSP_LCD_Init+0x70>)
 800365c:	4a09      	ldr	r2, [pc, #36]	; (8003684 <BSP_LCD_Init+0x6c>)
 800365e:	601a      	str	r2, [r3, #0]

    /* LCD Init */   
    lcd_drv->Init();
 8003660:	4b09      	ldr	r3, [pc, #36]	; (8003688 <BSP_LCD_Init+0x70>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003668:	4805      	ldr	r0, [pc, #20]	; (8003680 <BSP_LCD_Init+0x68>)
 800366a:	f000 f837 	bl	80036dc <BSP_LCD_SetFont>

    ret = LCD_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 8003672:	79fb      	ldrb	r3, [r7, #7]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20001424 	.word	0x20001424
 8003680:	20000064 	.word	0x20000064
 8003684:	20000004 	.word	0x20000004
 8003688:	20001430 	.word	0x20001430

0800368c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8003690:	4b03      	ldr	r3, [pc, #12]	; (80036a0 <BSP_LCD_GetXSize+0x14>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	4798      	blx	r3
 8003698:	4603      	mov	r3, r0
}
 800369a:	4618      	mov	r0, r3
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20001430 	.word	0x20001430

080036a4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 80036a8:	4b03      	ldr	r3, [pc, #12]	; (80036b8 <BSP_LCD_GetYSize+0x14>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	4798      	blx	r3
 80036b0:	4603      	mov	r3, r0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20001430 	.word	0x20001430

080036bc <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	4a03      	ldr	r2, [pc, #12]	; (80036d8 <BSP_LCD_SetTextColor+0x1c>)
 80036ca:	6013      	str	r3, [r2, #0]
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	20001424 	.word	0x20001424

080036dc <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  pFonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 80036e4:	4a04      	ldr	r2, [pc, #16]	; (80036f8 <BSP_LCD_SetFont+0x1c>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6093      	str	r3, [r2, #8]
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	20001424 	.word	0x20001424

080036fc <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <BSP_LCD_GetFont+0x14>)
 8003702:	689b      	ldr	r3, [r3, #8]
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	20001424 	.word	0x20001424

08003714 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8003714:	b590      	push	{r4, r7, lr}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
  
  uint32_t color_backup = DrawProp.TextColor; 
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <BSP_LCD_Clear+0x64>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	4a13      	ldr	r2, [pc, #76]	; (8003778 <BSP_LCD_Clear+0x64>)
 800372c:	6013      	str	r3, [r2, #0]
  
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	e00d      	b.n	8003750 <BSP_LCD_Clear+0x3c>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	b29c      	uxth	r4, r3
 8003738:	f7ff ffa8 	bl	800368c <BSP_LCD_GetXSize>
 800373c:	4603      	mov	r3, r0
 800373e:	b29b      	uxth	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	4621      	mov	r1, r4
 8003744:	2000      	movs	r0, #0
 8003746:	f000 f8e9 	bl	800391c <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	3301      	adds	r3, #1
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	f7ff ffa8 	bl	80036a4 <BSP_LCD_GetYSize>
 8003754:	4602      	mov	r2, r0
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4293      	cmp	r3, r2
 800375a:	d3eb      	bcc.n	8003734 <BSP_LCD_Clear+0x20>
  }

  DrawProp.TextColor = color_backup; 
 800375c:	4a06      	ldr	r2, [pc, #24]	; (8003778 <BSP_LCD_Clear+0x64>)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <BSP_LCD_Clear+0x64>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	b29b      	uxth	r3, r3
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff ffa7 	bl	80036bc <BSP_LCD_SetTextColor>
}
 800376e:	bf00      	nop
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	bd90      	pop	{r4, r7, pc}
 8003776:	bf00      	nop
 8003778:	20001424 	.word	0x20001424

0800377c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	80fb      	strh	r3, [r7, #6]
 8003786:	460b      	mov	r3, r1
 8003788:	80bb      	strh	r3, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800378e:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <BSP_LCD_DisplayChar+0x50>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003798:	490c      	ldr	r1, [pc, #48]	; (80037cc <BSP_LCD_DisplayChar+0x50>)
 800379a:	6889      	ldr	r1, [r1, #8]
 800379c:	88c9      	ldrh	r1, [r1, #6]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800379e:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80037a2:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <BSP_LCD_DisplayChar+0x50>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	889b      	ldrh	r3, [r3, #4]
 80037a8:	3307      	adds	r3, #7
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	da00      	bge.n	80037b0 <BSP_LCD_DisplayChar+0x34>
 80037ae:	3307      	adds	r3, #7
 80037b0:	10db      	asrs	r3, r3, #3
 80037b2:	fb01 f303 	mul.w	r3, r1, r3
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80037b6:	441a      	add	r2, r3
 80037b8:	88b9      	ldrh	r1, [r7, #4]
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fbcd 	bl	8003f5c <LCD_DrawChar>
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20001424 	.word	0x20001424

080037d0 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *pText, Line_ModeTypdef Mode)
{
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b089      	sub	sp, #36	; 0x24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60ba      	str	r2, [r7, #8]
 80037d8:	461a      	mov	r2, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	81fb      	strh	r3, [r7, #14]
 80037de:	460b      	mov	r3, r1
 80037e0:	81bb      	strh	r3, [r7, #12]
 80037e2:	4613      	mov	r3, r2
 80037e4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, counter = 0;
 80037e6:	2301      	movs	r3, #1
 80037e8:	83fb      	strh	r3, [r7, #30]
 80037ea:	2300      	movs	r3, #0
 80037ec:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80037ee:	2300      	movs	r3, #0
 80037f0:	61bb      	str	r3, [r7, #24]
 80037f2:	2300      	movs	r3, #0
 80037f4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80037fa:	e002      	b.n	8003802 <BSP_LCD_DisplayStringAt+0x32>
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	3301      	adds	r3, #1
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	617a      	str	r2, [r7, #20]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f6      	bne.n	80037fc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 800380e:	f7ff ff3d 	bl	800368c <BSP_LCD_GetXSize>
 8003812:	4602      	mov	r2, r0
 8003814:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <BSP_LCD_DisplayStringAt+0x118>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	889b      	ldrh	r3, [r3, #4]
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
 800381e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	2b03      	cmp	r3, #3
 8003824:	d014      	beq.n	8003850 <BSP_LCD_DisplayStringAt+0x80>
 8003826:	2b03      	cmp	r3, #3
 8003828:	dc23      	bgt.n	8003872 <BSP_LCD_DisplayStringAt+0xa2>
 800382a:	2b01      	cmp	r3, #1
 800382c:	d002      	beq.n	8003834 <BSP_LCD_DisplayStringAt+0x64>
 800382e:	2b02      	cmp	r3, #2
 8003830:	d011      	beq.n	8003856 <BSP_LCD_DisplayStringAt+0x86>
 8003832:	e01e      	b.n	8003872 <BSP_LCD_DisplayStringAt+0xa2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	4a2b      	ldr	r2, [pc, #172]	; (80038e8 <BSP_LCD_DisplayStringAt+0x118>)
 800383c:	6892      	ldr	r2, [r2, #8]
 800383e:	8892      	ldrh	r2, [r2, #4]
 8003840:	fb02 f303 	mul.w	r3, r2, r3
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	89fb      	ldrh	r3, [r7, #14]
 800384a:	4413      	add	r3, r2
 800384c:	83fb      	strh	r3, [r7, #30]
      break;
 800384e:	e013      	b.n	8003878 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8003850:	89fb      	ldrh	r3, [r7, #14]
 8003852:	83fb      	strh	r3, [r7, #30]
      break;
 8003854:	e010      	b.n	8003878 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	b29a      	uxth	r2, r3
 800385e:	4b22      	ldr	r3, [pc, #136]	; (80038e8 <BSP_LCD_DisplayStringAt+0x118>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	889b      	ldrh	r3, [r3, #4]
 8003864:	fb12 f303 	smulbb	r3, r2, r3
 8003868:	b29a      	uxth	r2, r3
 800386a:	89fb      	ldrh	r3, [r7, #14]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	83fb      	strh	r3, [r7, #30]
      break;
 8003870:	e002      	b.n	8003878 <BSP_LCD_DisplayStringAt+0xa8>
    }    
  default:
    {
      refcolumn = Xpos;
 8003872:	89fb      	ldrh	r3, [r7, #14]
 8003874:	83fb      	strh	r3, [r7, #30]
      break;
 8003876:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8003878:	e012      	b.n	80038a0 <BSP_LCD_DisplayStringAt+0xd0>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *pText);
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	781a      	ldrb	r2, [r3, #0]
 800387e:	89b9      	ldrh	r1, [r7, #12]
 8003880:	8bfb      	ldrh	r3, [r7, #30]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff ff7a 	bl	800377c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8003888:	4b17      	ldr	r3, [pc, #92]	; (80038e8 <BSP_LCD_DisplayStringAt+0x118>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	889a      	ldrh	r2, [r3, #4]
 800388e:	8bfb      	ldrh	r3, [r7, #30]
 8003890:	4413      	add	r3, r2
 8003892:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	3301      	adds	r3, #1
 8003898:	60bb      	str	r3, [r7, #8]
    counter++;
 800389a:	8bbb      	ldrh	r3, [r7, #28]
 800389c:	3301      	adds	r3, #1
 800389e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bf14      	ite	ne
 80038a8:	2301      	movne	r3, #1
 80038aa:	2300      	moveq	r3, #0
 80038ac:	b2dc      	uxtb	r4, r3
 80038ae:	f7ff feed 	bl	800368c <BSP_LCD_GetXSize>
 80038b2:	4601      	mov	r1, r0
 80038b4:	8bbb      	ldrh	r3, [r7, #28]
 80038b6:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <BSP_LCD_DisplayStringAt+0x118>)
 80038b8:	6892      	ldr	r2, [r2, #8]
 80038ba:	8892      	ldrh	r2, [r2, #4]
 80038bc:	fb02 f303 	mul.w	r3, r2, r3
 80038c0:	1acb      	subs	r3, r1, r3
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <BSP_LCD_DisplayStringAt+0x118>)
 80038c6:	6892      	ldr	r2, [r2, #8]
 80038c8:	8892      	ldrh	r2, [r2, #4]
 80038ca:	4293      	cmp	r3, r2
 80038cc:	bf2c      	ite	cs
 80038ce:	2301      	movcs	r3, #1
 80038d0:	2300      	movcc	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	4023      	ands	r3, r4
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1ce      	bne.n	800387a <BSP_LCD_DisplayStringAt+0xaa>
  }
}
 80038dc:	bf00      	nop
 80038de:	bf00      	nop
 80038e0:	3724      	adds	r7, #36	; 0x24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd90      	pop	{r4, r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20001424 	.word	0x20001424

080038ec <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0..29: if the Current fonts is Font8x8
  * @param  pText: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *pText)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	6039      	str	r1, [r7, #0]
 80038f6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line),pText, LEFT_MODE);
 80038f8:	f7ff ff00 	bl	80036fc <BSP_LCD_GetFont>
 80038fc:	4603      	mov	r3, r0
 80038fe:	88db      	ldrh	r3, [r3, #6]
 8003900:	88fa      	ldrh	r2, [r7, #6]
 8003902:	fb12 f303 	smulbb	r3, r2, r3
 8003906:	b299      	uxth	r1, r3
 8003908:	2303      	movs	r3, #3
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	2000      	movs	r0, #0
 800390e:	f7ff ff5f 	bl	80037d0 <BSP_LCD_DisplayStringAt>
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	80fb      	strh	r3, [r7, #6]
 8003926:	460b      	mov	r3, r1
 8003928:	80bb      	strh	r3, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 8003932:	4b15      	ldr	r3, [pc, #84]	; (8003988 <BSP_LCD_DrawHLine+0x6c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800393c:	4b12      	ldr	r3, [pc, #72]	; (8003988 <BSP_LCD_DrawHLine+0x6c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6a1c      	ldr	r4, [r3, #32]
 8003942:	4b12      	ldr	r3, [pc, #72]	; (800398c <BSP_LCD_DrawHLine+0x70>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	b298      	uxth	r0, r3
 8003948:	887b      	ldrh	r3, [r7, #2]
 800394a:	88ba      	ldrh	r2, [r7, #4]
 800394c:	88f9      	ldrh	r1, [r7, #6]
 800394e:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8003950:	e015      	b.n	800397e <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	e00e      	b.n	8003976 <BSP_LCD_DrawHLine+0x5a>
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	b29a      	uxth	r2, r3
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	4413      	add	r3, r2
 8003960:	b29b      	uxth	r3, r3
 8003962:	4a0a      	ldr	r2, [pc, #40]	; (800398c <BSP_LCD_DrawHLine+0x70>)
 8003964:	6812      	ldr	r2, [r2, #0]
 8003966:	b292      	uxth	r2, r2
 8003968:	88b9      	ldrh	r1, [r7, #4]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fada 	bl	8003f24 <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3301      	adds	r3, #1
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	887b      	ldrh	r3, [r7, #2]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	429a      	cmp	r2, r3
 800397c:	d3ec      	bcc.n	8003958 <BSP_LCD_DrawHLine+0x3c>
}
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	bd90      	pop	{r4, r7, pc}
 8003986:	bf00      	nop
 8003988:	20001430 	.word	0x20001430
 800398c:	20001424 	.word	0x20001424

08003990 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	80fb      	strh	r3, [r7, #6]
 800399a:	460b      	mov	r3, r1
 800399c:	80bb      	strh	r3, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 80039a6:	4b15      	ldr	r3, [pc, #84]	; (80039fc <BSP_LCD_DrawVLine+0x6c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80039b0:	4b12      	ldr	r3, [pc, #72]	; (80039fc <BSP_LCD_DrawVLine+0x6c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80039b6:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <BSP_LCD_DrawVLine+0x70>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	b298      	uxth	r0, r3
 80039bc:	887b      	ldrh	r3, [r7, #2]
 80039be:	88ba      	ldrh	r2, [r7, #4]
 80039c0:	88f9      	ldrh	r1, [r7, #6]
 80039c2:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 80039c4:	e015      	b.n	80039f2 <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	e00e      	b.n	80039ea <BSP_LCD_DrawVLine+0x5a>
      LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	88bb      	ldrh	r3, [r7, #4]
 80039d2:	4413      	add	r3, r2
 80039d4:	b299      	uxth	r1, r3
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <BSP_LCD_DrawVLine+0x70>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	b29a      	uxth	r2, r3
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 faa0 	bl	8003f24 <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3301      	adds	r3, #1
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	887b      	ldrh	r3, [r7, #2]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d3ec      	bcc.n	80039cc <BSP_LCD_DrawVLine+0x3c>
}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd90      	pop	{r4, r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20001430 	.word	0x20001430
 8003a00:	20001424 	.word	0x20001424

08003a04 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8003a04:	b590      	push	{r4, r7, lr}
 8003a06:	b08b      	sub	sp, #44	; 0x2c
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4604      	mov	r4, r0
 8003a0c:	4608      	mov	r0, r1
 8003a0e:	4611      	mov	r1, r2
 8003a10:	461a      	mov	r2, r3
 8003a12:	4623      	mov	r3, r4
 8003a14:	80fb      	strh	r3, [r7, #6]
 8003a16:	4603      	mov	r3, r0
 8003a18:	80bb      	strh	r3, [r7, #4]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	807b      	strh	r3, [r7, #2]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003a22:	2300      	movs	r3, #0
 8003a24:	823b      	strh	r3, [r7, #16]
 8003a26:	2300      	movs	r3, #0
 8003a28:	81fb      	strh	r3, [r7, #14]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003a2e:	2300      	movs	r3, #0
 8003a30:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003a32:	2300      	movs	r3, #0
 8003a34:	847b      	strh	r3, [r7, #34]	; 0x22
 8003a36:	2300      	movs	r3, #0
 8003a38:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	83fb      	strh	r3, [r7, #30]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	83bb      	strh	r3, [r7, #28]
 8003a42:	2300      	movs	r3, #0
 8003a44:	837b      	strh	r3, [r7, #26]
 8003a46:	2300      	movs	r3, #0
 8003a48:	833b      	strh	r3, [r7, #24]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	82fb      	strh	r3, [r7, #22]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8003a56:	887a      	ldrh	r2, [r7, #2]
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bfb8      	it	lt
 8003a60:	425b      	neglt	r3, r3
 8003a62:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8003a64:	883a      	ldrh	r2, [r7, #0]
 8003a66:	88bb      	ldrh	r3, [r7, #4]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	bfb8      	it	lt
 8003a6e:	425b      	neglt	r3, r3
 8003a70:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8003a76:	88bb      	ldrh	r3, [r7, #4]
 8003a78:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8003a7a:	887a      	ldrh	r2, [r7, #2]
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d304      	bcc.n	8003a8c <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003a82:	2301      	movs	r3, #1
 8003a84:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003a86:	2301      	movs	r3, #1
 8003a88:	843b      	strh	r3, [r7, #32]
 8003a8a:	e005      	b.n	8003a98 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a90:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003a92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a96:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8003a98:	883a      	ldrh	r2, [r7, #0]
 8003a9a:	88bb      	ldrh	r3, [r7, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d304      	bcc.n	8003aaa <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	83bb      	strh	r3, [r7, #28]
 8003aa8:	e005      	b.n	8003ab6 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003aaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003aae:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ab4:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003ab6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003aba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	db10      	blt.n	8003ae4 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003aca:	8a3b      	ldrh	r3, [r7, #16]
 8003acc:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003ace:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003ad2:	0fda      	lsrs	r2, r3, #31
 8003ad4:	4413      	add	r3, r2
 8003ad6:	105b      	asrs	r3, r3, #1
 8003ad8:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8003ada:	89fb      	ldrh	r3, [r7, #14]
 8003adc:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8003ade:	8a3b      	ldrh	r3, [r7, #16]
 8003ae0:	82bb      	strh	r3, [r7, #20]
 8003ae2:	e00f      	b.n	8003b04 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003ae8:	2300      	movs	r3, #0
 8003aea:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003aec:	89fb      	ldrh	r3, [r7, #14]
 8003aee:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003af0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003af4:	0fda      	lsrs	r2, r3, #31
 8003af6:	4413      	add	r3, r2
 8003af8:	105b      	asrs	r3, r3, #1
 8003afa:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8003afc:	8a3b      	ldrh	r3, [r7, #16]
 8003afe:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8003b00:	89fb      	ldrh	r3, [r7, #14]
 8003b02:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003b04:	2300      	movs	r3, #0
 8003b06:	827b      	strh	r3, [r7, #18]
 8003b08:	e031      	b.n	8003b6e <BSP_LCD_DrawLine+0x16a>
  {
    LCD_DrawPixel(x, y, DrawProp.TextColor);  /* Draw the current pixel */
 8003b0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b0c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003b0e:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <BSP_LCD_DrawLine+0x180>)
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	b292      	uxth	r2, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 fa05 	bl	8003f24 <LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8003b1a:	8b3a      	ldrh	r2, [r7, #24]
 8003b1c:	8afb      	ldrh	r3, [r7, #22]
 8003b1e:	4413      	add	r3, r2
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003b24:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003b28:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	db0e      	blt.n	8003b4e <BSP_LCD_DrawLine+0x14a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003b30:	8b3a      	ldrh	r2, [r7, #24]
 8003b32:	8b7b      	ldrh	r3, [r7, #26]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003b3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003b3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b3e:	4413      	add	r3, r2
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003b44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b46:	8bfb      	ldrh	r3, [r7, #30]
 8003b48:	4413      	add	r3, r2
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8003b4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003b50:	8c3b      	ldrh	r3, [r7, #32]
 8003b52:	4413      	add	r3, r2
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003b58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b5a:	8bbb      	ldrh	r3, [r7, #28]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003b62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3301      	adds	r3, #1
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	827b      	strh	r3, [r7, #18]
 8003b6e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003b72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	ddc7      	ble.n	8003b0a <BSP_LCD_DrawLine+0x106>
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	bf00      	nop
 8003b7e:	372c      	adds	r7, #44	; 0x2c
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd90      	pop	{r4, r7, pc}
 8003b84:	20001424 	.word	0x20001424

08003b88 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	80fb      	strh	r3, [r7, #6]
 8003b92:	460b      	mov	r3, r1
 8003b94:	80bb      	strh	r3, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	807b      	strh	r3, [r7, #2]
  int32_t  D;       /* Decision Variable */ 
  uint32_t  CurX;   /* Current X Value */
  uint32_t  CurY;   /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8003b9a:	887b      	ldrh	r3, [r7, #2]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	f1c3 0303 	rsb	r3, r3, #3
 8003ba2:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8003ba8:	887b      	ldrh	r3, [r7, #2]
 8003baa:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 8003bac:	e09a      	b.n	8003ce4 <BSP_LCD_DrawCircle+0x15c>
  {
    LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp.TextColor);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	88fb      	ldrh	r3, [r7, #6]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	b298      	uxth	r0, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	88ba      	ldrh	r2, [r7, #4]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	4a4d      	ldr	r2, [pc, #308]	; (8003cf8 <BSP_LCD_DrawCircle+0x170>)
 8003bc4:	6812      	ldr	r2, [r2, #0]
 8003bc6:	b292      	uxth	r2, r2
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f000 f9ab 	bl	8003f24 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp.TextColor);
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	88fa      	ldrh	r2, [r7, #6]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	b298      	uxth	r0, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	88ba      	ldrh	r2, [r7, #4]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	4a45      	ldr	r2, [pc, #276]	; (8003cf8 <BSP_LCD_DrawCircle+0x170>)
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	b292      	uxth	r2, r2
 8003be8:	4619      	mov	r1, r3
 8003bea:	f000 f99b 	bl	8003f24 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp.TextColor);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	b298      	uxth	r0, r3
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	88ba      	ldrh	r2, [r7, #4]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	4a3d      	ldr	r2, [pc, #244]	; (8003cf8 <BSP_LCD_DrawCircle+0x170>)
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	b292      	uxth	r2, r2
 8003c08:	4619      	mov	r1, r3
 8003c0a:	f000 f98b 	bl	8003f24 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp.TextColor);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	88fa      	ldrh	r2, [r7, #6]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	b298      	uxth	r0, r3
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	88ba      	ldrh	r2, [r7, #4]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	4a35      	ldr	r2, [pc, #212]	; (8003cf8 <BSP_LCD_DrawCircle+0x170>)
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	b292      	uxth	r2, r2
 8003c28:	4619      	mov	r1, r3
 8003c2a:	f000 f97b 	bl	8003f24 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp.TextColor);
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	4413      	add	r3, r2
 8003c36:	b298      	uxth	r0, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	88bb      	ldrh	r3, [r7, #4]
 8003c3e:	4413      	add	r3, r2
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	4a2d      	ldr	r2, [pc, #180]	; (8003cf8 <BSP_LCD_DrawCircle+0x170>)
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	b292      	uxth	r2, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f000 f96b 	bl	8003f24 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp.TextColor);
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	88fa      	ldrh	r2, [r7, #6]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	b298      	uxth	r0, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	88bb      	ldrh	r3, [r7, #4]
 8003c5e:	4413      	add	r3, r2
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	4a25      	ldr	r2, [pc, #148]	; (8003cf8 <BSP_LCD_DrawCircle+0x170>)
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	b292      	uxth	r2, r2
 8003c68:	4619      	mov	r1, r3
 8003c6a:	f000 f95b 	bl	8003f24 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp.TextColor);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	4413      	add	r3, r2
 8003c76:	b298      	uxth	r0, r3
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	88bb      	ldrh	r3, [r7, #4]
 8003c7e:	4413      	add	r3, r2
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	4a1d      	ldr	r2, [pc, #116]	; (8003cf8 <BSP_LCD_DrawCircle+0x170>)
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	b292      	uxth	r2, r2
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f000 f94b 	bl	8003f24 <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp.TextColor);   
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	b298      	uxth	r0, r3
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	88bb      	ldrh	r3, [r7, #4]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <BSP_LCD_DrawCircle+0x170>)
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	b292      	uxth	r2, r2
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f000 f93b 	bl	8003f24 <LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003cae:	4813      	ldr	r0, [pc, #76]	; (8003cfc <BSP_LCD_DrawCircle+0x174>)
 8003cb0:	f7ff fd14 	bl	80036dc <BSP_LCD_SetFont>

    if (D < 0)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	da06      	bge.n	8003cc8 <BSP_LCD_DrawCircle+0x140>
    { 
      D += (CurX << 2) + 6;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	009a      	lsls	r2, r3, #2
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	3306      	adds	r3, #6
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	e00a      	b.n	8003cde <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	009a      	lsls	r2, r3, #2
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	330a      	adds	r3, #10
 8003cd6:	617b      	str	r3, [r7, #20]
      CurY--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	f67f af60 	bls.w	8003bae <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003cee:	bf00      	nop
 8003cf0:	bf00      	nop
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20001424 	.word	0x20001424
 8003cfc:	20000064 	.word	0x20000064

08003d00 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address.
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8003d00:	b590      	push	{r4, r7, lr}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	603a      	str	r2, [r7, #0]
 8003d0a:	80fb      	strh	r3, [r7, #6]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60bb      	str	r3, [r7, #8]
  
  
  /* Read bitmap width */
  width = *(uint16_t *) (pbmp + 18);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	3312      	adds	r3, #18
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	60bb      	str	r3, [r7, #8]
  width |= (*(uint16_t *) (pbmp + 20)) << 16;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	3314      	adds	r3, #20
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	041b      	lsls	r3, r3, #16
 8003d28:	461a      	mov	r2, r3
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap height */
  height = *(uint16_t *) (pbmp + 22);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	3316      	adds	r3, #22
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (pbmp + 24)) << 16; 
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	3318      	adds	r3, #24
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	041b      	lsls	r3, r3, #16
 8003d40:	461a      	mov	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
  
  LCD_SetDisplayWindow(Xpos, Ypos, width, height);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	88b9      	ldrh	r1, [r7, #4]
 8003d52:	88f8      	ldrh	r0, [r7, #6]
 8003d54:	f000 f9f4 	bl	8004140 <LCD_SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8003d58:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <BSP_LCD_DrawBitmap+0x94>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d006      	beq.n	8003d70 <BSP_LCD_DrawBitmap+0x70>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pbmp);
 8003d62:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <BSP_LCD_DrawBitmap+0x94>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	88b9      	ldrh	r1, [r7, #4]
 8003d6a:	88f8      	ldrh	r0, [r7, #6]
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	4798      	blx	r3
  } 
  LCD_SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8003d70:	f7ff fc8c 	bl	800368c <BSP_LCD_GetXSize>
 8003d74:	4603      	mov	r3, r0
 8003d76:	b29c      	uxth	r4, r3
 8003d78:	f7ff fc94 	bl	80036a4 <BSP_LCD_GetYSize>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	4622      	mov	r2, r4
 8003d82:	2100      	movs	r1, #0
 8003d84:	2000      	movs	r0, #0
 8003d86:	f000 f9db 	bl	8004140 <LCD_SetDisplayWindow>
}
 8003d8a:	bf00      	nop
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd90      	pop	{r4, r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20001430 	.word	0x20001430

08003d98 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003d98:	b590      	push	{r4, r7, lr}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4604      	mov	r4, r0
 8003da0:	4608      	mov	r0, r1
 8003da2:	4611      	mov	r1, r2
 8003da4:	461a      	mov	r2, r3
 8003da6:	4623      	mov	r3, r4
 8003da8:	80fb      	strh	r3, [r7, #6]
 8003daa:	4603      	mov	r3, r0
 8003dac:	80bb      	strh	r3, [r7, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	807b      	strh	r3, [r7, #2]
 8003db2:	4613      	mov	r3, r2
 8003db4:	803b      	strh	r3, [r7, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003db6:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <BSP_LCD_FillRect+0x50>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff fc7d 	bl	80036bc <BSP_LCD_SetTextColor>
  do
  {
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 8003dc2:	88bb      	ldrh	r3, [r7, #4]
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	80ba      	strh	r2, [r7, #4]
 8003dc8:	887a      	ldrh	r2, [r7, #2]
 8003dca:	88f8      	ldrh	r0, [r7, #6]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f7ff fda5 	bl	800391c <BSP_LCD_DrawHLine>
  }
  while(Height--);
 8003dd2:	883b      	ldrh	r3, [r7, #0]
 8003dd4:	1e5a      	subs	r2, r3, #1
 8003dd6:	803a      	strh	r2, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f2      	bne.n	8003dc2 <BSP_LCD_FillRect+0x2a>
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd90      	pop	{r4, r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20001424 	.word	0x20001424

08003dec <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	80fb      	strh	r3, [r7, #6]
 8003df6:	460b      	mov	r3, r1
 8003df8:	80bb      	strh	r3, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	807b      	strh	r3, [r7, #2]
  int32_t  D;        /* Decision Variable */ 
  uint32_t  CurX;    /* Current X Value */
  uint32_t  CurY;    /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8003dfe:	887b      	ldrh	r3, [r7, #2]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	f1c3 0303 	rsb	r3, r3, #3
 8003e06:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8003e0c:	887b      	ldrh	r3, [r7, #2]
 8003e0e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003e10:	4b3e      	ldr	r3, [pc, #248]	; (8003f0c <BSP_LCD_FillCircle+0x120>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff fc50 	bl	80036bc <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8003e1c:	e061      	b.n	8003ee2 <BSP_LCD_FillCircle+0xf6>
  {
    if(CurY > 0) 
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d021      	beq.n	8003e68 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	88fa      	ldrh	r2, [r7, #6]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	b298      	uxth	r0, r3
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	88bb      	ldrh	r3, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	b299      	uxth	r1, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	f7ff fd6b 	bl	800391c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	88fa      	ldrh	r2, [r7, #6]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	b298      	uxth	r0, r3
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	88ba      	ldrh	r2, [r7, #4]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	b299      	uxth	r1, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	f7ff fd5a 	bl	800391c <BSP_LCD_DrawHLine>
    }

    if(CurX > 0) 
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d021      	beq.n	8003eb2 <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	88fa      	ldrh	r2, [r7, #6]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	b298      	uxth	r0, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	88ba      	ldrh	r2, [r7, #4]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	b299      	uxth	r1, r3
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f7ff fd46 	bl	800391c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	88fa      	ldrh	r2, [r7, #6]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	b298      	uxth	r0, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	88bb      	ldrh	r3, [r7, #4]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	b299      	uxth	r1, r3
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	f7ff fd35 	bl	800391c <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	da06      	bge.n	8003ec6 <BSP_LCD_FillCircle+0xda>
    { 
      D += (CurX << 2) + 6;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	009a      	lsls	r2, r3, #2
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3306      	adds	r3, #6
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	e00a      	b.n	8003edc <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	009a      	lsls	r2, r3, #2
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	330a      	adds	r3, #10
 8003ed4:	617b      	str	r3, [r7, #20]
      CurY--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d999      	bls.n	8003e1e <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003eea:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <BSP_LCD_FillCircle+0x120>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff fbe3 	bl	80036bc <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003ef6:	887a      	ldrh	r2, [r7, #2]
 8003ef8:	88b9      	ldrh	r1, [r7, #4]
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff fe43 	bl	8003b88 <BSP_LCD_DrawCircle>
}
 8003f02:	bf00      	nop
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20001424 	.word	0x20001424

08003f10 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOn();
 8003f14:	4b02      	ldr	r3, [pc, #8]	; (8003f20 <BSP_LCD_DisplayOn+0x10>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	4798      	blx	r3
}
 8003f1c:	bf00      	nop
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20001430 	.word	0x20001430

08003f24 <LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGBCode: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
static void LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	80fb      	strh	r3, [r7, #6]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	80bb      	strh	r3, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 8003f36:	4b08      	ldr	r3, [pc, #32]	; (8003f58 <LCD_DrawPixel+0x34>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d006      	beq.n	8003f4e <LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGBCode);
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <LCD_DrawPixel+0x34>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	887a      	ldrh	r2, [r7, #2]
 8003f48:	88b9      	ldrh	r1, [r7, #4]
 8003f4a:	88f8      	ldrh	r0, [r7, #6]
 8003f4c:	4798      	blx	r3
  }
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20001430 	.word	0x20001430

08003f5c <LCD_DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	603a      	str	r2, [r7, #0]
 8003f66:	80fb      	strh	r3, [r7, #6]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f70:	2300      	movs	r3, #0
 8003f72:	623b      	str	r3, [r7, #32]
 8003f74:	2300      	movs	r3, #0
 8003f76:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	82fb      	strh	r3, [r7, #22]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61fb      	str	r3, [r7, #28]
  
 
  height = DrawProp.pFont->Height;
 8003f8c:	4b63      	ldr	r3, [pc, #396]	; (800411c <LCD_DrawChar+0x1c0>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	88db      	ldrh	r3, [r3, #6]
 8003f92:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8003f94:	4b61      	ldr	r3, [pc, #388]	; (800411c <LCD_DrawChar+0x1c0>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	889b      	ldrh	r3, [r3, #4]
 8003f9a:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 8003f9c:	8afa      	ldrh	r2, [r7, #22]
 8003f9e:	8abb      	ldrh	r3, [r7, #20]
 8003fa0:	fb12 f303 	smulbb	r3, r2, r3
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	331b      	adds	r3, #27
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	4a5d      	ldr	r2, [pc, #372]	; (8004120 <LCD_DrawChar+0x1c4>)
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 8003fb2:	8afb      	ldrh	r3, [r7, #22]
 8003fb4:	8aba      	ldrh	r2, [r7, #20]
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	331b      	adds	r3, #27
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	141a      	asrs	r2, r3, #16
 8003fc0:	4b58      	ldr	r3, [pc, #352]	; (8004124 <LCD_DrawChar+0x1c8>)
 8003fc2:	b292      	uxth	r2, r2
 8003fc4:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8003fc6:	4b58      	ldr	r3, [pc, #352]	; (8004128 <LCD_DrawChar+0x1cc>)
 8003fc8:	2236      	movs	r2, #54	; 0x36
 8003fca:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 8003fcc:	4a57      	ldr	r2, [pc, #348]	; (800412c <LCD_DrawChar+0x1d0>)
 8003fce:	8abb      	ldrh	r3, [r7, #20]
 8003fd0:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 8003fd2:	8abb      	ldrh	r3, [r7, #20]
 8003fd4:	141a      	asrs	r2, r3, #16
 8003fd6:	4b56      	ldr	r3, [pc, #344]	; (8004130 <LCD_DrawChar+0x1d4>)
 8003fd8:	b292      	uxth	r2, r2
 8003fda:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 8003fdc:	4a55      	ldr	r2, [pc, #340]	; (8004134 <LCD_DrawChar+0x1d8>)
 8003fde:	8afb      	ldrh	r3, [r7, #22]
 8003fe0:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 8003fe2:	8afb      	ldrh	r3, [r7, #22]
 8003fe4:	141a      	asrs	r2, r3, #16
 8003fe6:	4b54      	ldr	r3, [pc, #336]	; (8004138 <LCD_DrawChar+0x1dc>)
 8003fe8:	b292      	uxth	r2, r2
 8003fea:	801a      	strh	r2, [r3, #0]

  offset =  8 *((width + 7)/8) -  width ;
 8003fec:	8abb      	ldrh	r3, [r7, #20]
 8003fee:	3307      	adds	r3, #7
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	da00      	bge.n	8003ff6 <LCD_DrawChar+0x9a>
 8003ff4:	3307      	adds	r3, #7
 8003ff6:	10db      	asrs	r3, r3, #3
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	8abb      	ldrh	r3, [r7, #20]
 8004000:	b2db      	uxtb	r3, r3
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 8004006:	2300      	movs	r3, #0
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
 800400a:	e078      	b.n	80040fe <LCD_DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 800400c:	8abb      	ldrh	r3, [r7, #20]
 800400e:	3307      	adds	r3, #7
 8004010:	2b00      	cmp	r3, #0
 8004012:	da00      	bge.n	8004016 <LCD_DrawChar+0xba>
 8004014:	3307      	adds	r3, #7
 8004016:	10db      	asrs	r3, r3, #3
 8004018:	461a      	mov	r2, r3
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	fb02 f303 	mul.w	r3, r2, r3
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	4413      	add	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8004026:	8abb      	ldrh	r3, [r7, #20]
 8004028:	3b11      	subs	r3, #17
 800402a:	2b07      	cmp	r3, #7
 800402c:	d80c      	bhi.n	8004048 <LCD_DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	041a      	lsls	r2, r3, #16
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3301      	adds	r3, #1
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	4313      	orrs	r3, r2
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	3202      	adds	r2, #2
 8004042:	7812      	ldrb	r2, [r2, #0]
 8004044:	4313      	orrs	r3, r2
 8004046:	61fb      	str	r3, [r7, #28]
    }

    if(((width + 7)/8) == 2)
 8004048:	8abb      	ldrh	r3, [r7, #20]
 800404a:	3b09      	subs	r3, #9
 800404c:	2b07      	cmp	r3, #7
 800404e:	d807      	bhi.n	8004060 <LCD_DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	021b      	lsls	r3, r3, #8
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	3201      	adds	r2, #1
 800405a:	7812      	ldrb	r2, [r2, #0]
 800405c:	4313      	orrs	r3, r2
 800405e:	61fb      	str	r3, [r7, #28]
    }
      
    if(((width + 7)/8) == 1)
 8004060:	8abb      	ldrh	r3, [r7, #20]
 8004062:	3b01      	subs	r3, #1
 8004064:	2b07      	cmp	r3, #7
 8004066:	d802      	bhi.n	800406e <LCD_DrawChar+0x112>
    {
      line =  pchar[0];
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	61fb      	str	r3, [r7, #28]
    }  
    
    for (counterw = 0; counterw < width; counterw++)
 800406e:	2300      	movs	r3, #0
 8004070:	623b      	str	r3, [r7, #32]
 8004072:	e03d      	b.n	80040f0 <LCD_DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8004074:	8afa      	ldrh	r2, [r7, #22]
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	8aba      	ldrh	r2, [r7, #20]
 800407e:	fb03 f202 	mul.w	r2, r3, r2
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	4413      	add	r3, r2
 8004086:	331b      	adds	r3, #27
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 800408c:	8aba      	ldrh	r2, [r7, #20]
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	1ad2      	subs	r2, r2, r3
 8004092:	7cfb      	ldrb	r3, [r7, #19]
 8004094:	4413      	add	r3, r2
 8004096:	3b01      	subs	r3, #1
 8004098:	2201      	movs	r2, #1
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	4013      	ands	r3, r2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d010      	beq.n	80040ca <LCD_DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 80040a8:	4b1c      	ldr	r3, [pc, #112]	; (800411c <LCD_DrawChar+0x1c0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	b2d9      	uxtb	r1, r3
 80040ae:	4a23      	ldr	r2, [pc, #140]	; (800413c <LCD_DrawChar+0x1e0>)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	4413      	add	r3, r2
 80040b4:	460a      	mov	r2, r1
 80040b6:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 80040b8:	4b18      	ldr	r3, [pc, #96]	; (800411c <LCD_DrawChar+0x1c0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	0a1a      	lsrs	r2, r3, #8
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	3301      	adds	r3, #1
 80040c2:	b2d1      	uxtb	r1, r2
 80040c4:	4a1d      	ldr	r2, [pc, #116]	; (800413c <LCD_DrawChar+0x1e0>)
 80040c6:	54d1      	strb	r1, [r2, r3]
 80040c8:	e00f      	b.n	80040ea <LCD_DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 80040ca:	4b14      	ldr	r3, [pc, #80]	; (800411c <LCD_DrawChar+0x1c0>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	b2d9      	uxtb	r1, r3
 80040d0:	4a1a      	ldr	r2, [pc, #104]	; (800413c <LCD_DrawChar+0x1e0>)
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	4413      	add	r3, r2
 80040d6:	460a      	mov	r2, r1
 80040d8:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 80040da:	4b10      	ldr	r3, [pc, #64]	; (800411c <LCD_DrawChar+0x1c0>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	0a1a      	lsrs	r2, r3, #8
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	3301      	adds	r3, #1
 80040e4:	b2d1      	uxtb	r1, r2
 80040e6:	4a15      	ldr	r2, [pc, #84]	; (800413c <LCD_DrawChar+0x1e0>)
 80040e8:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	3301      	adds	r3, #1
 80040ee:	623b      	str	r3, [r7, #32]
 80040f0:	8abb      	ldrh	r3, [r7, #20]
 80040f2:	6a3a      	ldr	r2, [r7, #32]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d3bd      	bcc.n	8004074 <LCD_DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	3301      	adds	r3, #1
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
 80040fe:	8afb      	ldrh	r3, [r7, #22]
 8004100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004102:	429a      	cmp	r2, r3
 8004104:	d382      	bcc.n	800400c <LCD_DrawChar+0xb0>
      } 
    }
  }

  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 8004106:	88b9      	ldrh	r1, [r7, #4]
 8004108:	88fb      	ldrh	r3, [r7, #6]
 800410a:	4a0c      	ldr	r2, [pc, #48]	; (800413c <LCD_DrawChar+0x1e0>)
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff fdf7 	bl	8003d00 <BSP_LCD_DrawBitmap>
}
 8004112:	bf00      	nop
 8004114:	3728      	adds	r7, #40	; 0x28
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20001424 	.word	0x20001424
 8004120:	20001436 	.word	0x20001436
 8004124:	20001438 	.word	0x20001438
 8004128:	2000143e 	.word	0x2000143e
 800412c:	20001446 	.word	0x20001446
 8004130:	20001448 	.word	0x20001448
 8004134:	2000144a 	.word	0x2000144a
 8004138:	2000144c 	.word	0x2000144c
 800413c:	20001434 	.word	0x20001434

08004140 <LCD_SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004140:	b590      	push	{r4, r7, lr}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	4604      	mov	r4, r0
 8004148:	4608      	mov	r0, r1
 800414a:	4611      	mov	r1, r2
 800414c:	461a      	mov	r2, r3
 800414e:	4623      	mov	r3, r4
 8004150:	80fb      	strh	r3, [r7, #6]
 8004152:	4603      	mov	r3, r0
 8004154:	80bb      	strh	r3, [r7, #4]
 8004156:	460b      	mov	r3, r1
 8004158:	807b      	strh	r3, [r7, #2]
 800415a:	4613      	mov	r3, r2
 800415c:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <LCD_SetDisplayWindow+0x40>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d007      	beq.n	8004178 <LCD_SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8004168:	4b05      	ldr	r3, [pc, #20]	; (8004180 <LCD_SetDisplayWindow+0x40>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69dc      	ldr	r4, [r3, #28]
 800416e:	883b      	ldrh	r3, [r7, #0]
 8004170:	887a      	ldrh	r2, [r7, #2]
 8004172:	88b9      	ldrh	r1, [r7, #4]
 8004174:	88f8      	ldrh	r0, [r7, #6]
 8004176:	47a0      	blx	r4
  }  
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bd90      	pop	{r4, r7, pc}
 8004180:	20001430 	.word	0x20001430

08004184 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e12b      	b.n	80043ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d106      	bne.n	80041b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fe fac0 	bl	8002730 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2224      	movs	r2, #36	; 0x24
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041e8:	f003 fd4c 	bl	8007c84 <HAL_RCC_GetPCLK1Freq>
 80041ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	4a81      	ldr	r2, [pc, #516]	; (80043f8 <HAL_I2C_Init+0x274>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d807      	bhi.n	8004208 <HAL_I2C_Init+0x84>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4a80      	ldr	r2, [pc, #512]	; (80043fc <HAL_I2C_Init+0x278>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	bf94      	ite	ls
 8004200:	2301      	movls	r3, #1
 8004202:	2300      	movhi	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	e006      	b.n	8004216 <HAL_I2C_Init+0x92>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4a7d      	ldr	r2, [pc, #500]	; (8004400 <HAL_I2C_Init+0x27c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	bf94      	ite	ls
 8004210:	2301      	movls	r3, #1
 8004212:	2300      	movhi	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e0e7      	b.n	80043ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4a78      	ldr	r2, [pc, #480]	; (8004404 <HAL_I2C_Init+0x280>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	0c9b      	lsrs	r3, r3, #18
 8004228:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a6a      	ldr	r2, [pc, #424]	; (80043f8 <HAL_I2C_Init+0x274>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d802      	bhi.n	8004258 <HAL_I2C_Init+0xd4>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	3301      	adds	r3, #1
 8004256:	e009      	b.n	800426c <HAL_I2C_Init+0xe8>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800425e:	fb02 f303 	mul.w	r3, r2, r3
 8004262:	4a69      	ldr	r2, [pc, #420]	; (8004408 <HAL_I2C_Init+0x284>)
 8004264:	fba2 2303 	umull	r2, r3, r2, r3
 8004268:	099b      	lsrs	r3, r3, #6
 800426a:	3301      	adds	r3, #1
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	430b      	orrs	r3, r1
 8004272:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800427e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	495c      	ldr	r1, [pc, #368]	; (80043f8 <HAL_I2C_Init+0x274>)
 8004288:	428b      	cmp	r3, r1
 800428a:	d819      	bhi.n	80042c0 <HAL_I2C_Init+0x13c>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1e59      	subs	r1, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	fbb1 f3f3 	udiv	r3, r1, r3
 800429a:	1c59      	adds	r1, r3, #1
 800429c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042a0:	400b      	ands	r3, r1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_I2C_Init+0x138>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	1e59      	subs	r1, r3, #1
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80042b4:	3301      	adds	r3, #1
 80042b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ba:	e051      	b.n	8004360 <HAL_I2C_Init+0x1dc>
 80042bc:	2304      	movs	r3, #4
 80042be:	e04f      	b.n	8004360 <HAL_I2C_Init+0x1dc>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d111      	bne.n	80042ec <HAL_I2C_Init+0x168>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	1e58      	subs	r0, r3, #1
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	440b      	add	r3, r1
 80042d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042da:	3301      	adds	r3, #1
 80042dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	e012      	b.n	8004312 <HAL_I2C_Init+0x18e>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1e58      	subs	r0, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6859      	ldr	r1, [r3, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	0099      	lsls	r1, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004302:	3301      	adds	r3, #1
 8004304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004308:	2b00      	cmp	r3, #0
 800430a:	bf0c      	ite	eq
 800430c:	2301      	moveq	r3, #1
 800430e:	2300      	movne	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_I2C_Init+0x196>
 8004316:	2301      	movs	r3, #1
 8004318:	e022      	b.n	8004360 <HAL_I2C_Init+0x1dc>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10e      	bne.n	8004340 <HAL_I2C_Init+0x1bc>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1e58      	subs	r0, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6859      	ldr	r1, [r3, #4]
 800432a:	460b      	mov	r3, r1
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	440b      	add	r3, r1
 8004330:	fbb0 f3f3 	udiv	r3, r0, r3
 8004334:	3301      	adds	r3, #1
 8004336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800433a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800433e:	e00f      	b.n	8004360 <HAL_I2C_Init+0x1dc>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	1e58      	subs	r0, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6859      	ldr	r1, [r3, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	0099      	lsls	r1, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	fbb0 f3f3 	udiv	r3, r0, r3
 8004356:	3301      	adds	r3, #1
 8004358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800435c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	6809      	ldr	r1, [r1, #0]
 8004364:	4313      	orrs	r3, r2
 8004366:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69da      	ldr	r2, [r3, #28]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800438e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6911      	ldr	r1, [r2, #16]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68d2      	ldr	r2, [r2, #12]
 800439a:	4311      	orrs	r1, r2
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	430b      	orrs	r3, r1
 80043a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	000186a0 	.word	0x000186a0
 80043fc:	001e847f 	.word	0x001e847f
 8004400:	003d08ff 	.word	0x003d08ff
 8004404:	431bde83 	.word	0x431bde83
 8004408:	10624dd3 	.word	0x10624dd3

0800440c <DelayUS>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DelayUS(uint32_t cnt)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t i;
  i = cnt * 4;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	60fb      	str	r3, [r7, #12]
  while(i--);
 800441a:	bf00      	nop
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1e5a      	subs	r2, r3, #1
 8004420:	60fa      	str	r2, [r7, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1fa      	bne.n	800441c <DelayUS+0x10>
}
 8004426:	bf00      	nop
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <WR_CMD>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
static void WR_CMD (uint8_t cmd)  
{ 
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&TP_hspi,&cmd,1,1000);
 800443e:	1df9      	adds	r1, r7, #7
 8004440:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004444:	2201      	movs	r2, #1
 8004446:	4803      	ldr	r0, [pc, #12]	; (8004454 <WR_CMD+0x20>)
 8004448:	f005 f81e 	bl	8009488 <HAL_SPI_Transmit>
} 
 800444c:	bf00      	nop
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20001100 	.word	0x20001100

08004458 <RD_AD>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
static int RD_AD(void)  
{ 
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
  uint8_t buf[2];
  int value;
  HAL_SPI_Receive(&TP_hspi,buf,2,1000);
 800445e:	4639      	mov	r1, r7
 8004460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004464:	2202      	movs	r2, #2
 8004466:	4809      	ldr	r0, [pc, #36]	; (800448c <RD_AD+0x34>)
 8004468:	f005 f94a 	bl	8009700 <HAL_SPI_Receive>
  value = (uint16_t)((buf[0] << 8) + buf[1]) >> 3;
 800446c:	783b      	ldrb	r3, [r7, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	b29a      	uxth	r2, r3
 8004474:	787b      	ldrb	r3, [r7, #1]
 8004476:	b29b      	uxth	r3, r3
 8004478:	4413      	add	r3, r2
 800447a:	b29b      	uxth	r3, r3
 800447c:	08db      	lsrs	r3, r3, #3
 800447e:	b29b      	uxth	r3, r3
 8004480:	607b      	str	r3, [r7, #4]
  return value;
 8004482:	687b      	ldr	r3, [r7, #4]
} 
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20001100 	.word	0x20001100

08004490 <Read_X>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_X(void)  
{  
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
  int i; 
  TP_CS(0); 
 8004496:	2200      	movs	r2, #0
 8004498:	2110      	movs	r1, #16
 800449a:	480c      	ldr	r0, [pc, #48]	; (80044cc <Read_X+0x3c>)
 800449c:	f002 ff00 	bl	80072a0 <HAL_GPIO_WritePin>
  DelayUS(1); 
 80044a0:	2001      	movs	r0, #1
 80044a2:	f7ff ffb3 	bl	800440c <DelayUS>
  WR_CMD(CHX); 
 80044a6:	2090      	movs	r0, #144	; 0x90
 80044a8:	f7ff ffc4 	bl	8004434 <WR_CMD>
  DelayUS(1); 
 80044ac:	2001      	movs	r0, #1
 80044ae:	f7ff ffad 	bl	800440c <DelayUS>
  i=RD_AD(); 
 80044b2:	f7ff ffd1 	bl	8004458 <RD_AD>
 80044b6:	6078      	str	r0, [r7, #4]
  TP_CS(1); 
 80044b8:	2201      	movs	r2, #1
 80044ba:	2110      	movs	r1, #16
 80044bc:	4803      	ldr	r0, [pc, #12]	; (80044cc <Read_X+0x3c>)
 80044be:	f002 feef 	bl	80072a0 <HAL_GPIO_WritePin>
  return i;    
 80044c2:	687b      	ldr	r3, [r7, #4]
} 
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40020800 	.word	0x40020800

080044d0 <Read_Y>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_Y(void)  
{  
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
  int i; 
  TP_CS(0); 
 80044d6:	2200      	movs	r2, #0
 80044d8:	2110      	movs	r1, #16
 80044da:	480c      	ldr	r0, [pc, #48]	; (800450c <Read_Y+0x3c>)
 80044dc:	f002 fee0 	bl	80072a0 <HAL_GPIO_WritePin>
  DelayUS(1); 
 80044e0:	2001      	movs	r0, #1
 80044e2:	f7ff ff93 	bl	800440c <DelayUS>
  WR_CMD(CHY); 
 80044e6:	20d0      	movs	r0, #208	; 0xd0
 80044e8:	f7ff ffa4 	bl	8004434 <WR_CMD>
  DelayUS(1); 
 80044ec:	2001      	movs	r0, #1
 80044ee:	f7ff ff8d 	bl	800440c <DelayUS>
  i=RD_AD(); 
 80044f2:	f7ff ffb1 	bl	8004458 <RD_AD>
 80044f6:	6078      	str	r0, [r7, #4]
  TP_CS(1); 
 80044f8:	2201      	movs	r2, #1
 80044fa:	2110      	movs	r1, #16
 80044fc:	4803      	ldr	r0, [pc, #12]	; (800450c <Read_Y+0x3c>)
 80044fe:	f002 fecf 	bl	80072a0 <HAL_GPIO_WritePin>
  return i;     
 8004502:	687b      	ldr	r3, [r7, #4]
} 
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40020800 	.word	0x40020800

08004510 <TP_GetAdXY>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
void TP_GetAdXY(int *x,int *y)  
{ 
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  int adx,ady; 
  adx=Read_X(); 
 800451a:	f7ff ffb9 	bl	8004490 <Read_X>
 800451e:	60f8      	str	r0, [r7, #12]
  DelayUS(1); 
 8004520:	2001      	movs	r0, #1
 8004522:	f7ff ff73 	bl	800440c <DelayUS>
  ady=Read_Y(); 
 8004526:	f7ff ffd3 	bl	80044d0 <Read_Y>
 800452a:	60b8      	str	r0, [r7, #8]
  *x=adx; 
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	601a      	str	r2, [r3, #0]
  *y=ady; 
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	601a      	str	r2, [r3, #0]
} 
 8004538:	bf00      	nop
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <DrawCross>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DrawCross(uint16_t Xpos,uint16_t Ypos)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	460a      	mov	r2, r1
 800454a:	80fb      	strh	r3, [r7, #6]
 800454c:	4613      	mov	r3, r2
 800454e:	80bb      	strh	r3, [r7, #4]
  BSP_LCD_DrawHLine(Xpos-13, Ypos, 10);
 8004550:	88fb      	ldrh	r3, [r7, #6]
 8004552:	3b0d      	subs	r3, #13
 8004554:	b29b      	uxth	r3, r3
 8004556:	88b9      	ldrh	r1, [r7, #4]
 8004558:	220a      	movs	r2, #10
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff f9de 	bl	800391c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos+4, Ypos, 10);
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	3304      	adds	r3, #4
 8004564:	b29b      	uxth	r3, r3
 8004566:	88b9      	ldrh	r1, [r7, #4]
 8004568:	220a      	movs	r2, #10
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff f9d6 	bl	800391c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos-13, 10);
 8004570:	88bb      	ldrh	r3, [r7, #4]
 8004572:	3b0d      	subs	r3, #13
 8004574:	b299      	uxth	r1, r3
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	220a      	movs	r2, #10
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff fa08 	bl	8003990 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine(Xpos, Ypos+4, 10);  
 8004580:	88bb      	ldrh	r3, [r7, #4]
 8004582:	3304      	adds	r3, #4
 8004584:	b299      	uxth	r1, r3
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	220a      	movs	r2, #10
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fa00 	bl	8003990 <BSP_LCD_DrawVLine>

}  
 8004590:	bf00      	nop
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <Read_Ads7846>:
* Output         : None
* Return         : Coordinate *
* Attention      : None
*******************************************************************************/
Coordinate *Read_Ads7846(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b09c      	sub	sp, #112	; 0x70
 800459c:	af00      	add	r7, sp, #0
  static Coordinate  screen;
  int m0,m1,m2,TP_X[1],TP_Y[1],temp[3];
  uint8_t count=0;
 800459e:	2300      	movs	r3, #0
 80045a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  int buffer[2][9]={{0},{0}};
 80045a4:	1d3b      	adds	r3, r7, #4
 80045a6:	2248      	movs	r2, #72	; 0x48
 80045a8:	2100      	movs	r1, #0
 80045aa:	4618      	mov	r0, r3
 80045ac:	f00e fc9b 	bl	8012ee6 <memset>
  
  do
  {       
    TP_GetAdXY(TP_X,TP_Y);  
 80045b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80045b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80045b8:	4611      	mov	r1, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff ffa8 	bl	8004510 <TP_GetAdXY>
    buffer[0][count]=TP_X[0];  
 80045c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	3370      	adds	r3, #112	; 0x70
 80045ca:	443b      	add	r3, r7
 80045cc:	f843 2c6c 	str.w	r2, [r3, #-108]
    buffer[1][count]=TP_Y[0];
 80045d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045d6:	3309      	adds	r3, #9
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	3370      	adds	r3, #112	; 0x70
 80045dc:	443b      	add	r3, r7
 80045de:	f843 2c6c 	str.w	r2, [r3, #-108]
    count++;  
 80045e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045e6:	3301      	adds	r3, #1
 80045e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  while(!TP_INT_IN&& count<9);  /* TP_INT_IN  */
 80045ec:	2120      	movs	r1, #32
 80045ee:	4885      	ldr	r0, [pc, #532]	; (8004804 <Read_Ads7846+0x26c>)
 80045f0:	f002 fe3e 	bl	8007270 <HAL_GPIO_ReadPin>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d103      	bne.n	8004602 <Read_Ads7846+0x6a>
 80045fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d9d6      	bls.n	80045b0 <Read_Ads7846+0x18>
  if(count==9)   /* Average X Y  */ 
 8004602:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004606:	2b09      	cmp	r3, #9
 8004608:	f040 80f6 	bne.w	80047f8 <Read_Ads7846+0x260>
  {
    /* Average X  */
    temp[0]=(buffer[0][0]+buffer[0][1]+buffer[0][2])/3;
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	441a      	add	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	4a7c      	ldr	r2, [pc, #496]	; (8004808 <Read_Ads7846+0x270>)
 8004618:	fb82 1203 	smull	r1, r2, r2, r3
 800461c:	17db      	asrs	r3, r3, #31
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp[1]=(buffer[0][3]+buffer[0][4]+buffer[0][5])/3;
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	441a      	add	r2, r3
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	4413      	add	r3, r2
 800462c:	4a76      	ldr	r2, [pc, #472]	; (8004808 <Read_Ads7846+0x270>)
 800462e:	fb82 1203 	smull	r1, r2, r2, r3
 8004632:	17db      	asrs	r3, r3, #31
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	653b      	str	r3, [r7, #80]	; 0x50
    temp[2]=(buffer[0][6]+buffer[0][7]+buffer[0][8])/3;
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	441a      	add	r2, r3
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	4413      	add	r3, r2
 8004642:	4a71      	ldr	r2, [pc, #452]	; (8004808 <Read_Ads7846+0x270>)
 8004644:	fb82 1203 	smull	r1, r2, r2, r3
 8004648:	17db      	asrs	r3, r3, #31
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	657b      	str	r3, [r7, #84]	; 0x54
   
    m0=temp[0]-temp[1];
 800464e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=temp[1]-temp[2];
 8004656:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	667b      	str	r3, [r7, #100]	; 0x64
    m2=temp[2]-temp[0];
 800465e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	663b      	str	r3, [r7, #96]	; 0x60
   
    m0=m0>0?m0:(-m0);
 8004666:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004668:	2b00      	cmp	r3, #0
 800466a:	bfb8      	it	lt
 800466c:	425b      	neglt	r3, r3
 800466e:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=m1>0?m1:(-m1);
 8004670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004672:	2b00      	cmp	r3, #0
 8004674:	bfb8      	it	lt
 8004676:	425b      	neglt	r3, r3
 8004678:	667b      	str	r3, [r7, #100]	; 0x64
    m2=m2>0?m2:(-m2);
 800467a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800467c:	2b00      	cmp	r3, #0
 800467e:	bfb8      	it	lt
 8004680:	425b      	neglt	r3, r3
 8004682:	663b      	str	r3, [r7, #96]	; 0x60
   
    if( m0>THRESHOLD  &&  m1>THRESHOLD  &&  m2>THRESHOLD ) return 0;
 8004684:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004686:	2b02      	cmp	r3, #2
 8004688:	dd07      	ble.n	800469a <Read_Ads7846+0x102>
 800468a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800468c:	2b02      	cmp	r3, #2
 800468e:	dd04      	ble.n	800469a <Read_Ads7846+0x102>
 8004690:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004692:	2b02      	cmp	r3, #2
 8004694:	dd01      	ble.n	800469a <Read_Ads7846+0x102>
 8004696:	2300      	movs	r3, #0
 8004698:	e0af      	b.n	80047fa <Read_Ads7846+0x262>
   
    if(m0<m1)
 800469a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800469c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800469e:	429a      	cmp	r2, r3
 80046a0:	da17      	bge.n	80046d2 <Read_Ads7846+0x13a>
    {
      if(m2<m0) 
 80046a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046a6:	429a      	cmp	r2, r3
 80046a8:	da09      	bge.n	80046be <Read_Ads7846+0x126>
        screen.x=(temp[0]+temp[2])/2;
 80046aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ae:	4413      	add	r3, r2
 80046b0:	0fda      	lsrs	r2, r3, #31
 80046b2:	4413      	add	r3, r2
 80046b4:	105b      	asrs	r3, r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	4b54      	ldr	r3, [pc, #336]	; (800480c <Read_Ads7846+0x274>)
 80046ba:	801a      	strh	r2, [r3, #0]
 80046bc:	e020      	b.n	8004700 <Read_Ads7846+0x168>
      else 
        screen.x=(temp[0]+temp[1])/2;  
 80046be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c2:	4413      	add	r3, r2
 80046c4:	0fda      	lsrs	r2, r3, #31
 80046c6:	4413      	add	r3, r2
 80046c8:	105b      	asrs	r3, r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	4b4f      	ldr	r3, [pc, #316]	; (800480c <Read_Ads7846+0x274>)
 80046ce:	801a      	strh	r2, [r3, #0]
 80046d0:	e016      	b.n	8004700 <Read_Ads7846+0x168>
    }
    else if(m2<m1) 
 80046d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046d6:	429a      	cmp	r2, r3
 80046d8:	da09      	bge.n	80046ee <Read_Ads7846+0x156>
      screen.x=(temp[0]+temp[2])/2;
 80046da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046de:	4413      	add	r3, r2
 80046e0:	0fda      	lsrs	r2, r3, #31
 80046e2:	4413      	add	r3, r2
 80046e4:	105b      	asrs	r3, r3, #1
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	4b48      	ldr	r3, [pc, #288]	; (800480c <Read_Ads7846+0x274>)
 80046ea:	801a      	strh	r2, [r3, #0]
 80046ec:	e008      	b.n	8004700 <Read_Ads7846+0x168>
    else 
      screen.x=(temp[1]+temp[2])/2;
 80046ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046f2:	4413      	add	r3, r2
 80046f4:	0fda      	lsrs	r2, r3, #31
 80046f6:	4413      	add	r3, r2
 80046f8:	105b      	asrs	r3, r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	4b43      	ldr	r3, [pc, #268]	; (800480c <Read_Ads7846+0x274>)
 80046fe:	801a      	strh	r2, [r3, #0]
   
    /* Average Y  */
    temp[0]=(buffer[1][0]+buffer[1][1]+buffer[1][2])/3;
 8004700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004704:	441a      	add	r2, r3
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	4413      	add	r3, r2
 800470a:	4a3f      	ldr	r2, [pc, #252]	; (8004808 <Read_Ads7846+0x270>)
 800470c:	fb82 1203 	smull	r1, r2, r2, r3
 8004710:	17db      	asrs	r3, r3, #31
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp[1]=(buffer[1][3]+buffer[1][4]+buffer[1][5])/3;
 8004716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471a:	441a      	add	r2, r3
 800471c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800471e:	4413      	add	r3, r2
 8004720:	4a39      	ldr	r2, [pc, #228]	; (8004808 <Read_Ads7846+0x270>)
 8004722:	fb82 1203 	smull	r1, r2, r2, r3
 8004726:	17db      	asrs	r3, r3, #31
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	653b      	str	r3, [r7, #80]	; 0x50
    temp[2]=(buffer[1][6]+buffer[1][7]+buffer[1][8])/3;
 800472c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800472e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004730:	441a      	add	r2, r3
 8004732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004734:	4413      	add	r3, r2
 8004736:	4a34      	ldr	r2, [pc, #208]	; (8004808 <Read_Ads7846+0x270>)
 8004738:	fb82 1203 	smull	r1, r2, r2, r3
 800473c:	17db      	asrs	r3, r3, #31
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	657b      	str	r3, [r7, #84]	; 0x54
    m0=temp[0]-temp[1];
 8004742:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=temp[1]-temp[2];
 800474a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800474c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	667b      	str	r3, [r7, #100]	; 0x64
    m2=temp[2]-temp[0];
 8004752:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	663b      	str	r3, [r7, #96]	; 0x60
    m0=m0>0?m0:(-m0);
 800475a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800475c:	2b00      	cmp	r3, #0
 800475e:	bfb8      	it	lt
 8004760:	425b      	neglt	r3, r3
 8004762:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=m1>0?m1:(-m1);
 8004764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004766:	2b00      	cmp	r3, #0
 8004768:	bfb8      	it	lt
 800476a:	425b      	neglt	r3, r3
 800476c:	667b      	str	r3, [r7, #100]	; 0x64
    m2=m2>0?m2:(-m2);
 800476e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004770:	2b00      	cmp	r3, #0
 8004772:	bfb8      	it	lt
 8004774:	425b      	neglt	r3, r3
 8004776:	663b      	str	r3, [r7, #96]	; 0x60
    if(m0>THRESHOLD&&m1>THRESHOLD&&m2>THRESHOLD) return 0;
 8004778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800477a:	2b02      	cmp	r3, #2
 800477c:	dd07      	ble.n	800478e <Read_Ads7846+0x1f6>
 800477e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004780:	2b02      	cmp	r3, #2
 8004782:	dd04      	ble.n	800478e <Read_Ads7846+0x1f6>
 8004784:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004786:	2b02      	cmp	r3, #2
 8004788:	dd01      	ble.n	800478e <Read_Ads7846+0x1f6>
 800478a:	2300      	movs	r3, #0
 800478c:	e035      	b.n	80047fa <Read_Ads7846+0x262>
   
    if(m0<m1)
 800478e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004792:	429a      	cmp	r2, r3
 8004794:	da17      	bge.n	80047c6 <Read_Ads7846+0x22e>
    {
      if(m2<m0) 
 8004796:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004798:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800479a:	429a      	cmp	r2, r3
 800479c:	da09      	bge.n	80047b2 <Read_Ads7846+0x21a>
        screen.y=(temp[0]+temp[2])/2;
 800479e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047a2:	4413      	add	r3, r2
 80047a4:	0fda      	lsrs	r2, r3, #31
 80047a6:	4413      	add	r3, r2
 80047a8:	105b      	asrs	r3, r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	4b17      	ldr	r3, [pc, #92]	; (800480c <Read_Ads7846+0x274>)
 80047ae:	805a      	strh	r2, [r3, #2]
 80047b0:	e020      	b.n	80047f4 <Read_Ads7846+0x25c>
      else 
        screen.y=(temp[0]+temp[1])/2;  
 80047b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b6:	4413      	add	r3, r2
 80047b8:	0fda      	lsrs	r2, r3, #31
 80047ba:	4413      	add	r3, r2
 80047bc:	105b      	asrs	r3, r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	4b12      	ldr	r3, [pc, #72]	; (800480c <Read_Ads7846+0x274>)
 80047c2:	805a      	strh	r2, [r3, #2]
 80047c4:	e016      	b.n	80047f4 <Read_Ads7846+0x25c>
      }
    else if(m2<m1) 
 80047c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ca:	429a      	cmp	r2, r3
 80047cc:	da09      	bge.n	80047e2 <Read_Ads7846+0x24a>
       screen.y=(temp[0]+temp[2])/2;
 80047ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047d2:	4413      	add	r3, r2
 80047d4:	0fda      	lsrs	r2, r3, #31
 80047d6:	4413      	add	r3, r2
 80047d8:	105b      	asrs	r3, r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <Read_Ads7846+0x274>)
 80047de:	805a      	strh	r2, [r3, #2]
 80047e0:	e008      	b.n	80047f4 <Read_Ads7846+0x25c>
    else
       screen.y=(temp[1]+temp[2])/2;
 80047e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e6:	4413      	add	r3, r2
 80047e8:	0fda      	lsrs	r2, r3, #31
 80047ea:	4413      	add	r3, r2
 80047ec:	105b      	asrs	r3, r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <Read_Ads7846+0x274>)
 80047f2:	805a      	strh	r2, [r3, #2]
   
    return &screen;
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <Read_Ads7846+0x274>)
 80047f6:	e000      	b.n	80047fa <Read_Ads7846+0x262>
  }
  return 0; 
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3770      	adds	r7, #112	; 0x70
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40020800 	.word	0x40020800
 8004808:	55555556 	.word	0x55555556
 800480c:	200017e8 	.word	0x200017e8

08004810 <setCalibrationMatrix>:
* Attention      : None
*******************************************************************************/
FunctionalState setCalibrationMatrix( Coordinate * displayPtr,
                          Coordinate * screenPtr,
                          Matrix * matrixPtr)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]

  FunctionalState retTHRESHOLD = ENABLE ;
 800481c:	2301      	movs	r3, #1
 800481e:	75fb      	strb	r3, [r7, #23]
  /* K=(X0-X2) (Y1-Y2)-(X1-X2) (Y0-Y2) */
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	461a      	mov	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	3308      	adds	r3, #8
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	3204      	adds	r2, #4
 8004832:	8852      	ldrh	r2, [r2, #2]
 8004834:	4611      	mov	r1, r2
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	3208      	adds	r2, #8
 800483a:	8852      	ldrh	r2, [r2, #2]
 800483c:	1a8a      	subs	r2, r1, r2
 800483e:	fb03 f202 	mul.w	r2, r3, r2
                       ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	3304      	adds	r3, #4
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	4619      	mov	r1, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	3308      	adds	r3, #8
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	1acb      	subs	r3, r1, r3
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	8849      	ldrh	r1, [r1, #2]
 8004856:	4608      	mov	r0, r1
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	3108      	adds	r1, #8
 800485c:	8849      	ldrh	r1, [r1, #2]
 800485e:	1a41      	subs	r1, r0, r1
 8004860:	fb01 f303 	mul.w	r3, r1, r3
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	4618      	mov	r0, r3
 8004868:	f7fb fe5c 	bl	8000524 <__aeabi_i2d>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  if( matrixPtr->Divider == 0 )
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	f7fc f920 	bl	8000ac8 <__aeabi_dcmpeq>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <setCalibrationMatrix+0x84>
  {
    retTHRESHOLD = DISABLE;
 800488e:	2300      	movs	r3, #0
 8004890:	75fb      	strb	r3, [r7, #23]
 8004892:	e145      	b.n	8004b20 <setCalibrationMatrix+0x310>
  }
  else
  {
    /* A=((XD0-XD2) (Y1-Y2)-(XD1-XD2) (Y0-Y2))/K  */
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	3308      	adds	r3, #8
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	3204      	adds	r2, #4
 80048a6:	8852      	ldrh	r2, [r2, #2]
 80048a8:	4611      	mov	r1, r2
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	3208      	adds	r2, #8
 80048ae:	8852      	ldrh	r2, [r2, #2]
 80048b0:	1a8a      	subs	r2, r1, r2
 80048b2:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3304      	adds	r3, #4
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	4619      	mov	r1, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3308      	adds	r3, #8
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	1acb      	subs	r3, r1, r3
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	8849      	ldrh	r1, [r1, #2]
 80048ca:	4608      	mov	r0, r1
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	3108      	adds	r1, #8
 80048d0:	8849      	ldrh	r1, [r1, #2]
 80048d2:	1a41      	subs	r1, r0, r1
 80048d4:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fb fe22 	bl	8000524 <__aeabi_i2d>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	e9c1 2300 	strd	r2, r3, [r1]
  /* B=((X0-X2) (XD1-XD2)-(XD0-XD2) (X1-X2))/K  */
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	3308      	adds	r3, #8
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	3204      	adds	r2, #4
 80048fc:	8812      	ldrh	r2, [r2, #0]
 80048fe:	4611      	mov	r1, r2
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	3208      	adds	r2, #8
 8004904:	8812      	ldrh	r2, [r2, #0]
 8004906:	1a8a      	subs	r2, r1, r2
 8004908:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	4619      	mov	r1, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3308      	adds	r3, #8
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	1acb      	subs	r3, r1, r3
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	3104      	adds	r1, #4
 800491e:	8809      	ldrh	r1, [r1, #0]
 8004920:	4608      	mov	r0, r1
 8004922:	68b9      	ldr	r1, [r7, #8]
 8004924:	3108      	adds	r1, #8
 8004926:	8809      	ldrh	r1, [r1, #0]
 8004928:	1a41      	subs	r1, r0, r1
 800492a:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	4618      	mov	r0, r3
 8004932:	f7fb fdf7 	bl	8000524 <__aeabi_i2d>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    /* C=(Y0(X2XD1-X1XD2)+Y1(X0XD2-X2XD0)+Y2(X1XD0-X0XD1))/K */
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	3308      	adds	r3, #8
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3304      	adds	r3, #4
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	fb03 f202 	mul.w	r2, r3, r2
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	3304      	adds	r3, #4
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	4619      	mov	r1, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3308      	adds	r3, #8
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	fb01 f303 	mul.w	r3, r1, r3
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	8852      	ldrh	r2, [r2, #2]
 800496a:	fb03 f202 	mul.w	r2, r3, r2
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	4619      	mov	r1, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3308      	adds	r3, #8
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	fb03 f101 	mul.w	r1, r3, r1
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	3308      	adds	r3, #8
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	fb00 f303 	mul.w	r3, r0, r3
 800498e:	1acb      	subs	r3, r1, r3
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	3104      	adds	r1, #4
 8004994:	8849      	ldrh	r1, [r1, #2]
 8004996:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 800499a:	441a      	add	r2, r3
                    (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	3304      	adds	r3, #4
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	4619      	mov	r1, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	fb03 f101 	mul.w	r1, r3, r1
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	3304      	adds	r3, #4
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	fb00 f303 	mul.w	r3, r0, r3
 80049bc:	1acb      	subs	r3, r1, r3
 80049be:	68b9      	ldr	r1, [r7, #8]
 80049c0:	3108      	adds	r1, #8
 80049c2:	8849      	ldrh	r1, [r1, #2]
 80049c4:	fb01 f303 	mul.w	r3, r1, r3
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 80049c8:	4413      	add	r3, r2
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fb fdaa 	bl	8000524 <__aeabi_i2d>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    /* D=((YD0-YD2) (Y1-Y2)-(YD1-YD2) (Y0-Y2))/K  */
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	885b      	ldrh	r3, [r3, #2]
 80049de:	461a      	mov	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3308      	adds	r3, #8
 80049e4:	885b      	ldrh	r3, [r3, #2]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	3204      	adds	r2, #4
 80049ec:	8852      	ldrh	r2, [r2, #2]
 80049ee:	4611      	mov	r1, r2
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	3208      	adds	r2, #8
 80049f4:	8852      	ldrh	r2, [r2, #2]
 80049f6:	1a8a      	subs	r2, r1, r2
 80049f8:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3304      	adds	r3, #4
 8004a00:	885b      	ldrh	r3, [r3, #2]
 8004a02:	4619      	mov	r1, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3308      	adds	r3, #8
 8004a08:	885b      	ldrh	r3, [r3, #2]
 8004a0a:	1acb      	subs	r3, r1, r3
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	8849      	ldrh	r1, [r1, #2]
 8004a10:	4608      	mov	r0, r1
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	3108      	adds	r1, #8
 8004a16:	8849      	ldrh	r1, [r1, #2]
 8004a18:	1a41      	subs	r1, r0, r1
 8004a1a:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fb fd7f 	bl	8000524 <__aeabi_i2d>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    /* E=((X0-X2) (YD1-YD2)-(YD0-YD2) (X1-X2))/K  */
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	3308      	adds	r3, #8
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	3204      	adds	r2, #4
 8004a42:	8852      	ldrh	r2, [r2, #2]
 8004a44:	4611      	mov	r1, r2
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	3208      	adds	r2, #8
 8004a4a:	8852      	ldrh	r2, [r2, #2]
 8004a4c:	1a8a      	subs	r2, r1, r2
 8004a4e:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	885b      	ldrh	r3, [r3, #2]
 8004a56:	4619      	mov	r1, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	885b      	ldrh	r3, [r3, #2]
 8004a5e:	1acb      	subs	r3, r1, r3
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	3104      	adds	r1, #4
 8004a64:	8809      	ldrh	r1, [r1, #0]
 8004a66:	4608      	mov	r0, r1
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	3108      	adds	r1, #8
 8004a6c:	8809      	ldrh	r1, [r1, #0]
 8004a6e:	1a41      	subs	r1, r0, r1
 8004a70:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fb fd54 	bl	8000524 <__aeabi_i2d>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	e9c1 2308 	strd	r2, r3, [r1, #32]
    /* F=(Y0(X2YD1-X1YD2)+Y1(X0YD2-X2YD0)+Y2(X1YD0-X0YD1))/K */
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	3308      	adds	r3, #8
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3304      	adds	r3, #4
 8004a92:	885b      	ldrh	r3, [r3, #2]
 8004a94:	fb03 f202 	mul.w	r2, r3, r2
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3308      	adds	r3, #8
 8004aa4:	885b      	ldrh	r3, [r3, #2]
 8004aa6:	fb01 f303 	mul.w	r3, r1, r3
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	8852      	ldrh	r2, [r2, #2]
 8004ab0:	fb03 f202 	mul.w	r2, r3, r2
                    (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3308      	adds	r3, #8
 8004abe:	885b      	ldrh	r3, [r3, #2]
 8004ac0:	fb03 f101 	mul.w	r1, r3, r1
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	885b      	ldrh	r3, [r3, #2]
 8004ad0:	fb00 f303 	mul.w	r3, r0, r3
 8004ad4:	1acb      	subs	r3, r1, r3
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	3104      	adds	r1, #4
 8004ada:	8849      	ldrh	r1, [r1, #2]
 8004adc:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8004ae0:	441a      	add	r2, r3
                    (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	885b      	ldrh	r3, [r3, #2]
 8004aee:	fb03 f101 	mul.w	r1, r3, r1
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3304      	adds	r3, #4
 8004afc:	885b      	ldrh	r3, [r3, #2]
 8004afe:	fb00 f303 	mul.w	r3, r0, r3
 8004b02:	1acb      	subs	r3, r1, r3
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	3108      	adds	r1, #8
 8004b08:	8849      	ldrh	r1, [r1, #2]
 8004b0a:	fb01 f303 	mul.w	r3, r1, r3
                    (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8004b0e:	4413      	add	r3, r2
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fb fd07 	bl	8000524 <__aeabi_i2d>
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  }
  return( retTHRESHOLD ) ;
 8004b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <getDisplayPoint>:
* Attention      : None
*******************************************************************************/
FunctionalState getDisplayPoint(Coordinate * displayPtr,
                     Coordinate * screenPtr,
                     Matrix * matrixPtr )
{
 8004b2a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  FunctionalState retTHRESHOLD =ENABLE ;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	75fb      	strb	r3, [r7, #23]
  /*
  An=168
  */
  if( matrixPtr->Divider != 0 )
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	f7fb ffbd 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f040 8085 	bne.w	8004c60 <getDisplayPoint+0x136>
  {
    /* XD = AX+BY+C */        
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fb fcdf 	bl	8000524 <__aeabi_i2d>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	4629      	mov	r1, r5
 8004b6e:	f7fb fd43 	bl	80005f8 <__aeabi_dmul>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4690      	mov	r8, r2
 8004b78:	4699      	mov	r9, r3
                      (matrixPtr->Bn * screenPtr->y) + 
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	885b      	ldrh	r3, [r3, #2]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fb fccd 	bl	8000524 <__aeabi_i2d>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4620      	mov	r0, r4
 8004b90:	4629      	mov	r1, r5
 8004b92:	f7fb fd31 	bl	80005f8 <__aeabi_dmul>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8004b9a:	4640      	mov	r0, r8
 8004b9c:	4649      	mov	r1, r9
 8004b9e:	f7fb fb75 	bl	800028c <__adddf3>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	4619      	mov	r1, r3
                       matrixPtr->Cn 
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
                      (matrixPtr->Bn * screenPtr->y) + 
 8004bb0:	f7fb fb6c 	bl	800028c <__adddf3>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4610      	mov	r0, r2
 8004bba:	4619      	mov	r1, r3
                    ) / matrixPtr->Divider ;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004bc2:	f7fb fe43 	bl	800084c <__aeabi_ddiv>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8004bca:	4610      	mov	r0, r2
 8004bcc:	4619      	mov	r1, r3
 8004bce:	f7fb ffeb 	bl	8000ba8 <__aeabi_d2uiz>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	801a      	strh	r2, [r3, #0]
    /* YD = DX+EY+F */        
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fb fc9d 	bl	8000524 <__aeabi_i2d>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4620      	mov	r0, r4
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	f7fb fd01 	bl	80005f8 <__aeabi_dmul>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4690      	mov	r8, r2
 8004bfc:	4699      	mov	r9, r3
                      (matrixPtr->En * screenPtr->y) + 
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	885b      	ldrh	r3, [r3, #2]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fb fc8b 	bl	8000524 <__aeabi_i2d>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4620      	mov	r0, r4
 8004c14:	4629      	mov	r1, r5
 8004c16:	f7fb fcef 	bl	80005f8 <__aeabi_dmul>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8004c1e:	4640      	mov	r0, r8
 8004c20:	4649      	mov	r1, r9
 8004c22:	f7fb fb33 	bl	800028c <__adddf3>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4619      	mov	r1, r3
                       matrixPtr->Fn 
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
                      (matrixPtr->En * screenPtr->y) + 
 8004c34:	f7fb fb2a 	bl	800028c <__adddf3>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4619      	mov	r1, r3
                    ) / matrixPtr->Divider ;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004c46:	f7fb fe01 	bl	800084c <__aeabi_ddiv>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8004c4e:	4610      	mov	r0, r2
 8004c50:	4619      	mov	r1, r3
 8004c52:	f7fb ffa9 	bl	8000ba8 <__aeabi_d2uiz>
 8004c56:	4603      	mov	r3, r0
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	805a      	strh	r2, [r3, #2]
 8004c5e:	e001      	b.n	8004c64 <getDisplayPoint+0x13a>
  }
  else
  {
    retTHRESHOLD = DISABLE;
 8004c60:	2300      	movs	r3, #0
 8004c62:	75fb      	strb	r3, [r7, #23]
  }
  return(retTHRESHOLD);
 8004c64:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004c70 <TouchPanel_Calibrate>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void TouchPanel_Calibrate(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
  uint8_t i;
  Coordinate * Ptr;

  for(i=0;i<3;i++)
 8004c76:	2300      	movs	r3, #0
 8004c78:	71fb      	strb	r3, [r7, #7]
 8004c7a:	e03b      	b.n	8004cf4 <TouchPanel_Calibrate+0x84>
  {
    BSP_LCD_SetFont(&Font12);
 8004c7c:	4825      	ldr	r0, [pc, #148]	; (8004d14 <TouchPanel_Calibrate+0xa4>)
 8004c7e:	f7fe fd2d 	bl	80036dc <BSP_LCD_SetFont>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8004c82:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004c86:	f7fe fd45 	bl	8003714 <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8004c8a:	201f      	movs	r0, #31
 8004c8c:	f7fe fd16 	bl	80036bc <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"        Touch crosshair to calibrate");
 8004c90:	4921      	ldr	r1, [pc, #132]	; (8004d18 <TouchPanel_Calibrate+0xa8>)
 8004c92:	2001      	movs	r0, #1
 8004c94:	f7fe fe2a 	bl	80038ec <BSP_LCD_DisplayStringAtLine>
    BSP_LCD_SetFont(&Font24);
 8004c98:	4820      	ldr	r0, [pc, #128]	; (8004d1c <TouchPanel_Calibrate+0xac>)
 8004c9a:	f7fe fd1f 	bl	80036dc <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAtLine(5, (uint8_t*)"   Waveshare LCD");
 8004c9e:	4920      	ldr	r1, [pc, #128]	; (8004d20 <TouchPanel_Calibrate+0xb0>)
 8004ca0:	2005      	movs	r0, #5
 8004ca2:	f7fe fe23 	bl	80038ec <BSP_LCD_DisplayStringAtLine>
    HAL_Delay(200);
 8004ca6:	20c8      	movs	r0, #200	; 0xc8
 8004ca8:	f000 f884 	bl	8004db4 <HAL_Delay>
    DrawCross(DisplaySample[i].x,DisplaySample[i].y);
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <TouchPanel_Calibrate+0xb4>)
 8004cb0:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	491b      	ldr	r1, [pc, #108]	; (8004d24 <TouchPanel_Calibrate+0xb4>)
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	440b      	add	r3, r1
 8004cbc:	885b      	ldrh	r3, [r3, #2]
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	f7ff fc3d 	bl	8004540 <DrawCross>
    do
    {
      Ptr=Read_Ads7846();
 8004cc6:	f7ff fc67 	bl	8004598 <Read_Ads7846>
 8004cca:	6038      	str	r0, [r7, #0]
    }
    while( Ptr == (void*)0 );
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f9      	beq.n	8004cc6 <TouchPanel_Calibrate+0x56>
    ScreenSample[i].x= Ptr->x; ScreenSample[i].y= Ptr->y;
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	8811      	ldrh	r1, [r2, #0]
 8004cd8:	4a13      	ldr	r2, [pc, #76]	; (8004d28 <TouchPanel_Calibrate+0xb8>)
 8004cda:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	8851      	ldrh	r1, [r2, #2]
 8004ce4:	4a10      	ldr	r2, [pc, #64]	; (8004d28 <TouchPanel_Calibrate+0xb8>)
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	460a      	mov	r2, r1
 8004cec:	805a      	strh	r2, [r3, #2]
  for(i=0;i<3;i++)
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	71fb      	strb	r3, [r7, #7]
 8004cf4:	79fb      	ldrb	r3, [r7, #7]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d9c0      	bls.n	8004c7c <TouchPanel_Calibrate+0xc>
  }
  setCalibrationMatrix( &DisplaySample[0],&ScreenSample[0],&matrix );
 8004cfa:	4a0c      	ldr	r2, [pc, #48]	; (8004d2c <TouchPanel_Calibrate+0xbc>)
 8004cfc:	490a      	ldr	r1, [pc, #40]	; (8004d28 <TouchPanel_Calibrate+0xb8>)
 8004cfe:	4809      	ldr	r0, [pc, #36]	; (8004d24 <TouchPanel_Calibrate+0xb4>)
 8004d00:	f7ff fd86 	bl	8004810 <setCalibrationMatrix>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8004d04:	2000      	movs	r0, #0
 8004d06:	f7fe fd05 	bl	8003714 <BSP_LCD_Clear>
} 
 8004d0a:	bf00      	nop
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	2000004c 	.word	0x2000004c
 8004d18:	08015f7c 	.word	0x08015f7c
 8004d1c:	20000064 	.word	0x20000064
 8004d20:	08015fa4 	.word	0x08015fa4
 8004d24:	20000040 	.word	0x20000040
 8004d28:	200017dc 	.word	0x200017dc
 8004d2c:	200017a0 	.word	0x200017a0

08004d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d34:	4b0e      	ldr	r3, [pc, #56]	; (8004d70 <HAL_Init+0x40>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a0d      	ldr	r2, [pc, #52]	; (8004d70 <HAL_Init+0x40>)
 8004d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d40:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <HAL_Init+0x40>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a0a      	ldr	r2, [pc, #40]	; (8004d70 <HAL_Init+0x40>)
 8004d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d4c:	4b08      	ldr	r3, [pc, #32]	; (8004d70 <HAL_Init+0x40>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a07      	ldr	r2, [pc, #28]	; (8004d70 <HAL_Init+0x40>)
 8004d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d58:	2003      	movs	r0, #3
 8004d5a:	f000 f8fc 	bl	8004f56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d5e:	200f      	movs	r0, #15
 8004d60:	f7fd ffb2 	bl	8002cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d64:	f7fd ff84 	bl	8002c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	40023c00 	.word	0x40023c00

08004d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d78:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <HAL_IncTick+0x20>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <HAL_IncTick+0x24>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4413      	add	r3, r2
 8004d84:	4a04      	ldr	r2, [pc, #16]	; (8004d98 <HAL_IncTick+0x24>)
 8004d86:	6013      	str	r3, [r2, #0]
}
 8004d88:	bf00      	nop
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000070 	.word	0x20000070
 8004d98:	200017ec 	.word	0x200017ec

08004d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8004da0:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <HAL_GetTick+0x14>)
 8004da2:	681b      	ldr	r3, [r3, #0]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	200017ec 	.word	0x200017ec

08004db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004dbc:	f7ff ffee 	bl	8004d9c <HAL_GetTick>
 8004dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dcc:	d005      	beq.n	8004dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dce:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <HAL_Delay+0x44>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004dda:	bf00      	nop
 8004ddc:	f7ff ffde 	bl	8004d9c <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d8f7      	bhi.n	8004ddc <HAL_Delay+0x28>
  {
  }
}
 8004dec:	bf00      	nop
 8004dee:	bf00      	nop
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000070 	.word	0x20000070

08004dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <__NVIC_SetPriorityGrouping+0x44>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e18:	4013      	ands	r3, r2
 8004e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e2e:	4a04      	ldr	r2, [pc, #16]	; (8004e40 <__NVIC_SetPriorityGrouping+0x44>)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	60d3      	str	r3, [r2, #12]
}
 8004e34:	bf00      	nop
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	e000ed00 	.word	0xe000ed00

08004e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e48:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <__NVIC_GetPriorityGrouping+0x18>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	0a1b      	lsrs	r3, r3, #8
 8004e4e:	f003 0307 	and.w	r3, r3, #7
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	e000ed00 	.word	0xe000ed00

08004e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	db0b      	blt.n	8004e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	f003 021f 	and.w	r2, r3, #31
 8004e78:	4907      	ldr	r1, [pc, #28]	; (8004e98 <__NVIC_EnableIRQ+0x38>)
 8004e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	2001      	movs	r0, #1
 8004e82:	fa00 f202 	lsl.w	r2, r0, r2
 8004e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	e000e100 	.word	0xe000e100

08004e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	6039      	str	r1, [r7, #0]
 8004ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	db0a      	blt.n	8004ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	490c      	ldr	r1, [pc, #48]	; (8004ee8 <__NVIC_SetPriority+0x4c>)
 8004eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eba:	0112      	lsls	r2, r2, #4
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ec4:	e00a      	b.n	8004edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	4908      	ldr	r1, [pc, #32]	; (8004eec <__NVIC_SetPriority+0x50>)
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	3b04      	subs	r3, #4
 8004ed4:	0112      	lsls	r2, r2, #4
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	440b      	add	r3, r1
 8004eda:	761a      	strb	r2, [r3, #24]
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	e000e100 	.word	0xe000e100
 8004eec:	e000ed00 	.word	0xe000ed00

08004ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b089      	sub	sp, #36	; 0x24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f1c3 0307 	rsb	r3, r3, #7
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	bf28      	it	cs
 8004f0e:	2304      	movcs	r3, #4
 8004f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	3304      	adds	r3, #4
 8004f16:	2b06      	cmp	r3, #6
 8004f18:	d902      	bls.n	8004f20 <NVIC_EncodePriority+0x30>
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	3b03      	subs	r3, #3
 8004f1e:	e000      	b.n	8004f22 <NVIC_EncodePriority+0x32>
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f24:	f04f 32ff 	mov.w	r2, #4294967295
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	43da      	mvns	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	401a      	ands	r2, r3
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f38:	f04f 31ff 	mov.w	r1, #4294967295
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f42:	43d9      	mvns	r1, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f48:	4313      	orrs	r3, r2
         );
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3724      	adds	r7, #36	; 0x24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff ff4c 	bl	8004dfc <__NVIC_SetPriorityGrouping>
}
 8004f64:	bf00      	nop
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f7e:	f7ff ff61 	bl	8004e44 <__NVIC_GetPriorityGrouping>
 8004f82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	6978      	ldr	r0, [r7, #20]
 8004f8a:	f7ff ffb1 	bl	8004ef0 <NVIC_EncodePriority>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f94:	4611      	mov	r1, r2
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff ff80 	bl	8004e9c <__NVIC_SetPriority>
}
 8004f9c:	bf00      	nop
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff ff54 	bl	8004e60 <__NVIC_EnableIRQ>
}
 8004fb8:	bf00      	nop
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b088      	sub	sp, #32
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d101      	bne.n	8004fe0 <HAL_DCMI_Start_DMA+0x20>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e086      	b.n	80050ee <HAL_DCMI_Start_DMA+0x12e>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ffe:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0202 	bic.w	r2, r2, #2
 800500e:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6819      	ldr	r1, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	430a      	orrs	r2, r1
 800501e:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	4a34      	ldr	r2, [pc, #208]	; (80050f8 <HAL_DCMI_Start_DMA+0x138>)
 8005026:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	4a33      	ldr	r2, [pc, #204]	; (80050fc <HAL_DCMI_Start_DMA+0x13c>)
 800502e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	2200      	movs	r2, #0
 8005036:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800504a:	d20a      	bcs.n	8005062 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3328      	adds	r3, #40	; 0x28
 8005056:	4619      	mov	r1, r3
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	f000 faa0 	bl	80055a0 <HAL_DMA_Start_IT>
 8005060:	e038      	b.n	80050d4 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	4a24      	ldr	r2, [pc, #144]	; (80050f8 <HAL_DCMI_Start_DMA+0x138>)
 8005068:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2201      	movs	r2, #1
 800506e:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 800507c:	e009      	b.n	8005092 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	085a      	lsrs	r2, r3, #1
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508c:	005a      	lsls	r2, r3, #1
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800509a:	d2f0      	bcs.n	800507e <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a0:	1e9a      	subs	r2, r3, #2
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	4413      	add	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3328      	adds	r3, #40	; 0x28
 80050c4:	4619      	mov	r1, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	f000 fdaa 	bl	8005c28 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	08005211 	.word	0x08005211
 80050fc:	0800533b 	.word	0x0800533b

08005100 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	d016      	beq.n	8005148 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2204      	movs	r2, #4
 8005120:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005126:	f043 0202 	orr.w	r2, r3, #2
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2204      	movs	r2, #4
 8005132:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	4a2f      	ldr	r2, [pc, #188]	; (80051f8 <HAL_DCMI_IRQHandler+0xf8>)
 800513c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fa84 	bl	8005650 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d016      	beq.n	8005180 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2202      	movs	r2, #2
 8005158:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515e:	f043 0201 	orr.w	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2204      	movs	r2, #4
 800516a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	4a21      	ldr	r2, [pc, #132]	; (80051f8 <HAL_DCMI_IRQHandler+0xf8>)
 8005174:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fa68 	bl	8005650 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f003 0310 	and.w	r3, r3, #16
 8005186:	2b00      	cmp	r3, #0
 8005188:	d006      	beq.n	8005198 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2210      	movs	r2, #16
 8005190:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fb feca 	bl	8000f2c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d006      	beq.n	80051b0 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2208      	movs	r2, #8
 80051a8:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fb feae 	bl	8000f0c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d019      	beq.n	80051ee <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d107      	bne.n	80051d8 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 021e 	bic.w	r2, r2, #30
 80051d6:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0201 	bic.w	r2, r2, #1
 80051e6:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7fb fe7f 	bl	8000eec <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80051ee:	bf00      	nop
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	0800533b 	.word	0x0800533b

080051fc <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	2b00      	cmp	r3, #0
 8005228:	d043      	beq.n	80052b2 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005236:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d118      	bne.n	8005276 <DCMI_DMAXferCplt+0x66>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d015      	beq.n	8005276 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	00da      	lsls	r2, r3, #3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4413      	add	r3, r2
 8005262:	2200      	movs	r2, #0
 8005264:	4619      	mov	r1, r3
 8005266:	f001 fe27 	bl	8006eb8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	1e5a      	subs	r2, r3, #1
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	629a      	str	r2, [r3, #40]	; 0x28
 8005274:	e044      	b.n	8005300 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d13c      	bne.n	8005300 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	00da      	lsls	r2, r3, #3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	2201      	movs	r2, #1
 80052a0:	4619      	mov	r1, r3
 80052a2:	f001 fe09 	bl	8006eb8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	1e5a      	subs	r2, r3, #1
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	629a      	str	r2, [r3, #40]	; 0x28
 80052b0:	e026      	b.n	8005300 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d006      	beq.n	80052d0 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052cc:	60da      	str	r2, [r3, #12]
 80052ce:	e017      	b.n	8005300 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10f      	bne.n	8005300 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e4:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	0099      	lsls	r1, r3, #2
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	440a      	add	r2, r1
 80052f6:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	429a      	cmp	r2, r3
 800530a:	d112      	bne.n	8005332 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b02      	cmp	r3, #2
 8005328:	d103      	bne.n	8005332 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8005332:	bf00      	nop
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b084      	sub	sp, #16
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534e:	2b02      	cmp	r3, #2
 8005350:	d003      	beq.n	800535a <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f7ff ff4e 	bl	80051fc <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8005360:	bf00      	nop
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e05f      	b.n	800543a <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fc fd3e 	bl	8001e10 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7fc fd3b 	bl	8001e10 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6812      	ldr	r2, [r2, #0]
 80053ac:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80053b0:	f023 0308 	bic.w	r3, r3, #8
 80053b4:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6819      	ldr	r1, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80053ca:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80053d6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80053e2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d112      	bne.n	800541a <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	7f1b      	ldrb	r3, [r3, #28]
 80053f8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	7f5b      	ldrb	r3, [r3, #29]
 80053fe:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8005400:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	7f9b      	ldrb	r3, [r3, #30]
 8005406:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8005408:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	7fdb      	ldrb	r3, [r3, #31]
 8005410:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8005416:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8005418:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 021e 	orr.w	r2, r2, #30
 8005428:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
	...

08005444 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005450:	f7ff fca4 	bl	8004d9c <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e099      	b.n	8005594 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0201 	bic.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005480:	e00f      	b.n	80054a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005482:	f7ff fc8b 	bl	8004d9c <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b05      	cmp	r3, #5
 800548e:	d908      	bls.n	80054a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2203      	movs	r2, #3
 800549a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e078      	b.n	8005594 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e8      	bne.n	8005482 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	4b38      	ldr	r3, [pc, #224]	; (800559c <HAL_DMA_Init+0x158>)
 80054bc:	4013      	ands	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d107      	bne.n	800550c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	4313      	orrs	r3, r2
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f023 0307 	bic.w	r3, r3, #7
 8005522:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	2b04      	cmp	r3, #4
 8005534:	d117      	bne.n	8005566 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00e      	beq.n	8005566 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 faf1 	bl	8005b30 <DMA_CheckFifoParam>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d008      	beq.n	8005566 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2240      	movs	r2, #64	; 0x40
 8005558:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005562:	2301      	movs	r3, #1
 8005564:	e016      	b.n	8005594 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 faa8 	bl	8005ac4 <DMA_CalcBaseAndBitshift>
 8005574:	4603      	mov	r3, r0
 8005576:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800557c:	223f      	movs	r2, #63	; 0x3f
 800557e:	409a      	lsls	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	f010803f 	.word	0xf010803f

080055a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <HAL_DMA_Start_IT+0x26>
 80055c2:	2302      	movs	r3, #2
 80055c4:	e040      	b.n	8005648 <HAL_DMA_Start_IT+0xa8>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d12f      	bne.n	800563a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2202      	movs	r2, #2
 80055de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 fa3a 	bl	8005a68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f8:	223f      	movs	r2, #63	; 0x3f
 80055fa:	409a      	lsls	r2, r3
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0216 	orr.w	r2, r2, #22
 800560e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	2b00      	cmp	r3, #0
 8005616:	d007      	beq.n	8005628 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0208 	orr.w	r2, r2, #8
 8005626:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0201 	orr.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	e005      	b.n	8005646 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005642:	2302      	movs	r3, #2
 8005644:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005646:	7dfb      	ldrb	r3, [r7, #23]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d004      	beq.n	800566e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2280      	movs	r2, #128	; 0x80
 8005668:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e00c      	b.n	8005688 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2205      	movs	r2, #5
 8005672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0201 	bic.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80056a0:	4b8e      	ldr	r3, [pc, #568]	; (80058dc <HAL_DMA_IRQHandler+0x248>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a8e      	ldr	r2, [pc, #568]	; (80058e0 <HAL_DMA_IRQHandler+0x24c>)
 80056a6:	fba2 2303 	umull	r2, r3, r2, r3
 80056aa:	0a9b      	lsrs	r3, r3, #10
 80056ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056be:	2208      	movs	r2, #8
 80056c0:	409a      	lsls	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4013      	ands	r3, r2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01a      	beq.n	8005700 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d013      	beq.n	8005700 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0204 	bic.w	r2, r2, #4
 80056e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ec:	2208      	movs	r2, #8
 80056ee:	409a      	lsls	r2, r3
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f8:	f043 0201 	orr.w	r2, r3, #1
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005704:	2201      	movs	r2, #1
 8005706:	409a      	lsls	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4013      	ands	r3, r2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d012      	beq.n	8005736 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005722:	2201      	movs	r2, #1
 8005724:	409a      	lsls	r2, r3
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572e:	f043 0202 	orr.w	r2, r3, #2
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573a:	2204      	movs	r2, #4
 800573c:	409a      	lsls	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4013      	ands	r3, r2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d012      	beq.n	800576c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00b      	beq.n	800576c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005758:	2204      	movs	r2, #4
 800575a:	409a      	lsls	r2, r3
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005764:	f043 0204 	orr.w	r2, r3, #4
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005770:	2210      	movs	r2, #16
 8005772:	409a      	lsls	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4013      	ands	r3, r2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d043      	beq.n	8005804 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0308 	and.w	r3, r3, #8
 8005786:	2b00      	cmp	r3, #0
 8005788:	d03c      	beq.n	8005804 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578e:	2210      	movs	r2, #16
 8005790:	409a      	lsls	r2, r3
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d018      	beq.n	80057d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d108      	bne.n	80057c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d024      	beq.n	8005804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	4798      	blx	r3
 80057c2:	e01f      	b.n	8005804 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01b      	beq.n	8005804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	4798      	blx	r3
 80057d4:	e016      	b.n	8005804 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d107      	bne.n	80057f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0208 	bic.w	r2, r2, #8
 80057f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005808:	2220      	movs	r2, #32
 800580a:	409a      	lsls	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4013      	ands	r3, r2
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 808f 	beq.w	8005934 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8087 	beq.w	8005934 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582a:	2220      	movs	r2, #32
 800582c:	409a      	lsls	r2, r3
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b05      	cmp	r3, #5
 800583c:	d136      	bne.n	80058ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0216 	bic.w	r2, r2, #22
 800584c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695a      	ldr	r2, [r3, #20]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800585c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d103      	bne.n	800586e <HAL_DMA_IRQHandler+0x1da>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800586a:	2b00      	cmp	r3, #0
 800586c:	d007      	beq.n	800587e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0208 	bic.w	r2, r2, #8
 800587c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005882:	223f      	movs	r2, #63	; 0x3f
 8005884:	409a      	lsls	r2, r3
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d07e      	beq.n	80059a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	4798      	blx	r3
        }
        return;
 80058aa:	e079      	b.n	80059a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d01d      	beq.n	80058f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10d      	bne.n	80058e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d031      	beq.n	8005934 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	4798      	blx	r3
 80058d8:	e02c      	b.n	8005934 <HAL_DMA_IRQHandler+0x2a0>
 80058da:	bf00      	nop
 80058dc:	20000000 	.word	0x20000000
 80058e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d023      	beq.n	8005934 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	4798      	blx	r3
 80058f4:	e01e      	b.n	8005934 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10f      	bne.n	8005924 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0210 	bic.w	r2, r2, #16
 8005912:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005938:	2b00      	cmp	r3, #0
 800593a:	d032      	beq.n	80059a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b00      	cmp	r3, #0
 8005946:	d022      	beq.n	800598e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2205      	movs	r2, #5
 800594c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0201 	bic.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	3301      	adds	r3, #1
 8005964:	60bb      	str	r3, [r7, #8]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	429a      	cmp	r2, r3
 800596a:	d307      	bcc.n	800597c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1f2      	bne.n	8005960 <HAL_DMA_IRQHandler+0x2cc>
 800597a:	e000      	b.n	800597e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800597c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	4798      	blx	r3
 800599e:	e000      	b.n	80059a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80059a0:	bf00      	nop
    }
  }
}
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	460b      	mov	r3, r1
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_DMA_RegisterCallback+0x20>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e03d      	b.n	8005a44 <HAL_DMA_RegisterCallback+0x9c>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d12c      	bne.n	8005a36 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 80059dc:	7afb      	ldrb	r3, [r7, #11]
 80059de:	2b05      	cmp	r3, #5
 80059e0:	d826      	bhi.n	8005a30 <HAL_DMA_RegisterCallback+0x88>
 80059e2:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <HAL_DMA_RegisterCallback+0x40>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	08005a01 	.word	0x08005a01
 80059ec:	08005a09 	.word	0x08005a09
 80059f0:	08005a11 	.word	0x08005a11
 80059f4:	08005a19 	.word	0x08005a19
 80059f8:	08005a21 	.word	0x08005a21
 80059fc:	08005a29 	.word	0x08005a29
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8005a06:	e018      	b.n	8005a3a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005a0e:	e014      	b.n	8005a3a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8005a16:	e010      	b.n	8005a3a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8005a1e:	e00c      	b.n	8005a3a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8005a26:	e008      	b.n	8005a3a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005a2e:	e004      	b.n	8005a3a <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	75fb      	strb	r3, [r7, #23]
      break;
 8005a34:	e001      	b.n	8005a3a <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	371c      	adds	r7, #28
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b40      	cmp	r3, #64	; 0x40
 8005a94:	d108      	bne.n	8005aa8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005aa6:	e007      	b.n	8005ab8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	60da      	str	r2, [r3, #12]
}
 8005ab8:	bf00      	nop
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	3b10      	subs	r3, #16
 8005ad4:	4a14      	ldr	r2, [pc, #80]	; (8005b28 <DMA_CalcBaseAndBitshift+0x64>)
 8005ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ada:	091b      	lsrs	r3, r3, #4
 8005adc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ade:	4a13      	ldr	r2, [pc, #76]	; (8005b2c <DMA_CalcBaseAndBitshift+0x68>)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d909      	bls.n	8005b06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005afa:	f023 0303 	bic.w	r3, r3, #3
 8005afe:	1d1a      	adds	r2, r3, #4
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	659a      	str	r2, [r3, #88]	; 0x58
 8005b04:	e007      	b.n	8005b16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b0e:	f023 0303 	bic.w	r3, r3, #3
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	aaaaaaab 	.word	0xaaaaaaab
 8005b2c:	08019a28 	.word	0x08019a28

08005b30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d11f      	bne.n	8005b8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d856      	bhi.n	8005bfe <DMA_CheckFifoParam+0xce>
 8005b50:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <DMA_CheckFifoParam+0x28>)
 8005b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b56:	bf00      	nop
 8005b58:	08005b69 	.word	0x08005b69
 8005b5c:	08005b7b 	.word	0x08005b7b
 8005b60:	08005b69 	.word	0x08005b69
 8005b64:	08005bff 	.word	0x08005bff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d046      	beq.n	8005c02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b78:	e043      	b.n	8005c02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b82:	d140      	bne.n	8005c06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b88:	e03d      	b.n	8005c06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b92:	d121      	bne.n	8005bd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d837      	bhi.n	8005c0a <DMA_CheckFifoParam+0xda>
 8005b9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <DMA_CheckFifoParam+0x70>)
 8005b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba0:	08005bb1 	.word	0x08005bb1
 8005ba4:	08005bb7 	.word	0x08005bb7
 8005ba8:	08005bb1 	.word	0x08005bb1
 8005bac:	08005bc9 	.word	0x08005bc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb4:	e030      	b.n	8005c18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d025      	beq.n	8005c0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bc6:	e022      	b.n	8005c0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bcc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bd0:	d11f      	bne.n	8005c12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005bd6:	e01c      	b.n	8005c12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d903      	bls.n	8005be6 <DMA_CheckFifoParam+0xb6>
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d003      	beq.n	8005bec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005be4:	e018      	b.n	8005c18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	73fb      	strb	r3, [r7, #15]
      break;
 8005bea:	e015      	b.n	8005c18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00e      	beq.n	8005c16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005bfc:	e00b      	b.n	8005c16 <DMA_CheckFifoParam+0xe6>
      break;
 8005bfe:	bf00      	nop
 8005c00:	e00a      	b.n	8005c18 <DMA_CheckFifoParam+0xe8>
      break;
 8005c02:	bf00      	nop
 8005c04:	e008      	b.n	8005c18 <DMA_CheckFifoParam+0xe8>
      break;
 8005c06:	bf00      	nop
 8005c08:	e006      	b.n	8005c18 <DMA_CheckFifoParam+0xe8>
      break;
 8005c0a:	bf00      	nop
 8005c0c:	e004      	b.n	8005c18 <DMA_CheckFifoParam+0xe8>
      break;
 8005c0e:	bf00      	nop
 8005c10:	e002      	b.n	8005c18 <DMA_CheckFifoParam+0xe8>
      break;   
 8005c12:	bf00      	nop
 8005c14:	e000      	b.n	8005c18 <DMA_CheckFifoParam+0xe8>
      break;
 8005c16:	bf00      	nop
    }
  } 
  
  return status; 
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop

08005c28 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	2b80      	cmp	r3, #128	; 0x80
 8005c40:	d106      	bne.n	8005c50 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f001 b911 	b.w	8006e72 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d007      	beq.n	8005c68 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d105      	bne.n	8005c74 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2240      	movs	r2, #64	; 0x40
 8005c6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	f001 b8ff 	b.w	8006e72 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d102      	bne.n	8005c84 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	f001 b8f7 	b.w	8006e72 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	f041 80e5 	bne.w	8006e64 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005cb6:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	68b9      	ldr	r1, [r7, #8]
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f001 f910 	bl	8006eec <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	4b8d      	ldr	r3, [pc, #564]	; (8005f08 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d960      	bls.n	8005d9a <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a8b      	ldr	r2, [pc, #556]	; (8005f0c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d057      	beq.n	8005d92 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a8a      	ldr	r2, [pc, #552]	; (8005f10 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d050      	beq.n	8005d8e <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a88      	ldr	r2, [pc, #544]	; (8005f14 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d049      	beq.n	8005d8a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a87      	ldr	r2, [pc, #540]	; (8005f18 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d042      	beq.n	8005d86 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a85      	ldr	r2, [pc, #532]	; (8005f1c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d03a      	beq.n	8005d80 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a84      	ldr	r2, [pc, #528]	; (8005f20 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d032      	beq.n	8005d7a <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a82      	ldr	r2, [pc, #520]	; (8005f24 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d02a      	beq.n	8005d74 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a81      	ldr	r2, [pc, #516]	; (8005f28 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d022      	beq.n	8005d6e <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a7f      	ldr	r2, [pc, #508]	; (8005f2c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d01a      	beq.n	8005d68 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a7e      	ldr	r2, [pc, #504]	; (8005f30 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d012      	beq.n	8005d62 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a7c      	ldr	r2, [pc, #496]	; (8005f34 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00a      	beq.n	8005d5c <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a7b      	ldr	r2, [pc, #492]	; (8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d102      	bne.n	8005d56 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8005d50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d54:	e01e      	b.n	8005d94 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005d56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d5a:	e01b      	b.n	8005d94 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005d5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d60:	e018      	b.n	8005d94 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005d62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d66:	e015      	b.n	8005d94 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005d68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d6c:	e012      	b.n	8005d94 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005d6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d72:	e00f      	b.n	8005d94 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005d74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d78:	e00c      	b.n	8005d94 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005d7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d7e:	e009      	b.n	8005d94 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005d80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d84:	e006      	b.n	8005d94 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005d86:	2320      	movs	r3, #32
 8005d88:	e004      	b.n	8005d94 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005d8a:	2320      	movs	r3, #32
 8005d8c:	e002      	b.n	8005d94 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005d8e:	2320      	movs	r3, #32
 8005d90:	e000      	b.n	8005d94 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8005d92:	2320      	movs	r3, #32
 8005d94:	4a69      	ldr	r2, [pc, #420]	; (8005f3c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8005d96:	60d3      	str	r3, [r2, #12]
 8005d98:	e14f      	b.n	800603a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	4b67      	ldr	r3, [pc, #412]	; (8005f40 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d960      	bls.n	8005e68 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a58      	ldr	r2, [pc, #352]	; (8005f0c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d057      	beq.n	8005e60 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a56      	ldr	r2, [pc, #344]	; (8005f10 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d050      	beq.n	8005e5c <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a55      	ldr	r2, [pc, #340]	; (8005f14 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d049      	beq.n	8005e58 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a53      	ldr	r2, [pc, #332]	; (8005f18 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d042      	beq.n	8005e54 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a52      	ldr	r2, [pc, #328]	; (8005f1c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d03a      	beq.n	8005e4e <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a50      	ldr	r2, [pc, #320]	; (8005f20 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d032      	beq.n	8005e48 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a4f      	ldr	r2, [pc, #316]	; (8005f24 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d02a      	beq.n	8005e42 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a4d      	ldr	r2, [pc, #308]	; (8005f28 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d022      	beq.n	8005e3c <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a4c      	ldr	r2, [pc, #304]	; (8005f2c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d01a      	beq.n	8005e36 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a4a      	ldr	r2, [pc, #296]	; (8005f30 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d012      	beq.n	8005e30 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a49      	ldr	r2, [pc, #292]	; (8005f34 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00a      	beq.n	8005e2a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a47      	ldr	r2, [pc, #284]	; (8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d102      	bne.n	8005e24 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8005e1e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e22:	e01e      	b.n	8005e62 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005e24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e28:	e01b      	b.n	8005e62 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005e2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e2e:	e018      	b.n	8005e62 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005e30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e34:	e015      	b.n	8005e62 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005e36:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e3a:	e012      	b.n	8005e62 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005e3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e40:	e00f      	b.n	8005e62 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005e42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e46:	e00c      	b.n	8005e62 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005e48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e4c:	e009      	b.n	8005e62 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005e4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e52:	e006      	b.n	8005e62 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005e54:	2320      	movs	r3, #32
 8005e56:	e004      	b.n	8005e62 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005e58:	2320      	movs	r3, #32
 8005e5a:	e002      	b.n	8005e62 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005e5c:	2320      	movs	r3, #32
 8005e5e:	e000      	b.n	8005e62 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8005e60:	2320      	movs	r3, #32
 8005e62:	4a36      	ldr	r2, [pc, #216]	; (8005f3c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8005e64:	6093      	str	r3, [r2, #8]
 8005e66:	e0e8      	b.n	800603a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	4b35      	ldr	r3, [pc, #212]	; (8005f44 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8005e70:	429a      	cmp	r2, r3
 8005e72:	f240 8082 	bls.w	8005f7a <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a24      	ldr	r2, [pc, #144]	; (8005f0c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d078      	beq.n	8005f72 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a22      	ldr	r2, [pc, #136]	; (8005f10 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d071      	beq.n	8005f6e <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a21      	ldr	r2, [pc, #132]	; (8005f14 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d06a      	beq.n	8005f6a <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1f      	ldr	r2, [pc, #124]	; (8005f18 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d063      	beq.n	8005f66 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a1e      	ldr	r2, [pc, #120]	; (8005f1c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d05b      	beq.n	8005f60 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a1c      	ldr	r2, [pc, #112]	; (8005f20 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d053      	beq.n	8005f5a <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a1b      	ldr	r2, [pc, #108]	; (8005f24 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d04b      	beq.n	8005f54 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a19      	ldr	r2, [pc, #100]	; (8005f28 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d043      	beq.n	8005f4e <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a18      	ldr	r2, [pc, #96]	; (8005f2c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d03b      	beq.n	8005f48 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a16      	ldr	r2, [pc, #88]	; (8005f30 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d012      	beq.n	8005f00 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a15      	ldr	r2, [pc, #84]	; (8005f34 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00a      	beq.n	8005efa <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a13      	ldr	r2, [pc, #76]	; (8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d102      	bne.n	8005ef4 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8005eee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ef2:	e03f      	b.n	8005f74 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8005ef4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ef8:	e03c      	b.n	8005f74 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8005efa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005efe:	e039      	b.n	8005f74 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8005f00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005f04:	e036      	b.n	8005f74 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8005f06:	bf00      	nop
 8005f08:	40026458 	.word	0x40026458
 8005f0c:	40026010 	.word	0x40026010
 8005f10:	40026410 	.word	0x40026410
 8005f14:	40026070 	.word	0x40026070
 8005f18:	40026470 	.word	0x40026470
 8005f1c:	40026028 	.word	0x40026028
 8005f20:	40026428 	.word	0x40026428
 8005f24:	40026088 	.word	0x40026088
 8005f28:	40026488 	.word	0x40026488
 8005f2c:	40026040 	.word	0x40026040
 8005f30:	40026440 	.word	0x40026440
 8005f34:	400260a0 	.word	0x400260a0
 8005f38:	400264a0 	.word	0x400264a0
 8005f3c:	40026400 	.word	0x40026400
 8005f40:	400260b8 	.word	0x400260b8
 8005f44:	40026058 	.word	0x40026058
 8005f48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005f4c:	e012      	b.n	8005f74 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8005f4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f52:	e00f      	b.n	8005f74 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8005f54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f58:	e00c      	b.n	8005f74 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8005f5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f5e:	e009      	b.n	8005f74 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8005f60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f64:	e006      	b.n	8005f74 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8005f66:	2320      	movs	r3, #32
 8005f68:	e004      	b.n	8005f74 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8005f6a:	2320      	movs	r3, #32
 8005f6c:	e002      	b.n	8005f74 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8005f6e:	2320      	movs	r3, #32
 8005f70:	e000      	b.n	8005f74 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8005f72:	2320      	movs	r3, #32
 8005f74:	4a8c      	ldr	r2, [pc, #560]	; (80061a8 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8005f76:	60d3      	str	r3, [r2, #12]
 8005f78:	e05f      	b.n	800603a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a8b      	ldr	r2, [pc, #556]	; (80061ac <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d057      	beq.n	8006034 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a89      	ldr	r2, [pc, #548]	; (80061b0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d050      	beq.n	8006030 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a88      	ldr	r2, [pc, #544]	; (80061b4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d049      	beq.n	800602c <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a86      	ldr	r2, [pc, #536]	; (80061b8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d042      	beq.n	8006028 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a85      	ldr	r2, [pc, #532]	; (80061bc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d03a      	beq.n	8006022 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a83      	ldr	r2, [pc, #524]	; (80061c0 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d032      	beq.n	800601c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a82      	ldr	r2, [pc, #520]	; (80061c4 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d02a      	beq.n	8006016 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a80      	ldr	r2, [pc, #512]	; (80061c8 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d022      	beq.n	8006010 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a7f      	ldr	r2, [pc, #508]	; (80061cc <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d01a      	beq.n	800600a <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a7d      	ldr	r2, [pc, #500]	; (80061d0 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d012      	beq.n	8006004 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a7c      	ldr	r2, [pc, #496]	; (80061d4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00a      	beq.n	8005ffe <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a7a      	ldr	r2, [pc, #488]	; (80061d8 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d102      	bne.n	8005ff8 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8005ff2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ff6:	e01e      	b.n	8006036 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8005ff8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ffc:	e01b      	b.n	8006036 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8005ffe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006002:	e018      	b.n	8006036 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8006004:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006008:	e015      	b.n	8006036 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800600a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800600e:	e012      	b.n	8006036 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8006010:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006014:	e00f      	b.n	8006036 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8006016:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800601a:	e00c      	b.n	8006036 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800601c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006020:	e009      	b.n	8006036 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8006022:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006026:	e006      	b.n	8006036 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8006028:	2320      	movs	r3, #32
 800602a:	e004      	b.n	8006036 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800602c:	2320      	movs	r3, #32
 800602e:	e002      	b.n	8006036 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8006030:	2320      	movs	r3, #32
 8006032:	e000      	b.n	8006036 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8006034:	2320      	movs	r3, #32
 8006036:	4a5c      	ldr	r2, [pc, #368]	; (80061a8 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8006038:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	4b66      	ldr	r3, [pc, #408]	; (80061dc <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8006042:	429a      	cmp	r2, r3
 8006044:	d960      	bls.n	8006108 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a58      	ldr	r2, [pc, #352]	; (80061ac <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d057      	beq.n	8006100 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a56      	ldr	r2, [pc, #344]	; (80061b0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d050      	beq.n	80060fc <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a55      	ldr	r2, [pc, #340]	; (80061b4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d049      	beq.n	80060f8 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a53      	ldr	r2, [pc, #332]	; (80061b8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d042      	beq.n	80060f4 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a52      	ldr	r2, [pc, #328]	; (80061bc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d03a      	beq.n	80060ee <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a50      	ldr	r2, [pc, #320]	; (80061c0 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d032      	beq.n	80060e8 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a4f      	ldr	r2, [pc, #316]	; (80061c4 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d02a      	beq.n	80060e2 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a4d      	ldr	r2, [pc, #308]	; (80061c8 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d022      	beq.n	80060dc <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a4c      	ldr	r2, [pc, #304]	; (80061cc <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d01a      	beq.n	80060d6 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a4a      	ldr	r2, [pc, #296]	; (80061d0 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d012      	beq.n	80060d0 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a49      	ldr	r2, [pc, #292]	; (80061d4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00a      	beq.n	80060ca <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a47      	ldr	r2, [pc, #284]	; (80061d8 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d102      	bne.n	80060c4 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 80060be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80060c2:	e01e      	b.n	8006102 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80060c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80060c8:	e01b      	b.n	8006102 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80060ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80060ce:	e018      	b.n	8006102 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80060d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80060d4:	e015      	b.n	8006102 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80060d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80060da:	e012      	b.n	8006102 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80060dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060e0:	e00f      	b.n	8006102 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80060e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060e6:	e00c      	b.n	8006102 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80060e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060ec:	e009      	b.n	8006102 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80060ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060f2:	e006      	b.n	8006102 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80060f4:	2310      	movs	r3, #16
 80060f6:	e004      	b.n	8006102 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80060f8:	2310      	movs	r3, #16
 80060fa:	e002      	b.n	8006102 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80060fc:	2310      	movs	r3, #16
 80060fe:	e000      	b.n	8006102 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8006100:	2310      	movs	r3, #16
 8006102:	4a37      	ldr	r2, [pc, #220]	; (80061e0 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8006104:	60d3      	str	r3, [r2, #12]
 8006106:	e14f      	b.n	80063a8 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	4b35      	ldr	r3, [pc, #212]	; (80061e4 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8006110:	429a      	cmp	r2, r3
 8006112:	f240 8082 	bls.w	800621a <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a24      	ldr	r2, [pc, #144]	; (80061ac <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d078      	beq.n	8006212 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a22      	ldr	r2, [pc, #136]	; (80061b0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d071      	beq.n	800620e <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a21      	ldr	r2, [pc, #132]	; (80061b4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d06a      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a1f      	ldr	r2, [pc, #124]	; (80061b8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d063      	beq.n	8006206 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a1e      	ldr	r2, [pc, #120]	; (80061bc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d05b      	beq.n	8006200 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a1c      	ldr	r2, [pc, #112]	; (80061c0 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d053      	beq.n	80061fa <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a1b      	ldr	r2, [pc, #108]	; (80061c4 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d04b      	beq.n	80061f4 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a19      	ldr	r2, [pc, #100]	; (80061c8 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d043      	beq.n	80061ee <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a18      	ldr	r2, [pc, #96]	; (80061cc <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d03b      	beq.n	80061e8 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a16      	ldr	r2, [pc, #88]	; (80061d0 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d012      	beq.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a15      	ldr	r2, [pc, #84]	; (80061d4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00a      	beq.n	800619a <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a13      	ldr	r2, [pc, #76]	; (80061d8 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d102      	bne.n	8006194 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 800618e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006192:	e03f      	b.n	8006214 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8006194:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006198:	e03c      	b.n	8006214 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800619a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800619e:	e039      	b.n	8006214 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80061a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80061a4:	e036      	b.n	8006214 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80061a6:	bf00      	nop
 80061a8:	40026000 	.word	0x40026000
 80061ac:	40026010 	.word	0x40026010
 80061b0:	40026410 	.word	0x40026410
 80061b4:	40026070 	.word	0x40026070
 80061b8:	40026470 	.word	0x40026470
 80061bc:	40026028 	.word	0x40026028
 80061c0:	40026428 	.word	0x40026428
 80061c4:	40026088 	.word	0x40026088
 80061c8:	40026488 	.word	0x40026488
 80061cc:	40026040 	.word	0x40026040
 80061d0:	40026440 	.word	0x40026440
 80061d4:	400260a0 	.word	0x400260a0
 80061d8:	400264a0 	.word	0x400264a0
 80061dc:	40026458 	.word	0x40026458
 80061e0:	40026400 	.word	0x40026400
 80061e4:	400260b8 	.word	0x400260b8
 80061e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80061ec:	e012      	b.n	8006214 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80061ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061f2:	e00f      	b.n	8006214 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80061f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061f8:	e00c      	b.n	8006214 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80061fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061fe:	e009      	b.n	8006214 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8006200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006204:	e006      	b.n	8006214 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8006206:	2310      	movs	r3, #16
 8006208:	e004      	b.n	8006214 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800620a:	2310      	movs	r3, #16
 800620c:	e002      	b.n	8006214 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800620e:	2310      	movs	r3, #16
 8006210:	e000      	b.n	8006214 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8006212:	2310      	movs	r3, #16
 8006214:	4a8c      	ldr	r2, [pc, #560]	; (8006448 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8006216:	6093      	str	r3, [r2, #8]
 8006218:	e0c6      	b.n	80063a8 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	461a      	mov	r2, r3
 8006220:	4b8a      	ldr	r3, [pc, #552]	; (800644c <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8006222:	429a      	cmp	r2, r3
 8006224:	d960      	bls.n	80062e8 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a89      	ldr	r2, [pc, #548]	; (8006450 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d057      	beq.n	80062e0 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a87      	ldr	r2, [pc, #540]	; (8006454 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d050      	beq.n	80062dc <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a86      	ldr	r2, [pc, #536]	; (8006458 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d049      	beq.n	80062d8 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a84      	ldr	r2, [pc, #528]	; (800645c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d042      	beq.n	80062d4 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a83      	ldr	r2, [pc, #524]	; (8006460 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d03a      	beq.n	80062ce <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a81      	ldr	r2, [pc, #516]	; (8006464 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d032      	beq.n	80062c8 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a80      	ldr	r2, [pc, #512]	; (8006468 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d02a      	beq.n	80062c2 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a7e      	ldr	r2, [pc, #504]	; (800646c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d022      	beq.n	80062bc <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a7d      	ldr	r2, [pc, #500]	; (8006470 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d01a      	beq.n	80062b6 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a7b      	ldr	r2, [pc, #492]	; (8006474 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d012      	beq.n	80062b0 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a7a      	ldr	r2, [pc, #488]	; (8006478 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00a      	beq.n	80062aa <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a78      	ldr	r2, [pc, #480]	; (800647c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d102      	bne.n	80062a4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 800629e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80062a2:	e01e      	b.n	80062e2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80062a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80062a8:	e01b      	b.n	80062e2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80062aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80062ae:	e018      	b.n	80062e2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80062b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80062b4:	e015      	b.n	80062e2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80062b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80062ba:	e012      	b.n	80062e2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80062bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062c0:	e00f      	b.n	80062e2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80062c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062c6:	e00c      	b.n	80062e2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80062c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062cc:	e009      	b.n	80062e2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80062ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062d2:	e006      	b.n	80062e2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80062d4:	2310      	movs	r3, #16
 80062d6:	e004      	b.n	80062e2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80062d8:	2310      	movs	r3, #16
 80062da:	e002      	b.n	80062e2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80062dc:	2310      	movs	r3, #16
 80062de:	e000      	b.n	80062e2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80062e0:	2310      	movs	r3, #16
 80062e2:	4a67      	ldr	r2, [pc, #412]	; (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80062e4:	60d3      	str	r3, [r2, #12]
 80062e6:	e05f      	b.n	80063a8 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a58      	ldr	r2, [pc, #352]	; (8006450 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d057      	beq.n	80063a2 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a57      	ldr	r2, [pc, #348]	; (8006454 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d050      	beq.n	800639e <HAL_DMAEx_MultiBufferStart_IT+0x776>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a55      	ldr	r2, [pc, #340]	; (8006458 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d049      	beq.n	800639a <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a54      	ldr	r2, [pc, #336]	; (800645c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d042      	beq.n	8006396 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a52      	ldr	r2, [pc, #328]	; (8006460 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d03a      	beq.n	8006390 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a51      	ldr	r2, [pc, #324]	; (8006464 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d032      	beq.n	800638a <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a4f      	ldr	r2, [pc, #316]	; (8006468 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d02a      	beq.n	8006384 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a4e      	ldr	r2, [pc, #312]	; (800646c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d022      	beq.n	800637e <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a4c      	ldr	r2, [pc, #304]	; (8006470 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d01a      	beq.n	8006378 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a4b      	ldr	r2, [pc, #300]	; (8006474 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d012      	beq.n	8006372 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a49      	ldr	r2, [pc, #292]	; (8006478 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00a      	beq.n	800636c <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a48      	ldr	r2, [pc, #288]	; (800647c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d102      	bne.n	8006366 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8006360:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006364:	e01e      	b.n	80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8006366:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800636a:	e01b      	b.n	80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800636c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006370:	e018      	b.n	80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8006372:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006376:	e015      	b.n	80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8006378:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800637c:	e012      	b.n	80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800637e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006382:	e00f      	b.n	80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8006384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006388:	e00c      	b.n	80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800638a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800638e:	e009      	b.n	80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8006390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006394:	e006      	b.n	80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8006396:	2310      	movs	r3, #16
 8006398:	e004      	b.n	80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800639a:	2310      	movs	r3, #16
 800639c:	e002      	b.n	80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800639e:	2310      	movs	r3, #16
 80063a0:	e000      	b.n	80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80063a2:	2310      	movs	r3, #16
 80063a4:	4a36      	ldr	r2, [pc, #216]	; (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80063a6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	4b35      	ldr	r3, [pc, #212]	; (8006484 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80063b0:	429a      	cmp	r2, r3
 80063b2:	f240 8082 	bls.w	80064ba <HAL_DMAEx_MultiBufferStart_IT+0x892>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a25      	ldr	r2, [pc, #148]	; (8006450 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d078      	beq.n	80064b2 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a23      	ldr	r2, [pc, #140]	; (8006454 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d071      	beq.n	80064ae <HAL_DMAEx_MultiBufferStart_IT+0x886>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a22      	ldr	r2, [pc, #136]	; (8006458 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d06a      	beq.n	80064aa <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a20      	ldr	r2, [pc, #128]	; (800645c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d063      	beq.n	80064a6 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a1f      	ldr	r2, [pc, #124]	; (8006460 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d05b      	beq.n	80064a0 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a1d      	ldr	r2, [pc, #116]	; (8006464 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d053      	beq.n	800649a <HAL_DMAEx_MultiBufferStart_IT+0x872>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a1c      	ldr	r2, [pc, #112]	; (8006468 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d04b      	beq.n	8006494 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a1a      	ldr	r2, [pc, #104]	; (800646c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d043      	beq.n	800648e <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a19      	ldr	r2, [pc, #100]	; (8006470 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d03b      	beq.n	8006488 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a17      	ldr	r2, [pc, #92]	; (8006474 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d012      	beq.n	8006440 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a16      	ldr	r2, [pc, #88]	; (8006478 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d00a      	beq.n	800643a <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a14      	ldr	r2, [pc, #80]	; (800647c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d102      	bne.n	8006434 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 800642e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006432:	e03f      	b.n	80064b4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8006434:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006438:	e03c      	b.n	80064b4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800643a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800643e:	e039      	b.n	80064b4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8006440:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006444:	e036      	b.n	80064b4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8006446:	bf00      	nop
 8006448:	40026400 	.word	0x40026400
 800644c:	40026058 	.word	0x40026058
 8006450:	40026010 	.word	0x40026010
 8006454:	40026410 	.word	0x40026410
 8006458:	40026070 	.word	0x40026070
 800645c:	40026470 	.word	0x40026470
 8006460:	40026028 	.word	0x40026028
 8006464:	40026428 	.word	0x40026428
 8006468:	40026088 	.word	0x40026088
 800646c:	40026488 	.word	0x40026488
 8006470:	40026040 	.word	0x40026040
 8006474:	40026440 	.word	0x40026440
 8006478:	400260a0 	.word	0x400260a0
 800647c:	400264a0 	.word	0x400264a0
 8006480:	40026000 	.word	0x40026000
 8006484:	40026458 	.word	0x40026458
 8006488:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800648c:	e012      	b.n	80064b4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800648e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006492:	e00f      	b.n	80064b4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8006494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006498:	e00c      	b.n	80064b4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800649a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800649e:	e009      	b.n	80064b4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80064a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064a4:	e006      	b.n	80064b4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80064a6:	2308      	movs	r3, #8
 80064a8:	e004      	b.n	80064b4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80064aa:	2308      	movs	r3, #8
 80064ac:	e002      	b.n	80064b4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80064ae:	2308      	movs	r3, #8
 80064b0:	e000      	b.n	80064b4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80064b2:	2308      	movs	r3, #8
 80064b4:	4a8c      	ldr	r2, [pc, #560]	; (80066e8 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80064b6:	60d3      	str	r3, [r2, #12]
 80064b8:	e14e      	b.n	8006758 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	4b8a      	ldr	r3, [pc, #552]	; (80066ec <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d960      	bls.n	8006588 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a89      	ldr	r2, [pc, #548]	; (80066f0 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d057      	beq.n	8006580 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a87      	ldr	r2, [pc, #540]	; (80066f4 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d050      	beq.n	800657c <HAL_DMAEx_MultiBufferStart_IT+0x954>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a86      	ldr	r2, [pc, #536]	; (80066f8 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d049      	beq.n	8006578 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a84      	ldr	r2, [pc, #528]	; (80066fc <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d042      	beq.n	8006574 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a83      	ldr	r2, [pc, #524]	; (8006700 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d03a      	beq.n	800656e <HAL_DMAEx_MultiBufferStart_IT+0x946>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a81      	ldr	r2, [pc, #516]	; (8006704 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d032      	beq.n	8006568 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a80      	ldr	r2, [pc, #512]	; (8006708 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d02a      	beq.n	8006562 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a7e      	ldr	r2, [pc, #504]	; (800670c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d022      	beq.n	800655c <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a7d      	ldr	r2, [pc, #500]	; (8006710 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d01a      	beq.n	8006556 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a7b      	ldr	r2, [pc, #492]	; (8006714 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d012      	beq.n	8006550 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a7a      	ldr	r2, [pc, #488]	; (8006718 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00a      	beq.n	800654a <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a78      	ldr	r2, [pc, #480]	; (800671c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d102      	bne.n	8006544 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 800653e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006542:	e01e      	b.n	8006582 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8006544:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006548:	e01b      	b.n	8006582 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800654a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800654e:	e018      	b.n	8006582 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8006550:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006554:	e015      	b.n	8006582 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8006556:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800655a:	e012      	b.n	8006582 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800655c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006560:	e00f      	b.n	8006582 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8006562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006566:	e00c      	b.n	8006582 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8006568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800656c:	e009      	b.n	8006582 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800656e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006572:	e006      	b.n	8006582 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8006574:	2308      	movs	r3, #8
 8006576:	e004      	b.n	8006582 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8006578:	2308      	movs	r3, #8
 800657a:	e002      	b.n	8006582 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800657c:	2308      	movs	r3, #8
 800657e:	e000      	b.n	8006582 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8006580:	2308      	movs	r3, #8
 8006582:	4a59      	ldr	r2, [pc, #356]	; (80066e8 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8006584:	6093      	str	r3, [r2, #8]
 8006586:	e0e7      	b.n	8006758 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	461a      	mov	r2, r3
 800658e:	4b64      	ldr	r3, [pc, #400]	; (8006720 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8006590:	429a      	cmp	r2, r3
 8006592:	d960      	bls.n	8006656 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a55      	ldr	r2, [pc, #340]	; (80066f0 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d057      	beq.n	800664e <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a54      	ldr	r2, [pc, #336]	; (80066f4 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d050      	beq.n	800664a <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a52      	ldr	r2, [pc, #328]	; (80066f8 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d049      	beq.n	8006646 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a51      	ldr	r2, [pc, #324]	; (80066fc <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d042      	beq.n	8006642 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a4f      	ldr	r2, [pc, #316]	; (8006700 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d03a      	beq.n	800663c <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a4e      	ldr	r2, [pc, #312]	; (8006704 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d032      	beq.n	8006636 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a4c      	ldr	r2, [pc, #304]	; (8006708 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d02a      	beq.n	8006630 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a4b      	ldr	r2, [pc, #300]	; (800670c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d022      	beq.n	800662a <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a49      	ldr	r2, [pc, #292]	; (8006710 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d01a      	beq.n	8006624 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a48      	ldr	r2, [pc, #288]	; (8006714 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d012      	beq.n	800661e <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a46      	ldr	r2, [pc, #280]	; (8006718 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00a      	beq.n	8006618 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a45      	ldr	r2, [pc, #276]	; (800671c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d102      	bne.n	8006612 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 800660c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006610:	e01e      	b.n	8006650 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006612:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006616:	e01b      	b.n	8006650 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006618:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800661c:	e018      	b.n	8006650 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800661e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006622:	e015      	b.n	8006650 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006624:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006628:	e012      	b.n	8006650 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800662a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800662e:	e00f      	b.n	8006650 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006634:	e00c      	b.n	8006650 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800663a:	e009      	b.n	8006650 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800663c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006640:	e006      	b.n	8006650 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006642:	2308      	movs	r3, #8
 8006644:	e004      	b.n	8006650 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8006646:	2308      	movs	r3, #8
 8006648:	e002      	b.n	8006650 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800664a:	2308      	movs	r3, #8
 800664c:	e000      	b.n	8006650 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800664e:	2308      	movs	r3, #8
 8006650:	4a34      	ldr	r2, [pc, #208]	; (8006724 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8006652:	60d3      	str	r3, [r2, #12]
 8006654:	e080      	b.n	8006758 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a25      	ldr	r2, [pc, #148]	; (80066f0 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d078      	beq.n	8006752 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a23      	ldr	r2, [pc, #140]	; (80066f4 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d071      	beq.n	800674e <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a22      	ldr	r2, [pc, #136]	; (80066f8 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d06a      	beq.n	800674a <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a20      	ldr	r2, [pc, #128]	; (80066fc <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d063      	beq.n	8006746 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a1f      	ldr	r2, [pc, #124]	; (8006700 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d05b      	beq.n	8006740 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1d      	ldr	r2, [pc, #116]	; (8006704 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d053      	beq.n	800673a <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a1c      	ldr	r2, [pc, #112]	; (8006708 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d04b      	beq.n	8006734 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a1a      	ldr	r2, [pc, #104]	; (800670c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d043      	beq.n	800672e <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a19      	ldr	r2, [pc, #100]	; (8006710 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d03b      	beq.n	8006728 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a17      	ldr	r2, [pc, #92]	; (8006714 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d012      	beq.n	80066e0 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a16      	ldr	r2, [pc, #88]	; (8006718 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00a      	beq.n	80066da <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a14      	ldr	r2, [pc, #80]	; (800671c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d102      	bne.n	80066d4 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 80066ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80066d2:	e03f      	b.n	8006754 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80066d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066d8:	e03c      	b.n	8006754 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80066da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80066de:	e039      	b.n	8006754 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80066e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80066e4:	e036      	b.n	8006754 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80066e6:	bf00      	nop
 80066e8:	40026400 	.word	0x40026400
 80066ec:	400260b8 	.word	0x400260b8
 80066f0:	40026010 	.word	0x40026010
 80066f4:	40026410 	.word	0x40026410
 80066f8:	40026070 	.word	0x40026070
 80066fc:	40026470 	.word	0x40026470
 8006700:	40026028 	.word	0x40026028
 8006704:	40026428 	.word	0x40026428
 8006708:	40026088 	.word	0x40026088
 800670c:	40026488 	.word	0x40026488
 8006710:	40026040 	.word	0x40026040
 8006714:	40026440 	.word	0x40026440
 8006718:	400260a0 	.word	0x400260a0
 800671c:	400264a0 	.word	0x400264a0
 8006720:	40026058 	.word	0x40026058
 8006724:	40026000 	.word	0x40026000
 8006728:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800672c:	e012      	b.n	8006754 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800672e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006732:	e00f      	b.n	8006754 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8006734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006738:	e00c      	b.n	8006754 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800673a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800673e:	e009      	b.n	8006754 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8006740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006744:	e006      	b.n	8006754 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8006746:	2308      	movs	r3, #8
 8006748:	e004      	b.n	8006754 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800674a:	2308      	movs	r3, #8
 800674c:	e002      	b.n	8006754 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800674e:	2308      	movs	r3, #8
 8006750:	e000      	b.n	8006754 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8006752:	2308      	movs	r3, #8
 8006754:	4a8a      	ldr	r2, [pc, #552]	; (8006980 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8006756:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	4b89      	ldr	r3, [pc, #548]	; (8006984 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8006760:	429a      	cmp	r2, r3
 8006762:	d960      	bls.n	8006826 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a87      	ldr	r2, [pc, #540]	; (8006988 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d057      	beq.n	800681e <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a86      	ldr	r2, [pc, #536]	; (800698c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d050      	beq.n	800681a <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a84      	ldr	r2, [pc, #528]	; (8006990 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d049      	beq.n	8006816 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a83      	ldr	r2, [pc, #524]	; (8006994 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d042      	beq.n	8006812 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a81      	ldr	r2, [pc, #516]	; (8006998 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d03a      	beq.n	800680c <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a80      	ldr	r2, [pc, #512]	; (800699c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d032      	beq.n	8006806 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a7e      	ldr	r2, [pc, #504]	; (80069a0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d02a      	beq.n	8006800 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a7d      	ldr	r2, [pc, #500]	; (80069a4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d022      	beq.n	80067fa <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a7b      	ldr	r2, [pc, #492]	; (80069a8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d01a      	beq.n	80067f4 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a7a      	ldr	r2, [pc, #488]	; (80069ac <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d012      	beq.n	80067ee <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a78      	ldr	r2, [pc, #480]	; (80069b0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00a      	beq.n	80067e8 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a77      	ldr	r2, [pc, #476]	; (80069b4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d102      	bne.n	80067e2 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 80067dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80067e0:	e01e      	b.n	8006820 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80067e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067e6:	e01b      	b.n	8006820 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80067e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80067ec:	e018      	b.n	8006820 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80067ee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80067f2:	e015      	b.n	8006820 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80067f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80067f8:	e012      	b.n	8006820 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80067fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067fe:	e00f      	b.n	8006820 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8006800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006804:	e00c      	b.n	8006820 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8006806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800680a:	e009      	b.n	8006820 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800680c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006810:	e006      	b.n	8006820 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8006812:	2304      	movs	r3, #4
 8006814:	e004      	b.n	8006820 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8006816:	2304      	movs	r3, #4
 8006818:	e002      	b.n	8006820 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800681a:	2304      	movs	r3, #4
 800681c:	e000      	b.n	8006820 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800681e:	2304      	movs	r3, #4
 8006820:	4a65      	ldr	r2, [pc, #404]	; (80069b8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8006822:	60d3      	str	r3, [r2, #12]
 8006824:	e150      	b.n	8006ac8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	4b63      	ldr	r3, [pc, #396]	; (80069bc <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 800682e:	429a      	cmp	r2, r3
 8006830:	d960      	bls.n	80068f4 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a54      	ldr	r2, [pc, #336]	; (8006988 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d057      	beq.n	80068ec <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a52      	ldr	r2, [pc, #328]	; (800698c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d050      	beq.n	80068e8 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a51      	ldr	r2, [pc, #324]	; (8006990 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d049      	beq.n	80068e4 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a4f      	ldr	r2, [pc, #316]	; (8006994 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d042      	beq.n	80068e0 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a4e      	ldr	r2, [pc, #312]	; (8006998 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d03a      	beq.n	80068da <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a4c      	ldr	r2, [pc, #304]	; (800699c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d032      	beq.n	80068d4 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a4b      	ldr	r2, [pc, #300]	; (80069a0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d02a      	beq.n	80068ce <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a49      	ldr	r2, [pc, #292]	; (80069a4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d022      	beq.n	80068c8 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a48      	ldr	r2, [pc, #288]	; (80069a8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d01a      	beq.n	80068c2 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a46      	ldr	r2, [pc, #280]	; (80069ac <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d012      	beq.n	80068bc <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a45      	ldr	r2, [pc, #276]	; (80069b0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00a      	beq.n	80068b6 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a43      	ldr	r2, [pc, #268]	; (80069b4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d102      	bne.n	80068b0 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 80068aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068ae:	e01e      	b.n	80068ee <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80068b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068b4:	e01b      	b.n	80068ee <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80068b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068ba:	e018      	b.n	80068ee <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80068bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068c0:	e015      	b.n	80068ee <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80068c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068c6:	e012      	b.n	80068ee <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80068c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068cc:	e00f      	b.n	80068ee <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80068ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068d2:	e00c      	b.n	80068ee <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80068d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068d8:	e009      	b.n	80068ee <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80068da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068de:	e006      	b.n	80068ee <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80068e0:	2304      	movs	r3, #4
 80068e2:	e004      	b.n	80068ee <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80068e4:	2304      	movs	r3, #4
 80068e6:	e002      	b.n	80068ee <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80068e8:	2304      	movs	r3, #4
 80068ea:	e000      	b.n	80068ee <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80068ec:	2304      	movs	r3, #4
 80068ee:	4a32      	ldr	r2, [pc, #200]	; (80069b8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 80068f0:	6093      	str	r3, [r2, #8]
 80068f2:	e0e9      	b.n	8006ac8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	461a      	mov	r2, r3
 80068fa:	4b31      	ldr	r3, [pc, #196]	; (80069c0 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80068fc:	429a      	cmp	r2, r3
 80068fe:	f240 8083 	bls.w	8006a08 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a20      	ldr	r2, [pc, #128]	; (8006988 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d079      	beq.n	8006a00 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a1e      	ldr	r2, [pc, #120]	; (800698c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d072      	beq.n	80069fc <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a1d      	ldr	r2, [pc, #116]	; (8006990 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d06b      	beq.n	80069f8 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a1b      	ldr	r2, [pc, #108]	; (8006994 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d064      	beq.n	80069f4 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a1a      	ldr	r2, [pc, #104]	; (8006998 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d05c      	beq.n	80069ee <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a18      	ldr	r2, [pc, #96]	; (800699c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d054      	beq.n	80069e8 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a17      	ldr	r2, [pc, #92]	; (80069a0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d04c      	beq.n	80069e2 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a15      	ldr	r2, [pc, #84]	; (80069a4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d044      	beq.n	80069dc <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a14      	ldr	r2, [pc, #80]	; (80069a8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d03c      	beq.n	80069d6 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a12      	ldr	r2, [pc, #72]	; (80069ac <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d034      	beq.n	80069d0 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a11      	ldr	r2, [pc, #68]	; (80069b0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d02c      	beq.n	80069ca <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a0f      	ldr	r2, [pc, #60]	; (80069b4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d124      	bne.n	80069c4 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 800697a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800697e:	e040      	b.n	8006a02 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8006980:	40026000 	.word	0x40026000
 8006984:	40026458 	.word	0x40026458
 8006988:	40026010 	.word	0x40026010
 800698c:	40026410 	.word	0x40026410
 8006990:	40026070 	.word	0x40026070
 8006994:	40026470 	.word	0x40026470
 8006998:	40026028 	.word	0x40026028
 800699c:	40026428 	.word	0x40026428
 80069a0:	40026088 	.word	0x40026088
 80069a4:	40026488 	.word	0x40026488
 80069a8:	40026040 	.word	0x40026040
 80069ac:	40026440 	.word	0x40026440
 80069b0:	400260a0 	.word	0x400260a0
 80069b4:	400264a0 	.word	0x400264a0
 80069b8:	40026400 	.word	0x40026400
 80069bc:	400260b8 	.word	0x400260b8
 80069c0:	40026058 	.word	0x40026058
 80069c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069c8:	e01b      	b.n	8006a02 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80069ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80069ce:	e018      	b.n	8006a02 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80069d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80069d4:	e015      	b.n	8006a02 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80069d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80069da:	e012      	b.n	8006a02 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80069dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069e0:	e00f      	b.n	8006a02 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80069e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069e6:	e00c      	b.n	8006a02 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80069e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069ec:	e009      	b.n	8006a02 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80069ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069f2:	e006      	b.n	8006a02 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80069f4:	2304      	movs	r3, #4
 80069f6:	e004      	b.n	8006a02 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80069f8:	2304      	movs	r3, #4
 80069fa:	e002      	b.n	8006a02 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80069fc:	2304      	movs	r3, #4
 80069fe:	e000      	b.n	8006a02 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8006a00:	2304      	movs	r3, #4
 8006a02:	4a8b      	ldr	r2, [pc, #556]	; (8006c30 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8006a04:	60d3      	str	r3, [r2, #12]
 8006a06:	e05f      	b.n	8006ac8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a89      	ldr	r2, [pc, #548]	; (8006c34 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d057      	beq.n	8006ac2 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a88      	ldr	r2, [pc, #544]	; (8006c38 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d050      	beq.n	8006abe <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a86      	ldr	r2, [pc, #536]	; (8006c3c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d049      	beq.n	8006aba <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a85      	ldr	r2, [pc, #532]	; (8006c40 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d042      	beq.n	8006ab6 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a83      	ldr	r2, [pc, #524]	; (8006c44 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d03a      	beq.n	8006ab0 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a82      	ldr	r2, [pc, #520]	; (8006c48 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d032      	beq.n	8006aaa <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a80      	ldr	r2, [pc, #512]	; (8006c4c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d02a      	beq.n	8006aa4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a7f      	ldr	r2, [pc, #508]	; (8006c50 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d022      	beq.n	8006a9e <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a7d      	ldr	r2, [pc, #500]	; (8006c54 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d01a      	beq.n	8006a98 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a7c      	ldr	r2, [pc, #496]	; (8006c58 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d012      	beq.n	8006a92 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a7a      	ldr	r2, [pc, #488]	; (8006c5c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d00a      	beq.n	8006a8c <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a79      	ldr	r2, [pc, #484]	; (8006c60 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d102      	bne.n	8006a86 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8006a80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006a84:	e01e      	b.n	8006ac4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006a86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a8a:	e01b      	b.n	8006ac4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006a8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006a90:	e018      	b.n	8006ac4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006a92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006a96:	e015      	b.n	8006ac4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006a98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006a9c:	e012      	b.n	8006ac4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006aa2:	e00f      	b.n	8006ac4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006aa8:	e00c      	b.n	8006ac4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006aae:	e009      	b.n	8006ac4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ab4:	e006      	b.n	8006ac4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006ab6:	2304      	movs	r3, #4
 8006ab8:	e004      	b.n	8006ac4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006aba:	2304      	movs	r3, #4
 8006abc:	e002      	b.n	8006ac4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006abe:	2304      	movs	r3, #4
 8006ac0:	e000      	b.n	8006ac4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8006ac2:	2304      	movs	r3, #4
 8006ac4:	4a5a      	ldr	r2, [pc, #360]	; (8006c30 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8006ac6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	461a      	mov	r2, r3
 8006ace:	4b65      	ldr	r3, [pc, #404]	; (8006c64 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d95c      	bls.n	8006b8e <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a56      	ldr	r2, [pc, #344]	; (8006c34 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d053      	beq.n	8006b86 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a55      	ldr	r2, [pc, #340]	; (8006c38 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d04c      	beq.n	8006b82 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a53      	ldr	r2, [pc, #332]	; (8006c3c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d045      	beq.n	8006b7e <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a52      	ldr	r2, [pc, #328]	; (8006c40 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d03e      	beq.n	8006b7a <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a50      	ldr	r2, [pc, #320]	; (8006c44 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d037      	beq.n	8006b76 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a4f      	ldr	r2, [pc, #316]	; (8006c48 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d030      	beq.n	8006b72 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a4d      	ldr	r2, [pc, #308]	; (8006c4c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d029      	beq.n	8006b6e <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a4c      	ldr	r2, [pc, #304]	; (8006c50 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d022      	beq.n	8006b6a <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a4a      	ldr	r2, [pc, #296]	; (8006c54 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d01a      	beq.n	8006b64 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a49      	ldr	r2, [pc, #292]	; (8006c58 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d012      	beq.n	8006b5e <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a47      	ldr	r2, [pc, #284]	; (8006c5c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00a      	beq.n	8006b58 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a46      	ldr	r2, [pc, #280]	; (8006c60 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d102      	bne.n	8006b52 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8006b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b50:	e01a      	b.n	8006b88 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006b52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006b56:	e017      	b.n	8006b88 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b5c:	e014      	b.n	8006b88 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006b5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b62:	e011      	b.n	8006b88 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006b64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b68:	e00e      	b.n	8006b88 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006b6a:	2340      	movs	r3, #64	; 0x40
 8006b6c:	e00c      	b.n	8006b88 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006b6e:	2340      	movs	r3, #64	; 0x40
 8006b70:	e00a      	b.n	8006b88 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006b72:	2340      	movs	r3, #64	; 0x40
 8006b74:	e008      	b.n	8006b88 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006b76:	2340      	movs	r3, #64	; 0x40
 8006b78:	e006      	b.n	8006b88 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e004      	b.n	8006b88 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e002      	b.n	8006b88 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006b82:	2301      	movs	r3, #1
 8006b84:	e000      	b.n	8006b88 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8006b86:	2301      	movs	r3, #1
 8006b88:	4a37      	ldr	r2, [pc, #220]	; (8006c68 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8006b8a:	60d3      	str	r3, [r2, #12]
 8006b8c:	e141      	b.n	8006e12 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	4b35      	ldr	r3, [pc, #212]	; (8006c6c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d97c      	bls.n	8006c94 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a25      	ldr	r2, [pc, #148]	; (8006c34 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d073      	beq.n	8006c8c <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a23      	ldr	r2, [pc, #140]	; (8006c38 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d06c      	beq.n	8006c88 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a22      	ldr	r2, [pc, #136]	; (8006c3c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d065      	beq.n	8006c84 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a20      	ldr	r2, [pc, #128]	; (8006c40 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d05e      	beq.n	8006c80 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a1f      	ldr	r2, [pc, #124]	; (8006c44 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d057      	beq.n	8006c7c <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a1d      	ldr	r2, [pc, #116]	; (8006c48 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d050      	beq.n	8006c78 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a1c      	ldr	r2, [pc, #112]	; (8006c4c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d049      	beq.n	8006c74 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a1a      	ldr	r2, [pc, #104]	; (8006c50 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d042      	beq.n	8006c70 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a19      	ldr	r2, [pc, #100]	; (8006c54 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d01a      	beq.n	8006c2a <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a17      	ldr	r2, [pc, #92]	; (8006c58 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d012      	beq.n	8006c24 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a16      	ldr	r2, [pc, #88]	; (8006c5c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00a      	beq.n	8006c1e <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a14      	ldr	r2, [pc, #80]	; (8006c60 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d102      	bne.n	8006c18 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8006c12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c16:	e03a      	b.n	8006c8e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8006c18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006c1c:	e037      	b.n	8006c8e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8006c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c22:	e034      	b.n	8006c8e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8006c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c28:	e031      	b.n	8006c8e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8006c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c2e:	e02e      	b.n	8006c8e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8006c30:	40026000 	.word	0x40026000
 8006c34:	40026010 	.word	0x40026010
 8006c38:	40026410 	.word	0x40026410
 8006c3c:	40026070 	.word	0x40026070
 8006c40:	40026470 	.word	0x40026470
 8006c44:	40026028 	.word	0x40026028
 8006c48:	40026428 	.word	0x40026428
 8006c4c:	40026088 	.word	0x40026088
 8006c50:	40026488 	.word	0x40026488
 8006c54:	40026040 	.word	0x40026040
 8006c58:	40026440 	.word	0x40026440
 8006c5c:	400260a0 	.word	0x400260a0
 8006c60:	400264a0 	.word	0x400264a0
 8006c64:	40026458 	.word	0x40026458
 8006c68:	40026400 	.word	0x40026400
 8006c6c:	400260b8 	.word	0x400260b8
 8006c70:	2340      	movs	r3, #64	; 0x40
 8006c72:	e00c      	b.n	8006c8e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8006c74:	2340      	movs	r3, #64	; 0x40
 8006c76:	e00a      	b.n	8006c8e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8006c78:	2340      	movs	r3, #64	; 0x40
 8006c7a:	e008      	b.n	8006c8e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8006c7c:	2340      	movs	r3, #64	; 0x40
 8006c7e:	e006      	b.n	8006c8e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8006c80:	2301      	movs	r3, #1
 8006c82:	e004      	b.n	8006c8e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8006c84:	2301      	movs	r3, #1
 8006c86:	e002      	b.n	8006c8e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e000      	b.n	8006c8e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	4a7b      	ldr	r2, [pc, #492]	; (8006e7c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8006c90:	6093      	str	r3, [r2, #8]
 8006c92:	e0be      	b.n	8006e12 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	4b79      	ldr	r3, [pc, #484]	; (8006e80 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d95c      	bls.n	8006d5a <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a77      	ldr	r2, [pc, #476]	; (8006e84 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d053      	beq.n	8006d52 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a76      	ldr	r2, [pc, #472]	; (8006e88 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d04c      	beq.n	8006d4e <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a74      	ldr	r2, [pc, #464]	; (8006e8c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d045      	beq.n	8006d4a <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a73      	ldr	r2, [pc, #460]	; (8006e90 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d03e      	beq.n	8006d46 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a71      	ldr	r2, [pc, #452]	; (8006e94 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d037      	beq.n	8006d42 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a70      	ldr	r2, [pc, #448]	; (8006e98 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d030      	beq.n	8006d3e <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a6e      	ldr	r2, [pc, #440]	; (8006e9c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d029      	beq.n	8006d3a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a6d      	ldr	r2, [pc, #436]	; (8006ea0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d022      	beq.n	8006d36 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a6b      	ldr	r2, [pc, #428]	; (8006ea4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d01a      	beq.n	8006d30 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a6a      	ldr	r2, [pc, #424]	; (8006ea8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d012      	beq.n	8006d2a <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a68      	ldr	r2, [pc, #416]	; (8006eac <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d00a      	beq.n	8006d24 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a67      	ldr	r2, [pc, #412]	; (8006eb0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d102      	bne.n	8006d1e <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8006d18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d1c:	e01a      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8006d1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006d22:	e017      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8006d24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d28:	e014      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8006d2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d2e:	e011      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8006d30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d34:	e00e      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8006d36:	2340      	movs	r3, #64	; 0x40
 8006d38:	e00c      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8006d3a:	2340      	movs	r3, #64	; 0x40
 8006d3c:	e00a      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8006d3e:	2340      	movs	r3, #64	; 0x40
 8006d40:	e008      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8006d42:	2340      	movs	r3, #64	; 0x40
 8006d44:	e006      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8006d46:	2301      	movs	r3, #1
 8006d48:	e004      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e002      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8006d52:	2301      	movs	r3, #1
 8006d54:	4a57      	ldr	r2, [pc, #348]	; (8006eb4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8006d56:	60d3      	str	r3, [r2, #12]
 8006d58:	e05b      	b.n	8006e12 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a49      	ldr	r2, [pc, #292]	; (8006e84 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d053      	beq.n	8006e0c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a47      	ldr	r2, [pc, #284]	; (8006e88 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d04c      	beq.n	8006e08 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a46      	ldr	r2, [pc, #280]	; (8006e8c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d045      	beq.n	8006e04 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a44      	ldr	r2, [pc, #272]	; (8006e90 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d03e      	beq.n	8006e00 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a43      	ldr	r2, [pc, #268]	; (8006e94 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d037      	beq.n	8006dfc <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a41      	ldr	r2, [pc, #260]	; (8006e98 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d030      	beq.n	8006df8 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a40      	ldr	r2, [pc, #256]	; (8006e9c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d029      	beq.n	8006df4 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a3e      	ldr	r2, [pc, #248]	; (8006ea0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d022      	beq.n	8006df0 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a3d      	ldr	r2, [pc, #244]	; (8006ea4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d01a      	beq.n	8006dea <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a3b      	ldr	r2, [pc, #236]	; (8006ea8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d012      	beq.n	8006de4 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a3a      	ldr	r2, [pc, #232]	; (8006eac <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00a      	beq.n	8006dde <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a38      	ldr	r2, [pc, #224]	; (8006eb0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d102      	bne.n	8006dd8 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8006dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006dd6:	e01a      	b.n	8006e0e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8006dd8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ddc:	e017      	b.n	8006e0e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8006dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006de2:	e014      	b.n	8006e0e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8006de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006de8:	e011      	b.n	8006e0e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8006dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006dee:	e00e      	b.n	8006e0e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8006df0:	2340      	movs	r3, #64	; 0x40
 8006df2:	e00c      	b.n	8006e0e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8006df4:	2340      	movs	r3, #64	; 0x40
 8006df6:	e00a      	b.n	8006e0e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8006df8:	2340      	movs	r3, #64	; 0x40
 8006dfa:	e008      	b.n	8006e0e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8006dfc:	2340      	movs	r3, #64	; 0x40
 8006dfe:	e006      	b.n	8006e0e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8006e00:	2301      	movs	r3, #1
 8006e02:	e004      	b.n	8006e0e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8006e04:	2301      	movs	r3, #1
 8006e06:	e002      	b.n	8006e0e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e000      	b.n	8006e0e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	4a29      	ldr	r2, [pc, #164]	; (8006eb4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8006e10:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f042 0216 	orr.w	r2, r2, #22
 8006e20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	695a      	ldr	r2, [r3, #20]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d103      	bne.n	8006e42 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d007      	beq.n	8006e52 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f042 0208 	orr.w	r2, r2, #8
 8006e50:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f042 0201 	orr.w	r2, r2, #1
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	e005      	b.n	8006e70 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	40026400 	.word	0x40026400
 8006e80:	40026058 	.word	0x40026058
 8006e84:	40026010 	.word	0x40026010
 8006e88:	40026410 	.word	0x40026410
 8006e8c:	40026070 	.word	0x40026070
 8006e90:	40026470 	.word	0x40026470
 8006e94:	40026028 	.word	0x40026028
 8006e98:	40026428 	.word	0x40026428
 8006e9c:	40026088 	.word	0x40026088
 8006ea0:	40026488 	.word	0x40026488
 8006ea4:	40026040 	.word	0x40026040
 8006ea8:	40026440 	.word	0x40026440
 8006eac:	400260a0 	.word	0x400260a0
 8006eb0:	400264a0 	.word	0x400264a0
 8006eb4:	40026000 	.word	0x40026000

08006eb8 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8006ec6:	79fb      	ldrb	r3, [r7, #7]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d104      	bne.n	8006ed6 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	60da      	str	r2, [r3, #12]
 8006ed4:	e003      	b.n	8006ede <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	2b40      	cmp	r3, #64	; 0x40
 8006f08:	d108      	bne.n	8006f1c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006f1a:	e007      	b.n	8006f2c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	60da      	str	r2, [r3, #12]
}
 8006f2c:	bf00      	nop
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b089      	sub	sp, #36	; 0x24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f4e:	2300      	movs	r3, #0
 8006f50:	61fb      	str	r3, [r7, #28]
 8006f52:	e16b      	b.n	800722c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006f54:	2201      	movs	r2, #1
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	4013      	ands	r3, r2
 8006f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	f040 815a 	bne.w	8007226 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d005      	beq.n	8006f8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d130      	bne.n	8006fec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	005b      	lsls	r3, r3, #1
 8006f94:	2203      	movs	r2, #3
 8006f96:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9a:	43db      	mvns	r3, r3
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	fa02 f303 	lsl.w	r3, r2, r3
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc8:	43db      	mvns	r3, r3
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	091b      	lsrs	r3, r3, #4
 8006fd6:	f003 0201 	and.w	r2, r3, #1
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f003 0303 	and.w	r3, r3, #3
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d017      	beq.n	8007028 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	2203      	movs	r2, #3
 8007004:	fa02 f303 	lsl.w	r3, r2, r3
 8007008:	43db      	mvns	r3, r3
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	4013      	ands	r3, r2
 800700e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	fa02 f303 	lsl.w	r3, r2, r3
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	4313      	orrs	r3, r2
 8007020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f003 0303 	and.w	r3, r3, #3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d123      	bne.n	800707c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	08da      	lsrs	r2, r3, #3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3208      	adds	r2, #8
 800703c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007040:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	f003 0307 	and.w	r3, r3, #7
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	220f      	movs	r2, #15
 800704c:	fa02 f303 	lsl.w	r3, r2, r3
 8007050:	43db      	mvns	r3, r3
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	4013      	ands	r3, r2
 8007056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	f003 0307 	and.w	r3, r3, #7
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	4313      	orrs	r3, r2
 800706c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	08da      	lsrs	r2, r3, #3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3208      	adds	r2, #8
 8007076:	69b9      	ldr	r1, [r7, #24]
 8007078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	2203      	movs	r2, #3
 8007088:	fa02 f303 	lsl.w	r3, r2, r3
 800708c:	43db      	mvns	r3, r3
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	4013      	ands	r3, r2
 8007092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f003 0203 	and.w	r2, r3, #3
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	fa02 f303 	lsl.w	r3, r2, r3
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 80b4 	beq.w	8007226 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070be:	2300      	movs	r3, #0
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	4b60      	ldr	r3, [pc, #384]	; (8007244 <HAL_GPIO_Init+0x30c>)
 80070c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c6:	4a5f      	ldr	r2, [pc, #380]	; (8007244 <HAL_GPIO_Init+0x30c>)
 80070c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070cc:	6453      	str	r3, [r2, #68]	; 0x44
 80070ce:	4b5d      	ldr	r3, [pc, #372]	; (8007244 <HAL_GPIO_Init+0x30c>)
 80070d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80070da:	4a5b      	ldr	r2, [pc, #364]	; (8007248 <HAL_GPIO_Init+0x310>)
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	089b      	lsrs	r3, r3, #2
 80070e0:	3302      	adds	r3, #2
 80070e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	f003 0303 	and.w	r3, r3, #3
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	220f      	movs	r2, #15
 80070f2:	fa02 f303 	lsl.w	r3, r2, r3
 80070f6:	43db      	mvns	r3, r3
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	4013      	ands	r3, r2
 80070fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a52      	ldr	r2, [pc, #328]	; (800724c <HAL_GPIO_Init+0x314>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d02b      	beq.n	800715e <HAL_GPIO_Init+0x226>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a51      	ldr	r2, [pc, #324]	; (8007250 <HAL_GPIO_Init+0x318>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d025      	beq.n	800715a <HAL_GPIO_Init+0x222>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a50      	ldr	r2, [pc, #320]	; (8007254 <HAL_GPIO_Init+0x31c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d01f      	beq.n	8007156 <HAL_GPIO_Init+0x21e>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a4f      	ldr	r2, [pc, #316]	; (8007258 <HAL_GPIO_Init+0x320>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d019      	beq.n	8007152 <HAL_GPIO_Init+0x21a>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a4e      	ldr	r2, [pc, #312]	; (800725c <HAL_GPIO_Init+0x324>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d013      	beq.n	800714e <HAL_GPIO_Init+0x216>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a4d      	ldr	r2, [pc, #308]	; (8007260 <HAL_GPIO_Init+0x328>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00d      	beq.n	800714a <HAL_GPIO_Init+0x212>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a4c      	ldr	r2, [pc, #304]	; (8007264 <HAL_GPIO_Init+0x32c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d007      	beq.n	8007146 <HAL_GPIO_Init+0x20e>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a4b      	ldr	r2, [pc, #300]	; (8007268 <HAL_GPIO_Init+0x330>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d101      	bne.n	8007142 <HAL_GPIO_Init+0x20a>
 800713e:	2307      	movs	r3, #7
 8007140:	e00e      	b.n	8007160 <HAL_GPIO_Init+0x228>
 8007142:	2308      	movs	r3, #8
 8007144:	e00c      	b.n	8007160 <HAL_GPIO_Init+0x228>
 8007146:	2306      	movs	r3, #6
 8007148:	e00a      	b.n	8007160 <HAL_GPIO_Init+0x228>
 800714a:	2305      	movs	r3, #5
 800714c:	e008      	b.n	8007160 <HAL_GPIO_Init+0x228>
 800714e:	2304      	movs	r3, #4
 8007150:	e006      	b.n	8007160 <HAL_GPIO_Init+0x228>
 8007152:	2303      	movs	r3, #3
 8007154:	e004      	b.n	8007160 <HAL_GPIO_Init+0x228>
 8007156:	2302      	movs	r3, #2
 8007158:	e002      	b.n	8007160 <HAL_GPIO_Init+0x228>
 800715a:	2301      	movs	r3, #1
 800715c:	e000      	b.n	8007160 <HAL_GPIO_Init+0x228>
 800715e:	2300      	movs	r3, #0
 8007160:	69fa      	ldr	r2, [r7, #28]
 8007162:	f002 0203 	and.w	r2, r2, #3
 8007166:	0092      	lsls	r2, r2, #2
 8007168:	4093      	lsls	r3, r2
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	4313      	orrs	r3, r2
 800716e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007170:	4935      	ldr	r1, [pc, #212]	; (8007248 <HAL_GPIO_Init+0x310>)
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	089b      	lsrs	r3, r3, #2
 8007176:	3302      	adds	r3, #2
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800717e:	4b3b      	ldr	r3, [pc, #236]	; (800726c <HAL_GPIO_Init+0x334>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	43db      	mvns	r3, r3
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	4013      	ands	r3, r2
 800718c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	4313      	orrs	r3, r2
 80071a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80071a2:	4a32      	ldr	r2, [pc, #200]	; (800726c <HAL_GPIO_Init+0x334>)
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80071a8:	4b30      	ldr	r3, [pc, #192]	; (800726c <HAL_GPIO_Init+0x334>)
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	43db      	mvns	r3, r3
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	4013      	ands	r3, r2
 80071b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d003      	beq.n	80071cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80071cc:	4a27      	ldr	r2, [pc, #156]	; (800726c <HAL_GPIO_Init+0x334>)
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80071d2:	4b26      	ldr	r3, [pc, #152]	; (800726c <HAL_GPIO_Init+0x334>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	43db      	mvns	r3, r3
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	4013      	ands	r3, r2
 80071e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80071f6:	4a1d      	ldr	r2, [pc, #116]	; (800726c <HAL_GPIO_Init+0x334>)
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80071fc:	4b1b      	ldr	r3, [pc, #108]	; (800726c <HAL_GPIO_Init+0x334>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	43db      	mvns	r3, r3
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	4013      	ands	r3, r2
 800720a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	4313      	orrs	r3, r2
 800721e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007220:	4a12      	ldr	r2, [pc, #72]	; (800726c <HAL_GPIO_Init+0x334>)
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	3301      	adds	r3, #1
 800722a:	61fb      	str	r3, [r7, #28]
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	2b0f      	cmp	r3, #15
 8007230:	f67f ae90 	bls.w	8006f54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	3724      	adds	r7, #36	; 0x24
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	40023800 	.word	0x40023800
 8007248:	40013800 	.word	0x40013800
 800724c:	40020000 	.word	0x40020000
 8007250:	40020400 	.word	0x40020400
 8007254:	40020800 	.word	0x40020800
 8007258:	40020c00 	.word	0x40020c00
 800725c:	40021000 	.word	0x40021000
 8007260:	40021400 	.word	0x40021400
 8007264:	40021800 	.word	0x40021800
 8007268:	40021c00 	.word	0x40021c00
 800726c:	40013c00 	.word	0x40013c00

08007270 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691a      	ldr	r2, [r3, #16]
 8007280:	887b      	ldrh	r3, [r7, #2]
 8007282:	4013      	ands	r3, r2
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007288:	2301      	movs	r3, #1
 800728a:	73fb      	strb	r3, [r7, #15]
 800728c:	e001      	b.n	8007292 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007292:	7bfb      	ldrb	r3, [r7, #15]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	807b      	strh	r3, [r7, #2]
 80072ac:	4613      	mov	r3, r2
 80072ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80072b0:	787b      	ldrb	r3, [r7, #1]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80072b6:	887a      	ldrh	r2, [r7, #2]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80072bc:	e003      	b.n	80072c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80072be:	887b      	ldrh	r3, [r7, #2]
 80072c0:	041a      	lsls	r2, r3, #16
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	619a      	str	r2, [r3, #24]
}
 80072c6:	bf00      	nop
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
	...

080072d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e267      	b.n	80077b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d075      	beq.n	80073de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072f2:	4b88      	ldr	r3, [pc, #544]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f003 030c 	and.w	r3, r3, #12
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	d00c      	beq.n	8007318 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072fe:	4b85      	ldr	r3, [pc, #532]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007306:	2b08      	cmp	r3, #8
 8007308:	d112      	bne.n	8007330 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800730a:	4b82      	ldr	r3, [pc, #520]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007316:	d10b      	bne.n	8007330 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007318:	4b7e      	ldr	r3, [pc, #504]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d05b      	beq.n	80073dc <HAL_RCC_OscConfig+0x108>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d157      	bne.n	80073dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e242      	b.n	80077b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007338:	d106      	bne.n	8007348 <HAL_RCC_OscConfig+0x74>
 800733a:	4b76      	ldr	r3, [pc, #472]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a75      	ldr	r2, [pc, #468]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 8007340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	e01d      	b.n	8007384 <HAL_RCC_OscConfig+0xb0>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007350:	d10c      	bne.n	800736c <HAL_RCC_OscConfig+0x98>
 8007352:	4b70      	ldr	r3, [pc, #448]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a6f      	ldr	r2, [pc, #444]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 8007358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	4b6d      	ldr	r3, [pc, #436]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a6c      	ldr	r2, [pc, #432]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 8007364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	e00b      	b.n	8007384 <HAL_RCC_OscConfig+0xb0>
 800736c:	4b69      	ldr	r3, [pc, #420]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a68      	ldr	r2, [pc, #416]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 8007372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	4b66      	ldr	r3, [pc, #408]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a65      	ldr	r2, [pc, #404]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 800737e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d013      	beq.n	80073b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800738c:	f7fd fd06 	bl	8004d9c <HAL_GetTick>
 8007390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007394:	f7fd fd02 	bl	8004d9c <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b64      	cmp	r3, #100	; 0x64
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e207      	b.n	80077b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073a6:	4b5b      	ldr	r3, [pc, #364]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0f0      	beq.n	8007394 <HAL_RCC_OscConfig+0xc0>
 80073b2:	e014      	b.n	80073de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073b4:	f7fd fcf2 	bl	8004d9c <HAL_GetTick>
 80073b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073ba:	e008      	b.n	80073ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073bc:	f7fd fcee 	bl	8004d9c <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	2b64      	cmp	r3, #100	; 0x64
 80073c8:	d901      	bls.n	80073ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e1f3      	b.n	80077b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073ce:	4b51      	ldr	r3, [pc, #324]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1f0      	bne.n	80073bc <HAL_RCC_OscConfig+0xe8>
 80073da:	e000      	b.n	80073de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d063      	beq.n	80074b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073ea:	4b4a      	ldr	r3, [pc, #296]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f003 030c 	and.w	r3, r3, #12
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00b      	beq.n	800740e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073f6:	4b47      	ldr	r3, [pc, #284]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073fe:	2b08      	cmp	r3, #8
 8007400:	d11c      	bne.n	800743c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007402:	4b44      	ldr	r3, [pc, #272]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d116      	bne.n	800743c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800740e:	4b41      	ldr	r3, [pc, #260]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d005      	beq.n	8007426 <HAL_RCC_OscConfig+0x152>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d001      	beq.n	8007426 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e1c7      	b.n	80077b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007426:	4b3b      	ldr	r3, [pc, #236]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	4937      	ldr	r1, [pc, #220]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 8007436:	4313      	orrs	r3, r2
 8007438:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800743a:	e03a      	b.n	80074b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d020      	beq.n	8007486 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007444:	4b34      	ldr	r3, [pc, #208]	; (8007518 <HAL_RCC_OscConfig+0x244>)
 8007446:	2201      	movs	r2, #1
 8007448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744a:	f7fd fca7 	bl	8004d9c <HAL_GetTick>
 800744e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007450:	e008      	b.n	8007464 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007452:	f7fd fca3 	bl	8004d9c <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	2b02      	cmp	r3, #2
 800745e:	d901      	bls.n	8007464 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e1a8      	b.n	80077b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007464:	4b2b      	ldr	r3, [pc, #172]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0f0      	beq.n	8007452 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007470:	4b28      	ldr	r3, [pc, #160]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	4925      	ldr	r1, [pc, #148]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 8007480:	4313      	orrs	r3, r2
 8007482:	600b      	str	r3, [r1, #0]
 8007484:	e015      	b.n	80074b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007486:	4b24      	ldr	r3, [pc, #144]	; (8007518 <HAL_RCC_OscConfig+0x244>)
 8007488:	2200      	movs	r2, #0
 800748a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800748c:	f7fd fc86 	bl	8004d9c <HAL_GetTick>
 8007490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007492:	e008      	b.n	80074a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007494:	f7fd fc82 	bl	8004d9c <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d901      	bls.n	80074a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e187      	b.n	80077b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074a6:	4b1b      	ldr	r3, [pc, #108]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0302 	and.w	r3, r3, #2
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1f0      	bne.n	8007494 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0308 	and.w	r3, r3, #8
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d036      	beq.n	800752c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d016      	beq.n	80074f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074c6:	4b15      	ldr	r3, [pc, #84]	; (800751c <HAL_RCC_OscConfig+0x248>)
 80074c8:	2201      	movs	r2, #1
 80074ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074cc:	f7fd fc66 	bl	8004d9c <HAL_GetTick>
 80074d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074d2:	e008      	b.n	80074e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074d4:	f7fd fc62 	bl	8004d9c <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e167      	b.n	80077b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074e6:	4b0b      	ldr	r3, [pc, #44]	; (8007514 <HAL_RCC_OscConfig+0x240>)
 80074e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0f0      	beq.n	80074d4 <HAL_RCC_OscConfig+0x200>
 80074f2:	e01b      	b.n	800752c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074f4:	4b09      	ldr	r3, [pc, #36]	; (800751c <HAL_RCC_OscConfig+0x248>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074fa:	f7fd fc4f 	bl	8004d9c <HAL_GetTick>
 80074fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007500:	e00e      	b.n	8007520 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007502:	f7fd fc4b 	bl	8004d9c <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	2b02      	cmp	r3, #2
 800750e:	d907      	bls.n	8007520 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e150      	b.n	80077b6 <HAL_RCC_OscConfig+0x4e2>
 8007514:	40023800 	.word	0x40023800
 8007518:	42470000 	.word	0x42470000
 800751c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007520:	4b88      	ldr	r3, [pc, #544]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 8007522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1ea      	bne.n	8007502 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 8097 	beq.w	8007668 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800753a:	2300      	movs	r3, #0
 800753c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800753e:	4b81      	ldr	r3, [pc, #516]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10f      	bne.n	800756a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800754a:	2300      	movs	r3, #0
 800754c:	60bb      	str	r3, [r7, #8]
 800754e:	4b7d      	ldr	r3, [pc, #500]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	4a7c      	ldr	r2, [pc, #496]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 8007554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007558:	6413      	str	r3, [r2, #64]	; 0x40
 800755a:	4b7a      	ldr	r3, [pc, #488]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007562:	60bb      	str	r3, [r7, #8]
 8007564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007566:	2301      	movs	r3, #1
 8007568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800756a:	4b77      	ldr	r3, [pc, #476]	; (8007748 <HAL_RCC_OscConfig+0x474>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007572:	2b00      	cmp	r3, #0
 8007574:	d118      	bne.n	80075a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007576:	4b74      	ldr	r3, [pc, #464]	; (8007748 <HAL_RCC_OscConfig+0x474>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a73      	ldr	r2, [pc, #460]	; (8007748 <HAL_RCC_OscConfig+0x474>)
 800757c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007582:	f7fd fc0b 	bl	8004d9c <HAL_GetTick>
 8007586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007588:	e008      	b.n	800759c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800758a:	f7fd fc07 	bl	8004d9c <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	2b02      	cmp	r3, #2
 8007596:	d901      	bls.n	800759c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e10c      	b.n	80077b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800759c:	4b6a      	ldr	r3, [pc, #424]	; (8007748 <HAL_RCC_OscConfig+0x474>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d0f0      	beq.n	800758a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d106      	bne.n	80075be <HAL_RCC_OscConfig+0x2ea>
 80075b0:	4b64      	ldr	r3, [pc, #400]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 80075b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b4:	4a63      	ldr	r2, [pc, #396]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	6713      	str	r3, [r2, #112]	; 0x70
 80075bc:	e01c      	b.n	80075f8 <HAL_RCC_OscConfig+0x324>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	2b05      	cmp	r3, #5
 80075c4:	d10c      	bne.n	80075e0 <HAL_RCC_OscConfig+0x30c>
 80075c6:	4b5f      	ldr	r3, [pc, #380]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 80075c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ca:	4a5e      	ldr	r2, [pc, #376]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 80075cc:	f043 0304 	orr.w	r3, r3, #4
 80075d0:	6713      	str	r3, [r2, #112]	; 0x70
 80075d2:	4b5c      	ldr	r3, [pc, #368]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 80075d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d6:	4a5b      	ldr	r2, [pc, #364]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 80075d8:	f043 0301 	orr.w	r3, r3, #1
 80075dc:	6713      	str	r3, [r2, #112]	; 0x70
 80075de:	e00b      	b.n	80075f8 <HAL_RCC_OscConfig+0x324>
 80075e0:	4b58      	ldr	r3, [pc, #352]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 80075e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e4:	4a57      	ldr	r2, [pc, #348]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 80075e6:	f023 0301 	bic.w	r3, r3, #1
 80075ea:	6713      	str	r3, [r2, #112]	; 0x70
 80075ec:	4b55      	ldr	r3, [pc, #340]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 80075ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f0:	4a54      	ldr	r2, [pc, #336]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 80075f2:	f023 0304 	bic.w	r3, r3, #4
 80075f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d015      	beq.n	800762c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007600:	f7fd fbcc 	bl	8004d9c <HAL_GetTick>
 8007604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007606:	e00a      	b.n	800761e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007608:	f7fd fbc8 	bl	8004d9c <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	f241 3288 	movw	r2, #5000	; 0x1388
 8007616:	4293      	cmp	r3, r2
 8007618:	d901      	bls.n	800761e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e0cb      	b.n	80077b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800761e:	4b49      	ldr	r3, [pc, #292]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 8007620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d0ee      	beq.n	8007608 <HAL_RCC_OscConfig+0x334>
 800762a:	e014      	b.n	8007656 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800762c:	f7fd fbb6 	bl	8004d9c <HAL_GetTick>
 8007630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007632:	e00a      	b.n	800764a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007634:	f7fd fbb2 	bl	8004d9c <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007642:	4293      	cmp	r3, r2
 8007644:	d901      	bls.n	800764a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e0b5      	b.n	80077b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800764a:	4b3e      	ldr	r3, [pc, #248]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 800764c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1ee      	bne.n	8007634 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007656:	7dfb      	ldrb	r3, [r7, #23]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d105      	bne.n	8007668 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800765c:	4b39      	ldr	r3, [pc, #228]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 800765e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007660:	4a38      	ldr	r2, [pc, #224]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 8007662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007666:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 80a1 	beq.w	80077b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007672:	4b34      	ldr	r3, [pc, #208]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f003 030c 	and.w	r3, r3, #12
 800767a:	2b08      	cmp	r3, #8
 800767c:	d05c      	beq.n	8007738 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	2b02      	cmp	r3, #2
 8007684:	d141      	bne.n	800770a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007686:	4b31      	ldr	r3, [pc, #196]	; (800774c <HAL_RCC_OscConfig+0x478>)
 8007688:	2200      	movs	r2, #0
 800768a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800768c:	f7fd fb86 	bl	8004d9c <HAL_GetTick>
 8007690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007692:	e008      	b.n	80076a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007694:	f7fd fb82 	bl	8004d9c <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d901      	bls.n	80076a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e087      	b.n	80077b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076a6:	4b27      	ldr	r3, [pc, #156]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1f0      	bne.n	8007694 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	69da      	ldr	r2, [r3, #28]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	431a      	orrs	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c0:	019b      	lsls	r3, r3, #6
 80076c2:	431a      	orrs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c8:	085b      	lsrs	r3, r3, #1
 80076ca:	3b01      	subs	r3, #1
 80076cc:	041b      	lsls	r3, r3, #16
 80076ce:	431a      	orrs	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	061b      	lsls	r3, r3, #24
 80076d6:	491b      	ldr	r1, [pc, #108]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076dc:	4b1b      	ldr	r3, [pc, #108]	; (800774c <HAL_RCC_OscConfig+0x478>)
 80076de:	2201      	movs	r2, #1
 80076e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e2:	f7fd fb5b 	bl	8004d9c <HAL_GetTick>
 80076e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076e8:	e008      	b.n	80076fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076ea:	f7fd fb57 	bl	8004d9c <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d901      	bls.n	80076fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e05c      	b.n	80077b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076fc:	4b11      	ldr	r3, [pc, #68]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0f0      	beq.n	80076ea <HAL_RCC_OscConfig+0x416>
 8007708:	e054      	b.n	80077b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800770a:	4b10      	ldr	r3, [pc, #64]	; (800774c <HAL_RCC_OscConfig+0x478>)
 800770c:	2200      	movs	r2, #0
 800770e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007710:	f7fd fb44 	bl	8004d9c <HAL_GetTick>
 8007714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007716:	e008      	b.n	800772a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007718:	f7fd fb40 	bl	8004d9c <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b02      	cmp	r3, #2
 8007724:	d901      	bls.n	800772a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e045      	b.n	80077b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800772a:	4b06      	ldr	r3, [pc, #24]	; (8007744 <HAL_RCC_OscConfig+0x470>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1f0      	bne.n	8007718 <HAL_RCC_OscConfig+0x444>
 8007736:	e03d      	b.n	80077b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d107      	bne.n	8007750 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e038      	b.n	80077b6 <HAL_RCC_OscConfig+0x4e2>
 8007744:	40023800 	.word	0x40023800
 8007748:	40007000 	.word	0x40007000
 800774c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007750:	4b1b      	ldr	r3, [pc, #108]	; (80077c0 <HAL_RCC_OscConfig+0x4ec>)
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d028      	beq.n	80077b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007768:	429a      	cmp	r2, r3
 800776a:	d121      	bne.n	80077b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007776:	429a      	cmp	r2, r3
 8007778:	d11a      	bne.n	80077b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007780:	4013      	ands	r3, r2
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007786:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007788:	4293      	cmp	r3, r2
 800778a:	d111      	bne.n	80077b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007796:	085b      	lsrs	r3, r3, #1
 8007798:	3b01      	subs	r3, #1
 800779a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800779c:	429a      	cmp	r2, r3
 800779e:	d107      	bne.n	80077b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d001      	beq.n	80077b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e000      	b.n	80077b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	40023800 	.word	0x40023800

080077c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e0cc      	b.n	8007972 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077d8:	4b68      	ldr	r3, [pc, #416]	; (800797c <HAL_RCC_ClockConfig+0x1b8>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0307 	and.w	r3, r3, #7
 80077e0:	683a      	ldr	r2, [r7, #0]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d90c      	bls.n	8007800 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077e6:	4b65      	ldr	r3, [pc, #404]	; (800797c <HAL_RCC_ClockConfig+0x1b8>)
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ee:	4b63      	ldr	r3, [pc, #396]	; (800797c <HAL_RCC_ClockConfig+0x1b8>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0307 	and.w	r3, r3, #7
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d001      	beq.n	8007800 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e0b8      	b.n	8007972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d020      	beq.n	800784e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b00      	cmp	r3, #0
 8007816:	d005      	beq.n	8007824 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007818:	4b59      	ldr	r3, [pc, #356]	; (8007980 <HAL_RCC_ClockConfig+0x1bc>)
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	4a58      	ldr	r2, [pc, #352]	; (8007980 <HAL_RCC_ClockConfig+0x1bc>)
 800781e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007822:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0308 	and.w	r3, r3, #8
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007830:	4b53      	ldr	r3, [pc, #332]	; (8007980 <HAL_RCC_ClockConfig+0x1bc>)
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	4a52      	ldr	r2, [pc, #328]	; (8007980 <HAL_RCC_ClockConfig+0x1bc>)
 8007836:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800783a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800783c:	4b50      	ldr	r3, [pc, #320]	; (8007980 <HAL_RCC_ClockConfig+0x1bc>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	494d      	ldr	r1, [pc, #308]	; (8007980 <HAL_RCC_ClockConfig+0x1bc>)
 800784a:	4313      	orrs	r3, r2
 800784c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b00      	cmp	r3, #0
 8007858:	d044      	beq.n	80078e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d107      	bne.n	8007872 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007862:	4b47      	ldr	r3, [pc, #284]	; (8007980 <HAL_RCC_ClockConfig+0x1bc>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d119      	bne.n	80078a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e07f      	b.n	8007972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b02      	cmp	r3, #2
 8007878:	d003      	beq.n	8007882 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800787e:	2b03      	cmp	r3, #3
 8007880:	d107      	bne.n	8007892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007882:	4b3f      	ldr	r3, [pc, #252]	; (8007980 <HAL_RCC_ClockConfig+0x1bc>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d109      	bne.n	80078a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e06f      	b.n	8007972 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007892:	4b3b      	ldr	r3, [pc, #236]	; (8007980 <HAL_RCC_ClockConfig+0x1bc>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e067      	b.n	8007972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078a2:	4b37      	ldr	r3, [pc, #220]	; (8007980 <HAL_RCC_ClockConfig+0x1bc>)
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f023 0203 	bic.w	r2, r3, #3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	4934      	ldr	r1, [pc, #208]	; (8007980 <HAL_RCC_ClockConfig+0x1bc>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078b4:	f7fd fa72 	bl	8004d9c <HAL_GetTick>
 80078b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ba:	e00a      	b.n	80078d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078bc:	f7fd fa6e 	bl	8004d9c <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d901      	bls.n	80078d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e04f      	b.n	8007972 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078d2:	4b2b      	ldr	r3, [pc, #172]	; (8007980 <HAL_RCC_ClockConfig+0x1bc>)
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f003 020c 	and.w	r2, r3, #12
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d1eb      	bne.n	80078bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078e4:	4b25      	ldr	r3, [pc, #148]	; (800797c <HAL_RCC_ClockConfig+0x1b8>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0307 	and.w	r3, r3, #7
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d20c      	bcs.n	800790c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078f2:	4b22      	ldr	r3, [pc, #136]	; (800797c <HAL_RCC_ClockConfig+0x1b8>)
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	b2d2      	uxtb	r2, r2
 80078f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078fa:	4b20      	ldr	r3, [pc, #128]	; (800797c <HAL_RCC_ClockConfig+0x1b8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0307 	and.w	r3, r3, #7
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	429a      	cmp	r2, r3
 8007906:	d001      	beq.n	800790c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e032      	b.n	8007972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b00      	cmp	r3, #0
 8007916:	d008      	beq.n	800792a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007918:	4b19      	ldr	r3, [pc, #100]	; (8007980 <HAL_RCC_ClockConfig+0x1bc>)
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	4916      	ldr	r1, [pc, #88]	; (8007980 <HAL_RCC_ClockConfig+0x1bc>)
 8007926:	4313      	orrs	r3, r2
 8007928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0308 	and.w	r3, r3, #8
 8007932:	2b00      	cmp	r3, #0
 8007934:	d009      	beq.n	800794a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007936:	4b12      	ldr	r3, [pc, #72]	; (8007980 <HAL_RCC_ClockConfig+0x1bc>)
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	00db      	lsls	r3, r3, #3
 8007944:	490e      	ldr	r1, [pc, #56]	; (8007980 <HAL_RCC_ClockConfig+0x1bc>)
 8007946:	4313      	orrs	r3, r2
 8007948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800794a:	f000 f889 	bl	8007a60 <HAL_RCC_GetSysClockFreq>
 800794e:	4602      	mov	r2, r0
 8007950:	4b0b      	ldr	r3, [pc, #44]	; (8007980 <HAL_RCC_ClockConfig+0x1bc>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	091b      	lsrs	r3, r3, #4
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	490a      	ldr	r1, [pc, #40]	; (8007984 <HAL_RCC_ClockConfig+0x1c0>)
 800795c:	5ccb      	ldrb	r3, [r1, r3]
 800795e:	fa22 f303 	lsr.w	r3, r2, r3
 8007962:	4a09      	ldr	r2, [pc, #36]	; (8007988 <HAL_RCC_ClockConfig+0x1c4>)
 8007964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007966:	4b09      	ldr	r3, [pc, #36]	; (800798c <HAL_RCC_ClockConfig+0x1c8>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4618      	mov	r0, r3
 800796c:	f7fb f9ac 	bl	8002cc8 <HAL_InitTick>

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	40023c00 	.word	0x40023c00
 8007980:	40023800 	.word	0x40023800
 8007984:	0801602c 	.word	0x0801602c
 8007988:	20000000 	.word	0x20000000
 800798c:	2000006c 	.word	0x2000006c

08007990 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b08c      	sub	sp, #48	; 0x30
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d129      	bne.n	80079f6 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80079a2:	2300      	movs	r3, #0
 80079a4:	61bb      	str	r3, [r7, #24]
 80079a6:	4b2b      	ldr	r3, [pc, #172]	; (8007a54 <HAL_RCC_MCOConfig+0xc4>)
 80079a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079aa:	4a2a      	ldr	r2, [pc, #168]	; (8007a54 <HAL_RCC_MCOConfig+0xc4>)
 80079ac:	f043 0301 	orr.w	r3, r3, #1
 80079b0:	6313      	str	r3, [r2, #48]	; 0x30
 80079b2:	4b28      	ldr	r3, [pc, #160]	; (8007a54 <HAL_RCC_MCOConfig+0xc4>)
 80079b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	61bb      	str	r3, [r7, #24]
 80079bc:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80079be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079c4:	2302      	movs	r3, #2
 80079c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079c8:	2303      	movs	r3, #3
 80079ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079cc:	2300      	movs	r3, #0
 80079ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80079d0:	2300      	movs	r3, #0
 80079d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80079d4:	f107 031c 	add.w	r3, r7, #28
 80079d8:	4619      	mov	r1, r3
 80079da:	481f      	ldr	r0, [pc, #124]	; (8007a58 <HAL_RCC_MCOConfig+0xc8>)
 80079dc:	f7ff faac 	bl	8006f38 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80079e0:	4b1c      	ldr	r3, [pc, #112]	; (8007a54 <HAL_RCC_MCOConfig+0xc4>)
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80079e8:	68b9      	ldr	r1, [r7, #8]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	430b      	orrs	r3, r1
 80079ee:	4919      	ldr	r1, [pc, #100]	; (8007a54 <HAL_RCC_MCOConfig+0xc4>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80079f4:	e029      	b.n	8007a4a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80079f6:	2300      	movs	r3, #0
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	4b16      	ldr	r3, [pc, #88]	; (8007a54 <HAL_RCC_MCOConfig+0xc4>)
 80079fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fe:	4a15      	ldr	r2, [pc, #84]	; (8007a54 <HAL_RCC_MCOConfig+0xc4>)
 8007a00:	f043 0304 	orr.w	r3, r3, #4
 8007a04:	6313      	str	r3, [r2, #48]	; 0x30
 8007a06:	4b13      	ldr	r3, [pc, #76]	; (8007a54 <HAL_RCC_MCOConfig+0xc4>)
 8007a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0a:	f003 0304 	and.w	r3, r3, #4
 8007a0e:	617b      	str	r3, [r7, #20]
 8007a10:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a18:	2302      	movs	r3, #2
 8007a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a20:	2300      	movs	r3, #0
 8007a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007a24:	2300      	movs	r3, #0
 8007a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007a28:	f107 031c 	add.w	r3, r7, #28
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	480b      	ldr	r0, [pc, #44]	; (8007a5c <HAL_RCC_MCOConfig+0xcc>)
 8007a30:	f7ff fa82 	bl	8006f38 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8007a34:	4b07      	ldr	r3, [pc, #28]	; (8007a54 <HAL_RCC_MCOConfig+0xc4>)
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	00d9      	lsls	r1, r3, #3
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	430b      	orrs	r3, r1
 8007a44:	4903      	ldr	r1, [pc, #12]	; (8007a54 <HAL_RCC_MCOConfig+0xc4>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	608b      	str	r3, [r1, #8]
}
 8007a4a:	bf00      	nop
 8007a4c:	3730      	adds	r7, #48	; 0x30
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	40023800 	.word	0x40023800
 8007a58:	40020000 	.word	0x40020000
 8007a5c:	40020800 	.word	0x40020800

08007a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a64:	b094      	sub	sp, #80	; 0x50
 8007a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a70:	2300      	movs	r3, #0
 8007a72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007a74:	2300      	movs	r3, #0
 8007a76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a78:	4b79      	ldr	r3, [pc, #484]	; (8007c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f003 030c 	and.w	r3, r3, #12
 8007a80:	2b08      	cmp	r3, #8
 8007a82:	d00d      	beq.n	8007aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8007a84:	2b08      	cmp	r3, #8
 8007a86:	f200 80e1 	bhi.w	8007c4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d002      	beq.n	8007a94 <HAL_RCC_GetSysClockFreq+0x34>
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d003      	beq.n	8007a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8007a92:	e0db      	b.n	8007c4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a94:	4b73      	ldr	r3, [pc, #460]	; (8007c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007a98:	e0db      	b.n	8007c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a9a:	4b73      	ldr	r3, [pc, #460]	; (8007c68 <HAL_RCC_GetSysClockFreq+0x208>)
 8007a9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a9e:	e0d8      	b.n	8007c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007aa0:	4b6f      	ldr	r3, [pc, #444]	; (8007c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007aa8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007aaa:	4b6d      	ldr	r3, [pc, #436]	; (8007c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d063      	beq.n	8007b7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ab6:	4b6a      	ldr	r3, [pc, #424]	; (8007c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	099b      	lsrs	r3, r3, #6
 8007abc:	2200      	movs	r2, #0
 8007abe:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ac0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8007aca:	2300      	movs	r3, #0
 8007acc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ace:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	462b      	mov	r3, r5
 8007ad6:	f04f 0000 	mov.w	r0, #0
 8007ada:	f04f 0100 	mov.w	r1, #0
 8007ade:	0159      	lsls	r1, r3, #5
 8007ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ae4:	0150      	lsls	r0, r2, #5
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4621      	mov	r1, r4
 8007aec:	1a51      	subs	r1, r2, r1
 8007aee:	6139      	str	r1, [r7, #16]
 8007af0:	4629      	mov	r1, r5
 8007af2:	eb63 0301 	sbc.w	r3, r3, r1
 8007af6:	617b      	str	r3, [r7, #20]
 8007af8:	f04f 0200 	mov.w	r2, #0
 8007afc:	f04f 0300 	mov.w	r3, #0
 8007b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b04:	4659      	mov	r1, fp
 8007b06:	018b      	lsls	r3, r1, #6
 8007b08:	4651      	mov	r1, sl
 8007b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b0e:	4651      	mov	r1, sl
 8007b10:	018a      	lsls	r2, r1, #6
 8007b12:	4651      	mov	r1, sl
 8007b14:	ebb2 0801 	subs.w	r8, r2, r1
 8007b18:	4659      	mov	r1, fp
 8007b1a:	eb63 0901 	sbc.w	r9, r3, r1
 8007b1e:	f04f 0200 	mov.w	r2, #0
 8007b22:	f04f 0300 	mov.w	r3, #0
 8007b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b32:	4690      	mov	r8, r2
 8007b34:	4699      	mov	r9, r3
 8007b36:	4623      	mov	r3, r4
 8007b38:	eb18 0303 	adds.w	r3, r8, r3
 8007b3c:	60bb      	str	r3, [r7, #8]
 8007b3e:	462b      	mov	r3, r5
 8007b40:	eb49 0303 	adc.w	r3, r9, r3
 8007b44:	60fb      	str	r3, [r7, #12]
 8007b46:	f04f 0200 	mov.w	r2, #0
 8007b4a:	f04f 0300 	mov.w	r3, #0
 8007b4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007b52:	4629      	mov	r1, r5
 8007b54:	024b      	lsls	r3, r1, #9
 8007b56:	4621      	mov	r1, r4
 8007b58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	024a      	lsls	r2, r1, #9
 8007b60:	4610      	mov	r0, r2
 8007b62:	4619      	mov	r1, r3
 8007b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b66:	2200      	movs	r2, #0
 8007b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b70:	f7f9 f83a 	bl	8000be8 <__aeabi_uldivmod>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	4613      	mov	r3, r2
 8007b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b7c:	e058      	b.n	8007c30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b7e:	4b38      	ldr	r3, [pc, #224]	; (8007c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	099b      	lsrs	r3, r3, #6
 8007b84:	2200      	movs	r2, #0
 8007b86:	4618      	mov	r0, r3
 8007b88:	4611      	mov	r1, r2
 8007b8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007b8e:	623b      	str	r3, [r7, #32]
 8007b90:	2300      	movs	r3, #0
 8007b92:	627b      	str	r3, [r7, #36]	; 0x24
 8007b94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007b98:	4642      	mov	r2, r8
 8007b9a:	464b      	mov	r3, r9
 8007b9c:	f04f 0000 	mov.w	r0, #0
 8007ba0:	f04f 0100 	mov.w	r1, #0
 8007ba4:	0159      	lsls	r1, r3, #5
 8007ba6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007baa:	0150      	lsls	r0, r2, #5
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	4641      	mov	r1, r8
 8007bb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8007bbc:	f04f 0200 	mov.w	r2, #0
 8007bc0:	f04f 0300 	mov.w	r3, #0
 8007bc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007bc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007bcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007bd0:	ebb2 040a 	subs.w	r4, r2, sl
 8007bd4:	eb63 050b 	sbc.w	r5, r3, fp
 8007bd8:	f04f 0200 	mov.w	r2, #0
 8007bdc:	f04f 0300 	mov.w	r3, #0
 8007be0:	00eb      	lsls	r3, r5, #3
 8007be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007be6:	00e2      	lsls	r2, r4, #3
 8007be8:	4614      	mov	r4, r2
 8007bea:	461d      	mov	r5, r3
 8007bec:	4643      	mov	r3, r8
 8007bee:	18e3      	adds	r3, r4, r3
 8007bf0:	603b      	str	r3, [r7, #0]
 8007bf2:	464b      	mov	r3, r9
 8007bf4:	eb45 0303 	adc.w	r3, r5, r3
 8007bf8:	607b      	str	r3, [r7, #4]
 8007bfa:	f04f 0200 	mov.w	r2, #0
 8007bfe:	f04f 0300 	mov.w	r3, #0
 8007c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c06:	4629      	mov	r1, r5
 8007c08:	028b      	lsls	r3, r1, #10
 8007c0a:	4621      	mov	r1, r4
 8007c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c10:	4621      	mov	r1, r4
 8007c12:	028a      	lsls	r2, r1, #10
 8007c14:	4610      	mov	r0, r2
 8007c16:	4619      	mov	r1, r3
 8007c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	61bb      	str	r3, [r7, #24]
 8007c1e:	61fa      	str	r2, [r7, #28]
 8007c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c24:	f7f8 ffe0 	bl	8000be8 <__aeabi_uldivmod>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c30:	4b0b      	ldr	r3, [pc, #44]	; (8007c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	0c1b      	lsrs	r3, r3, #16
 8007c36:	f003 0303 	and.w	r3, r3, #3
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	005b      	lsls	r3, r3, #1
 8007c3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007c40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c4a:	e002      	b.n	8007c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c4c:	4b05      	ldr	r3, [pc, #20]	; (8007c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8007c4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3750      	adds	r7, #80	; 0x50
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c5e:	bf00      	nop
 8007c60:	40023800 	.word	0x40023800
 8007c64:	00f42400 	.word	0x00f42400
 8007c68:	007a1200 	.word	0x007a1200

08007c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c70:	4b03      	ldr	r3, [pc, #12]	; (8007c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c72:	681b      	ldr	r3, [r3, #0]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	20000000 	.word	0x20000000

08007c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007c88:	f7ff fff0 	bl	8007c6c <HAL_RCC_GetHCLKFreq>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	4b05      	ldr	r3, [pc, #20]	; (8007ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	0a9b      	lsrs	r3, r3, #10
 8007c94:	f003 0307 	and.w	r3, r3, #7
 8007c98:	4903      	ldr	r1, [pc, #12]	; (8007ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c9a:	5ccb      	ldrb	r3, [r1, r3]
 8007c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	40023800 	.word	0x40023800
 8007ca8:	0801603c 	.word	0x0801603c

08007cac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	220f      	movs	r2, #15
 8007cba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007cbc:	4b12      	ldr	r3, [pc, #72]	; (8007d08 <HAL_RCC_GetClockConfig+0x5c>)
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f003 0203 	and.w	r2, r3, #3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007cc8:	4b0f      	ldr	r3, [pc, #60]	; (8007d08 <HAL_RCC_GetClockConfig+0x5c>)
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007cd4:	4b0c      	ldr	r3, [pc, #48]	; (8007d08 <HAL_RCC_GetClockConfig+0x5c>)
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007ce0:	4b09      	ldr	r3, [pc, #36]	; (8007d08 <HAL_RCC_GetClockConfig+0x5c>)
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	08db      	lsrs	r3, r3, #3
 8007ce6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007cee:	4b07      	ldr	r3, [pc, #28]	; (8007d0c <HAL_RCC_GetClockConfig+0x60>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0207 	and.w	r2, r3, #7
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	601a      	str	r2, [r3, #0]
}
 8007cfa:	bf00      	nop
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	40023800 	.word	0x40023800
 8007d0c:	40023c00 	.word	0x40023c00

08007d10 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e022      	b.n	8007d68 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d105      	bne.n	8007d3a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7fa fe23 	bl	8002980 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2203      	movs	r2, #3
 8007d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f814 	bl	8007d70 <HAL_SD_InitCard>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d001      	beq.n	8007d52 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e00a      	b.n	8007d68 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d70:	b5b0      	push	{r4, r5, r7, lr}
 8007d72:	b08e      	sub	sp, #56	; 0x38
 8007d74:	af04      	add	r7, sp, #16
 8007d76:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007d80:	2300      	movs	r3, #0
 8007d82:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007d84:	2300      	movs	r3, #0
 8007d86:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007d8c:	2376      	movs	r3, #118	; 0x76
 8007d8e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681d      	ldr	r5, [r3, #0]
 8007d94:	466c      	mov	r4, sp
 8007d96:	f107 0314 	add.w	r3, r7, #20
 8007d9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007da2:	f107 0308 	add.w	r3, r7, #8
 8007da6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007da8:	4628      	mov	r0, r5
 8007daa:	f002 fd79 	bl	800a8a0 <SDIO_Init>
 8007dae:	4603      	mov	r3, r0
 8007db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e04f      	b.n	8007e60 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007dc0:	4b29      	ldr	r3, [pc, #164]	; (8007e68 <HAL_SD_InitCard+0xf8>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f002 fdb1 	bl	800a932 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007dd0:	4b25      	ldr	r3, [pc, #148]	; (8007e68 <HAL_SD_InitCard+0xf8>)
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007dd6:	2002      	movs	r0, #2
 8007dd8:	f7fc ffec 	bl	8004db4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f001 f805 	bl	8008dec <SD_PowerON>
 8007de2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00b      	beq.n	8007e02 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e02e      	b.n	8007e60 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 ff24 	bl	8008c50 <SD_InitCard>
 8007e08:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e0a:	6a3b      	ldr	r3, [r7, #32]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00b      	beq.n	8007e28 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e01b      	b.n	8007e60 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e30:	4618      	mov	r0, r3
 8007e32:	f002 fe10 	bl	800aa56 <SDMMC_CmdBlockLength>
 8007e36:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00f      	beq.n	8007e5e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a0a      	ldr	r2, [pc, #40]	; (8007e6c <HAL_SD_InitCard+0xfc>)
 8007e44:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e000      	b.n	8007e60 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3728      	adds	r7, #40	; 0x28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bdb0      	pop	{r4, r5, r7, pc}
 8007e68:	422580a0 	.word	0x422580a0
 8007e6c:	004005ff 	.word	0x004005ff

08007e70 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08c      	sub	sp, #48	; 0x30
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
 8007e7c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d107      	bne.n	8007e98 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e0c0      	b.n	800801a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	f040 80b9 	bne.w	8008018 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	441a      	add	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d907      	bls.n	8007eca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e0a7      	b.n	800801a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2203      	movs	r2, #3
 8007ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	6812      	ldr	r2, [r2, #0]
 8007ee4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8007ee8:	f043 0302 	orr.w	r3, r3, #2
 8007eec:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef2:	4a4c      	ldr	r2, [pc, #304]	; (8008024 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007ef4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	4a4b      	ldr	r2, [pc, #300]	; (8008028 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007efc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	2200      	movs	r2, #0
 8007f04:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	689a      	ldr	r2, [r3, #8]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	430a      	orrs	r2, r1
 8007f28:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3380      	adds	r3, #128	; 0x80
 8007f34:	4619      	mov	r1, r3
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	025b      	lsls	r3, r3, #9
 8007f3c:	089b      	lsrs	r3, r3, #2
 8007f3e:	f7fd fb2f 	bl	80055a0 <HAL_DMA_Start_IT>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d017      	beq.n	8007f78 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007f56:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a33      	ldr	r2, [pc, #204]	; (800802c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007f5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e050      	b.n	800801a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007f78:	4b2d      	ldr	r3, [pc, #180]	; (8008030 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d002      	beq.n	8007f8c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	025b      	lsls	r3, r3, #9
 8007f8a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f90:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	025b      	lsls	r3, r3, #9
 8007f96:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007f98:	2390      	movs	r3, #144	; 0x90
 8007f9a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f107 0210 	add.w	r2, r7, #16
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f002 fd23 	bl	800a9fe <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d90a      	bls.n	8007fd4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2282      	movs	r2, #130	; 0x82
 8007fc2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f002 fd87 	bl	800aade <SDMMC_CmdReadMultiBlock>
 8007fd0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007fd2:	e009      	b.n	8007fe8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2281      	movs	r2, #129	; 0x81
 8007fd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f002 fd5a 	bl	800aa9a <SDMMC_CmdReadSingleBlock>
 8007fe6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d012      	beq.n	8008014 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a0e      	ldr	r2, [pc, #56]	; (800802c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007ff4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffc:	431a      	orrs	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e002      	b.n	800801a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	e000      	b.n	800801a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8008018:	2302      	movs	r3, #2
  }
}
 800801a:	4618      	mov	r0, r3
 800801c:	3730      	adds	r7, #48	; 0x30
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	08008a5f 	.word	0x08008a5f
 8008028:	08008ad1 	.word	0x08008ad1
 800802c:	004005ff 	.word	0x004005ff
 8008030:	4225858c 	.word	0x4225858c

08008034 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b08c      	sub	sp, #48	; 0x30
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d107      	bne.n	800805c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008050:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e0c5      	b.n	80081e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b01      	cmp	r3, #1
 8008066:	f040 80be 	bne.w	80081e6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	441a      	add	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800807a:	429a      	cmp	r2, r3
 800807c:	d907      	bls.n	800808e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008082:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e0ac      	b.n	80081e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2203      	movs	r2, #3
 8008092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2200      	movs	r2, #0
 800809c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	6812      	ldr	r2, [r2, #0]
 80080a8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80080ac:	f043 0302 	orr.w	r3, r3, #2
 80080b0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b6:	4a4e      	ldr	r2, [pc, #312]	; (80081f0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80080b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080be:	4a4d      	ldr	r2, [pc, #308]	; (80081f4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80080c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c6:	2200      	movs	r2, #0
 80080c8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d002      	beq.n	80080d8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80080d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d4:	025b      	lsls	r3, r3, #9
 80080d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d90a      	bls.n	80080f4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	22a0      	movs	r2, #160	; 0xa0
 80080e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080ea:	4618      	mov	r0, r3
 80080ec:	f002 fd3b 	bl	800ab66 <SDMMC_CmdWriteMultiBlock>
 80080f0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80080f2:	e009      	b.n	8008108 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2290      	movs	r2, #144	; 0x90
 80080f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008100:	4618      	mov	r0, r3
 8008102:	f002 fd0e 	bl	800ab22 <SDMMC_CmdWriteSingleBlock>
 8008106:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810a:	2b00      	cmp	r3, #0
 800810c:	d012      	beq.n	8008134 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a39      	ldr	r2, [pc, #228]	; (80081f8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008114:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811c:	431a      	orrs	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e059      	b.n	80081e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008134:	4b31      	ldr	r3, [pc, #196]	; (80081fc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008136:	2201      	movs	r2, #1
 8008138:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813e:	2240      	movs	r2, #64	; 0x40
 8008140:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008152:	689a      	ldr	r2, [r3, #8]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	430a      	orrs	r2, r1
 800815c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008162:	68b9      	ldr	r1, [r7, #8]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3380      	adds	r3, #128	; 0x80
 800816a:	461a      	mov	r2, r3
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	025b      	lsls	r3, r3, #9
 8008170:	089b      	lsrs	r3, r3, #2
 8008172:	f7fd fa15 	bl	80055a0 <HAL_DMA_Start_IT>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d01c      	beq.n	80081b6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	6812      	ldr	r2, [r2, #0]
 8008186:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800818a:	f023 0302 	bic.w	r3, r3, #2
 800818e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a18      	ldr	r2, [pc, #96]	; (80081f8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008196:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e018      	b.n	80081e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081b6:	f04f 33ff 	mov.w	r3, #4294967295
 80081ba:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	025b      	lsls	r3, r3, #9
 80081c0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80081c2:	2390      	movs	r3, #144	; 0x90
 80081c4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80081c6:	2300      	movs	r3, #0
 80081c8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80081ce:	2301      	movs	r3, #1
 80081d0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f107 0210 	add.w	r2, r7, #16
 80081da:	4611      	mov	r1, r2
 80081dc:	4618      	mov	r0, r3
 80081de:	f002 fc0e 	bl	800a9fe <SDIO_ConfigData>

      return HAL_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	e000      	b.n	80081e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80081e6:	2302      	movs	r3, #2
  }
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3730      	adds	r7, #48	; 0x30
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	08008a35 	.word	0x08008a35
 80081f4:	08008ad1 	.word	0x08008ad1
 80081f8:	004005ff 	.word	0x004005ff
 80081fc:	4225858c 	.word	0x4225858c

08008200 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d008      	beq.n	800822e <HAL_SD_IRQHandler+0x2e>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f003 0308 	and.w	r3, r3, #8
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 ffff 	bl	800922a <SD_Read_IT>
 800822c:	e165      	b.n	80084fa <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 808f 	beq.w	800835c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008246:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	6812      	ldr	r2, [r2, #0]
 8008252:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8008256:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800825a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f022 0201 	bic.w	r2, r2, #1
 800826a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f003 0308 	and.w	r3, r3, #8
 8008272:	2b00      	cmp	r3, #0
 8008274:	d039      	beq.n	80082ea <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f003 0302 	and.w	r3, r3, #2
 800827c:	2b00      	cmp	r3, #0
 800827e:	d104      	bne.n	800828a <HAL_SD_IRQHandler+0x8a>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f003 0320 	and.w	r3, r3, #32
 8008286:	2b00      	cmp	r3, #0
 8008288:	d011      	beq.n	80082ae <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4618      	mov	r0, r3
 8008290:	f002 fc8c 	bl	800abac <SDMMC_CmdStopTransfer>
 8008294:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d008      	beq.n	80082ae <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	431a      	orrs	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f92f 	bl	800850c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f240 523a 	movw	r2, #1338	; 0x53a
 80082b6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d104      	bne.n	80082da <HAL_SD_IRQHandler+0xda>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f003 0302 	and.w	r3, r3, #2
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f003 f8ec 	bl	800b4b8 <HAL_SD_RxCpltCallback>
 80082e0:	e10b      	b.n	80084fa <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f003 f8de 	bl	800b4a4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80082e8:	e107      	b.n	80084fa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 8102 	beq.w	80084fa <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f003 0320 	and.w	r3, r3, #32
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d011      	beq.n	8008324 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4618      	mov	r0, r3
 8008306:	f002 fc51 	bl	800abac <SDMMC_CmdStopTransfer>
 800830a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d008      	beq.n	8008324 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	431a      	orrs	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f8f4 	bl	800850c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b00      	cmp	r3, #0
 800832c:	f040 80e5 	bne.w	80084fa <HAL_SD_IRQHandler+0x2fa>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f003 0302 	and.w	r3, r3, #2
 8008336:	2b00      	cmp	r3, #0
 8008338:	f040 80df 	bne.w	80084fa <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f022 0208 	bic.w	r2, r2, #8
 800834a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f003 f8a5 	bl	800b4a4 <HAL_SD_TxCpltCallback>
}
 800835a:	e0ce      	b.n	80084fa <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d008      	beq.n	800837c <HAL_SD_IRQHandler+0x17c>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f003 0308 	and.w	r3, r3, #8
 8008370:	2b00      	cmp	r3, #0
 8008372:	d003      	beq.n	800837c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 ffa9 	bl	80092cc <SD_Write_IT>
 800837a:	e0be      	b.n	80084fa <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008382:	f240 233a 	movw	r3, #570	; 0x23a
 8008386:	4013      	ands	r3, r2
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 80b6 	beq.w	80084fa <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008394:	f003 0302 	and.w	r3, r3, #2
 8008398:	2b00      	cmp	r3, #0
 800839a:	d005      	beq.n	80083a8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a0:	f043 0202 	orr.w	r2, r3, #2
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ae:	f003 0308 	and.w	r3, r3, #8
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d005      	beq.n	80083c2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ba:	f043 0208 	orr.w	r2, r3, #8
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c8:	f003 0320 	and.w	r3, r3, #32
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d005      	beq.n	80083dc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d4:	f043 0220 	orr.w	r2, r3, #32
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e2:	f003 0310 	and.w	r3, r3, #16
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d005      	beq.n	80083f6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ee:	f043 0210 	orr.w	r2, r3, #16
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008400:	2b00      	cmp	r3, #0
 8008402:	d005      	beq.n	8008410 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008408:	f043 0208 	orr.w	r2, r3, #8
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f240 723a 	movw	r2, #1850	; 0x73a
 8008418:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	6812      	ldr	r2, [r2, #0]
 8008424:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8008428:	f023 0302 	bic.w	r3, r3, #2
 800842c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4618      	mov	r0, r3
 8008434:	f002 fbba 	bl	800abac <SDMMC_CmdStopTransfer>
 8008438:	4602      	mov	r2, r0
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843e:	431a      	orrs	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f003 0308 	and.w	r3, r3, #8
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f855 	bl	800850c <HAL_SD_ErrorCallback>
}
 8008462:	e04a      	b.n	80084fa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846a:	2b00      	cmp	r3, #0
 800846c:	d045      	beq.n	80084fa <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f003 0310 	and.w	r3, r3, #16
 8008474:	2b00      	cmp	r3, #0
 8008476:	d104      	bne.n	8008482 <HAL_SD_IRQHandler+0x282>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f003 0320 	and.w	r3, r3, #32
 800847e:	2b00      	cmp	r3, #0
 8008480:	d011      	beq.n	80084a6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008486:	4a1f      	ldr	r2, [pc, #124]	; (8008504 <HAL_SD_IRQHandler+0x304>)
 8008488:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848e:	4618      	mov	r0, r3
 8008490:	f7fd f8de 	bl	8005650 <HAL_DMA_Abort_IT>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d02f      	beq.n	80084fa <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 fb68 	bl	8008b74 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80084a4:	e029      	b.n	80084fa <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d104      	bne.n	80084ba <HAL_SD_IRQHandler+0x2ba>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d011      	beq.n	80084de <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084be:	4a12      	ldr	r2, [pc, #72]	; (8008508 <HAL_SD_IRQHandler+0x308>)
 80084c0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fd f8c2 	bl	8005650 <HAL_DMA_Abort_IT>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d013      	beq.n	80084fa <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 fb83 	bl	8008be2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80084dc:	e00d      	b.n	80084fa <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f002 ffcc 	bl	800b490 <HAL_SD_AbortCallback>
}
 80084f8:	e7ff      	b.n	80084fa <HAL_SD_IRQHandler+0x2fa>
 80084fa:	bf00      	nop
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	08008b75 	.word	0x08008b75
 8008508:	08008be3 	.word	0x08008be3

0800850c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800852e:	0f9b      	lsrs	r3, r3, #30
 8008530:	b2da      	uxtb	r2, r3
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800853a:	0e9b      	lsrs	r3, r3, #26
 800853c:	b2db      	uxtb	r3, r3
 800853e:	f003 030f 	and.w	r3, r3, #15
 8008542:	b2da      	uxtb	r2, r3
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800854c:	0e1b      	lsrs	r3, r3, #24
 800854e:	b2db      	uxtb	r3, r3
 8008550:	f003 0303 	and.w	r3, r3, #3
 8008554:	b2da      	uxtb	r2, r3
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800855e:	0c1b      	lsrs	r3, r3, #16
 8008560:	b2da      	uxtb	r2, r3
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800856a:	0a1b      	lsrs	r3, r3, #8
 800856c:	b2da      	uxtb	r2, r3
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008576:	b2da      	uxtb	r2, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008580:	0d1b      	lsrs	r3, r3, #20
 8008582:	b29a      	uxth	r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800858c:	0c1b      	lsrs	r3, r3, #16
 800858e:	b2db      	uxtb	r3, r3
 8008590:	f003 030f 	and.w	r3, r3, #15
 8008594:	b2da      	uxtb	r2, r3
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800859e:	0bdb      	lsrs	r3, r3, #15
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085b0:	0b9b      	lsrs	r3, r3, #14
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	f003 0301 	and.w	r3, r3, #1
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085c2:	0b5b      	lsrs	r3, r3, #13
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085d4:	0b1b      	lsrs	r3, r3, #12
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2200      	movs	r2, #0
 80085e6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d163      	bne.n	80086b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085f4:	009a      	lsls	r2, r3, #2
 80085f6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80085fa:	4013      	ands	r3, r2
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008600:	0f92      	lsrs	r2, r2, #30
 8008602:	431a      	orrs	r2, r3
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800860c:	0edb      	lsrs	r3, r3, #27
 800860e:	b2db      	uxtb	r3, r3
 8008610:	f003 0307 	and.w	r3, r3, #7
 8008614:	b2da      	uxtb	r2, r3
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800861e:	0e1b      	lsrs	r3, r3, #24
 8008620:	b2db      	uxtb	r3, r3
 8008622:	f003 0307 	and.w	r3, r3, #7
 8008626:	b2da      	uxtb	r2, r3
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008630:	0d5b      	lsrs	r3, r3, #21
 8008632:	b2db      	uxtb	r3, r3
 8008634:	f003 0307 	and.w	r3, r3, #7
 8008638:	b2da      	uxtb	r2, r3
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008642:	0c9b      	lsrs	r3, r3, #18
 8008644:	b2db      	uxtb	r3, r3
 8008646:	f003 0307 	and.w	r3, r3, #7
 800864a:	b2da      	uxtb	r2, r3
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008654:	0bdb      	lsrs	r3, r3, #15
 8008656:	b2db      	uxtb	r3, r3
 8008658:	f003 0307 	and.w	r3, r3, #7
 800865c:	b2da      	uxtb	r2, r3
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	1c5a      	adds	r2, r3, #1
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	7e1b      	ldrb	r3, [r3, #24]
 8008670:	b2db      	uxtb	r3, r3
 8008672:	f003 0307 	and.w	r3, r3, #7
 8008676:	3302      	adds	r3, #2
 8008678:	2201      	movs	r2, #1
 800867a:	fa02 f303 	lsl.w	r3, r2, r3
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008682:	fb03 f202 	mul.w	r2, r3, r2
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	7a1b      	ldrb	r3, [r3, #8]
 800868e:	b2db      	uxtb	r3, r3
 8008690:	f003 030f 	and.w	r3, r3, #15
 8008694:	2201      	movs	r2, #1
 8008696:	409a      	lsls	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80086a4:	0a52      	lsrs	r2, r2, #9
 80086a6:	fb03 f202 	mul.w	r2, r3, r2
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086b4:	661a      	str	r2, [r3, #96]	; 0x60
 80086b6:	e031      	b.n	800871c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d11d      	bne.n	80086fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086c4:	041b      	lsls	r3, r3, #16
 80086c6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086ce:	0c1b      	lsrs	r3, r3, #16
 80086d0:	431a      	orrs	r2, r3
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	3301      	adds	r3, #1
 80086dc:	029a      	lsls	r2, r3, #10
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086f0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	661a      	str	r2, [r3, #96]	; 0x60
 80086fa:	e00f      	b.n	800871c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a58      	ldr	r2, [pc, #352]	; (8008864 <HAL_SD_GetCardCSD+0x344>)
 8008702:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008708:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e09d      	b.n	8008858 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008720:	0b9b      	lsrs	r3, r3, #14
 8008722:	b2db      	uxtb	r3, r3
 8008724:	f003 0301 	and.w	r3, r3, #1
 8008728:	b2da      	uxtb	r2, r3
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008732:	09db      	lsrs	r3, r3, #7
 8008734:	b2db      	uxtb	r3, r3
 8008736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800873a:	b2da      	uxtb	r2, r3
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008744:	b2db      	uxtb	r3, r3
 8008746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800874a:	b2da      	uxtb	r2, r3
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008754:	0fdb      	lsrs	r3, r3, #31
 8008756:	b2da      	uxtb	r2, r3
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008760:	0f5b      	lsrs	r3, r3, #29
 8008762:	b2db      	uxtb	r3, r3
 8008764:	f003 0303 	and.w	r3, r3, #3
 8008768:	b2da      	uxtb	r2, r3
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008772:	0e9b      	lsrs	r3, r3, #26
 8008774:	b2db      	uxtb	r3, r3
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	b2da      	uxtb	r2, r3
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008784:	0d9b      	lsrs	r3, r3, #22
 8008786:	b2db      	uxtb	r3, r3
 8008788:	f003 030f 	and.w	r3, r3, #15
 800878c:	b2da      	uxtb	r2, r3
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008796:	0d5b      	lsrs	r3, r3, #21
 8008798:	b2db      	uxtb	r3, r3
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b2:	0c1b      	lsrs	r3, r3, #16
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c6:	0bdb      	lsrs	r3, r3, #15
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087da:	0b9b      	lsrs	r3, r3, #14
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	b2da      	uxtb	r2, r3
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ee:	0b5b      	lsrs	r3, r3, #13
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008802:	0b1b      	lsrs	r3, r3, #12
 8008804:	b2db      	uxtb	r3, r3
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	b2da      	uxtb	r2, r3
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008816:	0a9b      	lsrs	r3, r3, #10
 8008818:	b2db      	uxtb	r3, r3
 800881a:	f003 0303 	and.w	r3, r3, #3
 800881e:	b2da      	uxtb	r2, r3
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882a:	0a1b      	lsrs	r3, r3, #8
 800882c:	b2db      	uxtb	r3, r3
 800882e:	f003 0303 	and.w	r3, r3, #3
 8008832:	b2da      	uxtb	r2, r3
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800883e:	085b      	lsrs	r3, r3, #1
 8008840:	b2db      	uxtb	r3, r3
 8008842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008846:	b2da      	uxtb	r2, r3
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	004005ff 	.word	0x004005ff

08008868 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80088c0:	b5b0      	push	{r4, r5, r7, lr}
 80088c2:	b08e      	sub	sp, #56	; 0x38
 80088c4:	af04      	add	r7, sp, #16
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2203      	movs	r2, #3
 80088d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088dc:	2b03      	cmp	r3, #3
 80088de:	d02e      	beq.n	800893e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e6:	d106      	bne.n	80088f6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	639a      	str	r2, [r3, #56]	; 0x38
 80088f4:	e029      	b.n	800894a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088fc:	d10a      	bne.n	8008914 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fb2a 	bl	8008f58 <SD_WideBus_Enable>
 8008904:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	431a      	orrs	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	639a      	str	r2, [r3, #56]	; 0x38
 8008912:	e01a      	b.n	800894a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10a      	bne.n	8008930 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fb67 	bl	8008fee <SD_WideBus_Disable>
 8008920:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	431a      	orrs	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	639a      	str	r2, [r3, #56]	; 0x38
 800892e:	e00c      	b.n	800894a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008934:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	639a      	str	r2, [r3, #56]	; 0x38
 800893c:	e005      	b.n	800894a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008942:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00b      	beq.n	800896a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a26      	ldr	r2, [pc, #152]	; (80089f0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008958:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008968:	e01f      	b.n	80089aa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681d      	ldr	r5, [r3, #0]
 8008990:	466c      	mov	r4, sp
 8008992:	f107 0314 	add.w	r3, r7, #20
 8008996:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800899a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800899e:	f107 0308 	add.w	r3, r7, #8
 80089a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089a4:	4628      	mov	r0, r5
 80089a6:	f001 ff7b 	bl	800a8a0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80089b2:	4618      	mov	r0, r3
 80089b4:	f002 f84f 	bl	800aa56 <SDMMC_CmdBlockLength>
 80089b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00c      	beq.n	80089da <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a0a      	ldr	r2, [pc, #40]	; (80089f0 <HAL_SD_ConfigWideBusOperation+0x130>)
 80089c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	431a      	orrs	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80089e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3728      	adds	r7, #40	; 0x28
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bdb0      	pop	{r4, r5, r7, pc}
 80089ee:	bf00      	nop
 80089f0:	004005ff 	.word	0x004005ff

080089f4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008a00:	f107 030c 	add.w	r3, r7, #12
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fa7e 	bl	8008f08 <SD_SendStatus>
 8008a0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d005      	beq.n	8008a20 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	0a5b      	lsrs	r3, r3, #9
 8008a24:	f003 030f 	and.w	r3, r3, #15
 8008a28:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008a2a:	693b      	ldr	r3, [r7, #16]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3718      	adds	r7, #24
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a40:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a50:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008a52:	bf00      	nop
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a70:	2b82      	cmp	r3, #130	; 0x82
 8008a72:	d111      	bne.n	8008a98 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f002 f897 	bl	800abac <SDMMC_CmdStopTransfer>
 8008a7e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d008      	beq.n	8008a98 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	431a      	orrs	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f7ff fd3a 	bl	800850c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0208 	bic.w	r2, r2, #8
 8008aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ab0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f002 fcf9 	bl	800b4b8 <HAL_SD_RxCpltCallback>
#endif
}
 8008ac6:	bf00      	nop
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
	...

08008ad0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008adc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f7fc ffb6 	bl	8005a50 <HAL_DMA_GetError>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d03e      	beq.n	8008b68 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d002      	beq.n	8008b06 <SD_DMAError+0x36>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d12d      	bne.n	8008b62 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a19      	ldr	r2, [pc, #100]	; (8008b70 <SD_DMAError+0xa0>)
 8008b0c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008b1c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b22:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008b2a:	6978      	ldr	r0, [r7, #20]
 8008b2c:	f7ff ff62 	bl	80089f4 <HAL_SD_GetCardState>
 8008b30:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2b06      	cmp	r3, #6
 8008b36:	d002      	beq.n	8008b3e <SD_DMAError+0x6e>
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	2b05      	cmp	r3, #5
 8008b3c:	d10a      	bne.n	8008b54 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f002 f832 	bl	800abac <SDMMC_CmdStopTransfer>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4e:	431a      	orrs	r2, r3
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008b62:	6978      	ldr	r0, [r7, #20]
 8008b64:	f7ff fcd2 	bl	800850c <HAL_SD_ErrorCallback>
#endif
  }
}
 8008b68:	bf00      	nop
 8008b6a:	3718      	adds	r7, #24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	004005ff 	.word	0x004005ff

08008b74 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b80:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f240 523a 	movw	r2, #1338	; 0x53a
 8008b8a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f7ff ff31 	bl	80089f4 <HAL_SD_GetCardState>
 8008b92:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2b06      	cmp	r3, #6
 8008ba6:	d002      	beq.n	8008bae <SD_DMATxAbort+0x3a>
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	2b05      	cmp	r3, #5
 8008bac:	d10a      	bne.n	8008bc4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f001 fffa 	bl	800abac <SDMMC_CmdStopTransfer>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbe:	431a      	orrs	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d103      	bne.n	8008bd4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f002 fc5f 	bl	800b490 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008bd2:	e002      	b.n	8008bda <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7ff fc99 	bl	800850c <HAL_SD_ErrorCallback>
}
 8008bda:	bf00      	nop
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bee:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f240 523a 	movw	r2, #1338	; 0x53a
 8008bf8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f7ff fefa 	bl	80089f4 <HAL_SD_GetCardState>
 8008c00:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2b06      	cmp	r3, #6
 8008c14:	d002      	beq.n	8008c1c <SD_DMARxAbort+0x3a>
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	2b05      	cmp	r3, #5
 8008c1a:	d10a      	bne.n	8008c32 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f001 ffc3 	bl	800abac <SDMMC_CmdStopTransfer>
 8008c26:	4602      	mov	r2, r0
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2c:	431a      	orrs	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d103      	bne.n	8008c42 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f002 fc28 	bl	800b490 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008c40:	e002      	b.n	8008c48 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f7ff fc62 	bl	800850c <HAL_SD_ErrorCallback>
}
 8008c48:	bf00      	nop
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c50:	b5b0      	push	{r4, r5, r7, lr}
 8008c52:	b094      	sub	sp, #80	; 0x50
 8008c54:	af04      	add	r7, sp, #16
 8008c56:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f001 fe74 	bl	800a94e <SDIO_GetPowerState>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d102      	bne.n	8008c72 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c70:	e0b8      	b.n	8008de4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d02f      	beq.n	8008cda <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f002 f89e 	bl	800adc0 <SDMMC_CmdSendCID>
 8008c84:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <SD_InitCard+0x40>
    {
      return errorstate;
 8008c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8e:	e0a9      	b.n	8008de4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2100      	movs	r1, #0
 8008c96:	4618      	mov	r0, r3
 8008c98:	f001 fe9e 	bl	800a9d8 <SDIO_GetResponse>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2104      	movs	r1, #4
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f001 fe95 	bl	800a9d8 <SDIO_GetResponse>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2108      	movs	r1, #8
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f001 fe8c 	bl	800a9d8 <SDIO_GetResponse>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	210c      	movs	r1, #12
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f001 fe83 	bl	800a9d8 <SDIO_GetResponse>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cde:	2b03      	cmp	r3, #3
 8008ce0:	d00d      	beq.n	8008cfe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f107 020e 	add.w	r2, r7, #14
 8008cea:	4611      	mov	r1, r2
 8008cec:	4618      	mov	r0, r3
 8008cee:	f002 f8a4 	bl	800ae3a <SDMMC_CmdSetRelAdd>
 8008cf2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <SD_InitCard+0xae>
    {
      return errorstate;
 8008cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfc:	e072      	b.n	8008de4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	d036      	beq.n	8008d74 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008d06:	89fb      	ldrh	r3, [r7, #14]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d16:	041b      	lsls	r3, r3, #16
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	f002 f86e 	bl	800adfc <SDMMC_CmdSendCSD>
 8008d20:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2a:	e05b      	b.n	8008de4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2100      	movs	r1, #0
 8008d32:	4618      	mov	r0, r3
 8008d34:	f001 fe50 	bl	800a9d8 <SDIO_GetResponse>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2104      	movs	r1, #4
 8008d44:	4618      	mov	r0, r3
 8008d46:	f001 fe47 	bl	800a9d8 <SDIO_GetResponse>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2108      	movs	r1, #8
 8008d56:	4618      	mov	r0, r3
 8008d58:	f001 fe3e 	bl	800a9d8 <SDIO_GetResponse>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	210c      	movs	r1, #12
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f001 fe35 	bl	800a9d8 <SDIO_GetResponse>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2104      	movs	r1, #4
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f001 fe2c 	bl	800a9d8 <SDIO_GetResponse>
 8008d80:	4603      	mov	r3, r0
 8008d82:	0d1a      	lsrs	r2, r3, #20
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008d88:	f107 0310 	add.w	r3, r7, #16
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7ff fbc6 	bl	8008520 <HAL_SD_GetCardCSD>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d002      	beq.n	8008da0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008d9e:	e021      	b.n	8008de4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6819      	ldr	r1, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da8:	041b      	lsls	r3, r3, #16
 8008daa:	2200      	movs	r2, #0
 8008dac:	461c      	mov	r4, r3
 8008dae:	4615      	mov	r5, r2
 8008db0:	4622      	mov	r2, r4
 8008db2:	462b      	mov	r3, r5
 8008db4:	4608      	mov	r0, r1
 8008db6:	f001 ff1b 	bl	800abf0 <SDMMC_CmdSelDesel>
 8008dba:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <SD_InitCard+0x176>
  {
    return errorstate;
 8008dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc4:	e00e      	b.n	8008de4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681d      	ldr	r5, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	466c      	mov	r4, sp
 8008dce:	f103 0210 	add.w	r2, r3, #16
 8008dd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8008dd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008dd8:	3304      	adds	r3, #4
 8008dda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ddc:	4628      	mov	r0, r5
 8008dde:	f001 fd5f 	bl	800a8a0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3740      	adds	r7, #64	; 0x40
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bdb0      	pop	{r4, r5, r7, pc}

08008dec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008df4:	2300      	movs	r3, #0
 8008df6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	617b      	str	r3, [r7, #20]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f001 ff16 	bl	800ac36 <SDMMC_CmdGoIdleState>
 8008e0a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	e072      	b.n	8008efc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f001 ff29 	bl	800ac72 <SDMMC_CmdOperCond>
 8008e20:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00d      	beq.n	8008e44 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f001 feff 	bl	800ac36 <SDMMC_CmdGoIdleState>
 8008e38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d004      	beq.n	8008e4a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	e05b      	b.n	8008efc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d137      	bne.n	8008ec2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2100      	movs	r1, #0
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f001 ff29 	bl	800acb0 <SDMMC_CmdAppCommand>
 8008e5e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d02d      	beq.n	8008ec2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e6a:	e047      	b.n	8008efc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2100      	movs	r1, #0
 8008e72:	4618      	mov	r0, r3
 8008e74:	f001 ff1c 	bl	800acb0 <SDMMC_CmdAppCommand>
 8008e78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <SD_PowerON+0x98>
    {
      return errorstate;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	e03b      	b.n	8008efc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	491e      	ldr	r1, [pc, #120]	; (8008f04 <SD_PowerON+0x118>)
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f001 ff32 	bl	800acf4 <SDMMC_CmdAppOperCommand>
 8008e90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e9c:	e02e      	b.n	8008efc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f001 fd97 	bl	800a9d8 <SDIO_GetResponse>
 8008eaa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	0fdb      	lsrs	r3, r3, #31
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d101      	bne.n	8008eb8 <SD_PowerON+0xcc>
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e000      	b.n	8008eba <SD_PowerON+0xce>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	613b      	str	r3, [r7, #16]

    count++;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d802      	bhi.n	8008ed2 <SD_PowerON+0xe6>
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d0cc      	beq.n	8008e6c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d902      	bls.n	8008ee2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008edc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ee0:	e00c      	b.n	8008efc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d003      	beq.n	8008ef4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	645a      	str	r2, [r3, #68]	; 0x44
 8008ef2:	e002      	b.n	8008efa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3718      	adds	r7, #24
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	c1100000 	.word	0xc1100000

08008f08 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d102      	bne.n	8008f1e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008f18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f1c:	e018      	b.n	8008f50 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f26:	041b      	lsls	r3, r3, #16
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	f001 ffa6 	bl	800ae7c <SDMMC_CmdSendStatus>
 8008f30:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d001      	beq.n	8008f3c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	e009      	b.n	8008f50 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2100      	movs	r1, #0
 8008f42:	4618      	mov	r0, r3
 8008f44:	f001 fd48 	bl	800a9d8 <SDIO_GetResponse>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008f60:	2300      	movs	r3, #0
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	2300      	movs	r3, #0
 8008f66:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f001 fd32 	bl	800a9d8 <SDIO_GetResponse>
 8008f74:	4603      	mov	r3, r0
 8008f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f7e:	d102      	bne.n	8008f86 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008f80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f84:	e02f      	b.n	8008fe6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008f86:	f107 030c 	add.w	r3, r7, #12
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f879 	bl	8009084 <SD_FindSCR>
 8008f92:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	e023      	b.n	8008fe6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d01c      	beq.n	8008fe2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb0:	041b      	lsls	r3, r3, #16
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	f001 fe7b 	bl	800acb0 <SDMMC_CmdAppCommand>
 8008fba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d001      	beq.n	8008fc6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	e00f      	b.n	8008fe6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2102      	movs	r1, #2
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f001 feb4 	bl	800ad3a <SDMMC_CmdBusWidth>
 8008fd2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	e003      	b.n	8008fe6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	e001      	b.n	8008fe6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008fe2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3718      	adds	r7, #24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b086      	sub	sp, #24
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	60fb      	str	r3, [r7, #12]
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2100      	movs	r1, #0
 8009004:	4618      	mov	r0, r3
 8009006:	f001 fce7 	bl	800a9d8 <SDIO_GetResponse>
 800900a:	4603      	mov	r3, r0
 800900c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009010:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009014:	d102      	bne.n	800901c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009016:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800901a:	e02f      	b.n	800907c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800901c:	f107 030c 	add.w	r3, r7, #12
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f82e 	bl	8009084 <SD_FindSCR>
 8009028:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d001      	beq.n	8009034 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	e023      	b.n	800907c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800903a:	2b00      	cmp	r3, #0
 800903c:	d01c      	beq.n	8009078 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009046:	041b      	lsls	r3, r3, #16
 8009048:	4619      	mov	r1, r3
 800904a:	4610      	mov	r0, r2
 800904c:	f001 fe30 	bl	800acb0 <SDMMC_CmdAppCommand>
 8009050:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	e00f      	b.n	800907c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2100      	movs	r1, #0
 8009062:	4618      	mov	r0, r3
 8009064:	f001 fe69 	bl	800ad3a <SDMMC_CmdBusWidth>
 8009068:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	e003      	b.n	800907c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009074:	2300      	movs	r3, #0
 8009076:	e001      	b.n	800907c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009078:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800907c:	4618      	mov	r0, r3
 800907e:	3718      	adds	r7, #24
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009084:	b590      	push	{r4, r7, lr}
 8009086:	b08f      	sub	sp, #60	; 0x3c
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800908e:	f7fb fe85 	bl	8004d9c <HAL_GetTick>
 8009092:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009094:	2300      	movs	r3, #0
 8009096:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009098:	2300      	movs	r3, #0
 800909a:	60bb      	str	r3, [r7, #8]
 800909c:	2300      	movs	r3, #0
 800909e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2108      	movs	r1, #8
 80090aa:	4618      	mov	r0, r3
 80090ac:	f001 fcd3 	bl	800aa56 <SDMMC_CmdBlockLength>
 80090b0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80090b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <SD_FindSCR+0x38>
  {
    return errorstate;
 80090b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ba:	e0b2      	b.n	8009222 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c4:	041b      	lsls	r3, r3, #16
 80090c6:	4619      	mov	r1, r3
 80090c8:	4610      	mov	r0, r2
 80090ca:	f001 fdf1 	bl	800acb0 <SDMMC_CmdAppCommand>
 80090ce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80090d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <SD_FindSCR+0x56>
  {
    return errorstate;
 80090d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d8:	e0a3      	b.n	8009222 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090da:	f04f 33ff 	mov.w	r3, #4294967295
 80090de:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80090e0:	2308      	movs	r3, #8
 80090e2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80090e4:	2330      	movs	r3, #48	; 0x30
 80090e6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80090e8:	2302      	movs	r3, #2
 80090ea:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80090f0:	2301      	movs	r3, #1
 80090f2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f107 0210 	add.w	r2, r7, #16
 80090fc:	4611      	mov	r1, r2
 80090fe:	4618      	mov	r0, r3
 8009100:	f001 fc7d 	bl	800a9fe <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4618      	mov	r0, r3
 800910a:	f001 fe38 	bl	800ad7e <SDMMC_CmdSendSCR>
 800910e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009112:	2b00      	cmp	r3, #0
 8009114:	d02a      	beq.n	800916c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009118:	e083      	b.n	8009222 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00f      	beq.n	8009148 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6819      	ldr	r1, [r3, #0]
 800912c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	f107 0208 	add.w	r2, r7, #8
 8009134:	18d4      	adds	r4, r2, r3
 8009136:	4608      	mov	r0, r1
 8009138:	f001 fbdd 	bl	800a8f6 <SDIO_ReadFIFO>
 800913c:	4603      	mov	r3, r0
 800913e:	6023      	str	r3, [r4, #0]
      index++;
 8009140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009142:	3301      	adds	r3, #1
 8009144:	637b      	str	r3, [r7, #52]	; 0x34
 8009146:	e006      	b.n	8009156 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800914e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009152:	2b00      	cmp	r3, #0
 8009154:	d012      	beq.n	800917c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009156:	f7fb fe21 	bl	8004d9c <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009164:	d102      	bne.n	800916c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009166:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800916a:	e05a      	b.n	8009222 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009172:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009176:	2b00      	cmp	r3, #0
 8009178:	d0cf      	beq.n	800911a <SD_FindSCR+0x96>
 800917a:	e000      	b.n	800917e <SD_FindSCR+0xfa>
      break;
 800917c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009184:	f003 0308 	and.w	r3, r3, #8
 8009188:	2b00      	cmp	r3, #0
 800918a:	d005      	beq.n	8009198 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2208      	movs	r2, #8
 8009192:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009194:	2308      	movs	r3, #8
 8009196:	e044      	b.n	8009222 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919e:	f003 0302 	and.w	r3, r3, #2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d005      	beq.n	80091b2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2202      	movs	r2, #2
 80091ac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80091ae:	2302      	movs	r3, #2
 80091b0:	e037      	b.n	8009222 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b8:	f003 0320 	and.w	r3, r3, #32
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d005      	beq.n	80091cc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2220      	movs	r2, #32
 80091c6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80091c8:	2320      	movs	r3, #32
 80091ca:	e02a      	b.n	8009222 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f240 523a 	movw	r2, #1338	; 0x53a
 80091d4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	061a      	lsls	r2, r3, #24
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	021b      	lsls	r3, r3, #8
 80091de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091e2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	0a1b      	lsrs	r3, r3, #8
 80091e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80091ec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	0e1b      	lsrs	r3, r3, #24
 80091f2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80091f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f6:	601a      	str	r2, [r3, #0]
    scr++;
 80091f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fa:	3304      	adds	r3, #4
 80091fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	061a      	lsls	r2, r3, #24
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	021b      	lsls	r3, r3, #8
 8009206:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800920a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	0a1b      	lsrs	r3, r3, #8
 8009210:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009214:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	0e1b      	lsrs	r3, r3, #24
 800921a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800921c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	373c      	adds	r7, #60	; 0x3c
 8009226:	46bd      	mov	sp, r7
 8009228:	bd90      	pop	{r4, r7, pc}

0800922a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b086      	sub	sp, #24
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009236:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d03f      	beq.n	80092c4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009244:	2300      	movs	r3, #0
 8009246:	617b      	str	r3, [r7, #20]
 8009248:	e033      	b.n	80092b2 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4618      	mov	r0, r3
 8009250:	f001 fb51 	bl	800a8f6 <SDIO_ReadFIFO>
 8009254:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	b2da      	uxtb	r2, r3
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3301      	adds	r3, #1
 8009262:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	3b01      	subs	r3, #1
 8009268:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	0a1b      	lsrs	r3, r3, #8
 800926e:	b2da      	uxtb	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	3301      	adds	r3, #1
 8009278:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	3b01      	subs	r3, #1
 800927e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	0c1b      	lsrs	r3, r3, #16
 8009284:	b2da      	uxtb	r2, r3
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	701a      	strb	r2, [r3, #0]
      tmp++;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	3301      	adds	r3, #1
 800928e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	3b01      	subs	r3, #1
 8009294:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	0e1b      	lsrs	r3, r3, #24
 800929a:	b2da      	uxtb	r2, r3
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	701a      	strb	r2, [r3, #0]
      tmp++;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	3301      	adds	r3, #1
 80092a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	3b01      	subs	r3, #1
 80092aa:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	3301      	adds	r3, #1
 80092b0:	617b      	str	r3, [r7, #20]
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2b07      	cmp	r3, #7
 80092b6:	d9c8      	bls.n	800924a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80092c4:	bf00      	nop
 80092c6:	3718      	adds	r7, #24
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b086      	sub	sp, #24
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a1b      	ldr	r3, [r3, #32]
 80092d8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d043      	beq.n	800936e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80092e6:	2300      	movs	r3, #0
 80092e8:	617b      	str	r3, [r7, #20]
 80092ea:	e037      	b.n	800935c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3301      	adds	r3, #1
 80092f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	3b01      	subs	r3, #1
 80092fc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	021a      	lsls	r2, r3, #8
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	4313      	orrs	r3, r2
 8009308:	60bb      	str	r3, [r7, #8]
      tmp++;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3301      	adds	r3, #1
 800930e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	3b01      	subs	r3, #1
 8009314:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	041a      	lsls	r2, r3, #16
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	4313      	orrs	r3, r2
 8009320:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	3301      	adds	r3, #1
 8009326:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	3b01      	subs	r3, #1
 800932c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	061a      	lsls	r2, r3, #24
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	4313      	orrs	r3, r2
 8009338:	60bb      	str	r3, [r7, #8]
      tmp++;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	3301      	adds	r3, #1
 800933e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	3b01      	subs	r3, #1
 8009344:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f107 0208 	add.w	r2, r7, #8
 800934e:	4611      	mov	r1, r2
 8009350:	4618      	mov	r0, r3
 8009352:	f001 fadd 	bl	800a910 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	3301      	adds	r3, #1
 800935a:	617b      	str	r3, [r7, #20]
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	2b07      	cmp	r3, #7
 8009360:	d9c4      	bls.n	80092ec <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800936e:	bf00      	nop
 8009370:	3718      	adds	r7, #24
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b082      	sub	sp, #8
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d101      	bne.n	8009388 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	e07b      	b.n	8009480 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938c:	2b00      	cmp	r3, #0
 800938e:	d108      	bne.n	80093a2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009398:	d009      	beq.n	80093ae <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	61da      	str	r2, [r3, #28]
 80093a0:	e005      	b.n	80093ae <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d106      	bne.n	80093ce <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7f9 fc01 	bl	8002bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2202      	movs	r2, #2
 80093d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80093f6:	431a      	orrs	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009400:	431a      	orrs	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	f003 0302 	and.w	r3, r3, #2
 800940a:	431a      	orrs	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	695b      	ldr	r3, [r3, #20]
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	431a      	orrs	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800941e:	431a      	orrs	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	69db      	ldr	r3, [r3, #28]
 8009424:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009428:	431a      	orrs	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a1b      	ldr	r3, [r3, #32]
 800942e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009432:	ea42 0103 	orr.w	r1, r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	430a      	orrs	r2, r1
 8009444:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	0c1b      	lsrs	r3, r3, #16
 800944c:	f003 0104 	and.w	r1, r3, #4
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009454:	f003 0210 	and.w	r2, r3, #16
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	430a      	orrs	r2, r1
 800945e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	69da      	ldr	r2, [r3, #28]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800946e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b088      	sub	sp, #32
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	603b      	str	r3, [r7, #0]
 8009494:	4613      	mov	r3, r2
 8009496:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d101      	bne.n	80094aa <HAL_SPI_Transmit+0x22>
 80094a6:	2302      	movs	r3, #2
 80094a8:	e126      	b.n	80096f8 <HAL_SPI_Transmit+0x270>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094b2:	f7fb fc73 	bl	8004d9c <HAL_GetTick>
 80094b6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80094b8:	88fb      	ldrh	r3, [r7, #6]
 80094ba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d002      	beq.n	80094ce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80094c8:	2302      	movs	r3, #2
 80094ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80094cc:	e10b      	b.n	80096e6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d002      	beq.n	80094da <HAL_SPI_Transmit+0x52>
 80094d4:	88fb      	ldrh	r3, [r7, #6]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d102      	bne.n	80094e0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80094de:	e102      	b.n	80096e6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2203      	movs	r2, #3
 80094e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	88fa      	ldrh	r2, [r7, #6]
 80094f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	88fa      	ldrh	r2, [r7, #6]
 80094fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2200      	movs	r2, #0
 8009504:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009526:	d10f      	bne.n	8009548 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009536:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009546:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009552:	2b40      	cmp	r3, #64	; 0x40
 8009554:	d007      	beq.n	8009566 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009564:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800956e:	d14b      	bne.n	8009608 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d002      	beq.n	800957e <HAL_SPI_Transmit+0xf6>
 8009578:	8afb      	ldrh	r3, [r7, #22]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d13e      	bne.n	80095fc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009582:	881a      	ldrh	r2, [r3, #0]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958e:	1c9a      	adds	r2, r3, #2
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009598:	b29b      	uxth	r3, r3
 800959a:	3b01      	subs	r3, #1
 800959c:	b29a      	uxth	r2, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80095a2:	e02b      	b.n	80095fc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	f003 0302 	and.w	r3, r3, #2
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d112      	bne.n	80095d8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b6:	881a      	ldrh	r2, [r3, #0]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c2:	1c9a      	adds	r2, r3, #2
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	3b01      	subs	r3, #1
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80095d6:	e011      	b.n	80095fc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095d8:	f7fb fbe0 	bl	8004d9c <HAL_GetTick>
 80095dc:	4602      	mov	r2, r0
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d803      	bhi.n	80095f0 <HAL_SPI_Transmit+0x168>
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ee:	d102      	bne.n	80095f6 <HAL_SPI_Transmit+0x16e>
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d102      	bne.n	80095fc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80095f6:	2303      	movs	r3, #3
 80095f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80095fa:	e074      	b.n	80096e6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009600:	b29b      	uxth	r3, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1ce      	bne.n	80095a4 <HAL_SPI_Transmit+0x11c>
 8009606:	e04c      	b.n	80096a2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d002      	beq.n	8009616 <HAL_SPI_Transmit+0x18e>
 8009610:	8afb      	ldrh	r3, [r7, #22]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d140      	bne.n	8009698 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	330c      	adds	r3, #12
 8009620:	7812      	ldrb	r2, [r2, #0]
 8009622:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009628:	1c5a      	adds	r2, r3, #1
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009632:	b29b      	uxth	r3, r3
 8009634:	3b01      	subs	r3, #1
 8009636:	b29a      	uxth	r2, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800963c:	e02c      	b.n	8009698 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f003 0302 	and.w	r3, r3, #2
 8009648:	2b02      	cmp	r3, #2
 800964a:	d113      	bne.n	8009674 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	330c      	adds	r3, #12
 8009656:	7812      	ldrb	r2, [r2, #0]
 8009658:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965e:	1c5a      	adds	r2, r3, #1
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009668:	b29b      	uxth	r3, r3
 800966a:	3b01      	subs	r3, #1
 800966c:	b29a      	uxth	r2, r3
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	86da      	strh	r2, [r3, #54]	; 0x36
 8009672:	e011      	b.n	8009698 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009674:	f7fb fb92 	bl	8004d9c <HAL_GetTick>
 8009678:	4602      	mov	r2, r0
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	429a      	cmp	r2, r3
 8009682:	d803      	bhi.n	800968c <HAL_SPI_Transmit+0x204>
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968a:	d102      	bne.n	8009692 <HAL_SPI_Transmit+0x20a>
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d102      	bne.n	8009698 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009692:	2303      	movs	r3, #3
 8009694:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009696:	e026      	b.n	80096e6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800969c:	b29b      	uxth	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1cd      	bne.n	800963e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f000 fcea 	bl	800a080 <SPI_EndRxTxTransaction>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d002      	beq.n	80096b8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2220      	movs	r2, #32
 80096b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10a      	bne.n	80096d6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096c0:	2300      	movs	r3, #0
 80096c2:	613b      	str	r3, [r7, #16]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	613b      	str	r3, [r7, #16]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	613b      	str	r3, [r7, #16]
 80096d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	77fb      	strb	r3, [r7, #31]
 80096e2:	e000      	b.n	80096e6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80096e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80096f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3720      	adds	r7, #32
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b088      	sub	sp, #32
 8009704:	af02      	add	r7, sp, #8
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	603b      	str	r3, [r7, #0]
 800970c:	4613      	mov	r3, r2
 800970e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800971c:	d112      	bne.n	8009744 <HAL_SPI_Receive+0x44>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10e      	bne.n	8009744 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2204      	movs	r2, #4
 800972a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800972e:	88fa      	ldrh	r2, [r7, #6]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	4613      	mov	r3, r2
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	68b9      	ldr	r1, [r7, #8]
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f000 f8f1 	bl	8009922 <HAL_SPI_TransmitReceive>
 8009740:	4603      	mov	r3, r0
 8009742:	e0ea      	b.n	800991a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800974a:	2b01      	cmp	r3, #1
 800974c:	d101      	bne.n	8009752 <HAL_SPI_Receive+0x52>
 800974e:	2302      	movs	r3, #2
 8009750:	e0e3      	b.n	800991a <HAL_SPI_Receive+0x21a>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2201      	movs	r2, #1
 8009756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800975a:	f7fb fb1f 	bl	8004d9c <HAL_GetTick>
 800975e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009766:	b2db      	uxtb	r3, r3
 8009768:	2b01      	cmp	r3, #1
 800976a:	d002      	beq.n	8009772 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800976c:	2302      	movs	r3, #2
 800976e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009770:	e0ca      	b.n	8009908 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d002      	beq.n	800977e <HAL_SPI_Receive+0x7e>
 8009778:	88fb      	ldrh	r3, [r7, #6]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d102      	bne.n	8009784 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009782:	e0c1      	b.n	8009908 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2204      	movs	r2, #4
 8009788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	88fa      	ldrh	r2, [r7, #6]
 800979c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	88fa      	ldrh	r2, [r7, #6]
 80097a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097ca:	d10f      	bne.n	80097ec <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80097ea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f6:	2b40      	cmp	r3, #64	; 0x40
 80097f8:	d007      	beq.n	800980a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009808:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d162      	bne.n	80098d8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009812:	e02e      	b.n	8009872 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f003 0301 	and.w	r3, r3, #1
 800981e:	2b01      	cmp	r3, #1
 8009820:	d115      	bne.n	800984e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f103 020c 	add.w	r2, r3, #12
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982e:	7812      	ldrb	r2, [r2, #0]
 8009830:	b2d2      	uxtb	r2, r2
 8009832:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009838:	1c5a      	adds	r2, r3, #1
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009842:	b29b      	uxth	r3, r3
 8009844:	3b01      	subs	r3, #1
 8009846:	b29a      	uxth	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800984c:	e011      	b.n	8009872 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800984e:	f7fb faa5 	bl	8004d9c <HAL_GetTick>
 8009852:	4602      	mov	r2, r0
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	429a      	cmp	r2, r3
 800985c:	d803      	bhi.n	8009866 <HAL_SPI_Receive+0x166>
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009864:	d102      	bne.n	800986c <HAL_SPI_Receive+0x16c>
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d102      	bne.n	8009872 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800986c:	2303      	movs	r3, #3
 800986e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009870:	e04a      	b.n	8009908 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009876:	b29b      	uxth	r3, r3
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1cb      	bne.n	8009814 <HAL_SPI_Receive+0x114>
 800987c:	e031      	b.n	80098e2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	2b01      	cmp	r3, #1
 800988a:	d113      	bne.n	80098b4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68da      	ldr	r2, [r3, #12]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009896:	b292      	uxth	r2, r2
 8009898:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989e:	1c9a      	adds	r2, r3, #2
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	3b01      	subs	r3, #1
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80098b2:	e011      	b.n	80098d8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098b4:	f7fb fa72 	bl	8004d9c <HAL_GetTick>
 80098b8:	4602      	mov	r2, r0
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	683a      	ldr	r2, [r7, #0]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d803      	bhi.n	80098cc <HAL_SPI_Receive+0x1cc>
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ca:	d102      	bne.n	80098d2 <HAL_SPI_Receive+0x1d2>
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d102      	bne.n	80098d8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80098d6:	e017      	b.n	8009908 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098dc:	b29b      	uxth	r3, r3
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1cd      	bne.n	800987e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f000 fb64 	bl	8009fb4 <SPI_EndRxTransaction>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d002      	beq.n	80098f8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2220      	movs	r2, #32
 80098f6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	75fb      	strb	r3, [r7, #23]
 8009904:	e000      	b.n	8009908 <HAL_SPI_Receive+0x208>
  }

error :
 8009906:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009918:	7dfb      	ldrb	r3, [r7, #23]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3718      	adds	r7, #24
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b08c      	sub	sp, #48	; 0x30
 8009926:	af00      	add	r7, sp, #0
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	607a      	str	r2, [r7, #4]
 800992e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009930:	2301      	movs	r3, #1
 8009932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009940:	2b01      	cmp	r3, #1
 8009942:	d101      	bne.n	8009948 <HAL_SPI_TransmitReceive+0x26>
 8009944:	2302      	movs	r3, #2
 8009946:	e18a      	b.n	8009c5e <HAL_SPI_TransmitReceive+0x33c>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009950:	f7fb fa24 	bl	8004d9c <HAL_GetTick>
 8009954:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800995c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009966:	887b      	ldrh	r3, [r7, #2]
 8009968:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800996a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800996e:	2b01      	cmp	r3, #1
 8009970:	d00f      	beq.n	8009992 <HAL_SPI_TransmitReceive+0x70>
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009978:	d107      	bne.n	800998a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d103      	bne.n	800998a <HAL_SPI_TransmitReceive+0x68>
 8009982:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009986:	2b04      	cmp	r3, #4
 8009988:	d003      	beq.n	8009992 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800998a:	2302      	movs	r3, #2
 800998c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009990:	e15b      	b.n	8009c4a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d005      	beq.n	80099a4 <HAL_SPI_TransmitReceive+0x82>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d002      	beq.n	80099a4 <HAL_SPI_TransmitReceive+0x82>
 800999e:	887b      	ldrh	r3, [r7, #2]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d103      	bne.n	80099ac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80099aa:	e14e      	b.n	8009c4a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	2b04      	cmp	r3, #4
 80099b6:	d003      	beq.n	80099c0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2205      	movs	r2, #5
 80099bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	887a      	ldrh	r2, [r7, #2]
 80099d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	887a      	ldrh	r2, [r7, #2]
 80099d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	887a      	ldrh	r2, [r7, #2]
 80099e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	887a      	ldrh	r2, [r7, #2]
 80099e8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2200      	movs	r2, #0
 80099f4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a00:	2b40      	cmp	r3, #64	; 0x40
 8009a02:	d007      	beq.n	8009a14 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a1c:	d178      	bne.n	8009b10 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d002      	beq.n	8009a2c <HAL_SPI_TransmitReceive+0x10a>
 8009a26:	8b7b      	ldrh	r3, [r7, #26]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d166      	bne.n	8009afa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a30:	881a      	ldrh	r2, [r3, #0]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a3c:	1c9a      	adds	r2, r3, #2
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a50:	e053      	b.n	8009afa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f003 0302 	and.w	r3, r3, #2
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d11b      	bne.n	8009a98 <HAL_SPI_TransmitReceive+0x176>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d016      	beq.n	8009a98 <HAL_SPI_TransmitReceive+0x176>
 8009a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d113      	bne.n	8009a98 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a74:	881a      	ldrh	r2, [r3, #0]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a80:	1c9a      	adds	r2, r3, #2
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a94:	2300      	movs	r3, #0
 8009a96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f003 0301 	and.w	r3, r3, #1
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d119      	bne.n	8009ada <HAL_SPI_TransmitReceive+0x1b8>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d014      	beq.n	8009ada <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68da      	ldr	r2, [r3, #12]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aba:	b292      	uxth	r2, r2
 8009abc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac2:	1c9a      	adds	r2, r3, #2
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009ada:	f7fb f95f 	bl	8004d9c <HAL_GetTick>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d807      	bhi.n	8009afa <HAL_SPI_TransmitReceive+0x1d8>
 8009aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af0:	d003      	beq.n	8009afa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009af2:	2303      	movs	r3, #3
 8009af4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009af8:	e0a7      	b.n	8009c4a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1a6      	bne.n	8009a52 <HAL_SPI_TransmitReceive+0x130>
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1a1      	bne.n	8009a52 <HAL_SPI_TransmitReceive+0x130>
 8009b0e:	e07c      	b.n	8009c0a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d002      	beq.n	8009b1e <HAL_SPI_TransmitReceive+0x1fc>
 8009b18:	8b7b      	ldrh	r3, [r7, #26]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d16b      	bne.n	8009bf6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	330c      	adds	r3, #12
 8009b28:	7812      	ldrb	r2, [r2, #0]
 8009b2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b30:	1c5a      	adds	r2, r3, #1
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b44:	e057      	b.n	8009bf6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	f003 0302 	and.w	r3, r3, #2
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d11c      	bne.n	8009b8e <HAL_SPI_TransmitReceive+0x26c>
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d017      	beq.n	8009b8e <HAL_SPI_TransmitReceive+0x26c>
 8009b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d114      	bne.n	8009b8e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	330c      	adds	r3, #12
 8009b6e:	7812      	ldrb	r2, [r2, #0]
 8009b70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b76:	1c5a      	adds	r2, r3, #1
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	3b01      	subs	r3, #1
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	f003 0301 	and.w	r3, r3, #1
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d119      	bne.n	8009bd0 <HAL_SPI_TransmitReceive+0x2ae>
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d014      	beq.n	8009bd0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68da      	ldr	r2, [r3, #12]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb0:	b2d2      	uxtb	r2, r2
 8009bb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb8:	1c5a      	adds	r2, r3, #1
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009bd0:	f7fb f8e4 	bl	8004d9c <HAL_GetTick>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d803      	bhi.n	8009be8 <HAL_SPI_TransmitReceive+0x2c6>
 8009be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be6:	d102      	bne.n	8009bee <HAL_SPI_TransmitReceive+0x2cc>
 8009be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d103      	bne.n	8009bf6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009bf4:	e029      	b.n	8009c4a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1a2      	bne.n	8009b46 <HAL_SPI_TransmitReceive+0x224>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d19d      	bne.n	8009b46 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f000 fa36 	bl	800a080 <SPI_EndRxTxTransaction>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d006      	beq.n	8009c28 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2220      	movs	r2, #32
 8009c24:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009c26:	e010      	b.n	8009c4a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10b      	bne.n	8009c48 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c30:	2300      	movs	r3, #0
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	617b      	str	r3, [r7, #20]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	617b      	str	r3, [r7, #20]
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	e000      	b.n	8009c4a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009c48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009c5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3730      	adds	r7, #48	; 0x30
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
	...

08009c68 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b088      	sub	sp, #32
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	099b      	lsrs	r3, r3, #6
 8009c84:	f003 0301 	and.w	r3, r3, #1
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10f      	bne.n	8009cac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00a      	beq.n	8009cac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	099b      	lsrs	r3, r3, #6
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d004      	beq.n	8009cac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	4798      	blx	r3
    return;
 8009caa:	e0d7      	b.n	8009e5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	085b      	lsrs	r3, r3, #1
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00a      	beq.n	8009cce <HAL_SPI_IRQHandler+0x66>
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	09db      	lsrs	r3, r3, #7
 8009cbc:	f003 0301 	and.w	r3, r3, #1
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d004      	beq.n	8009cce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	4798      	blx	r3
    return;
 8009ccc:	e0c6      	b.n	8009e5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	095b      	lsrs	r3, r3, #5
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10c      	bne.n	8009cf4 <HAL_SPI_IRQHandler+0x8c>
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	099b      	lsrs	r3, r3, #6
 8009cde:	f003 0301 	and.w	r3, r3, #1
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d106      	bne.n	8009cf4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	0a1b      	lsrs	r3, r3, #8
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f000 80b4 	beq.w	8009e5c <HAL_SPI_IRQHandler+0x1f4>
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	095b      	lsrs	r3, r3, #5
 8009cf8:	f003 0301 	and.w	r3, r3, #1
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 80ad 	beq.w	8009e5c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	099b      	lsrs	r3, r3, #6
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d023      	beq.n	8009d56 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d011      	beq.n	8009d3e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d1e:	f043 0204 	orr.w	r2, r3, #4
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d26:	2300      	movs	r3, #0
 8009d28:	617b      	str	r3, [r7, #20]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	617b      	str	r3, [r7, #20]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	617b      	str	r3, [r7, #20]
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	e00b      	b.n	8009d56 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d3e:	2300      	movs	r3, #0
 8009d40:	613b      	str	r3, [r7, #16]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	613b      	str	r3, [r7, #16]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	613b      	str	r3, [r7, #16]
 8009d52:	693b      	ldr	r3, [r7, #16]
        return;
 8009d54:	e082      	b.n	8009e5c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	095b      	lsrs	r3, r3, #5
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d014      	beq.n	8009d8c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d66:	f043 0201 	orr.w	r2, r3, #1
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009d6e:	2300      	movs	r3, #0
 8009d70:	60fb      	str	r3, [r7, #12]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	60fb      	str	r3, [r7, #12]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d88:	601a      	str	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	0a1b      	lsrs	r3, r3, #8
 8009d90:	f003 0301 	and.w	r3, r3, #1
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00c      	beq.n	8009db2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d9c:	f043 0208 	orr.w	r2, r3, #8
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009da4:	2300      	movs	r3, #0
 8009da6:	60bb      	str	r3, [r7, #8]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	60bb      	str	r3, [r7, #8]
 8009db0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d04f      	beq.n	8009e5a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	685a      	ldr	r2, [r3, #4]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009dc8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	f003 0302 	and.w	r3, r3, #2
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d104      	bne.n	8009de6 <HAL_SPI_IRQHandler+0x17e>
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	f003 0301 	and.w	r3, r3, #1
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d034      	beq.n	8009e50 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f022 0203 	bic.w	r2, r2, #3
 8009df4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d011      	beq.n	8009e22 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e02:	4a18      	ldr	r2, [pc, #96]	; (8009e64 <HAL_SPI_IRQHandler+0x1fc>)
 8009e04:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fb fc20 	bl	8005650 <HAL_DMA_Abort_IT>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d005      	beq.n	8009e22 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d016      	beq.n	8009e58 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e2e:	4a0d      	ldr	r2, [pc, #52]	; (8009e64 <HAL_SPI_IRQHandler+0x1fc>)
 8009e30:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fb fc0a 	bl	8005650 <HAL_DMA_Abort_IT>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00a      	beq.n	8009e58 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009e4e:	e003      	b.n	8009e58 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 f809 	bl	8009e68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009e56:	e000      	b.n	8009e5a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009e58:	bf00      	nop
    return;
 8009e5a:	bf00      	nop
  }
}
 8009e5c:	3720      	adds	r7, #32
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	08009e7d 	.word	0x08009e7d

08009e68 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e88:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f7ff ffe6 	bl	8009e68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009e9c:	bf00      	nop
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b088      	sub	sp, #32
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	603b      	str	r3, [r7, #0]
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009eb4:	f7fa ff72 	bl	8004d9c <HAL_GetTick>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebc:	1a9b      	subs	r3, r3, r2
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009ec4:	f7fa ff6a 	bl	8004d9c <HAL_GetTick>
 8009ec8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009eca:	4b39      	ldr	r3, [pc, #228]	; (8009fb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	015b      	lsls	r3, r3, #5
 8009ed0:	0d1b      	lsrs	r3, r3, #20
 8009ed2:	69fa      	ldr	r2, [r7, #28]
 8009ed4:	fb02 f303 	mul.w	r3, r2, r3
 8009ed8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009eda:	e054      	b.n	8009f86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee2:	d050      	beq.n	8009f86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009ee4:	f7fa ff5a 	bl	8004d9c <HAL_GetTick>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	69fa      	ldr	r2, [r7, #28]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d902      	bls.n	8009efa <SPI_WaitFlagStateUntilTimeout+0x56>
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d13d      	bne.n	8009f76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	685a      	ldr	r2, [r3, #4]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009f08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f12:	d111      	bne.n	8009f38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f1c:	d004      	beq.n	8009f28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f26:	d107      	bne.n	8009f38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f40:	d10f      	bne.n	8009f62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f50:	601a      	str	r2, [r3, #0]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009f72:	2303      	movs	r3, #3
 8009f74:	e017      	b.n	8009fa6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d101      	bne.n	8009f80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	3b01      	subs	r3, #1
 8009f84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	689a      	ldr	r2, [r3, #8]
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	4013      	ands	r3, r2
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	bf0c      	ite	eq
 8009f96:	2301      	moveq	r3, #1
 8009f98:	2300      	movne	r3, #0
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	79fb      	ldrb	r3, [r7, #7]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d19b      	bne.n	8009edc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3720      	adds	r7, #32
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	20000000 	.word	0x20000000

08009fb4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af02      	add	r7, sp, #8
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009fc8:	d111      	bne.n	8009fee <SPI_EndRxTransaction+0x3a>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fd2:	d004      	beq.n	8009fde <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fdc:	d107      	bne.n	8009fee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ff6:	d12a      	bne.n	800a04e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a000:	d012      	beq.n	800a028 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2200      	movs	r2, #0
 800a00a:	2180      	movs	r1, #128	; 0x80
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f7ff ff49 	bl	8009ea4 <SPI_WaitFlagStateUntilTimeout>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d02d      	beq.n	800a074 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a01c:	f043 0220 	orr.w	r2, r3, #32
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a024:	2303      	movs	r3, #3
 800a026:	e026      	b.n	800a076 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	2200      	movs	r2, #0
 800a030:	2101      	movs	r1, #1
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f7ff ff36 	bl	8009ea4 <SPI_WaitFlagStateUntilTimeout>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d01a      	beq.n	800a074 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a042:	f043 0220 	orr.w	r2, r3, #32
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a04a:	2303      	movs	r3, #3
 800a04c:	e013      	b.n	800a076 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	2200      	movs	r2, #0
 800a056:	2101      	movs	r1, #1
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f7ff ff23 	bl	8009ea4 <SPI_WaitFlagStateUntilTimeout>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d007      	beq.n	800a074 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a068:	f043 0220 	orr.w	r2, r3, #32
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a070:	2303      	movs	r3, #3
 800a072:	e000      	b.n	800a076 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
	...

0800a080 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b088      	sub	sp, #32
 800a084:	af02      	add	r7, sp, #8
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a08c:	4b1b      	ldr	r3, [pc, #108]	; (800a0fc <SPI_EndRxTxTransaction+0x7c>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a1b      	ldr	r2, [pc, #108]	; (800a100 <SPI_EndRxTxTransaction+0x80>)
 800a092:	fba2 2303 	umull	r2, r3, r2, r3
 800a096:	0d5b      	lsrs	r3, r3, #21
 800a098:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a09c:	fb02 f303 	mul.w	r3, r2, r3
 800a0a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0aa:	d112      	bne.n	800a0d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	2180      	movs	r1, #128	; 0x80
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f7ff fef4 	bl	8009ea4 <SPI_WaitFlagStateUntilTimeout>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d016      	beq.n	800a0f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0c6:	f043 0220 	orr.w	r2, r3, #32
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	e00f      	b.n	800a0f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00a      	beq.n	800a0ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0e8:	2b80      	cmp	r3, #128	; 0x80
 800a0ea:	d0f2      	beq.n	800a0d2 <SPI_EndRxTxTransaction+0x52>
 800a0ec:	e000      	b.n	800a0f0 <SPI_EndRxTxTransaction+0x70>
        break;
 800a0ee:	bf00      	nop
  }

  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3718      	adds	r7, #24
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	20000000 	.word	0x20000000
 800a100:	165e9f81 	.word	0x165e9f81

0800a104 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d101      	bne.n	800a11a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	e038      	b.n	800a18c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a120:	b2db      	uxtb	r3, r3
 800a122:	2b00      	cmp	r3, #0
 800a124:	d106      	bne.n	800a134 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f7f8 f9e8 	bl	8002504 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	3308      	adds	r3, #8
 800a13c:	4619      	mov	r1, r3
 800a13e:	4610      	mov	r0, r2
 800a140:	f000 fad6 	bl	800a6f0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6818      	ldr	r0, [r3, #0]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	461a      	mov	r2, r3
 800a14e:	68b9      	ldr	r1, [r7, #8]
 800a150:	f000 fb38 	bl	800a7c4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6858      	ldr	r0, [r3, #4]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	689a      	ldr	r2, [r3, #8]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a160:	6879      	ldr	r1, [r7, #4]
 800a162:	f000 fb65 	bl	800a830 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	6892      	ldr	r2, [r2, #8]
 800a16e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	6892      	ldr	r2, [r2, #8]
 800a17a:	f041 0101 	orr.w	r1, r1, #1
 800a17e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e041      	b.n	800a22a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d106      	bne.n	800a1c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f839 	bl	800a232 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	4610      	mov	r0, r2
 800a1d4:	f000 f9d8 	bl	800a588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3708      	adds	r7, #8
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a232:	b480      	push	{r7}
 800a234:	b083      	sub	sp, #12
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a23a:	bf00      	nop
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
	...

0800a248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a256:	b2db      	uxtb	r3, r3
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d001      	beq.n	800a260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	e04e      	b.n	800a2fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2202      	movs	r2, #2
 800a264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68da      	ldr	r2, [r3, #12]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f042 0201 	orr.w	r2, r2, #1
 800a276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a23      	ldr	r2, [pc, #140]	; (800a30c <HAL_TIM_Base_Start_IT+0xc4>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d022      	beq.n	800a2c8 <HAL_TIM_Base_Start_IT+0x80>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a28a:	d01d      	beq.n	800a2c8 <HAL_TIM_Base_Start_IT+0x80>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a1f      	ldr	r2, [pc, #124]	; (800a310 <HAL_TIM_Base_Start_IT+0xc8>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d018      	beq.n	800a2c8 <HAL_TIM_Base_Start_IT+0x80>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a1e      	ldr	r2, [pc, #120]	; (800a314 <HAL_TIM_Base_Start_IT+0xcc>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d013      	beq.n	800a2c8 <HAL_TIM_Base_Start_IT+0x80>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a1c      	ldr	r2, [pc, #112]	; (800a318 <HAL_TIM_Base_Start_IT+0xd0>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d00e      	beq.n	800a2c8 <HAL_TIM_Base_Start_IT+0x80>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a1b      	ldr	r2, [pc, #108]	; (800a31c <HAL_TIM_Base_Start_IT+0xd4>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d009      	beq.n	800a2c8 <HAL_TIM_Base_Start_IT+0x80>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a19      	ldr	r2, [pc, #100]	; (800a320 <HAL_TIM_Base_Start_IT+0xd8>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d004      	beq.n	800a2c8 <HAL_TIM_Base_Start_IT+0x80>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a18      	ldr	r2, [pc, #96]	; (800a324 <HAL_TIM_Base_Start_IT+0xdc>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d111      	bne.n	800a2ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	f003 0307 	and.w	r3, r3, #7
 800a2d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2b06      	cmp	r3, #6
 800a2d8:	d010      	beq.n	800a2fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f042 0201 	orr.w	r2, r2, #1
 800a2e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ea:	e007      	b.n	800a2fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f042 0201 	orr.w	r2, r2, #1
 800a2fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3714      	adds	r7, #20
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	40010000 	.word	0x40010000
 800a310:	40000400 	.word	0x40000400
 800a314:	40000800 	.word	0x40000800
 800a318:	40000c00 	.word	0x40000c00
 800a31c:	40010400 	.word	0x40010400
 800a320:	40014000 	.word	0x40014000
 800a324:	40001800 	.word	0x40001800

0800a328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	f003 0302 	and.w	r3, r3, #2
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d122      	bne.n	800a384 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	f003 0302 	and.w	r3, r3, #2
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d11b      	bne.n	800a384 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f06f 0202 	mvn.w	r2, #2
 800a354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2201      	movs	r2, #1
 800a35a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	699b      	ldr	r3, [r3, #24]
 800a362:	f003 0303 	and.w	r3, r3, #3
 800a366:	2b00      	cmp	r3, #0
 800a368:	d003      	beq.n	800a372 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f8ee 	bl	800a54c <HAL_TIM_IC_CaptureCallback>
 800a370:	e005      	b.n	800a37e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f8e0 	bl	800a538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f8f1 	bl	800a560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	691b      	ldr	r3, [r3, #16]
 800a38a:	f003 0304 	and.w	r3, r3, #4
 800a38e:	2b04      	cmp	r3, #4
 800a390:	d122      	bne.n	800a3d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b04      	cmp	r3, #4
 800a39e:	d11b      	bne.n	800a3d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f06f 0204 	mvn.w	r2, #4
 800a3a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2202      	movs	r2, #2
 800a3ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f8c4 	bl	800a54c <HAL_TIM_IC_CaptureCallback>
 800a3c4:	e005      	b.n	800a3d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f8b6 	bl	800a538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f8c7 	bl	800a560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	f003 0308 	and.w	r3, r3, #8
 800a3e2:	2b08      	cmp	r3, #8
 800a3e4:	d122      	bne.n	800a42c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	f003 0308 	and.w	r3, r3, #8
 800a3f0:	2b08      	cmp	r3, #8
 800a3f2:	d11b      	bne.n	800a42c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f06f 0208 	mvn.w	r2, #8
 800a3fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2204      	movs	r2, #4
 800a402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	69db      	ldr	r3, [r3, #28]
 800a40a:	f003 0303 	and.w	r3, r3, #3
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d003      	beq.n	800a41a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f89a 	bl	800a54c <HAL_TIM_IC_CaptureCallback>
 800a418:	e005      	b.n	800a426 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f88c 	bl	800a538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 f89d 	bl	800a560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	f003 0310 	and.w	r3, r3, #16
 800a436:	2b10      	cmp	r3, #16
 800a438:	d122      	bne.n	800a480 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	f003 0310 	and.w	r3, r3, #16
 800a444:	2b10      	cmp	r3, #16
 800a446:	d11b      	bne.n	800a480 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f06f 0210 	mvn.w	r2, #16
 800a450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2208      	movs	r2, #8
 800a456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	69db      	ldr	r3, [r3, #28]
 800a45e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a462:	2b00      	cmp	r3, #0
 800a464:	d003      	beq.n	800a46e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f870 	bl	800a54c <HAL_TIM_IC_CaptureCallback>
 800a46c:	e005      	b.n	800a47a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f862 	bl	800a538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 f873 	bl	800a560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	f003 0301 	and.w	r3, r3, #1
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d10e      	bne.n	800a4ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	f003 0301 	and.w	r3, r3, #1
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d107      	bne.n	800a4ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f06f 0201 	mvn.w	r2, #1
 800a4a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7f8 fa1c 	bl	80028e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4b6:	2b80      	cmp	r3, #128	; 0x80
 800a4b8:	d10e      	bne.n	800a4d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4c4:	2b80      	cmp	r3, #128	; 0x80
 800a4c6:	d107      	bne.n	800a4d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a4d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 f902 	bl	800a6dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e2:	2b40      	cmp	r3, #64	; 0x40
 800a4e4:	d10e      	bne.n	800a504 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f0:	2b40      	cmp	r3, #64	; 0x40
 800a4f2:	d107      	bne.n	800a504 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a4fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 f838 	bl	800a574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	f003 0320 	and.w	r3, r3, #32
 800a50e:	2b20      	cmp	r3, #32
 800a510:	d10e      	bne.n	800a530 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	f003 0320 	and.w	r3, r3, #32
 800a51c:	2b20      	cmp	r3, #32
 800a51e:	d107      	bne.n	800a530 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f06f 0220 	mvn.w	r2, #32
 800a528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f8cc 	bl	800a6c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a530:	bf00      	nop
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a554:	bf00      	nop
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a568:	bf00      	nop
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a57c:	bf00      	nop
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a40      	ldr	r2, [pc, #256]	; (800a69c <TIM_Base_SetConfig+0x114>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d013      	beq.n	800a5c8 <TIM_Base_SetConfig+0x40>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5a6:	d00f      	beq.n	800a5c8 <TIM_Base_SetConfig+0x40>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a3d      	ldr	r2, [pc, #244]	; (800a6a0 <TIM_Base_SetConfig+0x118>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d00b      	beq.n	800a5c8 <TIM_Base_SetConfig+0x40>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a3c      	ldr	r2, [pc, #240]	; (800a6a4 <TIM_Base_SetConfig+0x11c>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d007      	beq.n	800a5c8 <TIM_Base_SetConfig+0x40>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4a3b      	ldr	r2, [pc, #236]	; (800a6a8 <TIM_Base_SetConfig+0x120>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d003      	beq.n	800a5c8 <TIM_Base_SetConfig+0x40>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a3a      	ldr	r2, [pc, #232]	; (800a6ac <TIM_Base_SetConfig+0x124>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d108      	bne.n	800a5da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a2f      	ldr	r2, [pc, #188]	; (800a69c <TIM_Base_SetConfig+0x114>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d02b      	beq.n	800a63a <TIM_Base_SetConfig+0xb2>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5e8:	d027      	beq.n	800a63a <TIM_Base_SetConfig+0xb2>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4a2c      	ldr	r2, [pc, #176]	; (800a6a0 <TIM_Base_SetConfig+0x118>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d023      	beq.n	800a63a <TIM_Base_SetConfig+0xb2>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4a2b      	ldr	r2, [pc, #172]	; (800a6a4 <TIM_Base_SetConfig+0x11c>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d01f      	beq.n	800a63a <TIM_Base_SetConfig+0xb2>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a2a      	ldr	r2, [pc, #168]	; (800a6a8 <TIM_Base_SetConfig+0x120>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d01b      	beq.n	800a63a <TIM_Base_SetConfig+0xb2>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a29      	ldr	r2, [pc, #164]	; (800a6ac <TIM_Base_SetConfig+0x124>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d017      	beq.n	800a63a <TIM_Base_SetConfig+0xb2>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a28      	ldr	r2, [pc, #160]	; (800a6b0 <TIM_Base_SetConfig+0x128>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d013      	beq.n	800a63a <TIM_Base_SetConfig+0xb2>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4a27      	ldr	r2, [pc, #156]	; (800a6b4 <TIM_Base_SetConfig+0x12c>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d00f      	beq.n	800a63a <TIM_Base_SetConfig+0xb2>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a26      	ldr	r2, [pc, #152]	; (800a6b8 <TIM_Base_SetConfig+0x130>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d00b      	beq.n	800a63a <TIM_Base_SetConfig+0xb2>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a25      	ldr	r2, [pc, #148]	; (800a6bc <TIM_Base_SetConfig+0x134>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d007      	beq.n	800a63a <TIM_Base_SetConfig+0xb2>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4a24      	ldr	r2, [pc, #144]	; (800a6c0 <TIM_Base_SetConfig+0x138>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d003      	beq.n	800a63a <TIM_Base_SetConfig+0xb2>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a23      	ldr	r2, [pc, #140]	; (800a6c4 <TIM_Base_SetConfig+0x13c>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d108      	bne.n	800a64c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	4313      	orrs	r3, r2
 800a64a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	695b      	ldr	r3, [r3, #20]
 800a656:	4313      	orrs	r3, r2
 800a658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	689a      	ldr	r2, [r3, #8]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	4a0a      	ldr	r2, [pc, #40]	; (800a69c <TIM_Base_SetConfig+0x114>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d003      	beq.n	800a680 <TIM_Base_SetConfig+0xf8>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	4a0c      	ldr	r2, [pc, #48]	; (800a6ac <TIM_Base_SetConfig+0x124>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d103      	bne.n	800a688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	691a      	ldr	r2, [r3, #16]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2201      	movs	r2, #1
 800a68c:	615a      	str	r2, [r3, #20]
}
 800a68e:	bf00      	nop
 800a690:	3714      	adds	r7, #20
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	40010000 	.word	0x40010000
 800a6a0:	40000400 	.word	0x40000400
 800a6a4:	40000800 	.word	0x40000800
 800a6a8:	40000c00 	.word	0x40000c00
 800a6ac:	40010400 	.word	0x40010400
 800a6b0:	40014000 	.word	0x40014000
 800a6b4:	40014400 	.word	0x40014400
 800a6b8:	40014800 	.word	0x40014800
 800a6bc:	40001800 	.word	0x40001800
 800a6c0:	40001c00 	.word	0x40001c00
 800a6c4:	40002000 	.word	0x40002000

0800a6c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b087      	sub	sp, #28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	6812      	ldr	r2, [r2, #0]
 800a708:	f023 0101 	bic.w	r1, r3, #1
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	2b08      	cmp	r3, #8
 800a718:	d102      	bne.n	800a720 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a71a:	2340      	movs	r3, #64	; 0x40
 800a71c:	617b      	str	r3, [r7, #20]
 800a71e:	e001      	b.n	800a724 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a720:	2300      	movs	r3, #0
 800a722:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a730:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a736:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a73c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a742:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800a748:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800a74e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800a754:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800a75a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800a760:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800a766:	4313      	orrs	r3, r2
 800a768:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	693a      	ldr	r2, [r7, #16]
 800a770:	4313      	orrs	r3, r2
 800a772:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a778:	693a      	ldr	r2, [r7, #16]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800a77e:	4b10      	ldr	r3, [pc, #64]	; (800a7c0 <FSMC_NORSRAM_Init+0xd0>)
 800a780:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a788:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800a790:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	43db      	mvns	r3, r3
 800a7a0:	ea02 0103 	and.w	r1, r2, r3
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	4319      	orrs	r1, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	371c      	adds	r7, #28
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr
 800a7c0:	0008fb7f 	.word	0x0008fb7f

0800a7c4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	1c5a      	adds	r2, r3, #1
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7da:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	011b      	lsls	r3, r3, #4
 800a7e8:	431a      	orrs	r2, r3
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	021b      	lsls	r3, r3, #8
 800a7f0:	431a      	orrs	r2, r3
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	041b      	lsls	r3, r3, #16
 800a7f8:	431a      	orrs	r2, r3
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	3b01      	subs	r3, #1
 800a800:	051b      	lsls	r3, r3, #20
 800a802:	431a      	orrs	r2, r3
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	695b      	ldr	r3, [r3, #20]
 800a808:	3b02      	subs	r3, #2
 800a80a:	061b      	lsls	r3, r3, #24
 800a80c:	431a      	orrs	r2, r3
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	699b      	ldr	r3, [r3, #24]
 800a812:	4313      	orrs	r3, r2
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	3201      	adds	r2, #1
 800a818:	4319      	orrs	r1, r3
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3714      	adds	r7, #20
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
	...

0800a830 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
 800a83c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a844:	d11d      	bne.n	800a882 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a84e:	4b13      	ldr	r3, [pc, #76]	; (800a89c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800a850:	4013      	ands	r3, r2
 800a852:	68ba      	ldr	r2, [r7, #8]
 800a854:	6811      	ldr	r1, [r2, #0]
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	6852      	ldr	r2, [r2, #4]
 800a85a:	0112      	lsls	r2, r2, #4
 800a85c:	4311      	orrs	r1, r2
 800a85e:	68ba      	ldr	r2, [r7, #8]
 800a860:	6892      	ldr	r2, [r2, #8]
 800a862:	0212      	lsls	r2, r2, #8
 800a864:	4311      	orrs	r1, r2
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	6992      	ldr	r2, [r2, #24]
 800a86a:	4311      	orrs	r1, r2
 800a86c:	68ba      	ldr	r2, [r7, #8]
 800a86e:	68d2      	ldr	r2, [r2, #12]
 800a870:	0412      	lsls	r2, r2, #16
 800a872:	430a      	orrs	r2, r1
 800a874:	ea43 0102 	orr.w	r1, r3, r2
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a880:	e005      	b.n	800a88e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a88a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3714      	adds	r7, #20
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr
 800a89c:	cff00000 	.word	0xcff00000

0800a8a0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a8a0:	b084      	sub	sp, #16
 800a8a2:	b480      	push	{r7}
 800a8a4:	b085      	sub	sp, #20
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	f107 001c 	add.w	r0, r7, #28
 800a8ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a8b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a8b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a8ba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a8be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a8c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a8c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a8ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a8da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	431a      	orrs	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3714      	adds	r7, #20
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	b004      	add	sp, #16
 800a8f4:	4770      	bx	lr

0800a8f6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a8f6:	b480      	push	{r7}
 800a8f8:	b083      	sub	sp, #12
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a904:	4618      	mov	r0, r3
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2203      	movs	r2, #3
 800a93e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	370c      	adds	r7, #12
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a94e:	b480      	push	{r7}
 800a950:	b083      	sub	sp, #12
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f003 0303 	and.w	r3, r3, #3
}
 800a95e:	4618      	mov	r0, r3
 800a960:	370c      	adds	r7, #12
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr

0800a96a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a96a:	b480      	push	{r7}
 800a96c:	b085      	sub	sp, #20
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
 800a972:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a974:	2300      	movs	r3, #0
 800a976:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a988:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a98e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a994:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	4313      	orrs	r3, r2
 800a99a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a9a4:	f023 030f 	bic.w	r3, r3, #15
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	431a      	orrs	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3714      	adds	r7, #20
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr

0800a9be <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a9be:	b480      	push	{r7}
 800a9c0:	b083      	sub	sp, #12
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	b2db      	uxtb	r3, r3
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	370c      	adds	r7, #12
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	3314      	adds	r3, #20
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
}  
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3714      	adds	r7, #20
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b085      	sub	sp, #20
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	685a      	ldr	r2, [r3, #4]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa24:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800aa2a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800aa30:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	431a      	orrs	r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aa48:	2300      	movs	r3, #0

}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3714      	adds	r7, #20
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr

0800aa56 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b088      	sub	sp, #32
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
 800aa5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800aa64:	2310      	movs	r3, #16
 800aa66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa68:	2340      	movs	r3, #64	; 0x40
 800aa6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa76:	f107 0308 	add.w	r3, r7, #8
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7ff ff74 	bl	800a96a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800aa82:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa86:	2110      	movs	r1, #16
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 fa19 	bl	800aec0 <SDMMC_GetCmdResp1>
 800aa8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa90:	69fb      	ldr	r3, [r7, #28]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3720      	adds	r7, #32
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}

0800aa9a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b088      	sub	sp, #32
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
 800aaa2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800aaa8:	2311      	movs	r3, #17
 800aaaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aaac:	2340      	movs	r3, #64	; 0x40
 800aaae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aab0:	2300      	movs	r3, #0
 800aab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aab8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aaba:	f107 0308 	add.w	r3, r7, #8
 800aabe:	4619      	mov	r1, r3
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff ff52 	bl	800a96a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800aac6:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaca:	2111      	movs	r1, #17
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 f9f7 	bl	800aec0 <SDMMC_GetCmdResp1>
 800aad2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aad4:	69fb      	ldr	r3, [r7, #28]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3720      	adds	r7, #32
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b088      	sub	sp, #32
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800aaec:	2312      	movs	r3, #18
 800aaee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aaf0:	2340      	movs	r3, #64	; 0x40
 800aaf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aaf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aafc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aafe:	f107 0308 	add.w	r3, r7, #8
 800ab02:	4619      	mov	r1, r3
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff ff30 	bl	800a96a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ab0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab0e:	2112      	movs	r1, #18
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 f9d5 	bl	800aec0 <SDMMC_GetCmdResp1>
 800ab16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab18:	69fb      	ldr	r3, [r7, #28]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3720      	adds	r7, #32
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b088      	sub	sp, #32
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
 800ab2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ab30:	2318      	movs	r3, #24
 800ab32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab34:	2340      	movs	r3, #64	; 0x40
 800ab36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab42:	f107 0308 	add.w	r3, r7, #8
 800ab46:	4619      	mov	r1, r3
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f7ff ff0e 	bl	800a96a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ab4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab52:	2118      	movs	r1, #24
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 f9b3 	bl	800aec0 <SDMMC_GetCmdResp1>
 800ab5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab5c:	69fb      	ldr	r3, [r7, #28]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3720      	adds	r7, #32
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b088      	sub	sp, #32
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ab74:	2319      	movs	r3, #25
 800ab76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab78:	2340      	movs	r3, #64	; 0x40
 800ab7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab86:	f107 0308 	add.w	r3, r7, #8
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f7ff feec 	bl	800a96a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ab92:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab96:	2119      	movs	r1, #25
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 f991 	bl	800aec0 <SDMMC_GetCmdResp1>
 800ab9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aba0:	69fb      	ldr	r3, [r7, #28]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3720      	adds	r7, #32
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
	...

0800abac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b088      	sub	sp, #32
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800abb4:	2300      	movs	r3, #0
 800abb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800abb8:	230c      	movs	r3, #12
 800abba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abbc:	2340      	movs	r3, #64	; 0x40
 800abbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abc0:	2300      	movs	r3, #0
 800abc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abc8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abca:	f107 0308 	add.w	r3, r7, #8
 800abce:	4619      	mov	r1, r3
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f7ff feca 	bl	800a96a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800abd6:	4a05      	ldr	r2, [pc, #20]	; (800abec <SDMMC_CmdStopTransfer+0x40>)
 800abd8:	210c      	movs	r1, #12
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 f970 	bl	800aec0 <SDMMC_GetCmdResp1>
 800abe0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abe2:	69fb      	ldr	r3, [r7, #28]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3720      	adds	r7, #32
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	05f5e100 	.word	0x05f5e100

0800abf0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b08a      	sub	sp, #40	; 0x28
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ac00:	2307      	movs	r3, #7
 800ac02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac04:	2340      	movs	r3, #64	; 0x40
 800ac06:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac10:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac12:	f107 0310 	add.w	r3, r7, #16
 800ac16:	4619      	mov	r1, r3
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f7ff fea6 	bl	800a96a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ac1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac22:	2107      	movs	r1, #7
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f000 f94b 	bl	800aec0 <SDMMC_GetCmdResp1>
 800ac2a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ac2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3728      	adds	r7, #40	; 0x28
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b088      	sub	sp, #32
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ac42:	2300      	movs	r3, #0
 800ac44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ac46:	2300      	movs	r3, #0
 800ac48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac54:	f107 0308 	add.w	r3, r7, #8
 800ac58:	4619      	mov	r1, r3
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f7ff fe85 	bl	800a96a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 fb65 	bl	800b330 <SDMMC_GetCmdError>
 800ac66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac68:	69fb      	ldr	r3, [r7, #28]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3720      	adds	r7, #32
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b088      	sub	sp, #32
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ac7a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ac7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ac80:	2308      	movs	r3, #8
 800ac82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac84:	2340      	movs	r3, #64	; 0x40
 800ac86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac92:	f107 0308 	add.w	r3, r7, #8
 800ac96:	4619      	mov	r1, r3
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f7ff fe66 	bl	800a96a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 faf8 	bl	800b294 <SDMMC_GetCmdResp7>
 800aca4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aca6:	69fb      	ldr	r3, [r7, #28]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3720      	adds	r7, #32
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b088      	sub	sp, #32
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800acbe:	2337      	movs	r3, #55	; 0x37
 800acc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acc2:	2340      	movs	r3, #64	; 0x40
 800acc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acc6:	2300      	movs	r3, #0
 800acc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800acca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acd0:	f107 0308 	add.w	r3, r7, #8
 800acd4:	4619      	mov	r1, r3
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f7ff fe47 	bl	800a96a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800acdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ace0:	2137      	movs	r1, #55	; 0x37
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f8ec 	bl	800aec0 <SDMMC_GetCmdResp1>
 800ace8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acea:	69fb      	ldr	r3, [r7, #28]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3720      	adds	r7, #32
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b088      	sub	sp, #32
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ad0a:	2329      	movs	r3, #41	; 0x29
 800ad0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad0e:	2340      	movs	r3, #64	; 0x40
 800ad10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad12:	2300      	movs	r3, #0
 800ad14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad1c:	f107 0308 	add.w	r3, r7, #8
 800ad20:	4619      	mov	r1, r3
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f7ff fe21 	bl	800a96a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 f9ff 	bl	800b12c <SDMMC_GetCmdResp3>
 800ad2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad30:	69fb      	ldr	r3, [r7, #28]
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3720      	adds	r7, #32
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b088      	sub	sp, #32
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
 800ad42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ad48:	2306      	movs	r3, #6
 800ad4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad4c:	2340      	movs	r3, #64	; 0x40
 800ad4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad50:	2300      	movs	r3, #0
 800ad52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad5a:	f107 0308 	add.w	r3, r7, #8
 800ad5e:	4619      	mov	r1, r3
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f7ff fe02 	bl	800a96a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800ad66:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad6a:	2106      	movs	r1, #6
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 f8a7 	bl	800aec0 <SDMMC_GetCmdResp1>
 800ad72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad74:	69fb      	ldr	r3, [r7, #28]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3720      	adds	r7, #32
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b088      	sub	sp, #32
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ad86:	2300      	movs	r3, #0
 800ad88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ad8a:	2333      	movs	r3, #51	; 0x33
 800ad8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad8e:	2340      	movs	r3, #64	; 0x40
 800ad90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad92:	2300      	movs	r3, #0
 800ad94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad9c:	f107 0308 	add.w	r3, r7, #8
 800ada0:	4619      	mov	r1, r3
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f7ff fde1 	bl	800a96a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800ada8:	f241 3288 	movw	r2, #5000	; 0x1388
 800adac:	2133      	movs	r1, #51	; 0x33
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 f886 	bl	800aec0 <SDMMC_GetCmdResp1>
 800adb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adb6:	69fb      	ldr	r3, [r7, #28]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3720      	adds	r7, #32
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b088      	sub	sp, #32
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800adc8:	2300      	movs	r3, #0
 800adca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800adcc:	2302      	movs	r3, #2
 800adce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800add0:	23c0      	movs	r3, #192	; 0xc0
 800add2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800add4:	2300      	movs	r3, #0
 800add6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800add8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800addc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800adde:	f107 0308 	add.w	r3, r7, #8
 800ade2:	4619      	mov	r1, r3
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7ff fdc0 	bl	800a96a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 f956 	bl	800b09c <SDMMC_GetCmdResp2>
 800adf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adf2:	69fb      	ldr	r3, [r7, #28]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3720      	adds	r7, #32
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b088      	sub	sp, #32
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ae0a:	2309      	movs	r3, #9
 800ae0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ae0e:	23c0      	movs	r3, #192	; 0xc0
 800ae10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae12:	2300      	movs	r3, #0
 800ae14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae1c:	f107 0308 	add.w	r3, r7, #8
 800ae20:	4619      	mov	r1, r3
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f7ff fda1 	bl	800a96a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 f937 	bl	800b09c <SDMMC_GetCmdResp2>
 800ae2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae30:	69fb      	ldr	r3, [r7, #28]
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3720      	adds	r7, #32
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b088      	sub	sp, #32
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
 800ae42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ae44:	2300      	movs	r3, #0
 800ae46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ae48:	2303      	movs	r3, #3
 800ae4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae4c:	2340      	movs	r3, #64	; 0x40
 800ae4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae50:	2300      	movs	r3, #0
 800ae52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae5a:	f107 0308 	add.w	r3, r7, #8
 800ae5e:	4619      	mov	r1, r3
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7ff fd82 	bl	800a96a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	2103      	movs	r1, #3
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 f99c 	bl	800b1a8 <SDMMC_GetCmdResp6>
 800ae70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae72:	69fb      	ldr	r3, [r7, #28]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3720      	adds	r7, #32
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b088      	sub	sp, #32
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ae8a:	230d      	movs	r3, #13
 800ae8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae8e:	2340      	movs	r3, #64	; 0x40
 800ae90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae92:	2300      	movs	r3, #0
 800ae94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae9c:	f107 0308 	add.w	r3, r7, #8
 800aea0:	4619      	mov	r1, r3
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7ff fd61 	bl	800a96a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800aea8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeac:	210d      	movs	r1, #13
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f806 	bl	800aec0 <SDMMC_GetCmdResp1>
 800aeb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeb6:	69fb      	ldr	r3, [r7, #28]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3720      	adds	r7, #32
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b088      	sub	sp, #32
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	460b      	mov	r3, r1
 800aeca:	607a      	str	r2, [r7, #4]
 800aecc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800aece:	4b70      	ldr	r3, [pc, #448]	; (800b090 <SDMMC_GetCmdResp1+0x1d0>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a70      	ldr	r2, [pc, #448]	; (800b094 <SDMMC_GetCmdResp1+0x1d4>)
 800aed4:	fba2 2303 	umull	r2, r3, r2, r3
 800aed8:	0a5a      	lsrs	r2, r3, #9
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	fb02 f303 	mul.w	r3, r2, r3
 800aee0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	1e5a      	subs	r2, r3, #1
 800aee6:	61fa      	str	r2, [r7, #28]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d102      	bne.n	800aef2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aeec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aef0:	e0c9      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aef6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d0ef      	beq.n	800aee2 <SDMMC_GetCmdResp1+0x22>
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d1ea      	bne.n	800aee2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af10:	f003 0304 	and.w	r3, r3, #4
 800af14:	2b00      	cmp	r3, #0
 800af16:	d004      	beq.n	800af22 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2204      	movs	r2, #4
 800af1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af1e:	2304      	movs	r3, #4
 800af20:	e0b1      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af26:	f003 0301 	and.w	r3, r3, #1
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d004      	beq.n	800af38 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2201      	movs	r2, #1
 800af32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af34:	2301      	movs	r3, #1
 800af36:	e0a6      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	22c5      	movs	r2, #197	; 0xc5
 800af3c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f7ff fd3d 	bl	800a9be <SDIO_GetCommandResponse>
 800af44:	4603      	mov	r3, r0
 800af46:	461a      	mov	r2, r3
 800af48:	7afb      	ldrb	r3, [r7, #11]
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d001      	beq.n	800af52 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af4e:	2301      	movs	r3, #1
 800af50:	e099      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800af52:	2100      	movs	r1, #0
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f7ff fd3f 	bl	800a9d8 <SDIO_GetResponse>
 800af5a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800af5c:	697a      	ldr	r2, [r7, #20]
 800af5e:	4b4e      	ldr	r3, [pc, #312]	; (800b098 <SDMMC_GetCmdResp1+0x1d8>)
 800af60:	4013      	ands	r3, r2
 800af62:	2b00      	cmp	r3, #0
 800af64:	d101      	bne.n	800af6a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800af66:	2300      	movs	r3, #0
 800af68:	e08d      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	da02      	bge.n	800af76 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800af70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800af74:	e087      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d001      	beq.n	800af84 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800af80:	2340      	movs	r3, #64	; 0x40
 800af82:	e080      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800af8e:	2380      	movs	r3, #128	; 0x80
 800af90:	e079      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d002      	beq.n	800afa2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800af9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afa0:	e071      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d002      	beq.n	800afb2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800afac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afb0:	e069      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d002      	beq.n	800afc2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800afbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afc0:	e061      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d002      	beq.n	800afd2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800afcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800afd0:	e059      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800afdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afe0:	e051      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d002      	beq.n	800aff2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800afec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aff0:	e049      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d002      	beq.n	800b002 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800affc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b000:	e041      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d002      	beq.n	800b012 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b00c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b010:	e039      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d002      	beq.n	800b022 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b01c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b020:	e031      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d002      	beq.n	800b032 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b02c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b030:	e029      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d002      	beq.n	800b042 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b03c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b040:	e021      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d002      	beq.n	800b052 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b04c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b050:	e019      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d002      	beq.n	800b062 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b05c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b060:	e011      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d002      	beq.n	800b072 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b06c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b070:	e009      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	f003 0308 	and.w	r3, r3, #8
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d002      	beq.n	800b082 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b07c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b080:	e001      	b.n	800b086 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b086:	4618      	mov	r0, r3
 800b088:	3720      	adds	r7, #32
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	20000000 	.word	0x20000000
 800b094:	10624dd3 	.word	0x10624dd3
 800b098:	fdffe008 	.word	0xfdffe008

0800b09c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b0a4:	4b1f      	ldr	r3, [pc, #124]	; (800b124 <SDMMC_GetCmdResp2+0x88>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a1f      	ldr	r2, [pc, #124]	; (800b128 <SDMMC_GetCmdResp2+0x8c>)
 800b0aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ae:	0a5b      	lsrs	r3, r3, #9
 800b0b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0b4:	fb02 f303 	mul.w	r3, r2, r3
 800b0b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	1e5a      	subs	r2, r3, #1
 800b0be:	60fa      	str	r2, [r7, #12]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d102      	bne.n	800b0ca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0c8:	e026      	b.n	800b118 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d0ef      	beq.n	800b0ba <SDMMC_GetCmdResp2+0x1e>
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d1ea      	bne.n	800b0ba <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0e8:	f003 0304 	and.w	r3, r3, #4
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d004      	beq.n	800b0fa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2204      	movs	r2, #4
 800b0f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0f6:	2304      	movs	r3, #4
 800b0f8:	e00e      	b.n	800b118 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0fe:	f003 0301 	and.w	r3, r3, #1
 800b102:	2b00      	cmp	r3, #0
 800b104:	d004      	beq.n	800b110 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2201      	movs	r2, #1
 800b10a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e003      	b.n	800b118 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	22c5      	movs	r2, #197	; 0xc5
 800b114:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b116:	2300      	movs	r3, #0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3714      	adds	r7, #20
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr
 800b124:	20000000 	.word	0x20000000
 800b128:	10624dd3 	.word	0x10624dd3

0800b12c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b134:	4b1a      	ldr	r3, [pc, #104]	; (800b1a0 <SDMMC_GetCmdResp3+0x74>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a1a      	ldr	r2, [pc, #104]	; (800b1a4 <SDMMC_GetCmdResp3+0x78>)
 800b13a:	fba2 2303 	umull	r2, r3, r2, r3
 800b13e:	0a5b      	lsrs	r3, r3, #9
 800b140:	f241 3288 	movw	r2, #5000	; 0x1388
 800b144:	fb02 f303 	mul.w	r3, r2, r3
 800b148:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	1e5a      	subs	r2, r3, #1
 800b14e:	60fa      	str	r2, [r7, #12]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d102      	bne.n	800b15a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b154:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b158:	e01b      	b.n	800b192 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b15e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b166:	2b00      	cmp	r3, #0
 800b168:	d0ef      	beq.n	800b14a <SDMMC_GetCmdResp3+0x1e>
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1ea      	bne.n	800b14a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b178:	f003 0304 	and.w	r3, r3, #4
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d004      	beq.n	800b18a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2204      	movs	r2, #4
 800b184:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b186:	2304      	movs	r3, #4
 800b188:	e003      	b.n	800b192 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	22c5      	movs	r2, #197	; 0xc5
 800b18e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3714      	adds	r7, #20
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop
 800b1a0:	20000000 	.word	0x20000000
 800b1a4:	10624dd3 	.word	0x10624dd3

0800b1a8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b088      	sub	sp, #32
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	607a      	str	r2, [r7, #4]
 800b1b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b1b6:	4b35      	ldr	r3, [pc, #212]	; (800b28c <SDMMC_GetCmdResp6+0xe4>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a35      	ldr	r2, [pc, #212]	; (800b290 <SDMMC_GetCmdResp6+0xe8>)
 800b1bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b1c0:	0a5b      	lsrs	r3, r3, #9
 800b1c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1c6:	fb02 f303 	mul.w	r3, r2, r3
 800b1ca:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	1e5a      	subs	r2, r3, #1
 800b1d0:	61fa      	str	r2, [r7, #28]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d102      	bne.n	800b1dc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1da:	e052      	b.n	800b282 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1e0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d0ef      	beq.n	800b1cc <SDMMC_GetCmdResp6+0x24>
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1ea      	bne.n	800b1cc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1fa:	f003 0304 	and.w	r3, r3, #4
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d004      	beq.n	800b20c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2204      	movs	r2, #4
 800b206:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b208:	2304      	movs	r3, #4
 800b20a:	e03a      	b.n	800b282 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b210:	f003 0301 	and.w	r3, r3, #1
 800b214:	2b00      	cmp	r3, #0
 800b216:	d004      	beq.n	800b222 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2201      	movs	r2, #1
 800b21c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b21e:	2301      	movs	r3, #1
 800b220:	e02f      	b.n	800b282 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f7ff fbcb 	bl	800a9be <SDIO_GetCommandResponse>
 800b228:	4603      	mov	r3, r0
 800b22a:	461a      	mov	r2, r3
 800b22c:	7afb      	ldrb	r3, [r7, #11]
 800b22e:	4293      	cmp	r3, r2
 800b230:	d001      	beq.n	800b236 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b232:	2301      	movs	r3, #1
 800b234:	e025      	b.n	800b282 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	22c5      	movs	r2, #197	; 0xc5
 800b23a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b23c:	2100      	movs	r1, #0
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f7ff fbca 	bl	800a9d8 <SDIO_GetResponse>
 800b244:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d106      	bne.n	800b25e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	0c1b      	lsrs	r3, r3, #16
 800b254:	b29a      	uxth	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b25a:	2300      	movs	r3, #0
 800b25c:	e011      	b.n	800b282 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b264:	2b00      	cmp	r3, #0
 800b266:	d002      	beq.n	800b26e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b268:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b26c:	e009      	b.n	800b282 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b27c:	e001      	b.n	800b282 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b27e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b282:	4618      	mov	r0, r3
 800b284:	3720      	adds	r7, #32
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	20000000 	.word	0x20000000
 800b290:	10624dd3 	.word	0x10624dd3

0800b294 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b294:	b480      	push	{r7}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b29c:	4b22      	ldr	r3, [pc, #136]	; (800b328 <SDMMC_GetCmdResp7+0x94>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a22      	ldr	r2, [pc, #136]	; (800b32c <SDMMC_GetCmdResp7+0x98>)
 800b2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2a6:	0a5b      	lsrs	r3, r3, #9
 800b2a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2ac:	fb02 f303 	mul.w	r3, r2, r3
 800b2b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	1e5a      	subs	r2, r3, #1
 800b2b6:	60fa      	str	r2, [r7, #12]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d102      	bne.n	800b2c2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2c0:	e02c      	b.n	800b31c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d0ef      	beq.n	800b2b2 <SDMMC_GetCmdResp7+0x1e>
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1ea      	bne.n	800b2b2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e0:	f003 0304 	and.w	r3, r3, #4
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d004      	beq.n	800b2f2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2204      	movs	r2, #4
 800b2ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b2ee:	2304      	movs	r3, #4
 800b2f0:	e014      	b.n	800b31c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f6:	f003 0301 	and.w	r3, r3, #1
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d004      	beq.n	800b308 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2201      	movs	r2, #1
 800b302:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b304:	2301      	movs	r3, #1
 800b306:	e009      	b.n	800b31c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b30c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b310:	2b00      	cmp	r3, #0
 800b312:	d002      	beq.n	800b31a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2240      	movs	r2, #64	; 0x40
 800b318:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b31a:	2300      	movs	r3, #0
  
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3714      	adds	r7, #20
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	20000000 	.word	0x20000000
 800b32c:	10624dd3 	.word	0x10624dd3

0800b330 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b338:	4b11      	ldr	r3, [pc, #68]	; (800b380 <SDMMC_GetCmdError+0x50>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a11      	ldr	r2, [pc, #68]	; (800b384 <SDMMC_GetCmdError+0x54>)
 800b33e:	fba2 2303 	umull	r2, r3, r2, r3
 800b342:	0a5b      	lsrs	r3, r3, #9
 800b344:	f241 3288 	movw	r2, #5000	; 0x1388
 800b348:	fb02 f303 	mul.w	r3, r2, r3
 800b34c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	1e5a      	subs	r2, r3, #1
 800b352:	60fa      	str	r2, [r7, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d102      	bne.n	800b35e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b358:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b35c:	e009      	b.n	800b372 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b366:	2b00      	cmp	r3, #0
 800b368:	d0f1      	beq.n	800b34e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	22c5      	movs	r2, #197	; 0xc5
 800b36e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3714      	adds	r7, #20
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	20000000 	.word	0x20000000
 800b384:	10624dd3 	.word	0x10624dd3

0800b388 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b38c:	4904      	ldr	r1, [pc, #16]	; (800b3a0 <MX_FATFS_Init+0x18>)
 800b38e:	4805      	ldr	r0, [pc, #20]	; (800b3a4 <MX_FATFS_Init+0x1c>)
 800b390:	f003 f9a6 	bl	800e6e0 <FATFS_LinkDriver>
 800b394:	4603      	mov	r3, r0
 800b396:	461a      	mov	r2, r3
 800b398:	4b03      	ldr	r3, [pc, #12]	; (800b3a8 <MX_FATFS_Init+0x20>)
 800b39a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b39c:	bf00      	nop
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	200017f4 	.word	0x200017f4
 800b3a4:	08019a30 	.word	0x08019a30
 800b3a8:	200017f0 	.word	0x200017f0

0800b3ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b3b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b3c6:	f000 f888 	bl	800b4da <BSP_SD_IsDetected>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d001      	beq.n	800b3d4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e005      	b.n	800b3e0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b3d4:	4804      	ldr	r0, [pc, #16]	; (800b3e8 <BSP_SD_Init+0x2c>)
 800b3d6:	f7fc fc9b 	bl	8007d10 <HAL_SD_Init>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b3de:	79fb      	ldrb	r3, [r7, #7]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	20000fbc 	.word	0x20000fbc

0800b3ec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	68f9      	ldr	r1, [r7, #12]
 800b402:	4806      	ldr	r0, [pc, #24]	; (800b41c <BSP_SD_ReadBlocks_DMA+0x30>)
 800b404:	f7fc fd34 	bl	8007e70 <HAL_SD_ReadBlocks_DMA>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d001      	beq.n	800b412 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b40e:	2301      	movs	r3, #1
 800b410:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b412:	7dfb      	ldrb	r3, [r7, #23]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3718      	adds	r7, #24
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	20000fbc 	.word	0x20000fbc

0800b420 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	68f9      	ldr	r1, [r7, #12]
 800b436:	4806      	ldr	r0, [pc, #24]	; (800b450 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b438:	f7fc fdfc 	bl	8008034 <HAL_SD_WriteBlocks_DMA>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b446:	7dfb      	ldrb	r3, [r7, #23]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3718      	adds	r7, #24
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	20000fbc 	.word	0x20000fbc

0800b454 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b458:	4805      	ldr	r0, [pc, #20]	; (800b470 <BSP_SD_GetCardState+0x1c>)
 800b45a:	f7fd facb 	bl	80089f4 <HAL_SD_GetCardState>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b04      	cmp	r3, #4
 800b462:	bf14      	ite	ne
 800b464:	2301      	movne	r3, #1
 800b466:	2300      	moveq	r3, #0
 800b468:	b2db      	uxtb	r3, r3
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	20000fbc 	.word	0x20000fbc

0800b474 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b47c:	6879      	ldr	r1, [r7, #4]
 800b47e:	4803      	ldr	r0, [pc, #12]	; (800b48c <BSP_SD_GetCardInfo+0x18>)
 800b480:	f7fd f9f2 	bl	8008868 <HAL_SD_GetCardInfo>
}
 800b484:	bf00      	nop
 800b486:	3708      	adds	r7, #8
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	20000fbc 	.word	0x20000fbc

0800b490 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b498:	f000 f818 	bl	800b4cc <BSP_SD_AbortCallback>
}
 800b49c:	bf00      	nop
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b4ac:	f000 f9c4 	bl	800b838 <BSP_SD_WriteCpltCallback>
}
 800b4b0:	bf00      	nop
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b4c0:	f000 f9c8 	bl	800b854 <BSP_SD_ReadCpltCallback>
}
 800b4c4:	bf00      	nop
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	af00      	add	r7, sp, #0

}
 800b4d0:	bf00      	nop
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b082      	sub	sp, #8
 800b4de:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b4e4:	f000 f80c 	bl	800b500 <BSP_PlatformIsDetected>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d101      	bne.n	800b4f2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b4f2:	79fb      	ldrb	r3, [r7, #7]
 800b4f4:	b2db      	uxtb	r3, r3
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3708      	adds	r7, #8
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
	...

0800b500 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b506:	2301      	movs	r3, #1
 800b508:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b50a:	2108      	movs	r1, #8
 800b50c:	4806      	ldr	r0, [pc, #24]	; (800b528 <BSP_PlatformIsDetected+0x28>)
 800b50e:	f7fb feaf 	bl	8007270 <HAL_GPIO_ReadPin>
 800b512:	4603      	mov	r3, r0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d001      	beq.n	800b51c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800b518:	2300      	movs	r3, #0
 800b51a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b51c:	79fb      	ldrb	r3, [r7, #7]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3708      	adds	r7, #8
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	40020c00 	.word	0x40020c00

0800b52c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800b534:	f003 fa33 	bl	800e99e <osKernelSysTick>
 800b538:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800b53a:	e006      	b.n	800b54a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b53c:	f7ff ff8a 	bl	800b454 <BSP_SD_GetCardState>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	d101      	bne.n	800b54a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b546:	2300      	movs	r3, #0
 800b548:	e009      	b.n	800b55e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800b54a:	f003 fa28 	bl	800e99e <osKernelSysTick>
 800b54e:	4602      	mov	r2, r0
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	429a      	cmp	r2, r3
 800b558:	d8f0      	bhi.n	800b53c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b55a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
	...

0800b568 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	4603      	mov	r3, r0
 800b570:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b572:	4b0b      	ldr	r3, [pc, #44]	; (800b5a0 <SD_CheckStatus+0x38>)
 800b574:	2201      	movs	r2, #1
 800b576:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b578:	f7ff ff6c 	bl	800b454 <BSP_SD_GetCardState>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d107      	bne.n	800b592 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b582:	4b07      	ldr	r3, [pc, #28]	; (800b5a0 <SD_CheckStatus+0x38>)
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	b2db      	uxtb	r3, r3
 800b588:	f023 0301 	bic.w	r3, r3, #1
 800b58c:	b2da      	uxtb	r2, r3
 800b58e:	4b04      	ldr	r3, [pc, #16]	; (800b5a0 <SD_CheckStatus+0x38>)
 800b590:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b592:	4b03      	ldr	r3, [pc, #12]	; (800b5a0 <SD_CheckStatus+0x38>)
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	b2db      	uxtb	r3, r3
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	20000071 	.word	0x20000071

0800b5a4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b5a4:	b590      	push	{r4, r7, lr}
 800b5a6:	b087      	sub	sp, #28
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b5ae:	4b20      	ldr	r3, [pc, #128]	; (800b630 <SD_initialize+0x8c>)
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800b5b4:	f003 f9e7 	bl	800e986 <osKernelRunning>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d030      	beq.n	800b620 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b5be:	f7ff fefd 	bl	800b3bc <BSP_SD_Init>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d107      	bne.n	800b5d8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b5c8:	79fb      	ldrb	r3, [r7, #7]
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7ff ffcc 	bl	800b568 <SD_CheckStatus>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	4b16      	ldr	r3, [pc, #88]	; (800b630 <SD_initialize+0x8c>)
 800b5d6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b5d8:	4b15      	ldr	r3, [pc, #84]	; (800b630 <SD_initialize+0x8c>)
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d01e      	beq.n	800b620 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800b5e2:	4b14      	ldr	r3, [pc, #80]	; (800b634 <SD_initialize+0x90>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d10e      	bne.n	800b608 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800b5ea:	4b13      	ldr	r3, [pc, #76]	; (800b638 <SD_initialize+0x94>)
 800b5ec:	f107 0408 	add.w	r4, r7, #8
 800b5f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b5f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800b5f6:	f107 0308 	add.w	r3, r7, #8
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f003 fcf6 	bl	800efee <osMessageCreate>
 800b602:	4603      	mov	r3, r0
 800b604:	4a0b      	ldr	r2, [pc, #44]	; (800b634 <SD_initialize+0x90>)
 800b606:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800b608:	4b0a      	ldr	r3, [pc, #40]	; (800b634 <SD_initialize+0x90>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d107      	bne.n	800b620 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800b610:	4b07      	ldr	r3, [pc, #28]	; (800b630 <SD_initialize+0x8c>)
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	b2db      	uxtb	r3, r3
 800b616:	f043 0301 	orr.w	r3, r3, #1
 800b61a:	b2da      	uxtb	r2, r3
 800b61c:	4b04      	ldr	r3, [pc, #16]	; (800b630 <SD_initialize+0x8c>)
 800b61e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b620:	4b03      	ldr	r3, [pc, #12]	; (800b630 <SD_initialize+0x8c>)
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	b2db      	uxtb	r3, r3
}
 800b626:	4618      	mov	r0, r3
 800b628:	371c      	adds	r7, #28
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd90      	pop	{r4, r7, pc}
 800b62e:	bf00      	nop
 800b630:	20000071 	.word	0x20000071
 800b634:	200017f8 	.word	0x200017f8
 800b638:	08015fb8 	.word	0x08015fb8

0800b63c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	4603      	mov	r3, r0
 800b644:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b646:	79fb      	ldrb	r3, [r7, #7]
 800b648:	4618      	mov	r0, r3
 800b64a:	f7ff ff8d 	bl	800b568 <SD_CheckStatus>
 800b64e:	4603      	mov	r3, r0
}
 800b650:	4618      	mov	r0, r3
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b08a      	sub	sp, #40	; 0x28
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60b9      	str	r1, [r7, #8]
 800b660:	607a      	str	r2, [r7, #4]
 800b662:	603b      	str	r3, [r7, #0]
 800b664:	4603      	mov	r3, r0
 800b666:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800b668:	2301      	movs	r3, #1
 800b66a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b66e:	f247 5030 	movw	r0, #30000	; 0x7530
 800b672:	f7ff ff5b 	bl	800b52c <SD_CheckStatusWithTimeout>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	da02      	bge.n	800b682 <SD_read+0x2a>
  {
    return res;
 800b67c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b680:	e032      	b.n	800b6e8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b682:	683a      	ldr	r2, [r7, #0]
 800b684:	6879      	ldr	r1, [r7, #4]
 800b686:	68b8      	ldr	r0, [r7, #8]
 800b688:	f7ff feb0 	bl	800b3ec <BSP_SD_ReadBlocks_DMA>
 800b68c:	4603      	mov	r3, r0
 800b68e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800b692:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b696:	2b00      	cmp	r3, #0
 800b698:	d124      	bne.n	800b6e4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b69a:	4b15      	ldr	r3, [pc, #84]	; (800b6f0 <SD_read+0x98>)
 800b69c:	6819      	ldr	r1, [r3, #0]
 800b69e:	f107 0314 	add.w	r3, r7, #20
 800b6a2:	f247 5230 	movw	r2, #30000	; 0x7530
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f003 fd0a 	bl	800f0c0 <osMessageGet>

    if (event.status == osEventMessage)
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	2b10      	cmp	r3, #16
 800b6b0:	d118      	bne.n	800b6e4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d115      	bne.n	800b6e4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800b6b8:	f003 f971 	bl	800e99e <osKernelSysTick>
 800b6bc:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b6be:	e008      	b.n	800b6d2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b6c0:	f7ff fec8 	bl	800b454 <BSP_SD_GetCardState>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d103      	bne.n	800b6d2 <SD_read+0x7a>
              {
                res = RES_OK;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b6d0:	e008      	b.n	800b6e4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b6d2:	f003 f964 	bl	800e99e <osKernelSysTick>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	6a3b      	ldr	r3, [r7, #32]
 800b6da:	1ad3      	subs	r3, r2, r3
 800b6dc:	f247 522f 	movw	r2, #29999	; 0x752f
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d9ed      	bls.n	800b6c0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3728      	adds	r7, #40	; 0x28
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	200017f8 	.word	0x200017f8

0800b6f4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b08a      	sub	sp, #40	; 0x28
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60b9      	str	r1, [r7, #8]
 800b6fc:	607a      	str	r2, [r7, #4]
 800b6fe:	603b      	str	r3, [r7, #0]
 800b700:	4603      	mov	r3, r0
 800b702:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b70a:	f247 5030 	movw	r0, #30000	; 0x7530
 800b70e:	f7ff ff0d 	bl	800b52c <SD_CheckStatusWithTimeout>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	da02      	bge.n	800b71e <SD_write+0x2a>
  {
    return res;
 800b718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b71c:	e02e      	b.n	800b77c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b71e:	683a      	ldr	r2, [r7, #0]
 800b720:	6879      	ldr	r1, [r7, #4]
 800b722:	68b8      	ldr	r0, [r7, #8]
 800b724:	f7ff fe7c 	bl	800b420 <BSP_SD_WriteBlocks_DMA>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d124      	bne.n	800b778 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b72e:	4b15      	ldr	r3, [pc, #84]	; (800b784 <SD_write+0x90>)
 800b730:	6819      	ldr	r1, [r3, #0]
 800b732:	f107 0314 	add.w	r3, r7, #20
 800b736:	f247 5230 	movw	r2, #30000	; 0x7530
 800b73a:	4618      	mov	r0, r3
 800b73c:	f003 fcc0 	bl	800f0c0 <osMessageGet>

    if (event.status == osEventMessage)
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	2b10      	cmp	r3, #16
 800b744:	d118      	bne.n	800b778 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	2b02      	cmp	r3, #2
 800b74a:	d115      	bne.n	800b778 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800b74c:	f003 f927 	bl	800e99e <osKernelSysTick>
 800b750:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b752:	e008      	b.n	800b766 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b754:	f7ff fe7e 	bl	800b454 <BSP_SD_GetCardState>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d103      	bne.n	800b766 <SD_write+0x72>
          {
            res = RES_OK;
 800b75e:	2300      	movs	r3, #0
 800b760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800b764:	e008      	b.n	800b778 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b766:	f003 f91a 	bl	800e99e <osKernelSysTick>
 800b76a:	4602      	mov	r2, r0
 800b76c:	6a3b      	ldr	r3, [r7, #32]
 800b76e:	1ad3      	subs	r3, r2, r3
 800b770:	f247 522f 	movw	r2, #29999	; 0x752f
 800b774:	4293      	cmp	r3, r2
 800b776:	d9ed      	bls.n	800b754 <SD_write+0x60>
    }

  }
#endif

  return res;
 800b778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3728      	adds	r7, #40	; 0x28
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	200017f8 	.word	0x200017f8

0800b788 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b08c      	sub	sp, #48	; 0x30
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	4603      	mov	r3, r0
 800b790:	603a      	str	r2, [r7, #0]
 800b792:	71fb      	strb	r3, [r7, #7]
 800b794:	460b      	mov	r3, r1
 800b796:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b798:	2301      	movs	r3, #1
 800b79a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b79e:	4b25      	ldr	r3, [pc, #148]	; (800b834 <SD_ioctl+0xac>)
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	f003 0301 	and.w	r3, r3, #1
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d001      	beq.n	800b7b0 <SD_ioctl+0x28>
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	e03c      	b.n	800b82a <SD_ioctl+0xa2>

  switch (cmd)
 800b7b0:	79bb      	ldrb	r3, [r7, #6]
 800b7b2:	2b03      	cmp	r3, #3
 800b7b4:	d834      	bhi.n	800b820 <SD_ioctl+0x98>
 800b7b6:	a201      	add	r2, pc, #4	; (adr r2, 800b7bc <SD_ioctl+0x34>)
 800b7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7bc:	0800b7cd 	.word	0x0800b7cd
 800b7c0:	0800b7d5 	.word	0x0800b7d5
 800b7c4:	0800b7ed 	.word	0x0800b7ed
 800b7c8:	0800b807 	.word	0x0800b807
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b7d2:	e028      	b.n	800b826 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b7d4:	f107 030c 	add.w	r3, r7, #12
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7ff fe4b 	bl	800b474 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b7de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b7ea:	e01c      	b.n	800b826 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b7ec:	f107 030c 	add.w	r3, r7, #12
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7ff fe3f 	bl	800b474 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b7fe:	2300      	movs	r3, #0
 800b800:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b804:	e00f      	b.n	800b826 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b806:	f107 030c 	add.w	r3, r7, #12
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff fe32 	bl	800b474 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b812:	0a5a      	lsrs	r2, r3, #9
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b818:	2300      	movs	r3, #0
 800b81a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b81e:	e002      	b.n	800b826 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b820:	2304      	movs	r3, #4
 800b822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3730      	adds	r7, #48	; 0x30
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	20000071 	.word	0x20000071

0800b838 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800b83c:	4b04      	ldr	r3, [pc, #16]	; (800b850 <BSP_SD_WriteCpltCallback+0x18>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2200      	movs	r2, #0
 800b842:	2102      	movs	r1, #2
 800b844:	4618      	mov	r0, r3
 800b846:	f003 fbfb 	bl	800f040 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b84a:	bf00      	nop
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	200017f8 	.word	0x200017f8

0800b854 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800b858:	4b04      	ldr	r3, [pc, #16]	; (800b86c <BSP_SD_ReadCpltCallback+0x18>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2200      	movs	r2, #0
 800b85e:	2101      	movs	r1, #1
 800b860:	4618      	mov	r0, r3
 800b862:	f003 fbed 	bl	800f040 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b866:	bf00      	nop
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	200017f8 	.word	0x200017f8

0800b870 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	4603      	mov	r3, r0
 800b878:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b87a:	79fb      	ldrb	r3, [r7, #7]
 800b87c:	4a08      	ldr	r2, [pc, #32]	; (800b8a0 <disk_status+0x30>)
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4413      	add	r3, r2
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	79fa      	ldrb	r2, [r7, #7]
 800b888:	4905      	ldr	r1, [pc, #20]	; (800b8a0 <disk_status+0x30>)
 800b88a:	440a      	add	r2, r1
 800b88c:	7a12      	ldrb	r2, [r2, #8]
 800b88e:	4610      	mov	r0, r2
 800b890:	4798      	blx	r3
 800b892:	4603      	mov	r3, r0
 800b894:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b896:	7bfb      	ldrb	r3, [r7, #15]
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3710      	adds	r7, #16
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	20001824 	.word	0x20001824

0800b8a4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b8b2:	79fb      	ldrb	r3, [r7, #7]
 800b8b4:	4a0d      	ldr	r2, [pc, #52]	; (800b8ec <disk_initialize+0x48>)
 800b8b6:	5cd3      	ldrb	r3, [r2, r3]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d111      	bne.n	800b8e0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b8bc:	79fb      	ldrb	r3, [r7, #7]
 800b8be:	4a0b      	ldr	r2, [pc, #44]	; (800b8ec <disk_initialize+0x48>)
 800b8c0:	2101      	movs	r1, #1
 800b8c2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b8c4:	79fb      	ldrb	r3, [r7, #7]
 800b8c6:	4a09      	ldr	r2, [pc, #36]	; (800b8ec <disk_initialize+0x48>)
 800b8c8:	009b      	lsls	r3, r3, #2
 800b8ca:	4413      	add	r3, r2
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	79fa      	ldrb	r2, [r7, #7]
 800b8d2:	4906      	ldr	r1, [pc, #24]	; (800b8ec <disk_initialize+0x48>)
 800b8d4:	440a      	add	r2, r1
 800b8d6:	7a12      	ldrb	r2, [r2, #8]
 800b8d8:	4610      	mov	r0, r2
 800b8da:	4798      	blx	r3
 800b8dc:	4603      	mov	r3, r0
 800b8de:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	20001824 	.word	0x20001824

0800b8f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b8f0:	b590      	push	{r4, r7, lr}
 800b8f2:	b087      	sub	sp, #28
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60b9      	str	r1, [r7, #8]
 800b8f8:	607a      	str	r2, [r7, #4]
 800b8fa:	603b      	str	r3, [r7, #0]
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b900:	7bfb      	ldrb	r3, [r7, #15]
 800b902:	4a0a      	ldr	r2, [pc, #40]	; (800b92c <disk_read+0x3c>)
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	689c      	ldr	r4, [r3, #8]
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
 800b90e:	4a07      	ldr	r2, [pc, #28]	; (800b92c <disk_read+0x3c>)
 800b910:	4413      	add	r3, r2
 800b912:	7a18      	ldrb	r0, [r3, #8]
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	68b9      	ldr	r1, [r7, #8]
 800b91a:	47a0      	blx	r4
 800b91c:	4603      	mov	r3, r0
 800b91e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b920:	7dfb      	ldrb	r3, [r7, #23]
}
 800b922:	4618      	mov	r0, r3
 800b924:	371c      	adds	r7, #28
 800b926:	46bd      	mov	sp, r7
 800b928:	bd90      	pop	{r4, r7, pc}
 800b92a:	bf00      	nop
 800b92c:	20001824 	.word	0x20001824

0800b930 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b930:	b590      	push	{r4, r7, lr}
 800b932:	b087      	sub	sp, #28
 800b934:	af00      	add	r7, sp, #0
 800b936:	60b9      	str	r1, [r7, #8]
 800b938:	607a      	str	r2, [r7, #4]
 800b93a:	603b      	str	r3, [r7, #0]
 800b93c:	4603      	mov	r3, r0
 800b93e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b940:	7bfb      	ldrb	r3, [r7, #15]
 800b942:	4a0a      	ldr	r2, [pc, #40]	; (800b96c <disk_write+0x3c>)
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	4413      	add	r3, r2
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	68dc      	ldr	r4, [r3, #12]
 800b94c:	7bfb      	ldrb	r3, [r7, #15]
 800b94e:	4a07      	ldr	r2, [pc, #28]	; (800b96c <disk_write+0x3c>)
 800b950:	4413      	add	r3, r2
 800b952:	7a18      	ldrb	r0, [r3, #8]
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	68b9      	ldr	r1, [r7, #8]
 800b95a:	47a0      	blx	r4
 800b95c:	4603      	mov	r3, r0
 800b95e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b960:	7dfb      	ldrb	r3, [r7, #23]
}
 800b962:	4618      	mov	r0, r3
 800b964:	371c      	adds	r7, #28
 800b966:	46bd      	mov	sp, r7
 800b968:	bd90      	pop	{r4, r7, pc}
 800b96a:	bf00      	nop
 800b96c:	20001824 	.word	0x20001824

0800b970 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	4603      	mov	r3, r0
 800b978:	603a      	str	r2, [r7, #0]
 800b97a:	71fb      	strb	r3, [r7, #7]
 800b97c:	460b      	mov	r3, r1
 800b97e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b980:	79fb      	ldrb	r3, [r7, #7]
 800b982:	4a09      	ldr	r2, [pc, #36]	; (800b9a8 <disk_ioctl+0x38>)
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	4413      	add	r3, r2
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	691b      	ldr	r3, [r3, #16]
 800b98c:	79fa      	ldrb	r2, [r7, #7]
 800b98e:	4906      	ldr	r1, [pc, #24]	; (800b9a8 <disk_ioctl+0x38>)
 800b990:	440a      	add	r2, r1
 800b992:	7a10      	ldrb	r0, [r2, #8]
 800b994:	79b9      	ldrb	r1, [r7, #6]
 800b996:	683a      	ldr	r2, [r7, #0]
 800b998:	4798      	blx	r3
 800b99a:	4603      	mov	r3, r0
 800b99c:	73fb      	strb	r3, [r7, #15]
  return res;
 800b99e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	20001824 	.word	0x20001824

0800b9ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b9bc:	89fb      	ldrh	r3, [r7, #14]
 800b9be:	021b      	lsls	r3, r3, #8
 800b9c0:	b21a      	sxth	r2, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	b21b      	sxth	r3, r3
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	b21b      	sxth	r3, r3
 800b9cc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b9ce:	89fb      	ldrh	r3, [r7, #14]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3714      	adds	r7, #20
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	3303      	adds	r3, #3
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	021b      	lsls	r3, r3, #8
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	3202      	adds	r2, #2
 800b9f4:	7812      	ldrb	r2, [r2, #0]
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	021b      	lsls	r3, r3, #8
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	3201      	adds	r2, #1
 800ba02:	7812      	ldrb	r2, [r2, #0]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	021b      	lsls	r3, r3, #8
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	7812      	ldrb	r2, [r2, #0]
 800ba10:	4313      	orrs	r3, r2
 800ba12:	60fb      	str	r3, [r7, #12]
	return rv;
 800ba14:	68fb      	ldr	r3, [r7, #12]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3714      	adds	r7, #20
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ba22:	b480      	push	{r7}
 800ba24:	b083      	sub	sp, #12
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	1c5a      	adds	r2, r3, #1
 800ba32:	607a      	str	r2, [r7, #4]
 800ba34:	887a      	ldrh	r2, [r7, #2]
 800ba36:	b2d2      	uxtb	r2, r2
 800ba38:	701a      	strb	r2, [r3, #0]
 800ba3a:	887b      	ldrh	r3, [r7, #2]
 800ba3c:	0a1b      	lsrs	r3, r3, #8
 800ba3e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	1c5a      	adds	r2, r3, #1
 800ba44:	607a      	str	r2, [r7, #4]
 800ba46:	887a      	ldrh	r2, [r7, #2]
 800ba48:	b2d2      	uxtb	r2, r2
 800ba4a:	701a      	strb	r2, [r3, #0]
}
 800ba4c:	bf00      	nop
 800ba4e:	370c      	adds	r7, #12
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	1c5a      	adds	r2, r3, #1
 800ba66:	607a      	str	r2, [r7, #4]
 800ba68:	683a      	ldr	r2, [r7, #0]
 800ba6a:	b2d2      	uxtb	r2, r2
 800ba6c:	701a      	strb	r2, [r3, #0]
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	0a1b      	lsrs	r3, r3, #8
 800ba72:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	1c5a      	adds	r2, r3, #1
 800ba78:	607a      	str	r2, [r7, #4]
 800ba7a:	683a      	ldr	r2, [r7, #0]
 800ba7c:	b2d2      	uxtb	r2, r2
 800ba7e:	701a      	strb	r2, [r3, #0]
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	0a1b      	lsrs	r3, r3, #8
 800ba84:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	1c5a      	adds	r2, r3, #1
 800ba8a:	607a      	str	r2, [r7, #4]
 800ba8c:	683a      	ldr	r2, [r7, #0]
 800ba8e:	b2d2      	uxtb	r2, r2
 800ba90:	701a      	strb	r2, [r3, #0]
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	0a1b      	lsrs	r3, r3, #8
 800ba96:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	1c5a      	adds	r2, r3, #1
 800ba9c:	607a      	str	r2, [r7, #4]
 800ba9e:	683a      	ldr	r2, [r7, #0]
 800baa0:	b2d2      	uxtb	r2, r2
 800baa2:	701a      	strb	r2, [r3, #0]
}
 800baa4:	bf00      	nop
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bab0:	b480      	push	{r7}
 800bab2:	b087      	sub	sp, #28
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00d      	beq.n	800bae6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800baca:	693a      	ldr	r2, [r7, #16]
 800bacc:	1c53      	adds	r3, r2, #1
 800bace:	613b      	str	r3, [r7, #16]
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	1c59      	adds	r1, r3, #1
 800bad4:	6179      	str	r1, [r7, #20]
 800bad6:	7812      	ldrb	r2, [r2, #0]
 800bad8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	3b01      	subs	r3, #1
 800bade:	607b      	str	r3, [r7, #4]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1f1      	bne.n	800baca <mem_cpy+0x1a>
	}
}
 800bae6:	bf00      	nop
 800bae8:	371c      	adds	r7, #28
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr

0800baf2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800baf2:	b480      	push	{r7}
 800baf4:	b087      	sub	sp, #28
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	60f8      	str	r0, [r7, #12]
 800bafa:	60b9      	str	r1, [r7, #8]
 800bafc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	1c5a      	adds	r2, r3, #1
 800bb06:	617a      	str	r2, [r7, #20]
 800bb08:	68ba      	ldr	r2, [r7, #8]
 800bb0a:	b2d2      	uxtb	r2, r2
 800bb0c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	3b01      	subs	r3, #1
 800bb12:	607b      	str	r3, [r7, #4]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d1f3      	bne.n	800bb02 <mem_set+0x10>
}
 800bb1a:	bf00      	nop
 800bb1c:	bf00      	nop
 800bb1e:	371c      	adds	r7, #28
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bb28:	b480      	push	{r7}
 800bb2a:	b089      	sub	sp, #36	; 0x24
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	61fb      	str	r3, [r7, #28]
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	1c5a      	adds	r2, r3, #1
 800bb44:	61fa      	str	r2, [r7, #28]
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	4619      	mov	r1, r3
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	1c5a      	adds	r2, r3, #1
 800bb4e:	61ba      	str	r2, [r7, #24]
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	1acb      	subs	r3, r1, r3
 800bb54:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	607b      	str	r3, [r7, #4]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d002      	beq.n	800bb68 <mem_cmp+0x40>
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d0eb      	beq.n	800bb40 <mem_cmp+0x18>

	return r;
 800bb68:	697b      	ldr	r3, [r7, #20]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3724      	adds	r7, #36	; 0x24
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bb76:	b480      	push	{r7}
 800bb78:	b083      	sub	sp, #12
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bb80:	e002      	b.n	800bb88 <chk_chr+0x12>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	3301      	adds	r3, #1
 800bb86:	607b      	str	r3, [r7, #4]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d005      	beq.n	800bb9c <chk_chr+0x26>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	461a      	mov	r2, r3
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d1f2      	bne.n	800bb82 <chk_chr+0xc>
	return *str;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	781b      	ldrb	r3, [r3, #0]
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d009      	beq.n	800bbce <lock_fs+0x22>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	691b      	ldr	r3, [r3, #16]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f002 fe90 	bl	800e8e4 <ff_req_grant>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d001      	beq.n	800bbce <lock_fs+0x22>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e000      	b.n	800bbd0 <lock_fs+0x24>
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d00d      	beq.n	800bc06 <unlock_fs+0x2e>
 800bbea:	78fb      	ldrb	r3, [r7, #3]
 800bbec:	2b0c      	cmp	r3, #12
 800bbee:	d00a      	beq.n	800bc06 <unlock_fs+0x2e>
 800bbf0:	78fb      	ldrb	r3, [r7, #3]
 800bbf2:	2b0b      	cmp	r3, #11
 800bbf4:	d007      	beq.n	800bc06 <unlock_fs+0x2e>
 800bbf6:	78fb      	ldrb	r3, [r7, #3]
 800bbf8:	2b0f      	cmp	r3, #15
 800bbfa:	d004      	beq.n	800bc06 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	4618      	mov	r0, r3
 800bc02:	f002 fe84 	bl	800e90e <ff_rel_grant>
	}
}
 800bc06:	bf00      	nop
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
	...

0800bc10 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	60bb      	str	r3, [r7, #8]
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	60fb      	str	r3, [r7, #12]
 800bc22:	e029      	b.n	800bc78 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bc24:	4a27      	ldr	r2, [pc, #156]	; (800bcc4 <chk_lock+0xb4>)
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	011b      	lsls	r3, r3, #4
 800bc2a:	4413      	add	r3, r2
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d01d      	beq.n	800bc6e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bc32:	4a24      	ldr	r2, [pc, #144]	; (800bcc4 <chk_lock+0xb4>)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	011b      	lsls	r3, r3, #4
 800bc38:	4413      	add	r3, r2
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d116      	bne.n	800bc72 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bc44:	4a1f      	ldr	r2, [pc, #124]	; (800bcc4 <chk_lock+0xb4>)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	011b      	lsls	r3, r3, #4
 800bc4a:	4413      	add	r3, r2
 800bc4c:	3304      	adds	r3, #4
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d10c      	bne.n	800bc72 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bc58:	4a1a      	ldr	r2, [pc, #104]	; (800bcc4 <chk_lock+0xb4>)
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	011b      	lsls	r3, r3, #4
 800bc5e:	4413      	add	r3, r2
 800bc60:	3308      	adds	r3, #8
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d102      	bne.n	800bc72 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bc6c:	e007      	b.n	800bc7e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	3301      	adds	r3, #1
 800bc76:	60fb      	str	r3, [r7, #12]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d9d2      	bls.n	800bc24 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2b02      	cmp	r3, #2
 800bc82:	d109      	bne.n	800bc98 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d102      	bne.n	800bc90 <chk_lock+0x80>
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	2b02      	cmp	r3, #2
 800bc8e:	d101      	bne.n	800bc94 <chk_lock+0x84>
 800bc90:	2300      	movs	r3, #0
 800bc92:	e010      	b.n	800bcb6 <chk_lock+0xa6>
 800bc94:	2312      	movs	r3, #18
 800bc96:	e00e      	b.n	800bcb6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d108      	bne.n	800bcb0 <chk_lock+0xa0>
 800bc9e:	4a09      	ldr	r2, [pc, #36]	; (800bcc4 <chk_lock+0xb4>)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	011b      	lsls	r3, r3, #4
 800bca4:	4413      	add	r3, r2
 800bca6:	330c      	adds	r3, #12
 800bca8:	881b      	ldrh	r3, [r3, #0]
 800bcaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcae:	d101      	bne.n	800bcb4 <chk_lock+0xa4>
 800bcb0:	2310      	movs	r3, #16
 800bcb2:	e000      	b.n	800bcb6 <chk_lock+0xa6>
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3714      	adds	r7, #20
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	20001804 	.word	0x20001804

0800bcc8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	607b      	str	r3, [r7, #4]
 800bcd2:	e002      	b.n	800bcda <enq_lock+0x12>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	607b      	str	r3, [r7, #4]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d806      	bhi.n	800bcee <enq_lock+0x26>
 800bce0:	4a09      	ldr	r2, [pc, #36]	; (800bd08 <enq_lock+0x40>)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	011b      	lsls	r3, r3, #4
 800bce6:	4413      	add	r3, r2
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d1f2      	bne.n	800bcd4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2b02      	cmp	r3, #2
 800bcf2:	bf14      	ite	ne
 800bcf4:	2301      	movne	r3, #1
 800bcf6:	2300      	moveq	r3, #0
 800bcf8:	b2db      	uxtb	r3, r3
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	370c      	adds	r7, #12
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	20001804 	.word	0x20001804

0800bd0c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bd16:	2300      	movs	r3, #0
 800bd18:	60fb      	str	r3, [r7, #12]
 800bd1a:	e01f      	b.n	800bd5c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bd1c:	4a41      	ldr	r2, [pc, #260]	; (800be24 <inc_lock+0x118>)
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	011b      	lsls	r3, r3, #4
 800bd22:	4413      	add	r3, r2
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d113      	bne.n	800bd56 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bd2e:	4a3d      	ldr	r2, [pc, #244]	; (800be24 <inc_lock+0x118>)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	011b      	lsls	r3, r3, #4
 800bd34:	4413      	add	r3, r2
 800bd36:	3304      	adds	r3, #4
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d109      	bne.n	800bd56 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bd42:	4a38      	ldr	r2, [pc, #224]	; (800be24 <inc_lock+0x118>)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	011b      	lsls	r3, r3, #4
 800bd48:	4413      	add	r3, r2
 800bd4a:	3308      	adds	r3, #8
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d006      	beq.n	800bd64 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	60fb      	str	r3, [r7, #12]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d9dc      	bls.n	800bd1c <inc_lock+0x10>
 800bd62:	e000      	b.n	800bd66 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bd64:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2b02      	cmp	r3, #2
 800bd6a:	d132      	bne.n	800bdd2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	60fb      	str	r3, [r7, #12]
 800bd70:	e002      	b.n	800bd78 <inc_lock+0x6c>
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	3301      	adds	r3, #1
 800bd76:	60fb      	str	r3, [r7, #12]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d806      	bhi.n	800bd8c <inc_lock+0x80>
 800bd7e:	4a29      	ldr	r2, [pc, #164]	; (800be24 <inc_lock+0x118>)
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	011b      	lsls	r3, r3, #4
 800bd84:	4413      	add	r3, r2
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d1f2      	bne.n	800bd72 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2b02      	cmp	r3, #2
 800bd90:	d101      	bne.n	800bd96 <inc_lock+0x8a>
 800bd92:	2300      	movs	r3, #0
 800bd94:	e040      	b.n	800be18 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	4922      	ldr	r1, [pc, #136]	; (800be24 <inc_lock+0x118>)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	011b      	lsls	r3, r3, #4
 800bda0:	440b      	add	r3, r1
 800bda2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	689a      	ldr	r2, [r3, #8]
 800bda8:	491e      	ldr	r1, [pc, #120]	; (800be24 <inc_lock+0x118>)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	011b      	lsls	r3, r3, #4
 800bdae:	440b      	add	r3, r1
 800bdb0:	3304      	adds	r3, #4
 800bdb2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	695a      	ldr	r2, [r3, #20]
 800bdb8:	491a      	ldr	r1, [pc, #104]	; (800be24 <inc_lock+0x118>)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	011b      	lsls	r3, r3, #4
 800bdbe:	440b      	add	r3, r1
 800bdc0:	3308      	adds	r3, #8
 800bdc2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bdc4:	4a17      	ldr	r2, [pc, #92]	; (800be24 <inc_lock+0x118>)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	011b      	lsls	r3, r3, #4
 800bdca:	4413      	add	r3, r2
 800bdcc:	330c      	adds	r3, #12
 800bdce:	2200      	movs	r2, #0
 800bdd0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d009      	beq.n	800bdec <inc_lock+0xe0>
 800bdd8:	4a12      	ldr	r2, [pc, #72]	; (800be24 <inc_lock+0x118>)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	011b      	lsls	r3, r3, #4
 800bdde:	4413      	add	r3, r2
 800bde0:	330c      	adds	r3, #12
 800bde2:	881b      	ldrh	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d001      	beq.n	800bdec <inc_lock+0xe0>
 800bde8:	2300      	movs	r3, #0
 800bdea:	e015      	b.n	800be18 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d108      	bne.n	800be04 <inc_lock+0xf8>
 800bdf2:	4a0c      	ldr	r2, [pc, #48]	; (800be24 <inc_lock+0x118>)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	011b      	lsls	r3, r3, #4
 800bdf8:	4413      	add	r3, r2
 800bdfa:	330c      	adds	r3, #12
 800bdfc:	881b      	ldrh	r3, [r3, #0]
 800bdfe:	3301      	adds	r3, #1
 800be00:	b29a      	uxth	r2, r3
 800be02:	e001      	b.n	800be08 <inc_lock+0xfc>
 800be04:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be08:	4906      	ldr	r1, [pc, #24]	; (800be24 <inc_lock+0x118>)
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	011b      	lsls	r3, r3, #4
 800be0e:	440b      	add	r3, r1
 800be10:	330c      	adds	r3, #12
 800be12:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	3301      	adds	r3, #1
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3714      	adds	r7, #20
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr
 800be24:	20001804 	.word	0x20001804

0800be28 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800be28:	b480      	push	{r7}
 800be2a:	b085      	sub	sp, #20
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	3b01      	subs	r3, #1
 800be34:	607b      	str	r3, [r7, #4]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d825      	bhi.n	800be88 <dec_lock+0x60>
		n = Files[i].ctr;
 800be3c:	4a17      	ldr	r2, [pc, #92]	; (800be9c <dec_lock+0x74>)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	011b      	lsls	r3, r3, #4
 800be42:	4413      	add	r3, r2
 800be44:	330c      	adds	r3, #12
 800be46:	881b      	ldrh	r3, [r3, #0]
 800be48:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800be4a:	89fb      	ldrh	r3, [r7, #14]
 800be4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be50:	d101      	bne.n	800be56 <dec_lock+0x2e>
 800be52:	2300      	movs	r3, #0
 800be54:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800be56:	89fb      	ldrh	r3, [r7, #14]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d002      	beq.n	800be62 <dec_lock+0x3a>
 800be5c:	89fb      	ldrh	r3, [r7, #14]
 800be5e:	3b01      	subs	r3, #1
 800be60:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800be62:	4a0e      	ldr	r2, [pc, #56]	; (800be9c <dec_lock+0x74>)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	011b      	lsls	r3, r3, #4
 800be68:	4413      	add	r3, r2
 800be6a:	330c      	adds	r3, #12
 800be6c:	89fa      	ldrh	r2, [r7, #14]
 800be6e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800be70:	89fb      	ldrh	r3, [r7, #14]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d105      	bne.n	800be82 <dec_lock+0x5a>
 800be76:	4a09      	ldr	r2, [pc, #36]	; (800be9c <dec_lock+0x74>)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	011b      	lsls	r3, r3, #4
 800be7c:	4413      	add	r3, r2
 800be7e:	2200      	movs	r2, #0
 800be80:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800be82:	2300      	movs	r3, #0
 800be84:	737b      	strb	r3, [r7, #13]
 800be86:	e001      	b.n	800be8c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800be88:	2302      	movs	r3, #2
 800be8a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800be8c:	7b7b      	ldrb	r3, [r7, #13]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3714      	adds	r7, #20
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	20001804 	.word	0x20001804

0800bea0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bea8:	2300      	movs	r3, #0
 800beaa:	60fb      	str	r3, [r7, #12]
 800beac:	e010      	b.n	800bed0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800beae:	4a0d      	ldr	r2, [pc, #52]	; (800bee4 <clear_lock+0x44>)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	011b      	lsls	r3, r3, #4
 800beb4:	4413      	add	r3, r2
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d105      	bne.n	800beca <clear_lock+0x2a>
 800bebe:	4a09      	ldr	r2, [pc, #36]	; (800bee4 <clear_lock+0x44>)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	011b      	lsls	r3, r3, #4
 800bec4:	4413      	add	r3, r2
 800bec6:	2200      	movs	r2, #0
 800bec8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	3301      	adds	r3, #1
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d9eb      	bls.n	800beae <clear_lock+0xe>
	}
}
 800bed6:	bf00      	nop
 800bed8:	bf00      	nop
 800beda:	3714      	adds	r7, #20
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr
 800bee4:	20001804 	.word	0x20001804

0800bee8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bef0:	2300      	movs	r3, #0
 800bef2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	78db      	ldrb	r3, [r3, #3]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d034      	beq.n	800bf66 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf00:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	7858      	ldrb	r0, [r3, #1]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	697a      	ldr	r2, [r7, #20]
 800bf10:	f7ff fd0e 	bl	800b930 <disk_write>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d002      	beq.n	800bf20 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	73fb      	strb	r3, [r7, #15]
 800bf1e:	e022      	b.n	800bf66 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf2a:	697a      	ldr	r2, [r7, #20]
 800bf2c:	1ad2      	subs	r2, r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a1b      	ldr	r3, [r3, #32]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d217      	bcs.n	800bf66 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	789b      	ldrb	r3, [r3, #2]
 800bf3a:	613b      	str	r3, [r7, #16]
 800bf3c:	e010      	b.n	800bf60 <sync_window+0x78>
					wsect += fs->fsize;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6a1b      	ldr	r3, [r3, #32]
 800bf42:	697a      	ldr	r2, [r7, #20]
 800bf44:	4413      	add	r3, r2
 800bf46:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	7858      	ldrb	r0, [r3, #1]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bf52:	2301      	movs	r3, #1
 800bf54:	697a      	ldr	r2, [r7, #20]
 800bf56:	f7ff fceb 	bl	800b930 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	613b      	str	r3, [r7, #16]
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d8eb      	bhi.n	800bf3e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bf66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3718      	adds	r7, #24
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf82:	683a      	ldr	r2, [r7, #0]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d01b      	beq.n	800bfc0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f7ff ffad 	bl	800bee8 <sync_window>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bf92:	7bfb      	ldrb	r3, [r7, #15]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d113      	bne.n	800bfc0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	7858      	ldrb	r0, [r3, #1]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	683a      	ldr	r2, [r7, #0]
 800bfa6:	f7ff fca3 	bl	800b8f0 <disk_read>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d004      	beq.n	800bfba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bfb0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfb4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	683a      	ldr	r2, [r7, #0]
 800bfbe:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800bfc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
	...

0800bfcc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f7ff ff87 	bl	800bee8 <sync_window>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bfde:	7bfb      	ldrb	r3, [r7, #15]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d158      	bne.n	800c096 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	2b03      	cmp	r3, #3
 800bfea:	d148      	bne.n	800c07e <sync_fs+0xb2>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	791b      	ldrb	r3, [r3, #4]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d144      	bne.n	800c07e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	3338      	adds	r3, #56	; 0x38
 800bff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bffc:	2100      	movs	r1, #0
 800bffe:	4618      	mov	r0, r3
 800c000:	f7ff fd77 	bl	800baf2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	3338      	adds	r3, #56	; 0x38
 800c008:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c00c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c010:	4618      	mov	r0, r3
 800c012:	f7ff fd06 	bl	800ba22 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	3338      	adds	r3, #56	; 0x38
 800c01a:	4921      	ldr	r1, [pc, #132]	; (800c0a0 <sync_fs+0xd4>)
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7ff fd1b 	bl	800ba58 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	3338      	adds	r3, #56	; 0x38
 800c026:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c02a:	491e      	ldr	r1, [pc, #120]	; (800c0a4 <sync_fs+0xd8>)
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7ff fd13 	bl	800ba58 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	3338      	adds	r3, #56	; 0x38
 800c036:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	699b      	ldr	r3, [r3, #24]
 800c03e:	4619      	mov	r1, r3
 800c040:	4610      	mov	r0, r2
 800c042:	f7ff fd09 	bl	800ba58 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	3338      	adds	r3, #56	; 0x38
 800c04a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	695b      	ldr	r3, [r3, #20]
 800c052:	4619      	mov	r1, r3
 800c054:	4610      	mov	r0, r2
 800c056:	f7ff fcff 	bl	800ba58 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05e:	1c5a      	adds	r2, r3, #1
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	7858      	ldrb	r0, [r3, #1]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c072:	2301      	movs	r3, #1
 800c074:	f7ff fc5c 	bl	800b930 <disk_write>
			fs->fsi_flag = 0;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	785b      	ldrb	r3, [r3, #1]
 800c082:	2200      	movs	r2, #0
 800c084:	2100      	movs	r1, #0
 800c086:	4618      	mov	r0, r3
 800c088:	f7ff fc72 	bl	800b970 <disk_ioctl>
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d001      	beq.n	800c096 <sync_fs+0xca>
 800c092:	2301      	movs	r3, #1
 800c094:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c096:	7bfb      	ldrb	r3, [r7, #15]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3710      	adds	r7, #16
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	41615252 	.word	0x41615252
 800c0a4:	61417272 	.word	0x61417272

0800c0a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	3b02      	subs	r3, #2
 800c0b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	69db      	ldr	r3, [r3, #28]
 800c0bc:	3b02      	subs	r3, #2
 800c0be:	683a      	ldr	r2, [r7, #0]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d301      	bcc.n	800c0c8 <clust2sect+0x20>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	e008      	b.n	800c0da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	895b      	ldrh	r3, [r3, #10]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	fb03 f202 	mul.w	r2, r3, r2
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d8:	4413      	add	r3, r2
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	370c      	adds	r7, #12
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr

0800c0e6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b086      	sub	sp, #24
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d904      	bls.n	800c106 <get_fat+0x20>
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	69db      	ldr	r3, [r3, #28]
 800c100:	683a      	ldr	r2, [r7, #0]
 800c102:	429a      	cmp	r2, r3
 800c104:	d302      	bcc.n	800c10c <get_fat+0x26>
		val = 1;	/* Internal error */
 800c106:	2301      	movs	r3, #1
 800c108:	617b      	str	r3, [r7, #20]
 800c10a:	e08f      	b.n	800c22c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c10c:	f04f 33ff 	mov.w	r3, #4294967295
 800c110:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	2b03      	cmp	r3, #3
 800c118:	d062      	beq.n	800c1e0 <get_fat+0xfa>
 800c11a:	2b03      	cmp	r3, #3
 800c11c:	dc7c      	bgt.n	800c218 <get_fat+0x132>
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d002      	beq.n	800c128 <get_fat+0x42>
 800c122:	2b02      	cmp	r3, #2
 800c124:	d042      	beq.n	800c1ac <get_fat+0xc6>
 800c126:	e077      	b.n	800c218 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	60fb      	str	r3, [r7, #12]
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	085b      	lsrs	r3, r3, #1
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	4413      	add	r3, r2
 800c134:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	0a5b      	lsrs	r3, r3, #9
 800c13e:	4413      	add	r3, r2
 800c140:	4619      	mov	r1, r3
 800c142:	6938      	ldr	r0, [r7, #16]
 800c144:	f7ff ff14 	bl	800bf70 <move_window>
 800c148:	4603      	mov	r3, r0
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d167      	bne.n	800c21e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	1c5a      	adds	r2, r3, #1
 800c152:	60fa      	str	r2, [r7, #12]
 800c154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c158:	693a      	ldr	r2, [r7, #16]
 800c15a:	4413      	add	r3, r2
 800c15c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c160:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	0a5b      	lsrs	r3, r3, #9
 800c16a:	4413      	add	r3, r2
 800c16c:	4619      	mov	r1, r3
 800c16e:	6938      	ldr	r0, [r7, #16]
 800c170:	f7ff fefe 	bl	800bf70 <move_window>
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d153      	bne.n	800c222 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c180:	693a      	ldr	r2, [r7, #16]
 800c182:	4413      	add	r3, r2
 800c184:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c188:	021b      	lsls	r3, r3, #8
 800c18a:	461a      	mov	r2, r3
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	4313      	orrs	r3, r2
 800c190:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	f003 0301 	and.w	r3, r3, #1
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d002      	beq.n	800c1a2 <get_fat+0xbc>
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	091b      	lsrs	r3, r3, #4
 800c1a0:	e002      	b.n	800c1a8 <get_fat+0xc2>
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c1a8:	617b      	str	r3, [r7, #20]
			break;
 800c1aa:	e03f      	b.n	800c22c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	0a1b      	lsrs	r3, r3, #8
 800c1b4:	4413      	add	r3, r2
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	6938      	ldr	r0, [r7, #16]
 800c1ba:	f7ff fed9 	bl	800bf70 <move_window>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d130      	bne.n	800c226 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	005b      	lsls	r3, r3, #1
 800c1ce:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c1d2:	4413      	add	r3, r2
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7ff fbe9 	bl	800b9ac <ld_word>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	617b      	str	r3, [r7, #20]
			break;
 800c1de:	e025      	b.n	800c22c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	09db      	lsrs	r3, r3, #7
 800c1e8:	4413      	add	r3, r2
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	6938      	ldr	r0, [r7, #16]
 800c1ee:	f7ff febf 	bl	800bf70 <move_window>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d118      	bne.n	800c22a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c206:	4413      	add	r3, r2
 800c208:	4618      	mov	r0, r3
 800c20a:	f7ff fbe7 	bl	800b9dc <ld_dword>
 800c20e:	4603      	mov	r3, r0
 800c210:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c214:	617b      	str	r3, [r7, #20]
			break;
 800c216:	e009      	b.n	800c22c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c218:	2301      	movs	r3, #1
 800c21a:	617b      	str	r3, [r7, #20]
 800c21c:	e006      	b.n	800c22c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c21e:	bf00      	nop
 800c220:	e004      	b.n	800c22c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c222:	bf00      	nop
 800c224:	e002      	b.n	800c22c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c226:	bf00      	nop
 800c228:	e000      	b.n	800c22c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c22a:	bf00      	nop
		}
	}

	return val;
 800c22c:	697b      	ldr	r3, [r7, #20]
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3718      	adds	r7, #24
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c236:	b590      	push	{r4, r7, lr}
 800c238:	b089      	sub	sp, #36	; 0x24
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	60f8      	str	r0, [r7, #12]
 800c23e:	60b9      	str	r1, [r7, #8]
 800c240:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c242:	2302      	movs	r3, #2
 800c244:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	2b01      	cmp	r3, #1
 800c24a:	f240 80d2 	bls.w	800c3f2 <put_fat+0x1bc>
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	69db      	ldr	r3, [r3, #28]
 800c252:	68ba      	ldr	r2, [r7, #8]
 800c254:	429a      	cmp	r2, r3
 800c256:	f080 80cc 	bcs.w	800c3f2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	2b03      	cmp	r3, #3
 800c260:	f000 8096 	beq.w	800c390 <put_fat+0x15a>
 800c264:	2b03      	cmp	r3, #3
 800c266:	f300 80cd 	bgt.w	800c404 <put_fat+0x1ce>
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d002      	beq.n	800c274 <put_fat+0x3e>
 800c26e:	2b02      	cmp	r3, #2
 800c270:	d06e      	beq.n	800c350 <put_fat+0x11a>
 800c272:	e0c7      	b.n	800c404 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	61bb      	str	r3, [r7, #24]
 800c278:	69bb      	ldr	r3, [r7, #24]
 800c27a:	085b      	lsrs	r3, r3, #1
 800c27c:	69ba      	ldr	r2, [r7, #24]
 800c27e:	4413      	add	r3, r2
 800c280:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	0a5b      	lsrs	r3, r3, #9
 800c28a:	4413      	add	r3, r2
 800c28c:	4619      	mov	r1, r3
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f7ff fe6e 	bl	800bf70 <move_window>
 800c294:	4603      	mov	r3, r0
 800c296:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c298:	7ffb      	ldrb	r3, [r7, #31]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	f040 80ab 	bne.w	800c3f6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	1c59      	adds	r1, r3, #1
 800c2aa:	61b9      	str	r1, [r7, #24]
 800c2ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2b0:	4413      	add	r3, r2
 800c2b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	f003 0301 	and.w	r3, r3, #1
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00d      	beq.n	800c2da <put_fat+0xa4>
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	b25b      	sxtb	r3, r3
 800c2c4:	f003 030f 	and.w	r3, r3, #15
 800c2c8:	b25a      	sxtb	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	011b      	lsls	r3, r3, #4
 800c2d0:	b25b      	sxtb	r3, r3
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	b25b      	sxtb	r3, r3
 800c2d6:	b2db      	uxtb	r3, r3
 800c2d8:	e001      	b.n	800c2de <put_fat+0xa8>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	697a      	ldr	r2, [r7, #20]
 800c2e0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	0a5b      	lsrs	r3, r3, #9
 800c2f0:	4413      	add	r3, r2
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	68f8      	ldr	r0, [r7, #12]
 800c2f6:	f7ff fe3b 	bl	800bf70 <move_window>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c2fe:	7ffb      	ldrb	r3, [r7, #31]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d17a      	bne.n	800c3fa <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c310:	4413      	add	r3, r2
 800c312:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	f003 0301 	and.w	r3, r3, #1
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d003      	beq.n	800c326 <put_fat+0xf0>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	091b      	lsrs	r3, r3, #4
 800c322:	b2db      	uxtb	r3, r3
 800c324:	e00e      	b.n	800c344 <put_fat+0x10e>
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	b25b      	sxtb	r3, r3
 800c32c:	f023 030f 	bic.w	r3, r3, #15
 800c330:	b25a      	sxtb	r2, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	0a1b      	lsrs	r3, r3, #8
 800c336:	b25b      	sxtb	r3, r3
 800c338:	f003 030f 	and.w	r3, r3, #15
 800c33c:	b25b      	sxtb	r3, r3
 800c33e:	4313      	orrs	r3, r2
 800c340:	b25b      	sxtb	r3, r3
 800c342:	b2db      	uxtb	r3, r3
 800c344:	697a      	ldr	r2, [r7, #20]
 800c346:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2201      	movs	r2, #1
 800c34c:	70da      	strb	r2, [r3, #3]
			break;
 800c34e:	e059      	b.n	800c404 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	0a1b      	lsrs	r3, r3, #8
 800c358:	4413      	add	r3, r2
 800c35a:	4619      	mov	r1, r3
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f7ff fe07 	bl	800bf70 <move_window>
 800c362:	4603      	mov	r3, r0
 800c364:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c366:	7ffb      	ldrb	r3, [r7, #31]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d148      	bne.n	800c3fe <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	005b      	lsls	r3, r3, #1
 800c376:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c37a:	4413      	add	r3, r2
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	b292      	uxth	r2, r2
 800c380:	4611      	mov	r1, r2
 800c382:	4618      	mov	r0, r3
 800c384:	f7ff fb4d 	bl	800ba22 <st_word>
			fs->wflag = 1;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2201      	movs	r2, #1
 800c38c:	70da      	strb	r2, [r3, #3]
			break;
 800c38e:	e039      	b.n	800c404 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	09db      	lsrs	r3, r3, #7
 800c398:	4413      	add	r3, r2
 800c39a:	4619      	mov	r1, r3
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f7ff fde7 	bl	800bf70 <move_window>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c3a6:	7ffb      	ldrb	r3, [r7, #31]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d12a      	bne.n	800c402 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c3c0:	4413      	add	r3, r2
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7ff fb0a 	bl	800b9dc <ld_dword>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c3ce:	4323      	orrs	r3, r4
 800c3d0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c3e0:	4413      	add	r3, r2
 800c3e2:	6879      	ldr	r1, [r7, #4]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7ff fb37 	bl	800ba58 <st_dword>
			fs->wflag = 1;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	70da      	strb	r2, [r3, #3]
			break;
 800c3f0:	e008      	b.n	800c404 <put_fat+0x1ce>
		}
	}
 800c3f2:	bf00      	nop
 800c3f4:	e006      	b.n	800c404 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c3f6:	bf00      	nop
 800c3f8:	e004      	b.n	800c404 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c3fa:	bf00      	nop
 800c3fc:	e002      	b.n	800c404 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c3fe:	bf00      	nop
 800c400:	e000      	b.n	800c404 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c402:	bf00      	nop
	return res;
 800c404:	7ffb      	ldrb	r3, [r7, #31]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3724      	adds	r7, #36	; 0x24
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd90      	pop	{r4, r7, pc}

0800c40e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b088      	sub	sp, #32
 800c412:	af00      	add	r7, sp, #0
 800c414:	60f8      	str	r0, [r7, #12]
 800c416:	60b9      	str	r1, [r7, #8]
 800c418:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c41a:	2300      	movs	r3, #0
 800c41c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	2b01      	cmp	r3, #1
 800c428:	d904      	bls.n	800c434 <remove_chain+0x26>
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	69db      	ldr	r3, [r3, #28]
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	429a      	cmp	r2, r3
 800c432:	d301      	bcc.n	800c438 <remove_chain+0x2a>
 800c434:	2302      	movs	r3, #2
 800c436:	e04b      	b.n	800c4d0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00c      	beq.n	800c458 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c43e:	f04f 32ff 	mov.w	r2, #4294967295
 800c442:	6879      	ldr	r1, [r7, #4]
 800c444:	69b8      	ldr	r0, [r7, #24]
 800c446:	f7ff fef6 	bl	800c236 <put_fat>
 800c44a:	4603      	mov	r3, r0
 800c44c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c44e:	7ffb      	ldrb	r3, [r7, #31]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d001      	beq.n	800c458 <remove_chain+0x4a>
 800c454:	7ffb      	ldrb	r3, [r7, #31]
 800c456:	e03b      	b.n	800c4d0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c458:	68b9      	ldr	r1, [r7, #8]
 800c45a:	68f8      	ldr	r0, [r7, #12]
 800c45c:	f7ff fe43 	bl	800c0e6 <get_fat>
 800c460:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d031      	beq.n	800c4cc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d101      	bne.n	800c472 <remove_chain+0x64>
 800c46e:	2302      	movs	r3, #2
 800c470:	e02e      	b.n	800c4d0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c478:	d101      	bne.n	800c47e <remove_chain+0x70>
 800c47a:	2301      	movs	r3, #1
 800c47c:	e028      	b.n	800c4d0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c47e:	2200      	movs	r2, #0
 800c480:	68b9      	ldr	r1, [r7, #8]
 800c482:	69b8      	ldr	r0, [r7, #24]
 800c484:	f7ff fed7 	bl	800c236 <put_fat>
 800c488:	4603      	mov	r3, r0
 800c48a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c48c:	7ffb      	ldrb	r3, [r7, #31]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d001      	beq.n	800c496 <remove_chain+0x88>
 800c492:	7ffb      	ldrb	r3, [r7, #31]
 800c494:	e01c      	b.n	800c4d0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	699a      	ldr	r2, [r3, #24]
 800c49a:	69bb      	ldr	r3, [r7, #24]
 800c49c:	69db      	ldr	r3, [r3, #28]
 800c49e:	3b02      	subs	r3, #2
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d20b      	bcs.n	800c4bc <remove_chain+0xae>
			fs->free_clst++;
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	699b      	ldr	r3, [r3, #24]
 800c4a8:	1c5a      	adds	r2, r3, #1
 800c4aa:	69bb      	ldr	r3, [r7, #24]
 800c4ac:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	791b      	ldrb	r3, [r3, #4]
 800c4b2:	f043 0301 	orr.w	r3, r3, #1
 800c4b6:	b2da      	uxtb	r2, r3
 800c4b8:	69bb      	ldr	r3, [r7, #24]
 800c4ba:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c4c0:	69bb      	ldr	r3, [r7, #24]
 800c4c2:	69db      	ldr	r3, [r3, #28]
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d3c6      	bcc.n	800c458 <remove_chain+0x4a>
 800c4ca:	e000      	b.n	800c4ce <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c4cc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c4ce:	2300      	movs	r3, #0
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3720      	adds	r7, #32
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b088      	sub	sp, #32
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d10d      	bne.n	800c50a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	695b      	ldr	r3, [r3, #20]
 800c4f2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d004      	beq.n	800c504 <create_chain+0x2c>
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	69db      	ldr	r3, [r3, #28]
 800c4fe:	69ba      	ldr	r2, [r7, #24]
 800c500:	429a      	cmp	r2, r3
 800c502:	d31b      	bcc.n	800c53c <create_chain+0x64>
 800c504:	2301      	movs	r3, #1
 800c506:	61bb      	str	r3, [r7, #24]
 800c508:	e018      	b.n	800c53c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f7ff fdea 	bl	800c0e6 <get_fat>
 800c512:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2b01      	cmp	r3, #1
 800c518:	d801      	bhi.n	800c51e <create_chain+0x46>
 800c51a:	2301      	movs	r3, #1
 800c51c:	e070      	b.n	800c600 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c524:	d101      	bne.n	800c52a <create_chain+0x52>
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	e06a      	b.n	800c600 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	69db      	ldr	r3, [r3, #28]
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	429a      	cmp	r2, r3
 800c532:	d201      	bcs.n	800c538 <create_chain+0x60>
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	e063      	b.n	800c600 <create_chain+0x128>
		scl = clst;
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c53c:	69bb      	ldr	r3, [r7, #24]
 800c53e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	3301      	adds	r3, #1
 800c544:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	69db      	ldr	r3, [r3, #28]
 800c54a:	69fa      	ldr	r2, [r7, #28]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d307      	bcc.n	800c560 <create_chain+0x88>
				ncl = 2;
 800c550:	2302      	movs	r3, #2
 800c552:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c554:	69fa      	ldr	r2, [r7, #28]
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d901      	bls.n	800c560 <create_chain+0x88>
 800c55c:	2300      	movs	r3, #0
 800c55e:	e04f      	b.n	800c600 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c560:	69f9      	ldr	r1, [r7, #28]
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f7ff fdbf 	bl	800c0e6 <get_fat>
 800c568:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00e      	beq.n	800c58e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2b01      	cmp	r3, #1
 800c574:	d003      	beq.n	800c57e <create_chain+0xa6>
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c57c:	d101      	bne.n	800c582 <create_chain+0xaa>
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	e03e      	b.n	800c600 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c582:	69fa      	ldr	r2, [r7, #28]
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	429a      	cmp	r2, r3
 800c588:	d1da      	bne.n	800c540 <create_chain+0x68>
 800c58a:	2300      	movs	r3, #0
 800c58c:	e038      	b.n	800c600 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c58e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c590:	f04f 32ff 	mov.w	r2, #4294967295
 800c594:	69f9      	ldr	r1, [r7, #28]
 800c596:	6938      	ldr	r0, [r7, #16]
 800c598:	f7ff fe4d 	bl	800c236 <put_fat>
 800c59c:	4603      	mov	r3, r0
 800c59e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c5a0:	7dfb      	ldrb	r3, [r7, #23]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d109      	bne.n	800c5ba <create_chain+0xe2>
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d006      	beq.n	800c5ba <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c5ac:	69fa      	ldr	r2, [r7, #28]
 800c5ae:	6839      	ldr	r1, [r7, #0]
 800c5b0:	6938      	ldr	r0, [r7, #16]
 800c5b2:	f7ff fe40 	bl	800c236 <put_fat>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c5ba:	7dfb      	ldrb	r3, [r7, #23]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d116      	bne.n	800c5ee <create_chain+0x116>
		fs->last_clst = ncl;
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	69fa      	ldr	r2, [r7, #28]
 800c5c4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	699a      	ldr	r2, [r3, #24]
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	69db      	ldr	r3, [r3, #28]
 800c5ce:	3b02      	subs	r3, #2
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d804      	bhi.n	800c5de <create_chain+0x106>
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	699b      	ldr	r3, [r3, #24]
 800c5d8:	1e5a      	subs	r2, r3, #1
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	791b      	ldrb	r3, [r3, #4]
 800c5e2:	f043 0301 	orr.w	r3, r3, #1
 800c5e6:	b2da      	uxtb	r2, r3
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	711a      	strb	r2, [r3, #4]
 800c5ec:	e007      	b.n	800c5fe <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c5ee:	7dfb      	ldrb	r3, [r7, #23]
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d102      	bne.n	800c5fa <create_chain+0x122>
 800c5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5f8:	e000      	b.n	800c5fc <create_chain+0x124>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c5fe:	69fb      	ldr	r3, [r7, #28]
}
 800c600:	4618      	mov	r0, r3
 800c602:	3720      	adds	r7, #32
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c608:	b480      	push	{r7}
 800c60a:	b087      	sub	sp, #28
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c61c:	3304      	adds	r3, #4
 800c61e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	0a5b      	lsrs	r3, r3, #9
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	8952      	ldrh	r2, [r2, #10]
 800c628:	fbb3 f3f2 	udiv	r3, r3, r2
 800c62c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	1d1a      	adds	r2, r3, #4
 800c632:	613a      	str	r2, [r7, #16]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d101      	bne.n	800c642 <clmt_clust+0x3a>
 800c63e:	2300      	movs	r3, #0
 800c640:	e010      	b.n	800c664 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c642:	697a      	ldr	r2, [r7, #20]
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	429a      	cmp	r2, r3
 800c648:	d307      	bcc.n	800c65a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	1ad3      	subs	r3, r2, r3
 800c650:	617b      	str	r3, [r7, #20]
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	3304      	adds	r3, #4
 800c656:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c658:	e7e9      	b.n	800c62e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c65a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	681a      	ldr	r2, [r3, #0]
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	4413      	add	r3, r2
}
 800c664:	4618      	mov	r0, r3
 800c666:	371c      	adds	r7, #28
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b086      	sub	sp, #24
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c686:	d204      	bcs.n	800c692 <dir_sdi+0x22>
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	f003 031f 	and.w	r3, r3, #31
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d001      	beq.n	800c696 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c692:	2302      	movs	r3, #2
 800c694:	e063      	b.n	800c75e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	683a      	ldr	r2, [r7, #0]
 800c69a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d106      	bne.n	800c6b6 <dir_sdi+0x46>
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d902      	bls.n	800c6b6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d10c      	bne.n	800c6d6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	095b      	lsrs	r3, r3, #5
 800c6c0:	693a      	ldr	r2, [r7, #16]
 800c6c2:	8912      	ldrh	r2, [r2, #8]
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d301      	bcc.n	800c6cc <dir_sdi+0x5c>
 800c6c8:	2302      	movs	r3, #2
 800c6ca:	e048      	b.n	800c75e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	61da      	str	r2, [r3, #28]
 800c6d4:	e029      	b.n	800c72a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	895b      	ldrh	r3, [r3, #10]
 800c6da:	025b      	lsls	r3, r3, #9
 800c6dc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c6de:	e019      	b.n	800c714 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6979      	ldr	r1, [r7, #20]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7ff fcfe 	bl	800c0e6 <get_fat>
 800c6ea:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f2:	d101      	bne.n	800c6f8 <dir_sdi+0x88>
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e032      	b.n	800c75e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d904      	bls.n	800c708 <dir_sdi+0x98>
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	69db      	ldr	r3, [r3, #28]
 800c702:	697a      	ldr	r2, [r7, #20]
 800c704:	429a      	cmp	r2, r3
 800c706:	d301      	bcc.n	800c70c <dir_sdi+0x9c>
 800c708:	2302      	movs	r3, #2
 800c70a:	e028      	b.n	800c75e <dir_sdi+0xee>
			ofs -= csz;
 800c70c:	683a      	ldr	r2, [r7, #0]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	1ad3      	subs	r3, r2, r3
 800c712:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c714:	683a      	ldr	r2, [r7, #0]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d2e1      	bcs.n	800c6e0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c71c:	6979      	ldr	r1, [r7, #20]
 800c71e:	6938      	ldr	r0, [r7, #16]
 800c720:	f7ff fcc2 	bl	800c0a8 <clust2sect>
 800c724:	4602      	mov	r2, r0
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	697a      	ldr	r2, [r7, #20]
 800c72e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	69db      	ldr	r3, [r3, #28]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <dir_sdi+0xcc>
 800c738:	2302      	movs	r3, #2
 800c73a:	e010      	b.n	800c75e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	69da      	ldr	r2, [r3, #28]
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	0a5b      	lsrs	r3, r3, #9
 800c744:	441a      	add	r2, r3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c756:	441a      	add	r2, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3718      	adds	r7, #24
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c766:	b580      	push	{r7, lr}
 800c768:	b086      	sub	sp, #24
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
 800c76e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	695b      	ldr	r3, [r3, #20]
 800c77a:	3320      	adds	r3, #32
 800c77c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	69db      	ldr	r3, [r3, #28]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d003      	beq.n	800c78e <dir_next+0x28>
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c78c:	d301      	bcc.n	800c792 <dir_next+0x2c>
 800c78e:	2304      	movs	r3, #4
 800c790:	e0aa      	b.n	800c8e8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c798:	2b00      	cmp	r3, #0
 800c79a:	f040 8098 	bne.w	800c8ce <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	69db      	ldr	r3, [r3, #28]
 800c7a2:	1c5a      	adds	r2, r3, #1
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	699b      	ldr	r3, [r3, #24]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d10b      	bne.n	800c7c8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	095b      	lsrs	r3, r3, #5
 800c7b4:	68fa      	ldr	r2, [r7, #12]
 800c7b6:	8912      	ldrh	r2, [r2, #8]
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	f0c0 8088 	bcc.w	800c8ce <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	61da      	str	r2, [r3, #28]
 800c7c4:	2304      	movs	r3, #4
 800c7c6:	e08f      	b.n	800c8e8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	0a5b      	lsrs	r3, r3, #9
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	8952      	ldrh	r2, [r2, #10]
 800c7d0:	3a01      	subs	r2, #1
 800c7d2:	4013      	ands	r3, r2
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d17a      	bne.n	800c8ce <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	699b      	ldr	r3, [r3, #24]
 800c7de:	4619      	mov	r1, r3
 800c7e0:	4610      	mov	r0, r2
 800c7e2:	f7ff fc80 	bl	800c0e6 <get_fat>
 800c7e6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	d801      	bhi.n	800c7f2 <dir_next+0x8c>
 800c7ee:	2302      	movs	r3, #2
 800c7f0:	e07a      	b.n	800c8e8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f8:	d101      	bne.n	800c7fe <dir_next+0x98>
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	e074      	b.n	800c8e8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	69db      	ldr	r3, [r3, #28]
 800c802:	697a      	ldr	r2, [r7, #20]
 800c804:	429a      	cmp	r2, r3
 800c806:	d358      	bcc.n	800c8ba <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d104      	bne.n	800c818 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	61da      	str	r2, [r3, #28]
 800c814:	2304      	movs	r3, #4
 800c816:	e067      	b.n	800c8e8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	699b      	ldr	r3, [r3, #24]
 800c81e:	4619      	mov	r1, r3
 800c820:	4610      	mov	r0, r2
 800c822:	f7ff fe59 	bl	800c4d8 <create_chain>
 800c826:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d101      	bne.n	800c832 <dir_next+0xcc>
 800c82e:	2307      	movs	r3, #7
 800c830:	e05a      	b.n	800c8e8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	2b01      	cmp	r3, #1
 800c836:	d101      	bne.n	800c83c <dir_next+0xd6>
 800c838:	2302      	movs	r3, #2
 800c83a:	e055      	b.n	800c8e8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c842:	d101      	bne.n	800c848 <dir_next+0xe2>
 800c844:	2301      	movs	r3, #1
 800c846:	e04f      	b.n	800c8e8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c848:	68f8      	ldr	r0, [r7, #12]
 800c84a:	f7ff fb4d 	bl	800bee8 <sync_window>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d001      	beq.n	800c858 <dir_next+0xf2>
 800c854:	2301      	movs	r3, #1
 800c856:	e047      	b.n	800c8e8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	3338      	adds	r3, #56	; 0x38
 800c85c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c860:	2100      	movs	r1, #0
 800c862:	4618      	mov	r0, r3
 800c864:	f7ff f945 	bl	800baf2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c868:	2300      	movs	r3, #0
 800c86a:	613b      	str	r3, [r7, #16]
 800c86c:	6979      	ldr	r1, [r7, #20]
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	f7ff fc1a 	bl	800c0a8 <clust2sect>
 800c874:	4602      	mov	r2, r0
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	635a      	str	r2, [r3, #52]	; 0x34
 800c87a:	e012      	b.n	800c8a2 <dir_next+0x13c>
						fs->wflag = 1;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2201      	movs	r2, #1
 800c880:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f7ff fb30 	bl	800bee8 <sync_window>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d001      	beq.n	800c892 <dir_next+0x12c>
 800c88e:	2301      	movs	r3, #1
 800c890:	e02a      	b.n	800c8e8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	3301      	adds	r3, #1
 800c896:	613b      	str	r3, [r7, #16]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c89c:	1c5a      	adds	r2, r3, #1
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	635a      	str	r2, [r3, #52]	; 0x34
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	895b      	ldrh	r3, [r3, #10]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d3e6      	bcc.n	800c87c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	1ad2      	subs	r2, r2, r3
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	697a      	ldr	r2, [r7, #20]
 800c8be:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c8c0:	6979      	ldr	r1, [r7, #20]
 800c8c2:	68f8      	ldr	r0, [r7, #12]
 800c8c4:	f7ff fbf0 	bl	800c0a8 <clust2sect>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	68ba      	ldr	r2, [r7, #8]
 800c8d2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8e0:	441a      	add	r2, r3
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3718      	adds	r7, #24
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c900:	2100      	movs	r1, #0
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f7ff feb4 	bl	800c670 <dir_sdi>
 800c908:	4603      	mov	r3, r0
 800c90a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c90c:	7dfb      	ldrb	r3, [r7, #23]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d12b      	bne.n	800c96a <dir_alloc+0x7a>
		n = 0;
 800c912:	2300      	movs	r3, #0
 800c914:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	69db      	ldr	r3, [r3, #28]
 800c91a:	4619      	mov	r1, r3
 800c91c:	68f8      	ldr	r0, [r7, #12]
 800c91e:	f7ff fb27 	bl	800bf70 <move_window>
 800c922:	4603      	mov	r3, r0
 800c924:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c926:	7dfb      	ldrb	r3, [r7, #23]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d11d      	bne.n	800c968 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6a1b      	ldr	r3, [r3, #32]
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	2be5      	cmp	r3, #229	; 0xe5
 800c934:	d004      	beq.n	800c940 <dir_alloc+0x50>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6a1b      	ldr	r3, [r3, #32]
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d107      	bne.n	800c950 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	3301      	adds	r3, #1
 800c944:	613b      	str	r3, [r7, #16]
 800c946:	693a      	ldr	r2, [r7, #16]
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d102      	bne.n	800c954 <dir_alloc+0x64>
 800c94e:	e00c      	b.n	800c96a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c950:	2300      	movs	r3, #0
 800c952:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c954:	2101      	movs	r1, #1
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7ff ff05 	bl	800c766 <dir_next>
 800c95c:	4603      	mov	r3, r0
 800c95e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c960:	7dfb      	ldrb	r3, [r7, #23]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d0d7      	beq.n	800c916 <dir_alloc+0x26>
 800c966:	e000      	b.n	800c96a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c968:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c96a:	7dfb      	ldrb	r3, [r7, #23]
 800c96c:	2b04      	cmp	r3, #4
 800c96e:	d101      	bne.n	800c974 <dir_alloc+0x84>
 800c970:	2307      	movs	r3, #7
 800c972:	75fb      	strb	r3, [r7, #23]
	return res;
 800c974:	7dfb      	ldrb	r3, [r7, #23]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3718      	adds	r7, #24
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c97e:	b580      	push	{r7, lr}
 800c980:	b084      	sub	sp, #16
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
 800c986:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	331a      	adds	r3, #26
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7ff f80d 	bl	800b9ac <ld_word>
 800c992:	4603      	mov	r3, r0
 800c994:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	2b03      	cmp	r3, #3
 800c99c:	d109      	bne.n	800c9b2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	3314      	adds	r3, #20
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7ff f802 	bl	800b9ac <ld_word>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	041b      	lsls	r3, r3, #16
 800c9ac:	68fa      	ldr	r2, [r7, #12]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	331a      	adds	r3, #26
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	b292      	uxth	r2, r2
 800c9d0:	4611      	mov	r1, r2
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f7ff f825 	bl	800ba22 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	2b03      	cmp	r3, #3
 800c9de:	d109      	bne.n	800c9f4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	f103 0214 	add.w	r2, r3, #20
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	0c1b      	lsrs	r3, r3, #16
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	4610      	mov	r0, r2
 800c9f0:	f7ff f817 	bl	800ba22 <st_word>
	}
}
 800c9f4:	bf00      	nop
 800c9f6:	3710      	adds	r7, #16
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c9fc:	b590      	push	{r4, r7, lr}
 800c9fe:	b087      	sub	sp, #28
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	331a      	adds	r3, #26
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7fe ffce 	bl	800b9ac <ld_word>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d001      	beq.n	800ca1a <cmp_lfn+0x1e>
 800ca16:	2300      	movs	r3, #0
 800ca18:	e059      	b.n	800cace <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca22:	1e5a      	subs	r2, r3, #1
 800ca24:	4613      	mov	r3, r2
 800ca26:	005b      	lsls	r3, r3, #1
 800ca28:	4413      	add	r3, r2
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	4413      	add	r3, r2
 800ca2e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ca30:	2301      	movs	r3, #1
 800ca32:	81fb      	strh	r3, [r7, #14]
 800ca34:	2300      	movs	r3, #0
 800ca36:	613b      	str	r3, [r7, #16]
 800ca38:	e033      	b.n	800caa2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ca3a:	4a27      	ldr	r2, [pc, #156]	; (800cad8 <cmp_lfn+0xdc>)
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	4413      	add	r3, r2
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	461a      	mov	r2, r3
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	4413      	add	r3, r2
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7fe ffaf 	bl	800b9ac <ld_word>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ca52:	89fb      	ldrh	r3, [r7, #14]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d01a      	beq.n	800ca8e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	2bfe      	cmp	r3, #254	; 0xfe
 800ca5c:	d812      	bhi.n	800ca84 <cmp_lfn+0x88>
 800ca5e:	89bb      	ldrh	r3, [r7, #12]
 800ca60:	4618      	mov	r0, r3
 800ca62:	f001 fe89 	bl	800e778 <ff_wtoupper>
 800ca66:	4603      	mov	r3, r0
 800ca68:	461c      	mov	r4, r3
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	1c5a      	adds	r2, r3, #1
 800ca6e:	617a      	str	r2, [r7, #20]
 800ca70:	005b      	lsls	r3, r3, #1
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	4413      	add	r3, r2
 800ca76:	881b      	ldrh	r3, [r3, #0]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f001 fe7d 	bl	800e778 <ff_wtoupper>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	429c      	cmp	r4, r3
 800ca82:	d001      	beq.n	800ca88 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ca84:	2300      	movs	r3, #0
 800ca86:	e022      	b.n	800cace <cmp_lfn+0xd2>
			}
			wc = uc;
 800ca88:	89bb      	ldrh	r3, [r7, #12]
 800ca8a:	81fb      	strh	r3, [r7, #14]
 800ca8c:	e006      	b.n	800ca9c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ca8e:	89bb      	ldrh	r3, [r7, #12]
 800ca90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d001      	beq.n	800ca9c <cmp_lfn+0xa0>
 800ca98:	2300      	movs	r3, #0
 800ca9a:	e018      	b.n	800cace <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	3301      	adds	r3, #1
 800caa0:	613b      	str	r3, [r7, #16]
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	2b0c      	cmp	r3, #12
 800caa6:	d9c8      	bls.n	800ca3a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d00b      	beq.n	800cacc <cmp_lfn+0xd0>
 800cab4:	89fb      	ldrh	r3, [r7, #14]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d008      	beq.n	800cacc <cmp_lfn+0xd0>
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	005b      	lsls	r3, r3, #1
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	4413      	add	r3, r2
 800cac2:	881b      	ldrh	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d001      	beq.n	800cacc <cmp_lfn+0xd0>
 800cac8:	2300      	movs	r3, #0
 800caca:	e000      	b.n	800cace <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800cacc:	2301      	movs	r3, #1
}
 800cace:	4618      	mov	r0, r3
 800cad0:	371c      	adds	r7, #28
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd90      	pop	{r4, r7, pc}
 800cad6:	bf00      	nop
 800cad8:	08019ac4 	.word	0x08019ac4

0800cadc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b088      	sub	sp, #32
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	4611      	mov	r1, r2
 800cae8:	461a      	mov	r2, r3
 800caea:	460b      	mov	r3, r1
 800caec:	71fb      	strb	r3, [r7, #7]
 800caee:	4613      	mov	r3, r2
 800caf0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	330d      	adds	r3, #13
 800caf6:	79ba      	ldrb	r2, [r7, #6]
 800caf8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	330b      	adds	r3, #11
 800cafe:	220f      	movs	r2, #15
 800cb00:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	330c      	adds	r3, #12
 800cb06:	2200      	movs	r2, #0
 800cb08:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	331a      	adds	r3, #26
 800cb0e:	2100      	movs	r1, #0
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7fe ff86 	bl	800ba22 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800cb16:	79fb      	ldrb	r3, [r7, #7]
 800cb18:	1e5a      	subs	r2, r3, #1
 800cb1a:	4613      	mov	r3, r2
 800cb1c:	005b      	lsls	r3, r3, #1
 800cb1e:	4413      	add	r3, r2
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	4413      	add	r3, r2
 800cb24:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800cb26:	2300      	movs	r3, #0
 800cb28:	82fb      	strh	r3, [r7, #22]
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cb2e:	8afb      	ldrh	r3, [r7, #22]
 800cb30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d007      	beq.n	800cb48 <put_lfn+0x6c>
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	1c5a      	adds	r2, r3, #1
 800cb3c:	61fa      	str	r2, [r7, #28]
 800cb3e:	005b      	lsls	r3, r3, #1
 800cb40:	68fa      	ldr	r2, [r7, #12]
 800cb42:	4413      	add	r3, r2
 800cb44:	881b      	ldrh	r3, [r3, #0]
 800cb46:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800cb48:	4a17      	ldr	r2, [pc, #92]	; (800cba8 <put_lfn+0xcc>)
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	461a      	mov	r2, r3
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	4413      	add	r3, r2
 800cb56:	8afa      	ldrh	r2, [r7, #22]
 800cb58:	4611      	mov	r1, r2
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fe ff61 	bl	800ba22 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cb60:	8afb      	ldrh	r3, [r7, #22]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d102      	bne.n	800cb6c <put_lfn+0x90>
 800cb66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb6a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800cb6c:	69bb      	ldr	r3, [r7, #24]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	61bb      	str	r3, [r7, #24]
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	2b0c      	cmp	r3, #12
 800cb76:	d9da      	bls.n	800cb2e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800cb78:	8afb      	ldrh	r3, [r7, #22]
 800cb7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d006      	beq.n	800cb90 <put_lfn+0xb4>
 800cb82:	69fb      	ldr	r3, [r7, #28]
 800cb84:	005b      	lsls	r3, r3, #1
 800cb86:	68fa      	ldr	r2, [r7, #12]
 800cb88:	4413      	add	r3, r2
 800cb8a:	881b      	ldrh	r3, [r3, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d103      	bne.n	800cb98 <put_lfn+0xbc>
 800cb90:	79fb      	ldrb	r3, [r7, #7]
 800cb92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb96:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	79fa      	ldrb	r2, [r7, #7]
 800cb9c:	701a      	strb	r2, [r3, #0]
}
 800cb9e:	bf00      	nop
 800cba0:	3720      	adds	r7, #32
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	08019ac4 	.word	0x08019ac4

0800cbac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b08c      	sub	sp, #48	; 0x30
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	607a      	str	r2, [r7, #4]
 800cbb8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800cbba:	220b      	movs	r2, #11
 800cbbc:	68b9      	ldr	r1, [r7, #8]
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	f7fe ff76 	bl	800bab0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	2b05      	cmp	r3, #5
 800cbc8:	d92b      	bls.n	800cc22 <gen_numname+0x76>
		sr = seq;
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800cbce:	e022      	b.n	800cc16 <gen_numname+0x6a>
			wc = *lfn++;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	1c9a      	adds	r2, r3, #2
 800cbd4:	607a      	str	r2, [r7, #4]
 800cbd6:	881b      	ldrh	r3, [r3, #0]
 800cbd8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800cbda:	2300      	movs	r3, #0
 800cbdc:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbde:	e017      	b.n	800cc10 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	005a      	lsls	r2, r3, #1
 800cbe4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbe6:	f003 0301 	and.w	r3, r3, #1
 800cbea:	4413      	add	r3, r2
 800cbec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800cbee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbf0:	085b      	lsrs	r3, r3, #1
 800cbf2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d005      	beq.n	800cc0a <gen_numname+0x5e>
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800cc04:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800cc08:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800cc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc12:	2b0f      	cmp	r3, #15
 800cc14:	d9e4      	bls.n	800cbe0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	881b      	ldrh	r3, [r3, #0]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d1d8      	bne.n	800cbd0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800cc1e:	69fb      	ldr	r3, [r7, #28]
 800cc20:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800cc22:	2307      	movs	r3, #7
 800cc24:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	b2db      	uxtb	r3, r3
 800cc2a:	f003 030f 	and.w	r3, r3, #15
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	3330      	adds	r3, #48	; 0x30
 800cc32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800cc36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc3a:	2b39      	cmp	r3, #57	; 0x39
 800cc3c:	d904      	bls.n	800cc48 <gen_numname+0x9c>
 800cc3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc42:	3307      	adds	r3, #7
 800cc44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800cc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc4a:	1e5a      	subs	r2, r3, #1
 800cc4c:	62ba      	str	r2, [r7, #40]	; 0x28
 800cc4e:	3330      	adds	r3, #48	; 0x30
 800cc50:	443b      	add	r3, r7
 800cc52:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cc56:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	091b      	lsrs	r3, r3, #4
 800cc5e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d1df      	bne.n	800cc26 <gen_numname+0x7a>
	ns[i] = '~';
 800cc66:	f107 0214 	add.w	r2, r7, #20
 800cc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6c:	4413      	add	r3, r2
 800cc6e:	227e      	movs	r2, #126	; 0x7e
 800cc70:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cc72:	2300      	movs	r3, #0
 800cc74:	627b      	str	r3, [r7, #36]	; 0x24
 800cc76:	e002      	b.n	800cc7e <gen_numname+0xd2>
 800cc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	627b      	str	r3, [r7, #36]	; 0x24
 800cc7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d205      	bcs.n	800cc92 <gen_numname+0xe6>
 800cc86:	68fa      	ldr	r2, [r7, #12]
 800cc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8a:	4413      	add	r3, r2
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	2b20      	cmp	r3, #32
 800cc90:	d1f2      	bne.n	800cc78 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc94:	2b07      	cmp	r3, #7
 800cc96:	d807      	bhi.n	800cca8 <gen_numname+0xfc>
 800cc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9a:	1c5a      	adds	r2, r3, #1
 800cc9c:	62ba      	str	r2, [r7, #40]	; 0x28
 800cc9e:	3330      	adds	r3, #48	; 0x30
 800cca0:	443b      	add	r3, r7
 800cca2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800cca6:	e000      	b.n	800ccaa <gen_numname+0xfe>
 800cca8:	2120      	movs	r1, #32
 800ccaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccac:	1c5a      	adds	r2, r3, #1
 800ccae:	627a      	str	r2, [r7, #36]	; 0x24
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	4413      	add	r3, r2
 800ccb4:	460a      	mov	r2, r1
 800ccb6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ccb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccba:	2b07      	cmp	r3, #7
 800ccbc:	d9e9      	bls.n	800cc92 <gen_numname+0xe6>
}
 800ccbe:	bf00      	nop
 800ccc0:	bf00      	nop
 800ccc2:	3730      	adds	r7, #48	; 0x30
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ccd4:	230b      	movs	r3, #11
 800ccd6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ccd8:	7bfb      	ldrb	r3, [r7, #15]
 800ccda:	b2da      	uxtb	r2, r3
 800ccdc:	0852      	lsrs	r2, r2, #1
 800ccde:	01db      	lsls	r3, r3, #7
 800cce0:	4313      	orrs	r3, r2
 800cce2:	b2da      	uxtb	r2, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	1c59      	adds	r1, r3, #1
 800cce8:	6079      	str	r1, [r7, #4]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	4413      	add	r3, r2
 800ccee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	60bb      	str	r3, [r7, #8]
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d1ed      	bne.n	800ccd8 <sum_sfn+0x10>
	return sum;
 800ccfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3714      	adds	r7, #20
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr

0800cd0a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b086      	sub	sp, #24
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cd18:	2100      	movs	r1, #0
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f7ff fca8 	bl	800c670 <dir_sdi>
 800cd20:	4603      	mov	r3, r0
 800cd22:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cd24:	7dfb      	ldrb	r3, [r7, #23]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d001      	beq.n	800cd2e <dir_find+0x24>
 800cd2a:	7dfb      	ldrb	r3, [r7, #23]
 800cd2c:	e0a9      	b.n	800ce82 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cd2e:	23ff      	movs	r3, #255	; 0xff
 800cd30:	753b      	strb	r3, [r7, #20]
 800cd32:	7d3b      	ldrb	r3, [r7, #20]
 800cd34:	757b      	strb	r3, [r7, #21]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f04f 32ff 	mov.w	r2, #4294967295
 800cd3c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	69db      	ldr	r3, [r3, #28]
 800cd42:	4619      	mov	r1, r3
 800cd44:	6938      	ldr	r0, [r7, #16]
 800cd46:	f7ff f913 	bl	800bf70 <move_window>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cd4e:	7dfb      	ldrb	r3, [r7, #23]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f040 8090 	bne.w	800ce76 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6a1b      	ldr	r3, [r3, #32]
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cd5e:	7dbb      	ldrb	r3, [r7, #22]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d102      	bne.n	800cd6a <dir_find+0x60>
 800cd64:	2304      	movs	r3, #4
 800cd66:	75fb      	strb	r3, [r7, #23]
 800cd68:	e08a      	b.n	800ce80 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6a1b      	ldr	r3, [r3, #32]
 800cd6e:	330b      	adds	r3, #11
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd76:	73fb      	strb	r3, [r7, #15]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	7bfa      	ldrb	r2, [r7, #15]
 800cd7c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cd7e:	7dbb      	ldrb	r3, [r7, #22]
 800cd80:	2be5      	cmp	r3, #229	; 0xe5
 800cd82:	d007      	beq.n	800cd94 <dir_find+0x8a>
 800cd84:	7bfb      	ldrb	r3, [r7, #15]
 800cd86:	f003 0308 	and.w	r3, r3, #8
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d009      	beq.n	800cda2 <dir_find+0x98>
 800cd8e:	7bfb      	ldrb	r3, [r7, #15]
 800cd90:	2b0f      	cmp	r3, #15
 800cd92:	d006      	beq.n	800cda2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cd94:	23ff      	movs	r3, #255	; 0xff
 800cd96:	757b      	strb	r3, [r7, #21]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f04f 32ff 	mov.w	r2, #4294967295
 800cd9e:	631a      	str	r2, [r3, #48]	; 0x30
 800cda0:	e05e      	b.n	800ce60 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cda2:	7bfb      	ldrb	r3, [r7, #15]
 800cda4:	2b0f      	cmp	r3, #15
 800cda6:	d136      	bne.n	800ce16 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cdae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d154      	bne.n	800ce60 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cdb6:	7dbb      	ldrb	r3, [r7, #22]
 800cdb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d00d      	beq.n	800cddc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6a1b      	ldr	r3, [r3, #32]
 800cdc4:	7b5b      	ldrb	r3, [r3, #13]
 800cdc6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cdc8:	7dbb      	ldrb	r3, [r7, #22]
 800cdca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdce:	75bb      	strb	r3, [r7, #22]
 800cdd0:	7dbb      	ldrb	r3, [r7, #22]
 800cdd2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	695a      	ldr	r2, [r3, #20]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cddc:	7dba      	ldrb	r2, [r7, #22]
 800cdde:	7d7b      	ldrb	r3, [r7, #21]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d115      	bne.n	800ce10 <dir_find+0x106>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6a1b      	ldr	r3, [r3, #32]
 800cde8:	330d      	adds	r3, #13
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	7d3a      	ldrb	r2, [r7, #20]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d10e      	bne.n	800ce10 <dir_find+0x106>
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	68da      	ldr	r2, [r3, #12]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6a1b      	ldr	r3, [r3, #32]
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	4610      	mov	r0, r2
 800cdfe:	f7ff fdfd 	bl	800c9fc <cmp_lfn>
 800ce02:	4603      	mov	r3, r0
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d003      	beq.n	800ce10 <dir_find+0x106>
 800ce08:	7d7b      	ldrb	r3, [r7, #21]
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	b2db      	uxtb	r3, r3
 800ce0e:	e000      	b.n	800ce12 <dir_find+0x108>
 800ce10:	23ff      	movs	r3, #255	; 0xff
 800ce12:	757b      	strb	r3, [r7, #21]
 800ce14:	e024      	b.n	800ce60 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ce16:	7d7b      	ldrb	r3, [r7, #21]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d109      	bne.n	800ce30 <dir_find+0x126>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6a1b      	ldr	r3, [r3, #32]
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7ff ff51 	bl	800ccc8 <sum_sfn>
 800ce26:	4603      	mov	r3, r0
 800ce28:	461a      	mov	r2, r3
 800ce2a:	7d3b      	ldrb	r3, [r7, #20]
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d024      	beq.n	800ce7a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ce36:	f003 0301 	and.w	r3, r3, #1
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d10a      	bne.n	800ce54 <dir_find+0x14a>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6a18      	ldr	r0, [r3, #32]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	3324      	adds	r3, #36	; 0x24
 800ce46:	220b      	movs	r2, #11
 800ce48:	4619      	mov	r1, r3
 800ce4a:	f7fe fe6d 	bl	800bb28 <mem_cmp>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d014      	beq.n	800ce7e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ce54:	23ff      	movs	r3, #255	; 0xff
 800ce56:	757b      	strb	r3, [r7, #21]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce5e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ce60:	2100      	movs	r1, #0
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f7ff fc7f 	bl	800c766 <dir_next>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ce6c:	7dfb      	ldrb	r3, [r7, #23]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	f43f af65 	beq.w	800cd3e <dir_find+0x34>
 800ce74:	e004      	b.n	800ce80 <dir_find+0x176>
		if (res != FR_OK) break;
 800ce76:	bf00      	nop
 800ce78:	e002      	b.n	800ce80 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ce7a:	bf00      	nop
 800ce7c:	e000      	b.n	800ce80 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ce7e:	bf00      	nop

	return res;
 800ce80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3718      	adds	r7, #24
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
	...

0800ce8c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b08c      	sub	sp, #48	; 0x30
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cea0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d001      	beq.n	800ceac <dir_register+0x20>
 800cea8:	2306      	movs	r3, #6
 800ceaa:	e0e0      	b.n	800d06e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ceac:	2300      	movs	r3, #0
 800ceae:	627b      	str	r3, [r7, #36]	; 0x24
 800ceb0:	e002      	b.n	800ceb8 <dir_register+0x2c>
 800ceb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	627b      	str	r3, [r7, #36]	; 0x24
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	68da      	ldr	r2, [r3, #12]
 800cebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebe:	005b      	lsls	r3, r3, #1
 800cec0:	4413      	add	r3, r2
 800cec2:	881b      	ldrh	r3, [r3, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d1f4      	bne.n	800ceb2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800cece:	f107 030c 	add.w	r3, r7, #12
 800ced2:	220c      	movs	r2, #12
 800ced4:	4618      	mov	r0, r3
 800ced6:	f7fe fdeb 	bl	800bab0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ceda:	7dfb      	ldrb	r3, [r7, #23]
 800cedc:	f003 0301 	and.w	r3, r3, #1
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d032      	beq.n	800cf4a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2240      	movs	r2, #64	; 0x40
 800cee8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800ceec:	2301      	movs	r3, #1
 800ceee:	62bb      	str	r3, [r7, #40]	; 0x28
 800cef0:	e016      	b.n	800cf20 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	68da      	ldr	r2, [r3, #12]
 800cefc:	f107 010c 	add.w	r1, r7, #12
 800cf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf02:	f7ff fe53 	bl	800cbac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f7ff feff 	bl	800cd0a <dir_find>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800cf12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d106      	bne.n	800cf28 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800cf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf22:	2b63      	cmp	r3, #99	; 0x63
 800cf24:	d9e5      	bls.n	800cef2 <dir_register+0x66>
 800cf26:	e000      	b.n	800cf2a <dir_register+0x9e>
			if (res != FR_OK) break;
 800cf28:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf2c:	2b64      	cmp	r3, #100	; 0x64
 800cf2e:	d101      	bne.n	800cf34 <dir_register+0xa8>
 800cf30:	2307      	movs	r3, #7
 800cf32:	e09c      	b.n	800d06e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cf34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf38:	2b04      	cmp	r3, #4
 800cf3a:	d002      	beq.n	800cf42 <dir_register+0xb6>
 800cf3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf40:	e095      	b.n	800d06e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cf42:	7dfa      	ldrb	r2, [r7, #23]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cf4a:	7dfb      	ldrb	r3, [r7, #23]
 800cf4c:	f003 0302 	and.w	r3, r3, #2
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d007      	beq.n	800cf64 <dir_register+0xd8>
 800cf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf56:	330c      	adds	r3, #12
 800cf58:	4a47      	ldr	r2, [pc, #284]	; (800d078 <dir_register+0x1ec>)
 800cf5a:	fba2 2303 	umull	r2, r3, r2, r3
 800cf5e:	089b      	lsrs	r3, r3, #2
 800cf60:	3301      	adds	r3, #1
 800cf62:	e000      	b.n	800cf66 <dir_register+0xda>
 800cf64:	2301      	movs	r3, #1
 800cf66:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cf68:	6a39      	ldr	r1, [r7, #32]
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f7ff fcc0 	bl	800c8f0 <dir_alloc>
 800cf70:	4603      	mov	r3, r0
 800cf72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cf76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d148      	bne.n	800d010 <dir_register+0x184>
 800cf7e:	6a3b      	ldr	r3, [r7, #32]
 800cf80:	3b01      	subs	r3, #1
 800cf82:	623b      	str	r3, [r7, #32]
 800cf84:	6a3b      	ldr	r3, [r7, #32]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d042      	beq.n	800d010 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	695a      	ldr	r2, [r3, #20]
 800cf8e:	6a3b      	ldr	r3, [r7, #32]
 800cf90:	015b      	lsls	r3, r3, #5
 800cf92:	1ad3      	subs	r3, r2, r3
 800cf94:	4619      	mov	r1, r3
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f7ff fb6a 	bl	800c670 <dir_sdi>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cfa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d132      	bne.n	800d010 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	3324      	adds	r3, #36	; 0x24
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7ff fe8a 	bl	800ccc8 <sum_sfn>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	69db      	ldr	r3, [r3, #28]
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	69f8      	ldr	r0, [r7, #28]
 800cfc0:	f7fe ffd6 	bl	800bf70 <move_window>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800cfca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d11d      	bne.n	800d00e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	68d8      	ldr	r0, [r3, #12]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6a19      	ldr	r1, [r3, #32]
 800cfda:	6a3b      	ldr	r3, [r7, #32]
 800cfdc:	b2da      	uxtb	r2, r3
 800cfde:	7efb      	ldrb	r3, [r7, #27]
 800cfe0:	f7ff fd7c 	bl	800cadc <put_lfn>
				fs->wflag = 1;
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cfea:	2100      	movs	r1, #0
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f7ff fbba 	bl	800c766 <dir_next>
 800cff2:	4603      	mov	r3, r0
 800cff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800cff8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d107      	bne.n	800d010 <dir_register+0x184>
 800d000:	6a3b      	ldr	r3, [r7, #32]
 800d002:	3b01      	subs	r3, #1
 800d004:	623b      	str	r3, [r7, #32]
 800d006:	6a3b      	ldr	r3, [r7, #32]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d1d5      	bne.n	800cfb8 <dir_register+0x12c>
 800d00c:	e000      	b.n	800d010 <dir_register+0x184>
				if (res != FR_OK) break;
 800d00e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d010:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d014:	2b00      	cmp	r3, #0
 800d016:	d128      	bne.n	800d06a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	69db      	ldr	r3, [r3, #28]
 800d01c:	4619      	mov	r1, r3
 800d01e:	69f8      	ldr	r0, [r7, #28]
 800d020:	f7fe ffa6 	bl	800bf70 <move_window>
 800d024:	4603      	mov	r3, r0
 800d026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d02a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d11b      	bne.n	800d06a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6a1b      	ldr	r3, [r3, #32]
 800d036:	2220      	movs	r2, #32
 800d038:	2100      	movs	r1, #0
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fe fd59 	bl	800baf2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6a18      	ldr	r0, [r3, #32]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	3324      	adds	r3, #36	; 0x24
 800d048:	220b      	movs	r2, #11
 800d04a:	4619      	mov	r1, r3
 800d04c:	f7fe fd30 	bl	800bab0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6a1b      	ldr	r3, [r3, #32]
 800d05a:	330c      	adds	r3, #12
 800d05c:	f002 0218 	and.w	r2, r2, #24
 800d060:	b2d2      	uxtb	r2, r2
 800d062:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	2201      	movs	r2, #1
 800d068:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d06a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3730      	adds	r7, #48	; 0x30
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	4ec4ec4f 	.word	0x4ec4ec4f

0800d07c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b08a      	sub	sp, #40	; 0x28
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	613b      	str	r3, [r7, #16]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	68db      	ldr	r3, [r3, #12]
 800d092:	60fb      	str	r3, [r7, #12]
 800d094:	2300      	movs	r3, #0
 800d096:	617b      	str	r3, [r7, #20]
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	1c5a      	adds	r2, r3, #1
 800d0a0:	61ba      	str	r2, [r7, #24]
 800d0a2:	693a      	ldr	r2, [r7, #16]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d0aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0ac:	2b1f      	cmp	r3, #31
 800d0ae:	d940      	bls.n	800d132 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d0b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0b2:	2b2f      	cmp	r3, #47	; 0x2f
 800d0b4:	d006      	beq.n	800d0c4 <create_name+0x48>
 800d0b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0b8:	2b5c      	cmp	r3, #92	; 0x5c
 800d0ba:	d110      	bne.n	800d0de <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d0bc:	e002      	b.n	800d0c4 <create_name+0x48>
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	61bb      	str	r3, [r7, #24]
 800d0c4:	693a      	ldr	r2, [r7, #16]
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	2b2f      	cmp	r3, #47	; 0x2f
 800d0ce:	d0f6      	beq.n	800d0be <create_name+0x42>
 800d0d0:	693a      	ldr	r2, [r7, #16]
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	2b5c      	cmp	r3, #92	; 0x5c
 800d0da:	d0f0      	beq.n	800d0be <create_name+0x42>
			break;
 800d0dc:	e02a      	b.n	800d134 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	2bfe      	cmp	r3, #254	; 0xfe
 800d0e2:	d901      	bls.n	800d0e8 <create_name+0x6c>
 800d0e4:	2306      	movs	r3, #6
 800d0e6:	e17d      	b.n	800d3e4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d0e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d0ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0f0:	2101      	movs	r1, #1
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f001 fb04 	bl	800e700 <ff_convert>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d0fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d101      	bne.n	800d106 <create_name+0x8a>
 800d102:	2306      	movs	r3, #6
 800d104:	e16e      	b.n	800d3e4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d108:	2b7f      	cmp	r3, #127	; 0x7f
 800d10a:	d809      	bhi.n	800d120 <create_name+0xa4>
 800d10c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d10e:	4619      	mov	r1, r3
 800d110:	488d      	ldr	r0, [pc, #564]	; (800d348 <create_name+0x2cc>)
 800d112:	f7fe fd30 	bl	800bb76 <chk_chr>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d001      	beq.n	800d120 <create_name+0xa4>
 800d11c:	2306      	movs	r3, #6
 800d11e:	e161      	b.n	800d3e4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	1c5a      	adds	r2, r3, #1
 800d124:	617a      	str	r2, [r7, #20]
 800d126:	005b      	lsls	r3, r3, #1
 800d128:	68fa      	ldr	r2, [r7, #12]
 800d12a:	4413      	add	r3, r2
 800d12c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d12e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d130:	e7b4      	b.n	800d09c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d132:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d134:	693a      	ldr	r2, [r7, #16]
 800d136:	69bb      	ldr	r3, [r7, #24]
 800d138:	441a      	add	r2, r3
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d13e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d140:	2b1f      	cmp	r3, #31
 800d142:	d801      	bhi.n	800d148 <create_name+0xcc>
 800d144:	2304      	movs	r3, #4
 800d146:	e000      	b.n	800d14a <create_name+0xce>
 800d148:	2300      	movs	r3, #0
 800d14a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d14e:	e011      	b.n	800d174 <create_name+0xf8>
		w = lfn[di - 1];
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d156:	3b01      	subs	r3, #1
 800d158:	005b      	lsls	r3, r3, #1
 800d15a:	68fa      	ldr	r2, [r7, #12]
 800d15c:	4413      	add	r3, r2
 800d15e:	881b      	ldrh	r3, [r3, #0]
 800d160:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d164:	2b20      	cmp	r3, #32
 800d166:	d002      	beq.n	800d16e <create_name+0xf2>
 800d168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d16a:	2b2e      	cmp	r3, #46	; 0x2e
 800d16c:	d106      	bne.n	800d17c <create_name+0x100>
		di--;
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	3b01      	subs	r3, #1
 800d172:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d1ea      	bne.n	800d150 <create_name+0xd4>
 800d17a:	e000      	b.n	800d17e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d17c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	005b      	lsls	r3, r3, #1
 800d182:	68fa      	ldr	r2, [r7, #12]
 800d184:	4413      	add	r3, r2
 800d186:	2200      	movs	r2, #0
 800d188:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d101      	bne.n	800d194 <create_name+0x118>
 800d190:	2306      	movs	r3, #6
 800d192:	e127      	b.n	800d3e4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	3324      	adds	r3, #36	; 0x24
 800d198:	220b      	movs	r2, #11
 800d19a:	2120      	movs	r1, #32
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7fe fca8 	bl	800baf2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	61bb      	str	r3, [r7, #24]
 800d1a6:	e002      	b.n	800d1ae <create_name+0x132>
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	61bb      	str	r3, [r7, #24]
 800d1ae:	69bb      	ldr	r3, [r7, #24]
 800d1b0:	005b      	lsls	r3, r3, #1
 800d1b2:	68fa      	ldr	r2, [r7, #12]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	881b      	ldrh	r3, [r3, #0]
 800d1b8:	2b20      	cmp	r3, #32
 800d1ba:	d0f5      	beq.n	800d1a8 <create_name+0x12c>
 800d1bc:	69bb      	ldr	r3, [r7, #24]
 800d1be:	005b      	lsls	r3, r3, #1
 800d1c0:	68fa      	ldr	r2, [r7, #12]
 800d1c2:	4413      	add	r3, r2
 800d1c4:	881b      	ldrh	r3, [r3, #0]
 800d1c6:	2b2e      	cmp	r3, #46	; 0x2e
 800d1c8:	d0ee      	beq.n	800d1a8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d009      	beq.n	800d1e4 <create_name+0x168>
 800d1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1d4:	f043 0303 	orr.w	r3, r3, #3
 800d1d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d1dc:	e002      	b.n	800d1e4 <create_name+0x168>
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	3b01      	subs	r3, #1
 800d1e2:	617b      	str	r3, [r7, #20]
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d009      	beq.n	800d1fe <create_name+0x182>
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d1f0:	3b01      	subs	r3, #1
 800d1f2:	005b      	lsls	r3, r3, #1
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	4413      	add	r3, r2
 800d1f8:	881b      	ldrh	r3, [r3, #0]
 800d1fa:	2b2e      	cmp	r3, #46	; 0x2e
 800d1fc:	d1ef      	bne.n	800d1de <create_name+0x162>

	i = b = 0; ni = 8;
 800d1fe:	2300      	movs	r3, #0
 800d200:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d204:	2300      	movs	r3, #0
 800d206:	623b      	str	r3, [r7, #32]
 800d208:	2308      	movs	r3, #8
 800d20a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	1c5a      	adds	r2, r3, #1
 800d210:	61ba      	str	r2, [r7, #24]
 800d212:	005b      	lsls	r3, r3, #1
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	4413      	add	r3, r2
 800d218:	881b      	ldrh	r3, [r3, #0]
 800d21a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d21c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d21e:	2b00      	cmp	r3, #0
 800d220:	f000 8090 	beq.w	800d344 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d224:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d226:	2b20      	cmp	r3, #32
 800d228:	d006      	beq.n	800d238 <create_name+0x1bc>
 800d22a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d22c:	2b2e      	cmp	r3, #46	; 0x2e
 800d22e:	d10a      	bne.n	800d246 <create_name+0x1ca>
 800d230:	69ba      	ldr	r2, [r7, #24]
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	429a      	cmp	r2, r3
 800d236:	d006      	beq.n	800d246 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d23c:	f043 0303 	orr.w	r3, r3, #3
 800d240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d244:	e07d      	b.n	800d342 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d246:	6a3a      	ldr	r2, [r7, #32]
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d203      	bcs.n	800d256 <create_name+0x1da>
 800d24e:	69ba      	ldr	r2, [r7, #24]
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	429a      	cmp	r2, r3
 800d254:	d123      	bne.n	800d29e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d256:	69fb      	ldr	r3, [r7, #28]
 800d258:	2b0b      	cmp	r3, #11
 800d25a:	d106      	bne.n	800d26a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d25c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d260:	f043 0303 	orr.w	r3, r3, #3
 800d264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d268:	e075      	b.n	800d356 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d26a:	69ba      	ldr	r2, [r7, #24]
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d005      	beq.n	800d27e <create_name+0x202>
 800d272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d276:	f043 0303 	orr.w	r3, r3, #3
 800d27a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d27e:	69ba      	ldr	r2, [r7, #24]
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	429a      	cmp	r2, r3
 800d284:	d866      	bhi.n	800d354 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	61bb      	str	r3, [r7, #24]
 800d28a:	2308      	movs	r3, #8
 800d28c:	623b      	str	r3, [r7, #32]
 800d28e:	230b      	movs	r3, #11
 800d290:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d292:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d29c:	e051      	b.n	800d342 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d29e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2a0:	2b7f      	cmp	r3, #127	; 0x7f
 800d2a2:	d914      	bls.n	800d2ce <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d2a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2a6:	2100      	movs	r1, #0
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f001 fa29 	bl	800e700 <ff_convert>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d2b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d004      	beq.n	800d2c2 <create_name+0x246>
 800d2b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2ba:	3b80      	subs	r3, #128	; 0x80
 800d2bc:	4a23      	ldr	r2, [pc, #140]	; (800d34c <create_name+0x2d0>)
 800d2be:	5cd3      	ldrb	r3, [r2, r3]
 800d2c0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d2c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2c6:	f043 0302 	orr.w	r3, r3, #2
 800d2ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d2ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d007      	beq.n	800d2e4 <create_name+0x268>
 800d2d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	481d      	ldr	r0, [pc, #116]	; (800d350 <create_name+0x2d4>)
 800d2da:	f7fe fc4c 	bl	800bb76 <chk_chr>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d008      	beq.n	800d2f6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d2e4:	235f      	movs	r3, #95	; 0x5f
 800d2e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d2e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2ec:	f043 0303 	orr.w	r3, r3, #3
 800d2f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2f4:	e01b      	b.n	800d32e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d2f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2f8:	2b40      	cmp	r3, #64	; 0x40
 800d2fa:	d909      	bls.n	800d310 <create_name+0x294>
 800d2fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2fe:	2b5a      	cmp	r3, #90	; 0x5a
 800d300:	d806      	bhi.n	800d310 <create_name+0x294>
					b |= 2;
 800d302:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d306:	f043 0302 	orr.w	r3, r3, #2
 800d30a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d30e:	e00e      	b.n	800d32e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d312:	2b60      	cmp	r3, #96	; 0x60
 800d314:	d90b      	bls.n	800d32e <create_name+0x2b2>
 800d316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d318:	2b7a      	cmp	r3, #122	; 0x7a
 800d31a:	d808      	bhi.n	800d32e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d31c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d320:	f043 0301 	orr.w	r3, r3, #1
 800d324:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d32a:	3b20      	subs	r3, #32
 800d32c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d32e:	6a3b      	ldr	r3, [r7, #32]
 800d330:	1c5a      	adds	r2, r3, #1
 800d332:	623a      	str	r2, [r7, #32]
 800d334:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d336:	b2d1      	uxtb	r1, r2
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	4413      	add	r3, r2
 800d33c:	460a      	mov	r2, r1
 800d33e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d342:	e763      	b.n	800d20c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d344:	bf00      	nop
 800d346:	e006      	b.n	800d356 <create_name+0x2da>
 800d348:	08015fc8 	.word	0x08015fc8
 800d34c:	08019a44 	.word	0x08019a44
 800d350:	08015fd4 	.word	0x08015fd4
			if (si > di) break;			/* No extension */
 800d354:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d35c:	2be5      	cmp	r3, #229	; 0xe5
 800d35e:	d103      	bne.n	800d368 <create_name+0x2ec>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2205      	movs	r2, #5
 800d364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	2b08      	cmp	r3, #8
 800d36c:	d104      	bne.n	800d378 <create_name+0x2fc>
 800d36e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d378:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d37c:	f003 030c 	and.w	r3, r3, #12
 800d380:	2b0c      	cmp	r3, #12
 800d382:	d005      	beq.n	800d390 <create_name+0x314>
 800d384:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d388:	f003 0303 	and.w	r3, r3, #3
 800d38c:	2b03      	cmp	r3, #3
 800d38e:	d105      	bne.n	800d39c <create_name+0x320>
 800d390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d394:	f043 0302 	orr.w	r3, r3, #2
 800d398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d39c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3a0:	f003 0302 	and.w	r3, r3, #2
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d117      	bne.n	800d3d8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d3a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3ac:	f003 0303 	and.w	r3, r3, #3
 800d3b0:	2b01      	cmp	r3, #1
 800d3b2:	d105      	bne.n	800d3c0 <create_name+0x344>
 800d3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3b8:	f043 0310 	orr.w	r3, r3, #16
 800d3bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d3c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3c4:	f003 030c 	and.w	r3, r3, #12
 800d3c8:	2b04      	cmp	r3, #4
 800d3ca:	d105      	bne.n	800d3d8 <create_name+0x35c>
 800d3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3d0:	f043 0308 	orr.w	r3, r3, #8
 800d3d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d3de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d3e2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3728      	adds	r7, #40	; 0x28
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b086      	sub	sp, #24
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d400:	e002      	b.n	800d408 <follow_path+0x1c>
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	3301      	adds	r3, #1
 800d406:	603b      	str	r3, [r7, #0]
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	2b2f      	cmp	r3, #47	; 0x2f
 800d40e:	d0f8      	beq.n	800d402 <follow_path+0x16>
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	2b5c      	cmp	r3, #92	; 0x5c
 800d416:	d0f4      	beq.n	800d402 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	2200      	movs	r2, #0
 800d41c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	2b1f      	cmp	r3, #31
 800d424:	d80a      	bhi.n	800d43c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2280      	movs	r2, #128	; 0x80
 800d42a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d42e:	2100      	movs	r1, #0
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f7ff f91d 	bl	800c670 <dir_sdi>
 800d436:	4603      	mov	r3, r0
 800d438:	75fb      	strb	r3, [r7, #23]
 800d43a:	e043      	b.n	800d4c4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d43c:	463b      	mov	r3, r7
 800d43e:	4619      	mov	r1, r3
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f7ff fe1b 	bl	800d07c <create_name>
 800d446:	4603      	mov	r3, r0
 800d448:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d44a:	7dfb      	ldrb	r3, [r7, #23]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d134      	bne.n	800d4ba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f7ff fc5a 	bl	800cd0a <dir_find>
 800d456:	4603      	mov	r3, r0
 800d458:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d460:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d462:	7dfb      	ldrb	r3, [r7, #23]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00a      	beq.n	800d47e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d468:	7dfb      	ldrb	r3, [r7, #23]
 800d46a:	2b04      	cmp	r3, #4
 800d46c:	d127      	bne.n	800d4be <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d46e:	7afb      	ldrb	r3, [r7, #11]
 800d470:	f003 0304 	and.w	r3, r3, #4
 800d474:	2b00      	cmp	r3, #0
 800d476:	d122      	bne.n	800d4be <follow_path+0xd2>
 800d478:	2305      	movs	r3, #5
 800d47a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d47c:	e01f      	b.n	800d4be <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d47e:	7afb      	ldrb	r3, [r7, #11]
 800d480:	f003 0304 	and.w	r3, r3, #4
 800d484:	2b00      	cmp	r3, #0
 800d486:	d11c      	bne.n	800d4c2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	799b      	ldrb	r3, [r3, #6]
 800d48c:	f003 0310 	and.w	r3, r3, #16
 800d490:	2b00      	cmp	r3, #0
 800d492:	d102      	bne.n	800d49a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d494:	2305      	movs	r3, #5
 800d496:	75fb      	strb	r3, [r7, #23]
 800d498:	e014      	b.n	800d4c4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	695b      	ldr	r3, [r3, #20]
 800d4a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4a8:	4413      	add	r3, r2
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f7ff fa66 	bl	800c97e <ld_clust>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d4b8:	e7c0      	b.n	800d43c <follow_path+0x50>
			if (res != FR_OK) break;
 800d4ba:	bf00      	nop
 800d4bc:	e002      	b.n	800d4c4 <follow_path+0xd8>
				break;
 800d4be:	bf00      	nop
 800d4c0:	e000      	b.n	800d4c4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d4c2:	bf00      	nop
			}
		}
	}

	return res;
 800d4c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3718      	adds	r7, #24
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d4ce:	b480      	push	{r7}
 800d4d0:	b087      	sub	sp, #28
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d4d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d4da:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d031      	beq.n	800d548 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	617b      	str	r3, [r7, #20]
 800d4ea:	e002      	b.n	800d4f2 <get_ldnumber+0x24>
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	617b      	str	r3, [r7, #20]
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	2b1f      	cmp	r3, #31
 800d4f8:	d903      	bls.n	800d502 <get_ldnumber+0x34>
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	2b3a      	cmp	r3, #58	; 0x3a
 800d500:	d1f4      	bne.n	800d4ec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	2b3a      	cmp	r3, #58	; 0x3a
 800d508:	d11c      	bne.n	800d544 <get_ldnumber+0x76>
			tp = *path;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	1c5a      	adds	r2, r3, #1
 800d514:	60fa      	str	r2, [r7, #12]
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	3b30      	subs	r3, #48	; 0x30
 800d51a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	2b09      	cmp	r3, #9
 800d520:	d80e      	bhi.n	800d540 <get_ldnumber+0x72>
 800d522:	68fa      	ldr	r2, [r7, #12]
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	429a      	cmp	r2, r3
 800d528:	d10a      	bne.n	800d540 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d107      	bne.n	800d540 <get_ldnumber+0x72>
					vol = (int)i;
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	3301      	adds	r3, #1
 800d538:	617b      	str	r3, [r7, #20]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	697a      	ldr	r2, [r7, #20]
 800d53e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	e002      	b.n	800d54a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d544:	2300      	movs	r3, #0
 800d546:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d548:	693b      	ldr	r3, [r7, #16]
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	371c      	adds	r7, #28
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr
	...

0800d558 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2200      	movs	r2, #0
 800d566:	70da      	strb	r2, [r3, #3]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f04f 32ff 	mov.w	r2, #4294967295
 800d56e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d570:	6839      	ldr	r1, [r7, #0]
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f7fe fcfc 	bl	800bf70 <move_window>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d001      	beq.n	800d582 <check_fs+0x2a>
 800d57e:	2304      	movs	r3, #4
 800d580:	e038      	b.n	800d5f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	3338      	adds	r3, #56	; 0x38
 800d586:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7fe fa0e 	bl	800b9ac <ld_word>
 800d590:	4603      	mov	r3, r0
 800d592:	461a      	mov	r2, r3
 800d594:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d598:	429a      	cmp	r2, r3
 800d59a:	d001      	beq.n	800d5a0 <check_fs+0x48>
 800d59c:	2303      	movs	r3, #3
 800d59e:	e029      	b.n	800d5f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d5a6:	2be9      	cmp	r3, #233	; 0xe9
 800d5a8:	d009      	beq.n	800d5be <check_fs+0x66>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d5b0:	2beb      	cmp	r3, #235	; 0xeb
 800d5b2:	d11e      	bne.n	800d5f2 <check_fs+0x9a>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d5ba:	2b90      	cmp	r3, #144	; 0x90
 800d5bc:	d119      	bne.n	800d5f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	3338      	adds	r3, #56	; 0x38
 800d5c2:	3336      	adds	r3, #54	; 0x36
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7fe fa09 	bl	800b9dc <ld_dword>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d5d0:	4a0a      	ldr	r2, [pc, #40]	; (800d5fc <check_fs+0xa4>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d101      	bne.n	800d5da <check_fs+0x82>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	e00c      	b.n	800d5f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	3338      	adds	r3, #56	; 0x38
 800d5de:	3352      	adds	r3, #82	; 0x52
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fe f9fb 	bl	800b9dc <ld_dword>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	4a05      	ldr	r2, [pc, #20]	; (800d600 <check_fs+0xa8>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d101      	bne.n	800d5f2 <check_fs+0x9a>
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	e000      	b.n	800d5f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d5f2:	2302      	movs	r3, #2
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3708      	adds	r7, #8
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	00544146 	.word	0x00544146
 800d600:	33544146 	.word	0x33544146

0800d604 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b096      	sub	sp, #88	; 0x58
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	4613      	mov	r3, r2
 800d610:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	2200      	movs	r2, #0
 800d616:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f7ff ff58 	bl	800d4ce <get_ldnumber>
 800d61e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d622:	2b00      	cmp	r3, #0
 800d624:	da01      	bge.n	800d62a <find_volume+0x26>
 800d626:	230b      	movs	r3, #11
 800d628:	e235      	b.n	800da96 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d62a:	4aa5      	ldr	r2, [pc, #660]	; (800d8c0 <find_volume+0x2bc>)
 800d62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d62e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d632:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d636:	2b00      	cmp	r3, #0
 800d638:	d101      	bne.n	800d63e <find_volume+0x3a>
 800d63a:	230c      	movs	r3, #12
 800d63c:	e22b      	b.n	800da96 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800d63e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d640:	f7fe fab4 	bl	800bbac <lock_fs>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d101      	bne.n	800d64e <find_volume+0x4a>
 800d64a:	230f      	movs	r3, #15
 800d64c:	e223      	b.n	800da96 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d652:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d654:	79fb      	ldrb	r3, [r7, #7]
 800d656:	f023 0301 	bic.w	r3, r3, #1
 800d65a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d01a      	beq.n	800d69a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800d664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d666:	785b      	ldrb	r3, [r3, #1]
 800d668:	4618      	mov	r0, r3
 800d66a:	f7fe f901 	bl	800b870 <disk_status>
 800d66e:	4603      	mov	r3, r0
 800d670:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d674:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d678:	f003 0301 	and.w	r3, r3, #1
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d10c      	bne.n	800d69a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d680:	79fb      	ldrb	r3, [r7, #7]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d007      	beq.n	800d696 <find_volume+0x92>
 800d686:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d68a:	f003 0304 	and.w	r3, r3, #4
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d001      	beq.n	800d696 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800d692:	230a      	movs	r3, #10
 800d694:	e1ff      	b.n	800da96 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800d696:	2300      	movs	r3, #0
 800d698:	e1fd      	b.n	800da96 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69c:	2200      	movs	r2, #0
 800d69e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d6a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6a2:	b2da      	uxtb	r2, r3
 800d6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6aa:	785b      	ldrb	r3, [r3, #1]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7fe f8f9 	bl	800b8a4 <disk_initialize>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d6b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d6bc:	f003 0301 	and.w	r3, r3, #1
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d001      	beq.n	800d6c8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d6c4:	2303      	movs	r3, #3
 800d6c6:	e1e6      	b.n	800da96 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d6c8:	79fb      	ldrb	r3, [r7, #7]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d007      	beq.n	800d6de <find_volume+0xda>
 800d6ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d6d2:	f003 0304 	and.w	r3, r3, #4
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d001      	beq.n	800d6de <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800d6da:	230a      	movs	r3, #10
 800d6dc:	e1db      	b.n	800da96 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d6e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d6e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d6e6:	f7ff ff37 	bl	800d558 <check_fs>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d6f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6f4:	2b02      	cmp	r3, #2
 800d6f6:	d149      	bne.n	800d78c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	643b      	str	r3, [r7, #64]	; 0x40
 800d6fc:	e01e      	b.n	800d73c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d700:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d706:	011b      	lsls	r3, r3, #4
 800d708:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d70c:	4413      	add	r3, r2
 800d70e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d712:	3304      	adds	r3, #4
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d006      	beq.n	800d728 <find_volume+0x124>
 800d71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71c:	3308      	adds	r3, #8
 800d71e:	4618      	mov	r0, r3
 800d720:	f7fe f95c 	bl	800b9dc <ld_dword>
 800d724:	4602      	mov	r2, r0
 800d726:	e000      	b.n	800d72a <find_volume+0x126>
 800d728:	2200      	movs	r2, #0
 800d72a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	3358      	adds	r3, #88	; 0x58
 800d730:	443b      	add	r3, r7
 800d732:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d738:	3301      	adds	r3, #1
 800d73a:	643b      	str	r3, [r7, #64]	; 0x40
 800d73c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d73e:	2b03      	cmp	r3, #3
 800d740:	d9dd      	bls.n	800d6fe <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d742:	2300      	movs	r3, #0
 800d744:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d002      	beq.n	800d752 <find_volume+0x14e>
 800d74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d74e:	3b01      	subs	r3, #1
 800d750:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	3358      	adds	r3, #88	; 0x58
 800d758:	443b      	add	r3, r7
 800d75a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d75e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d762:	2b00      	cmp	r3, #0
 800d764:	d005      	beq.n	800d772 <find_volume+0x16e>
 800d766:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d768:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d76a:	f7ff fef5 	bl	800d558 <check_fs>
 800d76e:	4603      	mov	r3, r0
 800d770:	e000      	b.n	800d774 <find_volume+0x170>
 800d772:	2303      	movs	r3, #3
 800d774:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d778:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d905      	bls.n	800d78c <find_volume+0x188>
 800d780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d782:	3301      	adds	r3, #1
 800d784:	643b      	str	r3, [r7, #64]	; 0x40
 800d786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d788:	2b03      	cmp	r3, #3
 800d78a:	d9e2      	bls.n	800d752 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d78c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d790:	2b04      	cmp	r3, #4
 800d792:	d101      	bne.n	800d798 <find_volume+0x194>
 800d794:	2301      	movs	r3, #1
 800d796:	e17e      	b.n	800da96 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d798:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d901      	bls.n	800d7a4 <find_volume+0x1a0>
 800d7a0:	230d      	movs	r3, #13
 800d7a2:	e178      	b.n	800da96 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a6:	3338      	adds	r3, #56	; 0x38
 800d7a8:	330b      	adds	r3, #11
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7fe f8fe 	bl	800b9ac <ld_word>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7b6:	d001      	beq.n	800d7bc <find_volume+0x1b8>
 800d7b8:	230d      	movs	r3, #13
 800d7ba:	e16c      	b.n	800da96 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7be:	3338      	adds	r3, #56	; 0x38
 800d7c0:	3316      	adds	r3, #22
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7fe f8f2 	bl	800b9ac <ld_word>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d7cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d106      	bne.n	800d7e0 <find_volume+0x1dc>
 800d7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d4:	3338      	adds	r3, #56	; 0x38
 800d7d6:	3324      	adds	r3, #36	; 0x24
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7fe f8ff 	bl	800b9dc <ld_dword>
 800d7de:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d7e4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800d7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f2:	789b      	ldrb	r3, [r3, #2]
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d005      	beq.n	800d804 <find_volume+0x200>
 800d7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fa:	789b      	ldrb	r3, [r3, #2]
 800d7fc:	2b02      	cmp	r3, #2
 800d7fe:	d001      	beq.n	800d804 <find_volume+0x200>
 800d800:	230d      	movs	r3, #13
 800d802:	e148      	b.n	800da96 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d806:	789b      	ldrb	r3, [r3, #2]
 800d808:	461a      	mov	r2, r3
 800d80a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d80c:	fb02 f303 	mul.w	r3, r2, r3
 800d810:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d814:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d818:	b29a      	uxth	r2, r3
 800d81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d81c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d820:	895b      	ldrh	r3, [r3, #10]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d008      	beq.n	800d838 <find_volume+0x234>
 800d826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d828:	895b      	ldrh	r3, [r3, #10]
 800d82a:	461a      	mov	r2, r3
 800d82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d82e:	895b      	ldrh	r3, [r3, #10]
 800d830:	3b01      	subs	r3, #1
 800d832:	4013      	ands	r3, r2
 800d834:	2b00      	cmp	r3, #0
 800d836:	d001      	beq.n	800d83c <find_volume+0x238>
 800d838:	230d      	movs	r3, #13
 800d83a:	e12c      	b.n	800da96 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83e:	3338      	adds	r3, #56	; 0x38
 800d840:	3311      	adds	r3, #17
 800d842:	4618      	mov	r0, r3
 800d844:	f7fe f8b2 	bl	800b9ac <ld_word>
 800d848:	4603      	mov	r3, r0
 800d84a:	461a      	mov	r2, r3
 800d84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d852:	891b      	ldrh	r3, [r3, #8]
 800d854:	f003 030f 	and.w	r3, r3, #15
 800d858:	b29b      	uxth	r3, r3
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d001      	beq.n	800d862 <find_volume+0x25e>
 800d85e:	230d      	movs	r3, #13
 800d860:	e119      	b.n	800da96 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d864:	3338      	adds	r3, #56	; 0x38
 800d866:	3313      	adds	r3, #19
 800d868:	4618      	mov	r0, r3
 800d86a:	f7fe f89f 	bl	800b9ac <ld_word>
 800d86e:	4603      	mov	r3, r0
 800d870:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d874:	2b00      	cmp	r3, #0
 800d876:	d106      	bne.n	800d886 <find_volume+0x282>
 800d878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87a:	3338      	adds	r3, #56	; 0x38
 800d87c:	3320      	adds	r3, #32
 800d87e:	4618      	mov	r0, r3
 800d880:	f7fe f8ac 	bl	800b9dc <ld_dword>
 800d884:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d888:	3338      	adds	r3, #56	; 0x38
 800d88a:	330e      	adds	r3, #14
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7fe f88d 	bl	800b9ac <ld_word>
 800d892:	4603      	mov	r3, r0
 800d894:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d896:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d101      	bne.n	800d8a0 <find_volume+0x29c>
 800d89c:	230d      	movs	r3, #13
 800d89e:	e0fa      	b.n	800da96 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d8a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d8a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8a4:	4413      	add	r3, r2
 800d8a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8a8:	8912      	ldrh	r2, [r2, #8]
 800d8aa:	0912      	lsrs	r2, r2, #4
 800d8ac:	b292      	uxth	r2, r2
 800d8ae:	4413      	add	r3, r2
 800d8b0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d8b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d204      	bcs.n	800d8c4 <find_volume+0x2c0>
 800d8ba:	230d      	movs	r3, #13
 800d8bc:	e0eb      	b.n	800da96 <find_volume+0x492>
 800d8be:	bf00      	nop
 800d8c0:	200017fc 	.word	0x200017fc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d8c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c8:	1ad3      	subs	r3, r2, r3
 800d8ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8cc:	8952      	ldrh	r2, [r2, #10]
 800d8ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8d2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d101      	bne.n	800d8de <find_volume+0x2da>
 800d8da:	230d      	movs	r3, #13
 800d8dc:	e0db      	b.n	800da96 <find_volume+0x492>
		fmt = FS_FAT32;
 800d8de:	2303      	movs	r3, #3
 800d8e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d802      	bhi.n	800d8f4 <find_volume+0x2f0>
 800d8ee:	2302      	movs	r3, #2
 800d8f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d802      	bhi.n	800d904 <find_volume+0x300>
 800d8fe:	2301      	movs	r3, #1
 800d900:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d906:	1c9a      	adds	r2, r3, #2
 800d908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d910:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d912:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d916:	441a      	add	r2, r3
 800d918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d91a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d91c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d920:	441a      	add	r2, r3
 800d922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d924:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800d926:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d92a:	2b03      	cmp	r3, #3
 800d92c:	d11e      	bne.n	800d96c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d930:	3338      	adds	r3, #56	; 0x38
 800d932:	332a      	adds	r3, #42	; 0x2a
 800d934:	4618      	mov	r0, r3
 800d936:	f7fe f839 	bl	800b9ac <ld_word>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d001      	beq.n	800d944 <find_volume+0x340>
 800d940:	230d      	movs	r3, #13
 800d942:	e0a8      	b.n	800da96 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d946:	891b      	ldrh	r3, [r3, #8]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d001      	beq.n	800d950 <find_volume+0x34c>
 800d94c:	230d      	movs	r3, #13
 800d94e:	e0a2      	b.n	800da96 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d952:	3338      	adds	r3, #56	; 0x38
 800d954:	332c      	adds	r3, #44	; 0x2c
 800d956:	4618      	mov	r0, r3
 800d958:	f7fe f840 	bl	800b9dc <ld_dword>
 800d95c:	4602      	mov	r2, r0
 800d95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d960:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d964:	69db      	ldr	r3, [r3, #28]
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	647b      	str	r3, [r7, #68]	; 0x44
 800d96a:	e01f      	b.n	800d9ac <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96e:	891b      	ldrh	r3, [r3, #8]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d101      	bne.n	800d978 <find_volume+0x374>
 800d974:	230d      	movs	r3, #13
 800d976:	e08e      	b.n	800da96 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d97a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d97c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d97e:	441a      	add	r2, r3
 800d980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d982:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d984:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d988:	2b02      	cmp	r3, #2
 800d98a:	d103      	bne.n	800d994 <find_volume+0x390>
 800d98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98e:	69db      	ldr	r3, [r3, #28]
 800d990:	005b      	lsls	r3, r3, #1
 800d992:	e00a      	b.n	800d9aa <find_volume+0x3a6>
 800d994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d996:	69da      	ldr	r2, [r3, #28]
 800d998:	4613      	mov	r3, r2
 800d99a:	005b      	lsls	r3, r3, #1
 800d99c:	4413      	add	r3, r2
 800d99e:	085a      	lsrs	r2, r3, #1
 800d9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a2:	69db      	ldr	r3, [r3, #28]
 800d9a4:	f003 0301 	and.w	r3, r3, #1
 800d9a8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d9aa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ae:	6a1a      	ldr	r2, [r3, #32]
 800d9b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9b2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d9b6:	0a5b      	lsrs	r3, r3, #9
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d201      	bcs.n	800d9c0 <find_volume+0x3bc>
 800d9bc:	230d      	movs	r3, #13
 800d9be:	e06a      	b.n	800da96 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c6:	619a      	str	r2, [r3, #24]
 800d9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ca:	699a      	ldr	r2, [r3, #24]
 800d9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ce:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d2:	2280      	movs	r2, #128	; 0x80
 800d9d4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d9d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d9da:	2b03      	cmp	r3, #3
 800d9dc:	d149      	bne.n	800da72 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e0:	3338      	adds	r3, #56	; 0x38
 800d9e2:	3330      	adds	r3, #48	; 0x30
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7fd ffe1 	bl	800b9ac <ld_word>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	d140      	bne.n	800da72 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d9f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d9f8:	f7fe faba 	bl	800bf70 <move_window>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d137      	bne.n	800da72 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800da02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da04:	2200      	movs	r2, #0
 800da06:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800da08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0a:	3338      	adds	r3, #56	; 0x38
 800da0c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800da10:	4618      	mov	r0, r3
 800da12:	f7fd ffcb 	bl	800b9ac <ld_word>
 800da16:	4603      	mov	r3, r0
 800da18:	461a      	mov	r2, r3
 800da1a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800da1e:	429a      	cmp	r2, r3
 800da20:	d127      	bne.n	800da72 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800da22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da24:	3338      	adds	r3, #56	; 0x38
 800da26:	4618      	mov	r0, r3
 800da28:	f7fd ffd8 	bl	800b9dc <ld_dword>
 800da2c:	4603      	mov	r3, r0
 800da2e:	4a1c      	ldr	r2, [pc, #112]	; (800daa0 <find_volume+0x49c>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d11e      	bne.n	800da72 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800da34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da36:	3338      	adds	r3, #56	; 0x38
 800da38:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7fd ffcd 	bl	800b9dc <ld_dword>
 800da42:	4603      	mov	r3, r0
 800da44:	4a17      	ldr	r2, [pc, #92]	; (800daa4 <find_volume+0x4a0>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d113      	bne.n	800da72 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800da4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4c:	3338      	adds	r3, #56	; 0x38
 800da4e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800da52:	4618      	mov	r0, r3
 800da54:	f7fd ffc2 	bl	800b9dc <ld_dword>
 800da58:	4602      	mov	r2, r0
 800da5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800da5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da60:	3338      	adds	r3, #56	; 0x38
 800da62:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800da66:	4618      	mov	r0, r3
 800da68:	f7fd ffb8 	bl	800b9dc <ld_dword>
 800da6c:	4602      	mov	r2, r0
 800da6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da70:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800da72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da74:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800da78:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800da7a:	4b0b      	ldr	r3, [pc, #44]	; (800daa8 <find_volume+0x4a4>)
 800da7c:	881b      	ldrh	r3, [r3, #0]
 800da7e:	3301      	adds	r3, #1
 800da80:	b29a      	uxth	r2, r3
 800da82:	4b09      	ldr	r3, [pc, #36]	; (800daa8 <find_volume+0x4a4>)
 800da84:	801a      	strh	r2, [r3, #0]
 800da86:	4b08      	ldr	r3, [pc, #32]	; (800daa8 <find_volume+0x4a4>)
 800da88:	881a      	ldrh	r2, [r3, #0]
 800da8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800da8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da90:	f7fe fa06 	bl	800bea0 <clear_lock>
#endif
	return FR_OK;
 800da94:	2300      	movs	r3, #0
}
 800da96:	4618      	mov	r0, r3
 800da98:	3758      	adds	r7, #88	; 0x58
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	41615252 	.word	0x41615252
 800daa4:	61417272 	.word	0x61417272
 800daa8:	20001800 	.word	0x20001800

0800daac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b084      	sub	sp, #16
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dab6:	2309      	movs	r3, #9
 800dab8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d02e      	beq.n	800db1e <validate+0x72>
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d02a      	beq.n	800db1e <validate+0x72>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d025      	beq.n	800db1e <validate+0x72>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	889a      	ldrh	r2, [r3, #4]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	88db      	ldrh	r3, [r3, #6]
 800dadc:	429a      	cmp	r2, r3
 800dade:	d11e      	bne.n	800db1e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7fe f861 	bl	800bbac <lock_fs>
 800daea:	4603      	mov	r3, r0
 800daec:	2b00      	cmp	r3, #0
 800daee:	d014      	beq.n	800db1a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	785b      	ldrb	r3, [r3, #1]
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7fd feba 	bl	800b870 <disk_status>
 800dafc:	4603      	mov	r3, r0
 800dafe:	f003 0301 	and.w	r3, r3, #1
 800db02:	2b00      	cmp	r3, #0
 800db04:	d102      	bne.n	800db0c <validate+0x60>
				res = FR_OK;
 800db06:	2300      	movs	r3, #0
 800db08:	73fb      	strb	r3, [r7, #15]
 800db0a:	e008      	b.n	800db1e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2100      	movs	r1, #0
 800db12:	4618      	mov	r0, r3
 800db14:	f7fe f860 	bl	800bbd8 <unlock_fs>
 800db18:	e001      	b.n	800db1e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800db1a:	230f      	movs	r3, #15
 800db1c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800db1e:	7bfb      	ldrb	r3, [r7, #15]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d102      	bne.n	800db2a <validate+0x7e>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	e000      	b.n	800db2c <validate+0x80>
 800db2a:	2300      	movs	r3, #0
 800db2c:	683a      	ldr	r2, [r7, #0]
 800db2e:	6013      	str	r3, [r2, #0]
	return res;
 800db30:	7bfb      	ldrb	r3, [r7, #15]
}
 800db32:	4618      	mov	r0, r3
 800db34:	3710      	adds	r7, #16
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
	...

0800db3c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b088      	sub	sp, #32
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	4613      	mov	r3, r2
 800db48:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800db4e:	f107 0310 	add.w	r3, r7, #16
 800db52:	4618      	mov	r0, r3
 800db54:	f7ff fcbb 	bl	800d4ce <get_ldnumber>
 800db58:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	da01      	bge.n	800db64 <f_mount+0x28>
 800db60:	230b      	movs	r3, #11
 800db62:	e048      	b.n	800dbf6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800db64:	4a26      	ldr	r2, [pc, #152]	; (800dc00 <f_mount+0xc4>)
 800db66:	69fb      	ldr	r3, [r7, #28]
 800db68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db6c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d00f      	beq.n	800db94 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800db74:	69b8      	ldr	r0, [r7, #24]
 800db76:	f7fe f993 	bl	800bea0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	4618      	mov	r0, r3
 800db80:	f000 fea4 	bl	800e8cc <ff_del_syncobj>
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d101      	bne.n	800db8e <f_mount+0x52>
 800db8a:	2302      	movs	r3, #2
 800db8c:	e033      	b.n	800dbf6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	2200      	movs	r2, #0
 800db92:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d00f      	beq.n	800dbba <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2200      	movs	r2, #0
 800db9e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	3310      	adds	r3, #16
 800dba8:	4619      	mov	r1, r3
 800dbaa:	4610      	mov	r0, r2
 800dbac:	f000 fe6e 	bl	800e88c <ff_cre_syncobj>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d101      	bne.n	800dbba <f_mount+0x7e>
 800dbb6:	2302      	movs	r3, #2
 800dbb8:	e01d      	b.n	800dbf6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dbba:	68fa      	ldr	r2, [r7, #12]
 800dbbc:	4910      	ldr	r1, [pc, #64]	; (800dc00 <f_mount+0xc4>)
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d002      	beq.n	800dbd0 <f_mount+0x94>
 800dbca:	79fb      	ldrb	r3, [r7, #7]
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d001      	beq.n	800dbd4 <f_mount+0x98>
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	e010      	b.n	800dbf6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dbd4:	f107 010c 	add.w	r1, r7, #12
 800dbd8:	f107 0308 	add.w	r3, r7, #8
 800dbdc:	2200      	movs	r2, #0
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7ff fd10 	bl	800d604 <find_volume>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	7dfa      	ldrb	r2, [r7, #23]
 800dbec:	4611      	mov	r1, r2
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7fd fff2 	bl	800bbd8 <unlock_fs>
 800dbf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3720      	adds	r7, #32
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	200017fc 	.word	0x200017fc

0800dc04 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dc10:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800dc14:	6018      	str	r0, [r3, #0]
 800dc16:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dc1a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800dc1e:	6019      	str	r1, [r3, #0]
 800dc20:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dc24:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800dc28:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800dc2a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dc2e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d101      	bne.n	800dc3c <f_open+0x38>
 800dc38:	2309      	movs	r3, #9
 800dc3a:	e29d      	b.n	800e178 <f_open+0x574>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dc3c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dc40:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800dc44:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800dc48:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800dc4c:	7812      	ldrb	r2, [r2, #0]
 800dc4e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800dc52:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800dc54:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dc58:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800dc5c:	781a      	ldrb	r2, [r3, #0]
 800dc5e:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800dc62:	f107 0308 	add.w	r3, r7, #8
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7ff fccc 	bl	800d604 <find_volume>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800dc72:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	f040 8269 	bne.w	800e14e <f_open+0x54a>
		dj.obj.fs = fs;
 800dc7c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800dc80:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800dc84:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800dc88:	f107 0214 	add.w	r2, r7, #20
 800dc8c:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800dc8e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dc92:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800dc9c:	4611      	mov	r1, r2
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7ff fba4 	bl	800d3ec <follow_path>
 800dca4:	4603      	mov	r3, r0
 800dca6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dcaa:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d11e      	bne.n	800dcf0 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dcb2:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800dcb6:	b25b      	sxtb	r3, r3
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	da03      	bge.n	800dcc4 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800dcbc:	2306      	movs	r3, #6
 800dcbe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800dcc2:	e015      	b.n	800dcf0 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dcc4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dcc8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800dccc:	781b      	ldrb	r3, [r3, #0]
 800dcce:	f023 0301 	bic.w	r3, r3, #1
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	bf14      	ite	ne
 800dcd6:	2301      	movne	r3, #1
 800dcd8:	2300      	moveq	r3, #0
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	461a      	mov	r2, r3
 800dcde:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800dce2:	4611      	mov	r1, r2
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7fd ff93 	bl	800bc10 <chk_lock>
 800dcea:	4603      	mov	r3, r0
 800dcec:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dcf0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dcf4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	f003 031c 	and.w	r3, r3, #28
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	f000 80a7 	beq.w	800de52 <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 800dd04:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d01f      	beq.n	800dd4c <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dd0c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dd10:	2b04      	cmp	r3, #4
 800dd12:	d10e      	bne.n	800dd32 <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dd14:	f7fd ffd8 	bl	800bcc8 <enq_lock>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d006      	beq.n	800dd2c <f_open+0x128>
 800dd1e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7ff f8b2 	bl	800ce8c <dir_register>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	e000      	b.n	800dd2e <f_open+0x12a>
 800dd2c:	2312      	movs	r3, #18
 800dd2e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dd32:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dd36:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800dd3a:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800dd3e:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800dd42:	7812      	ldrb	r2, [r2, #0]
 800dd44:	f042 0208 	orr.w	r2, r2, #8
 800dd48:	701a      	strb	r2, [r3, #0]
 800dd4a:	e015      	b.n	800dd78 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dd4c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800dd50:	f003 0311 	and.w	r3, r3, #17
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d003      	beq.n	800dd60 <f_open+0x15c>
					res = FR_DENIED;
 800dd58:	2307      	movs	r3, #7
 800dd5a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800dd5e:	e00b      	b.n	800dd78 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dd60:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dd64:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	f003 0304 	and.w	r3, r3, #4
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d002      	beq.n	800dd78 <f_open+0x174>
 800dd72:	2308      	movs	r3, #8
 800dd74:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dd78:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	f040 8088 	bne.w	800de92 <f_open+0x28e>
 800dd82:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dd86:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	f003 0308 	and.w	r3, r3, #8
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d07e      	beq.n	800de92 <f_open+0x28e>
				dw = GET_FATTIME();
 800dd94:	f7fd fb0a 	bl	800b3ac <get_fattime>
 800dd98:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dd9c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800dda0:	330e      	adds	r3, #14
 800dda2:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fd fe56 	bl	800ba58 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ddac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800ddb0:	3316      	adds	r3, #22
 800ddb2:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7fd fe4e 	bl	800ba58 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ddbc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800ddc0:	330b      	adds	r3, #11
 800ddc2:	2220      	movs	r2, #32
 800ddc4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ddc6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ddca:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800ddce:	4611      	mov	r1, r2
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7fe fdd4 	bl	800c97e <ld_clust>
 800ddd6:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ddda:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ddde:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800dde2:	2200      	movs	r2, #0
 800dde4:	4618      	mov	r0, r3
 800dde6:	f7fe fde9 	bl	800c9bc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ddea:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800ddee:	331c      	adds	r3, #28
 800ddf0:	2100      	movs	r1, #0
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7fd fe30 	bl	800ba58 <st_dword>
					fs->wflag = 1;
 800ddf8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800de00:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800de04:	2b00      	cmp	r3, #0
 800de06:	d044      	beq.n	800de92 <f_open+0x28e>
						dw = fs->winsect;
 800de08:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800de0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de0e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800de12:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800de16:	2200      	movs	r2, #0
 800de18:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7fe faf6 	bl	800c40e <remove_chain>
 800de22:	4603      	mov	r3, r0
 800de24:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800de28:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d130      	bne.n	800de92 <f_open+0x28e>
							res = move_window(fs, dw);
 800de30:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800de34:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800de38:	4618      	mov	r0, r3
 800de3a:	f7fe f899 	bl	800bf70 <move_window>
 800de3e:	4603      	mov	r3, r0
 800de40:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800de44:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800de48:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800de4c:	3a01      	subs	r2, #1
 800de4e:	615a      	str	r2, [r3, #20]
 800de50:	e01f      	b.n	800de92 <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800de52:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800de56:	2b00      	cmp	r3, #0
 800de58:	d11b      	bne.n	800de92 <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800de5a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800de5e:	f003 0310 	and.w	r3, r3, #16
 800de62:	2b00      	cmp	r3, #0
 800de64:	d003      	beq.n	800de6e <f_open+0x26a>
					res = FR_NO_FILE;
 800de66:	2304      	movs	r3, #4
 800de68:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800de6c:	e011      	b.n	800de92 <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800de6e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800de72:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	f003 0302 	and.w	r3, r3, #2
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d008      	beq.n	800de92 <f_open+0x28e>
 800de80:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800de84:	f003 0301 	and.w	r3, r3, #1
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d002      	beq.n	800de92 <f_open+0x28e>
						res = FR_DENIED;
 800de8c:	2307      	movs	r3, #7
 800de8e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800de92:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800de96:	2b00      	cmp	r3, #0
 800de98:	d14a      	bne.n	800df30 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800de9a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800de9e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	f003 0308 	and.w	r3, r3, #8
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d00b      	beq.n	800dec4 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 800deac:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800deb0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800deb4:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800deb8:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800debc:	7812      	ldrb	r2, [r2, #0]
 800debe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dec2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dec4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800dec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800deca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dece:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ded6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800deda:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dede:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dee6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800deea:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	f023 0301 	bic.w	r3, r3, #1
 800def4:	2b00      	cmp	r3, #0
 800def6:	bf14      	ite	ne
 800def8:	2301      	movne	r3, #1
 800defa:	2300      	moveq	r3, #0
 800defc:	b2db      	uxtb	r3, r3
 800defe:	461a      	mov	r2, r3
 800df00:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800df04:	4611      	mov	r1, r2
 800df06:	4618      	mov	r0, r3
 800df08:	f7fd ff00 	bl	800bd0c <inc_lock>
 800df0c:	4602      	mov	r2, r0
 800df0e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800df12:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800df1a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800df1e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	691b      	ldr	r3, [r3, #16]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d102      	bne.n	800df30 <f_open+0x32c>
 800df2a:	2302      	movs	r3, #2
 800df2c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800df30:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800df34:	2b00      	cmp	r3, #0
 800df36:	f040 810a 	bne.w	800e14e <f_open+0x54a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800df3a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800df3e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800df42:	4611      	mov	r1, r2
 800df44:	4618      	mov	r0, r3
 800df46:	f7fe fd1a 	bl	800c97e <ld_clust>
 800df4a:	4602      	mov	r2, r0
 800df4c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800df50:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800df58:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800df5c:	331c      	adds	r3, #28
 800df5e:	4618      	mov	r0, r3
 800df60:	f7fd fd3c 	bl	800b9dc <ld_dword>
 800df64:	4602      	mov	r2, r0
 800df66:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800df6a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800df72:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800df76:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2200      	movs	r2, #0
 800df7e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800df80:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800df84:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800df88:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800df90:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800df94:	88da      	ldrh	r2, [r3, #6]
 800df96:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800df9a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dfa2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dfa6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800dfb0:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800dfb4:	7812      	ldrb	r2, [r2, #0]
 800dfb6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dfb8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dfbc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dfc6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dfca:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dfd4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dfd8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dfe2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dfe6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	3330      	adds	r3, #48	; 0x30
 800dfee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dff2:	2100      	movs	r1, #0
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fd fd7c 	bl	800baf2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dffa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dffe:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	f003 0320 	and.w	r3, r3, #32
 800e008:	2b00      	cmp	r3, #0
 800e00a:	f000 80a0 	beq.w	800e14e <f_open+0x54a>
 800e00e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e012:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	f000 8097 	beq.w	800e14e <f_open+0x54a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e020:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e024:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	68da      	ldr	r2, [r3, #12]
 800e02c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e030:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e038:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e03c:	895b      	ldrh	r3, [r3, #10]
 800e03e:	025b      	lsls	r3, r3, #9
 800e040:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e044:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e048:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	689b      	ldr	r3, [r3, #8]
 800e050:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e054:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e058:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800e064:	e021      	b.n	800e0aa <f_open+0x4a6>
					clst = get_fat(&fp->obj, clst);
 800e066:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e06a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800e074:	4618      	mov	r0, r3
 800e076:	f7fe f836 	bl	800c0e6 <get_fat>
 800e07a:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800e07e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800e082:	2b01      	cmp	r3, #1
 800e084:	d802      	bhi.n	800e08c <f_open+0x488>
 800e086:	2302      	movs	r3, #2
 800e088:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e08c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800e090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e094:	d102      	bne.n	800e09c <f_open+0x498>
 800e096:	2301      	movs	r3, #1
 800e098:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e09c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800e0a0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800e0a4:	1ad3      	subs	r3, r2, r3
 800e0a6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800e0aa:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d105      	bne.n	800e0be <f_open+0x4ba>
 800e0b2:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800e0b6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d8d3      	bhi.n	800e066 <f_open+0x462>
				}
				fp->clust = clst;
 800e0be:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e0c2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800e0cc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e0ce:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d13b      	bne.n	800e14e <f_open+0x54a>
 800e0d6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800e0da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d035      	beq.n	800e14e <f_open+0x54a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e0e2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e0e6:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7fd ffdc 	bl	800c0a8 <clust2sect>
 800e0f0:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800e0f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d103      	bne.n	800e104 <f_open+0x500>
						res = FR_INT_ERR;
 800e0fc:	2302      	movs	r3, #2
 800e0fe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e102:	e024      	b.n	800e14e <f_open+0x54a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e104:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800e108:	0a5a      	lsrs	r2, r3, #9
 800e10a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800e10e:	441a      	add	r2, r3
 800e110:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e114:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e11c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e120:	7858      	ldrb	r0, [r3, #1]
 800e122:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e126:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e130:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e134:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	6a1a      	ldr	r2, [r3, #32]
 800e13c:	2301      	movs	r3, #1
 800e13e:	f7fd fbd7 	bl	800b8f0 <disk_read>
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d002      	beq.n	800e14e <f_open+0x54a>
 800e148:	2301      	movs	r3, #1
 800e14a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e14e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e152:	2b00      	cmp	r3, #0
 800e154:	d006      	beq.n	800e164 <f_open+0x560>
 800e156:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e15a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	2200      	movs	r2, #0
 800e162:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e164:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e168:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 800e16c:	4611      	mov	r1, r2
 800e16e:	4618      	mov	r0, r3
 800e170:	f7fd fd32 	bl	800bbd8 <unlock_fs>
 800e174:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800e178:	4618      	mov	r0, r3
 800e17a:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}

0800e182 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e182:	b580      	push	{r7, lr}
 800e184:	b08e      	sub	sp, #56	; 0x38
 800e186:	af00      	add	r7, sp, #0
 800e188:	60f8      	str	r0, [r7, #12]
 800e18a:	60b9      	str	r1, [r7, #8]
 800e18c:	607a      	str	r2, [r7, #4]
 800e18e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	2200      	movs	r2, #0
 800e198:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	f107 0214 	add.w	r2, r7, #20
 800e1a0:	4611      	mov	r1, r2
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7ff fc82 	bl	800daac <validate>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e1ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d107      	bne.n	800e1c6 <f_read+0x44>
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	7d5b      	ldrb	r3, [r3, #21]
 800e1ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e1be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d009      	beq.n	800e1da <f_read+0x58>
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e1cc:	4611      	mov	r1, r2
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fd fd02 	bl	800bbd8 <unlock_fs>
 800e1d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1d8:	e13d      	b.n	800e456 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	7d1b      	ldrb	r3, [r3, #20]
 800e1de:	f003 0301 	and.w	r3, r3, #1
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d106      	bne.n	800e1f4 <f_read+0x72>
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	2107      	movs	r1, #7
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fd fcf4 	bl	800bbd8 <unlock_fs>
 800e1f0:	2307      	movs	r3, #7
 800e1f2:	e130      	b.n	800e456 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	68da      	ldr	r2, [r3, #12]
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	699b      	ldr	r3, [r3, #24]
 800e1fc:	1ad3      	subs	r3, r2, r3
 800e1fe:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	6a3b      	ldr	r3, [r7, #32]
 800e204:	429a      	cmp	r2, r3
 800e206:	f240 811c 	bls.w	800e442 <f_read+0x2c0>
 800e20a:	6a3b      	ldr	r3, [r7, #32]
 800e20c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e20e:	e118      	b.n	800e442 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	699b      	ldr	r3, [r3, #24]
 800e214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e218:	2b00      	cmp	r3, #0
 800e21a:	f040 80e4 	bne.w	800e3e6 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	699b      	ldr	r3, [r3, #24]
 800e222:	0a5b      	lsrs	r3, r3, #9
 800e224:	697a      	ldr	r2, [r7, #20]
 800e226:	8952      	ldrh	r2, [r2, #10]
 800e228:	3a01      	subs	r2, #1
 800e22a:	4013      	ands	r3, r2
 800e22c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e22e:	69fb      	ldr	r3, [r7, #28]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d139      	bne.n	800e2a8 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	699b      	ldr	r3, [r3, #24]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d103      	bne.n	800e244 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	689b      	ldr	r3, [r3, #8]
 800e240:	633b      	str	r3, [r7, #48]	; 0x30
 800e242:	e013      	b.n	800e26c <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d007      	beq.n	800e25c <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	699b      	ldr	r3, [r3, #24]
 800e250:	4619      	mov	r1, r3
 800e252:	68f8      	ldr	r0, [r7, #12]
 800e254:	f7fe f9d8 	bl	800c608 <clmt_clust>
 800e258:	6338      	str	r0, [r7, #48]	; 0x30
 800e25a:	e007      	b.n	800e26c <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e25c:	68fa      	ldr	r2, [r7, #12]
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	69db      	ldr	r3, [r3, #28]
 800e262:	4619      	mov	r1, r3
 800e264:	4610      	mov	r0, r2
 800e266:	f7fd ff3e 	bl	800c0e6 <get_fat>
 800e26a:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d809      	bhi.n	800e286 <f_read+0x104>
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	2202      	movs	r2, #2
 800e276:	755a      	strb	r2, [r3, #21]
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	2102      	movs	r1, #2
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7fd fcab 	bl	800bbd8 <unlock_fs>
 800e282:	2302      	movs	r3, #2
 800e284:	e0e7      	b.n	800e456 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e28c:	d109      	bne.n	800e2a2 <f_read+0x120>
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2201      	movs	r2, #1
 800e292:	755a      	strb	r2, [r3, #21]
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	2101      	movs	r1, #1
 800e298:	4618      	mov	r0, r3
 800e29a:	f7fd fc9d 	bl	800bbd8 <unlock_fs>
 800e29e:	2301      	movs	r3, #1
 800e2a0:	e0d9      	b.n	800e456 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2a6:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e2a8:	697a      	ldr	r2, [r7, #20]
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	69db      	ldr	r3, [r3, #28]
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	4610      	mov	r0, r2
 800e2b2:	f7fd fef9 	bl	800c0a8 <clust2sect>
 800e2b6:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e2b8:	69bb      	ldr	r3, [r7, #24]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d109      	bne.n	800e2d2 <f_read+0x150>
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2202      	movs	r2, #2
 800e2c2:	755a      	strb	r2, [r3, #21]
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	2102      	movs	r1, #2
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7fd fc85 	bl	800bbd8 <unlock_fs>
 800e2ce:	2302      	movs	r3, #2
 800e2d0:	e0c1      	b.n	800e456 <f_read+0x2d4>
			sect += csect;
 800e2d2:	69ba      	ldr	r2, [r7, #24]
 800e2d4:	69fb      	ldr	r3, [r7, #28]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	0a5b      	lsrs	r3, r3, #9
 800e2de:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d03e      	beq.n	800e364 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e2e6:	69fa      	ldr	r2, [r7, #28]
 800e2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ea:	4413      	add	r3, r2
 800e2ec:	697a      	ldr	r2, [r7, #20]
 800e2ee:	8952      	ldrh	r2, [r2, #10]
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d905      	bls.n	800e300 <f_read+0x17e>
					cc = fs->csize - csect;
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	895b      	ldrh	r3, [r3, #10]
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	1ad3      	subs	r3, r2, r3
 800e2fe:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	7858      	ldrb	r0, [r3, #1]
 800e304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e306:	69ba      	ldr	r2, [r7, #24]
 800e308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e30a:	f7fd faf1 	bl	800b8f0 <disk_read>
 800e30e:	4603      	mov	r3, r0
 800e310:	2b00      	cmp	r3, #0
 800e312:	d009      	beq.n	800e328 <f_read+0x1a6>
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2201      	movs	r2, #1
 800e318:	755a      	strb	r2, [r3, #21]
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	2101      	movs	r1, #1
 800e31e:	4618      	mov	r0, r3
 800e320:	f7fd fc5a 	bl	800bbd8 <unlock_fs>
 800e324:	2301      	movs	r3, #1
 800e326:	e096      	b.n	800e456 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	7d1b      	ldrb	r3, [r3, #20]
 800e32c:	b25b      	sxtb	r3, r3
 800e32e:	2b00      	cmp	r3, #0
 800e330:	da14      	bge.n	800e35c <f_read+0x1da>
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	6a1a      	ldr	r2, [r3, #32]
 800e336:	69bb      	ldr	r3, [r7, #24]
 800e338:	1ad3      	subs	r3, r2, r3
 800e33a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d90d      	bls.n	800e35c <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	6a1a      	ldr	r2, [r3, #32]
 800e344:	69bb      	ldr	r3, [r7, #24]
 800e346:	1ad3      	subs	r3, r2, r3
 800e348:	025b      	lsls	r3, r3, #9
 800e34a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e34c:	18d0      	adds	r0, r2, r3
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	3330      	adds	r3, #48	; 0x30
 800e352:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e356:	4619      	mov	r1, r3
 800e358:	f7fd fbaa 	bl	800bab0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35e:	025b      	lsls	r3, r3, #9
 800e360:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e362:	e05a      	b.n	800e41a <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	6a1b      	ldr	r3, [r3, #32]
 800e368:	69ba      	ldr	r2, [r7, #24]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d038      	beq.n	800e3e0 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	7d1b      	ldrb	r3, [r3, #20]
 800e372:	b25b      	sxtb	r3, r3
 800e374:	2b00      	cmp	r3, #0
 800e376:	da1d      	bge.n	800e3b4 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	7858      	ldrb	r0, [r3, #1]
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	6a1a      	ldr	r2, [r3, #32]
 800e386:	2301      	movs	r3, #1
 800e388:	f7fd fad2 	bl	800b930 <disk_write>
 800e38c:	4603      	mov	r3, r0
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d009      	beq.n	800e3a6 <f_read+0x224>
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2201      	movs	r2, #1
 800e396:	755a      	strb	r2, [r3, #21]
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	2101      	movs	r1, #1
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7fd fc1b 	bl	800bbd8 <unlock_fs>
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	e057      	b.n	800e456 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	7d1b      	ldrb	r3, [r3, #20]
 800e3aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3ae:	b2da      	uxtb	r2, r3
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	7858      	ldrb	r0, [r3, #1]
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e3be:	2301      	movs	r3, #1
 800e3c0:	69ba      	ldr	r2, [r7, #24]
 800e3c2:	f7fd fa95 	bl	800b8f0 <disk_read>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d009      	beq.n	800e3e0 <f_read+0x25e>
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	755a      	strb	r2, [r3, #21]
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	2101      	movs	r1, #1
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fd fbfe 	bl	800bbd8 <unlock_fs>
 800e3dc:	2301      	movs	r3, #1
 800e3de:	e03a      	b.n	800e456 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	69ba      	ldr	r2, [r7, #24]
 800e3e4:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	699b      	ldr	r3, [r3, #24]
 800e3ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3ee:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e3f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d901      	bls.n	800e400 <f_read+0x27e>
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	699b      	ldr	r3, [r3, #24]
 800e40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e40e:	4413      	add	r3, r2
 800e410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e412:	4619      	mov	r1, r3
 800e414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e416:	f7fd fb4b 	bl	800bab0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e41a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41e:	4413      	add	r3, r2
 800e420:	627b      	str	r3, [r7, #36]	; 0x24
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	699a      	ldr	r2, [r3, #24]
 800e426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e428:	441a      	add	r2, r3
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	619a      	str	r2, [r3, #24]
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e434:	441a      	add	r2, r3
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	601a      	str	r2, [r3, #0]
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43e:	1ad3      	subs	r3, r2, r3
 800e440:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2b00      	cmp	r3, #0
 800e446:	f47f aee3 	bne.w	800e210 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	2100      	movs	r1, #0
 800e44e:	4618      	mov	r0, r3
 800e450:	f7fd fbc2 	bl	800bbd8 <unlock_fs>
 800e454:	2300      	movs	r3, #0
}
 800e456:	4618      	mov	r0, r3
 800e458:	3738      	adds	r7, #56	; 0x38
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}

0800e45e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e45e:	b580      	push	{r7, lr}
 800e460:	b086      	sub	sp, #24
 800e462:	af00      	add	r7, sp, #0
 800e464:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f107 0208 	add.w	r2, r7, #8
 800e46c:	4611      	mov	r1, r2
 800e46e:	4618      	mov	r0, r3
 800e470:	f7ff fb1c 	bl	800daac <validate>
 800e474:	4603      	mov	r3, r0
 800e476:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e478:	7dfb      	ldrb	r3, [r7, #23]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d16d      	bne.n	800e55a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	7d1b      	ldrb	r3, [r3, #20]
 800e482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e486:	2b00      	cmp	r3, #0
 800e488:	d067      	beq.n	800e55a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	7d1b      	ldrb	r3, [r3, #20]
 800e48e:	b25b      	sxtb	r3, r3
 800e490:	2b00      	cmp	r3, #0
 800e492:	da1a      	bge.n	800e4ca <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	7858      	ldrb	r0, [r3, #1]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6a1a      	ldr	r2, [r3, #32]
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	f7fd fa44 	bl	800b930 <disk_write>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d006      	beq.n	800e4bc <f_sync+0x5e>
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	2101      	movs	r1, #1
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7fd fb90 	bl	800bbd8 <unlock_fs>
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	e055      	b.n	800e568 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	7d1b      	ldrb	r3, [r3, #20]
 800e4c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4c4:	b2da      	uxtb	r2, r3
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e4ca:	f7fc ff6f 	bl	800b3ac <get_fattime>
 800e4ce:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e4d0:	68ba      	ldr	r2, [r7, #8]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	4610      	mov	r0, r2
 800e4da:	f7fd fd49 	bl	800bf70 <move_window>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e4e2:	7dfb      	ldrb	r3, [r7, #23]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d138      	bne.n	800e55a <f_sync+0xfc>
					dir = fp->dir_ptr;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4ec:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	330b      	adds	r3, #11
 800e4f2:	781a      	ldrb	r2, [r3, #0]
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	330b      	adds	r3, #11
 800e4f8:	f042 0220 	orr.w	r2, r2, #32
 800e4fc:	b2d2      	uxtb	r2, r2
 800e4fe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6818      	ldr	r0, [r3, #0]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	689b      	ldr	r3, [r3, #8]
 800e508:	461a      	mov	r2, r3
 800e50a:	68f9      	ldr	r1, [r7, #12]
 800e50c:	f7fe fa56 	bl	800c9bc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f103 021c 	add.w	r2, r3, #28
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	4619      	mov	r1, r3
 800e51c:	4610      	mov	r0, r2
 800e51e:	f7fd fa9b 	bl	800ba58 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	3316      	adds	r3, #22
 800e526:	6939      	ldr	r1, [r7, #16]
 800e528:	4618      	mov	r0, r3
 800e52a:	f7fd fa95 	bl	800ba58 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	3312      	adds	r3, #18
 800e532:	2100      	movs	r1, #0
 800e534:	4618      	mov	r0, r3
 800e536:	f7fd fa74 	bl	800ba22 <st_word>
					fs->wflag = 1;
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	2201      	movs	r2, #1
 800e53e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	4618      	mov	r0, r3
 800e544:	f7fd fd42 	bl	800bfcc <sync_fs>
 800e548:	4603      	mov	r3, r0
 800e54a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	7d1b      	ldrb	r3, [r3, #20]
 800e550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e554:	b2da      	uxtb	r2, r3
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	7dfa      	ldrb	r2, [r7, #23]
 800e55e:	4611      	mov	r1, r2
 800e560:	4618      	mov	r0, r3
 800e562:	f7fd fb39 	bl	800bbd8 <unlock_fs>
 800e566:	7dfb      	ldrb	r3, [r7, #23]
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3718      	adds	r7, #24
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b084      	sub	sp, #16
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f7ff ff70 	bl	800e45e <f_sync>
 800e57e:	4603      	mov	r3, r0
 800e580:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e582:	7bfb      	ldrb	r3, [r7, #15]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d11d      	bne.n	800e5c4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f107 0208 	add.w	r2, r7, #8
 800e58e:	4611      	mov	r1, r2
 800e590:	4618      	mov	r0, r3
 800e592:	f7ff fa8b 	bl	800daac <validate>
 800e596:	4603      	mov	r3, r0
 800e598:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e59a:	7bfb      	ldrb	r3, [r7, #15]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d111      	bne.n	800e5c4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	691b      	ldr	r3, [r3, #16]
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7fd fc3f 	bl	800be28 <dec_lock>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e5ae:	7bfb      	ldrb	r3, [r7, #15]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d102      	bne.n	800e5ba <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	2100      	movs	r1, #0
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7fd fb0a 	bl	800bbd8 <unlock_fs>
#endif
		}
	}
	return res;
 800e5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3710      	adds	r7, #16
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}

0800e5ce <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800e5ce:	b580      	push	{r7, lr}
 800e5d0:	b088      	sub	sp, #32
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	60f8      	str	r0, [r7, #12]
 800e5d6:	60b9      	str	r1, [r7, #8]
 800e5d8:	607a      	str	r2, [r7, #4]
	int n = 0;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800e5e2:	e01b      	b.n	800e61c <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800e5e4:	f107 0310 	add.w	r3, r7, #16
 800e5e8:	f107 0114 	add.w	r1, r7, #20
 800e5ec:	2201      	movs	r2, #1
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7ff fdc7 	bl	800e182 <f_read>
		if (rc != 1) break;
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	2b01      	cmp	r3, #1
 800e5f8:	d116      	bne.n	800e628 <f_gets+0x5a>
		c = s[0];
 800e5fa:	7d3b      	ldrb	r3, [r7, #20]
 800e5fc:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800e5fe:	7dfb      	ldrb	r3, [r7, #23]
 800e600:	2b0d      	cmp	r3, #13
 800e602:	d100      	bne.n	800e606 <f_gets+0x38>
 800e604:	e00a      	b.n	800e61c <f_gets+0x4e>
		*p++ = c;
 800e606:	69bb      	ldr	r3, [r7, #24]
 800e608:	1c5a      	adds	r2, r3, #1
 800e60a:	61ba      	str	r2, [r7, #24]
 800e60c:	7dfa      	ldrb	r2, [r7, #23]
 800e60e:	701a      	strb	r2, [r3, #0]
		n++;
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	3301      	adds	r3, #1
 800e614:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800e616:	7dfb      	ldrb	r3, [r7, #23]
 800e618:	2b0a      	cmp	r3, #10
 800e61a:	d007      	beq.n	800e62c <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	3b01      	subs	r3, #1
 800e620:	69fa      	ldr	r2, [r7, #28]
 800e622:	429a      	cmp	r2, r3
 800e624:	dbde      	blt.n	800e5e4 <f_gets+0x16>
 800e626:	e002      	b.n	800e62e <f_gets+0x60>
		if (rc != 1) break;
 800e628:	bf00      	nop
 800e62a:	e000      	b.n	800e62e <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800e62c:	bf00      	nop
	}
	*p = 0;
 800e62e:	69bb      	ldr	r3, [r7, #24]
 800e630:	2200      	movs	r2, #0
 800e632:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800e634:	69fb      	ldr	r3, [r7, #28]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d001      	beq.n	800e63e <f_gets+0x70>
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	e000      	b.n	800e640 <f_gets+0x72>
 800e63e:	2300      	movs	r3, #0
}
 800e640:	4618      	mov	r0, r3
 800e642:	3720      	adds	r7, #32
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e648:	b480      	push	{r7}
 800e64a:	b087      	sub	sp, #28
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	60f8      	str	r0, [r7, #12]
 800e650:	60b9      	str	r1, [r7, #8]
 800e652:	4613      	mov	r3, r2
 800e654:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e656:	2301      	movs	r3, #1
 800e658:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e65a:	2300      	movs	r3, #0
 800e65c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e65e:	4b1f      	ldr	r3, [pc, #124]	; (800e6dc <FATFS_LinkDriverEx+0x94>)
 800e660:	7a5b      	ldrb	r3, [r3, #9]
 800e662:	b2db      	uxtb	r3, r3
 800e664:	2b00      	cmp	r3, #0
 800e666:	d131      	bne.n	800e6cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e668:	4b1c      	ldr	r3, [pc, #112]	; (800e6dc <FATFS_LinkDriverEx+0x94>)
 800e66a:	7a5b      	ldrb	r3, [r3, #9]
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	461a      	mov	r2, r3
 800e670:	4b1a      	ldr	r3, [pc, #104]	; (800e6dc <FATFS_LinkDriverEx+0x94>)
 800e672:	2100      	movs	r1, #0
 800e674:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e676:	4b19      	ldr	r3, [pc, #100]	; (800e6dc <FATFS_LinkDriverEx+0x94>)
 800e678:	7a5b      	ldrb	r3, [r3, #9]
 800e67a:	b2db      	uxtb	r3, r3
 800e67c:	4a17      	ldr	r2, [pc, #92]	; (800e6dc <FATFS_LinkDriverEx+0x94>)
 800e67e:	009b      	lsls	r3, r3, #2
 800e680:	4413      	add	r3, r2
 800e682:	68fa      	ldr	r2, [r7, #12]
 800e684:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e686:	4b15      	ldr	r3, [pc, #84]	; (800e6dc <FATFS_LinkDriverEx+0x94>)
 800e688:	7a5b      	ldrb	r3, [r3, #9]
 800e68a:	b2db      	uxtb	r3, r3
 800e68c:	461a      	mov	r2, r3
 800e68e:	4b13      	ldr	r3, [pc, #76]	; (800e6dc <FATFS_LinkDriverEx+0x94>)
 800e690:	4413      	add	r3, r2
 800e692:	79fa      	ldrb	r2, [r7, #7]
 800e694:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e696:	4b11      	ldr	r3, [pc, #68]	; (800e6dc <FATFS_LinkDriverEx+0x94>)
 800e698:	7a5b      	ldrb	r3, [r3, #9]
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	1c5a      	adds	r2, r3, #1
 800e69e:	b2d1      	uxtb	r1, r2
 800e6a0:	4a0e      	ldr	r2, [pc, #56]	; (800e6dc <FATFS_LinkDriverEx+0x94>)
 800e6a2:	7251      	strb	r1, [r2, #9]
 800e6a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e6a6:	7dbb      	ldrb	r3, [r7, #22]
 800e6a8:	3330      	adds	r3, #48	; 0x30
 800e6aa:	b2da      	uxtb	r2, r3
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	223a      	movs	r2, #58	; 0x3a
 800e6b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	3302      	adds	r3, #2
 800e6bc:	222f      	movs	r2, #47	; 0x2f
 800e6be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	3303      	adds	r3, #3
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e6cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	371c      	adds	r7, #28
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d8:	4770      	bx	lr
 800e6da:	bf00      	nop
 800e6dc:	20001824 	.word	0x20001824

0800e6e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	6839      	ldr	r1, [r7, #0]
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f7ff ffaa 	bl	800e648 <FATFS_LinkDriverEx>
 800e6f4:	4603      	mov	r3, r0
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
	...

0800e700 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e700:	b480      	push	{r7}
 800e702:	b085      	sub	sp, #20
 800e704:	af00      	add	r7, sp, #0
 800e706:	4603      	mov	r3, r0
 800e708:	6039      	str	r1, [r7, #0]
 800e70a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e70c:	88fb      	ldrh	r3, [r7, #6]
 800e70e:	2b7f      	cmp	r3, #127	; 0x7f
 800e710:	d802      	bhi.n	800e718 <ff_convert+0x18>
		c = chr;
 800e712:	88fb      	ldrh	r3, [r7, #6]
 800e714:	81fb      	strh	r3, [r7, #14]
 800e716:	e025      	b.n	800e764 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d00b      	beq.n	800e736 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e71e:	88fb      	ldrh	r3, [r7, #6]
 800e720:	2bff      	cmp	r3, #255	; 0xff
 800e722:	d805      	bhi.n	800e730 <ff_convert+0x30>
 800e724:	88fb      	ldrh	r3, [r7, #6]
 800e726:	3b80      	subs	r3, #128	; 0x80
 800e728:	4a12      	ldr	r2, [pc, #72]	; (800e774 <ff_convert+0x74>)
 800e72a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e72e:	e000      	b.n	800e732 <ff_convert+0x32>
 800e730:	2300      	movs	r3, #0
 800e732:	81fb      	strh	r3, [r7, #14]
 800e734:	e016      	b.n	800e764 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e736:	2300      	movs	r3, #0
 800e738:	81fb      	strh	r3, [r7, #14]
 800e73a:	e009      	b.n	800e750 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e73c:	89fb      	ldrh	r3, [r7, #14]
 800e73e:	4a0d      	ldr	r2, [pc, #52]	; (800e774 <ff_convert+0x74>)
 800e740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e744:	88fa      	ldrh	r2, [r7, #6]
 800e746:	429a      	cmp	r2, r3
 800e748:	d006      	beq.n	800e758 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e74a:	89fb      	ldrh	r3, [r7, #14]
 800e74c:	3301      	adds	r3, #1
 800e74e:	81fb      	strh	r3, [r7, #14]
 800e750:	89fb      	ldrh	r3, [r7, #14]
 800e752:	2b7f      	cmp	r3, #127	; 0x7f
 800e754:	d9f2      	bls.n	800e73c <ff_convert+0x3c>
 800e756:	e000      	b.n	800e75a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e758:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e75a:	89fb      	ldrh	r3, [r7, #14]
 800e75c:	3380      	adds	r3, #128	; 0x80
 800e75e:	b29b      	uxth	r3, r3
 800e760:	b2db      	uxtb	r3, r3
 800e762:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e764:	89fb      	ldrh	r3, [r7, #14]
}
 800e766:	4618      	mov	r0, r3
 800e768:	3714      	adds	r7, #20
 800e76a:	46bd      	mov	sp, r7
 800e76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e770:	4770      	bx	lr
 800e772:	bf00      	nop
 800e774:	08019ad4 	.word	0x08019ad4

0800e778 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e778:	b480      	push	{r7}
 800e77a:	b087      	sub	sp, #28
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	4603      	mov	r3, r0
 800e780:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e782:	88fb      	ldrh	r3, [r7, #6]
 800e784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e788:	d201      	bcs.n	800e78e <ff_wtoupper+0x16>
 800e78a:	4b3e      	ldr	r3, [pc, #248]	; (800e884 <ff_wtoupper+0x10c>)
 800e78c:	e000      	b.n	800e790 <ff_wtoupper+0x18>
 800e78e:	4b3e      	ldr	r3, [pc, #248]	; (800e888 <ff_wtoupper+0x110>)
 800e790:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	1c9a      	adds	r2, r3, #2
 800e796:	617a      	str	r2, [r7, #20]
 800e798:	881b      	ldrh	r3, [r3, #0]
 800e79a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e79c:	8a7b      	ldrh	r3, [r7, #18]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d068      	beq.n	800e874 <ff_wtoupper+0xfc>
 800e7a2:	88fa      	ldrh	r2, [r7, #6]
 800e7a4:	8a7b      	ldrh	r3, [r7, #18]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d364      	bcc.n	800e874 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	1c9a      	adds	r2, r3, #2
 800e7ae:	617a      	str	r2, [r7, #20]
 800e7b0:	881b      	ldrh	r3, [r3, #0]
 800e7b2:	823b      	strh	r3, [r7, #16]
 800e7b4:	8a3b      	ldrh	r3, [r7, #16]
 800e7b6:	0a1b      	lsrs	r3, r3, #8
 800e7b8:	81fb      	strh	r3, [r7, #14]
 800e7ba:	8a3b      	ldrh	r3, [r7, #16]
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e7c0:	88fa      	ldrh	r2, [r7, #6]
 800e7c2:	8a79      	ldrh	r1, [r7, #18]
 800e7c4:	8a3b      	ldrh	r3, [r7, #16]
 800e7c6:	440b      	add	r3, r1
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	da49      	bge.n	800e860 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e7cc:	89fb      	ldrh	r3, [r7, #14]
 800e7ce:	2b08      	cmp	r3, #8
 800e7d0:	d84f      	bhi.n	800e872 <ff_wtoupper+0xfa>
 800e7d2:	a201      	add	r2, pc, #4	; (adr r2, 800e7d8 <ff_wtoupper+0x60>)
 800e7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d8:	0800e7fd 	.word	0x0800e7fd
 800e7dc:	0800e80f 	.word	0x0800e80f
 800e7e0:	0800e825 	.word	0x0800e825
 800e7e4:	0800e82d 	.word	0x0800e82d
 800e7e8:	0800e835 	.word	0x0800e835
 800e7ec:	0800e83d 	.word	0x0800e83d
 800e7f0:	0800e845 	.word	0x0800e845
 800e7f4:	0800e84d 	.word	0x0800e84d
 800e7f8:	0800e855 	.word	0x0800e855
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e7fc:	88fa      	ldrh	r2, [r7, #6]
 800e7fe:	8a7b      	ldrh	r3, [r7, #18]
 800e800:	1ad3      	subs	r3, r2, r3
 800e802:	005b      	lsls	r3, r3, #1
 800e804:	697a      	ldr	r2, [r7, #20]
 800e806:	4413      	add	r3, r2
 800e808:	881b      	ldrh	r3, [r3, #0]
 800e80a:	80fb      	strh	r3, [r7, #6]
 800e80c:	e027      	b.n	800e85e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e80e:	88fa      	ldrh	r2, [r7, #6]
 800e810:	8a7b      	ldrh	r3, [r7, #18]
 800e812:	1ad3      	subs	r3, r2, r3
 800e814:	b29b      	uxth	r3, r3
 800e816:	f003 0301 	and.w	r3, r3, #1
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	88fa      	ldrh	r2, [r7, #6]
 800e81e:	1ad3      	subs	r3, r2, r3
 800e820:	80fb      	strh	r3, [r7, #6]
 800e822:	e01c      	b.n	800e85e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e824:	88fb      	ldrh	r3, [r7, #6]
 800e826:	3b10      	subs	r3, #16
 800e828:	80fb      	strh	r3, [r7, #6]
 800e82a:	e018      	b.n	800e85e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e82c:	88fb      	ldrh	r3, [r7, #6]
 800e82e:	3b20      	subs	r3, #32
 800e830:	80fb      	strh	r3, [r7, #6]
 800e832:	e014      	b.n	800e85e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e834:	88fb      	ldrh	r3, [r7, #6]
 800e836:	3b30      	subs	r3, #48	; 0x30
 800e838:	80fb      	strh	r3, [r7, #6]
 800e83a:	e010      	b.n	800e85e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e83c:	88fb      	ldrh	r3, [r7, #6]
 800e83e:	3b1a      	subs	r3, #26
 800e840:	80fb      	strh	r3, [r7, #6]
 800e842:	e00c      	b.n	800e85e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e844:	88fb      	ldrh	r3, [r7, #6]
 800e846:	3308      	adds	r3, #8
 800e848:	80fb      	strh	r3, [r7, #6]
 800e84a:	e008      	b.n	800e85e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e84c:	88fb      	ldrh	r3, [r7, #6]
 800e84e:	3b50      	subs	r3, #80	; 0x50
 800e850:	80fb      	strh	r3, [r7, #6]
 800e852:	e004      	b.n	800e85e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e854:	88fb      	ldrh	r3, [r7, #6]
 800e856:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e85a:	80fb      	strh	r3, [r7, #6]
 800e85c:	bf00      	nop
			}
			break;
 800e85e:	e008      	b.n	800e872 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e860:	89fb      	ldrh	r3, [r7, #14]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d195      	bne.n	800e792 <ff_wtoupper+0x1a>
 800e866:	8a3b      	ldrh	r3, [r7, #16]
 800e868:	005b      	lsls	r3, r3, #1
 800e86a:	697a      	ldr	r2, [r7, #20]
 800e86c:	4413      	add	r3, r2
 800e86e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e870:	e78f      	b.n	800e792 <ff_wtoupper+0x1a>
			break;
 800e872:	bf00      	nop
	}

	return chr;
 800e874:	88fb      	ldrh	r3, [r7, #6]
}
 800e876:	4618      	mov	r0, r3
 800e878:	371c      	adds	r7, #28
 800e87a:	46bd      	mov	sp, r7
 800e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e880:	4770      	bx	lr
 800e882:	bf00      	nop
 800e884:	08019bd4 	.word	0x08019bd4
 800e888:	08019dc8 	.word	0x08019dc8

0800e88c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b086      	sub	sp, #24
 800e890:	af00      	add	r7, sp, #0
 800e892:	4603      	mov	r3, r0
 800e894:	6039      	str	r1, [r7, #0]
 800e896:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800e898:	2300      	movs	r3, #0
 800e89a:	60fb      	str	r3, [r7, #12]
 800e89c:	2300      	movs	r3, #0
 800e89e:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800e8a0:	f107 030c 	add.w	r3, r7, #12
 800e8a4:	2101      	movs	r1, #1
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f000 fad8 	bl	800ee5c <osSemaphoreCreate>
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	bf14      	ite	ne
 800e8ba:	2301      	movne	r3, #1
 800e8bc:	2300      	moveq	r3, #0
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	617b      	str	r3, [r7, #20]

    return ret;
 800e8c2:	697b      	ldr	r3, [r7, #20]
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3718      	adds	r7, #24
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 fb77 	bl	800efc8 <osSemaphoreDelete>
#endif
    return 1;
 800e8da:	2301      	movs	r3, #1
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b084      	sub	sp, #16
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800e8f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f000 fae3 	bl	800eec0 <osSemaphoreWait>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d101      	bne.n	800e904 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800e900:	2301      	movs	r3, #1
 800e902:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e904:	68fb      	ldr	r3, [r7, #12]
}
 800e906:	4618      	mov	r0, r3
 800e908:	3710      	adds	r7, #16
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}

0800e90e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800e90e:	b580      	push	{r7, lr}
 800e910:	b082      	sub	sp, #8
 800e912:	af00      	add	r7, sp, #0
 800e914:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f000 fb20 	bl	800ef5c <osSemaphoreRelease>
#endif
}
 800e91c:	bf00      	nop
 800e91e:	3708      	adds	r7, #8
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e924:	b480      	push	{r7}
 800e926:	b085      	sub	sp, #20
 800e928:	af00      	add	r7, sp, #0
 800e92a:	4603      	mov	r3, r0
 800e92c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e92e:	2300      	movs	r3, #0
 800e930:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e936:	2b84      	cmp	r3, #132	; 0x84
 800e938:	d005      	beq.n	800e946 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e93a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	4413      	add	r3, r2
 800e942:	3303      	adds	r3, #3
 800e944:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e946:	68fb      	ldr	r3, [r7, #12]
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3714      	adds	r7, #20
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr

0800e954 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e954:	b480      	push	{r7}
 800e956:	b083      	sub	sp, #12
 800e958:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e95a:	f3ef 8305 	mrs	r3, IPSR
 800e95e:	607b      	str	r3, [r7, #4]
  return(result);
 800e960:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e962:	2b00      	cmp	r3, #0
 800e964:	bf14      	ite	ne
 800e966:	2301      	movne	r3, #1
 800e968:	2300      	moveq	r3, #0
 800e96a:	b2db      	uxtb	r3, r3
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	370c      	adds	r7, #12
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr

0800e978 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e97c:	f001 fe7c 	bl	8010678 <vTaskStartScheduler>
  
  return osOK;
 800e980:	2300      	movs	r3, #0
}
 800e982:	4618      	mov	r0, r3
 800e984:	bd80      	pop	{r7, pc}

0800e986 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800e986:	b580      	push	{r7, lr}
 800e988:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800e98a:	f002 fac7 	bl	8010f1c <xTaskGetSchedulerState>
 800e98e:	4603      	mov	r3, r0
 800e990:	2b01      	cmp	r3, #1
 800e992:	d101      	bne.n	800e998 <osKernelRunning+0x12>
    return 0;
 800e994:	2300      	movs	r3, #0
 800e996:	e000      	b.n	800e99a <osKernelRunning+0x14>
  else
    return 1;
 800e998:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800e99e:	b580      	push	{r7, lr}
 800e9a0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800e9a2:	f7ff ffd7 	bl	800e954 <inHandlerMode>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d003      	beq.n	800e9b4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800e9ac:	f001 ff84 	bl	80108b8 <xTaskGetTickCountFromISR>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	e002      	b.n	800e9ba <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800e9b4:	f001 ff70 	bl	8010898 <xTaskGetTickCount>
 800e9b8:	4603      	mov	r3, r0
  }
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	bd80      	pop	{r7, pc}

0800e9be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e9be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9c0:	b089      	sub	sp, #36	; 0x24
 800e9c2:	af04      	add	r7, sp, #16
 800e9c4:	6078      	str	r0, [r7, #4]
 800e9c6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	695b      	ldr	r3, [r3, #20]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d020      	beq.n	800ea12 <osThreadCreate+0x54>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	699b      	ldr	r3, [r3, #24]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d01c      	beq.n	800ea12 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	685c      	ldr	r4, [r3, #4]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681d      	ldr	r5, [r3, #0]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	691e      	ldr	r6, [r3, #16]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f7ff ff9a 	bl	800e924 <makeFreeRtosPriority>
 800e9f0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	695b      	ldr	r3, [r3, #20]
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e9fa:	9202      	str	r2, [sp, #8]
 800e9fc:	9301      	str	r3, [sp, #4]
 800e9fe:	9100      	str	r1, [sp, #0]
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	4632      	mov	r2, r6
 800ea04:	4629      	mov	r1, r5
 800ea06:	4620      	mov	r0, r4
 800ea08:	f001 fc6e 	bl	80102e8 <xTaskCreateStatic>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	60fb      	str	r3, [r7, #12]
 800ea10:	e01c      	b.n	800ea4c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	685c      	ldr	r4, [r3, #4]
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ea1e:	b29e      	uxth	r6, r3
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7ff ff7c 	bl	800e924 <makeFreeRtosPriority>
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	f107 030c 	add.w	r3, r7, #12
 800ea32:	9301      	str	r3, [sp, #4]
 800ea34:	9200      	str	r2, [sp, #0]
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	4632      	mov	r2, r6
 800ea3a:	4629      	mov	r1, r5
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	f001 fcb0 	bl	80103a2 <xTaskCreate>
 800ea42:	4603      	mov	r3, r0
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d001      	beq.n	800ea4c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	e000      	b.n	800ea4e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3714      	adds	r7, #20
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ea58 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	af00      	add	r7, sp, #0
  taskYIELD();
 800ea5c:	4b06      	ldr	r3, [pc, #24]	; (800ea78 <osThreadYield+0x20>)
 800ea5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea62:	601a      	str	r2, [r3, #0]
 800ea64:	f3bf 8f4f 	dsb	sy
 800ea68:	f3bf 8f6f 	isb	sy
  
  return osOK;
 800ea6c:	2300      	movs	r3, #0
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr
 800ea78:	e000ed04 	.word	0xe000ed04

0800ea7c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d001      	beq.n	800ea92 <osDelay+0x16>
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	e000      	b.n	800ea94 <osDelay+0x18>
 800ea92:	2301      	movs	r3, #1
 800ea94:	4618      	mov	r0, r3
 800ea96:	f001 fdbb 	bl	8010610 <vTaskDelay>
  
  return osOK;
 800ea9a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3710      	adds	r7, #16
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b086      	sub	sp, #24
 800eaa8:	af02      	add	r7, sp, #8
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	460b      	mov	r3, r1
 800eaae:	607a      	str	r2, [r7, #4]
 800eab0:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d013      	beq.n	800eae2 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800eaba:	7afb      	ldrb	r3, [r7, #11]
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	d101      	bne.n	800eac4 <osTimerCreate+0x20>
 800eac0:	2101      	movs	r1, #1
 800eac2:	e000      	b.n	800eac6 <osTimerCreate+0x22>
 800eac4:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800eaca:	68fa      	ldr	r2, [r7, #12]
 800eacc:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800eace:	9201      	str	r2, [sp, #4]
 800ead0:	9300      	str	r3, [sp, #0]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	460a      	mov	r2, r1
 800ead6:	2101      	movs	r1, #1
 800ead8:	480b      	ldr	r0, [pc, #44]	; (800eb08 <osTimerCreate+0x64>)
 800eada:	f002 fe94 	bl	8011806 <xTimerCreateStatic>
 800eade:	4603      	mov	r3, r0
 800eae0:	e00e      	b.n	800eb00 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800eae2:	7afb      	ldrb	r3, [r7, #11]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d101      	bne.n	800eaec <osTimerCreate+0x48>
 800eae8:	2201      	movs	r2, #1
 800eaea:	e000      	b.n	800eaee <osTimerCreate+0x4a>
 800eaec:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800eaf2:	9300      	str	r3, [sp, #0]
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2101      	movs	r1, #1
 800eaf8:	4803      	ldr	r0, [pc, #12]	; (800eb08 <osTimerCreate+0x64>)
 800eafa:	f002 fe63 	bl	80117c4 <xTimerCreate>
 800eafe:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	08016010 	.word	0x08016010

0800eb0c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b088      	sub	sp, #32
 800eb10:	af02      	add	r7, sp, #8
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800eb16:	2300      	movs	r3, #0
 800eb18:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d101      	bne.n	800eb2c <osTimerStart+0x20>
    ticks = 1;
 800eb28:	2301      	movs	r3, #1
 800eb2a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800eb2c:	f7ff ff12 	bl	800e954 <inHandlerMode>
 800eb30:	4603      	mov	r3, r0
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d01a      	beq.n	800eb6c <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800eb36:	f107 030c 	add.w	r3, r7, #12
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	9200      	str	r2, [sp, #0]
 800eb3e:	693a      	ldr	r2, [r7, #16]
 800eb40:	2109      	movs	r1, #9
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f002 fed8 	bl	80118f8 <xTimerGenericCommand>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d002      	beq.n	800eb54 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800eb4e:	23ff      	movs	r3, #255	; 0xff
 800eb50:	617b      	str	r3, [r7, #20]
 800eb52:	e018      	b.n	800eb86 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d015      	beq.n	800eb86 <osTimerStart+0x7a>
 800eb5a:	4b0d      	ldr	r3, [pc, #52]	; (800eb90 <osTimerStart+0x84>)
 800eb5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb60:	601a      	str	r2, [r3, #0]
 800eb62:	f3bf 8f4f 	dsb	sy
 800eb66:	f3bf 8f6f 	isb	sy
 800eb6a:	e00c      	b.n	800eb86 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	9300      	str	r3, [sp, #0]
 800eb70:	2300      	movs	r3, #0
 800eb72:	693a      	ldr	r2, [r7, #16]
 800eb74:	2104      	movs	r1, #4
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f002 febe 	bl	80118f8 <xTimerGenericCommand>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	2b01      	cmp	r3, #1
 800eb80:	d001      	beq.n	800eb86 <osTimerStart+0x7a>
      result = osErrorOS;
 800eb82:	23ff      	movs	r3, #255	; 0xff
 800eb84:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800eb86:	697b      	ldr	r3, [r7, #20]
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3718      	adds	r7, #24
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	e000ed04 	.word	0xe000ed04

0800eb94 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b086      	sub	sp, #24
 800eb98:	af02      	add	r7, sp, #8
 800eb9a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800eba0:	2300      	movs	r3, #0
 800eba2:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 800eba4:	f7ff fed6 	bl	800e954 <inHandlerMode>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d019      	beq.n	800ebe2 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800ebae:	f107 0308 	add.w	r3, r7, #8
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	9200      	str	r2, [sp, #0]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	2108      	movs	r1, #8
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f002 fe9c 	bl	80118f8 <xTimerGenericCommand>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d001      	beq.n	800ebca <osTimerStop+0x36>
      return osErrorOS;
 800ebc6:	23ff      	movs	r3, #255	; 0xff
 800ebc8:	e019      	b.n	800ebfe <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d015      	beq.n	800ebfc <osTimerStop+0x68>
 800ebd0:	4b0d      	ldr	r3, [pc, #52]	; (800ec08 <osTimerStop+0x74>)
 800ebd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebd6:	601a      	str	r2, [r3, #0]
 800ebd8:	f3bf 8f4f 	dsb	sy
 800ebdc:	f3bf 8f6f 	isb	sy
 800ebe0:	e00c      	b.n	800ebfc <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	9300      	str	r3, [sp, #0]
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	2200      	movs	r2, #0
 800ebea:	2103      	movs	r1, #3
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f002 fe83 	bl	80118f8 <xTimerGenericCommand>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d001      	beq.n	800ebfc <osTimerStop+0x68>
      result = osErrorOS;
 800ebf8:	23ff      	movs	r3, #255	; 0xff
 800ebfa:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3710      	adds	r7, #16
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	e000ed04 	.word	0xe000ed04

0800ec0c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b086      	sub	sp, #24
 800ec10:	af02      	add	r7, sp, #8
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ec16:	2300      	movs	r3, #0
 800ec18:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800ec1e:	f7ff fe99 	bl	800e954 <inHandlerMode>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d01c      	beq.n	800ec62 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800ec28:	6839      	ldr	r1, [r7, #0]
 800ec2a:	f107 0208 	add.w	r2, r7, #8
 800ec2e:	f107 030c 	add.w	r3, r7, #12
 800ec32:	9300      	str	r3, [sp, #0]
 800ec34:	4613      	mov	r3, r2
 800ec36:	2201      	movs	r2, #1
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f002 fc3b 	bl	80114b4 <xTaskGenericNotifyFromISR>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	d002      	beq.n	800ec4a <osSignalSet+0x3e>
      return 0x80000000;
 800ec44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec48:	e019      	b.n	800ec7e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d015      	beq.n	800ec7c <osSignalSet+0x70>
 800ec50:	4b0d      	ldr	r3, [pc, #52]	; (800ec88 <osSignalSet+0x7c>)
 800ec52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec56:	601a      	str	r2, [r3, #0]
 800ec58:	f3bf 8f4f 	dsb	sy
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	e00c      	b.n	800ec7c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800ec62:	6839      	ldr	r1, [r7, #0]
 800ec64:	f107 0308 	add.w	r3, r7, #8
 800ec68:	2201      	movs	r2, #1
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f002 fb6c 	bl	8011348 <xTaskGenericNotify>
 800ec70:	4603      	mov	r3, r0
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d002      	beq.n	800ec7c <osSignalSet+0x70>
    return 0x80000000;
 800ec76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec7a:	e000      	b.n	800ec7e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800ec7c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3710      	adds	r7, #16
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	e000ed04 	.word	0xe000ed04

0800ec8c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800ec8c:	b590      	push	{r4, r7, lr}
 800ec8e:	b089      	sub	sp, #36	; 0x24
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	60f8      	str	r0, [r7, #12]
 800ec94:	60b9      	str	r1, [r7, #8]
 800ec96:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800ec98:	2300      	movs	r3, #0
 800ec9a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eca6:	d103      	bne.n	800ecb0 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800eca8:	f04f 33ff 	mov.w	r3, #4294967295
 800ecac:	61fb      	str	r3, [r7, #28]
 800ecae:	e009      	b.n	800ecc4 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d006      	beq.n	800ecc4 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800ecba:	69fb      	ldr	r3, [r7, #28]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d101      	bne.n	800ecc4 <osSignalWait+0x38>
      ticks = 1;
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800ecc4:	f7ff fe46 	bl	800e954 <inHandlerMode>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d002      	beq.n	800ecd4 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800ecce:	2382      	movs	r3, #130	; 0x82
 800ecd0:	613b      	str	r3, [r7, #16]
 800ecd2:	e01b      	b.n	800ed0c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800ecd4:	68b9      	ldr	r1, [r7, #8]
 800ecd6:	f107 0310 	add.w	r3, r7, #16
 800ecda:	1d1a      	adds	r2, r3, #4
 800ecdc:	69fb      	ldr	r3, [r7, #28]
 800ecde:	2000      	movs	r0, #0
 800ece0:	f002 fad8 	bl	8011294 <xTaskNotifyWait>
 800ece4:	4603      	mov	r3, r0
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	d008      	beq.n	800ecfc <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800ecea:	69fb      	ldr	r3, [r7, #28]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d102      	bne.n	800ecf6 <osSignalWait+0x6a>
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	613b      	str	r3, [r7, #16]
 800ecf4:	e00a      	b.n	800ed0c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800ecf6:	2340      	movs	r3, #64	; 0x40
 800ecf8:	613b      	str	r3, [r7, #16]
 800ecfa:	e007      	b.n	800ed0c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	da02      	bge.n	800ed08 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800ed02:	2386      	movs	r3, #134	; 0x86
 800ed04:	613b      	str	r3, [r7, #16]
 800ed06:	e001      	b.n	800ed0c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800ed08:	2308      	movs	r3, #8
 800ed0a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	461c      	mov	r4, r3
 800ed10:	f107 0310 	add.w	r3, r7, #16
 800ed14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ed18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ed1c:	68f8      	ldr	r0, [r7, #12]
 800ed1e:	3724      	adds	r7, #36	; 0x24
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd90      	pop	{r4, r7, pc}

0800ed24 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b082      	sub	sp, #8
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d007      	beq.n	800ed44 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	4619      	mov	r1, r3
 800ed3a:	2001      	movs	r0, #1
 800ed3c:	f000 fc53 	bl	800f5e6 <xQueueCreateMutexStatic>
 800ed40:	4603      	mov	r3, r0
 800ed42:	e003      	b.n	800ed4c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800ed44:	2001      	movs	r0, #1
 800ed46:	f000 fc36 	bl	800f5b6 <xQueueCreateMutex>
 800ed4a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3708      	adds	r7, #8
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ed5e:	2300      	movs	r3, #0
 800ed60:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d101      	bne.n	800ed6c <osMutexWait+0x18>
    return osErrorParameter;
 800ed68:	2380      	movs	r3, #128	; 0x80
 800ed6a:	e03a      	b.n	800ede2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed76:	d103      	bne.n	800ed80 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800ed78:	f04f 33ff 	mov.w	r3, #4294967295
 800ed7c:	60fb      	str	r3, [r7, #12]
 800ed7e:	e009      	b.n	800ed94 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d006      	beq.n	800ed94 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d101      	bne.n	800ed94 <osMutexWait+0x40>
      ticks = 1;
 800ed90:	2301      	movs	r3, #1
 800ed92:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ed94:	f7ff fdde 	bl	800e954 <inHandlerMode>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d017      	beq.n	800edce <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ed9e:	f107 0308 	add.w	r3, r7, #8
 800eda2:	461a      	mov	r2, r3
 800eda4:	2100      	movs	r1, #0
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f001 f84a 	bl	800fe40 <xQueueReceiveFromISR>
 800edac:	4603      	mov	r3, r0
 800edae:	2b01      	cmp	r3, #1
 800edb0:	d001      	beq.n	800edb6 <osMutexWait+0x62>
      return osErrorOS;
 800edb2:	23ff      	movs	r3, #255	; 0xff
 800edb4:	e015      	b.n	800ede2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d011      	beq.n	800ede0 <osMutexWait+0x8c>
 800edbc:	4b0b      	ldr	r3, [pc, #44]	; (800edec <osMutexWait+0x98>)
 800edbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edc2:	601a      	str	r2, [r3, #0]
 800edc4:	f3bf 8f4f 	dsb	sy
 800edc8:	f3bf 8f6f 	isb	sy
 800edcc:	e008      	b.n	800ede0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800edce:	68f9      	ldr	r1, [r7, #12]
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f000 ff29 	bl	800fc28 <xQueueSemaphoreTake>
 800edd6:	4603      	mov	r3, r0
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d001      	beq.n	800ede0 <osMutexWait+0x8c>
    return osErrorOS;
 800eddc:	23ff      	movs	r3, #255	; 0xff
 800edde:	e000      	b.n	800ede2 <osMutexWait+0x8e>
  }
  
  return osOK;
 800ede0:	2300      	movs	r3, #0
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3710      	adds	r7, #16
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	bf00      	nop
 800edec:	e000ed04 	.word	0xe000ed04

0800edf0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800edf8:	2300      	movs	r3, #0
 800edfa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800edfc:	2300      	movs	r3, #0
 800edfe:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800ee00:	f7ff fda8 	bl	800e954 <inHandlerMode>
 800ee04:	4603      	mov	r3, r0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d016      	beq.n	800ee38 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ee0a:	f107 0308 	add.w	r3, r7, #8
 800ee0e:	4619      	mov	r1, r3
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f000 fd9c 	bl	800f94e <xQueueGiveFromISR>
 800ee16:	4603      	mov	r3, r0
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d001      	beq.n	800ee20 <osMutexRelease+0x30>
      return osErrorOS;
 800ee1c:	23ff      	movs	r3, #255	; 0xff
 800ee1e:	e017      	b.n	800ee50 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d013      	beq.n	800ee4e <osMutexRelease+0x5e>
 800ee26:	4b0c      	ldr	r3, [pc, #48]	; (800ee58 <osMutexRelease+0x68>)
 800ee28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee2c:	601a      	str	r2, [r3, #0]
 800ee2e:	f3bf 8f4f 	dsb	sy
 800ee32:	f3bf 8f6f 	isb	sy
 800ee36:	e00a      	b.n	800ee4e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800ee38:	2300      	movs	r3, #0
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	2100      	movs	r1, #0
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 fbec 	bl	800f61c <xQueueGenericSend>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b01      	cmp	r3, #1
 800ee48:	d001      	beq.n	800ee4e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800ee4a:	23ff      	movs	r3, #255	; 0xff
 800ee4c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3710      	adds	r7, #16
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}
 800ee58:	e000ed04 	.word	0xe000ed04

0800ee5c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b086      	sub	sp, #24
 800ee60:	af02      	add	r7, sp, #8
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d00f      	beq.n	800ee8e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	d10a      	bne.n	800ee8a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	685b      	ldr	r3, [r3, #4]
 800ee78:	2203      	movs	r2, #3
 800ee7a:	9200      	str	r2, [sp, #0]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	2100      	movs	r1, #0
 800ee80:	2001      	movs	r0, #1
 800ee82:	f000 faad 	bl	800f3e0 <xQueueGenericCreateStatic>
 800ee86:	4603      	mov	r3, r0
 800ee88:	e016      	b.n	800eeb8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	e014      	b.n	800eeb8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	d110      	bne.n	800eeb6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ee94:	2203      	movs	r2, #3
 800ee96:	2100      	movs	r1, #0
 800ee98:	2001      	movs	r0, #1
 800ee9a:	f000 fb19 	bl	800f4d0 <xQueueGenericCreate>
 800ee9e:	60f8      	str	r0, [r7, #12]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d005      	beq.n	800eeb2 <osSemaphoreCreate+0x56>
 800eea6:	2300      	movs	r3, #0
 800eea8:	2200      	movs	r2, #0
 800eeaa:	2100      	movs	r1, #0
 800eeac:	68f8      	ldr	r0, [r7, #12]
 800eeae:	f000 fbb5 	bl	800f61c <xQueueGenericSend>
      return sema;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	e000      	b.n	800eeb8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800eeb6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3710      	adds	r7, #16
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b084      	sub	sp, #16
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800eeca:	2300      	movs	r3, #0
 800eecc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d101      	bne.n	800eed8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800eed4:	2380      	movs	r3, #128	; 0x80
 800eed6:	e03a      	b.n	800ef4e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800eed8:	2300      	movs	r3, #0
 800eeda:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eee2:	d103      	bne.n	800eeec <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800eee4:	f04f 33ff 	mov.w	r3, #4294967295
 800eee8:	60fb      	str	r3, [r7, #12]
 800eeea:	e009      	b.n	800ef00 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d006      	beq.n	800ef00 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d101      	bne.n	800ef00 <osSemaphoreWait+0x40>
      ticks = 1;
 800eefc:	2301      	movs	r3, #1
 800eefe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ef00:	f7ff fd28 	bl	800e954 <inHandlerMode>
 800ef04:	4603      	mov	r3, r0
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d017      	beq.n	800ef3a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ef0a:	f107 0308 	add.w	r3, r7, #8
 800ef0e:	461a      	mov	r2, r3
 800ef10:	2100      	movs	r1, #0
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f000 ff94 	bl	800fe40 <xQueueReceiveFromISR>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d001      	beq.n	800ef22 <osSemaphoreWait+0x62>
      return osErrorOS;
 800ef1e:	23ff      	movs	r3, #255	; 0xff
 800ef20:	e015      	b.n	800ef4e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d011      	beq.n	800ef4c <osSemaphoreWait+0x8c>
 800ef28:	4b0b      	ldr	r3, [pc, #44]	; (800ef58 <osSemaphoreWait+0x98>)
 800ef2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef2e:	601a      	str	r2, [r3, #0]
 800ef30:	f3bf 8f4f 	dsb	sy
 800ef34:	f3bf 8f6f 	isb	sy
 800ef38:	e008      	b.n	800ef4c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ef3a:	68f9      	ldr	r1, [r7, #12]
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f000 fe73 	bl	800fc28 <xQueueSemaphoreTake>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	d001      	beq.n	800ef4c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ef48:	23ff      	movs	r3, #255	; 0xff
 800ef4a:	e000      	b.n	800ef4e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ef4c:	2300      	movs	r3, #0
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	e000ed04 	.word	0xe000ed04

0800ef5c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ef64:	2300      	movs	r3, #0
 800ef66:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ef6c:	f7ff fcf2 	bl	800e954 <inHandlerMode>
 800ef70:	4603      	mov	r3, r0
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d016      	beq.n	800efa4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ef76:	f107 0308 	add.w	r3, r7, #8
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f000 fce6 	bl	800f94e <xQueueGiveFromISR>
 800ef82:	4603      	mov	r3, r0
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d001      	beq.n	800ef8c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ef88:	23ff      	movs	r3, #255	; 0xff
 800ef8a:	e017      	b.n	800efbc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d013      	beq.n	800efba <osSemaphoreRelease+0x5e>
 800ef92:	4b0c      	ldr	r3, [pc, #48]	; (800efc4 <osSemaphoreRelease+0x68>)
 800ef94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef98:	601a      	str	r2, [r3, #0]
 800ef9a:	f3bf 8f4f 	dsb	sy
 800ef9e:	f3bf 8f6f 	isb	sy
 800efa2:	e00a      	b.n	800efba <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800efa4:	2300      	movs	r3, #0
 800efa6:	2200      	movs	r2, #0
 800efa8:	2100      	movs	r1, #0
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 fb36 	bl	800f61c <xQueueGenericSend>
 800efb0:	4603      	mov	r3, r0
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d001      	beq.n	800efba <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800efb6:	23ff      	movs	r3, #255	; 0xff
 800efb8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800efba:	68fb      	ldr	r3, [r7, #12]
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3710      	adds	r7, #16
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	e000ed04 	.word	0xe000ed04

0800efc8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800efd0:	f7ff fcc0 	bl	800e954 <inHandlerMode>
 800efd4:	4603      	mov	r3, r0
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d001      	beq.n	800efde <osSemaphoreDelete+0x16>
    return osErrorISR;
 800efda:	2382      	movs	r3, #130	; 0x82
 800efdc:	e003      	b.n	800efe6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f000 ffae 	bl	800ff40 <vQueueDelete>

  return osOK; 
 800efe4:	2300      	movs	r3, #0
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3708      	adds	r7, #8
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}

0800efee <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800efee:	b590      	push	{r4, r7, lr}
 800eff0:	b085      	sub	sp, #20
 800eff2:	af02      	add	r7, sp, #8
 800eff4:	6078      	str	r0, [r7, #4]
 800eff6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	689b      	ldr	r3, [r3, #8]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d011      	beq.n	800f024 <osMessageCreate+0x36>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	68db      	ldr	r3, [r3, #12]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d00d      	beq.n	800f024 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6818      	ldr	r0, [r3, #0]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6859      	ldr	r1, [r3, #4]
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	689a      	ldr	r2, [r3, #8]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	68db      	ldr	r3, [r3, #12]
 800f018:	2400      	movs	r4, #0
 800f01a:	9400      	str	r4, [sp, #0]
 800f01c:	f000 f9e0 	bl	800f3e0 <xQueueGenericCreateStatic>
 800f020:	4603      	mov	r3, r0
 800f022:	e008      	b.n	800f036 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6818      	ldr	r0, [r3, #0]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	2200      	movs	r2, #0
 800f02e:	4619      	mov	r1, r3
 800f030:	f000 fa4e 	bl	800f4d0 <xQueueGenericCreate>
 800f034:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800f036:	4618      	mov	r0, r3
 800f038:	370c      	adds	r7, #12
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd90      	pop	{r4, r7, pc}
	...

0800f040 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b086      	sub	sp, #24
 800f044:	af00      	add	r7, sp, #0
 800f046:	60f8      	str	r0, [r7, #12]
 800f048:	60b9      	str	r1, [r7, #8]
 800f04a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800f04c:	2300      	movs	r3, #0
 800f04e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d101      	bne.n	800f05e <osMessagePut+0x1e>
    ticks = 1;
 800f05a:	2301      	movs	r3, #1
 800f05c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800f05e:	f7ff fc79 	bl	800e954 <inHandlerMode>
 800f062:	4603      	mov	r3, r0
 800f064:	2b00      	cmp	r3, #0
 800f066:	d018      	beq.n	800f09a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800f068:	f107 0210 	add.w	r2, r7, #16
 800f06c:	f107 0108 	add.w	r1, r7, #8
 800f070:	2300      	movs	r3, #0
 800f072:	68f8      	ldr	r0, [r7, #12]
 800f074:	f000 fbd0 	bl	800f818 <xQueueGenericSendFromISR>
 800f078:	4603      	mov	r3, r0
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d001      	beq.n	800f082 <osMessagePut+0x42>
      return osErrorOS;
 800f07e:	23ff      	movs	r3, #255	; 0xff
 800f080:	e018      	b.n	800f0b4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d014      	beq.n	800f0b2 <osMessagePut+0x72>
 800f088:	4b0c      	ldr	r3, [pc, #48]	; (800f0bc <osMessagePut+0x7c>)
 800f08a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f08e:	601a      	str	r2, [r3, #0]
 800f090:	f3bf 8f4f 	dsb	sy
 800f094:	f3bf 8f6f 	isb	sy
 800f098:	e00b      	b.n	800f0b2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800f09a:	f107 0108 	add.w	r1, r7, #8
 800f09e:	2300      	movs	r3, #0
 800f0a0:	697a      	ldr	r2, [r7, #20]
 800f0a2:	68f8      	ldr	r0, [r7, #12]
 800f0a4:	f000 faba 	bl	800f61c <xQueueGenericSend>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d001      	beq.n	800f0b2 <osMessagePut+0x72>
      return osErrorOS;
 800f0ae:	23ff      	movs	r3, #255	; 0xff
 800f0b0:	e000      	b.n	800f0b4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800f0b2:	2300      	movs	r3, #0
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3718      	adds	r7, #24
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}
 800f0bc:	e000ed04 	.word	0xe000ed04

0800f0c0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800f0c0:	b590      	push	{r4, r7, lr}
 800f0c2:	b08b      	sub	sp, #44	; 0x2c
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	60b9      	str	r1, [r7, #8]
 800f0ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d10a      	bne.n	800f0f0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800f0da:	2380      	movs	r3, #128	; 0x80
 800f0dc:	617b      	str	r3, [r7, #20]
    return event;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	461c      	mov	r4, r3
 800f0e2:	f107 0314 	add.w	r3, r7, #20
 800f0e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f0ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f0ee:	e054      	b.n	800f19a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0fe:	d103      	bne.n	800f108 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800f100:	f04f 33ff 	mov.w	r3, #4294967295
 800f104:	627b      	str	r3, [r7, #36]	; 0x24
 800f106:	e009      	b.n	800f11c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d006      	beq.n	800f11c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800f112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f114:	2b00      	cmp	r3, #0
 800f116:	d101      	bne.n	800f11c <osMessageGet+0x5c>
      ticks = 1;
 800f118:	2301      	movs	r3, #1
 800f11a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800f11c:	f7ff fc1a 	bl	800e954 <inHandlerMode>
 800f120:	4603      	mov	r3, r0
 800f122:	2b00      	cmp	r3, #0
 800f124:	d01c      	beq.n	800f160 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800f126:	f107 0220 	add.w	r2, r7, #32
 800f12a:	f107 0314 	add.w	r3, r7, #20
 800f12e:	3304      	adds	r3, #4
 800f130:	4619      	mov	r1, r3
 800f132:	68b8      	ldr	r0, [r7, #8]
 800f134:	f000 fe84 	bl	800fe40 <xQueueReceiveFromISR>
 800f138:	4603      	mov	r3, r0
 800f13a:	2b01      	cmp	r3, #1
 800f13c:	d102      	bne.n	800f144 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800f13e:	2310      	movs	r3, #16
 800f140:	617b      	str	r3, [r7, #20]
 800f142:	e001      	b.n	800f148 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800f144:	2300      	movs	r3, #0
 800f146:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f148:	6a3b      	ldr	r3, [r7, #32]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d01d      	beq.n	800f18a <osMessageGet+0xca>
 800f14e:	4b15      	ldr	r3, [pc, #84]	; (800f1a4 <osMessageGet+0xe4>)
 800f150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f154:	601a      	str	r2, [r3, #0]
 800f156:	f3bf 8f4f 	dsb	sy
 800f15a:	f3bf 8f6f 	isb	sy
 800f15e:	e014      	b.n	800f18a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800f160:	f107 0314 	add.w	r3, r7, #20
 800f164:	3304      	adds	r3, #4
 800f166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f168:	4619      	mov	r1, r3
 800f16a:	68b8      	ldr	r0, [r7, #8]
 800f16c:	f000 fc7c 	bl	800fa68 <xQueueReceive>
 800f170:	4603      	mov	r3, r0
 800f172:	2b01      	cmp	r3, #1
 800f174:	d102      	bne.n	800f17c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800f176:	2310      	movs	r3, #16
 800f178:	617b      	str	r3, [r7, #20]
 800f17a:	e006      	b.n	800f18a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800f17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d101      	bne.n	800f186 <osMessageGet+0xc6>
 800f182:	2300      	movs	r3, #0
 800f184:	e000      	b.n	800f188 <osMessageGet+0xc8>
 800f186:	2340      	movs	r3, #64	; 0x40
 800f188:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	461c      	mov	r4, r3
 800f18e:	f107 0314 	add.w	r3, r7, #20
 800f192:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f196:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800f19a:	68f8      	ldr	r0, [r7, #12]
 800f19c:	372c      	adds	r7, #44	; 0x2c
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd90      	pop	{r4, r7, pc}
 800f1a2:	bf00      	nop
 800f1a4:	e000ed04 	.word	0xe000ed04

0800f1a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f103 0208 	add.w	r2, r3, #8
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f1c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f103 0208 	add.w	r2, r3, #8
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f103 0208 	add.w	r2, r3, #8
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f1dc:	bf00      	nop
 800f1de:	370c      	adds	r7, #12
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr

0800f1e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b083      	sub	sp, #12
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f1f6:	bf00      	nop
 800f1f8:	370c      	adds	r7, #12
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f200:	4770      	bx	lr

0800f202 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f202:	b480      	push	{r7}
 800f204:	b085      	sub	sp, #20
 800f206:	af00      	add	r7, sp, #0
 800f208:	6078      	str	r0, [r7, #4]
 800f20a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	68fa      	ldr	r2, [r7, #12]
 800f216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	689a      	ldr	r2, [r3, #8]
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	689b      	ldr	r3, [r3, #8]
 800f224:	683a      	ldr	r2, [r7, #0]
 800f226:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	683a      	ldr	r2, [r7, #0]
 800f22c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	687a      	ldr	r2, [r7, #4]
 800f232:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	1c5a      	adds	r2, r3, #1
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	601a      	str	r2, [r3, #0]
}
 800f23e:	bf00      	nop
 800f240:	3714      	adds	r7, #20
 800f242:	46bd      	mov	sp, r7
 800f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f248:	4770      	bx	lr

0800f24a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f24a:	b480      	push	{r7}
 800f24c:	b085      	sub	sp, #20
 800f24e:	af00      	add	r7, sp, #0
 800f250:	6078      	str	r0, [r7, #4]
 800f252:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f260:	d103      	bne.n	800f26a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	691b      	ldr	r3, [r3, #16]
 800f266:	60fb      	str	r3, [r7, #12]
 800f268:	e00c      	b.n	800f284 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	3308      	adds	r3, #8
 800f26e:	60fb      	str	r3, [r7, #12]
 800f270:	e002      	b.n	800f278 <vListInsert+0x2e>
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	685b      	ldr	r3, [r3, #4]
 800f276:	60fb      	str	r3, [r7, #12]
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	685b      	ldr	r3, [r3, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	68ba      	ldr	r2, [r7, #8]
 800f280:	429a      	cmp	r2, r3
 800f282:	d2f6      	bcs.n	800f272 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	685a      	ldr	r2, [r3, #4]
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	683a      	ldr	r2, [r7, #0]
 800f292:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	683a      	ldr	r2, [r7, #0]
 800f29e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	687a      	ldr	r2, [r7, #4]
 800f2a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	1c5a      	adds	r2, r3, #1
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	601a      	str	r2, [r3, #0]
}
 800f2b0:	bf00      	nop
 800f2b2:	3714      	adds	r7, #20
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr

0800f2bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b085      	sub	sp, #20
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	691b      	ldr	r3, [r3, #16]
 800f2c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	685b      	ldr	r3, [r3, #4]
 800f2ce:	687a      	ldr	r2, [r7, #4]
 800f2d0:	6892      	ldr	r2, [r2, #8]
 800f2d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	689b      	ldr	r3, [r3, #8]
 800f2d8:	687a      	ldr	r2, [r7, #4]
 800f2da:	6852      	ldr	r2, [r2, #4]
 800f2dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	687a      	ldr	r2, [r7, #4]
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d103      	bne.n	800f2f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	689a      	ldr	r2, [r3, #8]
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	1e5a      	subs	r2, r3, #1
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	681b      	ldr	r3, [r3, #0]
}
 800f304:	4618      	mov	r0, r3
 800f306:	3714      	adds	r7, #20
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b084      	sub	sp, #16
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d10a      	bne.n	800f33a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f328:	f383 8811 	msr	BASEPRI, r3
 800f32c:	f3bf 8f6f 	isb	sy
 800f330:	f3bf 8f4f 	dsb	sy
 800f334:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f336:	bf00      	nop
 800f338:	e7fe      	b.n	800f338 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f33a:	f002 fef3 	bl	8012124 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	681a      	ldr	r2, [r3, #0]
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f346:	68f9      	ldr	r1, [r7, #12]
 800f348:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f34a:	fb01 f303 	mul.w	r3, r1, r3
 800f34e:	441a      	add	r2, r3
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2200      	movs	r2, #0
 800f358:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	681a      	ldr	r2, [r3, #0]
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	681a      	ldr	r2, [r3, #0]
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f36a:	3b01      	subs	r3, #1
 800f36c:	68f9      	ldr	r1, [r7, #12]
 800f36e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f370:	fb01 f303 	mul.w	r3, r1, r3
 800f374:	441a      	add	r2, r3
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	22ff      	movs	r2, #255	; 0xff
 800f37e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	22ff      	movs	r2, #255	; 0xff
 800f386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d114      	bne.n	800f3ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	691b      	ldr	r3, [r3, #16]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d01a      	beq.n	800f3ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	3310      	adds	r3, #16
 800f39c:	4618      	mov	r0, r3
 800f39e:	f001 fc01 	bl	8010ba4 <xTaskRemoveFromEventList>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d012      	beq.n	800f3ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f3a8:	4b0c      	ldr	r3, [pc, #48]	; (800f3dc <xQueueGenericReset+0xcc>)
 800f3aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3ae:	601a      	str	r2, [r3, #0]
 800f3b0:	f3bf 8f4f 	dsb	sy
 800f3b4:	f3bf 8f6f 	isb	sy
 800f3b8:	e009      	b.n	800f3ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	3310      	adds	r3, #16
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7ff fef2 	bl	800f1a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	3324      	adds	r3, #36	; 0x24
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f7ff feed 	bl	800f1a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f3ce:	f002 fed9 	bl	8012184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f3d2:	2301      	movs	r3, #1
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3710      	adds	r7, #16
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}
 800f3dc:	e000ed04 	.word	0xe000ed04

0800f3e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b08e      	sub	sp, #56	; 0x38
 800f3e4:	af02      	add	r7, sp, #8
 800f3e6:	60f8      	str	r0, [r7, #12]
 800f3e8:	60b9      	str	r1, [r7, #8]
 800f3ea:	607a      	str	r2, [r7, #4]
 800f3ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d10a      	bne.n	800f40a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f8:	f383 8811 	msr	BASEPRI, r3
 800f3fc:	f3bf 8f6f 	isb	sy
 800f400:	f3bf 8f4f 	dsb	sy
 800f404:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f406:	bf00      	nop
 800f408:	e7fe      	b.n	800f408 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d10a      	bne.n	800f426 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f414:	f383 8811 	msr	BASEPRI, r3
 800f418:	f3bf 8f6f 	isb	sy
 800f41c:	f3bf 8f4f 	dsb	sy
 800f420:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f422:	bf00      	nop
 800f424:	e7fe      	b.n	800f424 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d002      	beq.n	800f432 <xQueueGenericCreateStatic+0x52>
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d001      	beq.n	800f436 <xQueueGenericCreateStatic+0x56>
 800f432:	2301      	movs	r3, #1
 800f434:	e000      	b.n	800f438 <xQueueGenericCreateStatic+0x58>
 800f436:	2300      	movs	r3, #0
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d10a      	bne.n	800f452 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f440:	f383 8811 	msr	BASEPRI, r3
 800f444:	f3bf 8f6f 	isb	sy
 800f448:	f3bf 8f4f 	dsb	sy
 800f44c:	623b      	str	r3, [r7, #32]
}
 800f44e:	bf00      	nop
 800f450:	e7fe      	b.n	800f450 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d102      	bne.n	800f45e <xQueueGenericCreateStatic+0x7e>
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d101      	bne.n	800f462 <xQueueGenericCreateStatic+0x82>
 800f45e:	2301      	movs	r3, #1
 800f460:	e000      	b.n	800f464 <xQueueGenericCreateStatic+0x84>
 800f462:	2300      	movs	r3, #0
 800f464:	2b00      	cmp	r3, #0
 800f466:	d10a      	bne.n	800f47e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f46c:	f383 8811 	msr	BASEPRI, r3
 800f470:	f3bf 8f6f 	isb	sy
 800f474:	f3bf 8f4f 	dsb	sy
 800f478:	61fb      	str	r3, [r7, #28]
}
 800f47a:	bf00      	nop
 800f47c:	e7fe      	b.n	800f47c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f47e:	2348      	movs	r3, #72	; 0x48
 800f480:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	2b48      	cmp	r3, #72	; 0x48
 800f486:	d00a      	beq.n	800f49e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f48c:	f383 8811 	msr	BASEPRI, r3
 800f490:	f3bf 8f6f 	isb	sy
 800f494:	f3bf 8f4f 	dsb	sy
 800f498:	61bb      	str	r3, [r7, #24]
}
 800f49a:	bf00      	nop
 800f49c:	e7fe      	b.n	800f49c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f49e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d00d      	beq.n	800f4c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f4b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b8:	9300      	str	r3, [sp, #0]
 800f4ba:	4613      	mov	r3, r2
 800f4bc:	687a      	ldr	r2, [r7, #4]
 800f4be:	68b9      	ldr	r1, [r7, #8]
 800f4c0:	68f8      	ldr	r0, [r7, #12]
 800f4c2:	f000 f83f 	bl	800f544 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3730      	adds	r7, #48	; 0x30
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b08a      	sub	sp, #40	; 0x28
 800f4d4:	af02      	add	r7, sp, #8
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	4613      	mov	r3, r2
 800f4dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d10a      	bne.n	800f4fa <xQueueGenericCreate+0x2a>
	__asm volatile
 800f4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4e8:	f383 8811 	msr	BASEPRI, r3
 800f4ec:	f3bf 8f6f 	isb	sy
 800f4f0:	f3bf 8f4f 	dsb	sy
 800f4f4:	613b      	str	r3, [r7, #16]
}
 800f4f6:	bf00      	nop
 800f4f8:	e7fe      	b.n	800f4f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	68ba      	ldr	r2, [r7, #8]
 800f4fe:	fb02 f303 	mul.w	r3, r2, r3
 800f502:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	3348      	adds	r3, #72	; 0x48
 800f508:	4618      	mov	r0, r3
 800f50a:	f002 ff2d 	bl	8012368 <pvPortMalloc>
 800f50e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f510:	69bb      	ldr	r3, [r7, #24]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d011      	beq.n	800f53a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f516:	69bb      	ldr	r3, [r7, #24]
 800f518:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	3348      	adds	r3, #72	; 0x48
 800f51e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f520:	69bb      	ldr	r3, [r7, #24]
 800f522:	2200      	movs	r2, #0
 800f524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f528:	79fa      	ldrb	r2, [r7, #7]
 800f52a:	69bb      	ldr	r3, [r7, #24]
 800f52c:	9300      	str	r3, [sp, #0]
 800f52e:	4613      	mov	r3, r2
 800f530:	697a      	ldr	r2, [r7, #20]
 800f532:	68b9      	ldr	r1, [r7, #8]
 800f534:	68f8      	ldr	r0, [r7, #12]
 800f536:	f000 f805 	bl	800f544 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f53a:	69bb      	ldr	r3, [r7, #24]
	}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3720      	adds	r7, #32
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b084      	sub	sp, #16
 800f548:	af00      	add	r7, sp, #0
 800f54a:	60f8      	str	r0, [r7, #12]
 800f54c:	60b9      	str	r1, [r7, #8]
 800f54e:	607a      	str	r2, [r7, #4]
 800f550:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d103      	bne.n	800f560 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f558:	69bb      	ldr	r3, [r7, #24]
 800f55a:	69ba      	ldr	r2, [r7, #24]
 800f55c:	601a      	str	r2, [r3, #0]
 800f55e:	e002      	b.n	800f566 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f560:	69bb      	ldr	r3, [r7, #24]
 800f562:	687a      	ldr	r2, [r7, #4]
 800f564:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f566:	69bb      	ldr	r3, [r7, #24]
 800f568:	68fa      	ldr	r2, [r7, #12]
 800f56a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f56c:	69bb      	ldr	r3, [r7, #24]
 800f56e:	68ba      	ldr	r2, [r7, #8]
 800f570:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f572:	2101      	movs	r1, #1
 800f574:	69b8      	ldr	r0, [r7, #24]
 800f576:	f7ff fecb 	bl	800f310 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f57a:	bf00      	nop
 800f57c:	3710      	adds	r7, #16
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}

0800f582 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f582:	b580      	push	{r7, lr}
 800f584:	b082      	sub	sp, #8
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d00e      	beq.n	800f5ae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2200      	movs	r2, #0
 800f594:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2200      	movs	r2, #0
 800f59a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	2100      	movs	r1, #0
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f000 f837 	bl	800f61c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f5ae:	bf00      	nop
 800f5b0:	3708      	adds	r7, #8
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}

0800f5b6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f5b6:	b580      	push	{r7, lr}
 800f5b8:	b086      	sub	sp, #24
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	4603      	mov	r3, r0
 800f5be:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	617b      	str	r3, [r7, #20]
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f5c8:	79fb      	ldrb	r3, [r7, #7]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	6939      	ldr	r1, [r7, #16]
 800f5ce:	6978      	ldr	r0, [r7, #20]
 800f5d0:	f7ff ff7e 	bl	800f4d0 <xQueueGenericCreate>
 800f5d4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f5d6:	68f8      	ldr	r0, [r7, #12]
 800f5d8:	f7ff ffd3 	bl	800f582 <prvInitialiseMutex>

		return xNewQueue;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
	}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3718      	adds	r7, #24
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}

0800f5e6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f5e6:	b580      	push	{r7, lr}
 800f5e8:	b088      	sub	sp, #32
 800f5ea:	af02      	add	r7, sp, #8
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	6039      	str	r1, [r7, #0]
 800f5f0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	617b      	str	r3, [r7, #20]
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f5fa:	79fb      	ldrb	r3, [r7, #7]
 800f5fc:	9300      	str	r3, [sp, #0]
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	2200      	movs	r2, #0
 800f602:	6939      	ldr	r1, [r7, #16]
 800f604:	6978      	ldr	r0, [r7, #20]
 800f606:	f7ff feeb 	bl	800f3e0 <xQueueGenericCreateStatic>
 800f60a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f60c:	68f8      	ldr	r0, [r7, #12]
 800f60e:	f7ff ffb8 	bl	800f582 <prvInitialiseMutex>

		return xNewQueue;
 800f612:	68fb      	ldr	r3, [r7, #12]
	}
 800f614:	4618      	mov	r0, r3
 800f616:	3718      	adds	r7, #24
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b08e      	sub	sp, #56	; 0x38
 800f620:	af00      	add	r7, sp, #0
 800f622:	60f8      	str	r0, [r7, #12]
 800f624:	60b9      	str	r1, [r7, #8]
 800f626:	607a      	str	r2, [r7, #4]
 800f628:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f62a:	2300      	movs	r3, #0
 800f62c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f634:	2b00      	cmp	r3, #0
 800f636:	d10a      	bne.n	800f64e <xQueueGenericSend+0x32>
	__asm volatile
 800f638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f63c:	f383 8811 	msr	BASEPRI, r3
 800f640:	f3bf 8f6f 	isb	sy
 800f644:	f3bf 8f4f 	dsb	sy
 800f648:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f64a:	bf00      	nop
 800f64c:	e7fe      	b.n	800f64c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d103      	bne.n	800f65c <xQueueGenericSend+0x40>
 800f654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d101      	bne.n	800f660 <xQueueGenericSend+0x44>
 800f65c:	2301      	movs	r3, #1
 800f65e:	e000      	b.n	800f662 <xQueueGenericSend+0x46>
 800f660:	2300      	movs	r3, #0
 800f662:	2b00      	cmp	r3, #0
 800f664:	d10a      	bne.n	800f67c <xQueueGenericSend+0x60>
	__asm volatile
 800f666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f66a:	f383 8811 	msr	BASEPRI, r3
 800f66e:	f3bf 8f6f 	isb	sy
 800f672:	f3bf 8f4f 	dsb	sy
 800f676:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f678:	bf00      	nop
 800f67a:	e7fe      	b.n	800f67a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	2b02      	cmp	r3, #2
 800f680:	d103      	bne.n	800f68a <xQueueGenericSend+0x6e>
 800f682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f686:	2b01      	cmp	r3, #1
 800f688:	d101      	bne.n	800f68e <xQueueGenericSend+0x72>
 800f68a:	2301      	movs	r3, #1
 800f68c:	e000      	b.n	800f690 <xQueueGenericSend+0x74>
 800f68e:	2300      	movs	r3, #0
 800f690:	2b00      	cmp	r3, #0
 800f692:	d10a      	bne.n	800f6aa <xQueueGenericSend+0x8e>
	__asm volatile
 800f694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f698:	f383 8811 	msr	BASEPRI, r3
 800f69c:	f3bf 8f6f 	isb	sy
 800f6a0:	f3bf 8f4f 	dsb	sy
 800f6a4:	623b      	str	r3, [r7, #32]
}
 800f6a6:	bf00      	nop
 800f6a8:	e7fe      	b.n	800f6a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6aa:	f001 fc37 	bl	8010f1c <xTaskGetSchedulerState>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d102      	bne.n	800f6ba <xQueueGenericSend+0x9e>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d101      	bne.n	800f6be <xQueueGenericSend+0xa2>
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	e000      	b.n	800f6c0 <xQueueGenericSend+0xa4>
 800f6be:	2300      	movs	r3, #0
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d10a      	bne.n	800f6da <xQueueGenericSend+0xbe>
	__asm volatile
 800f6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6c8:	f383 8811 	msr	BASEPRI, r3
 800f6cc:	f3bf 8f6f 	isb	sy
 800f6d0:	f3bf 8f4f 	dsb	sy
 800f6d4:	61fb      	str	r3, [r7, #28]
}
 800f6d6:	bf00      	nop
 800f6d8:	e7fe      	b.n	800f6d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f6da:	f002 fd23 	bl	8012124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	d302      	bcc.n	800f6f0 <xQueueGenericSend+0xd4>
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	2b02      	cmp	r3, #2
 800f6ee:	d129      	bne.n	800f744 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f6f0:	683a      	ldr	r2, [r7, #0]
 800f6f2:	68b9      	ldr	r1, [r7, #8]
 800f6f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6f6:	f000 fc5e 	bl	800ffb6 <prvCopyDataToQueue>
 800f6fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f700:	2b00      	cmp	r3, #0
 800f702:	d010      	beq.n	800f726 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f706:	3324      	adds	r3, #36	; 0x24
 800f708:	4618      	mov	r0, r3
 800f70a:	f001 fa4b 	bl	8010ba4 <xTaskRemoveFromEventList>
 800f70e:	4603      	mov	r3, r0
 800f710:	2b00      	cmp	r3, #0
 800f712:	d013      	beq.n	800f73c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f714:	4b3f      	ldr	r3, [pc, #252]	; (800f814 <xQueueGenericSend+0x1f8>)
 800f716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f71a:	601a      	str	r2, [r3, #0]
 800f71c:	f3bf 8f4f 	dsb	sy
 800f720:	f3bf 8f6f 	isb	sy
 800f724:	e00a      	b.n	800f73c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d007      	beq.n	800f73c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f72c:	4b39      	ldr	r3, [pc, #228]	; (800f814 <xQueueGenericSend+0x1f8>)
 800f72e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f732:	601a      	str	r2, [r3, #0]
 800f734:	f3bf 8f4f 	dsb	sy
 800f738:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f73c:	f002 fd22 	bl	8012184 <vPortExitCritical>
				return pdPASS;
 800f740:	2301      	movs	r3, #1
 800f742:	e063      	b.n	800f80c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d103      	bne.n	800f752 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f74a:	f002 fd1b 	bl	8012184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f74e:	2300      	movs	r3, #0
 800f750:	e05c      	b.n	800f80c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f754:	2b00      	cmp	r3, #0
 800f756:	d106      	bne.n	800f766 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f758:	f107 0314 	add.w	r3, r7, #20
 800f75c:	4618      	mov	r0, r3
 800f75e:	f001 fa83 	bl	8010c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f762:	2301      	movs	r3, #1
 800f764:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f766:	f002 fd0d 	bl	8012184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f76a:	f000 ffeb 	bl	8010744 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f76e:	f002 fcd9 	bl	8012124 <vPortEnterCritical>
 800f772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f778:	b25b      	sxtb	r3, r3
 800f77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f77e:	d103      	bne.n	800f788 <xQueueGenericSend+0x16c>
 800f780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f782:	2200      	movs	r2, #0
 800f784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f78a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f78e:	b25b      	sxtb	r3, r3
 800f790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f794:	d103      	bne.n	800f79e <xQueueGenericSend+0x182>
 800f796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f798:	2200      	movs	r2, #0
 800f79a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f79e:	f002 fcf1 	bl	8012184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f7a2:	1d3a      	adds	r2, r7, #4
 800f7a4:	f107 0314 	add.w	r3, r7, #20
 800f7a8:	4611      	mov	r1, r2
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f001 fa72 	bl	8010c94 <xTaskCheckForTimeOut>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d124      	bne.n	800f800 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f7b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7b8:	f000 fcf5 	bl	80101a6 <prvIsQueueFull>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d018      	beq.n	800f7f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c4:	3310      	adds	r3, #16
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	4611      	mov	r1, r2
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f001 f99a 	bl	8010b04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f7d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7d2:	f000 fc80 	bl	80100d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f7d6:	f000 ffc3 	bl	8010760 <xTaskResumeAll>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	f47f af7c 	bne.w	800f6da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f7e2:	4b0c      	ldr	r3, [pc, #48]	; (800f814 <xQueueGenericSend+0x1f8>)
 800f7e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7e8:	601a      	str	r2, [r3, #0]
 800f7ea:	f3bf 8f4f 	dsb	sy
 800f7ee:	f3bf 8f6f 	isb	sy
 800f7f2:	e772      	b.n	800f6da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f7f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7f6:	f000 fc6e 	bl	80100d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f7fa:	f000 ffb1 	bl	8010760 <xTaskResumeAll>
 800f7fe:	e76c      	b.n	800f6da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f802:	f000 fc68 	bl	80100d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f806:	f000 ffab 	bl	8010760 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f80a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3738      	adds	r7, #56	; 0x38
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}
 800f814:	e000ed04 	.word	0xe000ed04

0800f818 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b090      	sub	sp, #64	; 0x40
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	607a      	str	r2, [r7, #4]
 800f824:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d10a      	bne.n	800f846 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f834:	f383 8811 	msr	BASEPRI, r3
 800f838:	f3bf 8f6f 	isb	sy
 800f83c:	f3bf 8f4f 	dsb	sy
 800f840:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f842:	bf00      	nop
 800f844:	e7fe      	b.n	800f844 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d103      	bne.n	800f854 <xQueueGenericSendFromISR+0x3c>
 800f84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f850:	2b00      	cmp	r3, #0
 800f852:	d101      	bne.n	800f858 <xQueueGenericSendFromISR+0x40>
 800f854:	2301      	movs	r3, #1
 800f856:	e000      	b.n	800f85a <xQueueGenericSendFromISR+0x42>
 800f858:	2300      	movs	r3, #0
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d10a      	bne.n	800f874 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f862:	f383 8811 	msr	BASEPRI, r3
 800f866:	f3bf 8f6f 	isb	sy
 800f86a:	f3bf 8f4f 	dsb	sy
 800f86e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f870:	bf00      	nop
 800f872:	e7fe      	b.n	800f872 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	2b02      	cmp	r3, #2
 800f878:	d103      	bne.n	800f882 <xQueueGenericSendFromISR+0x6a>
 800f87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d101      	bne.n	800f886 <xQueueGenericSendFromISR+0x6e>
 800f882:	2301      	movs	r3, #1
 800f884:	e000      	b.n	800f888 <xQueueGenericSendFromISR+0x70>
 800f886:	2300      	movs	r3, #0
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d10a      	bne.n	800f8a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f890:	f383 8811 	msr	BASEPRI, r3
 800f894:	f3bf 8f6f 	isb	sy
 800f898:	f3bf 8f4f 	dsb	sy
 800f89c:	623b      	str	r3, [r7, #32]
}
 800f89e:	bf00      	nop
 800f8a0:	e7fe      	b.n	800f8a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f8a2:	f002 fd21 	bl	80122e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f8a6:	f3ef 8211 	mrs	r2, BASEPRI
 800f8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ae:	f383 8811 	msr	BASEPRI, r3
 800f8b2:	f3bf 8f6f 	isb	sy
 800f8b6:	f3bf 8f4f 	dsb	sy
 800f8ba:	61fa      	str	r2, [r7, #28]
 800f8bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f8be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f8c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d302      	bcc.n	800f8d4 <xQueueGenericSendFromISR+0xbc>
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	2b02      	cmp	r3, #2
 800f8d2:	d12f      	bne.n	800f934 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f8da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f8e4:	683a      	ldr	r2, [r7, #0]
 800f8e6:	68b9      	ldr	r1, [r7, #8]
 800f8e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f8ea:	f000 fb64 	bl	800ffb6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f8ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8f6:	d112      	bne.n	800f91e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d016      	beq.n	800f92e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f902:	3324      	adds	r3, #36	; 0x24
 800f904:	4618      	mov	r0, r3
 800f906:	f001 f94d 	bl	8010ba4 <xTaskRemoveFromEventList>
 800f90a:	4603      	mov	r3, r0
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d00e      	beq.n	800f92e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d00b      	beq.n	800f92e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2201      	movs	r2, #1
 800f91a:	601a      	str	r2, [r3, #0]
 800f91c:	e007      	b.n	800f92e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f91e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f922:	3301      	adds	r3, #1
 800f924:	b2db      	uxtb	r3, r3
 800f926:	b25a      	sxtb	r2, r3
 800f928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f92e:	2301      	movs	r3, #1
 800f930:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f932:	e001      	b.n	800f938 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f934:	2300      	movs	r3, #0
 800f936:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f93a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f942:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f946:	4618      	mov	r0, r3
 800f948:	3740      	adds	r7, #64	; 0x40
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}

0800f94e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f94e:	b580      	push	{r7, lr}
 800f950:	b08e      	sub	sp, #56	; 0x38
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
 800f956:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d10a      	bne.n	800f978 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800f962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f966:	f383 8811 	msr	BASEPRI, r3
 800f96a:	f3bf 8f6f 	isb	sy
 800f96e:	f3bf 8f4f 	dsb	sy
 800f972:	623b      	str	r3, [r7, #32]
}
 800f974:	bf00      	nop
 800f976:	e7fe      	b.n	800f976 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d00a      	beq.n	800f996 <xQueueGiveFromISR+0x48>
	__asm volatile
 800f980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f984:	f383 8811 	msr	BASEPRI, r3
 800f988:	f3bf 8f6f 	isb	sy
 800f98c:	f3bf 8f4f 	dsb	sy
 800f990:	61fb      	str	r3, [r7, #28]
}
 800f992:	bf00      	nop
 800f994:	e7fe      	b.n	800f994 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d103      	bne.n	800f9a6 <xQueueGiveFromISR+0x58>
 800f99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a0:	689b      	ldr	r3, [r3, #8]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d101      	bne.n	800f9aa <xQueueGiveFromISR+0x5c>
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	e000      	b.n	800f9ac <xQueueGiveFromISR+0x5e>
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d10a      	bne.n	800f9c6 <xQueueGiveFromISR+0x78>
	__asm volatile
 800f9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b4:	f383 8811 	msr	BASEPRI, r3
 800f9b8:	f3bf 8f6f 	isb	sy
 800f9bc:	f3bf 8f4f 	dsb	sy
 800f9c0:	61bb      	str	r3, [r7, #24]
}
 800f9c2:	bf00      	nop
 800f9c4:	e7fe      	b.n	800f9c4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f9c6:	f002 fc8f 	bl	80122e8 <vPortValidateInterruptPriority>
	__asm volatile
 800f9ca:	f3ef 8211 	mrs	r2, BASEPRI
 800f9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d2:	f383 8811 	msr	BASEPRI, r3
 800f9d6:	f3bf 8f6f 	isb	sy
 800f9da:	f3bf 8f4f 	dsb	sy
 800f9de:	617a      	str	r2, [r7, #20]
 800f9e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f9e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d22b      	bcs.n	800fa4e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa02:	1c5a      	adds	r2, r3, #1
 800fa04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa06:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fa08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fa0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa10:	d112      	bne.n	800fa38 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d016      	beq.n	800fa48 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa1c:	3324      	adds	r3, #36	; 0x24
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f001 f8c0 	bl	8010ba4 <xTaskRemoveFromEventList>
 800fa24:	4603      	mov	r3, r0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d00e      	beq.n	800fa48 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d00b      	beq.n	800fa48 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	2201      	movs	r2, #1
 800fa34:	601a      	str	r2, [r3, #0]
 800fa36:	e007      	b.n	800fa48 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fa38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	b2db      	uxtb	r3, r3
 800fa40:	b25a      	sxtb	r2, r3
 800fa42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	637b      	str	r3, [r7, #52]	; 0x34
 800fa4c:	e001      	b.n	800fa52 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	637b      	str	r3, [r7, #52]	; 0x34
 800fa52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa54:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	f383 8811 	msr	BASEPRI, r3
}
 800fa5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fa5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3738      	adds	r7, #56	; 0x38
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b08c      	sub	sp, #48	; 0x30
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	60f8      	str	r0, [r7, #12]
 800fa70:	60b9      	str	r1, [r7, #8]
 800fa72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fa74:	2300      	movs	r3, #0
 800fa76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d10a      	bne.n	800fa98 <xQueueReceive+0x30>
	__asm volatile
 800fa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa86:	f383 8811 	msr	BASEPRI, r3
 800fa8a:	f3bf 8f6f 	isb	sy
 800fa8e:	f3bf 8f4f 	dsb	sy
 800fa92:	623b      	str	r3, [r7, #32]
}
 800fa94:	bf00      	nop
 800fa96:	e7fe      	b.n	800fa96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d103      	bne.n	800faa6 <xQueueReceive+0x3e>
 800fa9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d101      	bne.n	800faaa <xQueueReceive+0x42>
 800faa6:	2301      	movs	r3, #1
 800faa8:	e000      	b.n	800faac <xQueueReceive+0x44>
 800faaa:	2300      	movs	r3, #0
 800faac:	2b00      	cmp	r3, #0
 800faae:	d10a      	bne.n	800fac6 <xQueueReceive+0x5e>
	__asm volatile
 800fab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab4:	f383 8811 	msr	BASEPRI, r3
 800fab8:	f3bf 8f6f 	isb	sy
 800fabc:	f3bf 8f4f 	dsb	sy
 800fac0:	61fb      	str	r3, [r7, #28]
}
 800fac2:	bf00      	nop
 800fac4:	e7fe      	b.n	800fac4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fac6:	f001 fa29 	bl	8010f1c <xTaskGetSchedulerState>
 800faca:	4603      	mov	r3, r0
 800facc:	2b00      	cmp	r3, #0
 800face:	d102      	bne.n	800fad6 <xQueueReceive+0x6e>
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d101      	bne.n	800fada <xQueueReceive+0x72>
 800fad6:	2301      	movs	r3, #1
 800fad8:	e000      	b.n	800fadc <xQueueReceive+0x74>
 800fada:	2300      	movs	r3, #0
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d10a      	bne.n	800faf6 <xQueueReceive+0x8e>
	__asm volatile
 800fae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae4:	f383 8811 	msr	BASEPRI, r3
 800fae8:	f3bf 8f6f 	isb	sy
 800faec:	f3bf 8f4f 	dsb	sy
 800faf0:	61bb      	str	r3, [r7, #24]
}
 800faf2:	bf00      	nop
 800faf4:	e7fe      	b.n	800faf4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800faf6:	f002 fb15 	bl	8012124 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fafe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d01f      	beq.n	800fb46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fb06:	68b9      	ldr	r1, [r7, #8]
 800fb08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb0a:	f000 fabe 	bl	801008a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb10:	1e5a      	subs	r2, r3, #1
 800fb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb18:	691b      	ldr	r3, [r3, #16]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d00f      	beq.n	800fb3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb20:	3310      	adds	r3, #16
 800fb22:	4618      	mov	r0, r3
 800fb24:	f001 f83e 	bl	8010ba4 <xTaskRemoveFromEventList>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d007      	beq.n	800fb3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fb2e:	4b3d      	ldr	r3, [pc, #244]	; (800fc24 <xQueueReceive+0x1bc>)
 800fb30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb34:	601a      	str	r2, [r3, #0]
 800fb36:	f3bf 8f4f 	dsb	sy
 800fb3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fb3e:	f002 fb21 	bl	8012184 <vPortExitCritical>
				return pdPASS;
 800fb42:	2301      	movs	r3, #1
 800fb44:	e069      	b.n	800fc1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d103      	bne.n	800fb54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fb4c:	f002 fb1a 	bl	8012184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fb50:	2300      	movs	r3, #0
 800fb52:	e062      	b.n	800fc1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d106      	bne.n	800fb68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb5a:	f107 0310 	add.w	r3, r7, #16
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f001 f882 	bl	8010c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb64:	2301      	movs	r3, #1
 800fb66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb68:	f002 fb0c 	bl	8012184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb6c:	f000 fdea 	bl	8010744 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb70:	f002 fad8 	bl	8012124 <vPortEnterCritical>
 800fb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb7a:	b25b      	sxtb	r3, r3
 800fb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb80:	d103      	bne.n	800fb8a <xQueueReceive+0x122>
 800fb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb84:	2200      	movs	r2, #0
 800fb86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb90:	b25b      	sxtb	r3, r3
 800fb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb96:	d103      	bne.n	800fba0 <xQueueReceive+0x138>
 800fb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fba0:	f002 faf0 	bl	8012184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fba4:	1d3a      	adds	r2, r7, #4
 800fba6:	f107 0310 	add.w	r3, r7, #16
 800fbaa:	4611      	mov	r1, r2
 800fbac:	4618      	mov	r0, r3
 800fbae:	f001 f871 	bl	8010c94 <xTaskCheckForTimeOut>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d123      	bne.n	800fc00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fbb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbba:	f000 fade 	bl	801017a <prvIsQueueEmpty>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d017      	beq.n	800fbf4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc6:	3324      	adds	r3, #36	; 0x24
 800fbc8:	687a      	ldr	r2, [r7, #4]
 800fbca:	4611      	mov	r1, r2
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f000 ff99 	bl	8010b04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fbd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbd4:	f000 fa7f 	bl	80100d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fbd8:	f000 fdc2 	bl	8010760 <xTaskResumeAll>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d189      	bne.n	800faf6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800fbe2:	4b10      	ldr	r3, [pc, #64]	; (800fc24 <xQueueReceive+0x1bc>)
 800fbe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbe8:	601a      	str	r2, [r3, #0]
 800fbea:	f3bf 8f4f 	dsb	sy
 800fbee:	f3bf 8f6f 	isb	sy
 800fbf2:	e780      	b.n	800faf6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fbf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbf6:	f000 fa6e 	bl	80100d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fbfa:	f000 fdb1 	bl	8010760 <xTaskResumeAll>
 800fbfe:	e77a      	b.n	800faf6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fc00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc02:	f000 fa68 	bl	80100d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc06:	f000 fdab 	bl	8010760 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc0c:	f000 fab5 	bl	801017a <prvIsQueueEmpty>
 800fc10:	4603      	mov	r3, r0
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	f43f af6f 	beq.w	800faf6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fc18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3730      	adds	r7, #48	; 0x30
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	e000ed04 	.word	0xe000ed04

0800fc28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b08e      	sub	sp, #56	; 0x38
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fc32:	2300      	movs	r3, #0
 800fc34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d10a      	bne.n	800fc5a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800fc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc48:	f383 8811 	msr	BASEPRI, r3
 800fc4c:	f3bf 8f6f 	isb	sy
 800fc50:	f3bf 8f4f 	dsb	sy
 800fc54:	623b      	str	r3, [r7, #32]
}
 800fc56:	bf00      	nop
 800fc58:	e7fe      	b.n	800fc58 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d00a      	beq.n	800fc78 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800fc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc66:	f383 8811 	msr	BASEPRI, r3
 800fc6a:	f3bf 8f6f 	isb	sy
 800fc6e:	f3bf 8f4f 	dsb	sy
 800fc72:	61fb      	str	r3, [r7, #28]
}
 800fc74:	bf00      	nop
 800fc76:	e7fe      	b.n	800fc76 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc78:	f001 f950 	bl	8010f1c <xTaskGetSchedulerState>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d102      	bne.n	800fc88 <xQueueSemaphoreTake+0x60>
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d101      	bne.n	800fc8c <xQueueSemaphoreTake+0x64>
 800fc88:	2301      	movs	r3, #1
 800fc8a:	e000      	b.n	800fc8e <xQueueSemaphoreTake+0x66>
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d10a      	bne.n	800fca8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800fc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc96:	f383 8811 	msr	BASEPRI, r3
 800fc9a:	f3bf 8f6f 	isb	sy
 800fc9e:	f3bf 8f4f 	dsb	sy
 800fca2:	61bb      	str	r3, [r7, #24]
}
 800fca4:	bf00      	nop
 800fca6:	e7fe      	b.n	800fca6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fca8:	f002 fa3c 	bl	8012124 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcb0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d024      	beq.n	800fd02 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcba:	1e5a      	subs	r2, r3, #1
 800fcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcbe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d104      	bne.n	800fcd2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fcc8:	f001 fad0 	bl	801126c <pvTaskIncrementMutexHeldCount>
 800fccc:	4602      	mov	r2, r0
 800fcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd4:	691b      	ldr	r3, [r3, #16]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d00f      	beq.n	800fcfa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcdc:	3310      	adds	r3, #16
 800fcde:	4618      	mov	r0, r3
 800fce0:	f000 ff60 	bl	8010ba4 <xTaskRemoveFromEventList>
 800fce4:	4603      	mov	r3, r0
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d007      	beq.n	800fcfa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fcea:	4b54      	ldr	r3, [pc, #336]	; (800fe3c <xQueueSemaphoreTake+0x214>)
 800fcec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcf0:	601a      	str	r2, [r3, #0]
 800fcf2:	f3bf 8f4f 	dsb	sy
 800fcf6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fcfa:	f002 fa43 	bl	8012184 <vPortExitCritical>
				return pdPASS;
 800fcfe:	2301      	movs	r3, #1
 800fd00:	e097      	b.n	800fe32 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d111      	bne.n	800fd2c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d00a      	beq.n	800fd24 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800fd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd12:	f383 8811 	msr	BASEPRI, r3
 800fd16:	f3bf 8f6f 	isb	sy
 800fd1a:	f3bf 8f4f 	dsb	sy
 800fd1e:	617b      	str	r3, [r7, #20]
}
 800fd20:	bf00      	nop
 800fd22:	e7fe      	b.n	800fd22 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fd24:	f002 fa2e 	bl	8012184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	e082      	b.n	800fe32 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fd2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d106      	bne.n	800fd40 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fd32:	f107 030c 	add.w	r3, r7, #12
 800fd36:	4618      	mov	r0, r3
 800fd38:	f000 ff96 	bl	8010c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd40:	f002 fa20 	bl	8012184 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd44:	f000 fcfe 	bl	8010744 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fd48:	f002 f9ec 	bl	8012124 <vPortEnterCritical>
 800fd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd52:	b25b      	sxtb	r3, r3
 800fd54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd58:	d103      	bne.n	800fd62 <xQueueSemaphoreTake+0x13a>
 800fd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd68:	b25b      	sxtb	r3, r3
 800fd6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd6e:	d103      	bne.n	800fd78 <xQueueSemaphoreTake+0x150>
 800fd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd72:	2200      	movs	r2, #0
 800fd74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fd78:	f002 fa04 	bl	8012184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fd7c:	463a      	mov	r2, r7
 800fd7e:	f107 030c 	add.w	r3, r7, #12
 800fd82:	4611      	mov	r1, r2
 800fd84:	4618      	mov	r0, r3
 800fd86:	f000 ff85 	bl	8010c94 <xTaskCheckForTimeOut>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d132      	bne.n	800fdf6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fd90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd92:	f000 f9f2 	bl	801017a <prvIsQueueEmpty>
 800fd96:	4603      	mov	r3, r0
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d026      	beq.n	800fdea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d109      	bne.n	800fdb8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800fda4:	f002 f9be 	bl	8012124 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdaa:	689b      	ldr	r3, [r3, #8]
 800fdac:	4618      	mov	r0, r3
 800fdae:	f001 f8d3 	bl	8010f58 <xTaskPriorityInherit>
 800fdb2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800fdb4:	f002 f9e6 	bl	8012184 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdba:	3324      	adds	r3, #36	; 0x24
 800fdbc:	683a      	ldr	r2, [r7, #0]
 800fdbe:	4611      	mov	r1, r2
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f000 fe9f 	bl	8010b04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fdc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fdc8:	f000 f985 	bl	80100d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fdcc:	f000 fcc8 	bl	8010760 <xTaskResumeAll>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	f47f af68 	bne.w	800fca8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800fdd8:	4b18      	ldr	r3, [pc, #96]	; (800fe3c <xQueueSemaphoreTake+0x214>)
 800fdda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdde:	601a      	str	r2, [r3, #0]
 800fde0:	f3bf 8f4f 	dsb	sy
 800fde4:	f3bf 8f6f 	isb	sy
 800fde8:	e75e      	b.n	800fca8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fdea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fdec:	f000 f973 	bl	80100d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fdf0:	f000 fcb6 	bl	8010760 <xTaskResumeAll>
 800fdf4:	e758      	b.n	800fca8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fdf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fdf8:	f000 f96d 	bl	80100d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fdfc:	f000 fcb0 	bl	8010760 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe02:	f000 f9ba 	bl	801017a <prvIsQueueEmpty>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	f43f af4d 	beq.w	800fca8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fe0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d00d      	beq.n	800fe30 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800fe14:	f002 f986 	bl	8012124 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fe18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe1a:	f000 f8b4 	bl	800ff86 <prvGetDisinheritPriorityAfterTimeout>
 800fe1e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fe20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe22:	689b      	ldr	r3, [r3, #8]
 800fe24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe26:	4618      	mov	r0, r3
 800fe28:	f001 f992 	bl	8011150 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fe2c:	f002 f9aa 	bl	8012184 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fe30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3738      	adds	r7, #56	; 0x38
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	e000ed04 	.word	0xe000ed04

0800fe40 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b08e      	sub	sp, #56	; 0x38
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	60f8      	str	r0, [r7, #12]
 800fe48:	60b9      	str	r1, [r7, #8]
 800fe4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fe50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d10a      	bne.n	800fe6c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800fe56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe5a:	f383 8811 	msr	BASEPRI, r3
 800fe5e:	f3bf 8f6f 	isb	sy
 800fe62:	f3bf 8f4f 	dsb	sy
 800fe66:	623b      	str	r3, [r7, #32]
}
 800fe68:	bf00      	nop
 800fe6a:	e7fe      	b.n	800fe6a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d103      	bne.n	800fe7a <xQueueReceiveFromISR+0x3a>
 800fe72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d101      	bne.n	800fe7e <xQueueReceiveFromISR+0x3e>
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	e000      	b.n	800fe80 <xQueueReceiveFromISR+0x40>
 800fe7e:	2300      	movs	r3, #0
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d10a      	bne.n	800fe9a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800fe84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe88:	f383 8811 	msr	BASEPRI, r3
 800fe8c:	f3bf 8f6f 	isb	sy
 800fe90:	f3bf 8f4f 	dsb	sy
 800fe94:	61fb      	str	r3, [r7, #28]
}
 800fe96:	bf00      	nop
 800fe98:	e7fe      	b.n	800fe98 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fe9a:	f002 fa25 	bl	80122e8 <vPortValidateInterruptPriority>
	__asm volatile
 800fe9e:	f3ef 8211 	mrs	r2, BASEPRI
 800fea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea6:	f383 8811 	msr	BASEPRI, r3
 800feaa:	f3bf 8f6f 	isb	sy
 800feae:	f3bf 8f4f 	dsb	sy
 800feb2:	61ba      	str	r2, [r7, #24]
 800feb4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800feb6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800feb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800feba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800febc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800febe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d02f      	beq.n	800ff26 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fed0:	68b9      	ldr	r1, [r7, #8]
 800fed2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fed4:	f000 f8d9 	bl	801008a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feda:	1e5a      	subs	r2, r3, #1
 800fedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fede:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fee0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fee8:	d112      	bne.n	800ff10 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800feea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feec:	691b      	ldr	r3, [r3, #16]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d016      	beq.n	800ff20 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef4:	3310      	adds	r3, #16
 800fef6:	4618      	mov	r0, r3
 800fef8:	f000 fe54 	bl	8010ba4 <xTaskRemoveFromEventList>
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d00e      	beq.n	800ff20 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d00b      	beq.n	800ff20 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2201      	movs	r2, #1
 800ff0c:	601a      	str	r2, [r3, #0]
 800ff0e:	e007      	b.n	800ff20 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ff10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff14:	3301      	adds	r3, #1
 800ff16:	b2db      	uxtb	r3, r3
 800ff18:	b25a      	sxtb	r2, r3
 800ff1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ff20:	2301      	movs	r3, #1
 800ff22:	637b      	str	r3, [r7, #52]	; 0x34
 800ff24:	e001      	b.n	800ff2a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ff26:	2300      	movs	r3, #0
 800ff28:	637b      	str	r3, [r7, #52]	; 0x34
 800ff2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	f383 8811 	msr	BASEPRI, r3
}
 800ff34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ff36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3738      	adds	r7, #56	; 0x38
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d10a      	bne.n	800ff68 <vQueueDelete+0x28>
	__asm volatile
 800ff52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff56:	f383 8811 	msr	BASEPRI, r3
 800ff5a:	f3bf 8f6f 	isb	sy
 800ff5e:	f3bf 8f4f 	dsb	sy
 800ff62:	60bb      	str	r3, [r7, #8]
}
 800ff64:	bf00      	nop
 800ff66:	e7fe      	b.n	800ff66 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ff68:	68f8      	ldr	r0, [r7, #12]
 800ff6a:	f000 f95f 	bl	801022c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d102      	bne.n	800ff7e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ff78:	68f8      	ldr	r0, [r7, #12]
 800ff7a:	f002 fac1 	bl	8012500 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ff7e:	bf00      	nop
 800ff80:	3710      	adds	r7, #16
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}

0800ff86 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ff86:	b480      	push	{r7}
 800ff88:	b085      	sub	sp, #20
 800ff8a:	af00      	add	r7, sp, #0
 800ff8c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d006      	beq.n	800ffa4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f1c3 0307 	rsb	r3, r3, #7
 800ffa0:	60fb      	str	r3, [r7, #12]
 800ffa2:	e001      	b.n	800ffa8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
	}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3714      	adds	r7, #20
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb4:	4770      	bx	lr

0800ffb6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ffb6:	b580      	push	{r7, lr}
 800ffb8:	b086      	sub	sp, #24
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	60f8      	str	r0, [r7, #12]
 800ffbe:	60b9      	str	r1, [r7, #8]
 800ffc0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d10d      	bne.n	800fff0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d14d      	bne.n	8010078 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	689b      	ldr	r3, [r3, #8]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f001 f82f 	bl	8011044 <xTaskPriorityDisinherit>
 800ffe6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	2200      	movs	r2, #0
 800ffec:	609a      	str	r2, [r3, #8]
 800ffee:	e043      	b.n	8010078 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d119      	bne.n	801002a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	6858      	ldr	r0, [r3, #4]
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fffe:	461a      	mov	r2, r3
 8010000:	68b9      	ldr	r1, [r7, #8]
 8010002:	f002 ff62 	bl	8012eca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	685a      	ldr	r2, [r3, #4]
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801000e:	441a      	add	r2, r3
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	685a      	ldr	r2, [r3, #4]
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	689b      	ldr	r3, [r3, #8]
 801001c:	429a      	cmp	r2, r3
 801001e:	d32b      	bcc.n	8010078 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	681a      	ldr	r2, [r3, #0]
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	605a      	str	r2, [r3, #4]
 8010028:	e026      	b.n	8010078 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	68d8      	ldr	r0, [r3, #12]
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010032:	461a      	mov	r2, r3
 8010034:	68b9      	ldr	r1, [r7, #8]
 8010036:	f002 ff48 	bl	8012eca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	68da      	ldr	r2, [r3, #12]
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010042:	425b      	negs	r3, r3
 8010044:	441a      	add	r2, r3
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	68da      	ldr	r2, [r3, #12]
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	429a      	cmp	r2, r3
 8010054:	d207      	bcs.n	8010066 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	689a      	ldr	r2, [r3, #8]
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801005e:	425b      	negs	r3, r3
 8010060:	441a      	add	r2, r3
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2b02      	cmp	r3, #2
 801006a:	d105      	bne.n	8010078 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d002      	beq.n	8010078 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	3b01      	subs	r3, #1
 8010076:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010078:	693b      	ldr	r3, [r7, #16]
 801007a:	1c5a      	adds	r2, r3, #1
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010080:	697b      	ldr	r3, [r7, #20]
}
 8010082:	4618      	mov	r0, r3
 8010084:	3718      	adds	r7, #24
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}

0801008a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801008a:	b580      	push	{r7, lr}
 801008c:	b082      	sub	sp, #8
 801008e:	af00      	add	r7, sp, #0
 8010090:	6078      	str	r0, [r7, #4]
 8010092:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010098:	2b00      	cmp	r3, #0
 801009a:	d018      	beq.n	80100ce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	68da      	ldr	r2, [r3, #12]
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100a4:	441a      	add	r2, r3
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	68da      	ldr	r2, [r3, #12]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	689b      	ldr	r3, [r3, #8]
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d303      	bcc.n	80100be <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	68d9      	ldr	r1, [r3, #12]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100c6:	461a      	mov	r2, r3
 80100c8:	6838      	ldr	r0, [r7, #0]
 80100ca:	f002 fefe 	bl	8012eca <memcpy>
	}
}
 80100ce:	bf00      	nop
 80100d0:	3708      	adds	r7, #8
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}

080100d6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80100d6:	b580      	push	{r7, lr}
 80100d8:	b084      	sub	sp, #16
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80100de:	f002 f821 	bl	8012124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80100e8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80100ea:	e011      	b.n	8010110 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d012      	beq.n	801011a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	3324      	adds	r3, #36	; 0x24
 80100f8:	4618      	mov	r0, r3
 80100fa:	f000 fd53 	bl	8010ba4 <xTaskRemoveFromEventList>
 80100fe:	4603      	mov	r3, r0
 8010100:	2b00      	cmp	r3, #0
 8010102:	d001      	beq.n	8010108 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010104:	f000 fe28 	bl	8010d58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010108:	7bfb      	ldrb	r3, [r7, #15]
 801010a:	3b01      	subs	r3, #1
 801010c:	b2db      	uxtb	r3, r3
 801010e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010114:	2b00      	cmp	r3, #0
 8010116:	dce9      	bgt.n	80100ec <prvUnlockQueue+0x16>
 8010118:	e000      	b.n	801011c <prvUnlockQueue+0x46>
					break;
 801011a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	22ff      	movs	r2, #255	; 0xff
 8010120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010124:	f002 f82e 	bl	8012184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010128:	f001 fffc 	bl	8012124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010132:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010134:	e011      	b.n	801015a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	691b      	ldr	r3, [r3, #16]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d012      	beq.n	8010164 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	3310      	adds	r3, #16
 8010142:	4618      	mov	r0, r3
 8010144:	f000 fd2e 	bl	8010ba4 <xTaskRemoveFromEventList>
 8010148:	4603      	mov	r3, r0
 801014a:	2b00      	cmp	r3, #0
 801014c:	d001      	beq.n	8010152 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801014e:	f000 fe03 	bl	8010d58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010152:	7bbb      	ldrb	r3, [r7, #14]
 8010154:	3b01      	subs	r3, #1
 8010156:	b2db      	uxtb	r3, r3
 8010158:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801015a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801015e:	2b00      	cmp	r3, #0
 8010160:	dce9      	bgt.n	8010136 <prvUnlockQueue+0x60>
 8010162:	e000      	b.n	8010166 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010164:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	22ff      	movs	r2, #255	; 0xff
 801016a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801016e:	f002 f809 	bl	8012184 <vPortExitCritical>
}
 8010172:	bf00      	nop
 8010174:	3710      	adds	r7, #16
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}

0801017a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801017a:	b580      	push	{r7, lr}
 801017c:	b084      	sub	sp, #16
 801017e:	af00      	add	r7, sp, #0
 8010180:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010182:	f001 ffcf 	bl	8012124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801018a:	2b00      	cmp	r3, #0
 801018c:	d102      	bne.n	8010194 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801018e:	2301      	movs	r3, #1
 8010190:	60fb      	str	r3, [r7, #12]
 8010192:	e001      	b.n	8010198 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010194:	2300      	movs	r3, #0
 8010196:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010198:	f001 fff4 	bl	8012184 <vPortExitCritical>

	return xReturn;
 801019c:	68fb      	ldr	r3, [r7, #12]
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3710      	adds	r7, #16
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}

080101a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80101a6:	b580      	push	{r7, lr}
 80101a8:	b084      	sub	sp, #16
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80101ae:	f001 ffb9 	bl	8012124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d102      	bne.n	80101c4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80101be:	2301      	movs	r3, #1
 80101c0:	60fb      	str	r3, [r7, #12]
 80101c2:	e001      	b.n	80101c8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80101c4:	2300      	movs	r3, #0
 80101c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80101c8:	f001 ffdc 	bl	8012184 <vPortExitCritical>

	return xReturn;
 80101cc:	68fb      	ldr	r3, [r7, #12]
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3710      	adds	r7, #16
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
	...

080101d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80101d8:	b480      	push	{r7}
 80101da:	b085      	sub	sp, #20
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80101e2:	2300      	movs	r3, #0
 80101e4:	60fb      	str	r3, [r7, #12]
 80101e6:	e014      	b.n	8010212 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80101e8:	4a0f      	ldr	r2, [pc, #60]	; (8010228 <vQueueAddToRegistry+0x50>)
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d10b      	bne.n	801020c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80101f4:	490c      	ldr	r1, [pc, #48]	; (8010228 <vQueueAddToRegistry+0x50>)
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	683a      	ldr	r2, [r7, #0]
 80101fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80101fe:	4a0a      	ldr	r2, [pc, #40]	; (8010228 <vQueueAddToRegistry+0x50>)
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	00db      	lsls	r3, r3, #3
 8010204:	4413      	add	r3, r2
 8010206:	687a      	ldr	r2, [r7, #4]
 8010208:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801020a:	e006      	b.n	801021a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	3301      	adds	r3, #1
 8010210:	60fb      	str	r3, [r7, #12]
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2b07      	cmp	r3, #7
 8010216:	d9e7      	bls.n	80101e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010218:	bf00      	nop
 801021a:	bf00      	nop
 801021c:	3714      	adds	r7, #20
 801021e:	46bd      	mov	sp, r7
 8010220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010224:	4770      	bx	lr
 8010226:	bf00      	nop
 8010228:	20001830 	.word	0x20001830

0801022c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801022c:	b480      	push	{r7}
 801022e:	b085      	sub	sp, #20
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010234:	2300      	movs	r3, #0
 8010236:	60fb      	str	r3, [r7, #12]
 8010238:	e016      	b.n	8010268 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801023a:	4a10      	ldr	r2, [pc, #64]	; (801027c <vQueueUnregisterQueue+0x50>)
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	00db      	lsls	r3, r3, #3
 8010240:	4413      	add	r3, r2
 8010242:	685b      	ldr	r3, [r3, #4]
 8010244:	687a      	ldr	r2, [r7, #4]
 8010246:	429a      	cmp	r2, r3
 8010248:	d10b      	bne.n	8010262 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801024a:	4a0c      	ldr	r2, [pc, #48]	; (801027c <vQueueUnregisterQueue+0x50>)
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	2100      	movs	r1, #0
 8010250:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010254:	4a09      	ldr	r2, [pc, #36]	; (801027c <vQueueUnregisterQueue+0x50>)
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	00db      	lsls	r3, r3, #3
 801025a:	4413      	add	r3, r2
 801025c:	2200      	movs	r2, #0
 801025e:	605a      	str	r2, [r3, #4]
				break;
 8010260:	e006      	b.n	8010270 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	3301      	adds	r3, #1
 8010266:	60fb      	str	r3, [r7, #12]
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	2b07      	cmp	r3, #7
 801026c:	d9e5      	bls.n	801023a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801026e:	bf00      	nop
 8010270:	bf00      	nop
 8010272:	3714      	adds	r7, #20
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr
 801027c:	20001830 	.word	0x20001830

08010280 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010280:	b580      	push	{r7, lr}
 8010282:	b086      	sub	sp, #24
 8010284:	af00      	add	r7, sp, #0
 8010286:	60f8      	str	r0, [r7, #12]
 8010288:	60b9      	str	r1, [r7, #8]
 801028a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010290:	f001 ff48 	bl	8012124 <vPortEnterCritical>
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801029a:	b25b      	sxtb	r3, r3
 801029c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102a0:	d103      	bne.n	80102aa <vQueueWaitForMessageRestricted+0x2a>
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	2200      	movs	r2, #0
 80102a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102b0:	b25b      	sxtb	r3, r3
 80102b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102b6:	d103      	bne.n	80102c0 <vQueueWaitForMessageRestricted+0x40>
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	2200      	movs	r2, #0
 80102bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80102c0:	f001 ff60 	bl	8012184 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d106      	bne.n	80102da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	3324      	adds	r3, #36	; 0x24
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	68b9      	ldr	r1, [r7, #8]
 80102d4:	4618      	mov	r0, r3
 80102d6:	f000 fc39 	bl	8010b4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80102da:	6978      	ldr	r0, [r7, #20]
 80102dc:	f7ff fefb 	bl	80100d6 <prvUnlockQueue>
	}
 80102e0:	bf00      	nop
 80102e2:	3718      	adds	r7, #24
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}

080102e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b08e      	sub	sp, #56	; 0x38
 80102ec:	af04      	add	r7, sp, #16
 80102ee:	60f8      	str	r0, [r7, #12]
 80102f0:	60b9      	str	r1, [r7, #8]
 80102f2:	607a      	str	r2, [r7, #4]
 80102f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80102f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d10a      	bne.n	8010312 <xTaskCreateStatic+0x2a>
	__asm volatile
 80102fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010300:	f383 8811 	msr	BASEPRI, r3
 8010304:	f3bf 8f6f 	isb	sy
 8010308:	f3bf 8f4f 	dsb	sy
 801030c:	623b      	str	r3, [r7, #32]
}
 801030e:	bf00      	nop
 8010310:	e7fe      	b.n	8010310 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010314:	2b00      	cmp	r3, #0
 8010316:	d10a      	bne.n	801032e <xTaskCreateStatic+0x46>
	__asm volatile
 8010318:	f04f 0350 	mov.w	r3, #80	; 0x50
 801031c:	f383 8811 	msr	BASEPRI, r3
 8010320:	f3bf 8f6f 	isb	sy
 8010324:	f3bf 8f4f 	dsb	sy
 8010328:	61fb      	str	r3, [r7, #28]
}
 801032a:	bf00      	nop
 801032c:	e7fe      	b.n	801032c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801032e:	2354      	movs	r3, #84	; 0x54
 8010330:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010332:	693b      	ldr	r3, [r7, #16]
 8010334:	2b54      	cmp	r3, #84	; 0x54
 8010336:	d00a      	beq.n	801034e <xTaskCreateStatic+0x66>
	__asm volatile
 8010338:	f04f 0350 	mov.w	r3, #80	; 0x50
 801033c:	f383 8811 	msr	BASEPRI, r3
 8010340:	f3bf 8f6f 	isb	sy
 8010344:	f3bf 8f4f 	dsb	sy
 8010348:	61bb      	str	r3, [r7, #24]
}
 801034a:	bf00      	nop
 801034c:	e7fe      	b.n	801034c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801034e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010352:	2b00      	cmp	r3, #0
 8010354:	d01e      	beq.n	8010394 <xTaskCreateStatic+0xac>
 8010356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010358:	2b00      	cmp	r3, #0
 801035a:	d01b      	beq.n	8010394 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801035c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010364:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010368:	2202      	movs	r2, #2
 801036a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801036e:	2300      	movs	r3, #0
 8010370:	9303      	str	r3, [sp, #12]
 8010372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010374:	9302      	str	r3, [sp, #8]
 8010376:	f107 0314 	add.w	r3, r7, #20
 801037a:	9301      	str	r3, [sp, #4]
 801037c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801037e:	9300      	str	r3, [sp, #0]
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	687a      	ldr	r2, [r7, #4]
 8010384:	68b9      	ldr	r1, [r7, #8]
 8010386:	68f8      	ldr	r0, [r7, #12]
 8010388:	f000 f850 	bl	801042c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801038c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801038e:	f000 f8d5 	bl	801053c <prvAddNewTaskToReadyList>
 8010392:	e001      	b.n	8010398 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010394:	2300      	movs	r3, #0
 8010396:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010398:	697b      	ldr	r3, [r7, #20]
	}
 801039a:	4618      	mov	r0, r3
 801039c:	3728      	adds	r7, #40	; 0x28
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}

080103a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80103a2:	b580      	push	{r7, lr}
 80103a4:	b08c      	sub	sp, #48	; 0x30
 80103a6:	af04      	add	r7, sp, #16
 80103a8:	60f8      	str	r0, [r7, #12]
 80103aa:	60b9      	str	r1, [r7, #8]
 80103ac:	603b      	str	r3, [r7, #0]
 80103ae:	4613      	mov	r3, r2
 80103b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80103b2:	88fb      	ldrh	r3, [r7, #6]
 80103b4:	009b      	lsls	r3, r3, #2
 80103b6:	4618      	mov	r0, r3
 80103b8:	f001 ffd6 	bl	8012368 <pvPortMalloc>
 80103bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d00e      	beq.n	80103e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80103c4:	2054      	movs	r0, #84	; 0x54
 80103c6:	f001 ffcf 	bl	8012368 <pvPortMalloc>
 80103ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80103cc:	69fb      	ldr	r3, [r7, #28]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d003      	beq.n	80103da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80103d2:	69fb      	ldr	r3, [r7, #28]
 80103d4:	697a      	ldr	r2, [r7, #20]
 80103d6:	631a      	str	r2, [r3, #48]	; 0x30
 80103d8:	e005      	b.n	80103e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80103da:	6978      	ldr	r0, [r7, #20]
 80103dc:	f002 f890 	bl	8012500 <vPortFree>
 80103e0:	e001      	b.n	80103e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80103e2:	2300      	movs	r3, #0
 80103e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80103e6:	69fb      	ldr	r3, [r7, #28]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d017      	beq.n	801041c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80103ec:	69fb      	ldr	r3, [r7, #28]
 80103ee:	2200      	movs	r2, #0
 80103f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80103f4:	88fa      	ldrh	r2, [r7, #6]
 80103f6:	2300      	movs	r3, #0
 80103f8:	9303      	str	r3, [sp, #12]
 80103fa:	69fb      	ldr	r3, [r7, #28]
 80103fc:	9302      	str	r3, [sp, #8]
 80103fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010400:	9301      	str	r3, [sp, #4]
 8010402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010404:	9300      	str	r3, [sp, #0]
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	68b9      	ldr	r1, [r7, #8]
 801040a:	68f8      	ldr	r0, [r7, #12]
 801040c:	f000 f80e 	bl	801042c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010410:	69f8      	ldr	r0, [r7, #28]
 8010412:	f000 f893 	bl	801053c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010416:	2301      	movs	r3, #1
 8010418:	61bb      	str	r3, [r7, #24]
 801041a:	e002      	b.n	8010422 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801041c:	f04f 33ff 	mov.w	r3, #4294967295
 8010420:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010422:	69bb      	ldr	r3, [r7, #24]
	}
 8010424:	4618      	mov	r0, r3
 8010426:	3720      	adds	r7, #32
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}

0801042c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b088      	sub	sp, #32
 8010430:	af00      	add	r7, sp, #0
 8010432:	60f8      	str	r0, [r7, #12]
 8010434:	60b9      	str	r1, [r7, #8]
 8010436:	607a      	str	r2, [r7, #4]
 8010438:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801043a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801043c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010444:	3b01      	subs	r3, #1
 8010446:	009b      	lsls	r3, r3, #2
 8010448:	4413      	add	r3, r2
 801044a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801044c:	69bb      	ldr	r3, [r7, #24]
 801044e:	f023 0307 	bic.w	r3, r3, #7
 8010452:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010454:	69bb      	ldr	r3, [r7, #24]
 8010456:	f003 0307 	and.w	r3, r3, #7
 801045a:	2b00      	cmp	r3, #0
 801045c:	d00a      	beq.n	8010474 <prvInitialiseNewTask+0x48>
	__asm volatile
 801045e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010462:	f383 8811 	msr	BASEPRI, r3
 8010466:	f3bf 8f6f 	isb	sy
 801046a:	f3bf 8f4f 	dsb	sy
 801046e:	617b      	str	r3, [r7, #20]
}
 8010470:	bf00      	nop
 8010472:	e7fe      	b.n	8010472 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d01f      	beq.n	80104ba <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801047a:	2300      	movs	r3, #0
 801047c:	61fb      	str	r3, [r7, #28]
 801047e:	e012      	b.n	80104a6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010480:	68ba      	ldr	r2, [r7, #8]
 8010482:	69fb      	ldr	r3, [r7, #28]
 8010484:	4413      	add	r3, r2
 8010486:	7819      	ldrb	r1, [r3, #0]
 8010488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801048a:	69fb      	ldr	r3, [r7, #28]
 801048c:	4413      	add	r3, r2
 801048e:	3334      	adds	r3, #52	; 0x34
 8010490:	460a      	mov	r2, r1
 8010492:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010494:	68ba      	ldr	r2, [r7, #8]
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	4413      	add	r3, r2
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d006      	beq.n	80104ae <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	3301      	adds	r3, #1
 80104a4:	61fb      	str	r3, [r7, #28]
 80104a6:	69fb      	ldr	r3, [r7, #28]
 80104a8:	2b0f      	cmp	r3, #15
 80104aa:	d9e9      	bls.n	8010480 <prvInitialiseNewTask+0x54>
 80104ac:	e000      	b.n	80104b0 <prvInitialiseNewTask+0x84>
			{
				break;
 80104ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80104b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b2:	2200      	movs	r2, #0
 80104b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80104b8:	e003      	b.n	80104c2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80104ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104bc:	2200      	movs	r2, #0
 80104be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80104c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c4:	2b06      	cmp	r3, #6
 80104c6:	d901      	bls.n	80104cc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80104c8:	2306      	movs	r3, #6
 80104ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80104cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80104d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80104d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104da:	2200      	movs	r2, #0
 80104dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80104de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e0:	3304      	adds	r3, #4
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7fe fe80 	bl	800f1e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80104e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ea:	3318      	adds	r3, #24
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7fe fe7b 	bl	800f1e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80104f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104fa:	f1c3 0207 	rsb	r2, r3, #7
 80104fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010500:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010506:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801050a:	2200      	movs	r2, #0
 801050c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801050e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010510:	2200      	movs	r2, #0
 8010512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010516:	683a      	ldr	r2, [r7, #0]
 8010518:	68f9      	ldr	r1, [r7, #12]
 801051a:	69b8      	ldr	r0, [r7, #24]
 801051c:	f001 fcd6 	bl	8011ecc <pxPortInitialiseStack>
 8010520:	4602      	mov	r2, r0
 8010522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010524:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010528:	2b00      	cmp	r3, #0
 801052a:	d002      	beq.n	8010532 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801052c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801052e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010532:	bf00      	nop
 8010534:	3720      	adds	r7, #32
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
	...

0801053c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010544:	f001 fdee 	bl	8012124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010548:	4b2a      	ldr	r3, [pc, #168]	; (80105f4 <prvAddNewTaskToReadyList+0xb8>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	3301      	adds	r3, #1
 801054e:	4a29      	ldr	r2, [pc, #164]	; (80105f4 <prvAddNewTaskToReadyList+0xb8>)
 8010550:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010552:	4b29      	ldr	r3, [pc, #164]	; (80105f8 <prvAddNewTaskToReadyList+0xbc>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d109      	bne.n	801056e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801055a:	4a27      	ldr	r2, [pc, #156]	; (80105f8 <prvAddNewTaskToReadyList+0xbc>)
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010560:	4b24      	ldr	r3, [pc, #144]	; (80105f4 <prvAddNewTaskToReadyList+0xb8>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	2b01      	cmp	r3, #1
 8010566:	d110      	bne.n	801058a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010568:	f000 fc1a 	bl	8010da0 <prvInitialiseTaskLists>
 801056c:	e00d      	b.n	801058a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801056e:	4b23      	ldr	r3, [pc, #140]	; (80105fc <prvAddNewTaskToReadyList+0xc0>)
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d109      	bne.n	801058a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010576:	4b20      	ldr	r3, [pc, #128]	; (80105f8 <prvAddNewTaskToReadyList+0xbc>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010580:	429a      	cmp	r2, r3
 8010582:	d802      	bhi.n	801058a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010584:	4a1c      	ldr	r2, [pc, #112]	; (80105f8 <prvAddNewTaskToReadyList+0xbc>)
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801058a:	4b1d      	ldr	r3, [pc, #116]	; (8010600 <prvAddNewTaskToReadyList+0xc4>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	3301      	adds	r3, #1
 8010590:	4a1b      	ldr	r2, [pc, #108]	; (8010600 <prvAddNewTaskToReadyList+0xc4>)
 8010592:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010598:	2201      	movs	r2, #1
 801059a:	409a      	lsls	r2, r3
 801059c:	4b19      	ldr	r3, [pc, #100]	; (8010604 <prvAddNewTaskToReadyList+0xc8>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	4313      	orrs	r3, r2
 80105a2:	4a18      	ldr	r2, [pc, #96]	; (8010604 <prvAddNewTaskToReadyList+0xc8>)
 80105a4:	6013      	str	r3, [r2, #0]
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105aa:	4613      	mov	r3, r2
 80105ac:	009b      	lsls	r3, r3, #2
 80105ae:	4413      	add	r3, r2
 80105b0:	009b      	lsls	r3, r3, #2
 80105b2:	4a15      	ldr	r2, [pc, #84]	; (8010608 <prvAddNewTaskToReadyList+0xcc>)
 80105b4:	441a      	add	r2, r3
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	3304      	adds	r3, #4
 80105ba:	4619      	mov	r1, r3
 80105bc:	4610      	mov	r0, r2
 80105be:	f7fe fe20 	bl	800f202 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80105c2:	f001 fddf 	bl	8012184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80105c6:	4b0d      	ldr	r3, [pc, #52]	; (80105fc <prvAddNewTaskToReadyList+0xc0>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d00e      	beq.n	80105ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80105ce:	4b0a      	ldr	r3, [pc, #40]	; (80105f8 <prvAddNewTaskToReadyList+0xbc>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105d8:	429a      	cmp	r2, r3
 80105da:	d207      	bcs.n	80105ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80105dc:	4b0b      	ldr	r3, [pc, #44]	; (801060c <prvAddNewTaskToReadyList+0xd0>)
 80105de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105e2:	601a      	str	r2, [r3, #0]
 80105e4:	f3bf 8f4f 	dsb	sy
 80105e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80105ec:	bf00      	nop
 80105ee:	3708      	adds	r7, #8
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}
 80105f4:	20001970 	.word	0x20001970
 80105f8:	20001870 	.word	0x20001870
 80105fc:	2000197c 	.word	0x2000197c
 8010600:	2000198c 	.word	0x2000198c
 8010604:	20001978 	.word	0x20001978
 8010608:	20001874 	.word	0x20001874
 801060c:	e000ed04 	.word	0xe000ed04

08010610 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010610:	b580      	push	{r7, lr}
 8010612:	b084      	sub	sp, #16
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010618:	2300      	movs	r3, #0
 801061a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d017      	beq.n	8010652 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010622:	4b13      	ldr	r3, [pc, #76]	; (8010670 <vTaskDelay+0x60>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d00a      	beq.n	8010640 <vTaskDelay+0x30>
	__asm volatile
 801062a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801062e:	f383 8811 	msr	BASEPRI, r3
 8010632:	f3bf 8f6f 	isb	sy
 8010636:	f3bf 8f4f 	dsb	sy
 801063a:	60bb      	str	r3, [r7, #8]
}
 801063c:	bf00      	nop
 801063e:	e7fe      	b.n	801063e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010640:	f000 f880 	bl	8010744 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010644:	2100      	movs	r1, #0
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f001 f80e 	bl	8011668 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801064c:	f000 f888 	bl	8010760 <xTaskResumeAll>
 8010650:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d107      	bne.n	8010668 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010658:	4b06      	ldr	r3, [pc, #24]	; (8010674 <vTaskDelay+0x64>)
 801065a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801065e:	601a      	str	r2, [r3, #0]
 8010660:	f3bf 8f4f 	dsb	sy
 8010664:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010668:	bf00      	nop
 801066a:	3710      	adds	r7, #16
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}
 8010670:	20001998 	.word	0x20001998
 8010674:	e000ed04 	.word	0xe000ed04

08010678 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b08a      	sub	sp, #40	; 0x28
 801067c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801067e:	2300      	movs	r3, #0
 8010680:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010682:	2300      	movs	r3, #0
 8010684:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010686:	463a      	mov	r2, r7
 8010688:	1d39      	adds	r1, r7, #4
 801068a:	f107 0308 	add.w	r3, r7, #8
 801068e:	4618      	mov	r0, r3
 8010690:	f7f1 fd14 	bl	80020bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010694:	6839      	ldr	r1, [r7, #0]
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	68ba      	ldr	r2, [r7, #8]
 801069a:	9202      	str	r2, [sp, #8]
 801069c:	9301      	str	r3, [sp, #4]
 801069e:	2300      	movs	r3, #0
 80106a0:	9300      	str	r3, [sp, #0]
 80106a2:	2300      	movs	r3, #0
 80106a4:	460a      	mov	r2, r1
 80106a6:	4921      	ldr	r1, [pc, #132]	; (801072c <vTaskStartScheduler+0xb4>)
 80106a8:	4821      	ldr	r0, [pc, #132]	; (8010730 <vTaskStartScheduler+0xb8>)
 80106aa:	f7ff fe1d 	bl	80102e8 <xTaskCreateStatic>
 80106ae:	4603      	mov	r3, r0
 80106b0:	4a20      	ldr	r2, [pc, #128]	; (8010734 <vTaskStartScheduler+0xbc>)
 80106b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80106b4:	4b1f      	ldr	r3, [pc, #124]	; (8010734 <vTaskStartScheduler+0xbc>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d002      	beq.n	80106c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80106bc:	2301      	movs	r3, #1
 80106be:	617b      	str	r3, [r7, #20]
 80106c0:	e001      	b.n	80106c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80106c2:	2300      	movs	r3, #0
 80106c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80106c6:	697b      	ldr	r3, [r7, #20]
 80106c8:	2b01      	cmp	r3, #1
 80106ca:	d102      	bne.n	80106d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80106cc:	f001 f832 	bl	8011734 <xTimerCreateTimerTask>
 80106d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	2b01      	cmp	r3, #1
 80106d6:	d116      	bne.n	8010706 <vTaskStartScheduler+0x8e>
	__asm volatile
 80106d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106dc:	f383 8811 	msr	BASEPRI, r3
 80106e0:	f3bf 8f6f 	isb	sy
 80106e4:	f3bf 8f4f 	dsb	sy
 80106e8:	613b      	str	r3, [r7, #16]
}
 80106ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80106ec:	4b12      	ldr	r3, [pc, #72]	; (8010738 <vTaskStartScheduler+0xc0>)
 80106ee:	f04f 32ff 	mov.w	r2, #4294967295
 80106f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80106f4:	4b11      	ldr	r3, [pc, #68]	; (801073c <vTaskStartScheduler+0xc4>)
 80106f6:	2201      	movs	r2, #1
 80106f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80106fa:	4b11      	ldr	r3, [pc, #68]	; (8010740 <vTaskStartScheduler+0xc8>)
 80106fc:	2200      	movs	r2, #0
 80106fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010700:	f001 fc6e 	bl	8011fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010704:	e00e      	b.n	8010724 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	f1b3 3fff 	cmp.w	r3, #4294967295
 801070c:	d10a      	bne.n	8010724 <vTaskStartScheduler+0xac>
	__asm volatile
 801070e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010712:	f383 8811 	msr	BASEPRI, r3
 8010716:	f3bf 8f6f 	isb	sy
 801071a:	f3bf 8f4f 	dsb	sy
 801071e:	60fb      	str	r3, [r7, #12]
}
 8010720:	bf00      	nop
 8010722:	e7fe      	b.n	8010722 <vTaskStartScheduler+0xaa>
}
 8010724:	bf00      	nop
 8010726:	3718      	adds	r7, #24
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}
 801072c:	08016014 	.word	0x08016014
 8010730:	08010d71 	.word	0x08010d71
 8010734:	20001994 	.word	0x20001994
 8010738:	20001990 	.word	0x20001990
 801073c:	2000197c 	.word	0x2000197c
 8010740:	20001974 	.word	0x20001974

08010744 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010744:	b480      	push	{r7}
 8010746:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010748:	4b04      	ldr	r3, [pc, #16]	; (801075c <vTaskSuspendAll+0x18>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	3301      	adds	r3, #1
 801074e:	4a03      	ldr	r2, [pc, #12]	; (801075c <vTaskSuspendAll+0x18>)
 8010750:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010752:	bf00      	nop
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr
 801075c:	20001998 	.word	0x20001998

08010760 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010766:	2300      	movs	r3, #0
 8010768:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801076a:	2300      	movs	r3, #0
 801076c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801076e:	4b41      	ldr	r3, [pc, #260]	; (8010874 <xTaskResumeAll+0x114>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d10a      	bne.n	801078c <xTaskResumeAll+0x2c>
	__asm volatile
 8010776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801077a:	f383 8811 	msr	BASEPRI, r3
 801077e:	f3bf 8f6f 	isb	sy
 8010782:	f3bf 8f4f 	dsb	sy
 8010786:	603b      	str	r3, [r7, #0]
}
 8010788:	bf00      	nop
 801078a:	e7fe      	b.n	801078a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801078c:	f001 fcca 	bl	8012124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010790:	4b38      	ldr	r3, [pc, #224]	; (8010874 <xTaskResumeAll+0x114>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	3b01      	subs	r3, #1
 8010796:	4a37      	ldr	r2, [pc, #220]	; (8010874 <xTaskResumeAll+0x114>)
 8010798:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801079a:	4b36      	ldr	r3, [pc, #216]	; (8010874 <xTaskResumeAll+0x114>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d161      	bne.n	8010866 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80107a2:	4b35      	ldr	r3, [pc, #212]	; (8010878 <xTaskResumeAll+0x118>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d05d      	beq.n	8010866 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80107aa:	e02e      	b.n	801080a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107ac:	4b33      	ldr	r3, [pc, #204]	; (801087c <xTaskResumeAll+0x11c>)
 80107ae:	68db      	ldr	r3, [r3, #12]
 80107b0:	68db      	ldr	r3, [r3, #12]
 80107b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	3318      	adds	r3, #24
 80107b8:	4618      	mov	r0, r3
 80107ba:	f7fe fd7f 	bl	800f2bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	3304      	adds	r3, #4
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7fe fd7a 	bl	800f2bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107cc:	2201      	movs	r2, #1
 80107ce:	409a      	lsls	r2, r3
 80107d0:	4b2b      	ldr	r3, [pc, #172]	; (8010880 <xTaskResumeAll+0x120>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	4313      	orrs	r3, r2
 80107d6:	4a2a      	ldr	r2, [pc, #168]	; (8010880 <xTaskResumeAll+0x120>)
 80107d8:	6013      	str	r3, [r2, #0]
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107de:	4613      	mov	r3, r2
 80107e0:	009b      	lsls	r3, r3, #2
 80107e2:	4413      	add	r3, r2
 80107e4:	009b      	lsls	r3, r3, #2
 80107e6:	4a27      	ldr	r2, [pc, #156]	; (8010884 <xTaskResumeAll+0x124>)
 80107e8:	441a      	add	r2, r3
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	3304      	adds	r3, #4
 80107ee:	4619      	mov	r1, r3
 80107f0:	4610      	mov	r0, r2
 80107f2:	f7fe fd06 	bl	800f202 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107fa:	4b23      	ldr	r3, [pc, #140]	; (8010888 <xTaskResumeAll+0x128>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010800:	429a      	cmp	r2, r3
 8010802:	d302      	bcc.n	801080a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010804:	4b21      	ldr	r3, [pc, #132]	; (801088c <xTaskResumeAll+0x12c>)
 8010806:	2201      	movs	r2, #1
 8010808:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801080a:	4b1c      	ldr	r3, [pc, #112]	; (801087c <xTaskResumeAll+0x11c>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d1cc      	bne.n	80107ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d001      	beq.n	801081c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010818:	f000 fb60 	bl	8010edc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801081c:	4b1c      	ldr	r3, [pc, #112]	; (8010890 <xTaskResumeAll+0x130>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d010      	beq.n	801084a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010828:	f000 f858 	bl	80108dc <xTaskIncrementTick>
 801082c:	4603      	mov	r3, r0
 801082e:	2b00      	cmp	r3, #0
 8010830:	d002      	beq.n	8010838 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8010832:	4b16      	ldr	r3, [pc, #88]	; (801088c <xTaskResumeAll+0x12c>)
 8010834:	2201      	movs	r2, #1
 8010836:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	3b01      	subs	r3, #1
 801083c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d1f1      	bne.n	8010828 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8010844:	4b12      	ldr	r3, [pc, #72]	; (8010890 <xTaskResumeAll+0x130>)
 8010846:	2200      	movs	r2, #0
 8010848:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801084a:	4b10      	ldr	r3, [pc, #64]	; (801088c <xTaskResumeAll+0x12c>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d009      	beq.n	8010866 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010852:	2301      	movs	r3, #1
 8010854:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010856:	4b0f      	ldr	r3, [pc, #60]	; (8010894 <xTaskResumeAll+0x134>)
 8010858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801085c:	601a      	str	r2, [r3, #0]
 801085e:	f3bf 8f4f 	dsb	sy
 8010862:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010866:	f001 fc8d 	bl	8012184 <vPortExitCritical>

	return xAlreadyYielded;
 801086a:	68bb      	ldr	r3, [r7, #8]
}
 801086c:	4618      	mov	r0, r3
 801086e:	3710      	adds	r7, #16
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	20001998 	.word	0x20001998
 8010878:	20001970 	.word	0x20001970
 801087c:	20001930 	.word	0x20001930
 8010880:	20001978 	.word	0x20001978
 8010884:	20001874 	.word	0x20001874
 8010888:	20001870 	.word	0x20001870
 801088c:	20001984 	.word	0x20001984
 8010890:	20001980 	.word	0x20001980
 8010894:	e000ed04 	.word	0xe000ed04

08010898 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010898:	b480      	push	{r7}
 801089a:	b083      	sub	sp, #12
 801089c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801089e:	4b05      	ldr	r3, [pc, #20]	; (80108b4 <xTaskGetTickCount+0x1c>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80108a4:	687b      	ldr	r3, [r7, #4]
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	370c      	adds	r7, #12
 80108aa:	46bd      	mov	sp, r7
 80108ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b0:	4770      	bx	lr
 80108b2:	bf00      	nop
 80108b4:	20001974 	.word	0x20001974

080108b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b082      	sub	sp, #8
 80108bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80108be:	f001 fd13 	bl	80122e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80108c2:	2300      	movs	r3, #0
 80108c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80108c6:	4b04      	ldr	r3, [pc, #16]	; (80108d8 <xTaskGetTickCountFromISR+0x20>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80108cc:	683b      	ldr	r3, [r7, #0]
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3708      	adds	r7, #8
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}
 80108d6:	bf00      	nop
 80108d8:	20001974 	.word	0x20001974

080108dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b086      	sub	sp, #24
 80108e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80108e2:	2300      	movs	r3, #0
 80108e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80108e6:	4b4e      	ldr	r3, [pc, #312]	; (8010a20 <xTaskIncrementTick+0x144>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	f040 808e 	bne.w	8010a0c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80108f0:	4b4c      	ldr	r3, [pc, #304]	; (8010a24 <xTaskIncrementTick+0x148>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	3301      	adds	r3, #1
 80108f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80108f8:	4a4a      	ldr	r2, [pc, #296]	; (8010a24 <xTaskIncrementTick+0x148>)
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d120      	bne.n	8010946 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010904:	4b48      	ldr	r3, [pc, #288]	; (8010a28 <xTaskIncrementTick+0x14c>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d00a      	beq.n	8010924 <xTaskIncrementTick+0x48>
	__asm volatile
 801090e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010912:	f383 8811 	msr	BASEPRI, r3
 8010916:	f3bf 8f6f 	isb	sy
 801091a:	f3bf 8f4f 	dsb	sy
 801091e:	603b      	str	r3, [r7, #0]
}
 8010920:	bf00      	nop
 8010922:	e7fe      	b.n	8010922 <xTaskIncrementTick+0x46>
 8010924:	4b40      	ldr	r3, [pc, #256]	; (8010a28 <xTaskIncrementTick+0x14c>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	60fb      	str	r3, [r7, #12]
 801092a:	4b40      	ldr	r3, [pc, #256]	; (8010a2c <xTaskIncrementTick+0x150>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	4a3e      	ldr	r2, [pc, #248]	; (8010a28 <xTaskIncrementTick+0x14c>)
 8010930:	6013      	str	r3, [r2, #0]
 8010932:	4a3e      	ldr	r2, [pc, #248]	; (8010a2c <xTaskIncrementTick+0x150>)
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	6013      	str	r3, [r2, #0]
 8010938:	4b3d      	ldr	r3, [pc, #244]	; (8010a30 <xTaskIncrementTick+0x154>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	3301      	adds	r3, #1
 801093e:	4a3c      	ldr	r2, [pc, #240]	; (8010a30 <xTaskIncrementTick+0x154>)
 8010940:	6013      	str	r3, [r2, #0]
 8010942:	f000 facb 	bl	8010edc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010946:	4b3b      	ldr	r3, [pc, #236]	; (8010a34 <xTaskIncrementTick+0x158>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	693a      	ldr	r2, [r7, #16]
 801094c:	429a      	cmp	r2, r3
 801094e:	d348      	bcc.n	80109e2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010950:	4b35      	ldr	r3, [pc, #212]	; (8010a28 <xTaskIncrementTick+0x14c>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d104      	bne.n	8010964 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801095a:	4b36      	ldr	r3, [pc, #216]	; (8010a34 <xTaskIncrementTick+0x158>)
 801095c:	f04f 32ff 	mov.w	r2, #4294967295
 8010960:	601a      	str	r2, [r3, #0]
					break;
 8010962:	e03e      	b.n	80109e2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010964:	4b30      	ldr	r3, [pc, #192]	; (8010a28 <xTaskIncrementTick+0x14c>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	68db      	ldr	r3, [r3, #12]
 801096a:	68db      	ldr	r3, [r3, #12]
 801096c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010974:	693a      	ldr	r2, [r7, #16]
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	429a      	cmp	r2, r3
 801097a:	d203      	bcs.n	8010984 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801097c:	4a2d      	ldr	r2, [pc, #180]	; (8010a34 <xTaskIncrementTick+0x158>)
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010982:	e02e      	b.n	80109e2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	3304      	adds	r3, #4
 8010988:	4618      	mov	r0, r3
 801098a:	f7fe fc97 	bl	800f2bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010992:	2b00      	cmp	r3, #0
 8010994:	d004      	beq.n	80109a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	3318      	adds	r3, #24
 801099a:	4618      	mov	r0, r3
 801099c:	f7fe fc8e 	bl	800f2bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109a4:	2201      	movs	r2, #1
 80109a6:	409a      	lsls	r2, r3
 80109a8:	4b23      	ldr	r3, [pc, #140]	; (8010a38 <xTaskIncrementTick+0x15c>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	4313      	orrs	r3, r2
 80109ae:	4a22      	ldr	r2, [pc, #136]	; (8010a38 <xTaskIncrementTick+0x15c>)
 80109b0:	6013      	str	r3, [r2, #0]
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109b6:	4613      	mov	r3, r2
 80109b8:	009b      	lsls	r3, r3, #2
 80109ba:	4413      	add	r3, r2
 80109bc:	009b      	lsls	r3, r3, #2
 80109be:	4a1f      	ldr	r2, [pc, #124]	; (8010a3c <xTaskIncrementTick+0x160>)
 80109c0:	441a      	add	r2, r3
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	3304      	adds	r3, #4
 80109c6:	4619      	mov	r1, r3
 80109c8:	4610      	mov	r0, r2
 80109ca:	f7fe fc1a 	bl	800f202 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109d2:	4b1b      	ldr	r3, [pc, #108]	; (8010a40 <xTaskIncrementTick+0x164>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109d8:	429a      	cmp	r2, r3
 80109da:	d3b9      	bcc.n	8010950 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80109dc:	2301      	movs	r3, #1
 80109de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80109e0:	e7b6      	b.n	8010950 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80109e2:	4b17      	ldr	r3, [pc, #92]	; (8010a40 <xTaskIncrementTick+0x164>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109e8:	4914      	ldr	r1, [pc, #80]	; (8010a3c <xTaskIncrementTick+0x160>)
 80109ea:	4613      	mov	r3, r2
 80109ec:	009b      	lsls	r3, r3, #2
 80109ee:	4413      	add	r3, r2
 80109f0:	009b      	lsls	r3, r3, #2
 80109f2:	440b      	add	r3, r1
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	2b01      	cmp	r3, #1
 80109f8:	d901      	bls.n	80109fe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80109fa:	2301      	movs	r3, #1
 80109fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80109fe:	4b11      	ldr	r3, [pc, #68]	; (8010a44 <xTaskIncrementTick+0x168>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d007      	beq.n	8010a16 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8010a06:	2301      	movs	r3, #1
 8010a08:	617b      	str	r3, [r7, #20]
 8010a0a:	e004      	b.n	8010a16 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010a0c:	4b0e      	ldr	r3, [pc, #56]	; (8010a48 <xTaskIncrementTick+0x16c>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	3301      	adds	r3, #1
 8010a12:	4a0d      	ldr	r2, [pc, #52]	; (8010a48 <xTaskIncrementTick+0x16c>)
 8010a14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010a16:	697b      	ldr	r3, [r7, #20]
}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	3718      	adds	r7, #24
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	20001998 	.word	0x20001998
 8010a24:	20001974 	.word	0x20001974
 8010a28:	20001928 	.word	0x20001928
 8010a2c:	2000192c 	.word	0x2000192c
 8010a30:	20001988 	.word	0x20001988
 8010a34:	20001990 	.word	0x20001990
 8010a38:	20001978 	.word	0x20001978
 8010a3c:	20001874 	.word	0x20001874
 8010a40:	20001870 	.word	0x20001870
 8010a44:	20001984 	.word	0x20001984
 8010a48:	20001980 	.word	0x20001980

08010a4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	b087      	sub	sp, #28
 8010a50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010a52:	4b27      	ldr	r3, [pc, #156]	; (8010af0 <vTaskSwitchContext+0xa4>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d003      	beq.n	8010a62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010a5a:	4b26      	ldr	r3, [pc, #152]	; (8010af4 <vTaskSwitchContext+0xa8>)
 8010a5c:	2201      	movs	r2, #1
 8010a5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010a60:	e03f      	b.n	8010ae2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8010a62:	4b24      	ldr	r3, [pc, #144]	; (8010af4 <vTaskSwitchContext+0xa8>)
 8010a64:	2200      	movs	r2, #0
 8010a66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a68:	4b23      	ldr	r3, [pc, #140]	; (8010af8 <vTaskSwitchContext+0xac>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	fab3 f383 	clz	r3, r3
 8010a74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010a76:	7afb      	ldrb	r3, [r7, #11]
 8010a78:	f1c3 031f 	rsb	r3, r3, #31
 8010a7c:	617b      	str	r3, [r7, #20]
 8010a7e:	491f      	ldr	r1, [pc, #124]	; (8010afc <vTaskSwitchContext+0xb0>)
 8010a80:	697a      	ldr	r2, [r7, #20]
 8010a82:	4613      	mov	r3, r2
 8010a84:	009b      	lsls	r3, r3, #2
 8010a86:	4413      	add	r3, r2
 8010a88:	009b      	lsls	r3, r3, #2
 8010a8a:	440b      	add	r3, r1
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d10a      	bne.n	8010aa8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8010a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a96:	f383 8811 	msr	BASEPRI, r3
 8010a9a:	f3bf 8f6f 	isb	sy
 8010a9e:	f3bf 8f4f 	dsb	sy
 8010aa2:	607b      	str	r3, [r7, #4]
}
 8010aa4:	bf00      	nop
 8010aa6:	e7fe      	b.n	8010aa6 <vTaskSwitchContext+0x5a>
 8010aa8:	697a      	ldr	r2, [r7, #20]
 8010aaa:	4613      	mov	r3, r2
 8010aac:	009b      	lsls	r3, r3, #2
 8010aae:	4413      	add	r3, r2
 8010ab0:	009b      	lsls	r3, r3, #2
 8010ab2:	4a12      	ldr	r2, [pc, #72]	; (8010afc <vTaskSwitchContext+0xb0>)
 8010ab4:	4413      	add	r3, r2
 8010ab6:	613b      	str	r3, [r7, #16]
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	685b      	ldr	r3, [r3, #4]
 8010abc:	685a      	ldr	r2, [r3, #4]
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	605a      	str	r2, [r3, #4]
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	685a      	ldr	r2, [r3, #4]
 8010ac6:	693b      	ldr	r3, [r7, #16]
 8010ac8:	3308      	adds	r3, #8
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d104      	bne.n	8010ad8 <vTaskSwitchContext+0x8c>
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	685a      	ldr	r2, [r3, #4]
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	605a      	str	r2, [r3, #4]
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	685b      	ldr	r3, [r3, #4]
 8010adc:	68db      	ldr	r3, [r3, #12]
 8010ade:	4a08      	ldr	r2, [pc, #32]	; (8010b00 <vTaskSwitchContext+0xb4>)
 8010ae0:	6013      	str	r3, [r2, #0]
}
 8010ae2:	bf00      	nop
 8010ae4:	371c      	adds	r7, #28
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aec:	4770      	bx	lr
 8010aee:	bf00      	nop
 8010af0:	20001998 	.word	0x20001998
 8010af4:	20001984 	.word	0x20001984
 8010af8:	20001978 	.word	0x20001978
 8010afc:	20001874 	.word	0x20001874
 8010b00:	20001870 	.word	0x20001870

08010b04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b084      	sub	sp, #16
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
 8010b0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d10a      	bne.n	8010b2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b18:	f383 8811 	msr	BASEPRI, r3
 8010b1c:	f3bf 8f6f 	isb	sy
 8010b20:	f3bf 8f4f 	dsb	sy
 8010b24:	60fb      	str	r3, [r7, #12]
}
 8010b26:	bf00      	nop
 8010b28:	e7fe      	b.n	8010b28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010b2a:	4b07      	ldr	r3, [pc, #28]	; (8010b48 <vTaskPlaceOnEventList+0x44>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	3318      	adds	r3, #24
 8010b30:	4619      	mov	r1, r3
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f7fe fb89 	bl	800f24a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010b38:	2101      	movs	r1, #1
 8010b3a:	6838      	ldr	r0, [r7, #0]
 8010b3c:	f000 fd94 	bl	8011668 <prvAddCurrentTaskToDelayedList>
}
 8010b40:	bf00      	nop
 8010b42:	3710      	adds	r7, #16
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}
 8010b48:	20001870 	.word	0x20001870

08010b4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b086      	sub	sp, #24
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d10a      	bne.n	8010b74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b62:	f383 8811 	msr	BASEPRI, r3
 8010b66:	f3bf 8f6f 	isb	sy
 8010b6a:	f3bf 8f4f 	dsb	sy
 8010b6e:	617b      	str	r3, [r7, #20]
}
 8010b70:	bf00      	nop
 8010b72:	e7fe      	b.n	8010b72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010b74:	4b0a      	ldr	r3, [pc, #40]	; (8010ba0 <vTaskPlaceOnEventListRestricted+0x54>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	3318      	adds	r3, #24
 8010b7a:	4619      	mov	r1, r3
 8010b7c:	68f8      	ldr	r0, [r7, #12]
 8010b7e:	f7fe fb40 	bl	800f202 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d002      	beq.n	8010b8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010b88:	f04f 33ff 	mov.w	r3, #4294967295
 8010b8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010b8e:	6879      	ldr	r1, [r7, #4]
 8010b90:	68b8      	ldr	r0, [r7, #8]
 8010b92:	f000 fd69 	bl	8011668 <prvAddCurrentTaskToDelayedList>
	}
 8010b96:	bf00      	nop
 8010b98:	3718      	adds	r7, #24
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	bf00      	nop
 8010ba0:	20001870 	.word	0x20001870

08010ba4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b086      	sub	sp, #24
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	68db      	ldr	r3, [r3, #12]
 8010bb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d10a      	bne.n	8010bd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bbe:	f383 8811 	msr	BASEPRI, r3
 8010bc2:	f3bf 8f6f 	isb	sy
 8010bc6:	f3bf 8f4f 	dsb	sy
 8010bca:	60fb      	str	r3, [r7, #12]
}
 8010bcc:	bf00      	nop
 8010bce:	e7fe      	b.n	8010bce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	3318      	adds	r3, #24
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7fe fb71 	bl	800f2bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010bda:	4b1d      	ldr	r3, [pc, #116]	; (8010c50 <xTaskRemoveFromEventList+0xac>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d11c      	bne.n	8010c1c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	3304      	adds	r3, #4
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7fe fb68 	bl	800f2bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bf0:	2201      	movs	r2, #1
 8010bf2:	409a      	lsls	r2, r3
 8010bf4:	4b17      	ldr	r3, [pc, #92]	; (8010c54 <xTaskRemoveFromEventList+0xb0>)
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	4313      	orrs	r3, r2
 8010bfa:	4a16      	ldr	r2, [pc, #88]	; (8010c54 <xTaskRemoveFromEventList+0xb0>)
 8010bfc:	6013      	str	r3, [r2, #0]
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c02:	4613      	mov	r3, r2
 8010c04:	009b      	lsls	r3, r3, #2
 8010c06:	4413      	add	r3, r2
 8010c08:	009b      	lsls	r3, r3, #2
 8010c0a:	4a13      	ldr	r2, [pc, #76]	; (8010c58 <xTaskRemoveFromEventList+0xb4>)
 8010c0c:	441a      	add	r2, r3
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	3304      	adds	r3, #4
 8010c12:	4619      	mov	r1, r3
 8010c14:	4610      	mov	r0, r2
 8010c16:	f7fe faf4 	bl	800f202 <vListInsertEnd>
 8010c1a:	e005      	b.n	8010c28 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	3318      	adds	r3, #24
 8010c20:	4619      	mov	r1, r3
 8010c22:	480e      	ldr	r0, [pc, #56]	; (8010c5c <xTaskRemoveFromEventList+0xb8>)
 8010c24:	f7fe faed 	bl	800f202 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c2c:	4b0c      	ldr	r3, [pc, #48]	; (8010c60 <xTaskRemoveFromEventList+0xbc>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d905      	bls.n	8010c42 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010c36:	2301      	movs	r3, #1
 8010c38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010c3a:	4b0a      	ldr	r3, [pc, #40]	; (8010c64 <xTaskRemoveFromEventList+0xc0>)
 8010c3c:	2201      	movs	r2, #1
 8010c3e:	601a      	str	r2, [r3, #0]
 8010c40:	e001      	b.n	8010c46 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8010c42:	2300      	movs	r3, #0
 8010c44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010c46:	697b      	ldr	r3, [r7, #20]
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3718      	adds	r7, #24
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	20001998 	.word	0x20001998
 8010c54:	20001978 	.word	0x20001978
 8010c58:	20001874 	.word	0x20001874
 8010c5c:	20001930 	.word	0x20001930
 8010c60:	20001870 	.word	0x20001870
 8010c64:	20001984 	.word	0x20001984

08010c68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010c68:	b480      	push	{r7}
 8010c6a:	b083      	sub	sp, #12
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010c70:	4b06      	ldr	r3, [pc, #24]	; (8010c8c <vTaskInternalSetTimeOutState+0x24>)
 8010c72:	681a      	ldr	r2, [r3, #0]
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010c78:	4b05      	ldr	r3, [pc, #20]	; (8010c90 <vTaskInternalSetTimeOutState+0x28>)
 8010c7a:	681a      	ldr	r2, [r3, #0]
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	605a      	str	r2, [r3, #4]
}
 8010c80:	bf00      	nop
 8010c82:	370c      	adds	r7, #12
 8010c84:	46bd      	mov	sp, r7
 8010c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8a:	4770      	bx	lr
 8010c8c:	20001988 	.word	0x20001988
 8010c90:	20001974 	.word	0x20001974

08010c94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b088      	sub	sp, #32
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d10a      	bne.n	8010cba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca8:	f383 8811 	msr	BASEPRI, r3
 8010cac:	f3bf 8f6f 	isb	sy
 8010cb0:	f3bf 8f4f 	dsb	sy
 8010cb4:	613b      	str	r3, [r7, #16]
}
 8010cb6:	bf00      	nop
 8010cb8:	e7fe      	b.n	8010cb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d10a      	bne.n	8010cd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc4:	f383 8811 	msr	BASEPRI, r3
 8010cc8:	f3bf 8f6f 	isb	sy
 8010ccc:	f3bf 8f4f 	dsb	sy
 8010cd0:	60fb      	str	r3, [r7, #12]
}
 8010cd2:	bf00      	nop
 8010cd4:	e7fe      	b.n	8010cd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010cd6:	f001 fa25 	bl	8012124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010cda:	4b1d      	ldr	r3, [pc, #116]	; (8010d50 <xTaskCheckForTimeOut+0xbc>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	69ba      	ldr	r2, [r7, #24]
 8010ce6:	1ad3      	subs	r3, r2, r3
 8010ce8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cf2:	d102      	bne.n	8010cfa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	61fb      	str	r3, [r7, #28]
 8010cf8:	e023      	b.n	8010d42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681a      	ldr	r2, [r3, #0]
 8010cfe:	4b15      	ldr	r3, [pc, #84]	; (8010d54 <xTaskCheckForTimeOut+0xc0>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	429a      	cmp	r2, r3
 8010d04:	d007      	beq.n	8010d16 <xTaskCheckForTimeOut+0x82>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	69ba      	ldr	r2, [r7, #24]
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d302      	bcc.n	8010d16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010d10:	2301      	movs	r3, #1
 8010d12:	61fb      	str	r3, [r7, #28]
 8010d14:	e015      	b.n	8010d42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	697a      	ldr	r2, [r7, #20]
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	d20b      	bcs.n	8010d38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	681a      	ldr	r2, [r3, #0]
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	1ad2      	subs	r2, r2, r3
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f7ff ff9b 	bl	8010c68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010d32:	2300      	movs	r3, #0
 8010d34:	61fb      	str	r3, [r7, #28]
 8010d36:	e004      	b.n	8010d42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010d3e:	2301      	movs	r3, #1
 8010d40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010d42:	f001 fa1f 	bl	8012184 <vPortExitCritical>

	return xReturn;
 8010d46:	69fb      	ldr	r3, [r7, #28]
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3720      	adds	r7, #32
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}
 8010d50:	20001974 	.word	0x20001974
 8010d54:	20001988 	.word	0x20001988

08010d58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010d58:	b480      	push	{r7}
 8010d5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010d5c:	4b03      	ldr	r3, [pc, #12]	; (8010d6c <vTaskMissedYield+0x14>)
 8010d5e:	2201      	movs	r2, #1
 8010d60:	601a      	str	r2, [r3, #0]
}
 8010d62:	bf00      	nop
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr
 8010d6c:	20001984 	.word	0x20001984

08010d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b082      	sub	sp, #8
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010d78:	f000 f852 	bl	8010e20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010d7c:	4b06      	ldr	r3, [pc, #24]	; (8010d98 <prvIdleTask+0x28>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	d9f9      	bls.n	8010d78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010d84:	4b05      	ldr	r3, [pc, #20]	; (8010d9c <prvIdleTask+0x2c>)
 8010d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d8a:	601a      	str	r2, [r3, #0]
 8010d8c:	f3bf 8f4f 	dsb	sy
 8010d90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010d94:	e7f0      	b.n	8010d78 <prvIdleTask+0x8>
 8010d96:	bf00      	nop
 8010d98:	20001874 	.word	0x20001874
 8010d9c:	e000ed04 	.word	0xe000ed04

08010da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010da6:	2300      	movs	r3, #0
 8010da8:	607b      	str	r3, [r7, #4]
 8010daa:	e00c      	b.n	8010dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010dac:	687a      	ldr	r2, [r7, #4]
 8010dae:	4613      	mov	r3, r2
 8010db0:	009b      	lsls	r3, r3, #2
 8010db2:	4413      	add	r3, r2
 8010db4:	009b      	lsls	r3, r3, #2
 8010db6:	4a12      	ldr	r2, [pc, #72]	; (8010e00 <prvInitialiseTaskLists+0x60>)
 8010db8:	4413      	add	r3, r2
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7fe f9f4 	bl	800f1a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	607b      	str	r3, [r7, #4]
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2b06      	cmp	r3, #6
 8010dca:	d9ef      	bls.n	8010dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010dcc:	480d      	ldr	r0, [pc, #52]	; (8010e04 <prvInitialiseTaskLists+0x64>)
 8010dce:	f7fe f9eb 	bl	800f1a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010dd2:	480d      	ldr	r0, [pc, #52]	; (8010e08 <prvInitialiseTaskLists+0x68>)
 8010dd4:	f7fe f9e8 	bl	800f1a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010dd8:	480c      	ldr	r0, [pc, #48]	; (8010e0c <prvInitialiseTaskLists+0x6c>)
 8010dda:	f7fe f9e5 	bl	800f1a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010dde:	480c      	ldr	r0, [pc, #48]	; (8010e10 <prvInitialiseTaskLists+0x70>)
 8010de0:	f7fe f9e2 	bl	800f1a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010de4:	480b      	ldr	r0, [pc, #44]	; (8010e14 <prvInitialiseTaskLists+0x74>)
 8010de6:	f7fe f9df 	bl	800f1a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010dea:	4b0b      	ldr	r3, [pc, #44]	; (8010e18 <prvInitialiseTaskLists+0x78>)
 8010dec:	4a05      	ldr	r2, [pc, #20]	; (8010e04 <prvInitialiseTaskLists+0x64>)
 8010dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010df0:	4b0a      	ldr	r3, [pc, #40]	; (8010e1c <prvInitialiseTaskLists+0x7c>)
 8010df2:	4a05      	ldr	r2, [pc, #20]	; (8010e08 <prvInitialiseTaskLists+0x68>)
 8010df4:	601a      	str	r2, [r3, #0]
}
 8010df6:	bf00      	nop
 8010df8:	3708      	adds	r7, #8
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
 8010dfe:	bf00      	nop
 8010e00:	20001874 	.word	0x20001874
 8010e04:	20001900 	.word	0x20001900
 8010e08:	20001914 	.word	0x20001914
 8010e0c:	20001930 	.word	0x20001930
 8010e10:	20001944 	.word	0x20001944
 8010e14:	2000195c 	.word	0x2000195c
 8010e18:	20001928 	.word	0x20001928
 8010e1c:	2000192c 	.word	0x2000192c

08010e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010e26:	e019      	b.n	8010e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010e28:	f001 f97c 	bl	8012124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e2c:	4b10      	ldr	r3, [pc, #64]	; (8010e70 <prvCheckTasksWaitingTermination+0x50>)
 8010e2e:	68db      	ldr	r3, [r3, #12]
 8010e30:	68db      	ldr	r3, [r3, #12]
 8010e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	3304      	adds	r3, #4
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7fe fa3f 	bl	800f2bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010e3e:	4b0d      	ldr	r3, [pc, #52]	; (8010e74 <prvCheckTasksWaitingTermination+0x54>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	3b01      	subs	r3, #1
 8010e44:	4a0b      	ldr	r2, [pc, #44]	; (8010e74 <prvCheckTasksWaitingTermination+0x54>)
 8010e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010e48:	4b0b      	ldr	r3, [pc, #44]	; (8010e78 <prvCheckTasksWaitingTermination+0x58>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	3b01      	subs	r3, #1
 8010e4e:	4a0a      	ldr	r2, [pc, #40]	; (8010e78 <prvCheckTasksWaitingTermination+0x58>)
 8010e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010e52:	f001 f997 	bl	8012184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010e56:	6878      	ldr	r0, [r7, #4]
 8010e58:	f000 f810 	bl	8010e7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010e5c:	4b06      	ldr	r3, [pc, #24]	; (8010e78 <prvCheckTasksWaitingTermination+0x58>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d1e1      	bne.n	8010e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010e64:	bf00      	nop
 8010e66:	bf00      	nop
 8010e68:	3708      	adds	r7, #8
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}
 8010e6e:	bf00      	nop
 8010e70:	20001944 	.word	0x20001944
 8010e74:	20001970 	.word	0x20001970
 8010e78:	20001958 	.word	0x20001958

08010e7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b084      	sub	sp, #16
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d108      	bne.n	8010ea0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e92:	4618      	mov	r0, r3
 8010e94:	f001 fb34 	bl	8012500 <vPortFree>
				vPortFree( pxTCB );
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f001 fb31 	bl	8012500 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010e9e:	e018      	b.n	8010ed2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010ea6:	2b01      	cmp	r3, #1
 8010ea8:	d103      	bne.n	8010eb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010eaa:	6878      	ldr	r0, [r7, #4]
 8010eac:	f001 fb28 	bl	8012500 <vPortFree>
	}
 8010eb0:	e00f      	b.n	8010ed2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010eb8:	2b02      	cmp	r3, #2
 8010eba:	d00a      	beq.n	8010ed2 <prvDeleteTCB+0x56>
	__asm volatile
 8010ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec0:	f383 8811 	msr	BASEPRI, r3
 8010ec4:	f3bf 8f6f 	isb	sy
 8010ec8:	f3bf 8f4f 	dsb	sy
 8010ecc:	60fb      	str	r3, [r7, #12]
}
 8010ece:	bf00      	nop
 8010ed0:	e7fe      	b.n	8010ed0 <prvDeleteTCB+0x54>
	}
 8010ed2:	bf00      	nop
 8010ed4:	3710      	adds	r7, #16
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
	...

08010edc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010edc:	b480      	push	{r7}
 8010ede:	b083      	sub	sp, #12
 8010ee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010ee2:	4b0c      	ldr	r3, [pc, #48]	; (8010f14 <prvResetNextTaskUnblockTime+0x38>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d104      	bne.n	8010ef6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010eec:	4b0a      	ldr	r3, [pc, #40]	; (8010f18 <prvResetNextTaskUnblockTime+0x3c>)
 8010eee:	f04f 32ff 	mov.w	r2, #4294967295
 8010ef2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010ef4:	e008      	b.n	8010f08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ef6:	4b07      	ldr	r3, [pc, #28]	; (8010f14 <prvResetNextTaskUnblockTime+0x38>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	68db      	ldr	r3, [r3, #12]
 8010efc:	68db      	ldr	r3, [r3, #12]
 8010efe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	685b      	ldr	r3, [r3, #4]
 8010f04:	4a04      	ldr	r2, [pc, #16]	; (8010f18 <prvResetNextTaskUnblockTime+0x3c>)
 8010f06:	6013      	str	r3, [r2, #0]
}
 8010f08:	bf00      	nop
 8010f0a:	370c      	adds	r7, #12
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f12:	4770      	bx	lr
 8010f14:	20001928 	.word	0x20001928
 8010f18:	20001990 	.word	0x20001990

08010f1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010f1c:	b480      	push	{r7}
 8010f1e:	b083      	sub	sp, #12
 8010f20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010f22:	4b0b      	ldr	r3, [pc, #44]	; (8010f50 <xTaskGetSchedulerState+0x34>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d102      	bne.n	8010f30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	607b      	str	r3, [r7, #4]
 8010f2e:	e008      	b.n	8010f42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f30:	4b08      	ldr	r3, [pc, #32]	; (8010f54 <xTaskGetSchedulerState+0x38>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d102      	bne.n	8010f3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010f38:	2302      	movs	r3, #2
 8010f3a:	607b      	str	r3, [r7, #4]
 8010f3c:	e001      	b.n	8010f42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010f42:	687b      	ldr	r3, [r7, #4]
	}
 8010f44:	4618      	mov	r0, r3
 8010f46:	370c      	adds	r7, #12
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4e:	4770      	bx	lr
 8010f50:	2000197c 	.word	0x2000197c
 8010f54:	20001998 	.word	0x20001998

08010f58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b084      	sub	sp, #16
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010f64:	2300      	movs	r3, #0
 8010f66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d05e      	beq.n	801102c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f72:	4b31      	ldr	r3, [pc, #196]	; (8011038 <xTaskPriorityInherit+0xe0>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	d24e      	bcs.n	801101a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	699b      	ldr	r3, [r3, #24]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	db06      	blt.n	8010f92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f84:	4b2c      	ldr	r3, [pc, #176]	; (8011038 <xTaskPriorityInherit+0xe0>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f8a:	f1c3 0207 	rsb	r2, r3, #7
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	6959      	ldr	r1, [r3, #20]
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f9a:	4613      	mov	r3, r2
 8010f9c:	009b      	lsls	r3, r3, #2
 8010f9e:	4413      	add	r3, r2
 8010fa0:	009b      	lsls	r3, r3, #2
 8010fa2:	4a26      	ldr	r2, [pc, #152]	; (801103c <xTaskPriorityInherit+0xe4>)
 8010fa4:	4413      	add	r3, r2
 8010fa6:	4299      	cmp	r1, r3
 8010fa8:	d12f      	bne.n	801100a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	3304      	adds	r3, #4
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f7fe f984 	bl	800f2bc <uxListRemove>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d10a      	bne.n	8010fd0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fbe:	2201      	movs	r2, #1
 8010fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8010fc4:	43da      	mvns	r2, r3
 8010fc6:	4b1e      	ldr	r3, [pc, #120]	; (8011040 <xTaskPriorityInherit+0xe8>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	4013      	ands	r3, r2
 8010fcc:	4a1c      	ldr	r2, [pc, #112]	; (8011040 <xTaskPriorityInherit+0xe8>)
 8010fce:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010fd0:	4b19      	ldr	r3, [pc, #100]	; (8011038 <xTaskPriorityInherit+0xe0>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010fda:	68bb      	ldr	r3, [r7, #8]
 8010fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fde:	2201      	movs	r2, #1
 8010fe0:	409a      	lsls	r2, r3
 8010fe2:	4b17      	ldr	r3, [pc, #92]	; (8011040 <xTaskPriorityInherit+0xe8>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	4313      	orrs	r3, r2
 8010fe8:	4a15      	ldr	r2, [pc, #84]	; (8011040 <xTaskPriorityInherit+0xe8>)
 8010fea:	6013      	str	r3, [r2, #0]
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ff0:	4613      	mov	r3, r2
 8010ff2:	009b      	lsls	r3, r3, #2
 8010ff4:	4413      	add	r3, r2
 8010ff6:	009b      	lsls	r3, r3, #2
 8010ff8:	4a10      	ldr	r2, [pc, #64]	; (801103c <xTaskPriorityInherit+0xe4>)
 8010ffa:	441a      	add	r2, r3
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	3304      	adds	r3, #4
 8011000:	4619      	mov	r1, r3
 8011002:	4610      	mov	r0, r2
 8011004:	f7fe f8fd 	bl	800f202 <vListInsertEnd>
 8011008:	e004      	b.n	8011014 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801100a:	4b0b      	ldr	r3, [pc, #44]	; (8011038 <xTaskPriorityInherit+0xe0>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011014:	2301      	movs	r3, #1
 8011016:	60fb      	str	r3, [r7, #12]
 8011018:	e008      	b.n	801102c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801101a:	68bb      	ldr	r3, [r7, #8]
 801101c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801101e:	4b06      	ldr	r3, [pc, #24]	; (8011038 <xTaskPriorityInherit+0xe0>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011024:	429a      	cmp	r2, r3
 8011026:	d201      	bcs.n	801102c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011028:	2301      	movs	r3, #1
 801102a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801102c:	68fb      	ldr	r3, [r7, #12]
	}
 801102e:	4618      	mov	r0, r3
 8011030:	3710      	adds	r7, #16
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}
 8011036:	bf00      	nop
 8011038:	20001870 	.word	0x20001870
 801103c:	20001874 	.word	0x20001874
 8011040:	20001978 	.word	0x20001978

08011044 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011044:	b580      	push	{r7, lr}
 8011046:	b086      	sub	sp, #24
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011050:	2300      	movs	r3, #0
 8011052:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d06e      	beq.n	8011138 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801105a:	4b3a      	ldr	r3, [pc, #232]	; (8011144 <xTaskPriorityDisinherit+0x100>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	693a      	ldr	r2, [r7, #16]
 8011060:	429a      	cmp	r2, r3
 8011062:	d00a      	beq.n	801107a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011068:	f383 8811 	msr	BASEPRI, r3
 801106c:	f3bf 8f6f 	isb	sy
 8011070:	f3bf 8f4f 	dsb	sy
 8011074:	60fb      	str	r3, [r7, #12]
}
 8011076:	bf00      	nop
 8011078:	e7fe      	b.n	8011078 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801107e:	2b00      	cmp	r3, #0
 8011080:	d10a      	bne.n	8011098 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011086:	f383 8811 	msr	BASEPRI, r3
 801108a:	f3bf 8f6f 	isb	sy
 801108e:	f3bf 8f4f 	dsb	sy
 8011092:	60bb      	str	r3, [r7, #8]
}
 8011094:	bf00      	nop
 8011096:	e7fe      	b.n	8011096 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011098:	693b      	ldr	r3, [r7, #16]
 801109a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801109c:	1e5a      	subs	r2, r3, #1
 801109e:	693b      	ldr	r3, [r7, #16]
 80110a0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d044      	beq.n	8011138 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80110ae:	693b      	ldr	r3, [r7, #16]
 80110b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d140      	bne.n	8011138 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80110b6:	693b      	ldr	r3, [r7, #16]
 80110b8:	3304      	adds	r3, #4
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7fe f8fe 	bl	800f2bc <uxListRemove>
 80110c0:	4603      	mov	r3, r0
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d115      	bne.n	80110f2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80110c6:	693b      	ldr	r3, [r7, #16]
 80110c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110ca:	491f      	ldr	r1, [pc, #124]	; (8011148 <xTaskPriorityDisinherit+0x104>)
 80110cc:	4613      	mov	r3, r2
 80110ce:	009b      	lsls	r3, r3, #2
 80110d0:	4413      	add	r3, r2
 80110d2:	009b      	lsls	r3, r3, #2
 80110d4:	440b      	add	r3, r1
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d10a      	bne.n	80110f2 <xTaskPriorityDisinherit+0xae>
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110e0:	2201      	movs	r2, #1
 80110e2:	fa02 f303 	lsl.w	r3, r2, r3
 80110e6:	43da      	mvns	r2, r3
 80110e8:	4b18      	ldr	r3, [pc, #96]	; (801114c <xTaskPriorityDisinherit+0x108>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	4013      	ands	r3, r2
 80110ee:	4a17      	ldr	r2, [pc, #92]	; (801114c <xTaskPriorityDisinherit+0x108>)
 80110f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80110f2:	693b      	ldr	r3, [r7, #16]
 80110f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80110f6:	693b      	ldr	r3, [r7, #16]
 80110f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110fa:	693b      	ldr	r3, [r7, #16]
 80110fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110fe:	f1c3 0207 	rsb	r2, r3, #7
 8011102:	693b      	ldr	r3, [r7, #16]
 8011104:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011106:	693b      	ldr	r3, [r7, #16]
 8011108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801110a:	2201      	movs	r2, #1
 801110c:	409a      	lsls	r2, r3
 801110e:	4b0f      	ldr	r3, [pc, #60]	; (801114c <xTaskPriorityDisinherit+0x108>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	4313      	orrs	r3, r2
 8011114:	4a0d      	ldr	r2, [pc, #52]	; (801114c <xTaskPriorityDisinherit+0x108>)
 8011116:	6013      	str	r3, [r2, #0]
 8011118:	693b      	ldr	r3, [r7, #16]
 801111a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801111c:	4613      	mov	r3, r2
 801111e:	009b      	lsls	r3, r3, #2
 8011120:	4413      	add	r3, r2
 8011122:	009b      	lsls	r3, r3, #2
 8011124:	4a08      	ldr	r2, [pc, #32]	; (8011148 <xTaskPriorityDisinherit+0x104>)
 8011126:	441a      	add	r2, r3
 8011128:	693b      	ldr	r3, [r7, #16]
 801112a:	3304      	adds	r3, #4
 801112c:	4619      	mov	r1, r3
 801112e:	4610      	mov	r0, r2
 8011130:	f7fe f867 	bl	800f202 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011134:	2301      	movs	r3, #1
 8011136:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011138:	697b      	ldr	r3, [r7, #20]
	}
 801113a:	4618      	mov	r0, r3
 801113c:	3718      	adds	r7, #24
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	20001870 	.word	0x20001870
 8011148:	20001874 	.word	0x20001874
 801114c:	20001978 	.word	0x20001978

08011150 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011150:	b580      	push	{r7, lr}
 8011152:	b088      	sub	sp, #32
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
 8011158:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801115e:	2301      	movs	r3, #1
 8011160:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d077      	beq.n	8011258 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011168:	69bb      	ldr	r3, [r7, #24]
 801116a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801116c:	2b00      	cmp	r3, #0
 801116e:	d10a      	bne.n	8011186 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011174:	f383 8811 	msr	BASEPRI, r3
 8011178:	f3bf 8f6f 	isb	sy
 801117c:	f3bf 8f4f 	dsb	sy
 8011180:	60fb      	str	r3, [r7, #12]
}
 8011182:	bf00      	nop
 8011184:	e7fe      	b.n	8011184 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011186:	69bb      	ldr	r3, [r7, #24]
 8011188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801118a:	683a      	ldr	r2, [r7, #0]
 801118c:	429a      	cmp	r2, r3
 801118e:	d902      	bls.n	8011196 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	61fb      	str	r3, [r7, #28]
 8011194:	e002      	b.n	801119c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011196:	69bb      	ldr	r3, [r7, #24]
 8011198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801119a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801119c:	69bb      	ldr	r3, [r7, #24]
 801119e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111a0:	69fa      	ldr	r2, [r7, #28]
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d058      	beq.n	8011258 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80111a6:	69bb      	ldr	r3, [r7, #24]
 80111a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80111aa:	697a      	ldr	r2, [r7, #20]
 80111ac:	429a      	cmp	r2, r3
 80111ae:	d153      	bne.n	8011258 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80111b0:	4b2b      	ldr	r3, [pc, #172]	; (8011260 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	69ba      	ldr	r2, [r7, #24]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d10a      	bne.n	80111d0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80111ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111be:	f383 8811 	msr	BASEPRI, r3
 80111c2:	f3bf 8f6f 	isb	sy
 80111c6:	f3bf 8f4f 	dsb	sy
 80111ca:	60bb      	str	r3, [r7, #8]
}
 80111cc:	bf00      	nop
 80111ce:	e7fe      	b.n	80111ce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80111d0:	69bb      	ldr	r3, [r7, #24]
 80111d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80111d6:	69bb      	ldr	r3, [r7, #24]
 80111d8:	69fa      	ldr	r2, [r7, #28]
 80111da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80111dc:	69bb      	ldr	r3, [r7, #24]
 80111de:	699b      	ldr	r3, [r3, #24]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	db04      	blt.n	80111ee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80111e4:	69fb      	ldr	r3, [r7, #28]
 80111e6:	f1c3 0207 	rsb	r2, r3, #7
 80111ea:	69bb      	ldr	r3, [r7, #24]
 80111ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80111ee:	69bb      	ldr	r3, [r7, #24]
 80111f0:	6959      	ldr	r1, [r3, #20]
 80111f2:	693a      	ldr	r2, [r7, #16]
 80111f4:	4613      	mov	r3, r2
 80111f6:	009b      	lsls	r3, r3, #2
 80111f8:	4413      	add	r3, r2
 80111fa:	009b      	lsls	r3, r3, #2
 80111fc:	4a19      	ldr	r2, [pc, #100]	; (8011264 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80111fe:	4413      	add	r3, r2
 8011200:	4299      	cmp	r1, r3
 8011202:	d129      	bne.n	8011258 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011204:	69bb      	ldr	r3, [r7, #24]
 8011206:	3304      	adds	r3, #4
 8011208:	4618      	mov	r0, r3
 801120a:	f7fe f857 	bl	800f2bc <uxListRemove>
 801120e:	4603      	mov	r3, r0
 8011210:	2b00      	cmp	r3, #0
 8011212:	d10a      	bne.n	801122a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011214:	69bb      	ldr	r3, [r7, #24]
 8011216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011218:	2201      	movs	r2, #1
 801121a:	fa02 f303 	lsl.w	r3, r2, r3
 801121e:	43da      	mvns	r2, r3
 8011220:	4b11      	ldr	r3, [pc, #68]	; (8011268 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	4013      	ands	r3, r2
 8011226:	4a10      	ldr	r2, [pc, #64]	; (8011268 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011228:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801122a:	69bb      	ldr	r3, [r7, #24]
 801122c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801122e:	2201      	movs	r2, #1
 8011230:	409a      	lsls	r2, r3
 8011232:	4b0d      	ldr	r3, [pc, #52]	; (8011268 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	4313      	orrs	r3, r2
 8011238:	4a0b      	ldr	r2, [pc, #44]	; (8011268 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801123a:	6013      	str	r3, [r2, #0]
 801123c:	69bb      	ldr	r3, [r7, #24]
 801123e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011240:	4613      	mov	r3, r2
 8011242:	009b      	lsls	r3, r3, #2
 8011244:	4413      	add	r3, r2
 8011246:	009b      	lsls	r3, r3, #2
 8011248:	4a06      	ldr	r2, [pc, #24]	; (8011264 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801124a:	441a      	add	r2, r3
 801124c:	69bb      	ldr	r3, [r7, #24]
 801124e:	3304      	adds	r3, #4
 8011250:	4619      	mov	r1, r3
 8011252:	4610      	mov	r0, r2
 8011254:	f7fd ffd5 	bl	800f202 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011258:	bf00      	nop
 801125a:	3720      	adds	r7, #32
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}
 8011260:	20001870 	.word	0x20001870
 8011264:	20001874 	.word	0x20001874
 8011268:	20001978 	.word	0x20001978

0801126c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801126c:	b480      	push	{r7}
 801126e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011270:	4b07      	ldr	r3, [pc, #28]	; (8011290 <pvTaskIncrementMutexHeldCount+0x24>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d004      	beq.n	8011282 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011278:	4b05      	ldr	r3, [pc, #20]	; (8011290 <pvTaskIncrementMutexHeldCount+0x24>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801127e:	3201      	adds	r2, #1
 8011280:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011282:	4b03      	ldr	r3, [pc, #12]	; (8011290 <pvTaskIncrementMutexHeldCount+0x24>)
 8011284:	681b      	ldr	r3, [r3, #0]
	}
 8011286:	4618      	mov	r0, r3
 8011288:	46bd      	mov	sp, r7
 801128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128e:	4770      	bx	lr
 8011290:	20001870 	.word	0x20001870

08011294 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011294:	b580      	push	{r7, lr}
 8011296:	b086      	sub	sp, #24
 8011298:	af00      	add	r7, sp, #0
 801129a:	60f8      	str	r0, [r7, #12]
 801129c:	60b9      	str	r1, [r7, #8]
 801129e:	607a      	str	r2, [r7, #4]
 80112a0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80112a2:	f000 ff3f 	bl	8012124 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80112a6:	4b26      	ldr	r3, [pc, #152]	; (8011340 <xTaskNotifyWait+0xac>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80112ae:	b2db      	uxtb	r3, r3
 80112b0:	2b02      	cmp	r3, #2
 80112b2:	d01a      	beq.n	80112ea <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80112b4:	4b22      	ldr	r3, [pc, #136]	; (8011340 <xTaskNotifyWait+0xac>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80112ba:	68fa      	ldr	r2, [r7, #12]
 80112bc:	43d2      	mvns	r2, r2
 80112be:	400a      	ands	r2, r1
 80112c0:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80112c2:	4b1f      	ldr	r3, [pc, #124]	; (8011340 <xTaskNotifyWait+0xac>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	2201      	movs	r2, #1
 80112c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d00b      	beq.n	80112ea <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80112d2:	2101      	movs	r1, #1
 80112d4:	6838      	ldr	r0, [r7, #0]
 80112d6:	f000 f9c7 	bl	8011668 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80112da:	4b1a      	ldr	r3, [pc, #104]	; (8011344 <xTaskNotifyWait+0xb0>)
 80112dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112e0:	601a      	str	r2, [r3, #0]
 80112e2:	f3bf 8f4f 	dsb	sy
 80112e6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80112ea:	f000 ff4b 	bl	8012184 <vPortExitCritical>

		taskENTER_CRITICAL();
 80112ee:	f000 ff19 	bl	8012124 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d004      	beq.n	8011302 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80112f8:	4b11      	ldr	r3, [pc, #68]	; (8011340 <xTaskNotifyWait+0xac>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011302:	4b0f      	ldr	r3, [pc, #60]	; (8011340 <xTaskNotifyWait+0xac>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801130a:	b2db      	uxtb	r3, r3
 801130c:	2b02      	cmp	r3, #2
 801130e:	d002      	beq.n	8011316 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8011310:	2300      	movs	r3, #0
 8011312:	617b      	str	r3, [r7, #20]
 8011314:	e008      	b.n	8011328 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011316:	4b0a      	ldr	r3, [pc, #40]	; (8011340 <xTaskNotifyWait+0xac>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801131c:	68ba      	ldr	r2, [r7, #8]
 801131e:	43d2      	mvns	r2, r2
 8011320:	400a      	ands	r2, r1
 8011322:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8011324:	2301      	movs	r3, #1
 8011326:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011328:	4b05      	ldr	r3, [pc, #20]	; (8011340 <xTaskNotifyWait+0xac>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	2200      	movs	r2, #0
 801132e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8011332:	f000 ff27 	bl	8012184 <vPortExitCritical>

		return xReturn;
 8011336:	697b      	ldr	r3, [r7, #20]
	}
 8011338:	4618      	mov	r0, r3
 801133a:	3718      	adds	r7, #24
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}
 8011340:	20001870 	.word	0x20001870
 8011344:	e000ed04 	.word	0xe000ed04

08011348 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011348:	b580      	push	{r7, lr}
 801134a:	b08a      	sub	sp, #40	; 0x28
 801134c:	af00      	add	r7, sp, #0
 801134e:	60f8      	str	r0, [r7, #12]
 8011350:	60b9      	str	r1, [r7, #8]
 8011352:	603b      	str	r3, [r7, #0]
 8011354:	4613      	mov	r3, r2
 8011356:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011358:	2301      	movs	r3, #1
 801135a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d10a      	bne.n	8011378 <xTaskGenericNotify+0x30>
	__asm volatile
 8011362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011366:	f383 8811 	msr	BASEPRI, r3
 801136a:	f3bf 8f6f 	isb	sy
 801136e:	f3bf 8f4f 	dsb	sy
 8011372:	61bb      	str	r3, [r7, #24]
}
 8011374:	bf00      	nop
 8011376:	e7fe      	b.n	8011376 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801137c:	f000 fed2 	bl	8012124 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d003      	beq.n	801138e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011386:	6a3b      	ldr	r3, [r7, #32]
 8011388:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801138e:	6a3b      	ldr	r3, [r7, #32]
 8011390:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011394:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011396:	6a3b      	ldr	r3, [r7, #32]
 8011398:	2202      	movs	r2, #2
 801139a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 801139e:	79fb      	ldrb	r3, [r7, #7]
 80113a0:	2b04      	cmp	r3, #4
 80113a2:	d828      	bhi.n	80113f6 <xTaskGenericNotify+0xae>
 80113a4:	a201      	add	r2, pc, #4	; (adr r2, 80113ac <xTaskGenericNotify+0x64>)
 80113a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113aa:	bf00      	nop
 80113ac:	08011417 	.word	0x08011417
 80113b0:	080113c1 	.word	0x080113c1
 80113b4:	080113cf 	.word	0x080113cf
 80113b8:	080113db 	.word	0x080113db
 80113bc:	080113e3 	.word	0x080113e3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80113c0:	6a3b      	ldr	r3, [r7, #32]
 80113c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	431a      	orrs	r2, r3
 80113c8:	6a3b      	ldr	r3, [r7, #32]
 80113ca:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80113cc:	e026      	b.n	801141c <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80113ce:	6a3b      	ldr	r3, [r7, #32]
 80113d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80113d2:	1c5a      	adds	r2, r3, #1
 80113d4:	6a3b      	ldr	r3, [r7, #32]
 80113d6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80113d8:	e020      	b.n	801141c <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80113da:	6a3b      	ldr	r3, [r7, #32]
 80113dc:	68ba      	ldr	r2, [r7, #8]
 80113de:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80113e0:	e01c      	b.n	801141c <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80113e2:	7ffb      	ldrb	r3, [r7, #31]
 80113e4:	2b02      	cmp	r3, #2
 80113e6:	d003      	beq.n	80113f0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80113e8:	6a3b      	ldr	r3, [r7, #32]
 80113ea:	68ba      	ldr	r2, [r7, #8]
 80113ec:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80113ee:	e015      	b.n	801141c <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 80113f0:	2300      	movs	r3, #0
 80113f2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80113f4:	e012      	b.n	801141c <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80113f6:	6a3b      	ldr	r3, [r7, #32]
 80113f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80113fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113fe:	d00c      	beq.n	801141a <xTaskGenericNotify+0xd2>
	__asm volatile
 8011400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011404:	f383 8811 	msr	BASEPRI, r3
 8011408:	f3bf 8f6f 	isb	sy
 801140c:	f3bf 8f4f 	dsb	sy
 8011410:	617b      	str	r3, [r7, #20]
}
 8011412:	bf00      	nop
 8011414:	e7fe      	b.n	8011414 <xTaskGenericNotify+0xcc>
					break;
 8011416:	bf00      	nop
 8011418:	e000      	b.n	801141c <xTaskGenericNotify+0xd4>

					break;
 801141a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801141c:	7ffb      	ldrb	r3, [r7, #31]
 801141e:	2b01      	cmp	r3, #1
 8011420:	d139      	bne.n	8011496 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011422:	6a3b      	ldr	r3, [r7, #32]
 8011424:	3304      	adds	r3, #4
 8011426:	4618      	mov	r0, r3
 8011428:	f7fd ff48 	bl	800f2bc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801142c:	6a3b      	ldr	r3, [r7, #32]
 801142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011430:	2201      	movs	r2, #1
 8011432:	409a      	lsls	r2, r3
 8011434:	4b1b      	ldr	r3, [pc, #108]	; (80114a4 <xTaskGenericNotify+0x15c>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	4313      	orrs	r3, r2
 801143a:	4a1a      	ldr	r2, [pc, #104]	; (80114a4 <xTaskGenericNotify+0x15c>)
 801143c:	6013      	str	r3, [r2, #0]
 801143e:	6a3b      	ldr	r3, [r7, #32]
 8011440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011442:	4613      	mov	r3, r2
 8011444:	009b      	lsls	r3, r3, #2
 8011446:	4413      	add	r3, r2
 8011448:	009b      	lsls	r3, r3, #2
 801144a:	4a17      	ldr	r2, [pc, #92]	; (80114a8 <xTaskGenericNotify+0x160>)
 801144c:	441a      	add	r2, r3
 801144e:	6a3b      	ldr	r3, [r7, #32]
 8011450:	3304      	adds	r3, #4
 8011452:	4619      	mov	r1, r3
 8011454:	4610      	mov	r0, r2
 8011456:	f7fd fed4 	bl	800f202 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801145a:	6a3b      	ldr	r3, [r7, #32]
 801145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801145e:	2b00      	cmp	r3, #0
 8011460:	d00a      	beq.n	8011478 <xTaskGenericNotify+0x130>
	__asm volatile
 8011462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011466:	f383 8811 	msr	BASEPRI, r3
 801146a:	f3bf 8f6f 	isb	sy
 801146e:	f3bf 8f4f 	dsb	sy
 8011472:	613b      	str	r3, [r7, #16]
}
 8011474:	bf00      	nop
 8011476:	e7fe      	b.n	8011476 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011478:	6a3b      	ldr	r3, [r7, #32]
 801147a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801147c:	4b0b      	ldr	r3, [pc, #44]	; (80114ac <xTaskGenericNotify+0x164>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011482:	429a      	cmp	r2, r3
 8011484:	d907      	bls.n	8011496 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011486:	4b0a      	ldr	r3, [pc, #40]	; (80114b0 <xTaskGenericNotify+0x168>)
 8011488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801148c:	601a      	str	r2, [r3, #0]
 801148e:	f3bf 8f4f 	dsb	sy
 8011492:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011496:	f000 fe75 	bl	8012184 <vPortExitCritical>

		return xReturn;
 801149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801149c:	4618      	mov	r0, r3
 801149e:	3728      	adds	r7, #40	; 0x28
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd80      	pop	{r7, pc}
 80114a4:	20001978 	.word	0x20001978
 80114a8:	20001874 	.word	0x20001874
 80114ac:	20001870 	.word	0x20001870
 80114b0:	e000ed04 	.word	0xe000ed04

080114b4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b08e      	sub	sp, #56	; 0x38
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	60f8      	str	r0, [r7, #12]
 80114bc:	60b9      	str	r1, [r7, #8]
 80114be:	603b      	str	r3, [r7, #0]
 80114c0:	4613      	mov	r3, r2
 80114c2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80114c4:	2301      	movs	r3, #1
 80114c6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d10a      	bne.n	80114e4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80114ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114d2:	f383 8811 	msr	BASEPRI, r3
 80114d6:	f3bf 8f6f 	isb	sy
 80114da:	f3bf 8f4f 	dsb	sy
 80114de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80114e0:	bf00      	nop
 80114e2:	e7fe      	b.n	80114e2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80114e4:	f000 ff00 	bl	80122e8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80114ec:	f3ef 8211 	mrs	r2, BASEPRI
 80114f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114f4:	f383 8811 	msr	BASEPRI, r3
 80114f8:	f3bf 8f6f 	isb	sy
 80114fc:	f3bf 8f4f 	dsb	sy
 8011500:	623a      	str	r2, [r7, #32]
 8011502:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8011504:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011506:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d003      	beq.n	8011516 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801150e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011510:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011518:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801151c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011522:	2202      	movs	r2, #2
 8011524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8011528:	79fb      	ldrb	r3, [r7, #7]
 801152a:	2b04      	cmp	r3, #4
 801152c:	d828      	bhi.n	8011580 <xTaskGenericNotifyFromISR+0xcc>
 801152e:	a201      	add	r2, pc, #4	; (adr r2, 8011534 <xTaskGenericNotifyFromISR+0x80>)
 8011530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011534:	080115a1 	.word	0x080115a1
 8011538:	08011549 	.word	0x08011549
 801153c:	08011557 	.word	0x08011557
 8011540:	08011563 	.word	0x08011563
 8011544:	0801156b 	.word	0x0801156b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801154a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	431a      	orrs	r2, r3
 8011550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011552:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8011554:	e027      	b.n	80115a6 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801155a:	1c5a      	adds	r2, r3, #1
 801155c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801155e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8011560:	e021      	b.n	80115a6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011564:	68ba      	ldr	r2, [r7, #8]
 8011566:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8011568:	e01d      	b.n	80115a6 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801156a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801156e:	2b02      	cmp	r3, #2
 8011570:	d003      	beq.n	801157a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011574:	68ba      	ldr	r2, [r7, #8]
 8011576:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011578:	e015      	b.n	80115a6 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 801157a:	2300      	movs	r3, #0
 801157c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801157e:	e012      	b.n	80115a6 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011588:	d00c      	beq.n	80115a4 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 801158a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801158e:	f383 8811 	msr	BASEPRI, r3
 8011592:	f3bf 8f6f 	isb	sy
 8011596:	f3bf 8f4f 	dsb	sy
 801159a:	61bb      	str	r3, [r7, #24]
}
 801159c:	bf00      	nop
 801159e:	e7fe      	b.n	801159e <xTaskGenericNotifyFromISR+0xea>
					break;
 80115a0:	bf00      	nop
 80115a2:	e000      	b.n	80115a6 <xTaskGenericNotifyFromISR+0xf2>
					break;
 80115a4:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80115a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80115aa:	2b01      	cmp	r3, #1
 80115ac:	d145      	bne.n	801163a <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80115ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d00a      	beq.n	80115cc <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 80115b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ba:	f383 8811 	msr	BASEPRI, r3
 80115be:	f3bf 8f6f 	isb	sy
 80115c2:	f3bf 8f4f 	dsb	sy
 80115c6:	617b      	str	r3, [r7, #20]
}
 80115c8:	bf00      	nop
 80115ca:	e7fe      	b.n	80115ca <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115cc:	4b20      	ldr	r3, [pc, #128]	; (8011650 <xTaskGenericNotifyFromISR+0x19c>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d11c      	bne.n	801160e <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80115d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d6:	3304      	adds	r3, #4
 80115d8:	4618      	mov	r0, r3
 80115da:	f7fd fe6f 	bl	800f2bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80115de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115e2:	2201      	movs	r2, #1
 80115e4:	409a      	lsls	r2, r3
 80115e6:	4b1b      	ldr	r3, [pc, #108]	; (8011654 <xTaskGenericNotifyFromISR+0x1a0>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	4313      	orrs	r3, r2
 80115ec:	4a19      	ldr	r2, [pc, #100]	; (8011654 <xTaskGenericNotifyFromISR+0x1a0>)
 80115ee:	6013      	str	r3, [r2, #0]
 80115f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115f4:	4613      	mov	r3, r2
 80115f6:	009b      	lsls	r3, r3, #2
 80115f8:	4413      	add	r3, r2
 80115fa:	009b      	lsls	r3, r3, #2
 80115fc:	4a16      	ldr	r2, [pc, #88]	; (8011658 <xTaskGenericNotifyFromISR+0x1a4>)
 80115fe:	441a      	add	r2, r3
 8011600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011602:	3304      	adds	r3, #4
 8011604:	4619      	mov	r1, r3
 8011606:	4610      	mov	r0, r2
 8011608:	f7fd fdfb 	bl	800f202 <vListInsertEnd>
 801160c:	e005      	b.n	801161a <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801160e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011610:	3318      	adds	r3, #24
 8011612:	4619      	mov	r1, r3
 8011614:	4811      	ldr	r0, [pc, #68]	; (801165c <xTaskGenericNotifyFromISR+0x1a8>)
 8011616:	f7fd fdf4 	bl	800f202 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801161a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801161c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801161e:	4b10      	ldr	r3, [pc, #64]	; (8011660 <xTaskGenericNotifyFromISR+0x1ac>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011624:	429a      	cmp	r2, r3
 8011626:	d908      	bls.n	801163a <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8011628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801162a:	2b00      	cmp	r3, #0
 801162c:	d002      	beq.n	8011634 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801162e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011630:	2201      	movs	r2, #1
 8011632:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8011634:	4b0b      	ldr	r3, [pc, #44]	; (8011664 <xTaskGenericNotifyFromISR+0x1b0>)
 8011636:	2201      	movs	r2, #1
 8011638:	601a      	str	r2, [r3, #0]
 801163a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801163c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801163e:	693b      	ldr	r3, [r7, #16]
 8011640:	f383 8811 	msr	BASEPRI, r3
}
 8011644:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8011646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8011648:	4618      	mov	r0, r3
 801164a:	3738      	adds	r7, #56	; 0x38
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}
 8011650:	20001998 	.word	0x20001998
 8011654:	20001978 	.word	0x20001978
 8011658:	20001874 	.word	0x20001874
 801165c:	20001930 	.word	0x20001930
 8011660:	20001870 	.word	0x20001870
 8011664:	20001984 	.word	0x20001984

08011668 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b084      	sub	sp, #16
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
 8011670:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011672:	4b29      	ldr	r3, [pc, #164]	; (8011718 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011678:	4b28      	ldr	r3, [pc, #160]	; (801171c <prvAddCurrentTaskToDelayedList+0xb4>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	3304      	adds	r3, #4
 801167e:	4618      	mov	r0, r3
 8011680:	f7fd fe1c 	bl	800f2bc <uxListRemove>
 8011684:	4603      	mov	r3, r0
 8011686:	2b00      	cmp	r3, #0
 8011688:	d10b      	bne.n	80116a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801168a:	4b24      	ldr	r3, [pc, #144]	; (801171c <prvAddCurrentTaskToDelayedList+0xb4>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011690:	2201      	movs	r2, #1
 8011692:	fa02 f303 	lsl.w	r3, r2, r3
 8011696:	43da      	mvns	r2, r3
 8011698:	4b21      	ldr	r3, [pc, #132]	; (8011720 <prvAddCurrentTaskToDelayedList+0xb8>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	4013      	ands	r3, r2
 801169e:	4a20      	ldr	r2, [pc, #128]	; (8011720 <prvAddCurrentTaskToDelayedList+0xb8>)
 80116a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116a8:	d10a      	bne.n	80116c0 <prvAddCurrentTaskToDelayedList+0x58>
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d007      	beq.n	80116c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80116b0:	4b1a      	ldr	r3, [pc, #104]	; (801171c <prvAddCurrentTaskToDelayedList+0xb4>)
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	3304      	adds	r3, #4
 80116b6:	4619      	mov	r1, r3
 80116b8:	481a      	ldr	r0, [pc, #104]	; (8011724 <prvAddCurrentTaskToDelayedList+0xbc>)
 80116ba:	f7fd fda2 	bl	800f202 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80116be:	e026      	b.n	801170e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80116c0:	68fa      	ldr	r2, [r7, #12]
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	4413      	add	r3, r2
 80116c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80116c8:	4b14      	ldr	r3, [pc, #80]	; (801171c <prvAddCurrentTaskToDelayedList+0xb4>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	68ba      	ldr	r2, [r7, #8]
 80116ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80116d0:	68ba      	ldr	r2, [r7, #8]
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d209      	bcs.n	80116ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80116d8:	4b13      	ldr	r3, [pc, #76]	; (8011728 <prvAddCurrentTaskToDelayedList+0xc0>)
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	4b0f      	ldr	r3, [pc, #60]	; (801171c <prvAddCurrentTaskToDelayedList+0xb4>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	3304      	adds	r3, #4
 80116e2:	4619      	mov	r1, r3
 80116e4:	4610      	mov	r0, r2
 80116e6:	f7fd fdb0 	bl	800f24a <vListInsert>
}
 80116ea:	e010      	b.n	801170e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80116ec:	4b0f      	ldr	r3, [pc, #60]	; (801172c <prvAddCurrentTaskToDelayedList+0xc4>)
 80116ee:	681a      	ldr	r2, [r3, #0]
 80116f0:	4b0a      	ldr	r3, [pc, #40]	; (801171c <prvAddCurrentTaskToDelayedList+0xb4>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	3304      	adds	r3, #4
 80116f6:	4619      	mov	r1, r3
 80116f8:	4610      	mov	r0, r2
 80116fa:	f7fd fda6 	bl	800f24a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80116fe:	4b0c      	ldr	r3, [pc, #48]	; (8011730 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	68ba      	ldr	r2, [r7, #8]
 8011704:	429a      	cmp	r2, r3
 8011706:	d202      	bcs.n	801170e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011708:	4a09      	ldr	r2, [pc, #36]	; (8011730 <prvAddCurrentTaskToDelayedList+0xc8>)
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	6013      	str	r3, [r2, #0]
}
 801170e:	bf00      	nop
 8011710:	3710      	adds	r7, #16
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}
 8011716:	bf00      	nop
 8011718:	20001974 	.word	0x20001974
 801171c:	20001870 	.word	0x20001870
 8011720:	20001978 	.word	0x20001978
 8011724:	2000195c 	.word	0x2000195c
 8011728:	2000192c 	.word	0x2000192c
 801172c:	20001928 	.word	0x20001928
 8011730:	20001990 	.word	0x20001990

08011734 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b08a      	sub	sp, #40	; 0x28
 8011738:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801173a:	2300      	movs	r3, #0
 801173c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801173e:	f000 fb85 	bl	8011e4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011742:	4b1c      	ldr	r3, [pc, #112]	; (80117b4 <xTimerCreateTimerTask+0x80>)
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d021      	beq.n	801178e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801174a:	2300      	movs	r3, #0
 801174c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801174e:	2300      	movs	r3, #0
 8011750:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011752:	1d3a      	adds	r2, r7, #4
 8011754:	f107 0108 	add.w	r1, r7, #8
 8011758:	f107 030c 	add.w	r3, r7, #12
 801175c:	4618      	mov	r0, r3
 801175e:	f7f0 fcc7 	bl	80020f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011762:	6879      	ldr	r1, [r7, #4]
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	68fa      	ldr	r2, [r7, #12]
 8011768:	9202      	str	r2, [sp, #8]
 801176a:	9301      	str	r3, [sp, #4]
 801176c:	2302      	movs	r3, #2
 801176e:	9300      	str	r3, [sp, #0]
 8011770:	2300      	movs	r3, #0
 8011772:	460a      	mov	r2, r1
 8011774:	4910      	ldr	r1, [pc, #64]	; (80117b8 <xTimerCreateTimerTask+0x84>)
 8011776:	4811      	ldr	r0, [pc, #68]	; (80117bc <xTimerCreateTimerTask+0x88>)
 8011778:	f7fe fdb6 	bl	80102e8 <xTaskCreateStatic>
 801177c:	4603      	mov	r3, r0
 801177e:	4a10      	ldr	r2, [pc, #64]	; (80117c0 <xTimerCreateTimerTask+0x8c>)
 8011780:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011782:	4b0f      	ldr	r3, [pc, #60]	; (80117c0 <xTimerCreateTimerTask+0x8c>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d001      	beq.n	801178e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801178a:	2301      	movs	r3, #1
 801178c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801178e:	697b      	ldr	r3, [r7, #20]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d10a      	bne.n	80117aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011798:	f383 8811 	msr	BASEPRI, r3
 801179c:	f3bf 8f6f 	isb	sy
 80117a0:	f3bf 8f4f 	dsb	sy
 80117a4:	613b      	str	r3, [r7, #16]
}
 80117a6:	bf00      	nop
 80117a8:	e7fe      	b.n	80117a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80117aa:	697b      	ldr	r3, [r7, #20]
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	3718      	adds	r7, #24
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}
 80117b4:	200019cc 	.word	0x200019cc
 80117b8:	0801601c 	.word	0x0801601c
 80117bc:	08011a2d 	.word	0x08011a2d
 80117c0:	200019d0 	.word	0x200019d0

080117c4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b088      	sub	sp, #32
 80117c8:	af02      	add	r7, sp, #8
 80117ca:	60f8      	str	r0, [r7, #12]
 80117cc:	60b9      	str	r1, [r7, #8]
 80117ce:	607a      	str	r2, [r7, #4]
 80117d0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80117d2:	2028      	movs	r0, #40	; 0x28
 80117d4:	f000 fdc8 	bl	8012368 <pvPortMalloc>
 80117d8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d00d      	beq.n	80117fc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80117e0:	697b      	ldr	r3, [r7, #20]
 80117e2:	2200      	movs	r2, #0
 80117e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	9301      	str	r3, [sp, #4]
 80117ec:	6a3b      	ldr	r3, [r7, #32]
 80117ee:	9300      	str	r3, [sp, #0]
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	687a      	ldr	r2, [r7, #4]
 80117f4:	68b9      	ldr	r1, [r7, #8]
 80117f6:	68f8      	ldr	r0, [r7, #12]
 80117f8:	f000 f843 	bl	8011882 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80117fc:	697b      	ldr	r3, [r7, #20]
	}
 80117fe:	4618      	mov	r0, r3
 8011800:	3718      	adds	r7, #24
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}

08011806 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8011806:	b580      	push	{r7, lr}
 8011808:	b08a      	sub	sp, #40	; 0x28
 801180a:	af02      	add	r7, sp, #8
 801180c:	60f8      	str	r0, [r7, #12]
 801180e:	60b9      	str	r1, [r7, #8]
 8011810:	607a      	str	r2, [r7, #4]
 8011812:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8011814:	2328      	movs	r3, #40	; 0x28
 8011816:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8011818:	693b      	ldr	r3, [r7, #16]
 801181a:	2b28      	cmp	r3, #40	; 0x28
 801181c:	d00a      	beq.n	8011834 <xTimerCreateStatic+0x2e>
	__asm volatile
 801181e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011822:	f383 8811 	msr	BASEPRI, r3
 8011826:	f3bf 8f6f 	isb	sy
 801182a:	f3bf 8f4f 	dsb	sy
 801182e:	61bb      	str	r3, [r7, #24]
}
 8011830:	bf00      	nop
 8011832:	e7fe      	b.n	8011832 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011834:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8011836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011838:	2b00      	cmp	r3, #0
 801183a:	d10a      	bne.n	8011852 <xTimerCreateStatic+0x4c>
	__asm volatile
 801183c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011840:	f383 8811 	msr	BASEPRI, r3
 8011844:	f3bf 8f6f 	isb	sy
 8011848:	f3bf 8f4f 	dsb	sy
 801184c:	617b      	str	r3, [r7, #20]
}
 801184e:	bf00      	nop
 8011850:	e7fe      	b.n	8011850 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8011852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011854:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8011856:	69fb      	ldr	r3, [r7, #28]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d00d      	beq.n	8011878 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 801185c:	69fb      	ldr	r3, [r7, #28]
 801185e:	2202      	movs	r2, #2
 8011860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011864:	69fb      	ldr	r3, [r7, #28]
 8011866:	9301      	str	r3, [sp, #4]
 8011868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801186a:	9300      	str	r3, [sp, #0]
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	68b9      	ldr	r1, [r7, #8]
 8011872:	68f8      	ldr	r0, [r7, #12]
 8011874:	f000 f805 	bl	8011882 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011878:	69fb      	ldr	r3, [r7, #28]
	}
 801187a:	4618      	mov	r0, r3
 801187c:	3720      	adds	r7, #32
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}

08011882 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8011882:	b580      	push	{r7, lr}
 8011884:	b086      	sub	sp, #24
 8011886:	af00      	add	r7, sp, #0
 8011888:	60f8      	str	r0, [r7, #12]
 801188a:	60b9      	str	r1, [r7, #8]
 801188c:	607a      	str	r2, [r7, #4]
 801188e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d10a      	bne.n	80118ac <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8011896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801189a:	f383 8811 	msr	BASEPRI, r3
 801189e:	f3bf 8f6f 	isb	sy
 80118a2:	f3bf 8f4f 	dsb	sy
 80118a6:	617b      	str	r3, [r7, #20]
}
 80118a8:	bf00      	nop
 80118aa:	e7fe      	b.n	80118aa <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80118ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d01e      	beq.n	80118f0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80118b2:	f000 facb 	bl	8011e4c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80118b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b8:	68fa      	ldr	r2, [r7, #12]
 80118ba:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80118bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118be:	68ba      	ldr	r2, [r7, #8]
 80118c0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80118c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c4:	683a      	ldr	r2, [r7, #0]
 80118c6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80118c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ca:	6a3a      	ldr	r2, [r7, #32]
 80118cc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80118ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d0:	3304      	adds	r3, #4
 80118d2:	4618      	mov	r0, r3
 80118d4:	f7fd fc88 	bl	800f1e8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d008      	beq.n	80118f0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80118de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80118e4:	f043 0304 	orr.w	r3, r3, #4
 80118e8:	b2da      	uxtb	r2, r3
 80118ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80118f0:	bf00      	nop
 80118f2:	3718      	adds	r7, #24
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd80      	pop	{r7, pc}

080118f8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b08a      	sub	sp, #40	; 0x28
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	60f8      	str	r0, [r7, #12]
 8011900:	60b9      	str	r1, [r7, #8]
 8011902:	607a      	str	r2, [r7, #4]
 8011904:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011906:	2300      	movs	r3, #0
 8011908:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d10a      	bne.n	8011926 <xTimerGenericCommand+0x2e>
	__asm volatile
 8011910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011914:	f383 8811 	msr	BASEPRI, r3
 8011918:	f3bf 8f6f 	isb	sy
 801191c:	f3bf 8f4f 	dsb	sy
 8011920:	623b      	str	r3, [r7, #32]
}
 8011922:	bf00      	nop
 8011924:	e7fe      	b.n	8011924 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011926:	4b1a      	ldr	r3, [pc, #104]	; (8011990 <xTimerGenericCommand+0x98>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d02a      	beq.n	8011984 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	2b05      	cmp	r3, #5
 801193e:	dc18      	bgt.n	8011972 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011940:	f7ff faec 	bl	8010f1c <xTaskGetSchedulerState>
 8011944:	4603      	mov	r3, r0
 8011946:	2b02      	cmp	r3, #2
 8011948:	d109      	bne.n	801195e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801194a:	4b11      	ldr	r3, [pc, #68]	; (8011990 <xTimerGenericCommand+0x98>)
 801194c:	6818      	ldr	r0, [r3, #0]
 801194e:	f107 0114 	add.w	r1, r7, #20
 8011952:	2300      	movs	r3, #0
 8011954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011956:	f7fd fe61 	bl	800f61c <xQueueGenericSend>
 801195a:	6278      	str	r0, [r7, #36]	; 0x24
 801195c:	e012      	b.n	8011984 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801195e:	4b0c      	ldr	r3, [pc, #48]	; (8011990 <xTimerGenericCommand+0x98>)
 8011960:	6818      	ldr	r0, [r3, #0]
 8011962:	f107 0114 	add.w	r1, r7, #20
 8011966:	2300      	movs	r3, #0
 8011968:	2200      	movs	r2, #0
 801196a:	f7fd fe57 	bl	800f61c <xQueueGenericSend>
 801196e:	6278      	str	r0, [r7, #36]	; 0x24
 8011970:	e008      	b.n	8011984 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011972:	4b07      	ldr	r3, [pc, #28]	; (8011990 <xTimerGenericCommand+0x98>)
 8011974:	6818      	ldr	r0, [r3, #0]
 8011976:	f107 0114 	add.w	r1, r7, #20
 801197a:	2300      	movs	r3, #0
 801197c:	683a      	ldr	r2, [r7, #0]
 801197e:	f7fd ff4b 	bl	800f818 <xQueueGenericSendFromISR>
 8011982:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011986:	4618      	mov	r0, r3
 8011988:	3728      	adds	r7, #40	; 0x28
 801198a:	46bd      	mov	sp, r7
 801198c:	bd80      	pop	{r7, pc}
 801198e:	bf00      	nop
 8011990:	200019cc 	.word	0x200019cc

08011994 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b088      	sub	sp, #32
 8011998:	af02      	add	r7, sp, #8
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801199e:	4b22      	ldr	r3, [pc, #136]	; (8011a28 <prvProcessExpiredTimer+0x94>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	68db      	ldr	r3, [r3, #12]
 80119a4:	68db      	ldr	r3, [r3, #12]
 80119a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	3304      	adds	r3, #4
 80119ac:	4618      	mov	r0, r3
 80119ae:	f7fd fc85 	bl	800f2bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80119b8:	f003 0304 	and.w	r3, r3, #4
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d022      	beq.n	8011a06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	699a      	ldr	r2, [r3, #24]
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	18d1      	adds	r1, r2, r3
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	683a      	ldr	r2, [r7, #0]
 80119cc:	6978      	ldr	r0, [r7, #20]
 80119ce:	f000 f8d1 	bl	8011b74 <prvInsertTimerInActiveList>
 80119d2:	4603      	mov	r3, r0
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d01f      	beq.n	8011a18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80119d8:	2300      	movs	r3, #0
 80119da:	9300      	str	r3, [sp, #0]
 80119dc:	2300      	movs	r3, #0
 80119de:	687a      	ldr	r2, [r7, #4]
 80119e0:	2100      	movs	r1, #0
 80119e2:	6978      	ldr	r0, [r7, #20]
 80119e4:	f7ff ff88 	bl	80118f8 <xTimerGenericCommand>
 80119e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80119ea:	693b      	ldr	r3, [r7, #16]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d113      	bne.n	8011a18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80119f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f4:	f383 8811 	msr	BASEPRI, r3
 80119f8:	f3bf 8f6f 	isb	sy
 80119fc:	f3bf 8f4f 	dsb	sy
 8011a00:	60fb      	str	r3, [r7, #12]
}
 8011a02:	bf00      	nop
 8011a04:	e7fe      	b.n	8011a04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011a06:	697b      	ldr	r3, [r7, #20]
 8011a08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011a0c:	f023 0301 	bic.w	r3, r3, #1
 8011a10:	b2da      	uxtb	r2, r3
 8011a12:	697b      	ldr	r3, [r7, #20]
 8011a14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011a18:	697b      	ldr	r3, [r7, #20]
 8011a1a:	6a1b      	ldr	r3, [r3, #32]
 8011a1c:	6978      	ldr	r0, [r7, #20]
 8011a1e:	4798      	blx	r3
}
 8011a20:	bf00      	nop
 8011a22:	3718      	adds	r7, #24
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}
 8011a28:	200019c4 	.word	0x200019c4

08011a2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b084      	sub	sp, #16
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011a34:	f107 0308 	add.w	r3, r7, #8
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f000 f857 	bl	8011aec <prvGetNextExpireTime>
 8011a3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	4619      	mov	r1, r3
 8011a44:	68f8      	ldr	r0, [r7, #12]
 8011a46:	f000 f803 	bl	8011a50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011a4a:	f000 f8d5 	bl	8011bf8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011a4e:	e7f1      	b.n	8011a34 <prvTimerTask+0x8>

08011a50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011a5a:	f7fe fe73 	bl	8010744 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011a5e:	f107 0308 	add.w	r3, r7, #8
 8011a62:	4618      	mov	r0, r3
 8011a64:	f000 f866 	bl	8011b34 <prvSampleTimeNow>
 8011a68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d130      	bne.n	8011ad2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d10a      	bne.n	8011a8c <prvProcessTimerOrBlockTask+0x3c>
 8011a76:	687a      	ldr	r2, [r7, #4]
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	d806      	bhi.n	8011a8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011a7e:	f7fe fe6f 	bl	8010760 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011a82:	68f9      	ldr	r1, [r7, #12]
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f7ff ff85 	bl	8011994 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011a8a:	e024      	b.n	8011ad6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d008      	beq.n	8011aa4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011a92:	4b13      	ldr	r3, [pc, #76]	; (8011ae0 <prvProcessTimerOrBlockTask+0x90>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d101      	bne.n	8011aa0 <prvProcessTimerOrBlockTask+0x50>
 8011a9c:	2301      	movs	r3, #1
 8011a9e:	e000      	b.n	8011aa2 <prvProcessTimerOrBlockTask+0x52>
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011aa4:	4b0f      	ldr	r3, [pc, #60]	; (8011ae4 <prvProcessTimerOrBlockTask+0x94>)
 8011aa6:	6818      	ldr	r0, [r3, #0]
 8011aa8:	687a      	ldr	r2, [r7, #4]
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	1ad3      	subs	r3, r2, r3
 8011aae:	683a      	ldr	r2, [r7, #0]
 8011ab0:	4619      	mov	r1, r3
 8011ab2:	f7fe fbe5 	bl	8010280 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011ab6:	f7fe fe53 	bl	8010760 <xTaskResumeAll>
 8011aba:	4603      	mov	r3, r0
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d10a      	bne.n	8011ad6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011ac0:	4b09      	ldr	r3, [pc, #36]	; (8011ae8 <prvProcessTimerOrBlockTask+0x98>)
 8011ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ac6:	601a      	str	r2, [r3, #0]
 8011ac8:	f3bf 8f4f 	dsb	sy
 8011acc:	f3bf 8f6f 	isb	sy
}
 8011ad0:	e001      	b.n	8011ad6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011ad2:	f7fe fe45 	bl	8010760 <xTaskResumeAll>
}
 8011ad6:	bf00      	nop
 8011ad8:	3710      	adds	r7, #16
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}
 8011ade:	bf00      	nop
 8011ae0:	200019c8 	.word	0x200019c8
 8011ae4:	200019cc 	.word	0x200019cc
 8011ae8:	e000ed04 	.word	0xe000ed04

08011aec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011aec:	b480      	push	{r7}
 8011aee:	b085      	sub	sp, #20
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011af4:	4b0e      	ldr	r3, [pc, #56]	; (8011b30 <prvGetNextExpireTime+0x44>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d101      	bne.n	8011b02 <prvGetNextExpireTime+0x16>
 8011afe:	2201      	movs	r2, #1
 8011b00:	e000      	b.n	8011b04 <prvGetNextExpireTime+0x18>
 8011b02:	2200      	movs	r2, #0
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d105      	bne.n	8011b1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011b10:	4b07      	ldr	r3, [pc, #28]	; (8011b30 <prvGetNextExpireTime+0x44>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	68db      	ldr	r3, [r3, #12]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	60fb      	str	r3, [r7, #12]
 8011b1a:	e001      	b.n	8011b20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011b20:	68fb      	ldr	r3, [r7, #12]
}
 8011b22:	4618      	mov	r0, r3
 8011b24:	3714      	adds	r7, #20
 8011b26:	46bd      	mov	sp, r7
 8011b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2c:	4770      	bx	lr
 8011b2e:	bf00      	nop
 8011b30:	200019c4 	.word	0x200019c4

08011b34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b084      	sub	sp, #16
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011b3c:	f7fe feac 	bl	8010898 <xTaskGetTickCount>
 8011b40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011b42:	4b0b      	ldr	r3, [pc, #44]	; (8011b70 <prvSampleTimeNow+0x3c>)
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	68fa      	ldr	r2, [r7, #12]
 8011b48:	429a      	cmp	r2, r3
 8011b4a:	d205      	bcs.n	8011b58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011b4c:	f000 f91a 	bl	8011d84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	2201      	movs	r2, #1
 8011b54:	601a      	str	r2, [r3, #0]
 8011b56:	e002      	b.n	8011b5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011b5e:	4a04      	ldr	r2, [pc, #16]	; (8011b70 <prvSampleTimeNow+0x3c>)
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011b64:	68fb      	ldr	r3, [r7, #12]
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3710      	adds	r7, #16
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}
 8011b6e:	bf00      	nop
 8011b70:	200019d4 	.word	0x200019d4

08011b74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b086      	sub	sp, #24
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	60f8      	str	r0, [r7, #12]
 8011b7c:	60b9      	str	r1, [r7, #8]
 8011b7e:	607a      	str	r2, [r7, #4]
 8011b80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011b82:	2300      	movs	r3, #0
 8011b84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	68ba      	ldr	r2, [r7, #8]
 8011b8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	68fa      	ldr	r2, [r7, #12]
 8011b90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011b92:	68ba      	ldr	r2, [r7, #8]
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	429a      	cmp	r2, r3
 8011b98:	d812      	bhi.n	8011bc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b9a:	687a      	ldr	r2, [r7, #4]
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	1ad2      	subs	r2, r2, r3
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	699b      	ldr	r3, [r3, #24]
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d302      	bcc.n	8011bae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011ba8:	2301      	movs	r3, #1
 8011baa:	617b      	str	r3, [r7, #20]
 8011bac:	e01b      	b.n	8011be6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011bae:	4b10      	ldr	r3, [pc, #64]	; (8011bf0 <prvInsertTimerInActiveList+0x7c>)
 8011bb0:	681a      	ldr	r2, [r3, #0]
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	3304      	adds	r3, #4
 8011bb6:	4619      	mov	r1, r3
 8011bb8:	4610      	mov	r0, r2
 8011bba:	f7fd fb46 	bl	800f24a <vListInsert>
 8011bbe:	e012      	b.n	8011be6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011bc0:	687a      	ldr	r2, [r7, #4]
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	d206      	bcs.n	8011bd6 <prvInsertTimerInActiveList+0x62>
 8011bc8:	68ba      	ldr	r2, [r7, #8]
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d302      	bcc.n	8011bd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	617b      	str	r3, [r7, #20]
 8011bd4:	e007      	b.n	8011be6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011bd6:	4b07      	ldr	r3, [pc, #28]	; (8011bf4 <prvInsertTimerInActiveList+0x80>)
 8011bd8:	681a      	ldr	r2, [r3, #0]
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	3304      	adds	r3, #4
 8011bde:	4619      	mov	r1, r3
 8011be0:	4610      	mov	r0, r2
 8011be2:	f7fd fb32 	bl	800f24a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011be6:	697b      	ldr	r3, [r7, #20]
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	3718      	adds	r7, #24
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}
 8011bf0:	200019c8 	.word	0x200019c8
 8011bf4:	200019c4 	.word	0x200019c4

08011bf8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b08c      	sub	sp, #48	; 0x30
 8011bfc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011bfe:	e0ae      	b.n	8011d5e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011c00:	68bb      	ldr	r3, [r7, #8]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	f2c0 80aa 	blt.w	8011d5c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011c08:	693b      	ldr	r3, [r7, #16]
 8011c0a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c0e:	695b      	ldr	r3, [r3, #20]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d004      	beq.n	8011c1e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c16:	3304      	adds	r3, #4
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7fd fb4f 	bl	800f2bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011c1e:	1d3b      	adds	r3, r7, #4
 8011c20:	4618      	mov	r0, r3
 8011c22:	f7ff ff87 	bl	8011b34 <prvSampleTimeNow>
 8011c26:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	2b09      	cmp	r3, #9
 8011c2c:	f200 8097 	bhi.w	8011d5e <prvProcessReceivedCommands+0x166>
 8011c30:	a201      	add	r2, pc, #4	; (adr r2, 8011c38 <prvProcessReceivedCommands+0x40>)
 8011c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c36:	bf00      	nop
 8011c38:	08011c61 	.word	0x08011c61
 8011c3c:	08011c61 	.word	0x08011c61
 8011c40:	08011c61 	.word	0x08011c61
 8011c44:	08011cd5 	.word	0x08011cd5
 8011c48:	08011ce9 	.word	0x08011ce9
 8011c4c:	08011d33 	.word	0x08011d33
 8011c50:	08011c61 	.word	0x08011c61
 8011c54:	08011c61 	.word	0x08011c61
 8011c58:	08011cd5 	.word	0x08011cd5
 8011c5c:	08011ce9 	.word	0x08011ce9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011c66:	f043 0301 	orr.w	r3, r3, #1
 8011c6a:	b2da      	uxtb	r2, r3
 8011c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011c72:	68fa      	ldr	r2, [r7, #12]
 8011c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c76:	699b      	ldr	r3, [r3, #24]
 8011c78:	18d1      	adds	r1, r2, r3
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	6a3a      	ldr	r2, [r7, #32]
 8011c7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c80:	f7ff ff78 	bl	8011b74 <prvInsertTimerInActiveList>
 8011c84:	4603      	mov	r3, r0
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d069      	beq.n	8011d5e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c8c:	6a1b      	ldr	r3, [r3, #32]
 8011c8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011c98:	f003 0304 	and.w	r3, r3, #4
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d05e      	beq.n	8011d5e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011ca0:	68fa      	ldr	r2, [r7, #12]
 8011ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca4:	699b      	ldr	r3, [r3, #24]
 8011ca6:	441a      	add	r2, r3
 8011ca8:	2300      	movs	r3, #0
 8011caa:	9300      	str	r3, [sp, #0]
 8011cac:	2300      	movs	r3, #0
 8011cae:	2100      	movs	r1, #0
 8011cb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cb2:	f7ff fe21 	bl	80118f8 <xTimerGenericCommand>
 8011cb6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8011cb8:	69fb      	ldr	r3, [r7, #28]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d14f      	bne.n	8011d5e <prvProcessReceivedCommands+0x166>
	__asm volatile
 8011cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc2:	f383 8811 	msr	BASEPRI, r3
 8011cc6:	f3bf 8f6f 	isb	sy
 8011cca:	f3bf 8f4f 	dsb	sy
 8011cce:	61bb      	str	r3, [r7, #24]
}
 8011cd0:	bf00      	nop
 8011cd2:	e7fe      	b.n	8011cd2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011cda:	f023 0301 	bic.w	r3, r3, #1
 8011cde:	b2da      	uxtb	r2, r3
 8011ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8011ce6:	e03a      	b.n	8011d5e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011cee:	f043 0301 	orr.w	r3, r3, #1
 8011cf2:	b2da      	uxtb	r2, r3
 8011cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011cfa:	68fa      	ldr	r2, [r7, #12]
 8011cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d02:	699b      	ldr	r3, [r3, #24]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d10a      	bne.n	8011d1e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8011d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d0c:	f383 8811 	msr	BASEPRI, r3
 8011d10:	f3bf 8f6f 	isb	sy
 8011d14:	f3bf 8f4f 	dsb	sy
 8011d18:	617b      	str	r3, [r7, #20]
}
 8011d1a:	bf00      	nop
 8011d1c:	e7fe      	b.n	8011d1c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d20:	699a      	ldr	r2, [r3, #24]
 8011d22:	6a3b      	ldr	r3, [r7, #32]
 8011d24:	18d1      	adds	r1, r2, r3
 8011d26:	6a3b      	ldr	r3, [r7, #32]
 8011d28:	6a3a      	ldr	r2, [r7, #32]
 8011d2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d2c:	f7ff ff22 	bl	8011b74 <prvInsertTimerInActiveList>
					break;
 8011d30:	e015      	b.n	8011d5e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011d38:	f003 0302 	and.w	r3, r3, #2
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d103      	bne.n	8011d48 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8011d40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d42:	f000 fbdd 	bl	8012500 <vPortFree>
 8011d46:	e00a      	b.n	8011d5e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011d4e:	f023 0301 	bic.w	r3, r3, #1
 8011d52:	b2da      	uxtb	r2, r3
 8011d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011d5a:	e000      	b.n	8011d5e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011d5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011d5e:	4b08      	ldr	r3, [pc, #32]	; (8011d80 <prvProcessReceivedCommands+0x188>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	f107 0108 	add.w	r1, r7, #8
 8011d66:	2200      	movs	r2, #0
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f7fd fe7d 	bl	800fa68 <xQueueReceive>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	f47f af45 	bne.w	8011c00 <prvProcessReceivedCommands+0x8>
	}
}
 8011d76:	bf00      	nop
 8011d78:	bf00      	nop
 8011d7a:	3728      	adds	r7, #40	; 0x28
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}
 8011d80:	200019cc 	.word	0x200019cc

08011d84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b088      	sub	sp, #32
 8011d88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011d8a:	e048      	b.n	8011e1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011d8c:	4b2d      	ldr	r3, [pc, #180]	; (8011e44 <prvSwitchTimerLists+0xc0>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	68db      	ldr	r3, [r3, #12]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d96:	4b2b      	ldr	r3, [pc, #172]	; (8011e44 <prvSwitchTimerLists+0xc0>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	68db      	ldr	r3, [r3, #12]
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	3304      	adds	r3, #4
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7fd fa89 	bl	800f2bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	6a1b      	ldr	r3, [r3, #32]
 8011dae:	68f8      	ldr	r0, [r7, #12]
 8011db0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011db8:	f003 0304 	and.w	r3, r3, #4
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d02e      	beq.n	8011e1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	699b      	ldr	r3, [r3, #24]
 8011dc4:	693a      	ldr	r2, [r7, #16]
 8011dc6:	4413      	add	r3, r2
 8011dc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011dca:	68ba      	ldr	r2, [r7, #8]
 8011dcc:	693b      	ldr	r3, [r7, #16]
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d90e      	bls.n	8011df0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	68ba      	ldr	r2, [r7, #8]
 8011dd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	68fa      	ldr	r2, [r7, #12]
 8011ddc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011dde:	4b19      	ldr	r3, [pc, #100]	; (8011e44 <prvSwitchTimerLists+0xc0>)
 8011de0:	681a      	ldr	r2, [r3, #0]
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	3304      	adds	r3, #4
 8011de6:	4619      	mov	r1, r3
 8011de8:	4610      	mov	r0, r2
 8011dea:	f7fd fa2e 	bl	800f24a <vListInsert>
 8011dee:	e016      	b.n	8011e1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011df0:	2300      	movs	r3, #0
 8011df2:	9300      	str	r3, [sp, #0]
 8011df4:	2300      	movs	r3, #0
 8011df6:	693a      	ldr	r2, [r7, #16]
 8011df8:	2100      	movs	r1, #0
 8011dfa:	68f8      	ldr	r0, [r7, #12]
 8011dfc:	f7ff fd7c 	bl	80118f8 <xTimerGenericCommand>
 8011e00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d10a      	bne.n	8011e1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e0c:	f383 8811 	msr	BASEPRI, r3
 8011e10:	f3bf 8f6f 	isb	sy
 8011e14:	f3bf 8f4f 	dsb	sy
 8011e18:	603b      	str	r3, [r7, #0]
}
 8011e1a:	bf00      	nop
 8011e1c:	e7fe      	b.n	8011e1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011e1e:	4b09      	ldr	r3, [pc, #36]	; (8011e44 <prvSwitchTimerLists+0xc0>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d1b1      	bne.n	8011d8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011e28:	4b06      	ldr	r3, [pc, #24]	; (8011e44 <prvSwitchTimerLists+0xc0>)
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011e2e:	4b06      	ldr	r3, [pc, #24]	; (8011e48 <prvSwitchTimerLists+0xc4>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	4a04      	ldr	r2, [pc, #16]	; (8011e44 <prvSwitchTimerLists+0xc0>)
 8011e34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011e36:	4a04      	ldr	r2, [pc, #16]	; (8011e48 <prvSwitchTimerLists+0xc4>)
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	6013      	str	r3, [r2, #0]
}
 8011e3c:	bf00      	nop
 8011e3e:	3718      	adds	r7, #24
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}
 8011e44:	200019c4 	.word	0x200019c4
 8011e48:	200019c8 	.word	0x200019c8

08011e4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b082      	sub	sp, #8
 8011e50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011e52:	f000 f967 	bl	8012124 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011e56:	4b15      	ldr	r3, [pc, #84]	; (8011eac <prvCheckForValidListAndQueue+0x60>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d120      	bne.n	8011ea0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011e5e:	4814      	ldr	r0, [pc, #80]	; (8011eb0 <prvCheckForValidListAndQueue+0x64>)
 8011e60:	f7fd f9a2 	bl	800f1a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011e64:	4813      	ldr	r0, [pc, #76]	; (8011eb4 <prvCheckForValidListAndQueue+0x68>)
 8011e66:	f7fd f99f 	bl	800f1a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011e6a:	4b13      	ldr	r3, [pc, #76]	; (8011eb8 <prvCheckForValidListAndQueue+0x6c>)
 8011e6c:	4a10      	ldr	r2, [pc, #64]	; (8011eb0 <prvCheckForValidListAndQueue+0x64>)
 8011e6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011e70:	4b12      	ldr	r3, [pc, #72]	; (8011ebc <prvCheckForValidListAndQueue+0x70>)
 8011e72:	4a10      	ldr	r2, [pc, #64]	; (8011eb4 <prvCheckForValidListAndQueue+0x68>)
 8011e74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011e76:	2300      	movs	r3, #0
 8011e78:	9300      	str	r3, [sp, #0]
 8011e7a:	4b11      	ldr	r3, [pc, #68]	; (8011ec0 <prvCheckForValidListAndQueue+0x74>)
 8011e7c:	4a11      	ldr	r2, [pc, #68]	; (8011ec4 <prvCheckForValidListAndQueue+0x78>)
 8011e7e:	210c      	movs	r1, #12
 8011e80:	200a      	movs	r0, #10
 8011e82:	f7fd faad 	bl	800f3e0 <xQueueGenericCreateStatic>
 8011e86:	4603      	mov	r3, r0
 8011e88:	4a08      	ldr	r2, [pc, #32]	; (8011eac <prvCheckForValidListAndQueue+0x60>)
 8011e8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011e8c:	4b07      	ldr	r3, [pc, #28]	; (8011eac <prvCheckForValidListAndQueue+0x60>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d005      	beq.n	8011ea0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011e94:	4b05      	ldr	r3, [pc, #20]	; (8011eac <prvCheckForValidListAndQueue+0x60>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	490b      	ldr	r1, [pc, #44]	; (8011ec8 <prvCheckForValidListAndQueue+0x7c>)
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f7fe f99c 	bl	80101d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011ea0:	f000 f970 	bl	8012184 <vPortExitCritical>
}
 8011ea4:	bf00      	nop
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}
 8011eaa:	bf00      	nop
 8011eac:	200019cc 	.word	0x200019cc
 8011eb0:	2000199c 	.word	0x2000199c
 8011eb4:	200019b0 	.word	0x200019b0
 8011eb8:	200019c4 	.word	0x200019c4
 8011ebc:	200019c8 	.word	0x200019c8
 8011ec0:	20001a50 	.word	0x20001a50
 8011ec4:	200019d8 	.word	0x200019d8
 8011ec8:	08016024 	.word	0x08016024

08011ecc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011ecc:	b480      	push	{r7}
 8011ece:	b085      	sub	sp, #20
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	60f8      	str	r0, [r7, #12]
 8011ed4:	60b9      	str	r1, [r7, #8]
 8011ed6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	3b04      	subs	r3, #4
 8011edc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	3b04      	subs	r3, #4
 8011eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	f023 0201 	bic.w	r2, r3, #1
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	3b04      	subs	r3, #4
 8011efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011efc:	4a0c      	ldr	r2, [pc, #48]	; (8011f30 <pxPortInitialiseStack+0x64>)
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	3b14      	subs	r3, #20
 8011f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011f08:	687a      	ldr	r2, [r7, #4]
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	3b04      	subs	r3, #4
 8011f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	f06f 0202 	mvn.w	r2, #2
 8011f1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	3b20      	subs	r3, #32
 8011f20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011f22:	68fb      	ldr	r3, [r7, #12]
}
 8011f24:	4618      	mov	r0, r3
 8011f26:	3714      	adds	r7, #20
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2e:	4770      	bx	lr
 8011f30:	08011f35 	.word	0x08011f35

08011f34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011f34:	b480      	push	{r7}
 8011f36:	b085      	sub	sp, #20
 8011f38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011f3e:	4b12      	ldr	r3, [pc, #72]	; (8011f88 <prvTaskExitError+0x54>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f46:	d00a      	beq.n	8011f5e <prvTaskExitError+0x2a>
	__asm volatile
 8011f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f4c:	f383 8811 	msr	BASEPRI, r3
 8011f50:	f3bf 8f6f 	isb	sy
 8011f54:	f3bf 8f4f 	dsb	sy
 8011f58:	60fb      	str	r3, [r7, #12]
}
 8011f5a:	bf00      	nop
 8011f5c:	e7fe      	b.n	8011f5c <prvTaskExitError+0x28>
	__asm volatile
 8011f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f62:	f383 8811 	msr	BASEPRI, r3
 8011f66:	f3bf 8f6f 	isb	sy
 8011f6a:	f3bf 8f4f 	dsb	sy
 8011f6e:	60bb      	str	r3, [r7, #8]
}
 8011f70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011f72:	bf00      	nop
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d0fc      	beq.n	8011f74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011f7a:	bf00      	nop
 8011f7c:	bf00      	nop
 8011f7e:	3714      	adds	r7, #20
 8011f80:	46bd      	mov	sp, r7
 8011f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f86:	4770      	bx	lr
 8011f88:	20000074 	.word	0x20000074
 8011f8c:	00000000 	.word	0x00000000

08011f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011f90:	4b07      	ldr	r3, [pc, #28]	; (8011fb0 <pxCurrentTCBConst2>)
 8011f92:	6819      	ldr	r1, [r3, #0]
 8011f94:	6808      	ldr	r0, [r1, #0]
 8011f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f9a:	f380 8809 	msr	PSP, r0
 8011f9e:	f3bf 8f6f 	isb	sy
 8011fa2:	f04f 0000 	mov.w	r0, #0
 8011fa6:	f380 8811 	msr	BASEPRI, r0
 8011faa:	4770      	bx	lr
 8011fac:	f3af 8000 	nop.w

08011fb0 <pxCurrentTCBConst2>:
 8011fb0:	20001870 	.word	0x20001870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011fb4:	bf00      	nop
 8011fb6:	bf00      	nop

08011fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011fb8:	4808      	ldr	r0, [pc, #32]	; (8011fdc <prvPortStartFirstTask+0x24>)
 8011fba:	6800      	ldr	r0, [r0, #0]
 8011fbc:	6800      	ldr	r0, [r0, #0]
 8011fbe:	f380 8808 	msr	MSP, r0
 8011fc2:	f04f 0000 	mov.w	r0, #0
 8011fc6:	f380 8814 	msr	CONTROL, r0
 8011fca:	b662      	cpsie	i
 8011fcc:	b661      	cpsie	f
 8011fce:	f3bf 8f4f 	dsb	sy
 8011fd2:	f3bf 8f6f 	isb	sy
 8011fd6:	df00      	svc	0
 8011fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011fda:	bf00      	nop
 8011fdc:	e000ed08 	.word	0xe000ed08

08011fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b086      	sub	sp, #24
 8011fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011fe6:	4b46      	ldr	r3, [pc, #280]	; (8012100 <xPortStartScheduler+0x120>)
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	4a46      	ldr	r2, [pc, #280]	; (8012104 <xPortStartScheduler+0x124>)
 8011fec:	4293      	cmp	r3, r2
 8011fee:	d10a      	bne.n	8012006 <xPortStartScheduler+0x26>
	__asm volatile
 8011ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ff4:	f383 8811 	msr	BASEPRI, r3
 8011ff8:	f3bf 8f6f 	isb	sy
 8011ffc:	f3bf 8f4f 	dsb	sy
 8012000:	613b      	str	r3, [r7, #16]
}
 8012002:	bf00      	nop
 8012004:	e7fe      	b.n	8012004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012006:	4b3e      	ldr	r3, [pc, #248]	; (8012100 <xPortStartScheduler+0x120>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	4a3f      	ldr	r2, [pc, #252]	; (8012108 <xPortStartScheduler+0x128>)
 801200c:	4293      	cmp	r3, r2
 801200e:	d10a      	bne.n	8012026 <xPortStartScheduler+0x46>
	__asm volatile
 8012010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012014:	f383 8811 	msr	BASEPRI, r3
 8012018:	f3bf 8f6f 	isb	sy
 801201c:	f3bf 8f4f 	dsb	sy
 8012020:	60fb      	str	r3, [r7, #12]
}
 8012022:	bf00      	nop
 8012024:	e7fe      	b.n	8012024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012026:	4b39      	ldr	r3, [pc, #228]	; (801210c <xPortStartScheduler+0x12c>)
 8012028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	781b      	ldrb	r3, [r3, #0]
 801202e:	b2db      	uxtb	r3, r3
 8012030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	22ff      	movs	r2, #255	; 0xff
 8012036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	781b      	ldrb	r3, [r3, #0]
 801203c:	b2db      	uxtb	r3, r3
 801203e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012040:	78fb      	ldrb	r3, [r7, #3]
 8012042:	b2db      	uxtb	r3, r3
 8012044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012048:	b2da      	uxtb	r2, r3
 801204a:	4b31      	ldr	r3, [pc, #196]	; (8012110 <xPortStartScheduler+0x130>)
 801204c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801204e:	4b31      	ldr	r3, [pc, #196]	; (8012114 <xPortStartScheduler+0x134>)
 8012050:	2207      	movs	r2, #7
 8012052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012054:	e009      	b.n	801206a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012056:	4b2f      	ldr	r3, [pc, #188]	; (8012114 <xPortStartScheduler+0x134>)
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	3b01      	subs	r3, #1
 801205c:	4a2d      	ldr	r2, [pc, #180]	; (8012114 <xPortStartScheduler+0x134>)
 801205e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012060:	78fb      	ldrb	r3, [r7, #3]
 8012062:	b2db      	uxtb	r3, r3
 8012064:	005b      	lsls	r3, r3, #1
 8012066:	b2db      	uxtb	r3, r3
 8012068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801206a:	78fb      	ldrb	r3, [r7, #3]
 801206c:	b2db      	uxtb	r3, r3
 801206e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012072:	2b80      	cmp	r3, #128	; 0x80
 8012074:	d0ef      	beq.n	8012056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012076:	4b27      	ldr	r3, [pc, #156]	; (8012114 <xPortStartScheduler+0x134>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	f1c3 0307 	rsb	r3, r3, #7
 801207e:	2b04      	cmp	r3, #4
 8012080:	d00a      	beq.n	8012098 <xPortStartScheduler+0xb8>
	__asm volatile
 8012082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012086:	f383 8811 	msr	BASEPRI, r3
 801208a:	f3bf 8f6f 	isb	sy
 801208e:	f3bf 8f4f 	dsb	sy
 8012092:	60bb      	str	r3, [r7, #8]
}
 8012094:	bf00      	nop
 8012096:	e7fe      	b.n	8012096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012098:	4b1e      	ldr	r3, [pc, #120]	; (8012114 <xPortStartScheduler+0x134>)
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	021b      	lsls	r3, r3, #8
 801209e:	4a1d      	ldr	r2, [pc, #116]	; (8012114 <xPortStartScheduler+0x134>)
 80120a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80120a2:	4b1c      	ldr	r3, [pc, #112]	; (8012114 <xPortStartScheduler+0x134>)
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80120aa:	4a1a      	ldr	r2, [pc, #104]	; (8012114 <xPortStartScheduler+0x134>)
 80120ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	b2da      	uxtb	r2, r3
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80120b6:	4b18      	ldr	r3, [pc, #96]	; (8012118 <xPortStartScheduler+0x138>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	4a17      	ldr	r2, [pc, #92]	; (8012118 <xPortStartScheduler+0x138>)
 80120bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80120c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80120c2:	4b15      	ldr	r3, [pc, #84]	; (8012118 <xPortStartScheduler+0x138>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	4a14      	ldr	r2, [pc, #80]	; (8012118 <xPortStartScheduler+0x138>)
 80120c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80120cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80120ce:	f000 f8dd 	bl	801228c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80120d2:	4b12      	ldr	r3, [pc, #72]	; (801211c <xPortStartScheduler+0x13c>)
 80120d4:	2200      	movs	r2, #0
 80120d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80120d8:	f000 f8fc 	bl	80122d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80120dc:	4b10      	ldr	r3, [pc, #64]	; (8012120 <xPortStartScheduler+0x140>)
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	4a0f      	ldr	r2, [pc, #60]	; (8012120 <xPortStartScheduler+0x140>)
 80120e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80120e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80120e8:	f7ff ff66 	bl	8011fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80120ec:	f7fe fcae 	bl	8010a4c <vTaskSwitchContext>
	prvTaskExitError();
 80120f0:	f7ff ff20 	bl	8011f34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80120f4:	2300      	movs	r3, #0
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	3718      	adds	r7, #24
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
 80120fe:	bf00      	nop
 8012100:	e000ed00 	.word	0xe000ed00
 8012104:	410fc271 	.word	0x410fc271
 8012108:	410fc270 	.word	0x410fc270
 801210c:	e000e400 	.word	0xe000e400
 8012110:	20001a98 	.word	0x20001a98
 8012114:	20001a9c 	.word	0x20001a9c
 8012118:	e000ed20 	.word	0xe000ed20
 801211c:	20000074 	.word	0x20000074
 8012120:	e000ef34 	.word	0xe000ef34

08012124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012124:	b480      	push	{r7}
 8012126:	b083      	sub	sp, #12
 8012128:	af00      	add	r7, sp, #0
	__asm volatile
 801212a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801212e:	f383 8811 	msr	BASEPRI, r3
 8012132:	f3bf 8f6f 	isb	sy
 8012136:	f3bf 8f4f 	dsb	sy
 801213a:	607b      	str	r3, [r7, #4]
}
 801213c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801213e:	4b0f      	ldr	r3, [pc, #60]	; (801217c <vPortEnterCritical+0x58>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	3301      	adds	r3, #1
 8012144:	4a0d      	ldr	r2, [pc, #52]	; (801217c <vPortEnterCritical+0x58>)
 8012146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012148:	4b0c      	ldr	r3, [pc, #48]	; (801217c <vPortEnterCritical+0x58>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	2b01      	cmp	r3, #1
 801214e:	d10f      	bne.n	8012170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012150:	4b0b      	ldr	r3, [pc, #44]	; (8012180 <vPortEnterCritical+0x5c>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	b2db      	uxtb	r3, r3
 8012156:	2b00      	cmp	r3, #0
 8012158:	d00a      	beq.n	8012170 <vPortEnterCritical+0x4c>
	__asm volatile
 801215a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801215e:	f383 8811 	msr	BASEPRI, r3
 8012162:	f3bf 8f6f 	isb	sy
 8012166:	f3bf 8f4f 	dsb	sy
 801216a:	603b      	str	r3, [r7, #0]
}
 801216c:	bf00      	nop
 801216e:	e7fe      	b.n	801216e <vPortEnterCritical+0x4a>
	}
}
 8012170:	bf00      	nop
 8012172:	370c      	adds	r7, #12
 8012174:	46bd      	mov	sp, r7
 8012176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217a:	4770      	bx	lr
 801217c:	20000074 	.word	0x20000074
 8012180:	e000ed04 	.word	0xe000ed04

08012184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012184:	b480      	push	{r7}
 8012186:	b083      	sub	sp, #12
 8012188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801218a:	4b12      	ldr	r3, [pc, #72]	; (80121d4 <vPortExitCritical+0x50>)
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d10a      	bne.n	80121a8 <vPortExitCritical+0x24>
	__asm volatile
 8012192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012196:	f383 8811 	msr	BASEPRI, r3
 801219a:	f3bf 8f6f 	isb	sy
 801219e:	f3bf 8f4f 	dsb	sy
 80121a2:	607b      	str	r3, [r7, #4]
}
 80121a4:	bf00      	nop
 80121a6:	e7fe      	b.n	80121a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80121a8:	4b0a      	ldr	r3, [pc, #40]	; (80121d4 <vPortExitCritical+0x50>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	3b01      	subs	r3, #1
 80121ae:	4a09      	ldr	r2, [pc, #36]	; (80121d4 <vPortExitCritical+0x50>)
 80121b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80121b2:	4b08      	ldr	r3, [pc, #32]	; (80121d4 <vPortExitCritical+0x50>)
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d105      	bne.n	80121c6 <vPortExitCritical+0x42>
 80121ba:	2300      	movs	r3, #0
 80121bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	f383 8811 	msr	BASEPRI, r3
}
 80121c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80121c6:	bf00      	nop
 80121c8:	370c      	adds	r7, #12
 80121ca:	46bd      	mov	sp, r7
 80121cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d0:	4770      	bx	lr
 80121d2:	bf00      	nop
 80121d4:	20000074 	.word	0x20000074
	...

080121e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80121e0:	f3ef 8009 	mrs	r0, PSP
 80121e4:	f3bf 8f6f 	isb	sy
 80121e8:	4b15      	ldr	r3, [pc, #84]	; (8012240 <pxCurrentTCBConst>)
 80121ea:	681a      	ldr	r2, [r3, #0]
 80121ec:	f01e 0f10 	tst.w	lr, #16
 80121f0:	bf08      	it	eq
 80121f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80121f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121fa:	6010      	str	r0, [r2, #0]
 80121fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012204:	f380 8811 	msr	BASEPRI, r0
 8012208:	f3bf 8f4f 	dsb	sy
 801220c:	f3bf 8f6f 	isb	sy
 8012210:	f7fe fc1c 	bl	8010a4c <vTaskSwitchContext>
 8012214:	f04f 0000 	mov.w	r0, #0
 8012218:	f380 8811 	msr	BASEPRI, r0
 801221c:	bc09      	pop	{r0, r3}
 801221e:	6819      	ldr	r1, [r3, #0]
 8012220:	6808      	ldr	r0, [r1, #0]
 8012222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012226:	f01e 0f10 	tst.w	lr, #16
 801222a:	bf08      	it	eq
 801222c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012230:	f380 8809 	msr	PSP, r0
 8012234:	f3bf 8f6f 	isb	sy
 8012238:	4770      	bx	lr
 801223a:	bf00      	nop
 801223c:	f3af 8000 	nop.w

08012240 <pxCurrentTCBConst>:
 8012240:	20001870 	.word	0x20001870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012244:	bf00      	nop
 8012246:	bf00      	nop

08012248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
	__asm volatile
 801224e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012252:	f383 8811 	msr	BASEPRI, r3
 8012256:	f3bf 8f6f 	isb	sy
 801225a:	f3bf 8f4f 	dsb	sy
 801225e:	607b      	str	r3, [r7, #4]
}
 8012260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012262:	f7fe fb3b 	bl	80108dc <xTaskIncrementTick>
 8012266:	4603      	mov	r3, r0
 8012268:	2b00      	cmp	r3, #0
 801226a:	d003      	beq.n	8012274 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801226c:	4b06      	ldr	r3, [pc, #24]	; (8012288 <SysTick_Handler+0x40>)
 801226e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012272:	601a      	str	r2, [r3, #0]
 8012274:	2300      	movs	r3, #0
 8012276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012278:	683b      	ldr	r3, [r7, #0]
 801227a:	f383 8811 	msr	BASEPRI, r3
}
 801227e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012280:	bf00      	nop
 8012282:	3708      	adds	r7, #8
 8012284:	46bd      	mov	sp, r7
 8012286:	bd80      	pop	{r7, pc}
 8012288:	e000ed04 	.word	0xe000ed04

0801228c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801228c:	b480      	push	{r7}
 801228e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012290:	4b0b      	ldr	r3, [pc, #44]	; (80122c0 <vPortSetupTimerInterrupt+0x34>)
 8012292:	2200      	movs	r2, #0
 8012294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012296:	4b0b      	ldr	r3, [pc, #44]	; (80122c4 <vPortSetupTimerInterrupt+0x38>)
 8012298:	2200      	movs	r2, #0
 801229a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801229c:	4b0a      	ldr	r3, [pc, #40]	; (80122c8 <vPortSetupTimerInterrupt+0x3c>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	4a0a      	ldr	r2, [pc, #40]	; (80122cc <vPortSetupTimerInterrupt+0x40>)
 80122a2:	fba2 2303 	umull	r2, r3, r2, r3
 80122a6:	099b      	lsrs	r3, r3, #6
 80122a8:	4a09      	ldr	r2, [pc, #36]	; (80122d0 <vPortSetupTimerInterrupt+0x44>)
 80122aa:	3b01      	subs	r3, #1
 80122ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80122ae:	4b04      	ldr	r3, [pc, #16]	; (80122c0 <vPortSetupTimerInterrupt+0x34>)
 80122b0:	2207      	movs	r2, #7
 80122b2:	601a      	str	r2, [r3, #0]
}
 80122b4:	bf00      	nop
 80122b6:	46bd      	mov	sp, r7
 80122b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122bc:	4770      	bx	lr
 80122be:	bf00      	nop
 80122c0:	e000e010 	.word	0xe000e010
 80122c4:	e000e018 	.word	0xe000e018
 80122c8:	20000000 	.word	0x20000000
 80122cc:	10624dd3 	.word	0x10624dd3
 80122d0:	e000e014 	.word	0xe000e014

080122d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80122d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80122e4 <vPortEnableVFP+0x10>
 80122d8:	6801      	ldr	r1, [r0, #0]
 80122da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80122de:	6001      	str	r1, [r0, #0]
 80122e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80122e2:	bf00      	nop
 80122e4:	e000ed88 	.word	0xe000ed88

080122e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80122e8:	b480      	push	{r7}
 80122ea:	b085      	sub	sp, #20
 80122ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80122ee:	f3ef 8305 	mrs	r3, IPSR
 80122f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	2b0f      	cmp	r3, #15
 80122f8:	d914      	bls.n	8012324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80122fa:	4a17      	ldr	r2, [pc, #92]	; (8012358 <vPortValidateInterruptPriority+0x70>)
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	4413      	add	r3, r2
 8012300:	781b      	ldrb	r3, [r3, #0]
 8012302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012304:	4b15      	ldr	r3, [pc, #84]	; (801235c <vPortValidateInterruptPriority+0x74>)
 8012306:	781b      	ldrb	r3, [r3, #0]
 8012308:	7afa      	ldrb	r2, [r7, #11]
 801230a:	429a      	cmp	r2, r3
 801230c:	d20a      	bcs.n	8012324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801230e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012312:	f383 8811 	msr	BASEPRI, r3
 8012316:	f3bf 8f6f 	isb	sy
 801231a:	f3bf 8f4f 	dsb	sy
 801231e:	607b      	str	r3, [r7, #4]
}
 8012320:	bf00      	nop
 8012322:	e7fe      	b.n	8012322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012324:	4b0e      	ldr	r3, [pc, #56]	; (8012360 <vPortValidateInterruptPriority+0x78>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801232c:	4b0d      	ldr	r3, [pc, #52]	; (8012364 <vPortValidateInterruptPriority+0x7c>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	429a      	cmp	r2, r3
 8012332:	d90a      	bls.n	801234a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012338:	f383 8811 	msr	BASEPRI, r3
 801233c:	f3bf 8f6f 	isb	sy
 8012340:	f3bf 8f4f 	dsb	sy
 8012344:	603b      	str	r3, [r7, #0]
}
 8012346:	bf00      	nop
 8012348:	e7fe      	b.n	8012348 <vPortValidateInterruptPriority+0x60>
	}
 801234a:	bf00      	nop
 801234c:	3714      	adds	r7, #20
 801234e:	46bd      	mov	sp, r7
 8012350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012354:	4770      	bx	lr
 8012356:	bf00      	nop
 8012358:	e000e3f0 	.word	0xe000e3f0
 801235c:	20001a98 	.word	0x20001a98
 8012360:	e000ed0c 	.word	0xe000ed0c
 8012364:	20001a9c 	.word	0x20001a9c

08012368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b08a      	sub	sp, #40	; 0x28
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012370:	2300      	movs	r3, #0
 8012372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012374:	f7fe f9e6 	bl	8010744 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012378:	4b5b      	ldr	r3, [pc, #364]	; (80124e8 <pvPortMalloc+0x180>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d101      	bne.n	8012384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012380:	f000 f920 	bl	80125c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012384:	4b59      	ldr	r3, [pc, #356]	; (80124ec <pvPortMalloc+0x184>)
 8012386:	681a      	ldr	r2, [r3, #0]
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	4013      	ands	r3, r2
 801238c:	2b00      	cmp	r3, #0
 801238e:	f040 8093 	bne.w	80124b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d01d      	beq.n	80123d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012398:	2208      	movs	r2, #8
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	4413      	add	r3, r2
 801239e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f003 0307 	and.w	r3, r3, #7
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d014      	beq.n	80123d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	f023 0307 	bic.w	r3, r3, #7
 80123b0:	3308      	adds	r3, #8
 80123b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f003 0307 	and.w	r3, r3, #7
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d00a      	beq.n	80123d4 <pvPortMalloc+0x6c>
	__asm volatile
 80123be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123c2:	f383 8811 	msr	BASEPRI, r3
 80123c6:	f3bf 8f6f 	isb	sy
 80123ca:	f3bf 8f4f 	dsb	sy
 80123ce:	617b      	str	r3, [r7, #20]
}
 80123d0:	bf00      	nop
 80123d2:	e7fe      	b.n	80123d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d06e      	beq.n	80124b8 <pvPortMalloc+0x150>
 80123da:	4b45      	ldr	r3, [pc, #276]	; (80124f0 <pvPortMalloc+0x188>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	687a      	ldr	r2, [r7, #4]
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d869      	bhi.n	80124b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80123e4:	4b43      	ldr	r3, [pc, #268]	; (80124f4 <pvPortMalloc+0x18c>)
 80123e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80123e8:	4b42      	ldr	r3, [pc, #264]	; (80124f4 <pvPortMalloc+0x18c>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80123ee:	e004      	b.n	80123fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80123f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80123f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80123fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123fc:	685b      	ldr	r3, [r3, #4]
 80123fe:	687a      	ldr	r2, [r7, #4]
 8012400:	429a      	cmp	r2, r3
 8012402:	d903      	bls.n	801240c <pvPortMalloc+0xa4>
 8012404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d1f1      	bne.n	80123f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801240c:	4b36      	ldr	r3, [pc, #216]	; (80124e8 <pvPortMalloc+0x180>)
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012412:	429a      	cmp	r2, r3
 8012414:	d050      	beq.n	80124b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012416:	6a3b      	ldr	r3, [r7, #32]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	2208      	movs	r2, #8
 801241c:	4413      	add	r3, r2
 801241e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012422:	681a      	ldr	r2, [r3, #0]
 8012424:	6a3b      	ldr	r3, [r7, #32]
 8012426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242a:	685a      	ldr	r2, [r3, #4]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	1ad2      	subs	r2, r2, r3
 8012430:	2308      	movs	r3, #8
 8012432:	005b      	lsls	r3, r3, #1
 8012434:	429a      	cmp	r2, r3
 8012436:	d91f      	bls.n	8012478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	4413      	add	r3, r2
 801243e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012440:	69bb      	ldr	r3, [r7, #24]
 8012442:	f003 0307 	and.w	r3, r3, #7
 8012446:	2b00      	cmp	r3, #0
 8012448:	d00a      	beq.n	8012460 <pvPortMalloc+0xf8>
	__asm volatile
 801244a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801244e:	f383 8811 	msr	BASEPRI, r3
 8012452:	f3bf 8f6f 	isb	sy
 8012456:	f3bf 8f4f 	dsb	sy
 801245a:	613b      	str	r3, [r7, #16]
}
 801245c:	bf00      	nop
 801245e:	e7fe      	b.n	801245e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012462:	685a      	ldr	r2, [r3, #4]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	1ad2      	subs	r2, r2, r3
 8012468:	69bb      	ldr	r3, [r7, #24]
 801246a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801246e:	687a      	ldr	r2, [r7, #4]
 8012470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012472:	69b8      	ldr	r0, [r7, #24]
 8012474:	f000 f908 	bl	8012688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012478:	4b1d      	ldr	r3, [pc, #116]	; (80124f0 <pvPortMalloc+0x188>)
 801247a:	681a      	ldr	r2, [r3, #0]
 801247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801247e:	685b      	ldr	r3, [r3, #4]
 8012480:	1ad3      	subs	r3, r2, r3
 8012482:	4a1b      	ldr	r2, [pc, #108]	; (80124f0 <pvPortMalloc+0x188>)
 8012484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012486:	4b1a      	ldr	r3, [pc, #104]	; (80124f0 <pvPortMalloc+0x188>)
 8012488:	681a      	ldr	r2, [r3, #0]
 801248a:	4b1b      	ldr	r3, [pc, #108]	; (80124f8 <pvPortMalloc+0x190>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	429a      	cmp	r2, r3
 8012490:	d203      	bcs.n	801249a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012492:	4b17      	ldr	r3, [pc, #92]	; (80124f0 <pvPortMalloc+0x188>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	4a18      	ldr	r2, [pc, #96]	; (80124f8 <pvPortMalloc+0x190>)
 8012498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801249c:	685a      	ldr	r2, [r3, #4]
 801249e:	4b13      	ldr	r3, [pc, #76]	; (80124ec <pvPortMalloc+0x184>)
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	431a      	orrs	r2, r3
 80124a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80124a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124aa:	2200      	movs	r2, #0
 80124ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80124ae:	4b13      	ldr	r3, [pc, #76]	; (80124fc <pvPortMalloc+0x194>)
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	3301      	adds	r3, #1
 80124b4:	4a11      	ldr	r2, [pc, #68]	; (80124fc <pvPortMalloc+0x194>)
 80124b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80124b8:	f7fe f952 	bl	8010760 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80124bc:	69fb      	ldr	r3, [r7, #28]
 80124be:	f003 0307 	and.w	r3, r3, #7
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d00a      	beq.n	80124dc <pvPortMalloc+0x174>
	__asm volatile
 80124c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ca:	f383 8811 	msr	BASEPRI, r3
 80124ce:	f3bf 8f6f 	isb	sy
 80124d2:	f3bf 8f4f 	dsb	sy
 80124d6:	60fb      	str	r3, [r7, #12]
}
 80124d8:	bf00      	nop
 80124da:	e7fe      	b.n	80124da <pvPortMalloc+0x172>
	return pvReturn;
 80124dc:	69fb      	ldr	r3, [r7, #28]
}
 80124de:	4618      	mov	r0, r3
 80124e0:	3728      	adds	r7, #40	; 0x28
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}
 80124e6:	bf00      	nop
 80124e8:	200056a8 	.word	0x200056a8
 80124ec:	200056bc 	.word	0x200056bc
 80124f0:	200056ac 	.word	0x200056ac
 80124f4:	200056a0 	.word	0x200056a0
 80124f8:	200056b0 	.word	0x200056b0
 80124fc:	200056b4 	.word	0x200056b4

08012500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b086      	sub	sp, #24
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d04d      	beq.n	80125ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012512:	2308      	movs	r3, #8
 8012514:	425b      	negs	r3, r3
 8012516:	697a      	ldr	r2, [r7, #20]
 8012518:	4413      	add	r3, r2
 801251a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012520:	693b      	ldr	r3, [r7, #16]
 8012522:	685a      	ldr	r2, [r3, #4]
 8012524:	4b24      	ldr	r3, [pc, #144]	; (80125b8 <vPortFree+0xb8>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	4013      	ands	r3, r2
 801252a:	2b00      	cmp	r3, #0
 801252c:	d10a      	bne.n	8012544 <vPortFree+0x44>
	__asm volatile
 801252e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012532:	f383 8811 	msr	BASEPRI, r3
 8012536:	f3bf 8f6f 	isb	sy
 801253a:	f3bf 8f4f 	dsb	sy
 801253e:	60fb      	str	r3, [r7, #12]
}
 8012540:	bf00      	nop
 8012542:	e7fe      	b.n	8012542 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d00a      	beq.n	8012562 <vPortFree+0x62>
	__asm volatile
 801254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012550:	f383 8811 	msr	BASEPRI, r3
 8012554:	f3bf 8f6f 	isb	sy
 8012558:	f3bf 8f4f 	dsb	sy
 801255c:	60bb      	str	r3, [r7, #8]
}
 801255e:	bf00      	nop
 8012560:	e7fe      	b.n	8012560 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	685a      	ldr	r2, [r3, #4]
 8012566:	4b14      	ldr	r3, [pc, #80]	; (80125b8 <vPortFree+0xb8>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	4013      	ands	r3, r2
 801256c:	2b00      	cmp	r3, #0
 801256e:	d01e      	beq.n	80125ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012570:	693b      	ldr	r3, [r7, #16]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d11a      	bne.n	80125ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012578:	693b      	ldr	r3, [r7, #16]
 801257a:	685a      	ldr	r2, [r3, #4]
 801257c:	4b0e      	ldr	r3, [pc, #56]	; (80125b8 <vPortFree+0xb8>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	43db      	mvns	r3, r3
 8012582:	401a      	ands	r2, r3
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012588:	f7fe f8dc 	bl	8010744 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801258c:	693b      	ldr	r3, [r7, #16]
 801258e:	685a      	ldr	r2, [r3, #4]
 8012590:	4b0a      	ldr	r3, [pc, #40]	; (80125bc <vPortFree+0xbc>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	4413      	add	r3, r2
 8012596:	4a09      	ldr	r2, [pc, #36]	; (80125bc <vPortFree+0xbc>)
 8012598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801259a:	6938      	ldr	r0, [r7, #16]
 801259c:	f000 f874 	bl	8012688 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80125a0:	4b07      	ldr	r3, [pc, #28]	; (80125c0 <vPortFree+0xc0>)
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	3301      	adds	r3, #1
 80125a6:	4a06      	ldr	r2, [pc, #24]	; (80125c0 <vPortFree+0xc0>)
 80125a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80125aa:	f7fe f8d9 	bl	8010760 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80125ae:	bf00      	nop
 80125b0:	3718      	adds	r7, #24
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}
 80125b6:	bf00      	nop
 80125b8:	200056bc 	.word	0x200056bc
 80125bc:	200056ac 	.word	0x200056ac
 80125c0:	200056b8 	.word	0x200056b8

080125c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80125c4:	b480      	push	{r7}
 80125c6:	b085      	sub	sp, #20
 80125c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80125ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80125ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80125d0:	4b27      	ldr	r3, [pc, #156]	; (8012670 <prvHeapInit+0xac>)
 80125d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	f003 0307 	and.w	r3, r3, #7
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d00c      	beq.n	80125f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	3307      	adds	r3, #7
 80125e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	f023 0307 	bic.w	r3, r3, #7
 80125ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80125ec:	68ba      	ldr	r2, [r7, #8]
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	1ad3      	subs	r3, r2, r3
 80125f2:	4a1f      	ldr	r2, [pc, #124]	; (8012670 <prvHeapInit+0xac>)
 80125f4:	4413      	add	r3, r2
 80125f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80125fc:	4a1d      	ldr	r2, [pc, #116]	; (8012674 <prvHeapInit+0xb0>)
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012602:	4b1c      	ldr	r3, [pc, #112]	; (8012674 <prvHeapInit+0xb0>)
 8012604:	2200      	movs	r2, #0
 8012606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	68ba      	ldr	r2, [r7, #8]
 801260c:	4413      	add	r3, r2
 801260e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012610:	2208      	movs	r2, #8
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	1a9b      	subs	r3, r3, r2
 8012616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	f023 0307 	bic.w	r3, r3, #7
 801261e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	4a15      	ldr	r2, [pc, #84]	; (8012678 <prvHeapInit+0xb4>)
 8012624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012626:	4b14      	ldr	r3, [pc, #80]	; (8012678 <prvHeapInit+0xb4>)
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	2200      	movs	r2, #0
 801262c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801262e:	4b12      	ldr	r3, [pc, #72]	; (8012678 <prvHeapInit+0xb4>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	2200      	movs	r2, #0
 8012634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	68fa      	ldr	r2, [r7, #12]
 801263e:	1ad2      	subs	r2, r2, r3
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012644:	4b0c      	ldr	r3, [pc, #48]	; (8012678 <prvHeapInit+0xb4>)
 8012646:	681a      	ldr	r2, [r3, #0]
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	685b      	ldr	r3, [r3, #4]
 8012650:	4a0a      	ldr	r2, [pc, #40]	; (801267c <prvHeapInit+0xb8>)
 8012652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	685b      	ldr	r3, [r3, #4]
 8012658:	4a09      	ldr	r2, [pc, #36]	; (8012680 <prvHeapInit+0xbc>)
 801265a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801265c:	4b09      	ldr	r3, [pc, #36]	; (8012684 <prvHeapInit+0xc0>)
 801265e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012662:	601a      	str	r2, [r3, #0]
}
 8012664:	bf00      	nop
 8012666:	3714      	adds	r7, #20
 8012668:	46bd      	mov	sp, r7
 801266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266e:	4770      	bx	lr
 8012670:	20001aa0 	.word	0x20001aa0
 8012674:	200056a0 	.word	0x200056a0
 8012678:	200056a8 	.word	0x200056a8
 801267c:	200056b0 	.word	0x200056b0
 8012680:	200056ac 	.word	0x200056ac
 8012684:	200056bc 	.word	0x200056bc

08012688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012688:	b480      	push	{r7}
 801268a:	b085      	sub	sp, #20
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012690:	4b28      	ldr	r3, [pc, #160]	; (8012734 <prvInsertBlockIntoFreeList+0xac>)
 8012692:	60fb      	str	r3, [r7, #12]
 8012694:	e002      	b.n	801269c <prvInsertBlockIntoFreeList+0x14>
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	60fb      	str	r3, [r7, #12]
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	687a      	ldr	r2, [r7, #4]
 80126a2:	429a      	cmp	r2, r3
 80126a4:	d8f7      	bhi.n	8012696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	685b      	ldr	r3, [r3, #4]
 80126ae:	68ba      	ldr	r2, [r7, #8]
 80126b0:	4413      	add	r3, r2
 80126b2:	687a      	ldr	r2, [r7, #4]
 80126b4:	429a      	cmp	r2, r3
 80126b6:	d108      	bne.n	80126ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	685a      	ldr	r2, [r3, #4]
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	685b      	ldr	r3, [r3, #4]
 80126c0:	441a      	add	r2, r3
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	685b      	ldr	r3, [r3, #4]
 80126d2:	68ba      	ldr	r2, [r7, #8]
 80126d4:	441a      	add	r2, r3
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	429a      	cmp	r2, r3
 80126dc:	d118      	bne.n	8012710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	681a      	ldr	r2, [r3, #0]
 80126e2:	4b15      	ldr	r3, [pc, #84]	; (8012738 <prvInsertBlockIntoFreeList+0xb0>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d00d      	beq.n	8012706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	685a      	ldr	r2, [r3, #4]
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	685b      	ldr	r3, [r3, #4]
 80126f4:	441a      	add	r2, r3
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	681a      	ldr	r2, [r3, #0]
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	601a      	str	r2, [r3, #0]
 8012704:	e008      	b.n	8012718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012706:	4b0c      	ldr	r3, [pc, #48]	; (8012738 <prvInsertBlockIntoFreeList+0xb0>)
 8012708:	681a      	ldr	r2, [r3, #0]
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	601a      	str	r2, [r3, #0]
 801270e:	e003      	b.n	8012718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	681a      	ldr	r2, [r3, #0]
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012718:	68fa      	ldr	r2, [r7, #12]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	429a      	cmp	r2, r3
 801271e:	d002      	beq.n	8012726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	687a      	ldr	r2, [r7, #4]
 8012724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012726:	bf00      	nop
 8012728:	3714      	adds	r7, #20
 801272a:	46bd      	mov	sp, r7
 801272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012730:	4770      	bx	lr
 8012732:	bf00      	nop
 8012734:	200056a0 	.word	0x200056a0
 8012738:	200056a8 	.word	0x200056a8

0801273c <findslot>:
 801273c:	4b0a      	ldr	r3, [pc, #40]	; (8012768 <findslot+0x2c>)
 801273e:	b510      	push	{r4, lr}
 8012740:	4604      	mov	r4, r0
 8012742:	6818      	ldr	r0, [r3, #0]
 8012744:	b118      	cbz	r0, 801274e <findslot+0x12>
 8012746:	6983      	ldr	r3, [r0, #24]
 8012748:	b90b      	cbnz	r3, 801274e <findslot+0x12>
 801274a:	f000 faf9 	bl	8012d40 <__sinit>
 801274e:	2c13      	cmp	r4, #19
 8012750:	d807      	bhi.n	8012762 <findslot+0x26>
 8012752:	4806      	ldr	r0, [pc, #24]	; (801276c <findslot+0x30>)
 8012754:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8012758:	3201      	adds	r2, #1
 801275a:	d002      	beq.n	8012762 <findslot+0x26>
 801275c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8012760:	bd10      	pop	{r4, pc}
 8012762:	2000      	movs	r0, #0
 8012764:	e7fc      	b.n	8012760 <findslot+0x24>
 8012766:	bf00      	nop
 8012768:	20000080 	.word	0x20000080
 801276c:	200056cc 	.word	0x200056cc

08012770 <error>:
 8012770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012772:	4604      	mov	r4, r0
 8012774:	f000 fa86 	bl	8012c84 <__errno>
 8012778:	2613      	movs	r6, #19
 801277a:	4605      	mov	r5, r0
 801277c:	2700      	movs	r7, #0
 801277e:	4630      	mov	r0, r6
 8012780:	4639      	mov	r1, r7
 8012782:	beab      	bkpt	0x00ab
 8012784:	4606      	mov	r6, r0
 8012786:	602e      	str	r6, [r5, #0]
 8012788:	4620      	mov	r0, r4
 801278a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801278c <checkerror>:
 801278c:	1c43      	adds	r3, r0, #1
 801278e:	d101      	bne.n	8012794 <checkerror+0x8>
 8012790:	f7ff bfee 	b.w	8012770 <error>
 8012794:	4770      	bx	lr

08012796 <_swiread>:
 8012796:	b530      	push	{r4, r5, lr}
 8012798:	b085      	sub	sp, #20
 801279a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 801279e:	9203      	str	r2, [sp, #12]
 80127a0:	2406      	movs	r4, #6
 80127a2:	ad01      	add	r5, sp, #4
 80127a4:	4620      	mov	r0, r4
 80127a6:	4629      	mov	r1, r5
 80127a8:	beab      	bkpt	0x00ab
 80127aa:	4604      	mov	r4, r0
 80127ac:	4620      	mov	r0, r4
 80127ae:	f7ff ffed 	bl	801278c <checkerror>
 80127b2:	b005      	add	sp, #20
 80127b4:	bd30      	pop	{r4, r5, pc}

080127b6 <_read>:
 80127b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80127b8:	4615      	mov	r5, r2
 80127ba:	9101      	str	r1, [sp, #4]
 80127bc:	f7ff ffbe 	bl	801273c <findslot>
 80127c0:	9901      	ldr	r1, [sp, #4]
 80127c2:	4604      	mov	r4, r0
 80127c4:	b938      	cbnz	r0, 80127d6 <_read+0x20>
 80127c6:	f000 fa5d 	bl	8012c84 <__errno>
 80127ca:	2309      	movs	r3, #9
 80127cc:	6003      	str	r3, [r0, #0]
 80127ce:	f04f 30ff 	mov.w	r0, #4294967295
 80127d2:	b003      	add	sp, #12
 80127d4:	bd30      	pop	{r4, r5, pc}
 80127d6:	6800      	ldr	r0, [r0, #0]
 80127d8:	462a      	mov	r2, r5
 80127da:	f7ff ffdc 	bl	8012796 <_swiread>
 80127de:	1c43      	adds	r3, r0, #1
 80127e0:	d0f7      	beq.n	80127d2 <_read+0x1c>
 80127e2:	6863      	ldr	r3, [r4, #4]
 80127e4:	1a2a      	subs	r2, r5, r0
 80127e6:	4413      	add	r3, r2
 80127e8:	6063      	str	r3, [r4, #4]
 80127ea:	4610      	mov	r0, r2
 80127ec:	e7f1      	b.n	80127d2 <_read+0x1c>

080127ee <_swilseek>:
 80127ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80127f0:	460c      	mov	r4, r1
 80127f2:	4616      	mov	r6, r2
 80127f4:	f7ff ffa2 	bl	801273c <findslot>
 80127f8:	4605      	mov	r5, r0
 80127fa:	b940      	cbnz	r0, 801280e <_swilseek+0x20>
 80127fc:	f000 fa42 	bl	8012c84 <__errno>
 8012800:	2309      	movs	r3, #9
 8012802:	6003      	str	r3, [r0, #0]
 8012804:	f04f 34ff 	mov.w	r4, #4294967295
 8012808:	4620      	mov	r0, r4
 801280a:	b003      	add	sp, #12
 801280c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801280e:	2e02      	cmp	r6, #2
 8012810:	d903      	bls.n	801281a <_swilseek+0x2c>
 8012812:	f000 fa37 	bl	8012c84 <__errno>
 8012816:	2316      	movs	r3, #22
 8012818:	e7f3      	b.n	8012802 <_swilseek+0x14>
 801281a:	2e01      	cmp	r6, #1
 801281c:	d112      	bne.n	8012844 <_swilseek+0x56>
 801281e:	6843      	ldr	r3, [r0, #4]
 8012820:	18e4      	adds	r4, r4, r3
 8012822:	d4f6      	bmi.n	8012812 <_swilseek+0x24>
 8012824:	682b      	ldr	r3, [r5, #0]
 8012826:	260a      	movs	r6, #10
 8012828:	e9cd 3400 	strd	r3, r4, [sp]
 801282c:	466f      	mov	r7, sp
 801282e:	4630      	mov	r0, r6
 8012830:	4639      	mov	r1, r7
 8012832:	beab      	bkpt	0x00ab
 8012834:	4606      	mov	r6, r0
 8012836:	4630      	mov	r0, r6
 8012838:	f7ff ffa8 	bl	801278c <checkerror>
 801283c:	2800      	cmp	r0, #0
 801283e:	dbe1      	blt.n	8012804 <_swilseek+0x16>
 8012840:	606c      	str	r4, [r5, #4]
 8012842:	e7e1      	b.n	8012808 <_swilseek+0x1a>
 8012844:	2e02      	cmp	r6, #2
 8012846:	d1ed      	bne.n	8012824 <_swilseek+0x36>
 8012848:	6803      	ldr	r3, [r0, #0]
 801284a:	9300      	str	r3, [sp, #0]
 801284c:	260c      	movs	r6, #12
 801284e:	466f      	mov	r7, sp
 8012850:	4630      	mov	r0, r6
 8012852:	4639      	mov	r1, r7
 8012854:	beab      	bkpt	0x00ab
 8012856:	4606      	mov	r6, r0
 8012858:	4630      	mov	r0, r6
 801285a:	f7ff ff97 	bl	801278c <checkerror>
 801285e:	1c43      	adds	r3, r0, #1
 8012860:	d0d0      	beq.n	8012804 <_swilseek+0x16>
 8012862:	4404      	add	r4, r0
 8012864:	e7de      	b.n	8012824 <_swilseek+0x36>

08012866 <_lseek>:
 8012866:	f7ff bfc2 	b.w	80127ee <_swilseek>

0801286a <_swiwrite>:
 801286a:	b530      	push	{r4, r5, lr}
 801286c:	b085      	sub	sp, #20
 801286e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8012872:	9203      	str	r2, [sp, #12]
 8012874:	2405      	movs	r4, #5
 8012876:	ad01      	add	r5, sp, #4
 8012878:	4620      	mov	r0, r4
 801287a:	4629      	mov	r1, r5
 801287c:	beab      	bkpt	0x00ab
 801287e:	4604      	mov	r4, r0
 8012880:	4620      	mov	r0, r4
 8012882:	f7ff ff83 	bl	801278c <checkerror>
 8012886:	b005      	add	sp, #20
 8012888:	bd30      	pop	{r4, r5, pc}

0801288a <_write>:
 801288a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801288c:	4615      	mov	r5, r2
 801288e:	9101      	str	r1, [sp, #4]
 8012890:	f7ff ff54 	bl	801273c <findslot>
 8012894:	9901      	ldr	r1, [sp, #4]
 8012896:	4604      	mov	r4, r0
 8012898:	b930      	cbnz	r0, 80128a8 <_write+0x1e>
 801289a:	f000 f9f3 	bl	8012c84 <__errno>
 801289e:	2309      	movs	r3, #9
 80128a0:	6003      	str	r3, [r0, #0]
 80128a2:	f04f 30ff 	mov.w	r0, #4294967295
 80128a6:	e012      	b.n	80128ce <_write+0x44>
 80128a8:	6800      	ldr	r0, [r0, #0]
 80128aa:	462a      	mov	r2, r5
 80128ac:	f7ff ffdd 	bl	801286a <_swiwrite>
 80128b0:	2800      	cmp	r0, #0
 80128b2:	dbf6      	blt.n	80128a2 <_write+0x18>
 80128b4:	6862      	ldr	r2, [r4, #4]
 80128b6:	1a2b      	subs	r3, r5, r0
 80128b8:	441a      	add	r2, r3
 80128ba:	42a8      	cmp	r0, r5
 80128bc:	6062      	str	r2, [r4, #4]
 80128be:	d105      	bne.n	80128cc <_write+0x42>
 80128c0:	2000      	movs	r0, #0
 80128c2:	b003      	add	sp, #12
 80128c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80128c8:	f7ff bf52 	b.w	8012770 <error>
 80128cc:	4618      	mov	r0, r3
 80128ce:	b003      	add	sp, #12
 80128d0:	bd30      	pop	{r4, r5, pc}

080128d2 <_swiclose>:
 80128d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80128d4:	2402      	movs	r4, #2
 80128d6:	9001      	str	r0, [sp, #4]
 80128d8:	ad01      	add	r5, sp, #4
 80128da:	4620      	mov	r0, r4
 80128dc:	4629      	mov	r1, r5
 80128de:	beab      	bkpt	0x00ab
 80128e0:	4604      	mov	r4, r0
 80128e2:	4620      	mov	r0, r4
 80128e4:	f7ff ff52 	bl	801278c <checkerror>
 80128e8:	b003      	add	sp, #12
 80128ea:	bd30      	pop	{r4, r5, pc}

080128ec <_close>:
 80128ec:	b538      	push	{r3, r4, r5, lr}
 80128ee:	4605      	mov	r5, r0
 80128f0:	f7ff ff24 	bl	801273c <findslot>
 80128f4:	4604      	mov	r4, r0
 80128f6:	b930      	cbnz	r0, 8012906 <_close+0x1a>
 80128f8:	f000 f9c4 	bl	8012c84 <__errno>
 80128fc:	2309      	movs	r3, #9
 80128fe:	6003      	str	r3, [r0, #0]
 8012900:	f04f 30ff 	mov.w	r0, #4294967295
 8012904:	bd38      	pop	{r3, r4, r5, pc}
 8012906:	3d01      	subs	r5, #1
 8012908:	2d01      	cmp	r5, #1
 801290a:	d809      	bhi.n	8012920 <_close+0x34>
 801290c:	4b09      	ldr	r3, [pc, #36]	; (8012934 <_close+0x48>)
 801290e:	689a      	ldr	r2, [r3, #8]
 8012910:	691b      	ldr	r3, [r3, #16]
 8012912:	429a      	cmp	r2, r3
 8012914:	d104      	bne.n	8012920 <_close+0x34>
 8012916:	f04f 33ff 	mov.w	r3, #4294967295
 801291a:	6003      	str	r3, [r0, #0]
 801291c:	2000      	movs	r0, #0
 801291e:	e7f1      	b.n	8012904 <_close+0x18>
 8012920:	6820      	ldr	r0, [r4, #0]
 8012922:	f7ff ffd6 	bl	80128d2 <_swiclose>
 8012926:	2800      	cmp	r0, #0
 8012928:	d1ec      	bne.n	8012904 <_close+0x18>
 801292a:	f04f 33ff 	mov.w	r3, #4294967295
 801292e:	6023      	str	r3, [r4, #0]
 8012930:	e7e8      	b.n	8012904 <_close+0x18>
 8012932:	bf00      	nop
 8012934:	200056cc 	.word	0x200056cc

08012938 <_getpid>:
 8012938:	2001      	movs	r0, #1
 801293a:	4770      	bx	lr

0801293c <_swistat>:
 801293c:	b570      	push	{r4, r5, r6, lr}
 801293e:	460c      	mov	r4, r1
 8012940:	f7ff fefc 	bl	801273c <findslot>
 8012944:	4605      	mov	r5, r0
 8012946:	b930      	cbnz	r0, 8012956 <_swistat+0x1a>
 8012948:	f000 f99c 	bl	8012c84 <__errno>
 801294c:	2309      	movs	r3, #9
 801294e:	6003      	str	r3, [r0, #0]
 8012950:	f04f 30ff 	mov.w	r0, #4294967295
 8012954:	bd70      	pop	{r4, r5, r6, pc}
 8012956:	6863      	ldr	r3, [r4, #4]
 8012958:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801295c:	6063      	str	r3, [r4, #4]
 801295e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012962:	64a3      	str	r3, [r4, #72]	; 0x48
 8012964:	260c      	movs	r6, #12
 8012966:	4630      	mov	r0, r6
 8012968:	4629      	mov	r1, r5
 801296a:	beab      	bkpt	0x00ab
 801296c:	4605      	mov	r5, r0
 801296e:	4628      	mov	r0, r5
 8012970:	f7ff ff0c 	bl	801278c <checkerror>
 8012974:	1c43      	adds	r3, r0, #1
 8012976:	bf1c      	itt	ne
 8012978:	6120      	strne	r0, [r4, #16]
 801297a:	2000      	movne	r0, #0
 801297c:	e7ea      	b.n	8012954 <_swistat+0x18>

0801297e <_fstat>:
 801297e:	460b      	mov	r3, r1
 8012980:	b510      	push	{r4, lr}
 8012982:	2100      	movs	r1, #0
 8012984:	4604      	mov	r4, r0
 8012986:	2258      	movs	r2, #88	; 0x58
 8012988:	4618      	mov	r0, r3
 801298a:	f000 faac 	bl	8012ee6 <memset>
 801298e:	4601      	mov	r1, r0
 8012990:	4620      	mov	r0, r4
 8012992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012996:	f7ff bfd1 	b.w	801293c <_swistat>

0801299a <_stat>:
 801299a:	b538      	push	{r3, r4, r5, lr}
 801299c:	460d      	mov	r5, r1
 801299e:	4604      	mov	r4, r0
 80129a0:	2258      	movs	r2, #88	; 0x58
 80129a2:	2100      	movs	r1, #0
 80129a4:	4628      	mov	r0, r5
 80129a6:	f000 fa9e 	bl	8012ee6 <memset>
 80129aa:	4620      	mov	r0, r4
 80129ac:	2100      	movs	r1, #0
 80129ae:	f000 f811 	bl	80129d4 <_swiopen>
 80129b2:	1c43      	adds	r3, r0, #1
 80129b4:	4604      	mov	r4, r0
 80129b6:	d00b      	beq.n	80129d0 <_stat+0x36>
 80129b8:	686b      	ldr	r3, [r5, #4]
 80129ba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80129be:	606b      	str	r3, [r5, #4]
 80129c0:	4629      	mov	r1, r5
 80129c2:	f7ff ffbb 	bl	801293c <_swistat>
 80129c6:	4605      	mov	r5, r0
 80129c8:	4620      	mov	r0, r4
 80129ca:	f7ff ff8f 	bl	80128ec <_close>
 80129ce:	462c      	mov	r4, r5
 80129d0:	4620      	mov	r0, r4
 80129d2:	bd38      	pop	{r3, r4, r5, pc}

080129d4 <_swiopen>:
 80129d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80129d8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8012a84 <_swiopen+0xb0>
 80129dc:	b097      	sub	sp, #92	; 0x5c
 80129de:	4607      	mov	r7, r0
 80129e0:	460e      	mov	r6, r1
 80129e2:	2500      	movs	r5, #0
 80129e4:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80129e8:	1c61      	adds	r1, r4, #1
 80129ea:	d037      	beq.n	8012a5c <_swiopen+0x88>
 80129ec:	3501      	adds	r5, #1
 80129ee:	2d14      	cmp	r5, #20
 80129f0:	d1f8      	bne.n	80129e4 <_swiopen+0x10>
 80129f2:	f000 f947 	bl	8012c84 <__errno>
 80129f6:	2318      	movs	r3, #24
 80129f8:	6003      	str	r3, [r0, #0]
 80129fa:	f04f 34ff 	mov.w	r4, #4294967295
 80129fe:	e03d      	b.n	8012a7c <_swiopen+0xa8>
 8012a00:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8012a04:	f240 6301 	movw	r3, #1537	; 0x601
 8012a08:	07b2      	lsls	r2, r6, #30
 8012a0a:	bf48      	it	mi
 8012a0c:	f044 0402 	orrmi.w	r4, r4, #2
 8012a10:	421e      	tst	r6, r3
 8012a12:	bf18      	it	ne
 8012a14:	f044 0404 	orrne.w	r4, r4, #4
 8012a18:	0733      	lsls	r3, r6, #28
 8012a1a:	bf48      	it	mi
 8012a1c:	f024 0404 	bicmi.w	r4, r4, #4
 8012a20:	4638      	mov	r0, r7
 8012a22:	bf48      	it	mi
 8012a24:	f044 0408 	orrmi.w	r4, r4, #8
 8012a28:	9700      	str	r7, [sp, #0]
 8012a2a:	f7ed fbd1 	bl	80001d0 <strlen>
 8012a2e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8012a32:	2401      	movs	r4, #1
 8012a34:	4620      	mov	r0, r4
 8012a36:	4649      	mov	r1, r9
 8012a38:	beab      	bkpt	0x00ab
 8012a3a:	4604      	mov	r4, r0
 8012a3c:	2c00      	cmp	r4, #0
 8012a3e:	db08      	blt.n	8012a52 <_swiopen+0x7e>
 8012a40:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8012a44:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8012a48:	2300      	movs	r3, #0
 8012a4a:	f8c8 3004 	str.w	r3, [r8, #4]
 8012a4e:	462c      	mov	r4, r5
 8012a50:	e014      	b.n	8012a7c <_swiopen+0xa8>
 8012a52:	4620      	mov	r0, r4
 8012a54:	f7ff fe8c 	bl	8012770 <error>
 8012a58:	4604      	mov	r4, r0
 8012a5a:	e00f      	b.n	8012a7c <_swiopen+0xa8>
 8012a5c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8012a60:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8012a64:	46e9      	mov	r9, sp
 8012a66:	d1cb      	bne.n	8012a00 <_swiopen+0x2c>
 8012a68:	4649      	mov	r1, r9
 8012a6a:	4638      	mov	r0, r7
 8012a6c:	f7ff ff95 	bl	801299a <_stat>
 8012a70:	3001      	adds	r0, #1
 8012a72:	d0c5      	beq.n	8012a00 <_swiopen+0x2c>
 8012a74:	f000 f906 	bl	8012c84 <__errno>
 8012a78:	2311      	movs	r3, #17
 8012a7a:	6003      	str	r3, [r0, #0]
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	b017      	add	sp, #92	; 0x5c
 8012a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a84:	200056cc 	.word	0x200056cc

08012a88 <_get_semihosting_exts>:
 8012a88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012a8c:	4606      	mov	r6, r0
 8012a8e:	460f      	mov	r7, r1
 8012a90:	482a      	ldr	r0, [pc, #168]	; (8012b3c <_get_semihosting_exts+0xb4>)
 8012a92:	2100      	movs	r1, #0
 8012a94:	4615      	mov	r5, r2
 8012a96:	f7ff ff9d 	bl	80129d4 <_swiopen>
 8012a9a:	462a      	mov	r2, r5
 8012a9c:	4604      	mov	r4, r0
 8012a9e:	2100      	movs	r1, #0
 8012aa0:	4630      	mov	r0, r6
 8012aa2:	f000 fa20 	bl	8012ee6 <memset>
 8012aa6:	1c63      	adds	r3, r4, #1
 8012aa8:	d016      	beq.n	8012ad8 <_get_semihosting_exts+0x50>
 8012aaa:	4620      	mov	r0, r4
 8012aac:	f7ff fe46 	bl	801273c <findslot>
 8012ab0:	f04f 090c 	mov.w	r9, #12
 8012ab4:	4680      	mov	r8, r0
 8012ab6:	4648      	mov	r0, r9
 8012ab8:	4641      	mov	r1, r8
 8012aba:	beab      	bkpt	0x00ab
 8012abc:	4680      	mov	r8, r0
 8012abe:	4640      	mov	r0, r8
 8012ac0:	f7ff fe64 	bl	801278c <checkerror>
 8012ac4:	2803      	cmp	r0, #3
 8012ac6:	dd02      	ble.n	8012ace <_get_semihosting_exts+0x46>
 8012ac8:	1ec3      	subs	r3, r0, #3
 8012aca:	42ab      	cmp	r3, r5
 8012acc:	dc08      	bgt.n	8012ae0 <_get_semihosting_exts+0x58>
 8012ace:	4620      	mov	r0, r4
 8012ad0:	f7ff ff0c 	bl	80128ec <_close>
 8012ad4:	f04f 34ff 	mov.w	r4, #4294967295
 8012ad8:	4620      	mov	r0, r4
 8012ada:	b003      	add	sp, #12
 8012adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ae0:	2204      	movs	r2, #4
 8012ae2:	eb0d 0102 	add.w	r1, sp, r2
 8012ae6:	4620      	mov	r0, r4
 8012ae8:	f7ff fe65 	bl	80127b6 <_read>
 8012aec:	2803      	cmp	r0, #3
 8012aee:	ddee      	ble.n	8012ace <_get_semihosting_exts+0x46>
 8012af0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012af4:	2b53      	cmp	r3, #83	; 0x53
 8012af6:	d1ea      	bne.n	8012ace <_get_semihosting_exts+0x46>
 8012af8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012afc:	2b48      	cmp	r3, #72	; 0x48
 8012afe:	d1e6      	bne.n	8012ace <_get_semihosting_exts+0x46>
 8012b00:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012b04:	2b46      	cmp	r3, #70	; 0x46
 8012b06:	d1e2      	bne.n	8012ace <_get_semihosting_exts+0x46>
 8012b08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012b0c:	2b42      	cmp	r3, #66	; 0x42
 8012b0e:	d1de      	bne.n	8012ace <_get_semihosting_exts+0x46>
 8012b10:	2201      	movs	r2, #1
 8012b12:	4639      	mov	r1, r7
 8012b14:	4620      	mov	r0, r4
 8012b16:	f7ff fe6a 	bl	80127ee <_swilseek>
 8012b1a:	2800      	cmp	r0, #0
 8012b1c:	dbd7      	blt.n	8012ace <_get_semihosting_exts+0x46>
 8012b1e:	462a      	mov	r2, r5
 8012b20:	4631      	mov	r1, r6
 8012b22:	4620      	mov	r0, r4
 8012b24:	f7ff fe47 	bl	80127b6 <_read>
 8012b28:	4605      	mov	r5, r0
 8012b2a:	4620      	mov	r0, r4
 8012b2c:	f7ff fede 	bl	80128ec <_close>
 8012b30:	4628      	mov	r0, r5
 8012b32:	f7ff fe2b 	bl	801278c <checkerror>
 8012b36:	4604      	mov	r4, r0
 8012b38:	e7ce      	b.n	8012ad8 <_get_semihosting_exts+0x50>
 8012b3a:	bf00      	nop
 8012b3c:	08019e84 	.word	0x08019e84

08012b40 <initialise_semihosting_exts>:
 8012b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b42:	4d0a      	ldr	r5, [pc, #40]	; (8012b6c <initialise_semihosting_exts+0x2c>)
 8012b44:	4c0a      	ldr	r4, [pc, #40]	; (8012b70 <initialise_semihosting_exts+0x30>)
 8012b46:	2100      	movs	r1, #0
 8012b48:	2201      	movs	r2, #1
 8012b4a:	a801      	add	r0, sp, #4
 8012b4c:	6029      	str	r1, [r5, #0]
 8012b4e:	6022      	str	r2, [r4, #0]
 8012b50:	f7ff ff9a 	bl	8012a88 <_get_semihosting_exts>
 8012b54:	2800      	cmp	r0, #0
 8012b56:	dd07      	ble.n	8012b68 <initialise_semihosting_exts+0x28>
 8012b58:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012b5c:	f003 0201 	and.w	r2, r3, #1
 8012b60:	f003 0302 	and.w	r3, r3, #2
 8012b64:	602a      	str	r2, [r5, #0]
 8012b66:	6023      	str	r3, [r4, #0]
 8012b68:	b003      	add	sp, #12
 8012b6a:	bd30      	pop	{r4, r5, pc}
 8012b6c:	20000078 	.word	0x20000078
 8012b70:	2000007c 	.word	0x2000007c

08012b74 <_has_ext_stdout_stderr>:
 8012b74:	b510      	push	{r4, lr}
 8012b76:	4c04      	ldr	r4, [pc, #16]	; (8012b88 <_has_ext_stdout_stderr+0x14>)
 8012b78:	6823      	ldr	r3, [r4, #0]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	da01      	bge.n	8012b82 <_has_ext_stdout_stderr+0xe>
 8012b7e:	f7ff ffdf 	bl	8012b40 <initialise_semihosting_exts>
 8012b82:	6820      	ldr	r0, [r4, #0]
 8012b84:	bd10      	pop	{r4, pc}
 8012b86:	bf00      	nop
 8012b88:	2000007c 	.word	0x2000007c

08012b8c <initialise_monitor_handles>:
 8012b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b90:	b085      	sub	sp, #20
 8012b92:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8012c44 <initialise_monitor_handles+0xb8>
 8012b96:	f8cd 9004 	str.w	r9, [sp, #4]
 8012b9a:	2303      	movs	r3, #3
 8012b9c:	2400      	movs	r4, #0
 8012b9e:	9303      	str	r3, [sp, #12]
 8012ba0:	af01      	add	r7, sp, #4
 8012ba2:	9402      	str	r4, [sp, #8]
 8012ba4:	2501      	movs	r5, #1
 8012ba6:	4628      	mov	r0, r5
 8012ba8:	4639      	mov	r1, r7
 8012baa:	beab      	bkpt	0x00ab
 8012bac:	4605      	mov	r5, r0
 8012bae:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8012c48 <initialise_monitor_handles+0xbc>
 8012bb2:	4623      	mov	r3, r4
 8012bb4:	4c20      	ldr	r4, [pc, #128]	; (8012c38 <initialise_monitor_handles+0xac>)
 8012bb6:	f8c8 5000 	str.w	r5, [r8]
 8012bba:	f04f 32ff 	mov.w	r2, #4294967295
 8012bbe:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	2b14      	cmp	r3, #20
 8012bc6:	d1fa      	bne.n	8012bbe <initialise_monitor_handles+0x32>
 8012bc8:	f7ff ffd4 	bl	8012b74 <_has_ext_stdout_stderr>
 8012bcc:	4d1b      	ldr	r5, [pc, #108]	; (8012c3c <initialise_monitor_handles+0xb0>)
 8012bce:	b1d0      	cbz	r0, 8012c06 <initialise_monitor_handles+0x7a>
 8012bd0:	f04f 0a03 	mov.w	sl, #3
 8012bd4:	2304      	movs	r3, #4
 8012bd6:	f8cd 9004 	str.w	r9, [sp, #4]
 8012bda:	2601      	movs	r6, #1
 8012bdc:	f8cd a00c 	str.w	sl, [sp, #12]
 8012be0:	9302      	str	r3, [sp, #8]
 8012be2:	4630      	mov	r0, r6
 8012be4:	4639      	mov	r1, r7
 8012be6:	beab      	bkpt	0x00ab
 8012be8:	4683      	mov	fp, r0
 8012bea:	4b15      	ldr	r3, [pc, #84]	; (8012c40 <initialise_monitor_handles+0xb4>)
 8012bec:	f8cd 9004 	str.w	r9, [sp, #4]
 8012bf0:	f8c3 b000 	str.w	fp, [r3]
 8012bf4:	2308      	movs	r3, #8
 8012bf6:	f8cd a00c 	str.w	sl, [sp, #12]
 8012bfa:	9302      	str	r3, [sp, #8]
 8012bfc:	4630      	mov	r0, r6
 8012bfe:	4639      	mov	r1, r7
 8012c00:	beab      	bkpt	0x00ab
 8012c02:	4606      	mov	r6, r0
 8012c04:	602e      	str	r6, [r5, #0]
 8012c06:	682b      	ldr	r3, [r5, #0]
 8012c08:	3301      	adds	r3, #1
 8012c0a:	bf02      	ittt	eq
 8012c0c:	4b0c      	ldreq	r3, [pc, #48]	; (8012c40 <initialise_monitor_handles+0xb4>)
 8012c0e:	681b      	ldreq	r3, [r3, #0]
 8012c10:	602b      	streq	r3, [r5, #0]
 8012c12:	2600      	movs	r6, #0
 8012c14:	f8d8 3000 	ldr.w	r3, [r8]
 8012c18:	6023      	str	r3, [r4, #0]
 8012c1a:	6066      	str	r6, [r4, #4]
 8012c1c:	f7ff ffaa 	bl	8012b74 <_has_ext_stdout_stderr>
 8012c20:	b130      	cbz	r0, 8012c30 <initialise_monitor_handles+0xa4>
 8012c22:	4b07      	ldr	r3, [pc, #28]	; (8012c40 <initialise_monitor_handles+0xb4>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8012c2a:	682b      	ldr	r3, [r5, #0]
 8012c2c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8012c30:	b005      	add	sp, #20
 8012c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c36:	bf00      	nop
 8012c38:	200056cc 	.word	0x200056cc
 8012c3c:	200056c0 	.word	0x200056c0
 8012c40:	200056c8 	.word	0x200056c8
 8012c44:	08019e9a 	.word	0x08019e9a
 8012c48:	200056c4 	.word	0x200056c4

08012c4c <_isatty>:
 8012c4c:	b570      	push	{r4, r5, r6, lr}
 8012c4e:	f7ff fd75 	bl	801273c <findslot>
 8012c52:	2509      	movs	r5, #9
 8012c54:	4604      	mov	r4, r0
 8012c56:	b920      	cbnz	r0, 8012c62 <_isatty+0x16>
 8012c58:	f000 f814 	bl	8012c84 <__errno>
 8012c5c:	6005      	str	r5, [r0, #0]
 8012c5e:	4620      	mov	r0, r4
 8012c60:	bd70      	pop	{r4, r5, r6, pc}
 8012c62:	4628      	mov	r0, r5
 8012c64:	4621      	mov	r1, r4
 8012c66:	beab      	bkpt	0x00ab
 8012c68:	4604      	mov	r4, r0
 8012c6a:	2c01      	cmp	r4, #1
 8012c6c:	d0f7      	beq.n	8012c5e <_isatty+0x12>
 8012c6e:	f000 f809 	bl	8012c84 <__errno>
 8012c72:	2400      	movs	r4, #0
 8012c74:	4605      	mov	r5, r0
 8012c76:	2613      	movs	r6, #19
 8012c78:	4630      	mov	r0, r6
 8012c7a:	4621      	mov	r1, r4
 8012c7c:	beab      	bkpt	0x00ab
 8012c7e:	4606      	mov	r6, r0
 8012c80:	602e      	str	r6, [r5, #0]
 8012c82:	e7ec      	b.n	8012c5e <_isatty+0x12>

08012c84 <__errno>:
 8012c84:	4b01      	ldr	r3, [pc, #4]	; (8012c8c <__errno+0x8>)
 8012c86:	6818      	ldr	r0, [r3, #0]
 8012c88:	4770      	bx	lr
 8012c8a:	bf00      	nop
 8012c8c:	20000080 	.word	0x20000080

08012c90 <std>:
 8012c90:	2300      	movs	r3, #0
 8012c92:	b510      	push	{r4, lr}
 8012c94:	4604      	mov	r4, r0
 8012c96:	e9c0 3300 	strd	r3, r3, [r0]
 8012c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012c9e:	6083      	str	r3, [r0, #8]
 8012ca0:	8181      	strh	r1, [r0, #12]
 8012ca2:	6643      	str	r3, [r0, #100]	; 0x64
 8012ca4:	81c2      	strh	r2, [r0, #14]
 8012ca6:	6183      	str	r3, [r0, #24]
 8012ca8:	4619      	mov	r1, r3
 8012caa:	2208      	movs	r2, #8
 8012cac:	305c      	adds	r0, #92	; 0x5c
 8012cae:	f000 f91a 	bl	8012ee6 <memset>
 8012cb2:	4b05      	ldr	r3, [pc, #20]	; (8012cc8 <std+0x38>)
 8012cb4:	6263      	str	r3, [r4, #36]	; 0x24
 8012cb6:	4b05      	ldr	r3, [pc, #20]	; (8012ccc <std+0x3c>)
 8012cb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8012cba:	4b05      	ldr	r3, [pc, #20]	; (8012cd0 <std+0x40>)
 8012cbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012cbe:	4b05      	ldr	r3, [pc, #20]	; (8012cd4 <std+0x44>)
 8012cc0:	6224      	str	r4, [r4, #32]
 8012cc2:	6323      	str	r3, [r4, #48]	; 0x30
 8012cc4:	bd10      	pop	{r4, pc}
 8012cc6:	bf00      	nop
 8012cc8:	08013a71 	.word	0x08013a71
 8012ccc:	08013a93 	.word	0x08013a93
 8012cd0:	08013acb 	.word	0x08013acb
 8012cd4:	08013aef 	.word	0x08013aef

08012cd8 <_cleanup_r>:
 8012cd8:	4901      	ldr	r1, [pc, #4]	; (8012ce0 <_cleanup_r+0x8>)
 8012cda:	f000 b8af 	b.w	8012e3c <_fwalk_reent>
 8012cde:	bf00      	nop
 8012ce0:	08014ac1 	.word	0x08014ac1

08012ce4 <__sfmoreglue>:
 8012ce4:	b570      	push	{r4, r5, r6, lr}
 8012ce6:	2268      	movs	r2, #104	; 0x68
 8012ce8:	1e4d      	subs	r5, r1, #1
 8012cea:	4355      	muls	r5, r2
 8012cec:	460e      	mov	r6, r1
 8012cee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012cf2:	f000 f921 	bl	8012f38 <_malloc_r>
 8012cf6:	4604      	mov	r4, r0
 8012cf8:	b140      	cbz	r0, 8012d0c <__sfmoreglue+0x28>
 8012cfa:	2100      	movs	r1, #0
 8012cfc:	e9c0 1600 	strd	r1, r6, [r0]
 8012d00:	300c      	adds	r0, #12
 8012d02:	60a0      	str	r0, [r4, #8]
 8012d04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012d08:	f000 f8ed 	bl	8012ee6 <memset>
 8012d0c:	4620      	mov	r0, r4
 8012d0e:	bd70      	pop	{r4, r5, r6, pc}

08012d10 <__sfp_lock_acquire>:
 8012d10:	4801      	ldr	r0, [pc, #4]	; (8012d18 <__sfp_lock_acquire+0x8>)
 8012d12:	f000 b8d8 	b.w	8012ec6 <__retarget_lock_acquire_recursive>
 8012d16:	bf00      	nop
 8012d18:	2000576d 	.word	0x2000576d

08012d1c <__sfp_lock_release>:
 8012d1c:	4801      	ldr	r0, [pc, #4]	; (8012d24 <__sfp_lock_release+0x8>)
 8012d1e:	f000 b8d3 	b.w	8012ec8 <__retarget_lock_release_recursive>
 8012d22:	bf00      	nop
 8012d24:	2000576d 	.word	0x2000576d

08012d28 <__sinit_lock_acquire>:
 8012d28:	4801      	ldr	r0, [pc, #4]	; (8012d30 <__sinit_lock_acquire+0x8>)
 8012d2a:	f000 b8cc 	b.w	8012ec6 <__retarget_lock_acquire_recursive>
 8012d2e:	bf00      	nop
 8012d30:	2000576e 	.word	0x2000576e

08012d34 <__sinit_lock_release>:
 8012d34:	4801      	ldr	r0, [pc, #4]	; (8012d3c <__sinit_lock_release+0x8>)
 8012d36:	f000 b8c7 	b.w	8012ec8 <__retarget_lock_release_recursive>
 8012d3a:	bf00      	nop
 8012d3c:	2000576e 	.word	0x2000576e

08012d40 <__sinit>:
 8012d40:	b510      	push	{r4, lr}
 8012d42:	4604      	mov	r4, r0
 8012d44:	f7ff fff0 	bl	8012d28 <__sinit_lock_acquire>
 8012d48:	69a3      	ldr	r3, [r4, #24]
 8012d4a:	b11b      	cbz	r3, 8012d54 <__sinit+0x14>
 8012d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d50:	f7ff bff0 	b.w	8012d34 <__sinit_lock_release>
 8012d54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012d58:	6523      	str	r3, [r4, #80]	; 0x50
 8012d5a:	4b13      	ldr	r3, [pc, #76]	; (8012da8 <__sinit+0x68>)
 8012d5c:	4a13      	ldr	r2, [pc, #76]	; (8012dac <__sinit+0x6c>)
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	62a2      	str	r2, [r4, #40]	; 0x28
 8012d62:	42a3      	cmp	r3, r4
 8012d64:	bf04      	itt	eq
 8012d66:	2301      	moveq	r3, #1
 8012d68:	61a3      	streq	r3, [r4, #24]
 8012d6a:	4620      	mov	r0, r4
 8012d6c:	f000 f820 	bl	8012db0 <__sfp>
 8012d70:	6060      	str	r0, [r4, #4]
 8012d72:	4620      	mov	r0, r4
 8012d74:	f000 f81c 	bl	8012db0 <__sfp>
 8012d78:	60a0      	str	r0, [r4, #8]
 8012d7a:	4620      	mov	r0, r4
 8012d7c:	f000 f818 	bl	8012db0 <__sfp>
 8012d80:	2200      	movs	r2, #0
 8012d82:	60e0      	str	r0, [r4, #12]
 8012d84:	2104      	movs	r1, #4
 8012d86:	6860      	ldr	r0, [r4, #4]
 8012d88:	f7ff ff82 	bl	8012c90 <std>
 8012d8c:	68a0      	ldr	r0, [r4, #8]
 8012d8e:	2201      	movs	r2, #1
 8012d90:	2109      	movs	r1, #9
 8012d92:	f7ff ff7d 	bl	8012c90 <std>
 8012d96:	68e0      	ldr	r0, [r4, #12]
 8012d98:	2202      	movs	r2, #2
 8012d9a:	2112      	movs	r1, #18
 8012d9c:	f7ff ff78 	bl	8012c90 <std>
 8012da0:	2301      	movs	r3, #1
 8012da2:	61a3      	str	r3, [r4, #24]
 8012da4:	e7d2      	b.n	8012d4c <__sinit+0xc>
 8012da6:	bf00      	nop
 8012da8:	08019f00 	.word	0x08019f00
 8012dac:	08012cd9 	.word	0x08012cd9

08012db0 <__sfp>:
 8012db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012db2:	4607      	mov	r7, r0
 8012db4:	f7ff ffac 	bl	8012d10 <__sfp_lock_acquire>
 8012db8:	4b1e      	ldr	r3, [pc, #120]	; (8012e34 <__sfp+0x84>)
 8012dba:	681e      	ldr	r6, [r3, #0]
 8012dbc:	69b3      	ldr	r3, [r6, #24]
 8012dbe:	b913      	cbnz	r3, 8012dc6 <__sfp+0x16>
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	f7ff ffbd 	bl	8012d40 <__sinit>
 8012dc6:	3648      	adds	r6, #72	; 0x48
 8012dc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012dcc:	3b01      	subs	r3, #1
 8012dce:	d503      	bpl.n	8012dd8 <__sfp+0x28>
 8012dd0:	6833      	ldr	r3, [r6, #0]
 8012dd2:	b30b      	cbz	r3, 8012e18 <__sfp+0x68>
 8012dd4:	6836      	ldr	r6, [r6, #0]
 8012dd6:	e7f7      	b.n	8012dc8 <__sfp+0x18>
 8012dd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012ddc:	b9d5      	cbnz	r5, 8012e14 <__sfp+0x64>
 8012dde:	4b16      	ldr	r3, [pc, #88]	; (8012e38 <__sfp+0x88>)
 8012de0:	60e3      	str	r3, [r4, #12]
 8012de2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012de6:	6665      	str	r5, [r4, #100]	; 0x64
 8012de8:	f000 f86c 	bl	8012ec4 <__retarget_lock_init_recursive>
 8012dec:	f7ff ff96 	bl	8012d1c <__sfp_lock_release>
 8012df0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012df4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012df8:	6025      	str	r5, [r4, #0]
 8012dfa:	61a5      	str	r5, [r4, #24]
 8012dfc:	2208      	movs	r2, #8
 8012dfe:	4629      	mov	r1, r5
 8012e00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012e04:	f000 f86f 	bl	8012ee6 <memset>
 8012e08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012e0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012e10:	4620      	mov	r0, r4
 8012e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e14:	3468      	adds	r4, #104	; 0x68
 8012e16:	e7d9      	b.n	8012dcc <__sfp+0x1c>
 8012e18:	2104      	movs	r1, #4
 8012e1a:	4638      	mov	r0, r7
 8012e1c:	f7ff ff62 	bl	8012ce4 <__sfmoreglue>
 8012e20:	4604      	mov	r4, r0
 8012e22:	6030      	str	r0, [r6, #0]
 8012e24:	2800      	cmp	r0, #0
 8012e26:	d1d5      	bne.n	8012dd4 <__sfp+0x24>
 8012e28:	f7ff ff78 	bl	8012d1c <__sfp_lock_release>
 8012e2c:	230c      	movs	r3, #12
 8012e2e:	603b      	str	r3, [r7, #0]
 8012e30:	e7ee      	b.n	8012e10 <__sfp+0x60>
 8012e32:	bf00      	nop
 8012e34:	08019f00 	.word	0x08019f00
 8012e38:	ffff0001 	.word	0xffff0001

08012e3c <_fwalk_reent>:
 8012e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e40:	4606      	mov	r6, r0
 8012e42:	4688      	mov	r8, r1
 8012e44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012e48:	2700      	movs	r7, #0
 8012e4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012e4e:	f1b9 0901 	subs.w	r9, r9, #1
 8012e52:	d505      	bpl.n	8012e60 <_fwalk_reent+0x24>
 8012e54:	6824      	ldr	r4, [r4, #0]
 8012e56:	2c00      	cmp	r4, #0
 8012e58:	d1f7      	bne.n	8012e4a <_fwalk_reent+0xe>
 8012e5a:	4638      	mov	r0, r7
 8012e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e60:	89ab      	ldrh	r3, [r5, #12]
 8012e62:	2b01      	cmp	r3, #1
 8012e64:	d907      	bls.n	8012e76 <_fwalk_reent+0x3a>
 8012e66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012e6a:	3301      	adds	r3, #1
 8012e6c:	d003      	beq.n	8012e76 <_fwalk_reent+0x3a>
 8012e6e:	4629      	mov	r1, r5
 8012e70:	4630      	mov	r0, r6
 8012e72:	47c0      	blx	r8
 8012e74:	4307      	orrs	r7, r0
 8012e76:	3568      	adds	r5, #104	; 0x68
 8012e78:	e7e9      	b.n	8012e4e <_fwalk_reent+0x12>
	...

08012e7c <__libc_init_array>:
 8012e7c:	b570      	push	{r4, r5, r6, lr}
 8012e7e:	4d0d      	ldr	r5, [pc, #52]	; (8012eb4 <__libc_init_array+0x38>)
 8012e80:	4c0d      	ldr	r4, [pc, #52]	; (8012eb8 <__libc_init_array+0x3c>)
 8012e82:	1b64      	subs	r4, r4, r5
 8012e84:	10a4      	asrs	r4, r4, #2
 8012e86:	2600      	movs	r6, #0
 8012e88:	42a6      	cmp	r6, r4
 8012e8a:	d109      	bne.n	8012ea0 <__libc_init_array+0x24>
 8012e8c:	4d0b      	ldr	r5, [pc, #44]	; (8012ebc <__libc_init_array+0x40>)
 8012e8e:	4c0c      	ldr	r4, [pc, #48]	; (8012ec0 <__libc_init_array+0x44>)
 8012e90:	f002 fea8 	bl	8015be4 <_init>
 8012e94:	1b64      	subs	r4, r4, r5
 8012e96:	10a4      	asrs	r4, r4, #2
 8012e98:	2600      	movs	r6, #0
 8012e9a:	42a6      	cmp	r6, r4
 8012e9c:	d105      	bne.n	8012eaa <__libc_init_array+0x2e>
 8012e9e:	bd70      	pop	{r4, r5, r6, pc}
 8012ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ea4:	4798      	blx	r3
 8012ea6:	3601      	adds	r6, #1
 8012ea8:	e7ee      	b.n	8012e88 <__libc_init_array+0xc>
 8012eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8012eae:	4798      	blx	r3
 8012eb0:	3601      	adds	r6, #1
 8012eb2:	e7f2      	b.n	8012e9a <__libc_init_array+0x1e>
 8012eb4:	0801a284 	.word	0x0801a284
 8012eb8:	0801a284 	.word	0x0801a284
 8012ebc:	0801a284 	.word	0x0801a284
 8012ec0:	0801a288 	.word	0x0801a288

08012ec4 <__retarget_lock_init_recursive>:
 8012ec4:	4770      	bx	lr

08012ec6 <__retarget_lock_acquire_recursive>:
 8012ec6:	4770      	bx	lr

08012ec8 <__retarget_lock_release_recursive>:
 8012ec8:	4770      	bx	lr

08012eca <memcpy>:
 8012eca:	440a      	add	r2, r1
 8012ecc:	4291      	cmp	r1, r2
 8012ece:	f100 33ff 	add.w	r3, r0, #4294967295
 8012ed2:	d100      	bne.n	8012ed6 <memcpy+0xc>
 8012ed4:	4770      	bx	lr
 8012ed6:	b510      	push	{r4, lr}
 8012ed8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012edc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012ee0:	4291      	cmp	r1, r2
 8012ee2:	d1f9      	bne.n	8012ed8 <memcpy+0xe>
 8012ee4:	bd10      	pop	{r4, pc}

08012ee6 <memset>:
 8012ee6:	4402      	add	r2, r0
 8012ee8:	4603      	mov	r3, r0
 8012eea:	4293      	cmp	r3, r2
 8012eec:	d100      	bne.n	8012ef0 <memset+0xa>
 8012eee:	4770      	bx	lr
 8012ef0:	f803 1b01 	strb.w	r1, [r3], #1
 8012ef4:	e7f9      	b.n	8012eea <memset+0x4>
	...

08012ef8 <sbrk_aligned>:
 8012ef8:	b570      	push	{r4, r5, r6, lr}
 8012efa:	4e0e      	ldr	r6, [pc, #56]	; (8012f34 <sbrk_aligned+0x3c>)
 8012efc:	460c      	mov	r4, r1
 8012efe:	6831      	ldr	r1, [r6, #0]
 8012f00:	4605      	mov	r5, r0
 8012f02:	b911      	cbnz	r1, 8012f0a <sbrk_aligned+0x12>
 8012f04:	f000 fd84 	bl	8013a10 <_sbrk_r>
 8012f08:	6030      	str	r0, [r6, #0]
 8012f0a:	4621      	mov	r1, r4
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	f000 fd7f 	bl	8013a10 <_sbrk_r>
 8012f12:	1c43      	adds	r3, r0, #1
 8012f14:	d00a      	beq.n	8012f2c <sbrk_aligned+0x34>
 8012f16:	1cc4      	adds	r4, r0, #3
 8012f18:	f024 0403 	bic.w	r4, r4, #3
 8012f1c:	42a0      	cmp	r0, r4
 8012f1e:	d007      	beq.n	8012f30 <sbrk_aligned+0x38>
 8012f20:	1a21      	subs	r1, r4, r0
 8012f22:	4628      	mov	r0, r5
 8012f24:	f000 fd74 	bl	8013a10 <_sbrk_r>
 8012f28:	3001      	adds	r0, #1
 8012f2a:	d101      	bne.n	8012f30 <sbrk_aligned+0x38>
 8012f2c:	f04f 34ff 	mov.w	r4, #4294967295
 8012f30:	4620      	mov	r0, r4
 8012f32:	bd70      	pop	{r4, r5, r6, pc}
 8012f34:	20005774 	.word	0x20005774

08012f38 <_malloc_r>:
 8012f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f3c:	1ccd      	adds	r5, r1, #3
 8012f3e:	f025 0503 	bic.w	r5, r5, #3
 8012f42:	3508      	adds	r5, #8
 8012f44:	2d0c      	cmp	r5, #12
 8012f46:	bf38      	it	cc
 8012f48:	250c      	movcc	r5, #12
 8012f4a:	2d00      	cmp	r5, #0
 8012f4c:	4607      	mov	r7, r0
 8012f4e:	db01      	blt.n	8012f54 <_malloc_r+0x1c>
 8012f50:	42a9      	cmp	r1, r5
 8012f52:	d905      	bls.n	8012f60 <_malloc_r+0x28>
 8012f54:	230c      	movs	r3, #12
 8012f56:	603b      	str	r3, [r7, #0]
 8012f58:	2600      	movs	r6, #0
 8012f5a:	4630      	mov	r0, r6
 8012f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f60:	4e2e      	ldr	r6, [pc, #184]	; (801301c <_malloc_r+0xe4>)
 8012f62:	f001 fe6d 	bl	8014c40 <__malloc_lock>
 8012f66:	6833      	ldr	r3, [r6, #0]
 8012f68:	461c      	mov	r4, r3
 8012f6a:	bb34      	cbnz	r4, 8012fba <_malloc_r+0x82>
 8012f6c:	4629      	mov	r1, r5
 8012f6e:	4638      	mov	r0, r7
 8012f70:	f7ff ffc2 	bl	8012ef8 <sbrk_aligned>
 8012f74:	1c43      	adds	r3, r0, #1
 8012f76:	4604      	mov	r4, r0
 8012f78:	d14d      	bne.n	8013016 <_malloc_r+0xde>
 8012f7a:	6834      	ldr	r4, [r6, #0]
 8012f7c:	4626      	mov	r6, r4
 8012f7e:	2e00      	cmp	r6, #0
 8012f80:	d140      	bne.n	8013004 <_malloc_r+0xcc>
 8012f82:	6823      	ldr	r3, [r4, #0]
 8012f84:	4631      	mov	r1, r6
 8012f86:	4638      	mov	r0, r7
 8012f88:	eb04 0803 	add.w	r8, r4, r3
 8012f8c:	f000 fd40 	bl	8013a10 <_sbrk_r>
 8012f90:	4580      	cmp	r8, r0
 8012f92:	d13a      	bne.n	801300a <_malloc_r+0xd2>
 8012f94:	6821      	ldr	r1, [r4, #0]
 8012f96:	3503      	adds	r5, #3
 8012f98:	1a6d      	subs	r5, r5, r1
 8012f9a:	f025 0503 	bic.w	r5, r5, #3
 8012f9e:	3508      	adds	r5, #8
 8012fa0:	2d0c      	cmp	r5, #12
 8012fa2:	bf38      	it	cc
 8012fa4:	250c      	movcc	r5, #12
 8012fa6:	4629      	mov	r1, r5
 8012fa8:	4638      	mov	r0, r7
 8012faa:	f7ff ffa5 	bl	8012ef8 <sbrk_aligned>
 8012fae:	3001      	adds	r0, #1
 8012fb0:	d02b      	beq.n	801300a <_malloc_r+0xd2>
 8012fb2:	6823      	ldr	r3, [r4, #0]
 8012fb4:	442b      	add	r3, r5
 8012fb6:	6023      	str	r3, [r4, #0]
 8012fb8:	e00e      	b.n	8012fd8 <_malloc_r+0xa0>
 8012fba:	6822      	ldr	r2, [r4, #0]
 8012fbc:	1b52      	subs	r2, r2, r5
 8012fbe:	d41e      	bmi.n	8012ffe <_malloc_r+0xc6>
 8012fc0:	2a0b      	cmp	r2, #11
 8012fc2:	d916      	bls.n	8012ff2 <_malloc_r+0xba>
 8012fc4:	1961      	adds	r1, r4, r5
 8012fc6:	42a3      	cmp	r3, r4
 8012fc8:	6025      	str	r5, [r4, #0]
 8012fca:	bf18      	it	ne
 8012fcc:	6059      	strne	r1, [r3, #4]
 8012fce:	6863      	ldr	r3, [r4, #4]
 8012fd0:	bf08      	it	eq
 8012fd2:	6031      	streq	r1, [r6, #0]
 8012fd4:	5162      	str	r2, [r4, r5]
 8012fd6:	604b      	str	r3, [r1, #4]
 8012fd8:	4638      	mov	r0, r7
 8012fda:	f104 060b 	add.w	r6, r4, #11
 8012fde:	f001 fe35 	bl	8014c4c <__malloc_unlock>
 8012fe2:	f026 0607 	bic.w	r6, r6, #7
 8012fe6:	1d23      	adds	r3, r4, #4
 8012fe8:	1af2      	subs	r2, r6, r3
 8012fea:	d0b6      	beq.n	8012f5a <_malloc_r+0x22>
 8012fec:	1b9b      	subs	r3, r3, r6
 8012fee:	50a3      	str	r3, [r4, r2]
 8012ff0:	e7b3      	b.n	8012f5a <_malloc_r+0x22>
 8012ff2:	6862      	ldr	r2, [r4, #4]
 8012ff4:	42a3      	cmp	r3, r4
 8012ff6:	bf0c      	ite	eq
 8012ff8:	6032      	streq	r2, [r6, #0]
 8012ffa:	605a      	strne	r2, [r3, #4]
 8012ffc:	e7ec      	b.n	8012fd8 <_malloc_r+0xa0>
 8012ffe:	4623      	mov	r3, r4
 8013000:	6864      	ldr	r4, [r4, #4]
 8013002:	e7b2      	b.n	8012f6a <_malloc_r+0x32>
 8013004:	4634      	mov	r4, r6
 8013006:	6876      	ldr	r6, [r6, #4]
 8013008:	e7b9      	b.n	8012f7e <_malloc_r+0x46>
 801300a:	230c      	movs	r3, #12
 801300c:	603b      	str	r3, [r7, #0]
 801300e:	4638      	mov	r0, r7
 8013010:	f001 fe1c 	bl	8014c4c <__malloc_unlock>
 8013014:	e7a1      	b.n	8012f5a <_malloc_r+0x22>
 8013016:	6025      	str	r5, [r4, #0]
 8013018:	e7de      	b.n	8012fd8 <_malloc_r+0xa0>
 801301a:	bf00      	nop
 801301c:	20005770 	.word	0x20005770

08013020 <__cvt>:
 8013020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013024:	ec55 4b10 	vmov	r4, r5, d0
 8013028:	2d00      	cmp	r5, #0
 801302a:	460e      	mov	r6, r1
 801302c:	4619      	mov	r1, r3
 801302e:	462b      	mov	r3, r5
 8013030:	bfbb      	ittet	lt
 8013032:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013036:	461d      	movlt	r5, r3
 8013038:	2300      	movge	r3, #0
 801303a:	232d      	movlt	r3, #45	; 0x2d
 801303c:	700b      	strb	r3, [r1, #0]
 801303e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013040:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013044:	4691      	mov	r9, r2
 8013046:	f023 0820 	bic.w	r8, r3, #32
 801304a:	bfbc      	itt	lt
 801304c:	4622      	movlt	r2, r4
 801304e:	4614      	movlt	r4, r2
 8013050:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013054:	d005      	beq.n	8013062 <__cvt+0x42>
 8013056:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801305a:	d100      	bne.n	801305e <__cvt+0x3e>
 801305c:	3601      	adds	r6, #1
 801305e:	2102      	movs	r1, #2
 8013060:	e000      	b.n	8013064 <__cvt+0x44>
 8013062:	2103      	movs	r1, #3
 8013064:	ab03      	add	r3, sp, #12
 8013066:	9301      	str	r3, [sp, #4]
 8013068:	ab02      	add	r3, sp, #8
 801306a:	9300      	str	r3, [sp, #0]
 801306c:	ec45 4b10 	vmov	d0, r4, r5
 8013070:	4653      	mov	r3, sl
 8013072:	4632      	mov	r2, r6
 8013074:	f000 feb0 	bl	8013dd8 <_dtoa_r>
 8013078:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801307c:	4607      	mov	r7, r0
 801307e:	d102      	bne.n	8013086 <__cvt+0x66>
 8013080:	f019 0f01 	tst.w	r9, #1
 8013084:	d022      	beq.n	80130cc <__cvt+0xac>
 8013086:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801308a:	eb07 0906 	add.w	r9, r7, r6
 801308e:	d110      	bne.n	80130b2 <__cvt+0x92>
 8013090:	783b      	ldrb	r3, [r7, #0]
 8013092:	2b30      	cmp	r3, #48	; 0x30
 8013094:	d10a      	bne.n	80130ac <__cvt+0x8c>
 8013096:	2200      	movs	r2, #0
 8013098:	2300      	movs	r3, #0
 801309a:	4620      	mov	r0, r4
 801309c:	4629      	mov	r1, r5
 801309e:	f7ed fd13 	bl	8000ac8 <__aeabi_dcmpeq>
 80130a2:	b918      	cbnz	r0, 80130ac <__cvt+0x8c>
 80130a4:	f1c6 0601 	rsb	r6, r6, #1
 80130a8:	f8ca 6000 	str.w	r6, [sl]
 80130ac:	f8da 3000 	ldr.w	r3, [sl]
 80130b0:	4499      	add	r9, r3
 80130b2:	2200      	movs	r2, #0
 80130b4:	2300      	movs	r3, #0
 80130b6:	4620      	mov	r0, r4
 80130b8:	4629      	mov	r1, r5
 80130ba:	f7ed fd05 	bl	8000ac8 <__aeabi_dcmpeq>
 80130be:	b108      	cbz	r0, 80130c4 <__cvt+0xa4>
 80130c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80130c4:	2230      	movs	r2, #48	; 0x30
 80130c6:	9b03      	ldr	r3, [sp, #12]
 80130c8:	454b      	cmp	r3, r9
 80130ca:	d307      	bcc.n	80130dc <__cvt+0xbc>
 80130cc:	9b03      	ldr	r3, [sp, #12]
 80130ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80130d0:	1bdb      	subs	r3, r3, r7
 80130d2:	4638      	mov	r0, r7
 80130d4:	6013      	str	r3, [r2, #0]
 80130d6:	b004      	add	sp, #16
 80130d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130dc:	1c59      	adds	r1, r3, #1
 80130de:	9103      	str	r1, [sp, #12]
 80130e0:	701a      	strb	r2, [r3, #0]
 80130e2:	e7f0      	b.n	80130c6 <__cvt+0xa6>

080130e4 <__exponent>:
 80130e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130e6:	4603      	mov	r3, r0
 80130e8:	2900      	cmp	r1, #0
 80130ea:	bfb8      	it	lt
 80130ec:	4249      	neglt	r1, r1
 80130ee:	f803 2b02 	strb.w	r2, [r3], #2
 80130f2:	bfb4      	ite	lt
 80130f4:	222d      	movlt	r2, #45	; 0x2d
 80130f6:	222b      	movge	r2, #43	; 0x2b
 80130f8:	2909      	cmp	r1, #9
 80130fa:	7042      	strb	r2, [r0, #1]
 80130fc:	dd2a      	ble.n	8013154 <__exponent+0x70>
 80130fe:	f10d 0407 	add.w	r4, sp, #7
 8013102:	46a4      	mov	ip, r4
 8013104:	270a      	movs	r7, #10
 8013106:	46a6      	mov	lr, r4
 8013108:	460a      	mov	r2, r1
 801310a:	fb91 f6f7 	sdiv	r6, r1, r7
 801310e:	fb07 1516 	mls	r5, r7, r6, r1
 8013112:	3530      	adds	r5, #48	; 0x30
 8013114:	2a63      	cmp	r2, #99	; 0x63
 8013116:	f104 34ff 	add.w	r4, r4, #4294967295
 801311a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801311e:	4631      	mov	r1, r6
 8013120:	dcf1      	bgt.n	8013106 <__exponent+0x22>
 8013122:	3130      	adds	r1, #48	; 0x30
 8013124:	f1ae 0502 	sub.w	r5, lr, #2
 8013128:	f804 1c01 	strb.w	r1, [r4, #-1]
 801312c:	1c44      	adds	r4, r0, #1
 801312e:	4629      	mov	r1, r5
 8013130:	4561      	cmp	r1, ip
 8013132:	d30a      	bcc.n	801314a <__exponent+0x66>
 8013134:	f10d 0209 	add.w	r2, sp, #9
 8013138:	eba2 020e 	sub.w	r2, r2, lr
 801313c:	4565      	cmp	r5, ip
 801313e:	bf88      	it	hi
 8013140:	2200      	movhi	r2, #0
 8013142:	4413      	add	r3, r2
 8013144:	1a18      	subs	r0, r3, r0
 8013146:	b003      	add	sp, #12
 8013148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801314a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801314e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013152:	e7ed      	b.n	8013130 <__exponent+0x4c>
 8013154:	2330      	movs	r3, #48	; 0x30
 8013156:	3130      	adds	r1, #48	; 0x30
 8013158:	7083      	strb	r3, [r0, #2]
 801315a:	70c1      	strb	r1, [r0, #3]
 801315c:	1d03      	adds	r3, r0, #4
 801315e:	e7f1      	b.n	8013144 <__exponent+0x60>

08013160 <_printf_float>:
 8013160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013164:	ed2d 8b02 	vpush	{d8}
 8013168:	b08d      	sub	sp, #52	; 0x34
 801316a:	460c      	mov	r4, r1
 801316c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013170:	4616      	mov	r6, r2
 8013172:	461f      	mov	r7, r3
 8013174:	4605      	mov	r5, r0
 8013176:	f001 fcdf 	bl	8014b38 <_localeconv_r>
 801317a:	f8d0 a000 	ldr.w	sl, [r0]
 801317e:	4650      	mov	r0, sl
 8013180:	f7ed f826 	bl	80001d0 <strlen>
 8013184:	2300      	movs	r3, #0
 8013186:	930a      	str	r3, [sp, #40]	; 0x28
 8013188:	6823      	ldr	r3, [r4, #0]
 801318a:	9305      	str	r3, [sp, #20]
 801318c:	f8d8 3000 	ldr.w	r3, [r8]
 8013190:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013194:	3307      	adds	r3, #7
 8013196:	f023 0307 	bic.w	r3, r3, #7
 801319a:	f103 0208 	add.w	r2, r3, #8
 801319e:	f8c8 2000 	str.w	r2, [r8]
 80131a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80131aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80131ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80131b2:	9307      	str	r3, [sp, #28]
 80131b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80131b8:	ee08 0a10 	vmov	s16, r0
 80131bc:	4b9f      	ldr	r3, [pc, #636]	; (801343c <_printf_float+0x2dc>)
 80131be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80131c2:	f04f 32ff 	mov.w	r2, #4294967295
 80131c6:	f7ed fcb1 	bl	8000b2c <__aeabi_dcmpun>
 80131ca:	bb88      	cbnz	r0, 8013230 <_printf_float+0xd0>
 80131cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80131d0:	4b9a      	ldr	r3, [pc, #616]	; (801343c <_printf_float+0x2dc>)
 80131d2:	f04f 32ff 	mov.w	r2, #4294967295
 80131d6:	f7ed fc8b 	bl	8000af0 <__aeabi_dcmple>
 80131da:	bb48      	cbnz	r0, 8013230 <_printf_float+0xd0>
 80131dc:	2200      	movs	r2, #0
 80131de:	2300      	movs	r3, #0
 80131e0:	4640      	mov	r0, r8
 80131e2:	4649      	mov	r1, r9
 80131e4:	f7ed fc7a 	bl	8000adc <__aeabi_dcmplt>
 80131e8:	b110      	cbz	r0, 80131f0 <_printf_float+0x90>
 80131ea:	232d      	movs	r3, #45	; 0x2d
 80131ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80131f0:	4b93      	ldr	r3, [pc, #588]	; (8013440 <_printf_float+0x2e0>)
 80131f2:	4894      	ldr	r0, [pc, #592]	; (8013444 <_printf_float+0x2e4>)
 80131f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80131f8:	bf94      	ite	ls
 80131fa:	4698      	movls	r8, r3
 80131fc:	4680      	movhi	r8, r0
 80131fe:	2303      	movs	r3, #3
 8013200:	6123      	str	r3, [r4, #16]
 8013202:	9b05      	ldr	r3, [sp, #20]
 8013204:	f023 0204 	bic.w	r2, r3, #4
 8013208:	6022      	str	r2, [r4, #0]
 801320a:	f04f 0900 	mov.w	r9, #0
 801320e:	9700      	str	r7, [sp, #0]
 8013210:	4633      	mov	r3, r6
 8013212:	aa0b      	add	r2, sp, #44	; 0x2c
 8013214:	4621      	mov	r1, r4
 8013216:	4628      	mov	r0, r5
 8013218:	f000 f9d8 	bl	80135cc <_printf_common>
 801321c:	3001      	adds	r0, #1
 801321e:	f040 8090 	bne.w	8013342 <_printf_float+0x1e2>
 8013222:	f04f 30ff 	mov.w	r0, #4294967295
 8013226:	b00d      	add	sp, #52	; 0x34
 8013228:	ecbd 8b02 	vpop	{d8}
 801322c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013230:	4642      	mov	r2, r8
 8013232:	464b      	mov	r3, r9
 8013234:	4640      	mov	r0, r8
 8013236:	4649      	mov	r1, r9
 8013238:	f7ed fc78 	bl	8000b2c <__aeabi_dcmpun>
 801323c:	b140      	cbz	r0, 8013250 <_printf_float+0xf0>
 801323e:	464b      	mov	r3, r9
 8013240:	2b00      	cmp	r3, #0
 8013242:	bfbc      	itt	lt
 8013244:	232d      	movlt	r3, #45	; 0x2d
 8013246:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801324a:	487f      	ldr	r0, [pc, #508]	; (8013448 <_printf_float+0x2e8>)
 801324c:	4b7f      	ldr	r3, [pc, #508]	; (801344c <_printf_float+0x2ec>)
 801324e:	e7d1      	b.n	80131f4 <_printf_float+0x94>
 8013250:	6863      	ldr	r3, [r4, #4]
 8013252:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013256:	9206      	str	r2, [sp, #24]
 8013258:	1c5a      	adds	r2, r3, #1
 801325a:	d13f      	bne.n	80132dc <_printf_float+0x17c>
 801325c:	2306      	movs	r3, #6
 801325e:	6063      	str	r3, [r4, #4]
 8013260:	9b05      	ldr	r3, [sp, #20]
 8013262:	6861      	ldr	r1, [r4, #4]
 8013264:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013268:	2300      	movs	r3, #0
 801326a:	9303      	str	r3, [sp, #12]
 801326c:	ab0a      	add	r3, sp, #40	; 0x28
 801326e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013272:	ab09      	add	r3, sp, #36	; 0x24
 8013274:	ec49 8b10 	vmov	d0, r8, r9
 8013278:	9300      	str	r3, [sp, #0]
 801327a:	6022      	str	r2, [r4, #0]
 801327c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013280:	4628      	mov	r0, r5
 8013282:	f7ff fecd 	bl	8013020 <__cvt>
 8013286:	9b06      	ldr	r3, [sp, #24]
 8013288:	9909      	ldr	r1, [sp, #36]	; 0x24
 801328a:	2b47      	cmp	r3, #71	; 0x47
 801328c:	4680      	mov	r8, r0
 801328e:	d108      	bne.n	80132a2 <_printf_float+0x142>
 8013290:	1cc8      	adds	r0, r1, #3
 8013292:	db02      	blt.n	801329a <_printf_float+0x13a>
 8013294:	6863      	ldr	r3, [r4, #4]
 8013296:	4299      	cmp	r1, r3
 8013298:	dd41      	ble.n	801331e <_printf_float+0x1be>
 801329a:	f1ab 0b02 	sub.w	fp, fp, #2
 801329e:	fa5f fb8b 	uxtb.w	fp, fp
 80132a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80132a6:	d820      	bhi.n	80132ea <_printf_float+0x18a>
 80132a8:	3901      	subs	r1, #1
 80132aa:	465a      	mov	r2, fp
 80132ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80132b0:	9109      	str	r1, [sp, #36]	; 0x24
 80132b2:	f7ff ff17 	bl	80130e4 <__exponent>
 80132b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80132b8:	1813      	adds	r3, r2, r0
 80132ba:	2a01      	cmp	r2, #1
 80132bc:	4681      	mov	r9, r0
 80132be:	6123      	str	r3, [r4, #16]
 80132c0:	dc02      	bgt.n	80132c8 <_printf_float+0x168>
 80132c2:	6822      	ldr	r2, [r4, #0]
 80132c4:	07d2      	lsls	r2, r2, #31
 80132c6:	d501      	bpl.n	80132cc <_printf_float+0x16c>
 80132c8:	3301      	adds	r3, #1
 80132ca:	6123      	str	r3, [r4, #16]
 80132cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d09c      	beq.n	801320e <_printf_float+0xae>
 80132d4:	232d      	movs	r3, #45	; 0x2d
 80132d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80132da:	e798      	b.n	801320e <_printf_float+0xae>
 80132dc:	9a06      	ldr	r2, [sp, #24]
 80132de:	2a47      	cmp	r2, #71	; 0x47
 80132e0:	d1be      	bne.n	8013260 <_printf_float+0x100>
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d1bc      	bne.n	8013260 <_printf_float+0x100>
 80132e6:	2301      	movs	r3, #1
 80132e8:	e7b9      	b.n	801325e <_printf_float+0xfe>
 80132ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80132ee:	d118      	bne.n	8013322 <_printf_float+0x1c2>
 80132f0:	2900      	cmp	r1, #0
 80132f2:	6863      	ldr	r3, [r4, #4]
 80132f4:	dd0b      	ble.n	801330e <_printf_float+0x1ae>
 80132f6:	6121      	str	r1, [r4, #16]
 80132f8:	b913      	cbnz	r3, 8013300 <_printf_float+0x1a0>
 80132fa:	6822      	ldr	r2, [r4, #0]
 80132fc:	07d0      	lsls	r0, r2, #31
 80132fe:	d502      	bpl.n	8013306 <_printf_float+0x1a6>
 8013300:	3301      	adds	r3, #1
 8013302:	440b      	add	r3, r1
 8013304:	6123      	str	r3, [r4, #16]
 8013306:	65a1      	str	r1, [r4, #88]	; 0x58
 8013308:	f04f 0900 	mov.w	r9, #0
 801330c:	e7de      	b.n	80132cc <_printf_float+0x16c>
 801330e:	b913      	cbnz	r3, 8013316 <_printf_float+0x1b6>
 8013310:	6822      	ldr	r2, [r4, #0]
 8013312:	07d2      	lsls	r2, r2, #31
 8013314:	d501      	bpl.n	801331a <_printf_float+0x1ba>
 8013316:	3302      	adds	r3, #2
 8013318:	e7f4      	b.n	8013304 <_printf_float+0x1a4>
 801331a:	2301      	movs	r3, #1
 801331c:	e7f2      	b.n	8013304 <_printf_float+0x1a4>
 801331e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013324:	4299      	cmp	r1, r3
 8013326:	db05      	blt.n	8013334 <_printf_float+0x1d4>
 8013328:	6823      	ldr	r3, [r4, #0]
 801332a:	6121      	str	r1, [r4, #16]
 801332c:	07d8      	lsls	r0, r3, #31
 801332e:	d5ea      	bpl.n	8013306 <_printf_float+0x1a6>
 8013330:	1c4b      	adds	r3, r1, #1
 8013332:	e7e7      	b.n	8013304 <_printf_float+0x1a4>
 8013334:	2900      	cmp	r1, #0
 8013336:	bfd4      	ite	le
 8013338:	f1c1 0202 	rsble	r2, r1, #2
 801333c:	2201      	movgt	r2, #1
 801333e:	4413      	add	r3, r2
 8013340:	e7e0      	b.n	8013304 <_printf_float+0x1a4>
 8013342:	6823      	ldr	r3, [r4, #0]
 8013344:	055a      	lsls	r2, r3, #21
 8013346:	d407      	bmi.n	8013358 <_printf_float+0x1f8>
 8013348:	6923      	ldr	r3, [r4, #16]
 801334a:	4642      	mov	r2, r8
 801334c:	4631      	mov	r1, r6
 801334e:	4628      	mov	r0, r5
 8013350:	47b8      	blx	r7
 8013352:	3001      	adds	r0, #1
 8013354:	d12c      	bne.n	80133b0 <_printf_float+0x250>
 8013356:	e764      	b.n	8013222 <_printf_float+0xc2>
 8013358:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801335c:	f240 80e0 	bls.w	8013520 <_printf_float+0x3c0>
 8013360:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013364:	2200      	movs	r2, #0
 8013366:	2300      	movs	r3, #0
 8013368:	f7ed fbae 	bl	8000ac8 <__aeabi_dcmpeq>
 801336c:	2800      	cmp	r0, #0
 801336e:	d034      	beq.n	80133da <_printf_float+0x27a>
 8013370:	4a37      	ldr	r2, [pc, #220]	; (8013450 <_printf_float+0x2f0>)
 8013372:	2301      	movs	r3, #1
 8013374:	4631      	mov	r1, r6
 8013376:	4628      	mov	r0, r5
 8013378:	47b8      	blx	r7
 801337a:	3001      	adds	r0, #1
 801337c:	f43f af51 	beq.w	8013222 <_printf_float+0xc2>
 8013380:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013384:	429a      	cmp	r2, r3
 8013386:	db02      	blt.n	801338e <_printf_float+0x22e>
 8013388:	6823      	ldr	r3, [r4, #0]
 801338a:	07d8      	lsls	r0, r3, #31
 801338c:	d510      	bpl.n	80133b0 <_printf_float+0x250>
 801338e:	ee18 3a10 	vmov	r3, s16
 8013392:	4652      	mov	r2, sl
 8013394:	4631      	mov	r1, r6
 8013396:	4628      	mov	r0, r5
 8013398:	47b8      	blx	r7
 801339a:	3001      	adds	r0, #1
 801339c:	f43f af41 	beq.w	8013222 <_printf_float+0xc2>
 80133a0:	f04f 0800 	mov.w	r8, #0
 80133a4:	f104 091a 	add.w	r9, r4, #26
 80133a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133aa:	3b01      	subs	r3, #1
 80133ac:	4543      	cmp	r3, r8
 80133ae:	dc09      	bgt.n	80133c4 <_printf_float+0x264>
 80133b0:	6823      	ldr	r3, [r4, #0]
 80133b2:	079b      	lsls	r3, r3, #30
 80133b4:	f100 8105 	bmi.w	80135c2 <_printf_float+0x462>
 80133b8:	68e0      	ldr	r0, [r4, #12]
 80133ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133bc:	4298      	cmp	r0, r3
 80133be:	bfb8      	it	lt
 80133c0:	4618      	movlt	r0, r3
 80133c2:	e730      	b.n	8013226 <_printf_float+0xc6>
 80133c4:	2301      	movs	r3, #1
 80133c6:	464a      	mov	r2, r9
 80133c8:	4631      	mov	r1, r6
 80133ca:	4628      	mov	r0, r5
 80133cc:	47b8      	blx	r7
 80133ce:	3001      	adds	r0, #1
 80133d0:	f43f af27 	beq.w	8013222 <_printf_float+0xc2>
 80133d4:	f108 0801 	add.w	r8, r8, #1
 80133d8:	e7e6      	b.n	80133a8 <_printf_float+0x248>
 80133da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133dc:	2b00      	cmp	r3, #0
 80133de:	dc39      	bgt.n	8013454 <_printf_float+0x2f4>
 80133e0:	4a1b      	ldr	r2, [pc, #108]	; (8013450 <_printf_float+0x2f0>)
 80133e2:	2301      	movs	r3, #1
 80133e4:	4631      	mov	r1, r6
 80133e6:	4628      	mov	r0, r5
 80133e8:	47b8      	blx	r7
 80133ea:	3001      	adds	r0, #1
 80133ec:	f43f af19 	beq.w	8013222 <_printf_float+0xc2>
 80133f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80133f4:	4313      	orrs	r3, r2
 80133f6:	d102      	bne.n	80133fe <_printf_float+0x29e>
 80133f8:	6823      	ldr	r3, [r4, #0]
 80133fa:	07d9      	lsls	r1, r3, #31
 80133fc:	d5d8      	bpl.n	80133b0 <_printf_float+0x250>
 80133fe:	ee18 3a10 	vmov	r3, s16
 8013402:	4652      	mov	r2, sl
 8013404:	4631      	mov	r1, r6
 8013406:	4628      	mov	r0, r5
 8013408:	47b8      	blx	r7
 801340a:	3001      	adds	r0, #1
 801340c:	f43f af09 	beq.w	8013222 <_printf_float+0xc2>
 8013410:	f04f 0900 	mov.w	r9, #0
 8013414:	f104 0a1a 	add.w	sl, r4, #26
 8013418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801341a:	425b      	negs	r3, r3
 801341c:	454b      	cmp	r3, r9
 801341e:	dc01      	bgt.n	8013424 <_printf_float+0x2c4>
 8013420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013422:	e792      	b.n	801334a <_printf_float+0x1ea>
 8013424:	2301      	movs	r3, #1
 8013426:	4652      	mov	r2, sl
 8013428:	4631      	mov	r1, r6
 801342a:	4628      	mov	r0, r5
 801342c:	47b8      	blx	r7
 801342e:	3001      	adds	r0, #1
 8013430:	f43f aef7 	beq.w	8013222 <_printf_float+0xc2>
 8013434:	f109 0901 	add.w	r9, r9, #1
 8013438:	e7ee      	b.n	8013418 <_printf_float+0x2b8>
 801343a:	bf00      	nop
 801343c:	7fefffff 	.word	0x7fefffff
 8013440:	08019f04 	.word	0x08019f04
 8013444:	08019f08 	.word	0x08019f08
 8013448:	08019f10 	.word	0x08019f10
 801344c:	08019f0c 	.word	0x08019f0c
 8013450:	08019f14 	.word	0x08019f14
 8013454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013456:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013458:	429a      	cmp	r2, r3
 801345a:	bfa8      	it	ge
 801345c:	461a      	movge	r2, r3
 801345e:	2a00      	cmp	r2, #0
 8013460:	4691      	mov	r9, r2
 8013462:	dc37      	bgt.n	80134d4 <_printf_float+0x374>
 8013464:	f04f 0b00 	mov.w	fp, #0
 8013468:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801346c:	f104 021a 	add.w	r2, r4, #26
 8013470:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013472:	9305      	str	r3, [sp, #20]
 8013474:	eba3 0309 	sub.w	r3, r3, r9
 8013478:	455b      	cmp	r3, fp
 801347a:	dc33      	bgt.n	80134e4 <_printf_float+0x384>
 801347c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013480:	429a      	cmp	r2, r3
 8013482:	db3b      	blt.n	80134fc <_printf_float+0x39c>
 8013484:	6823      	ldr	r3, [r4, #0]
 8013486:	07da      	lsls	r2, r3, #31
 8013488:	d438      	bmi.n	80134fc <_printf_float+0x39c>
 801348a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801348c:	9a05      	ldr	r2, [sp, #20]
 801348e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013490:	1a9a      	subs	r2, r3, r2
 8013492:	eba3 0901 	sub.w	r9, r3, r1
 8013496:	4591      	cmp	r9, r2
 8013498:	bfa8      	it	ge
 801349a:	4691      	movge	r9, r2
 801349c:	f1b9 0f00 	cmp.w	r9, #0
 80134a0:	dc35      	bgt.n	801350e <_printf_float+0x3ae>
 80134a2:	f04f 0800 	mov.w	r8, #0
 80134a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80134aa:	f104 0a1a 	add.w	sl, r4, #26
 80134ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80134b2:	1a9b      	subs	r3, r3, r2
 80134b4:	eba3 0309 	sub.w	r3, r3, r9
 80134b8:	4543      	cmp	r3, r8
 80134ba:	f77f af79 	ble.w	80133b0 <_printf_float+0x250>
 80134be:	2301      	movs	r3, #1
 80134c0:	4652      	mov	r2, sl
 80134c2:	4631      	mov	r1, r6
 80134c4:	4628      	mov	r0, r5
 80134c6:	47b8      	blx	r7
 80134c8:	3001      	adds	r0, #1
 80134ca:	f43f aeaa 	beq.w	8013222 <_printf_float+0xc2>
 80134ce:	f108 0801 	add.w	r8, r8, #1
 80134d2:	e7ec      	b.n	80134ae <_printf_float+0x34e>
 80134d4:	4613      	mov	r3, r2
 80134d6:	4631      	mov	r1, r6
 80134d8:	4642      	mov	r2, r8
 80134da:	4628      	mov	r0, r5
 80134dc:	47b8      	blx	r7
 80134de:	3001      	adds	r0, #1
 80134e0:	d1c0      	bne.n	8013464 <_printf_float+0x304>
 80134e2:	e69e      	b.n	8013222 <_printf_float+0xc2>
 80134e4:	2301      	movs	r3, #1
 80134e6:	4631      	mov	r1, r6
 80134e8:	4628      	mov	r0, r5
 80134ea:	9205      	str	r2, [sp, #20]
 80134ec:	47b8      	blx	r7
 80134ee:	3001      	adds	r0, #1
 80134f0:	f43f ae97 	beq.w	8013222 <_printf_float+0xc2>
 80134f4:	9a05      	ldr	r2, [sp, #20]
 80134f6:	f10b 0b01 	add.w	fp, fp, #1
 80134fa:	e7b9      	b.n	8013470 <_printf_float+0x310>
 80134fc:	ee18 3a10 	vmov	r3, s16
 8013500:	4652      	mov	r2, sl
 8013502:	4631      	mov	r1, r6
 8013504:	4628      	mov	r0, r5
 8013506:	47b8      	blx	r7
 8013508:	3001      	adds	r0, #1
 801350a:	d1be      	bne.n	801348a <_printf_float+0x32a>
 801350c:	e689      	b.n	8013222 <_printf_float+0xc2>
 801350e:	9a05      	ldr	r2, [sp, #20]
 8013510:	464b      	mov	r3, r9
 8013512:	4442      	add	r2, r8
 8013514:	4631      	mov	r1, r6
 8013516:	4628      	mov	r0, r5
 8013518:	47b8      	blx	r7
 801351a:	3001      	adds	r0, #1
 801351c:	d1c1      	bne.n	80134a2 <_printf_float+0x342>
 801351e:	e680      	b.n	8013222 <_printf_float+0xc2>
 8013520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013522:	2a01      	cmp	r2, #1
 8013524:	dc01      	bgt.n	801352a <_printf_float+0x3ca>
 8013526:	07db      	lsls	r3, r3, #31
 8013528:	d538      	bpl.n	801359c <_printf_float+0x43c>
 801352a:	2301      	movs	r3, #1
 801352c:	4642      	mov	r2, r8
 801352e:	4631      	mov	r1, r6
 8013530:	4628      	mov	r0, r5
 8013532:	47b8      	blx	r7
 8013534:	3001      	adds	r0, #1
 8013536:	f43f ae74 	beq.w	8013222 <_printf_float+0xc2>
 801353a:	ee18 3a10 	vmov	r3, s16
 801353e:	4652      	mov	r2, sl
 8013540:	4631      	mov	r1, r6
 8013542:	4628      	mov	r0, r5
 8013544:	47b8      	blx	r7
 8013546:	3001      	adds	r0, #1
 8013548:	f43f ae6b 	beq.w	8013222 <_printf_float+0xc2>
 801354c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013550:	2200      	movs	r2, #0
 8013552:	2300      	movs	r3, #0
 8013554:	f7ed fab8 	bl	8000ac8 <__aeabi_dcmpeq>
 8013558:	b9d8      	cbnz	r0, 8013592 <_printf_float+0x432>
 801355a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801355c:	f108 0201 	add.w	r2, r8, #1
 8013560:	3b01      	subs	r3, #1
 8013562:	4631      	mov	r1, r6
 8013564:	4628      	mov	r0, r5
 8013566:	47b8      	blx	r7
 8013568:	3001      	adds	r0, #1
 801356a:	d10e      	bne.n	801358a <_printf_float+0x42a>
 801356c:	e659      	b.n	8013222 <_printf_float+0xc2>
 801356e:	2301      	movs	r3, #1
 8013570:	4652      	mov	r2, sl
 8013572:	4631      	mov	r1, r6
 8013574:	4628      	mov	r0, r5
 8013576:	47b8      	blx	r7
 8013578:	3001      	adds	r0, #1
 801357a:	f43f ae52 	beq.w	8013222 <_printf_float+0xc2>
 801357e:	f108 0801 	add.w	r8, r8, #1
 8013582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013584:	3b01      	subs	r3, #1
 8013586:	4543      	cmp	r3, r8
 8013588:	dcf1      	bgt.n	801356e <_printf_float+0x40e>
 801358a:	464b      	mov	r3, r9
 801358c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013590:	e6dc      	b.n	801334c <_printf_float+0x1ec>
 8013592:	f04f 0800 	mov.w	r8, #0
 8013596:	f104 0a1a 	add.w	sl, r4, #26
 801359a:	e7f2      	b.n	8013582 <_printf_float+0x422>
 801359c:	2301      	movs	r3, #1
 801359e:	4642      	mov	r2, r8
 80135a0:	e7df      	b.n	8013562 <_printf_float+0x402>
 80135a2:	2301      	movs	r3, #1
 80135a4:	464a      	mov	r2, r9
 80135a6:	4631      	mov	r1, r6
 80135a8:	4628      	mov	r0, r5
 80135aa:	47b8      	blx	r7
 80135ac:	3001      	adds	r0, #1
 80135ae:	f43f ae38 	beq.w	8013222 <_printf_float+0xc2>
 80135b2:	f108 0801 	add.w	r8, r8, #1
 80135b6:	68e3      	ldr	r3, [r4, #12]
 80135b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80135ba:	1a5b      	subs	r3, r3, r1
 80135bc:	4543      	cmp	r3, r8
 80135be:	dcf0      	bgt.n	80135a2 <_printf_float+0x442>
 80135c0:	e6fa      	b.n	80133b8 <_printf_float+0x258>
 80135c2:	f04f 0800 	mov.w	r8, #0
 80135c6:	f104 0919 	add.w	r9, r4, #25
 80135ca:	e7f4      	b.n	80135b6 <_printf_float+0x456>

080135cc <_printf_common>:
 80135cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135d0:	4616      	mov	r6, r2
 80135d2:	4699      	mov	r9, r3
 80135d4:	688a      	ldr	r2, [r1, #8]
 80135d6:	690b      	ldr	r3, [r1, #16]
 80135d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80135dc:	4293      	cmp	r3, r2
 80135de:	bfb8      	it	lt
 80135e0:	4613      	movlt	r3, r2
 80135e2:	6033      	str	r3, [r6, #0]
 80135e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80135e8:	4607      	mov	r7, r0
 80135ea:	460c      	mov	r4, r1
 80135ec:	b10a      	cbz	r2, 80135f2 <_printf_common+0x26>
 80135ee:	3301      	adds	r3, #1
 80135f0:	6033      	str	r3, [r6, #0]
 80135f2:	6823      	ldr	r3, [r4, #0]
 80135f4:	0699      	lsls	r1, r3, #26
 80135f6:	bf42      	ittt	mi
 80135f8:	6833      	ldrmi	r3, [r6, #0]
 80135fa:	3302      	addmi	r3, #2
 80135fc:	6033      	strmi	r3, [r6, #0]
 80135fe:	6825      	ldr	r5, [r4, #0]
 8013600:	f015 0506 	ands.w	r5, r5, #6
 8013604:	d106      	bne.n	8013614 <_printf_common+0x48>
 8013606:	f104 0a19 	add.w	sl, r4, #25
 801360a:	68e3      	ldr	r3, [r4, #12]
 801360c:	6832      	ldr	r2, [r6, #0]
 801360e:	1a9b      	subs	r3, r3, r2
 8013610:	42ab      	cmp	r3, r5
 8013612:	dc26      	bgt.n	8013662 <_printf_common+0x96>
 8013614:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013618:	1e13      	subs	r3, r2, #0
 801361a:	6822      	ldr	r2, [r4, #0]
 801361c:	bf18      	it	ne
 801361e:	2301      	movne	r3, #1
 8013620:	0692      	lsls	r2, r2, #26
 8013622:	d42b      	bmi.n	801367c <_printf_common+0xb0>
 8013624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013628:	4649      	mov	r1, r9
 801362a:	4638      	mov	r0, r7
 801362c:	47c0      	blx	r8
 801362e:	3001      	adds	r0, #1
 8013630:	d01e      	beq.n	8013670 <_printf_common+0xa4>
 8013632:	6823      	ldr	r3, [r4, #0]
 8013634:	68e5      	ldr	r5, [r4, #12]
 8013636:	6832      	ldr	r2, [r6, #0]
 8013638:	f003 0306 	and.w	r3, r3, #6
 801363c:	2b04      	cmp	r3, #4
 801363e:	bf08      	it	eq
 8013640:	1aad      	subeq	r5, r5, r2
 8013642:	68a3      	ldr	r3, [r4, #8]
 8013644:	6922      	ldr	r2, [r4, #16]
 8013646:	bf0c      	ite	eq
 8013648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801364c:	2500      	movne	r5, #0
 801364e:	4293      	cmp	r3, r2
 8013650:	bfc4      	itt	gt
 8013652:	1a9b      	subgt	r3, r3, r2
 8013654:	18ed      	addgt	r5, r5, r3
 8013656:	2600      	movs	r6, #0
 8013658:	341a      	adds	r4, #26
 801365a:	42b5      	cmp	r5, r6
 801365c:	d11a      	bne.n	8013694 <_printf_common+0xc8>
 801365e:	2000      	movs	r0, #0
 8013660:	e008      	b.n	8013674 <_printf_common+0xa8>
 8013662:	2301      	movs	r3, #1
 8013664:	4652      	mov	r2, sl
 8013666:	4649      	mov	r1, r9
 8013668:	4638      	mov	r0, r7
 801366a:	47c0      	blx	r8
 801366c:	3001      	adds	r0, #1
 801366e:	d103      	bne.n	8013678 <_printf_common+0xac>
 8013670:	f04f 30ff 	mov.w	r0, #4294967295
 8013674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013678:	3501      	adds	r5, #1
 801367a:	e7c6      	b.n	801360a <_printf_common+0x3e>
 801367c:	18e1      	adds	r1, r4, r3
 801367e:	1c5a      	adds	r2, r3, #1
 8013680:	2030      	movs	r0, #48	; 0x30
 8013682:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013686:	4422      	add	r2, r4
 8013688:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801368c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013690:	3302      	adds	r3, #2
 8013692:	e7c7      	b.n	8013624 <_printf_common+0x58>
 8013694:	2301      	movs	r3, #1
 8013696:	4622      	mov	r2, r4
 8013698:	4649      	mov	r1, r9
 801369a:	4638      	mov	r0, r7
 801369c:	47c0      	blx	r8
 801369e:	3001      	adds	r0, #1
 80136a0:	d0e6      	beq.n	8013670 <_printf_common+0xa4>
 80136a2:	3601      	adds	r6, #1
 80136a4:	e7d9      	b.n	801365a <_printf_common+0x8e>
	...

080136a8 <_printf_i>:
 80136a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80136ac:	7e0f      	ldrb	r7, [r1, #24]
 80136ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80136b0:	2f78      	cmp	r7, #120	; 0x78
 80136b2:	4691      	mov	r9, r2
 80136b4:	4680      	mov	r8, r0
 80136b6:	460c      	mov	r4, r1
 80136b8:	469a      	mov	sl, r3
 80136ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80136be:	d807      	bhi.n	80136d0 <_printf_i+0x28>
 80136c0:	2f62      	cmp	r7, #98	; 0x62
 80136c2:	d80a      	bhi.n	80136da <_printf_i+0x32>
 80136c4:	2f00      	cmp	r7, #0
 80136c6:	f000 80d8 	beq.w	801387a <_printf_i+0x1d2>
 80136ca:	2f58      	cmp	r7, #88	; 0x58
 80136cc:	f000 80a3 	beq.w	8013816 <_printf_i+0x16e>
 80136d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80136d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80136d8:	e03a      	b.n	8013750 <_printf_i+0xa8>
 80136da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80136de:	2b15      	cmp	r3, #21
 80136e0:	d8f6      	bhi.n	80136d0 <_printf_i+0x28>
 80136e2:	a101      	add	r1, pc, #4	; (adr r1, 80136e8 <_printf_i+0x40>)
 80136e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80136e8:	08013741 	.word	0x08013741
 80136ec:	08013755 	.word	0x08013755
 80136f0:	080136d1 	.word	0x080136d1
 80136f4:	080136d1 	.word	0x080136d1
 80136f8:	080136d1 	.word	0x080136d1
 80136fc:	080136d1 	.word	0x080136d1
 8013700:	08013755 	.word	0x08013755
 8013704:	080136d1 	.word	0x080136d1
 8013708:	080136d1 	.word	0x080136d1
 801370c:	080136d1 	.word	0x080136d1
 8013710:	080136d1 	.word	0x080136d1
 8013714:	08013861 	.word	0x08013861
 8013718:	08013785 	.word	0x08013785
 801371c:	08013843 	.word	0x08013843
 8013720:	080136d1 	.word	0x080136d1
 8013724:	080136d1 	.word	0x080136d1
 8013728:	08013883 	.word	0x08013883
 801372c:	080136d1 	.word	0x080136d1
 8013730:	08013785 	.word	0x08013785
 8013734:	080136d1 	.word	0x080136d1
 8013738:	080136d1 	.word	0x080136d1
 801373c:	0801384b 	.word	0x0801384b
 8013740:	682b      	ldr	r3, [r5, #0]
 8013742:	1d1a      	adds	r2, r3, #4
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	602a      	str	r2, [r5, #0]
 8013748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801374c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013750:	2301      	movs	r3, #1
 8013752:	e0a3      	b.n	801389c <_printf_i+0x1f4>
 8013754:	6820      	ldr	r0, [r4, #0]
 8013756:	6829      	ldr	r1, [r5, #0]
 8013758:	0606      	lsls	r6, r0, #24
 801375a:	f101 0304 	add.w	r3, r1, #4
 801375e:	d50a      	bpl.n	8013776 <_printf_i+0xce>
 8013760:	680e      	ldr	r6, [r1, #0]
 8013762:	602b      	str	r3, [r5, #0]
 8013764:	2e00      	cmp	r6, #0
 8013766:	da03      	bge.n	8013770 <_printf_i+0xc8>
 8013768:	232d      	movs	r3, #45	; 0x2d
 801376a:	4276      	negs	r6, r6
 801376c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013770:	485e      	ldr	r0, [pc, #376]	; (80138ec <_printf_i+0x244>)
 8013772:	230a      	movs	r3, #10
 8013774:	e019      	b.n	80137aa <_printf_i+0x102>
 8013776:	680e      	ldr	r6, [r1, #0]
 8013778:	602b      	str	r3, [r5, #0]
 801377a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801377e:	bf18      	it	ne
 8013780:	b236      	sxthne	r6, r6
 8013782:	e7ef      	b.n	8013764 <_printf_i+0xbc>
 8013784:	682b      	ldr	r3, [r5, #0]
 8013786:	6820      	ldr	r0, [r4, #0]
 8013788:	1d19      	adds	r1, r3, #4
 801378a:	6029      	str	r1, [r5, #0]
 801378c:	0601      	lsls	r1, r0, #24
 801378e:	d501      	bpl.n	8013794 <_printf_i+0xec>
 8013790:	681e      	ldr	r6, [r3, #0]
 8013792:	e002      	b.n	801379a <_printf_i+0xf2>
 8013794:	0646      	lsls	r6, r0, #25
 8013796:	d5fb      	bpl.n	8013790 <_printf_i+0xe8>
 8013798:	881e      	ldrh	r6, [r3, #0]
 801379a:	4854      	ldr	r0, [pc, #336]	; (80138ec <_printf_i+0x244>)
 801379c:	2f6f      	cmp	r7, #111	; 0x6f
 801379e:	bf0c      	ite	eq
 80137a0:	2308      	moveq	r3, #8
 80137a2:	230a      	movne	r3, #10
 80137a4:	2100      	movs	r1, #0
 80137a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80137aa:	6865      	ldr	r5, [r4, #4]
 80137ac:	60a5      	str	r5, [r4, #8]
 80137ae:	2d00      	cmp	r5, #0
 80137b0:	bfa2      	ittt	ge
 80137b2:	6821      	ldrge	r1, [r4, #0]
 80137b4:	f021 0104 	bicge.w	r1, r1, #4
 80137b8:	6021      	strge	r1, [r4, #0]
 80137ba:	b90e      	cbnz	r6, 80137c0 <_printf_i+0x118>
 80137bc:	2d00      	cmp	r5, #0
 80137be:	d04d      	beq.n	801385c <_printf_i+0x1b4>
 80137c0:	4615      	mov	r5, r2
 80137c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80137c6:	fb03 6711 	mls	r7, r3, r1, r6
 80137ca:	5dc7      	ldrb	r7, [r0, r7]
 80137cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80137d0:	4637      	mov	r7, r6
 80137d2:	42bb      	cmp	r3, r7
 80137d4:	460e      	mov	r6, r1
 80137d6:	d9f4      	bls.n	80137c2 <_printf_i+0x11a>
 80137d8:	2b08      	cmp	r3, #8
 80137da:	d10b      	bne.n	80137f4 <_printf_i+0x14c>
 80137dc:	6823      	ldr	r3, [r4, #0]
 80137de:	07de      	lsls	r6, r3, #31
 80137e0:	d508      	bpl.n	80137f4 <_printf_i+0x14c>
 80137e2:	6923      	ldr	r3, [r4, #16]
 80137e4:	6861      	ldr	r1, [r4, #4]
 80137e6:	4299      	cmp	r1, r3
 80137e8:	bfde      	ittt	le
 80137ea:	2330      	movle	r3, #48	; 0x30
 80137ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80137f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80137f4:	1b52      	subs	r2, r2, r5
 80137f6:	6122      	str	r2, [r4, #16]
 80137f8:	f8cd a000 	str.w	sl, [sp]
 80137fc:	464b      	mov	r3, r9
 80137fe:	aa03      	add	r2, sp, #12
 8013800:	4621      	mov	r1, r4
 8013802:	4640      	mov	r0, r8
 8013804:	f7ff fee2 	bl	80135cc <_printf_common>
 8013808:	3001      	adds	r0, #1
 801380a:	d14c      	bne.n	80138a6 <_printf_i+0x1fe>
 801380c:	f04f 30ff 	mov.w	r0, #4294967295
 8013810:	b004      	add	sp, #16
 8013812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013816:	4835      	ldr	r0, [pc, #212]	; (80138ec <_printf_i+0x244>)
 8013818:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801381c:	6829      	ldr	r1, [r5, #0]
 801381e:	6823      	ldr	r3, [r4, #0]
 8013820:	f851 6b04 	ldr.w	r6, [r1], #4
 8013824:	6029      	str	r1, [r5, #0]
 8013826:	061d      	lsls	r5, r3, #24
 8013828:	d514      	bpl.n	8013854 <_printf_i+0x1ac>
 801382a:	07df      	lsls	r7, r3, #31
 801382c:	bf44      	itt	mi
 801382e:	f043 0320 	orrmi.w	r3, r3, #32
 8013832:	6023      	strmi	r3, [r4, #0]
 8013834:	b91e      	cbnz	r6, 801383e <_printf_i+0x196>
 8013836:	6823      	ldr	r3, [r4, #0]
 8013838:	f023 0320 	bic.w	r3, r3, #32
 801383c:	6023      	str	r3, [r4, #0]
 801383e:	2310      	movs	r3, #16
 8013840:	e7b0      	b.n	80137a4 <_printf_i+0xfc>
 8013842:	6823      	ldr	r3, [r4, #0]
 8013844:	f043 0320 	orr.w	r3, r3, #32
 8013848:	6023      	str	r3, [r4, #0]
 801384a:	2378      	movs	r3, #120	; 0x78
 801384c:	4828      	ldr	r0, [pc, #160]	; (80138f0 <_printf_i+0x248>)
 801384e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013852:	e7e3      	b.n	801381c <_printf_i+0x174>
 8013854:	0659      	lsls	r1, r3, #25
 8013856:	bf48      	it	mi
 8013858:	b2b6      	uxthmi	r6, r6
 801385a:	e7e6      	b.n	801382a <_printf_i+0x182>
 801385c:	4615      	mov	r5, r2
 801385e:	e7bb      	b.n	80137d8 <_printf_i+0x130>
 8013860:	682b      	ldr	r3, [r5, #0]
 8013862:	6826      	ldr	r6, [r4, #0]
 8013864:	6961      	ldr	r1, [r4, #20]
 8013866:	1d18      	adds	r0, r3, #4
 8013868:	6028      	str	r0, [r5, #0]
 801386a:	0635      	lsls	r5, r6, #24
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	d501      	bpl.n	8013874 <_printf_i+0x1cc>
 8013870:	6019      	str	r1, [r3, #0]
 8013872:	e002      	b.n	801387a <_printf_i+0x1d2>
 8013874:	0670      	lsls	r0, r6, #25
 8013876:	d5fb      	bpl.n	8013870 <_printf_i+0x1c8>
 8013878:	8019      	strh	r1, [r3, #0]
 801387a:	2300      	movs	r3, #0
 801387c:	6123      	str	r3, [r4, #16]
 801387e:	4615      	mov	r5, r2
 8013880:	e7ba      	b.n	80137f8 <_printf_i+0x150>
 8013882:	682b      	ldr	r3, [r5, #0]
 8013884:	1d1a      	adds	r2, r3, #4
 8013886:	602a      	str	r2, [r5, #0]
 8013888:	681d      	ldr	r5, [r3, #0]
 801388a:	6862      	ldr	r2, [r4, #4]
 801388c:	2100      	movs	r1, #0
 801388e:	4628      	mov	r0, r5
 8013890:	f7ec fca6 	bl	80001e0 <memchr>
 8013894:	b108      	cbz	r0, 801389a <_printf_i+0x1f2>
 8013896:	1b40      	subs	r0, r0, r5
 8013898:	6060      	str	r0, [r4, #4]
 801389a:	6863      	ldr	r3, [r4, #4]
 801389c:	6123      	str	r3, [r4, #16]
 801389e:	2300      	movs	r3, #0
 80138a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80138a4:	e7a8      	b.n	80137f8 <_printf_i+0x150>
 80138a6:	6923      	ldr	r3, [r4, #16]
 80138a8:	462a      	mov	r2, r5
 80138aa:	4649      	mov	r1, r9
 80138ac:	4640      	mov	r0, r8
 80138ae:	47d0      	blx	sl
 80138b0:	3001      	adds	r0, #1
 80138b2:	d0ab      	beq.n	801380c <_printf_i+0x164>
 80138b4:	6823      	ldr	r3, [r4, #0]
 80138b6:	079b      	lsls	r3, r3, #30
 80138b8:	d413      	bmi.n	80138e2 <_printf_i+0x23a>
 80138ba:	68e0      	ldr	r0, [r4, #12]
 80138bc:	9b03      	ldr	r3, [sp, #12]
 80138be:	4298      	cmp	r0, r3
 80138c0:	bfb8      	it	lt
 80138c2:	4618      	movlt	r0, r3
 80138c4:	e7a4      	b.n	8013810 <_printf_i+0x168>
 80138c6:	2301      	movs	r3, #1
 80138c8:	4632      	mov	r2, r6
 80138ca:	4649      	mov	r1, r9
 80138cc:	4640      	mov	r0, r8
 80138ce:	47d0      	blx	sl
 80138d0:	3001      	adds	r0, #1
 80138d2:	d09b      	beq.n	801380c <_printf_i+0x164>
 80138d4:	3501      	adds	r5, #1
 80138d6:	68e3      	ldr	r3, [r4, #12]
 80138d8:	9903      	ldr	r1, [sp, #12]
 80138da:	1a5b      	subs	r3, r3, r1
 80138dc:	42ab      	cmp	r3, r5
 80138de:	dcf2      	bgt.n	80138c6 <_printf_i+0x21e>
 80138e0:	e7eb      	b.n	80138ba <_printf_i+0x212>
 80138e2:	2500      	movs	r5, #0
 80138e4:	f104 0619 	add.w	r6, r4, #25
 80138e8:	e7f5      	b.n	80138d6 <_printf_i+0x22e>
 80138ea:	bf00      	nop
 80138ec:	08019f16 	.word	0x08019f16
 80138f0:	08019f27 	.word	0x08019f27

080138f4 <iprintf>:
 80138f4:	b40f      	push	{r0, r1, r2, r3}
 80138f6:	4b0a      	ldr	r3, [pc, #40]	; (8013920 <iprintf+0x2c>)
 80138f8:	b513      	push	{r0, r1, r4, lr}
 80138fa:	681c      	ldr	r4, [r3, #0]
 80138fc:	b124      	cbz	r4, 8013908 <iprintf+0x14>
 80138fe:	69a3      	ldr	r3, [r4, #24]
 8013900:	b913      	cbnz	r3, 8013908 <iprintf+0x14>
 8013902:	4620      	mov	r0, r4
 8013904:	f7ff fa1c 	bl	8012d40 <__sinit>
 8013908:	ab05      	add	r3, sp, #20
 801390a:	9a04      	ldr	r2, [sp, #16]
 801390c:	68a1      	ldr	r1, [r4, #8]
 801390e:	9301      	str	r3, [sp, #4]
 8013910:	4620      	mov	r0, r4
 8013912:	f001 ff0d 	bl	8015730 <_vfiprintf_r>
 8013916:	b002      	add	sp, #8
 8013918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801391c:	b004      	add	sp, #16
 801391e:	4770      	bx	lr
 8013920:	20000080 	.word	0x20000080

08013924 <_puts_r>:
 8013924:	b570      	push	{r4, r5, r6, lr}
 8013926:	460e      	mov	r6, r1
 8013928:	4605      	mov	r5, r0
 801392a:	b118      	cbz	r0, 8013934 <_puts_r+0x10>
 801392c:	6983      	ldr	r3, [r0, #24]
 801392e:	b90b      	cbnz	r3, 8013934 <_puts_r+0x10>
 8013930:	f7ff fa06 	bl	8012d40 <__sinit>
 8013934:	69ab      	ldr	r3, [r5, #24]
 8013936:	68ac      	ldr	r4, [r5, #8]
 8013938:	b913      	cbnz	r3, 8013940 <_puts_r+0x1c>
 801393a:	4628      	mov	r0, r5
 801393c:	f7ff fa00 	bl	8012d40 <__sinit>
 8013940:	4b2c      	ldr	r3, [pc, #176]	; (80139f4 <_puts_r+0xd0>)
 8013942:	429c      	cmp	r4, r3
 8013944:	d120      	bne.n	8013988 <_puts_r+0x64>
 8013946:	686c      	ldr	r4, [r5, #4]
 8013948:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801394a:	07db      	lsls	r3, r3, #31
 801394c:	d405      	bmi.n	801395a <_puts_r+0x36>
 801394e:	89a3      	ldrh	r3, [r4, #12]
 8013950:	0598      	lsls	r0, r3, #22
 8013952:	d402      	bmi.n	801395a <_puts_r+0x36>
 8013954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013956:	f7ff fab6 	bl	8012ec6 <__retarget_lock_acquire_recursive>
 801395a:	89a3      	ldrh	r3, [r4, #12]
 801395c:	0719      	lsls	r1, r3, #28
 801395e:	d51d      	bpl.n	801399c <_puts_r+0x78>
 8013960:	6923      	ldr	r3, [r4, #16]
 8013962:	b1db      	cbz	r3, 801399c <_puts_r+0x78>
 8013964:	3e01      	subs	r6, #1
 8013966:	68a3      	ldr	r3, [r4, #8]
 8013968:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801396c:	3b01      	subs	r3, #1
 801396e:	60a3      	str	r3, [r4, #8]
 8013970:	bb39      	cbnz	r1, 80139c2 <_puts_r+0x9e>
 8013972:	2b00      	cmp	r3, #0
 8013974:	da38      	bge.n	80139e8 <_puts_r+0xc4>
 8013976:	4622      	mov	r2, r4
 8013978:	210a      	movs	r1, #10
 801397a:	4628      	mov	r0, r5
 801397c:	f000 f8bc 	bl	8013af8 <__swbuf_r>
 8013980:	3001      	adds	r0, #1
 8013982:	d011      	beq.n	80139a8 <_puts_r+0x84>
 8013984:	250a      	movs	r5, #10
 8013986:	e011      	b.n	80139ac <_puts_r+0x88>
 8013988:	4b1b      	ldr	r3, [pc, #108]	; (80139f8 <_puts_r+0xd4>)
 801398a:	429c      	cmp	r4, r3
 801398c:	d101      	bne.n	8013992 <_puts_r+0x6e>
 801398e:	68ac      	ldr	r4, [r5, #8]
 8013990:	e7da      	b.n	8013948 <_puts_r+0x24>
 8013992:	4b1a      	ldr	r3, [pc, #104]	; (80139fc <_puts_r+0xd8>)
 8013994:	429c      	cmp	r4, r3
 8013996:	bf08      	it	eq
 8013998:	68ec      	ldreq	r4, [r5, #12]
 801399a:	e7d5      	b.n	8013948 <_puts_r+0x24>
 801399c:	4621      	mov	r1, r4
 801399e:	4628      	mov	r0, r5
 80139a0:	f000 f90e 	bl	8013bc0 <__swsetup_r>
 80139a4:	2800      	cmp	r0, #0
 80139a6:	d0dd      	beq.n	8013964 <_puts_r+0x40>
 80139a8:	f04f 35ff 	mov.w	r5, #4294967295
 80139ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80139ae:	07da      	lsls	r2, r3, #31
 80139b0:	d405      	bmi.n	80139be <_puts_r+0x9a>
 80139b2:	89a3      	ldrh	r3, [r4, #12]
 80139b4:	059b      	lsls	r3, r3, #22
 80139b6:	d402      	bmi.n	80139be <_puts_r+0x9a>
 80139b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80139ba:	f7ff fa85 	bl	8012ec8 <__retarget_lock_release_recursive>
 80139be:	4628      	mov	r0, r5
 80139c0:	bd70      	pop	{r4, r5, r6, pc}
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	da04      	bge.n	80139d0 <_puts_r+0xac>
 80139c6:	69a2      	ldr	r2, [r4, #24]
 80139c8:	429a      	cmp	r2, r3
 80139ca:	dc06      	bgt.n	80139da <_puts_r+0xb6>
 80139cc:	290a      	cmp	r1, #10
 80139ce:	d004      	beq.n	80139da <_puts_r+0xb6>
 80139d0:	6823      	ldr	r3, [r4, #0]
 80139d2:	1c5a      	adds	r2, r3, #1
 80139d4:	6022      	str	r2, [r4, #0]
 80139d6:	7019      	strb	r1, [r3, #0]
 80139d8:	e7c5      	b.n	8013966 <_puts_r+0x42>
 80139da:	4622      	mov	r2, r4
 80139dc:	4628      	mov	r0, r5
 80139de:	f000 f88b 	bl	8013af8 <__swbuf_r>
 80139e2:	3001      	adds	r0, #1
 80139e4:	d1bf      	bne.n	8013966 <_puts_r+0x42>
 80139e6:	e7df      	b.n	80139a8 <_puts_r+0x84>
 80139e8:	6823      	ldr	r3, [r4, #0]
 80139ea:	250a      	movs	r5, #10
 80139ec:	1c5a      	adds	r2, r3, #1
 80139ee:	6022      	str	r2, [r4, #0]
 80139f0:	701d      	strb	r5, [r3, #0]
 80139f2:	e7db      	b.n	80139ac <_puts_r+0x88>
 80139f4:	08019ec0 	.word	0x08019ec0
 80139f8:	08019ee0 	.word	0x08019ee0
 80139fc:	08019ea0 	.word	0x08019ea0

08013a00 <puts>:
 8013a00:	4b02      	ldr	r3, [pc, #8]	; (8013a0c <puts+0xc>)
 8013a02:	4601      	mov	r1, r0
 8013a04:	6818      	ldr	r0, [r3, #0]
 8013a06:	f7ff bf8d 	b.w	8013924 <_puts_r>
 8013a0a:	bf00      	nop
 8013a0c:	20000080 	.word	0x20000080

08013a10 <_sbrk_r>:
 8013a10:	b538      	push	{r3, r4, r5, lr}
 8013a12:	4d06      	ldr	r5, [pc, #24]	; (8013a2c <_sbrk_r+0x1c>)
 8013a14:	2300      	movs	r3, #0
 8013a16:	4604      	mov	r4, r0
 8013a18:	4608      	mov	r0, r1
 8013a1a:	602b      	str	r3, [r5, #0]
 8013a1c:	f7ef fa2c 	bl	8002e78 <_sbrk>
 8013a20:	1c43      	adds	r3, r0, #1
 8013a22:	d102      	bne.n	8013a2a <_sbrk_r+0x1a>
 8013a24:	682b      	ldr	r3, [r5, #0]
 8013a26:	b103      	cbz	r3, 8013a2a <_sbrk_r+0x1a>
 8013a28:	6023      	str	r3, [r4, #0]
 8013a2a:	bd38      	pop	{r3, r4, r5, pc}
 8013a2c:	20005778 	.word	0x20005778

08013a30 <siprintf>:
 8013a30:	b40e      	push	{r1, r2, r3}
 8013a32:	b500      	push	{lr}
 8013a34:	b09c      	sub	sp, #112	; 0x70
 8013a36:	ab1d      	add	r3, sp, #116	; 0x74
 8013a38:	9002      	str	r0, [sp, #8]
 8013a3a:	9006      	str	r0, [sp, #24]
 8013a3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013a40:	4809      	ldr	r0, [pc, #36]	; (8013a68 <siprintf+0x38>)
 8013a42:	9107      	str	r1, [sp, #28]
 8013a44:	9104      	str	r1, [sp, #16]
 8013a46:	4909      	ldr	r1, [pc, #36]	; (8013a6c <siprintf+0x3c>)
 8013a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a4c:	9105      	str	r1, [sp, #20]
 8013a4e:	6800      	ldr	r0, [r0, #0]
 8013a50:	9301      	str	r3, [sp, #4]
 8013a52:	a902      	add	r1, sp, #8
 8013a54:	f001 fd42 	bl	80154dc <_svfiprintf_r>
 8013a58:	9b02      	ldr	r3, [sp, #8]
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	701a      	strb	r2, [r3, #0]
 8013a5e:	b01c      	add	sp, #112	; 0x70
 8013a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a64:	b003      	add	sp, #12
 8013a66:	4770      	bx	lr
 8013a68:	20000080 	.word	0x20000080
 8013a6c:	ffff0208 	.word	0xffff0208

08013a70 <__sread>:
 8013a70:	b510      	push	{r4, lr}
 8013a72:	460c      	mov	r4, r1
 8013a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a78:	f001 ff8a 	bl	8015990 <_read_r>
 8013a7c:	2800      	cmp	r0, #0
 8013a7e:	bfab      	itete	ge
 8013a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013a82:	89a3      	ldrhlt	r3, [r4, #12]
 8013a84:	181b      	addge	r3, r3, r0
 8013a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013a8a:	bfac      	ite	ge
 8013a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8013a8e:	81a3      	strhlt	r3, [r4, #12]
 8013a90:	bd10      	pop	{r4, pc}

08013a92 <__swrite>:
 8013a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a96:	461f      	mov	r7, r3
 8013a98:	898b      	ldrh	r3, [r1, #12]
 8013a9a:	05db      	lsls	r3, r3, #23
 8013a9c:	4605      	mov	r5, r0
 8013a9e:	460c      	mov	r4, r1
 8013aa0:	4616      	mov	r6, r2
 8013aa2:	d505      	bpl.n	8013ab0 <__swrite+0x1e>
 8013aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013aa8:	2302      	movs	r3, #2
 8013aaa:	2200      	movs	r2, #0
 8013aac:	f001 f848 	bl	8014b40 <_lseek_r>
 8013ab0:	89a3      	ldrh	r3, [r4, #12]
 8013ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013aba:	81a3      	strh	r3, [r4, #12]
 8013abc:	4632      	mov	r2, r6
 8013abe:	463b      	mov	r3, r7
 8013ac0:	4628      	mov	r0, r5
 8013ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ac6:	f000 b869 	b.w	8013b9c <_write_r>

08013aca <__sseek>:
 8013aca:	b510      	push	{r4, lr}
 8013acc:	460c      	mov	r4, r1
 8013ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ad2:	f001 f835 	bl	8014b40 <_lseek_r>
 8013ad6:	1c43      	adds	r3, r0, #1
 8013ad8:	89a3      	ldrh	r3, [r4, #12]
 8013ada:	bf15      	itete	ne
 8013adc:	6560      	strne	r0, [r4, #84]	; 0x54
 8013ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013ae6:	81a3      	strheq	r3, [r4, #12]
 8013ae8:	bf18      	it	ne
 8013aea:	81a3      	strhne	r3, [r4, #12]
 8013aec:	bd10      	pop	{r4, pc}

08013aee <__sclose>:
 8013aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013af2:	f000 b8d3 	b.w	8013c9c <_close_r>
	...

08013af8 <__swbuf_r>:
 8013af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013afa:	460e      	mov	r6, r1
 8013afc:	4614      	mov	r4, r2
 8013afe:	4605      	mov	r5, r0
 8013b00:	b118      	cbz	r0, 8013b0a <__swbuf_r+0x12>
 8013b02:	6983      	ldr	r3, [r0, #24]
 8013b04:	b90b      	cbnz	r3, 8013b0a <__swbuf_r+0x12>
 8013b06:	f7ff f91b 	bl	8012d40 <__sinit>
 8013b0a:	4b21      	ldr	r3, [pc, #132]	; (8013b90 <__swbuf_r+0x98>)
 8013b0c:	429c      	cmp	r4, r3
 8013b0e:	d12b      	bne.n	8013b68 <__swbuf_r+0x70>
 8013b10:	686c      	ldr	r4, [r5, #4]
 8013b12:	69a3      	ldr	r3, [r4, #24]
 8013b14:	60a3      	str	r3, [r4, #8]
 8013b16:	89a3      	ldrh	r3, [r4, #12]
 8013b18:	071a      	lsls	r2, r3, #28
 8013b1a:	d52f      	bpl.n	8013b7c <__swbuf_r+0x84>
 8013b1c:	6923      	ldr	r3, [r4, #16]
 8013b1e:	b36b      	cbz	r3, 8013b7c <__swbuf_r+0x84>
 8013b20:	6923      	ldr	r3, [r4, #16]
 8013b22:	6820      	ldr	r0, [r4, #0]
 8013b24:	1ac0      	subs	r0, r0, r3
 8013b26:	6963      	ldr	r3, [r4, #20]
 8013b28:	b2f6      	uxtb	r6, r6
 8013b2a:	4283      	cmp	r3, r0
 8013b2c:	4637      	mov	r7, r6
 8013b2e:	dc04      	bgt.n	8013b3a <__swbuf_r+0x42>
 8013b30:	4621      	mov	r1, r4
 8013b32:	4628      	mov	r0, r5
 8013b34:	f000 ffc4 	bl	8014ac0 <_fflush_r>
 8013b38:	bb30      	cbnz	r0, 8013b88 <__swbuf_r+0x90>
 8013b3a:	68a3      	ldr	r3, [r4, #8]
 8013b3c:	3b01      	subs	r3, #1
 8013b3e:	60a3      	str	r3, [r4, #8]
 8013b40:	6823      	ldr	r3, [r4, #0]
 8013b42:	1c5a      	adds	r2, r3, #1
 8013b44:	6022      	str	r2, [r4, #0]
 8013b46:	701e      	strb	r6, [r3, #0]
 8013b48:	6963      	ldr	r3, [r4, #20]
 8013b4a:	3001      	adds	r0, #1
 8013b4c:	4283      	cmp	r3, r0
 8013b4e:	d004      	beq.n	8013b5a <__swbuf_r+0x62>
 8013b50:	89a3      	ldrh	r3, [r4, #12]
 8013b52:	07db      	lsls	r3, r3, #31
 8013b54:	d506      	bpl.n	8013b64 <__swbuf_r+0x6c>
 8013b56:	2e0a      	cmp	r6, #10
 8013b58:	d104      	bne.n	8013b64 <__swbuf_r+0x6c>
 8013b5a:	4621      	mov	r1, r4
 8013b5c:	4628      	mov	r0, r5
 8013b5e:	f000 ffaf 	bl	8014ac0 <_fflush_r>
 8013b62:	b988      	cbnz	r0, 8013b88 <__swbuf_r+0x90>
 8013b64:	4638      	mov	r0, r7
 8013b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b68:	4b0a      	ldr	r3, [pc, #40]	; (8013b94 <__swbuf_r+0x9c>)
 8013b6a:	429c      	cmp	r4, r3
 8013b6c:	d101      	bne.n	8013b72 <__swbuf_r+0x7a>
 8013b6e:	68ac      	ldr	r4, [r5, #8]
 8013b70:	e7cf      	b.n	8013b12 <__swbuf_r+0x1a>
 8013b72:	4b09      	ldr	r3, [pc, #36]	; (8013b98 <__swbuf_r+0xa0>)
 8013b74:	429c      	cmp	r4, r3
 8013b76:	bf08      	it	eq
 8013b78:	68ec      	ldreq	r4, [r5, #12]
 8013b7a:	e7ca      	b.n	8013b12 <__swbuf_r+0x1a>
 8013b7c:	4621      	mov	r1, r4
 8013b7e:	4628      	mov	r0, r5
 8013b80:	f000 f81e 	bl	8013bc0 <__swsetup_r>
 8013b84:	2800      	cmp	r0, #0
 8013b86:	d0cb      	beq.n	8013b20 <__swbuf_r+0x28>
 8013b88:	f04f 37ff 	mov.w	r7, #4294967295
 8013b8c:	e7ea      	b.n	8013b64 <__swbuf_r+0x6c>
 8013b8e:	bf00      	nop
 8013b90:	08019ec0 	.word	0x08019ec0
 8013b94:	08019ee0 	.word	0x08019ee0
 8013b98:	08019ea0 	.word	0x08019ea0

08013b9c <_write_r>:
 8013b9c:	b538      	push	{r3, r4, r5, lr}
 8013b9e:	4d07      	ldr	r5, [pc, #28]	; (8013bbc <_write_r+0x20>)
 8013ba0:	4604      	mov	r4, r0
 8013ba2:	4608      	mov	r0, r1
 8013ba4:	4611      	mov	r1, r2
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	602a      	str	r2, [r5, #0]
 8013baa:	461a      	mov	r2, r3
 8013bac:	f7fe fe6d 	bl	801288a <_write>
 8013bb0:	1c43      	adds	r3, r0, #1
 8013bb2:	d102      	bne.n	8013bba <_write_r+0x1e>
 8013bb4:	682b      	ldr	r3, [r5, #0]
 8013bb6:	b103      	cbz	r3, 8013bba <_write_r+0x1e>
 8013bb8:	6023      	str	r3, [r4, #0]
 8013bba:	bd38      	pop	{r3, r4, r5, pc}
 8013bbc:	20005778 	.word	0x20005778

08013bc0 <__swsetup_r>:
 8013bc0:	4b32      	ldr	r3, [pc, #200]	; (8013c8c <__swsetup_r+0xcc>)
 8013bc2:	b570      	push	{r4, r5, r6, lr}
 8013bc4:	681d      	ldr	r5, [r3, #0]
 8013bc6:	4606      	mov	r6, r0
 8013bc8:	460c      	mov	r4, r1
 8013bca:	b125      	cbz	r5, 8013bd6 <__swsetup_r+0x16>
 8013bcc:	69ab      	ldr	r3, [r5, #24]
 8013bce:	b913      	cbnz	r3, 8013bd6 <__swsetup_r+0x16>
 8013bd0:	4628      	mov	r0, r5
 8013bd2:	f7ff f8b5 	bl	8012d40 <__sinit>
 8013bd6:	4b2e      	ldr	r3, [pc, #184]	; (8013c90 <__swsetup_r+0xd0>)
 8013bd8:	429c      	cmp	r4, r3
 8013bda:	d10f      	bne.n	8013bfc <__swsetup_r+0x3c>
 8013bdc:	686c      	ldr	r4, [r5, #4]
 8013bde:	89a3      	ldrh	r3, [r4, #12]
 8013be0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013be4:	0719      	lsls	r1, r3, #28
 8013be6:	d42c      	bmi.n	8013c42 <__swsetup_r+0x82>
 8013be8:	06dd      	lsls	r5, r3, #27
 8013bea:	d411      	bmi.n	8013c10 <__swsetup_r+0x50>
 8013bec:	2309      	movs	r3, #9
 8013bee:	6033      	str	r3, [r6, #0]
 8013bf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013bf4:	81a3      	strh	r3, [r4, #12]
 8013bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8013bfa:	e03e      	b.n	8013c7a <__swsetup_r+0xba>
 8013bfc:	4b25      	ldr	r3, [pc, #148]	; (8013c94 <__swsetup_r+0xd4>)
 8013bfe:	429c      	cmp	r4, r3
 8013c00:	d101      	bne.n	8013c06 <__swsetup_r+0x46>
 8013c02:	68ac      	ldr	r4, [r5, #8]
 8013c04:	e7eb      	b.n	8013bde <__swsetup_r+0x1e>
 8013c06:	4b24      	ldr	r3, [pc, #144]	; (8013c98 <__swsetup_r+0xd8>)
 8013c08:	429c      	cmp	r4, r3
 8013c0a:	bf08      	it	eq
 8013c0c:	68ec      	ldreq	r4, [r5, #12]
 8013c0e:	e7e6      	b.n	8013bde <__swsetup_r+0x1e>
 8013c10:	0758      	lsls	r0, r3, #29
 8013c12:	d512      	bpl.n	8013c3a <__swsetup_r+0x7a>
 8013c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c16:	b141      	cbz	r1, 8013c2a <__swsetup_r+0x6a>
 8013c18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c1c:	4299      	cmp	r1, r3
 8013c1e:	d002      	beq.n	8013c26 <__swsetup_r+0x66>
 8013c20:	4630      	mov	r0, r6
 8013c22:	f001 fbb3 	bl	801538c <_free_r>
 8013c26:	2300      	movs	r3, #0
 8013c28:	6363      	str	r3, [r4, #52]	; 0x34
 8013c2a:	89a3      	ldrh	r3, [r4, #12]
 8013c2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013c30:	81a3      	strh	r3, [r4, #12]
 8013c32:	2300      	movs	r3, #0
 8013c34:	6063      	str	r3, [r4, #4]
 8013c36:	6923      	ldr	r3, [r4, #16]
 8013c38:	6023      	str	r3, [r4, #0]
 8013c3a:	89a3      	ldrh	r3, [r4, #12]
 8013c3c:	f043 0308 	orr.w	r3, r3, #8
 8013c40:	81a3      	strh	r3, [r4, #12]
 8013c42:	6923      	ldr	r3, [r4, #16]
 8013c44:	b94b      	cbnz	r3, 8013c5a <__swsetup_r+0x9a>
 8013c46:	89a3      	ldrh	r3, [r4, #12]
 8013c48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c50:	d003      	beq.n	8013c5a <__swsetup_r+0x9a>
 8013c52:	4621      	mov	r1, r4
 8013c54:	4630      	mov	r0, r6
 8013c56:	f000 ffab 	bl	8014bb0 <__smakebuf_r>
 8013c5a:	89a0      	ldrh	r0, [r4, #12]
 8013c5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c60:	f010 0301 	ands.w	r3, r0, #1
 8013c64:	d00a      	beq.n	8013c7c <__swsetup_r+0xbc>
 8013c66:	2300      	movs	r3, #0
 8013c68:	60a3      	str	r3, [r4, #8]
 8013c6a:	6963      	ldr	r3, [r4, #20]
 8013c6c:	425b      	negs	r3, r3
 8013c6e:	61a3      	str	r3, [r4, #24]
 8013c70:	6923      	ldr	r3, [r4, #16]
 8013c72:	b943      	cbnz	r3, 8013c86 <__swsetup_r+0xc6>
 8013c74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013c78:	d1ba      	bne.n	8013bf0 <__swsetup_r+0x30>
 8013c7a:	bd70      	pop	{r4, r5, r6, pc}
 8013c7c:	0781      	lsls	r1, r0, #30
 8013c7e:	bf58      	it	pl
 8013c80:	6963      	ldrpl	r3, [r4, #20]
 8013c82:	60a3      	str	r3, [r4, #8]
 8013c84:	e7f4      	b.n	8013c70 <__swsetup_r+0xb0>
 8013c86:	2000      	movs	r0, #0
 8013c88:	e7f7      	b.n	8013c7a <__swsetup_r+0xba>
 8013c8a:	bf00      	nop
 8013c8c:	20000080 	.word	0x20000080
 8013c90:	08019ec0 	.word	0x08019ec0
 8013c94:	08019ee0 	.word	0x08019ee0
 8013c98:	08019ea0 	.word	0x08019ea0

08013c9c <_close_r>:
 8013c9c:	b538      	push	{r3, r4, r5, lr}
 8013c9e:	4d06      	ldr	r5, [pc, #24]	; (8013cb8 <_close_r+0x1c>)
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	4604      	mov	r4, r0
 8013ca4:	4608      	mov	r0, r1
 8013ca6:	602b      	str	r3, [r5, #0]
 8013ca8:	f7fe fe20 	bl	80128ec <_close>
 8013cac:	1c43      	adds	r3, r0, #1
 8013cae:	d102      	bne.n	8013cb6 <_close_r+0x1a>
 8013cb0:	682b      	ldr	r3, [r5, #0]
 8013cb2:	b103      	cbz	r3, 8013cb6 <_close_r+0x1a>
 8013cb4:	6023      	str	r3, [r4, #0]
 8013cb6:	bd38      	pop	{r3, r4, r5, pc}
 8013cb8:	20005778 	.word	0x20005778

08013cbc <quorem>:
 8013cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cc0:	6903      	ldr	r3, [r0, #16]
 8013cc2:	690c      	ldr	r4, [r1, #16]
 8013cc4:	42a3      	cmp	r3, r4
 8013cc6:	4607      	mov	r7, r0
 8013cc8:	f2c0 8081 	blt.w	8013dce <quorem+0x112>
 8013ccc:	3c01      	subs	r4, #1
 8013cce:	f101 0814 	add.w	r8, r1, #20
 8013cd2:	f100 0514 	add.w	r5, r0, #20
 8013cd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013cda:	9301      	str	r3, [sp, #4]
 8013cdc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013ce0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013ce4:	3301      	adds	r3, #1
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013cec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013cf0:	fbb2 f6f3 	udiv	r6, r2, r3
 8013cf4:	d331      	bcc.n	8013d5a <quorem+0x9e>
 8013cf6:	f04f 0e00 	mov.w	lr, #0
 8013cfa:	4640      	mov	r0, r8
 8013cfc:	46ac      	mov	ip, r5
 8013cfe:	46f2      	mov	sl, lr
 8013d00:	f850 2b04 	ldr.w	r2, [r0], #4
 8013d04:	b293      	uxth	r3, r2
 8013d06:	fb06 e303 	mla	r3, r6, r3, lr
 8013d0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013d0e:	b29b      	uxth	r3, r3
 8013d10:	ebaa 0303 	sub.w	r3, sl, r3
 8013d14:	f8dc a000 	ldr.w	sl, [ip]
 8013d18:	0c12      	lsrs	r2, r2, #16
 8013d1a:	fa13 f38a 	uxtah	r3, r3, sl
 8013d1e:	fb06 e202 	mla	r2, r6, r2, lr
 8013d22:	9300      	str	r3, [sp, #0]
 8013d24:	9b00      	ldr	r3, [sp, #0]
 8013d26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013d2a:	b292      	uxth	r2, r2
 8013d2c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013d30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013d34:	f8bd 3000 	ldrh.w	r3, [sp]
 8013d38:	4581      	cmp	r9, r0
 8013d3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013d3e:	f84c 3b04 	str.w	r3, [ip], #4
 8013d42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013d46:	d2db      	bcs.n	8013d00 <quorem+0x44>
 8013d48:	f855 300b 	ldr.w	r3, [r5, fp]
 8013d4c:	b92b      	cbnz	r3, 8013d5a <quorem+0x9e>
 8013d4e:	9b01      	ldr	r3, [sp, #4]
 8013d50:	3b04      	subs	r3, #4
 8013d52:	429d      	cmp	r5, r3
 8013d54:	461a      	mov	r2, r3
 8013d56:	d32e      	bcc.n	8013db6 <quorem+0xfa>
 8013d58:	613c      	str	r4, [r7, #16]
 8013d5a:	4638      	mov	r0, r7
 8013d5c:	f001 f9fe 	bl	801515c <__mcmp>
 8013d60:	2800      	cmp	r0, #0
 8013d62:	db24      	blt.n	8013dae <quorem+0xf2>
 8013d64:	3601      	adds	r6, #1
 8013d66:	4628      	mov	r0, r5
 8013d68:	f04f 0c00 	mov.w	ip, #0
 8013d6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8013d70:	f8d0 e000 	ldr.w	lr, [r0]
 8013d74:	b293      	uxth	r3, r2
 8013d76:	ebac 0303 	sub.w	r3, ip, r3
 8013d7a:	0c12      	lsrs	r2, r2, #16
 8013d7c:	fa13 f38e 	uxtah	r3, r3, lr
 8013d80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013d84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013d88:	b29b      	uxth	r3, r3
 8013d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013d8e:	45c1      	cmp	r9, r8
 8013d90:	f840 3b04 	str.w	r3, [r0], #4
 8013d94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013d98:	d2e8      	bcs.n	8013d6c <quorem+0xb0>
 8013d9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013d9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013da2:	b922      	cbnz	r2, 8013dae <quorem+0xf2>
 8013da4:	3b04      	subs	r3, #4
 8013da6:	429d      	cmp	r5, r3
 8013da8:	461a      	mov	r2, r3
 8013daa:	d30a      	bcc.n	8013dc2 <quorem+0x106>
 8013dac:	613c      	str	r4, [r7, #16]
 8013dae:	4630      	mov	r0, r6
 8013db0:	b003      	add	sp, #12
 8013db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013db6:	6812      	ldr	r2, [r2, #0]
 8013db8:	3b04      	subs	r3, #4
 8013dba:	2a00      	cmp	r2, #0
 8013dbc:	d1cc      	bne.n	8013d58 <quorem+0x9c>
 8013dbe:	3c01      	subs	r4, #1
 8013dc0:	e7c7      	b.n	8013d52 <quorem+0x96>
 8013dc2:	6812      	ldr	r2, [r2, #0]
 8013dc4:	3b04      	subs	r3, #4
 8013dc6:	2a00      	cmp	r2, #0
 8013dc8:	d1f0      	bne.n	8013dac <quorem+0xf0>
 8013dca:	3c01      	subs	r4, #1
 8013dcc:	e7eb      	b.n	8013da6 <quorem+0xea>
 8013dce:	2000      	movs	r0, #0
 8013dd0:	e7ee      	b.n	8013db0 <quorem+0xf4>
 8013dd2:	0000      	movs	r0, r0
 8013dd4:	0000      	movs	r0, r0
	...

08013dd8 <_dtoa_r>:
 8013dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ddc:	ed2d 8b04 	vpush	{d8-d9}
 8013de0:	ec57 6b10 	vmov	r6, r7, d0
 8013de4:	b093      	sub	sp, #76	; 0x4c
 8013de6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013de8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013dec:	9106      	str	r1, [sp, #24]
 8013dee:	ee10 aa10 	vmov	sl, s0
 8013df2:	4604      	mov	r4, r0
 8013df4:	9209      	str	r2, [sp, #36]	; 0x24
 8013df6:	930c      	str	r3, [sp, #48]	; 0x30
 8013df8:	46bb      	mov	fp, r7
 8013dfa:	b975      	cbnz	r5, 8013e1a <_dtoa_r+0x42>
 8013dfc:	2010      	movs	r0, #16
 8013dfe:	f000 ff17 	bl	8014c30 <malloc>
 8013e02:	4602      	mov	r2, r0
 8013e04:	6260      	str	r0, [r4, #36]	; 0x24
 8013e06:	b920      	cbnz	r0, 8013e12 <_dtoa_r+0x3a>
 8013e08:	4ba7      	ldr	r3, [pc, #668]	; (80140a8 <_dtoa_r+0x2d0>)
 8013e0a:	21ea      	movs	r1, #234	; 0xea
 8013e0c:	48a7      	ldr	r0, [pc, #668]	; (80140ac <_dtoa_r+0x2d4>)
 8013e0e:	f001 fdd1 	bl	80159b4 <__assert_func>
 8013e12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013e16:	6005      	str	r5, [r0, #0]
 8013e18:	60c5      	str	r5, [r0, #12]
 8013e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e1c:	6819      	ldr	r1, [r3, #0]
 8013e1e:	b151      	cbz	r1, 8013e36 <_dtoa_r+0x5e>
 8013e20:	685a      	ldr	r2, [r3, #4]
 8013e22:	604a      	str	r2, [r1, #4]
 8013e24:	2301      	movs	r3, #1
 8013e26:	4093      	lsls	r3, r2
 8013e28:	608b      	str	r3, [r1, #8]
 8013e2a:	4620      	mov	r0, r4
 8013e2c:	f000 ff54 	bl	8014cd8 <_Bfree>
 8013e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e32:	2200      	movs	r2, #0
 8013e34:	601a      	str	r2, [r3, #0]
 8013e36:	1e3b      	subs	r3, r7, #0
 8013e38:	bfaa      	itet	ge
 8013e3a:	2300      	movge	r3, #0
 8013e3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8013e40:	f8c8 3000 	strge.w	r3, [r8]
 8013e44:	4b9a      	ldr	r3, [pc, #616]	; (80140b0 <_dtoa_r+0x2d8>)
 8013e46:	bfbc      	itt	lt
 8013e48:	2201      	movlt	r2, #1
 8013e4a:	f8c8 2000 	strlt.w	r2, [r8]
 8013e4e:	ea33 030b 	bics.w	r3, r3, fp
 8013e52:	d11b      	bne.n	8013e8c <_dtoa_r+0xb4>
 8013e54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013e56:	f242 730f 	movw	r3, #9999	; 0x270f
 8013e5a:	6013      	str	r3, [r2, #0]
 8013e5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013e60:	4333      	orrs	r3, r6
 8013e62:	f000 8592 	beq.w	801498a <_dtoa_r+0xbb2>
 8013e66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013e68:	b963      	cbnz	r3, 8013e84 <_dtoa_r+0xac>
 8013e6a:	4b92      	ldr	r3, [pc, #584]	; (80140b4 <_dtoa_r+0x2dc>)
 8013e6c:	e022      	b.n	8013eb4 <_dtoa_r+0xdc>
 8013e6e:	4b92      	ldr	r3, [pc, #584]	; (80140b8 <_dtoa_r+0x2e0>)
 8013e70:	9301      	str	r3, [sp, #4]
 8013e72:	3308      	adds	r3, #8
 8013e74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013e76:	6013      	str	r3, [r2, #0]
 8013e78:	9801      	ldr	r0, [sp, #4]
 8013e7a:	b013      	add	sp, #76	; 0x4c
 8013e7c:	ecbd 8b04 	vpop	{d8-d9}
 8013e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e84:	4b8b      	ldr	r3, [pc, #556]	; (80140b4 <_dtoa_r+0x2dc>)
 8013e86:	9301      	str	r3, [sp, #4]
 8013e88:	3303      	adds	r3, #3
 8013e8a:	e7f3      	b.n	8013e74 <_dtoa_r+0x9c>
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	2300      	movs	r3, #0
 8013e90:	4650      	mov	r0, sl
 8013e92:	4659      	mov	r1, fp
 8013e94:	f7ec fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 8013e98:	ec4b ab19 	vmov	d9, sl, fp
 8013e9c:	4680      	mov	r8, r0
 8013e9e:	b158      	cbz	r0, 8013eb8 <_dtoa_r+0xe0>
 8013ea0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	6013      	str	r3, [r2, #0]
 8013ea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	f000 856b 	beq.w	8014984 <_dtoa_r+0xbac>
 8013eae:	4883      	ldr	r0, [pc, #524]	; (80140bc <_dtoa_r+0x2e4>)
 8013eb0:	6018      	str	r0, [r3, #0]
 8013eb2:	1e43      	subs	r3, r0, #1
 8013eb4:	9301      	str	r3, [sp, #4]
 8013eb6:	e7df      	b.n	8013e78 <_dtoa_r+0xa0>
 8013eb8:	ec4b ab10 	vmov	d0, sl, fp
 8013ebc:	aa10      	add	r2, sp, #64	; 0x40
 8013ebe:	a911      	add	r1, sp, #68	; 0x44
 8013ec0:	4620      	mov	r0, r4
 8013ec2:	f001 f9f1 	bl	80152a8 <__d2b>
 8013ec6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8013eca:	ee08 0a10 	vmov	s16, r0
 8013ece:	2d00      	cmp	r5, #0
 8013ed0:	f000 8084 	beq.w	8013fdc <_dtoa_r+0x204>
 8013ed4:	ee19 3a90 	vmov	r3, s19
 8013ed8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013edc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013ee0:	4656      	mov	r6, sl
 8013ee2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013ee6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013eea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8013eee:	4b74      	ldr	r3, [pc, #464]	; (80140c0 <_dtoa_r+0x2e8>)
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	4630      	mov	r0, r6
 8013ef4:	4639      	mov	r1, r7
 8013ef6:	f7ec f9c7 	bl	8000288 <__aeabi_dsub>
 8013efa:	a365      	add	r3, pc, #404	; (adr r3, 8014090 <_dtoa_r+0x2b8>)
 8013efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f00:	f7ec fb7a 	bl	80005f8 <__aeabi_dmul>
 8013f04:	a364      	add	r3, pc, #400	; (adr r3, 8014098 <_dtoa_r+0x2c0>)
 8013f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f0a:	f7ec f9bf 	bl	800028c <__adddf3>
 8013f0e:	4606      	mov	r6, r0
 8013f10:	4628      	mov	r0, r5
 8013f12:	460f      	mov	r7, r1
 8013f14:	f7ec fb06 	bl	8000524 <__aeabi_i2d>
 8013f18:	a361      	add	r3, pc, #388	; (adr r3, 80140a0 <_dtoa_r+0x2c8>)
 8013f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f1e:	f7ec fb6b 	bl	80005f8 <__aeabi_dmul>
 8013f22:	4602      	mov	r2, r0
 8013f24:	460b      	mov	r3, r1
 8013f26:	4630      	mov	r0, r6
 8013f28:	4639      	mov	r1, r7
 8013f2a:	f7ec f9af 	bl	800028c <__adddf3>
 8013f2e:	4606      	mov	r6, r0
 8013f30:	460f      	mov	r7, r1
 8013f32:	f7ec fe11 	bl	8000b58 <__aeabi_d2iz>
 8013f36:	2200      	movs	r2, #0
 8013f38:	9000      	str	r0, [sp, #0]
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	4630      	mov	r0, r6
 8013f3e:	4639      	mov	r1, r7
 8013f40:	f7ec fdcc 	bl	8000adc <__aeabi_dcmplt>
 8013f44:	b150      	cbz	r0, 8013f5c <_dtoa_r+0x184>
 8013f46:	9800      	ldr	r0, [sp, #0]
 8013f48:	f7ec faec 	bl	8000524 <__aeabi_i2d>
 8013f4c:	4632      	mov	r2, r6
 8013f4e:	463b      	mov	r3, r7
 8013f50:	f7ec fdba 	bl	8000ac8 <__aeabi_dcmpeq>
 8013f54:	b910      	cbnz	r0, 8013f5c <_dtoa_r+0x184>
 8013f56:	9b00      	ldr	r3, [sp, #0]
 8013f58:	3b01      	subs	r3, #1
 8013f5a:	9300      	str	r3, [sp, #0]
 8013f5c:	9b00      	ldr	r3, [sp, #0]
 8013f5e:	2b16      	cmp	r3, #22
 8013f60:	d85a      	bhi.n	8014018 <_dtoa_r+0x240>
 8013f62:	9a00      	ldr	r2, [sp, #0]
 8013f64:	4b57      	ldr	r3, [pc, #348]	; (80140c4 <_dtoa_r+0x2ec>)
 8013f66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f6e:	ec51 0b19 	vmov	r0, r1, d9
 8013f72:	f7ec fdb3 	bl	8000adc <__aeabi_dcmplt>
 8013f76:	2800      	cmp	r0, #0
 8013f78:	d050      	beq.n	801401c <_dtoa_r+0x244>
 8013f7a:	9b00      	ldr	r3, [sp, #0]
 8013f7c:	3b01      	subs	r3, #1
 8013f7e:	9300      	str	r3, [sp, #0]
 8013f80:	2300      	movs	r3, #0
 8013f82:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f86:	1b5d      	subs	r5, r3, r5
 8013f88:	1e6b      	subs	r3, r5, #1
 8013f8a:	9305      	str	r3, [sp, #20]
 8013f8c:	bf45      	ittet	mi
 8013f8e:	f1c5 0301 	rsbmi	r3, r5, #1
 8013f92:	9304      	strmi	r3, [sp, #16]
 8013f94:	2300      	movpl	r3, #0
 8013f96:	2300      	movmi	r3, #0
 8013f98:	bf4c      	ite	mi
 8013f9a:	9305      	strmi	r3, [sp, #20]
 8013f9c:	9304      	strpl	r3, [sp, #16]
 8013f9e:	9b00      	ldr	r3, [sp, #0]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	db3d      	blt.n	8014020 <_dtoa_r+0x248>
 8013fa4:	9b05      	ldr	r3, [sp, #20]
 8013fa6:	9a00      	ldr	r2, [sp, #0]
 8013fa8:	920a      	str	r2, [sp, #40]	; 0x28
 8013faa:	4413      	add	r3, r2
 8013fac:	9305      	str	r3, [sp, #20]
 8013fae:	2300      	movs	r3, #0
 8013fb0:	9307      	str	r3, [sp, #28]
 8013fb2:	9b06      	ldr	r3, [sp, #24]
 8013fb4:	2b09      	cmp	r3, #9
 8013fb6:	f200 8089 	bhi.w	80140cc <_dtoa_r+0x2f4>
 8013fba:	2b05      	cmp	r3, #5
 8013fbc:	bfc4      	itt	gt
 8013fbe:	3b04      	subgt	r3, #4
 8013fc0:	9306      	strgt	r3, [sp, #24]
 8013fc2:	9b06      	ldr	r3, [sp, #24]
 8013fc4:	f1a3 0302 	sub.w	r3, r3, #2
 8013fc8:	bfcc      	ite	gt
 8013fca:	2500      	movgt	r5, #0
 8013fcc:	2501      	movle	r5, #1
 8013fce:	2b03      	cmp	r3, #3
 8013fd0:	f200 8087 	bhi.w	80140e2 <_dtoa_r+0x30a>
 8013fd4:	e8df f003 	tbb	[pc, r3]
 8013fd8:	59383a2d 	.word	0x59383a2d
 8013fdc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013fe0:	441d      	add	r5, r3
 8013fe2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013fe6:	2b20      	cmp	r3, #32
 8013fe8:	bfc1      	itttt	gt
 8013fea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013fee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013ff2:	fa0b f303 	lslgt.w	r3, fp, r3
 8013ff6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013ffa:	bfda      	itte	le
 8013ffc:	f1c3 0320 	rsble	r3, r3, #32
 8014000:	fa06 f003 	lslle.w	r0, r6, r3
 8014004:	4318      	orrgt	r0, r3
 8014006:	f7ec fa7d 	bl	8000504 <__aeabi_ui2d>
 801400a:	2301      	movs	r3, #1
 801400c:	4606      	mov	r6, r0
 801400e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014012:	3d01      	subs	r5, #1
 8014014:	930e      	str	r3, [sp, #56]	; 0x38
 8014016:	e76a      	b.n	8013eee <_dtoa_r+0x116>
 8014018:	2301      	movs	r3, #1
 801401a:	e7b2      	b.n	8013f82 <_dtoa_r+0x1aa>
 801401c:	900b      	str	r0, [sp, #44]	; 0x2c
 801401e:	e7b1      	b.n	8013f84 <_dtoa_r+0x1ac>
 8014020:	9b04      	ldr	r3, [sp, #16]
 8014022:	9a00      	ldr	r2, [sp, #0]
 8014024:	1a9b      	subs	r3, r3, r2
 8014026:	9304      	str	r3, [sp, #16]
 8014028:	4253      	negs	r3, r2
 801402a:	9307      	str	r3, [sp, #28]
 801402c:	2300      	movs	r3, #0
 801402e:	930a      	str	r3, [sp, #40]	; 0x28
 8014030:	e7bf      	b.n	8013fb2 <_dtoa_r+0x1da>
 8014032:	2300      	movs	r3, #0
 8014034:	9308      	str	r3, [sp, #32]
 8014036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014038:	2b00      	cmp	r3, #0
 801403a:	dc55      	bgt.n	80140e8 <_dtoa_r+0x310>
 801403c:	2301      	movs	r3, #1
 801403e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014042:	461a      	mov	r2, r3
 8014044:	9209      	str	r2, [sp, #36]	; 0x24
 8014046:	e00c      	b.n	8014062 <_dtoa_r+0x28a>
 8014048:	2301      	movs	r3, #1
 801404a:	e7f3      	b.n	8014034 <_dtoa_r+0x25c>
 801404c:	2300      	movs	r3, #0
 801404e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014050:	9308      	str	r3, [sp, #32]
 8014052:	9b00      	ldr	r3, [sp, #0]
 8014054:	4413      	add	r3, r2
 8014056:	9302      	str	r3, [sp, #8]
 8014058:	3301      	adds	r3, #1
 801405a:	2b01      	cmp	r3, #1
 801405c:	9303      	str	r3, [sp, #12]
 801405e:	bfb8      	it	lt
 8014060:	2301      	movlt	r3, #1
 8014062:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014064:	2200      	movs	r2, #0
 8014066:	6042      	str	r2, [r0, #4]
 8014068:	2204      	movs	r2, #4
 801406a:	f102 0614 	add.w	r6, r2, #20
 801406e:	429e      	cmp	r6, r3
 8014070:	6841      	ldr	r1, [r0, #4]
 8014072:	d93d      	bls.n	80140f0 <_dtoa_r+0x318>
 8014074:	4620      	mov	r0, r4
 8014076:	f000 fdef 	bl	8014c58 <_Balloc>
 801407a:	9001      	str	r0, [sp, #4]
 801407c:	2800      	cmp	r0, #0
 801407e:	d13b      	bne.n	80140f8 <_dtoa_r+0x320>
 8014080:	4b11      	ldr	r3, [pc, #68]	; (80140c8 <_dtoa_r+0x2f0>)
 8014082:	4602      	mov	r2, r0
 8014084:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014088:	e6c0      	b.n	8013e0c <_dtoa_r+0x34>
 801408a:	2301      	movs	r3, #1
 801408c:	e7df      	b.n	801404e <_dtoa_r+0x276>
 801408e:	bf00      	nop
 8014090:	636f4361 	.word	0x636f4361
 8014094:	3fd287a7 	.word	0x3fd287a7
 8014098:	8b60c8b3 	.word	0x8b60c8b3
 801409c:	3fc68a28 	.word	0x3fc68a28
 80140a0:	509f79fb 	.word	0x509f79fb
 80140a4:	3fd34413 	.word	0x3fd34413
 80140a8:	08019f45 	.word	0x08019f45
 80140ac:	08019f5c 	.word	0x08019f5c
 80140b0:	7ff00000 	.word	0x7ff00000
 80140b4:	08019f41 	.word	0x08019f41
 80140b8:	08019f38 	.word	0x08019f38
 80140bc:	08019f15 	.word	0x08019f15
 80140c0:	3ff80000 	.word	0x3ff80000
 80140c4:	0801a050 	.word	0x0801a050
 80140c8:	08019fb7 	.word	0x08019fb7
 80140cc:	2501      	movs	r5, #1
 80140ce:	2300      	movs	r3, #0
 80140d0:	9306      	str	r3, [sp, #24]
 80140d2:	9508      	str	r5, [sp, #32]
 80140d4:	f04f 33ff 	mov.w	r3, #4294967295
 80140d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80140dc:	2200      	movs	r2, #0
 80140de:	2312      	movs	r3, #18
 80140e0:	e7b0      	b.n	8014044 <_dtoa_r+0x26c>
 80140e2:	2301      	movs	r3, #1
 80140e4:	9308      	str	r3, [sp, #32]
 80140e6:	e7f5      	b.n	80140d4 <_dtoa_r+0x2fc>
 80140e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80140ee:	e7b8      	b.n	8014062 <_dtoa_r+0x28a>
 80140f0:	3101      	adds	r1, #1
 80140f2:	6041      	str	r1, [r0, #4]
 80140f4:	0052      	lsls	r2, r2, #1
 80140f6:	e7b8      	b.n	801406a <_dtoa_r+0x292>
 80140f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140fa:	9a01      	ldr	r2, [sp, #4]
 80140fc:	601a      	str	r2, [r3, #0]
 80140fe:	9b03      	ldr	r3, [sp, #12]
 8014100:	2b0e      	cmp	r3, #14
 8014102:	f200 809d 	bhi.w	8014240 <_dtoa_r+0x468>
 8014106:	2d00      	cmp	r5, #0
 8014108:	f000 809a 	beq.w	8014240 <_dtoa_r+0x468>
 801410c:	9b00      	ldr	r3, [sp, #0]
 801410e:	2b00      	cmp	r3, #0
 8014110:	dd32      	ble.n	8014178 <_dtoa_r+0x3a0>
 8014112:	4ab7      	ldr	r2, [pc, #732]	; (80143f0 <_dtoa_r+0x618>)
 8014114:	f003 030f 	and.w	r3, r3, #15
 8014118:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801411c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014120:	9b00      	ldr	r3, [sp, #0]
 8014122:	05d8      	lsls	r0, r3, #23
 8014124:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014128:	d516      	bpl.n	8014158 <_dtoa_r+0x380>
 801412a:	4bb2      	ldr	r3, [pc, #712]	; (80143f4 <_dtoa_r+0x61c>)
 801412c:	ec51 0b19 	vmov	r0, r1, d9
 8014130:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014134:	f7ec fb8a 	bl	800084c <__aeabi_ddiv>
 8014138:	f007 070f 	and.w	r7, r7, #15
 801413c:	4682      	mov	sl, r0
 801413e:	468b      	mov	fp, r1
 8014140:	2503      	movs	r5, #3
 8014142:	4eac      	ldr	r6, [pc, #688]	; (80143f4 <_dtoa_r+0x61c>)
 8014144:	b957      	cbnz	r7, 801415c <_dtoa_r+0x384>
 8014146:	4642      	mov	r2, r8
 8014148:	464b      	mov	r3, r9
 801414a:	4650      	mov	r0, sl
 801414c:	4659      	mov	r1, fp
 801414e:	f7ec fb7d 	bl	800084c <__aeabi_ddiv>
 8014152:	4682      	mov	sl, r0
 8014154:	468b      	mov	fp, r1
 8014156:	e028      	b.n	80141aa <_dtoa_r+0x3d2>
 8014158:	2502      	movs	r5, #2
 801415a:	e7f2      	b.n	8014142 <_dtoa_r+0x36a>
 801415c:	07f9      	lsls	r1, r7, #31
 801415e:	d508      	bpl.n	8014172 <_dtoa_r+0x39a>
 8014160:	4640      	mov	r0, r8
 8014162:	4649      	mov	r1, r9
 8014164:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014168:	f7ec fa46 	bl	80005f8 <__aeabi_dmul>
 801416c:	3501      	adds	r5, #1
 801416e:	4680      	mov	r8, r0
 8014170:	4689      	mov	r9, r1
 8014172:	107f      	asrs	r7, r7, #1
 8014174:	3608      	adds	r6, #8
 8014176:	e7e5      	b.n	8014144 <_dtoa_r+0x36c>
 8014178:	f000 809b 	beq.w	80142b2 <_dtoa_r+0x4da>
 801417c:	9b00      	ldr	r3, [sp, #0]
 801417e:	4f9d      	ldr	r7, [pc, #628]	; (80143f4 <_dtoa_r+0x61c>)
 8014180:	425e      	negs	r6, r3
 8014182:	4b9b      	ldr	r3, [pc, #620]	; (80143f0 <_dtoa_r+0x618>)
 8014184:	f006 020f 	and.w	r2, r6, #15
 8014188:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014190:	ec51 0b19 	vmov	r0, r1, d9
 8014194:	f7ec fa30 	bl	80005f8 <__aeabi_dmul>
 8014198:	1136      	asrs	r6, r6, #4
 801419a:	4682      	mov	sl, r0
 801419c:	468b      	mov	fp, r1
 801419e:	2300      	movs	r3, #0
 80141a0:	2502      	movs	r5, #2
 80141a2:	2e00      	cmp	r6, #0
 80141a4:	d17a      	bne.n	801429c <_dtoa_r+0x4c4>
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d1d3      	bne.n	8014152 <_dtoa_r+0x37a>
 80141aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	f000 8082 	beq.w	80142b6 <_dtoa_r+0x4de>
 80141b2:	4b91      	ldr	r3, [pc, #580]	; (80143f8 <_dtoa_r+0x620>)
 80141b4:	2200      	movs	r2, #0
 80141b6:	4650      	mov	r0, sl
 80141b8:	4659      	mov	r1, fp
 80141ba:	f7ec fc8f 	bl	8000adc <__aeabi_dcmplt>
 80141be:	2800      	cmp	r0, #0
 80141c0:	d079      	beq.n	80142b6 <_dtoa_r+0x4de>
 80141c2:	9b03      	ldr	r3, [sp, #12]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d076      	beq.n	80142b6 <_dtoa_r+0x4de>
 80141c8:	9b02      	ldr	r3, [sp, #8]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	dd36      	ble.n	801423c <_dtoa_r+0x464>
 80141ce:	9b00      	ldr	r3, [sp, #0]
 80141d0:	4650      	mov	r0, sl
 80141d2:	4659      	mov	r1, fp
 80141d4:	1e5f      	subs	r7, r3, #1
 80141d6:	2200      	movs	r2, #0
 80141d8:	4b88      	ldr	r3, [pc, #544]	; (80143fc <_dtoa_r+0x624>)
 80141da:	f7ec fa0d 	bl	80005f8 <__aeabi_dmul>
 80141de:	9e02      	ldr	r6, [sp, #8]
 80141e0:	4682      	mov	sl, r0
 80141e2:	468b      	mov	fp, r1
 80141e4:	3501      	adds	r5, #1
 80141e6:	4628      	mov	r0, r5
 80141e8:	f7ec f99c 	bl	8000524 <__aeabi_i2d>
 80141ec:	4652      	mov	r2, sl
 80141ee:	465b      	mov	r3, fp
 80141f0:	f7ec fa02 	bl	80005f8 <__aeabi_dmul>
 80141f4:	4b82      	ldr	r3, [pc, #520]	; (8014400 <_dtoa_r+0x628>)
 80141f6:	2200      	movs	r2, #0
 80141f8:	f7ec f848 	bl	800028c <__adddf3>
 80141fc:	46d0      	mov	r8, sl
 80141fe:	46d9      	mov	r9, fp
 8014200:	4682      	mov	sl, r0
 8014202:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8014206:	2e00      	cmp	r6, #0
 8014208:	d158      	bne.n	80142bc <_dtoa_r+0x4e4>
 801420a:	4b7e      	ldr	r3, [pc, #504]	; (8014404 <_dtoa_r+0x62c>)
 801420c:	2200      	movs	r2, #0
 801420e:	4640      	mov	r0, r8
 8014210:	4649      	mov	r1, r9
 8014212:	f7ec f839 	bl	8000288 <__aeabi_dsub>
 8014216:	4652      	mov	r2, sl
 8014218:	465b      	mov	r3, fp
 801421a:	4680      	mov	r8, r0
 801421c:	4689      	mov	r9, r1
 801421e:	f7ec fc7b 	bl	8000b18 <__aeabi_dcmpgt>
 8014222:	2800      	cmp	r0, #0
 8014224:	f040 8295 	bne.w	8014752 <_dtoa_r+0x97a>
 8014228:	4652      	mov	r2, sl
 801422a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801422e:	4640      	mov	r0, r8
 8014230:	4649      	mov	r1, r9
 8014232:	f7ec fc53 	bl	8000adc <__aeabi_dcmplt>
 8014236:	2800      	cmp	r0, #0
 8014238:	f040 8289 	bne.w	801474e <_dtoa_r+0x976>
 801423c:	ec5b ab19 	vmov	sl, fp, d9
 8014240:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014242:	2b00      	cmp	r3, #0
 8014244:	f2c0 8148 	blt.w	80144d8 <_dtoa_r+0x700>
 8014248:	9a00      	ldr	r2, [sp, #0]
 801424a:	2a0e      	cmp	r2, #14
 801424c:	f300 8144 	bgt.w	80144d8 <_dtoa_r+0x700>
 8014250:	4b67      	ldr	r3, [pc, #412]	; (80143f0 <_dtoa_r+0x618>)
 8014252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014256:	e9d3 8900 	ldrd	r8, r9, [r3]
 801425a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801425c:	2b00      	cmp	r3, #0
 801425e:	f280 80d5 	bge.w	801440c <_dtoa_r+0x634>
 8014262:	9b03      	ldr	r3, [sp, #12]
 8014264:	2b00      	cmp	r3, #0
 8014266:	f300 80d1 	bgt.w	801440c <_dtoa_r+0x634>
 801426a:	f040 826f 	bne.w	801474c <_dtoa_r+0x974>
 801426e:	4b65      	ldr	r3, [pc, #404]	; (8014404 <_dtoa_r+0x62c>)
 8014270:	2200      	movs	r2, #0
 8014272:	4640      	mov	r0, r8
 8014274:	4649      	mov	r1, r9
 8014276:	f7ec f9bf 	bl	80005f8 <__aeabi_dmul>
 801427a:	4652      	mov	r2, sl
 801427c:	465b      	mov	r3, fp
 801427e:	f7ec fc41 	bl	8000b04 <__aeabi_dcmpge>
 8014282:	9e03      	ldr	r6, [sp, #12]
 8014284:	4637      	mov	r7, r6
 8014286:	2800      	cmp	r0, #0
 8014288:	f040 8245 	bne.w	8014716 <_dtoa_r+0x93e>
 801428c:	9d01      	ldr	r5, [sp, #4]
 801428e:	2331      	movs	r3, #49	; 0x31
 8014290:	f805 3b01 	strb.w	r3, [r5], #1
 8014294:	9b00      	ldr	r3, [sp, #0]
 8014296:	3301      	adds	r3, #1
 8014298:	9300      	str	r3, [sp, #0]
 801429a:	e240      	b.n	801471e <_dtoa_r+0x946>
 801429c:	07f2      	lsls	r2, r6, #31
 801429e:	d505      	bpl.n	80142ac <_dtoa_r+0x4d4>
 80142a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80142a4:	f7ec f9a8 	bl	80005f8 <__aeabi_dmul>
 80142a8:	3501      	adds	r5, #1
 80142aa:	2301      	movs	r3, #1
 80142ac:	1076      	asrs	r6, r6, #1
 80142ae:	3708      	adds	r7, #8
 80142b0:	e777      	b.n	80141a2 <_dtoa_r+0x3ca>
 80142b2:	2502      	movs	r5, #2
 80142b4:	e779      	b.n	80141aa <_dtoa_r+0x3d2>
 80142b6:	9f00      	ldr	r7, [sp, #0]
 80142b8:	9e03      	ldr	r6, [sp, #12]
 80142ba:	e794      	b.n	80141e6 <_dtoa_r+0x40e>
 80142bc:	9901      	ldr	r1, [sp, #4]
 80142be:	4b4c      	ldr	r3, [pc, #304]	; (80143f0 <_dtoa_r+0x618>)
 80142c0:	4431      	add	r1, r6
 80142c2:	910d      	str	r1, [sp, #52]	; 0x34
 80142c4:	9908      	ldr	r1, [sp, #32]
 80142c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80142ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80142ce:	2900      	cmp	r1, #0
 80142d0:	d043      	beq.n	801435a <_dtoa_r+0x582>
 80142d2:	494d      	ldr	r1, [pc, #308]	; (8014408 <_dtoa_r+0x630>)
 80142d4:	2000      	movs	r0, #0
 80142d6:	f7ec fab9 	bl	800084c <__aeabi_ddiv>
 80142da:	4652      	mov	r2, sl
 80142dc:	465b      	mov	r3, fp
 80142de:	f7eb ffd3 	bl	8000288 <__aeabi_dsub>
 80142e2:	9d01      	ldr	r5, [sp, #4]
 80142e4:	4682      	mov	sl, r0
 80142e6:	468b      	mov	fp, r1
 80142e8:	4649      	mov	r1, r9
 80142ea:	4640      	mov	r0, r8
 80142ec:	f7ec fc34 	bl	8000b58 <__aeabi_d2iz>
 80142f0:	4606      	mov	r6, r0
 80142f2:	f7ec f917 	bl	8000524 <__aeabi_i2d>
 80142f6:	4602      	mov	r2, r0
 80142f8:	460b      	mov	r3, r1
 80142fa:	4640      	mov	r0, r8
 80142fc:	4649      	mov	r1, r9
 80142fe:	f7eb ffc3 	bl	8000288 <__aeabi_dsub>
 8014302:	3630      	adds	r6, #48	; 0x30
 8014304:	f805 6b01 	strb.w	r6, [r5], #1
 8014308:	4652      	mov	r2, sl
 801430a:	465b      	mov	r3, fp
 801430c:	4680      	mov	r8, r0
 801430e:	4689      	mov	r9, r1
 8014310:	f7ec fbe4 	bl	8000adc <__aeabi_dcmplt>
 8014314:	2800      	cmp	r0, #0
 8014316:	d163      	bne.n	80143e0 <_dtoa_r+0x608>
 8014318:	4642      	mov	r2, r8
 801431a:	464b      	mov	r3, r9
 801431c:	4936      	ldr	r1, [pc, #216]	; (80143f8 <_dtoa_r+0x620>)
 801431e:	2000      	movs	r0, #0
 8014320:	f7eb ffb2 	bl	8000288 <__aeabi_dsub>
 8014324:	4652      	mov	r2, sl
 8014326:	465b      	mov	r3, fp
 8014328:	f7ec fbd8 	bl	8000adc <__aeabi_dcmplt>
 801432c:	2800      	cmp	r0, #0
 801432e:	f040 80b5 	bne.w	801449c <_dtoa_r+0x6c4>
 8014332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014334:	429d      	cmp	r5, r3
 8014336:	d081      	beq.n	801423c <_dtoa_r+0x464>
 8014338:	4b30      	ldr	r3, [pc, #192]	; (80143fc <_dtoa_r+0x624>)
 801433a:	2200      	movs	r2, #0
 801433c:	4650      	mov	r0, sl
 801433e:	4659      	mov	r1, fp
 8014340:	f7ec f95a 	bl	80005f8 <__aeabi_dmul>
 8014344:	4b2d      	ldr	r3, [pc, #180]	; (80143fc <_dtoa_r+0x624>)
 8014346:	4682      	mov	sl, r0
 8014348:	468b      	mov	fp, r1
 801434a:	4640      	mov	r0, r8
 801434c:	4649      	mov	r1, r9
 801434e:	2200      	movs	r2, #0
 8014350:	f7ec f952 	bl	80005f8 <__aeabi_dmul>
 8014354:	4680      	mov	r8, r0
 8014356:	4689      	mov	r9, r1
 8014358:	e7c6      	b.n	80142e8 <_dtoa_r+0x510>
 801435a:	4650      	mov	r0, sl
 801435c:	4659      	mov	r1, fp
 801435e:	f7ec f94b 	bl	80005f8 <__aeabi_dmul>
 8014362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014364:	9d01      	ldr	r5, [sp, #4]
 8014366:	930f      	str	r3, [sp, #60]	; 0x3c
 8014368:	4682      	mov	sl, r0
 801436a:	468b      	mov	fp, r1
 801436c:	4649      	mov	r1, r9
 801436e:	4640      	mov	r0, r8
 8014370:	f7ec fbf2 	bl	8000b58 <__aeabi_d2iz>
 8014374:	4606      	mov	r6, r0
 8014376:	f7ec f8d5 	bl	8000524 <__aeabi_i2d>
 801437a:	3630      	adds	r6, #48	; 0x30
 801437c:	4602      	mov	r2, r0
 801437e:	460b      	mov	r3, r1
 8014380:	4640      	mov	r0, r8
 8014382:	4649      	mov	r1, r9
 8014384:	f7eb ff80 	bl	8000288 <__aeabi_dsub>
 8014388:	f805 6b01 	strb.w	r6, [r5], #1
 801438c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801438e:	429d      	cmp	r5, r3
 8014390:	4680      	mov	r8, r0
 8014392:	4689      	mov	r9, r1
 8014394:	f04f 0200 	mov.w	r2, #0
 8014398:	d124      	bne.n	80143e4 <_dtoa_r+0x60c>
 801439a:	4b1b      	ldr	r3, [pc, #108]	; (8014408 <_dtoa_r+0x630>)
 801439c:	4650      	mov	r0, sl
 801439e:	4659      	mov	r1, fp
 80143a0:	f7eb ff74 	bl	800028c <__adddf3>
 80143a4:	4602      	mov	r2, r0
 80143a6:	460b      	mov	r3, r1
 80143a8:	4640      	mov	r0, r8
 80143aa:	4649      	mov	r1, r9
 80143ac:	f7ec fbb4 	bl	8000b18 <__aeabi_dcmpgt>
 80143b0:	2800      	cmp	r0, #0
 80143b2:	d173      	bne.n	801449c <_dtoa_r+0x6c4>
 80143b4:	4652      	mov	r2, sl
 80143b6:	465b      	mov	r3, fp
 80143b8:	4913      	ldr	r1, [pc, #76]	; (8014408 <_dtoa_r+0x630>)
 80143ba:	2000      	movs	r0, #0
 80143bc:	f7eb ff64 	bl	8000288 <__aeabi_dsub>
 80143c0:	4602      	mov	r2, r0
 80143c2:	460b      	mov	r3, r1
 80143c4:	4640      	mov	r0, r8
 80143c6:	4649      	mov	r1, r9
 80143c8:	f7ec fb88 	bl	8000adc <__aeabi_dcmplt>
 80143cc:	2800      	cmp	r0, #0
 80143ce:	f43f af35 	beq.w	801423c <_dtoa_r+0x464>
 80143d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80143d4:	1e6b      	subs	r3, r5, #1
 80143d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80143d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80143dc:	2b30      	cmp	r3, #48	; 0x30
 80143de:	d0f8      	beq.n	80143d2 <_dtoa_r+0x5fa>
 80143e0:	9700      	str	r7, [sp, #0]
 80143e2:	e049      	b.n	8014478 <_dtoa_r+0x6a0>
 80143e4:	4b05      	ldr	r3, [pc, #20]	; (80143fc <_dtoa_r+0x624>)
 80143e6:	f7ec f907 	bl	80005f8 <__aeabi_dmul>
 80143ea:	4680      	mov	r8, r0
 80143ec:	4689      	mov	r9, r1
 80143ee:	e7bd      	b.n	801436c <_dtoa_r+0x594>
 80143f0:	0801a050 	.word	0x0801a050
 80143f4:	0801a028 	.word	0x0801a028
 80143f8:	3ff00000 	.word	0x3ff00000
 80143fc:	40240000 	.word	0x40240000
 8014400:	401c0000 	.word	0x401c0000
 8014404:	40140000 	.word	0x40140000
 8014408:	3fe00000 	.word	0x3fe00000
 801440c:	9d01      	ldr	r5, [sp, #4]
 801440e:	4656      	mov	r6, sl
 8014410:	465f      	mov	r7, fp
 8014412:	4642      	mov	r2, r8
 8014414:	464b      	mov	r3, r9
 8014416:	4630      	mov	r0, r6
 8014418:	4639      	mov	r1, r7
 801441a:	f7ec fa17 	bl	800084c <__aeabi_ddiv>
 801441e:	f7ec fb9b 	bl	8000b58 <__aeabi_d2iz>
 8014422:	4682      	mov	sl, r0
 8014424:	f7ec f87e 	bl	8000524 <__aeabi_i2d>
 8014428:	4642      	mov	r2, r8
 801442a:	464b      	mov	r3, r9
 801442c:	f7ec f8e4 	bl	80005f8 <__aeabi_dmul>
 8014430:	4602      	mov	r2, r0
 8014432:	460b      	mov	r3, r1
 8014434:	4630      	mov	r0, r6
 8014436:	4639      	mov	r1, r7
 8014438:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801443c:	f7eb ff24 	bl	8000288 <__aeabi_dsub>
 8014440:	f805 6b01 	strb.w	r6, [r5], #1
 8014444:	9e01      	ldr	r6, [sp, #4]
 8014446:	9f03      	ldr	r7, [sp, #12]
 8014448:	1bae      	subs	r6, r5, r6
 801444a:	42b7      	cmp	r7, r6
 801444c:	4602      	mov	r2, r0
 801444e:	460b      	mov	r3, r1
 8014450:	d135      	bne.n	80144be <_dtoa_r+0x6e6>
 8014452:	f7eb ff1b 	bl	800028c <__adddf3>
 8014456:	4642      	mov	r2, r8
 8014458:	464b      	mov	r3, r9
 801445a:	4606      	mov	r6, r0
 801445c:	460f      	mov	r7, r1
 801445e:	f7ec fb5b 	bl	8000b18 <__aeabi_dcmpgt>
 8014462:	b9d0      	cbnz	r0, 801449a <_dtoa_r+0x6c2>
 8014464:	4642      	mov	r2, r8
 8014466:	464b      	mov	r3, r9
 8014468:	4630      	mov	r0, r6
 801446a:	4639      	mov	r1, r7
 801446c:	f7ec fb2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8014470:	b110      	cbz	r0, 8014478 <_dtoa_r+0x6a0>
 8014472:	f01a 0f01 	tst.w	sl, #1
 8014476:	d110      	bne.n	801449a <_dtoa_r+0x6c2>
 8014478:	4620      	mov	r0, r4
 801447a:	ee18 1a10 	vmov	r1, s16
 801447e:	f000 fc2b 	bl	8014cd8 <_Bfree>
 8014482:	2300      	movs	r3, #0
 8014484:	9800      	ldr	r0, [sp, #0]
 8014486:	702b      	strb	r3, [r5, #0]
 8014488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801448a:	3001      	adds	r0, #1
 801448c:	6018      	str	r0, [r3, #0]
 801448e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014490:	2b00      	cmp	r3, #0
 8014492:	f43f acf1 	beq.w	8013e78 <_dtoa_r+0xa0>
 8014496:	601d      	str	r5, [r3, #0]
 8014498:	e4ee      	b.n	8013e78 <_dtoa_r+0xa0>
 801449a:	9f00      	ldr	r7, [sp, #0]
 801449c:	462b      	mov	r3, r5
 801449e:	461d      	mov	r5, r3
 80144a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80144a4:	2a39      	cmp	r2, #57	; 0x39
 80144a6:	d106      	bne.n	80144b6 <_dtoa_r+0x6de>
 80144a8:	9a01      	ldr	r2, [sp, #4]
 80144aa:	429a      	cmp	r2, r3
 80144ac:	d1f7      	bne.n	801449e <_dtoa_r+0x6c6>
 80144ae:	9901      	ldr	r1, [sp, #4]
 80144b0:	2230      	movs	r2, #48	; 0x30
 80144b2:	3701      	adds	r7, #1
 80144b4:	700a      	strb	r2, [r1, #0]
 80144b6:	781a      	ldrb	r2, [r3, #0]
 80144b8:	3201      	adds	r2, #1
 80144ba:	701a      	strb	r2, [r3, #0]
 80144bc:	e790      	b.n	80143e0 <_dtoa_r+0x608>
 80144be:	4ba6      	ldr	r3, [pc, #664]	; (8014758 <_dtoa_r+0x980>)
 80144c0:	2200      	movs	r2, #0
 80144c2:	f7ec f899 	bl	80005f8 <__aeabi_dmul>
 80144c6:	2200      	movs	r2, #0
 80144c8:	2300      	movs	r3, #0
 80144ca:	4606      	mov	r6, r0
 80144cc:	460f      	mov	r7, r1
 80144ce:	f7ec fafb 	bl	8000ac8 <__aeabi_dcmpeq>
 80144d2:	2800      	cmp	r0, #0
 80144d4:	d09d      	beq.n	8014412 <_dtoa_r+0x63a>
 80144d6:	e7cf      	b.n	8014478 <_dtoa_r+0x6a0>
 80144d8:	9a08      	ldr	r2, [sp, #32]
 80144da:	2a00      	cmp	r2, #0
 80144dc:	f000 80d7 	beq.w	801468e <_dtoa_r+0x8b6>
 80144e0:	9a06      	ldr	r2, [sp, #24]
 80144e2:	2a01      	cmp	r2, #1
 80144e4:	f300 80ba 	bgt.w	801465c <_dtoa_r+0x884>
 80144e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80144ea:	2a00      	cmp	r2, #0
 80144ec:	f000 80b2 	beq.w	8014654 <_dtoa_r+0x87c>
 80144f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80144f4:	9e07      	ldr	r6, [sp, #28]
 80144f6:	9d04      	ldr	r5, [sp, #16]
 80144f8:	9a04      	ldr	r2, [sp, #16]
 80144fa:	441a      	add	r2, r3
 80144fc:	9204      	str	r2, [sp, #16]
 80144fe:	9a05      	ldr	r2, [sp, #20]
 8014500:	2101      	movs	r1, #1
 8014502:	441a      	add	r2, r3
 8014504:	4620      	mov	r0, r4
 8014506:	9205      	str	r2, [sp, #20]
 8014508:	f000 fc9e 	bl	8014e48 <__i2b>
 801450c:	4607      	mov	r7, r0
 801450e:	2d00      	cmp	r5, #0
 8014510:	dd0c      	ble.n	801452c <_dtoa_r+0x754>
 8014512:	9b05      	ldr	r3, [sp, #20]
 8014514:	2b00      	cmp	r3, #0
 8014516:	dd09      	ble.n	801452c <_dtoa_r+0x754>
 8014518:	42ab      	cmp	r3, r5
 801451a:	9a04      	ldr	r2, [sp, #16]
 801451c:	bfa8      	it	ge
 801451e:	462b      	movge	r3, r5
 8014520:	1ad2      	subs	r2, r2, r3
 8014522:	9204      	str	r2, [sp, #16]
 8014524:	9a05      	ldr	r2, [sp, #20]
 8014526:	1aed      	subs	r5, r5, r3
 8014528:	1ad3      	subs	r3, r2, r3
 801452a:	9305      	str	r3, [sp, #20]
 801452c:	9b07      	ldr	r3, [sp, #28]
 801452e:	b31b      	cbz	r3, 8014578 <_dtoa_r+0x7a0>
 8014530:	9b08      	ldr	r3, [sp, #32]
 8014532:	2b00      	cmp	r3, #0
 8014534:	f000 80af 	beq.w	8014696 <_dtoa_r+0x8be>
 8014538:	2e00      	cmp	r6, #0
 801453a:	dd13      	ble.n	8014564 <_dtoa_r+0x78c>
 801453c:	4639      	mov	r1, r7
 801453e:	4632      	mov	r2, r6
 8014540:	4620      	mov	r0, r4
 8014542:	f000 fd41 	bl	8014fc8 <__pow5mult>
 8014546:	ee18 2a10 	vmov	r2, s16
 801454a:	4601      	mov	r1, r0
 801454c:	4607      	mov	r7, r0
 801454e:	4620      	mov	r0, r4
 8014550:	f000 fc90 	bl	8014e74 <__multiply>
 8014554:	ee18 1a10 	vmov	r1, s16
 8014558:	4680      	mov	r8, r0
 801455a:	4620      	mov	r0, r4
 801455c:	f000 fbbc 	bl	8014cd8 <_Bfree>
 8014560:	ee08 8a10 	vmov	s16, r8
 8014564:	9b07      	ldr	r3, [sp, #28]
 8014566:	1b9a      	subs	r2, r3, r6
 8014568:	d006      	beq.n	8014578 <_dtoa_r+0x7a0>
 801456a:	ee18 1a10 	vmov	r1, s16
 801456e:	4620      	mov	r0, r4
 8014570:	f000 fd2a 	bl	8014fc8 <__pow5mult>
 8014574:	ee08 0a10 	vmov	s16, r0
 8014578:	2101      	movs	r1, #1
 801457a:	4620      	mov	r0, r4
 801457c:	f000 fc64 	bl	8014e48 <__i2b>
 8014580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014582:	2b00      	cmp	r3, #0
 8014584:	4606      	mov	r6, r0
 8014586:	f340 8088 	ble.w	801469a <_dtoa_r+0x8c2>
 801458a:	461a      	mov	r2, r3
 801458c:	4601      	mov	r1, r0
 801458e:	4620      	mov	r0, r4
 8014590:	f000 fd1a 	bl	8014fc8 <__pow5mult>
 8014594:	9b06      	ldr	r3, [sp, #24]
 8014596:	2b01      	cmp	r3, #1
 8014598:	4606      	mov	r6, r0
 801459a:	f340 8081 	ble.w	80146a0 <_dtoa_r+0x8c8>
 801459e:	f04f 0800 	mov.w	r8, #0
 80145a2:	6933      	ldr	r3, [r6, #16]
 80145a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80145a8:	6918      	ldr	r0, [r3, #16]
 80145aa:	f000 fbfd 	bl	8014da8 <__hi0bits>
 80145ae:	f1c0 0020 	rsb	r0, r0, #32
 80145b2:	9b05      	ldr	r3, [sp, #20]
 80145b4:	4418      	add	r0, r3
 80145b6:	f010 001f 	ands.w	r0, r0, #31
 80145ba:	f000 8092 	beq.w	80146e2 <_dtoa_r+0x90a>
 80145be:	f1c0 0320 	rsb	r3, r0, #32
 80145c2:	2b04      	cmp	r3, #4
 80145c4:	f340 808a 	ble.w	80146dc <_dtoa_r+0x904>
 80145c8:	f1c0 001c 	rsb	r0, r0, #28
 80145cc:	9b04      	ldr	r3, [sp, #16]
 80145ce:	4403      	add	r3, r0
 80145d0:	9304      	str	r3, [sp, #16]
 80145d2:	9b05      	ldr	r3, [sp, #20]
 80145d4:	4403      	add	r3, r0
 80145d6:	4405      	add	r5, r0
 80145d8:	9305      	str	r3, [sp, #20]
 80145da:	9b04      	ldr	r3, [sp, #16]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	dd07      	ble.n	80145f0 <_dtoa_r+0x818>
 80145e0:	ee18 1a10 	vmov	r1, s16
 80145e4:	461a      	mov	r2, r3
 80145e6:	4620      	mov	r0, r4
 80145e8:	f000 fd48 	bl	801507c <__lshift>
 80145ec:	ee08 0a10 	vmov	s16, r0
 80145f0:	9b05      	ldr	r3, [sp, #20]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	dd05      	ble.n	8014602 <_dtoa_r+0x82a>
 80145f6:	4631      	mov	r1, r6
 80145f8:	461a      	mov	r2, r3
 80145fa:	4620      	mov	r0, r4
 80145fc:	f000 fd3e 	bl	801507c <__lshift>
 8014600:	4606      	mov	r6, r0
 8014602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014604:	2b00      	cmp	r3, #0
 8014606:	d06e      	beq.n	80146e6 <_dtoa_r+0x90e>
 8014608:	ee18 0a10 	vmov	r0, s16
 801460c:	4631      	mov	r1, r6
 801460e:	f000 fda5 	bl	801515c <__mcmp>
 8014612:	2800      	cmp	r0, #0
 8014614:	da67      	bge.n	80146e6 <_dtoa_r+0x90e>
 8014616:	9b00      	ldr	r3, [sp, #0]
 8014618:	3b01      	subs	r3, #1
 801461a:	ee18 1a10 	vmov	r1, s16
 801461e:	9300      	str	r3, [sp, #0]
 8014620:	220a      	movs	r2, #10
 8014622:	2300      	movs	r3, #0
 8014624:	4620      	mov	r0, r4
 8014626:	f000 fb79 	bl	8014d1c <__multadd>
 801462a:	9b08      	ldr	r3, [sp, #32]
 801462c:	ee08 0a10 	vmov	s16, r0
 8014630:	2b00      	cmp	r3, #0
 8014632:	f000 81b1 	beq.w	8014998 <_dtoa_r+0xbc0>
 8014636:	2300      	movs	r3, #0
 8014638:	4639      	mov	r1, r7
 801463a:	220a      	movs	r2, #10
 801463c:	4620      	mov	r0, r4
 801463e:	f000 fb6d 	bl	8014d1c <__multadd>
 8014642:	9b02      	ldr	r3, [sp, #8]
 8014644:	2b00      	cmp	r3, #0
 8014646:	4607      	mov	r7, r0
 8014648:	f300 808e 	bgt.w	8014768 <_dtoa_r+0x990>
 801464c:	9b06      	ldr	r3, [sp, #24]
 801464e:	2b02      	cmp	r3, #2
 8014650:	dc51      	bgt.n	80146f6 <_dtoa_r+0x91e>
 8014652:	e089      	b.n	8014768 <_dtoa_r+0x990>
 8014654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014656:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801465a:	e74b      	b.n	80144f4 <_dtoa_r+0x71c>
 801465c:	9b03      	ldr	r3, [sp, #12]
 801465e:	1e5e      	subs	r6, r3, #1
 8014660:	9b07      	ldr	r3, [sp, #28]
 8014662:	42b3      	cmp	r3, r6
 8014664:	bfbf      	itttt	lt
 8014666:	9b07      	ldrlt	r3, [sp, #28]
 8014668:	9607      	strlt	r6, [sp, #28]
 801466a:	1af2      	sublt	r2, r6, r3
 801466c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801466e:	bfb6      	itet	lt
 8014670:	189b      	addlt	r3, r3, r2
 8014672:	1b9e      	subge	r6, r3, r6
 8014674:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014676:	9b03      	ldr	r3, [sp, #12]
 8014678:	bfb8      	it	lt
 801467a:	2600      	movlt	r6, #0
 801467c:	2b00      	cmp	r3, #0
 801467e:	bfb7      	itett	lt
 8014680:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8014684:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014688:	1a9d      	sublt	r5, r3, r2
 801468a:	2300      	movlt	r3, #0
 801468c:	e734      	b.n	80144f8 <_dtoa_r+0x720>
 801468e:	9e07      	ldr	r6, [sp, #28]
 8014690:	9d04      	ldr	r5, [sp, #16]
 8014692:	9f08      	ldr	r7, [sp, #32]
 8014694:	e73b      	b.n	801450e <_dtoa_r+0x736>
 8014696:	9a07      	ldr	r2, [sp, #28]
 8014698:	e767      	b.n	801456a <_dtoa_r+0x792>
 801469a:	9b06      	ldr	r3, [sp, #24]
 801469c:	2b01      	cmp	r3, #1
 801469e:	dc18      	bgt.n	80146d2 <_dtoa_r+0x8fa>
 80146a0:	f1ba 0f00 	cmp.w	sl, #0
 80146a4:	d115      	bne.n	80146d2 <_dtoa_r+0x8fa>
 80146a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80146aa:	b993      	cbnz	r3, 80146d2 <_dtoa_r+0x8fa>
 80146ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80146b0:	0d1b      	lsrs	r3, r3, #20
 80146b2:	051b      	lsls	r3, r3, #20
 80146b4:	b183      	cbz	r3, 80146d8 <_dtoa_r+0x900>
 80146b6:	9b04      	ldr	r3, [sp, #16]
 80146b8:	3301      	adds	r3, #1
 80146ba:	9304      	str	r3, [sp, #16]
 80146bc:	9b05      	ldr	r3, [sp, #20]
 80146be:	3301      	adds	r3, #1
 80146c0:	9305      	str	r3, [sp, #20]
 80146c2:	f04f 0801 	mov.w	r8, #1
 80146c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	f47f af6a 	bne.w	80145a2 <_dtoa_r+0x7ca>
 80146ce:	2001      	movs	r0, #1
 80146d0:	e76f      	b.n	80145b2 <_dtoa_r+0x7da>
 80146d2:	f04f 0800 	mov.w	r8, #0
 80146d6:	e7f6      	b.n	80146c6 <_dtoa_r+0x8ee>
 80146d8:	4698      	mov	r8, r3
 80146da:	e7f4      	b.n	80146c6 <_dtoa_r+0x8ee>
 80146dc:	f43f af7d 	beq.w	80145da <_dtoa_r+0x802>
 80146e0:	4618      	mov	r0, r3
 80146e2:	301c      	adds	r0, #28
 80146e4:	e772      	b.n	80145cc <_dtoa_r+0x7f4>
 80146e6:	9b03      	ldr	r3, [sp, #12]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	dc37      	bgt.n	801475c <_dtoa_r+0x984>
 80146ec:	9b06      	ldr	r3, [sp, #24]
 80146ee:	2b02      	cmp	r3, #2
 80146f0:	dd34      	ble.n	801475c <_dtoa_r+0x984>
 80146f2:	9b03      	ldr	r3, [sp, #12]
 80146f4:	9302      	str	r3, [sp, #8]
 80146f6:	9b02      	ldr	r3, [sp, #8]
 80146f8:	b96b      	cbnz	r3, 8014716 <_dtoa_r+0x93e>
 80146fa:	4631      	mov	r1, r6
 80146fc:	2205      	movs	r2, #5
 80146fe:	4620      	mov	r0, r4
 8014700:	f000 fb0c 	bl	8014d1c <__multadd>
 8014704:	4601      	mov	r1, r0
 8014706:	4606      	mov	r6, r0
 8014708:	ee18 0a10 	vmov	r0, s16
 801470c:	f000 fd26 	bl	801515c <__mcmp>
 8014710:	2800      	cmp	r0, #0
 8014712:	f73f adbb 	bgt.w	801428c <_dtoa_r+0x4b4>
 8014716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014718:	9d01      	ldr	r5, [sp, #4]
 801471a:	43db      	mvns	r3, r3
 801471c:	9300      	str	r3, [sp, #0]
 801471e:	f04f 0800 	mov.w	r8, #0
 8014722:	4631      	mov	r1, r6
 8014724:	4620      	mov	r0, r4
 8014726:	f000 fad7 	bl	8014cd8 <_Bfree>
 801472a:	2f00      	cmp	r7, #0
 801472c:	f43f aea4 	beq.w	8014478 <_dtoa_r+0x6a0>
 8014730:	f1b8 0f00 	cmp.w	r8, #0
 8014734:	d005      	beq.n	8014742 <_dtoa_r+0x96a>
 8014736:	45b8      	cmp	r8, r7
 8014738:	d003      	beq.n	8014742 <_dtoa_r+0x96a>
 801473a:	4641      	mov	r1, r8
 801473c:	4620      	mov	r0, r4
 801473e:	f000 facb 	bl	8014cd8 <_Bfree>
 8014742:	4639      	mov	r1, r7
 8014744:	4620      	mov	r0, r4
 8014746:	f000 fac7 	bl	8014cd8 <_Bfree>
 801474a:	e695      	b.n	8014478 <_dtoa_r+0x6a0>
 801474c:	2600      	movs	r6, #0
 801474e:	4637      	mov	r7, r6
 8014750:	e7e1      	b.n	8014716 <_dtoa_r+0x93e>
 8014752:	9700      	str	r7, [sp, #0]
 8014754:	4637      	mov	r7, r6
 8014756:	e599      	b.n	801428c <_dtoa_r+0x4b4>
 8014758:	40240000 	.word	0x40240000
 801475c:	9b08      	ldr	r3, [sp, #32]
 801475e:	2b00      	cmp	r3, #0
 8014760:	f000 80ca 	beq.w	80148f8 <_dtoa_r+0xb20>
 8014764:	9b03      	ldr	r3, [sp, #12]
 8014766:	9302      	str	r3, [sp, #8]
 8014768:	2d00      	cmp	r5, #0
 801476a:	dd05      	ble.n	8014778 <_dtoa_r+0x9a0>
 801476c:	4639      	mov	r1, r7
 801476e:	462a      	mov	r2, r5
 8014770:	4620      	mov	r0, r4
 8014772:	f000 fc83 	bl	801507c <__lshift>
 8014776:	4607      	mov	r7, r0
 8014778:	f1b8 0f00 	cmp.w	r8, #0
 801477c:	d05b      	beq.n	8014836 <_dtoa_r+0xa5e>
 801477e:	6879      	ldr	r1, [r7, #4]
 8014780:	4620      	mov	r0, r4
 8014782:	f000 fa69 	bl	8014c58 <_Balloc>
 8014786:	4605      	mov	r5, r0
 8014788:	b928      	cbnz	r0, 8014796 <_dtoa_r+0x9be>
 801478a:	4b87      	ldr	r3, [pc, #540]	; (80149a8 <_dtoa_r+0xbd0>)
 801478c:	4602      	mov	r2, r0
 801478e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014792:	f7ff bb3b 	b.w	8013e0c <_dtoa_r+0x34>
 8014796:	693a      	ldr	r2, [r7, #16]
 8014798:	3202      	adds	r2, #2
 801479a:	0092      	lsls	r2, r2, #2
 801479c:	f107 010c 	add.w	r1, r7, #12
 80147a0:	300c      	adds	r0, #12
 80147a2:	f7fe fb92 	bl	8012eca <memcpy>
 80147a6:	2201      	movs	r2, #1
 80147a8:	4629      	mov	r1, r5
 80147aa:	4620      	mov	r0, r4
 80147ac:	f000 fc66 	bl	801507c <__lshift>
 80147b0:	9b01      	ldr	r3, [sp, #4]
 80147b2:	f103 0901 	add.w	r9, r3, #1
 80147b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80147ba:	4413      	add	r3, r2
 80147bc:	9305      	str	r3, [sp, #20]
 80147be:	f00a 0301 	and.w	r3, sl, #1
 80147c2:	46b8      	mov	r8, r7
 80147c4:	9304      	str	r3, [sp, #16]
 80147c6:	4607      	mov	r7, r0
 80147c8:	4631      	mov	r1, r6
 80147ca:	ee18 0a10 	vmov	r0, s16
 80147ce:	f7ff fa75 	bl	8013cbc <quorem>
 80147d2:	4641      	mov	r1, r8
 80147d4:	9002      	str	r0, [sp, #8]
 80147d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80147da:	ee18 0a10 	vmov	r0, s16
 80147de:	f000 fcbd 	bl	801515c <__mcmp>
 80147e2:	463a      	mov	r2, r7
 80147e4:	9003      	str	r0, [sp, #12]
 80147e6:	4631      	mov	r1, r6
 80147e8:	4620      	mov	r0, r4
 80147ea:	f000 fcd3 	bl	8015194 <__mdiff>
 80147ee:	68c2      	ldr	r2, [r0, #12]
 80147f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80147f4:	4605      	mov	r5, r0
 80147f6:	bb02      	cbnz	r2, 801483a <_dtoa_r+0xa62>
 80147f8:	4601      	mov	r1, r0
 80147fa:	ee18 0a10 	vmov	r0, s16
 80147fe:	f000 fcad 	bl	801515c <__mcmp>
 8014802:	4602      	mov	r2, r0
 8014804:	4629      	mov	r1, r5
 8014806:	4620      	mov	r0, r4
 8014808:	9207      	str	r2, [sp, #28]
 801480a:	f000 fa65 	bl	8014cd8 <_Bfree>
 801480e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014812:	ea43 0102 	orr.w	r1, r3, r2
 8014816:	9b04      	ldr	r3, [sp, #16]
 8014818:	430b      	orrs	r3, r1
 801481a:	464d      	mov	r5, r9
 801481c:	d10f      	bne.n	801483e <_dtoa_r+0xa66>
 801481e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014822:	d02a      	beq.n	801487a <_dtoa_r+0xaa2>
 8014824:	9b03      	ldr	r3, [sp, #12]
 8014826:	2b00      	cmp	r3, #0
 8014828:	dd02      	ble.n	8014830 <_dtoa_r+0xa58>
 801482a:	9b02      	ldr	r3, [sp, #8]
 801482c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014830:	f88b a000 	strb.w	sl, [fp]
 8014834:	e775      	b.n	8014722 <_dtoa_r+0x94a>
 8014836:	4638      	mov	r0, r7
 8014838:	e7ba      	b.n	80147b0 <_dtoa_r+0x9d8>
 801483a:	2201      	movs	r2, #1
 801483c:	e7e2      	b.n	8014804 <_dtoa_r+0xa2c>
 801483e:	9b03      	ldr	r3, [sp, #12]
 8014840:	2b00      	cmp	r3, #0
 8014842:	db04      	blt.n	801484e <_dtoa_r+0xa76>
 8014844:	9906      	ldr	r1, [sp, #24]
 8014846:	430b      	orrs	r3, r1
 8014848:	9904      	ldr	r1, [sp, #16]
 801484a:	430b      	orrs	r3, r1
 801484c:	d122      	bne.n	8014894 <_dtoa_r+0xabc>
 801484e:	2a00      	cmp	r2, #0
 8014850:	ddee      	ble.n	8014830 <_dtoa_r+0xa58>
 8014852:	ee18 1a10 	vmov	r1, s16
 8014856:	2201      	movs	r2, #1
 8014858:	4620      	mov	r0, r4
 801485a:	f000 fc0f 	bl	801507c <__lshift>
 801485e:	4631      	mov	r1, r6
 8014860:	ee08 0a10 	vmov	s16, r0
 8014864:	f000 fc7a 	bl	801515c <__mcmp>
 8014868:	2800      	cmp	r0, #0
 801486a:	dc03      	bgt.n	8014874 <_dtoa_r+0xa9c>
 801486c:	d1e0      	bne.n	8014830 <_dtoa_r+0xa58>
 801486e:	f01a 0f01 	tst.w	sl, #1
 8014872:	d0dd      	beq.n	8014830 <_dtoa_r+0xa58>
 8014874:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014878:	d1d7      	bne.n	801482a <_dtoa_r+0xa52>
 801487a:	2339      	movs	r3, #57	; 0x39
 801487c:	f88b 3000 	strb.w	r3, [fp]
 8014880:	462b      	mov	r3, r5
 8014882:	461d      	mov	r5, r3
 8014884:	3b01      	subs	r3, #1
 8014886:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801488a:	2a39      	cmp	r2, #57	; 0x39
 801488c:	d071      	beq.n	8014972 <_dtoa_r+0xb9a>
 801488e:	3201      	adds	r2, #1
 8014890:	701a      	strb	r2, [r3, #0]
 8014892:	e746      	b.n	8014722 <_dtoa_r+0x94a>
 8014894:	2a00      	cmp	r2, #0
 8014896:	dd07      	ble.n	80148a8 <_dtoa_r+0xad0>
 8014898:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801489c:	d0ed      	beq.n	801487a <_dtoa_r+0xaa2>
 801489e:	f10a 0301 	add.w	r3, sl, #1
 80148a2:	f88b 3000 	strb.w	r3, [fp]
 80148a6:	e73c      	b.n	8014722 <_dtoa_r+0x94a>
 80148a8:	9b05      	ldr	r3, [sp, #20]
 80148aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80148ae:	4599      	cmp	r9, r3
 80148b0:	d047      	beq.n	8014942 <_dtoa_r+0xb6a>
 80148b2:	ee18 1a10 	vmov	r1, s16
 80148b6:	2300      	movs	r3, #0
 80148b8:	220a      	movs	r2, #10
 80148ba:	4620      	mov	r0, r4
 80148bc:	f000 fa2e 	bl	8014d1c <__multadd>
 80148c0:	45b8      	cmp	r8, r7
 80148c2:	ee08 0a10 	vmov	s16, r0
 80148c6:	f04f 0300 	mov.w	r3, #0
 80148ca:	f04f 020a 	mov.w	r2, #10
 80148ce:	4641      	mov	r1, r8
 80148d0:	4620      	mov	r0, r4
 80148d2:	d106      	bne.n	80148e2 <_dtoa_r+0xb0a>
 80148d4:	f000 fa22 	bl	8014d1c <__multadd>
 80148d8:	4680      	mov	r8, r0
 80148da:	4607      	mov	r7, r0
 80148dc:	f109 0901 	add.w	r9, r9, #1
 80148e0:	e772      	b.n	80147c8 <_dtoa_r+0x9f0>
 80148e2:	f000 fa1b 	bl	8014d1c <__multadd>
 80148e6:	4639      	mov	r1, r7
 80148e8:	4680      	mov	r8, r0
 80148ea:	2300      	movs	r3, #0
 80148ec:	220a      	movs	r2, #10
 80148ee:	4620      	mov	r0, r4
 80148f0:	f000 fa14 	bl	8014d1c <__multadd>
 80148f4:	4607      	mov	r7, r0
 80148f6:	e7f1      	b.n	80148dc <_dtoa_r+0xb04>
 80148f8:	9b03      	ldr	r3, [sp, #12]
 80148fa:	9302      	str	r3, [sp, #8]
 80148fc:	9d01      	ldr	r5, [sp, #4]
 80148fe:	ee18 0a10 	vmov	r0, s16
 8014902:	4631      	mov	r1, r6
 8014904:	f7ff f9da 	bl	8013cbc <quorem>
 8014908:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801490c:	9b01      	ldr	r3, [sp, #4]
 801490e:	f805 ab01 	strb.w	sl, [r5], #1
 8014912:	1aea      	subs	r2, r5, r3
 8014914:	9b02      	ldr	r3, [sp, #8]
 8014916:	4293      	cmp	r3, r2
 8014918:	dd09      	ble.n	801492e <_dtoa_r+0xb56>
 801491a:	ee18 1a10 	vmov	r1, s16
 801491e:	2300      	movs	r3, #0
 8014920:	220a      	movs	r2, #10
 8014922:	4620      	mov	r0, r4
 8014924:	f000 f9fa 	bl	8014d1c <__multadd>
 8014928:	ee08 0a10 	vmov	s16, r0
 801492c:	e7e7      	b.n	80148fe <_dtoa_r+0xb26>
 801492e:	9b02      	ldr	r3, [sp, #8]
 8014930:	2b00      	cmp	r3, #0
 8014932:	bfc8      	it	gt
 8014934:	461d      	movgt	r5, r3
 8014936:	9b01      	ldr	r3, [sp, #4]
 8014938:	bfd8      	it	le
 801493a:	2501      	movle	r5, #1
 801493c:	441d      	add	r5, r3
 801493e:	f04f 0800 	mov.w	r8, #0
 8014942:	ee18 1a10 	vmov	r1, s16
 8014946:	2201      	movs	r2, #1
 8014948:	4620      	mov	r0, r4
 801494a:	f000 fb97 	bl	801507c <__lshift>
 801494e:	4631      	mov	r1, r6
 8014950:	ee08 0a10 	vmov	s16, r0
 8014954:	f000 fc02 	bl	801515c <__mcmp>
 8014958:	2800      	cmp	r0, #0
 801495a:	dc91      	bgt.n	8014880 <_dtoa_r+0xaa8>
 801495c:	d102      	bne.n	8014964 <_dtoa_r+0xb8c>
 801495e:	f01a 0f01 	tst.w	sl, #1
 8014962:	d18d      	bne.n	8014880 <_dtoa_r+0xaa8>
 8014964:	462b      	mov	r3, r5
 8014966:	461d      	mov	r5, r3
 8014968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801496c:	2a30      	cmp	r2, #48	; 0x30
 801496e:	d0fa      	beq.n	8014966 <_dtoa_r+0xb8e>
 8014970:	e6d7      	b.n	8014722 <_dtoa_r+0x94a>
 8014972:	9a01      	ldr	r2, [sp, #4]
 8014974:	429a      	cmp	r2, r3
 8014976:	d184      	bne.n	8014882 <_dtoa_r+0xaaa>
 8014978:	9b00      	ldr	r3, [sp, #0]
 801497a:	3301      	adds	r3, #1
 801497c:	9300      	str	r3, [sp, #0]
 801497e:	2331      	movs	r3, #49	; 0x31
 8014980:	7013      	strb	r3, [r2, #0]
 8014982:	e6ce      	b.n	8014722 <_dtoa_r+0x94a>
 8014984:	4b09      	ldr	r3, [pc, #36]	; (80149ac <_dtoa_r+0xbd4>)
 8014986:	f7ff ba95 	b.w	8013eb4 <_dtoa_r+0xdc>
 801498a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801498c:	2b00      	cmp	r3, #0
 801498e:	f47f aa6e 	bne.w	8013e6e <_dtoa_r+0x96>
 8014992:	4b07      	ldr	r3, [pc, #28]	; (80149b0 <_dtoa_r+0xbd8>)
 8014994:	f7ff ba8e 	b.w	8013eb4 <_dtoa_r+0xdc>
 8014998:	9b02      	ldr	r3, [sp, #8]
 801499a:	2b00      	cmp	r3, #0
 801499c:	dcae      	bgt.n	80148fc <_dtoa_r+0xb24>
 801499e:	9b06      	ldr	r3, [sp, #24]
 80149a0:	2b02      	cmp	r3, #2
 80149a2:	f73f aea8 	bgt.w	80146f6 <_dtoa_r+0x91e>
 80149a6:	e7a9      	b.n	80148fc <_dtoa_r+0xb24>
 80149a8:	08019fb7 	.word	0x08019fb7
 80149ac:	08019f14 	.word	0x08019f14
 80149b0:	08019f38 	.word	0x08019f38

080149b4 <__sflush_r>:
 80149b4:	898a      	ldrh	r2, [r1, #12]
 80149b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149ba:	4605      	mov	r5, r0
 80149bc:	0710      	lsls	r0, r2, #28
 80149be:	460c      	mov	r4, r1
 80149c0:	d458      	bmi.n	8014a74 <__sflush_r+0xc0>
 80149c2:	684b      	ldr	r3, [r1, #4]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	dc05      	bgt.n	80149d4 <__sflush_r+0x20>
 80149c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	dc02      	bgt.n	80149d4 <__sflush_r+0x20>
 80149ce:	2000      	movs	r0, #0
 80149d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80149d6:	2e00      	cmp	r6, #0
 80149d8:	d0f9      	beq.n	80149ce <__sflush_r+0x1a>
 80149da:	2300      	movs	r3, #0
 80149dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80149e0:	682f      	ldr	r7, [r5, #0]
 80149e2:	602b      	str	r3, [r5, #0]
 80149e4:	d032      	beq.n	8014a4c <__sflush_r+0x98>
 80149e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80149e8:	89a3      	ldrh	r3, [r4, #12]
 80149ea:	075a      	lsls	r2, r3, #29
 80149ec:	d505      	bpl.n	80149fa <__sflush_r+0x46>
 80149ee:	6863      	ldr	r3, [r4, #4]
 80149f0:	1ac0      	subs	r0, r0, r3
 80149f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80149f4:	b10b      	cbz	r3, 80149fa <__sflush_r+0x46>
 80149f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80149f8:	1ac0      	subs	r0, r0, r3
 80149fa:	2300      	movs	r3, #0
 80149fc:	4602      	mov	r2, r0
 80149fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a00:	6a21      	ldr	r1, [r4, #32]
 8014a02:	4628      	mov	r0, r5
 8014a04:	47b0      	blx	r6
 8014a06:	1c43      	adds	r3, r0, #1
 8014a08:	89a3      	ldrh	r3, [r4, #12]
 8014a0a:	d106      	bne.n	8014a1a <__sflush_r+0x66>
 8014a0c:	6829      	ldr	r1, [r5, #0]
 8014a0e:	291d      	cmp	r1, #29
 8014a10:	d82c      	bhi.n	8014a6c <__sflush_r+0xb8>
 8014a12:	4a2a      	ldr	r2, [pc, #168]	; (8014abc <__sflush_r+0x108>)
 8014a14:	40ca      	lsrs	r2, r1
 8014a16:	07d6      	lsls	r6, r2, #31
 8014a18:	d528      	bpl.n	8014a6c <__sflush_r+0xb8>
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	6062      	str	r2, [r4, #4]
 8014a1e:	04d9      	lsls	r1, r3, #19
 8014a20:	6922      	ldr	r2, [r4, #16]
 8014a22:	6022      	str	r2, [r4, #0]
 8014a24:	d504      	bpl.n	8014a30 <__sflush_r+0x7c>
 8014a26:	1c42      	adds	r2, r0, #1
 8014a28:	d101      	bne.n	8014a2e <__sflush_r+0x7a>
 8014a2a:	682b      	ldr	r3, [r5, #0]
 8014a2c:	b903      	cbnz	r3, 8014a30 <__sflush_r+0x7c>
 8014a2e:	6560      	str	r0, [r4, #84]	; 0x54
 8014a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a32:	602f      	str	r7, [r5, #0]
 8014a34:	2900      	cmp	r1, #0
 8014a36:	d0ca      	beq.n	80149ce <__sflush_r+0x1a>
 8014a38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a3c:	4299      	cmp	r1, r3
 8014a3e:	d002      	beq.n	8014a46 <__sflush_r+0x92>
 8014a40:	4628      	mov	r0, r5
 8014a42:	f000 fca3 	bl	801538c <_free_r>
 8014a46:	2000      	movs	r0, #0
 8014a48:	6360      	str	r0, [r4, #52]	; 0x34
 8014a4a:	e7c1      	b.n	80149d0 <__sflush_r+0x1c>
 8014a4c:	6a21      	ldr	r1, [r4, #32]
 8014a4e:	2301      	movs	r3, #1
 8014a50:	4628      	mov	r0, r5
 8014a52:	47b0      	blx	r6
 8014a54:	1c41      	adds	r1, r0, #1
 8014a56:	d1c7      	bne.n	80149e8 <__sflush_r+0x34>
 8014a58:	682b      	ldr	r3, [r5, #0]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d0c4      	beq.n	80149e8 <__sflush_r+0x34>
 8014a5e:	2b1d      	cmp	r3, #29
 8014a60:	d001      	beq.n	8014a66 <__sflush_r+0xb2>
 8014a62:	2b16      	cmp	r3, #22
 8014a64:	d101      	bne.n	8014a6a <__sflush_r+0xb6>
 8014a66:	602f      	str	r7, [r5, #0]
 8014a68:	e7b1      	b.n	80149ce <__sflush_r+0x1a>
 8014a6a:	89a3      	ldrh	r3, [r4, #12]
 8014a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a70:	81a3      	strh	r3, [r4, #12]
 8014a72:	e7ad      	b.n	80149d0 <__sflush_r+0x1c>
 8014a74:	690f      	ldr	r7, [r1, #16]
 8014a76:	2f00      	cmp	r7, #0
 8014a78:	d0a9      	beq.n	80149ce <__sflush_r+0x1a>
 8014a7a:	0793      	lsls	r3, r2, #30
 8014a7c:	680e      	ldr	r6, [r1, #0]
 8014a7e:	bf08      	it	eq
 8014a80:	694b      	ldreq	r3, [r1, #20]
 8014a82:	600f      	str	r7, [r1, #0]
 8014a84:	bf18      	it	ne
 8014a86:	2300      	movne	r3, #0
 8014a88:	eba6 0807 	sub.w	r8, r6, r7
 8014a8c:	608b      	str	r3, [r1, #8]
 8014a8e:	f1b8 0f00 	cmp.w	r8, #0
 8014a92:	dd9c      	ble.n	80149ce <__sflush_r+0x1a>
 8014a94:	6a21      	ldr	r1, [r4, #32]
 8014a96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014a98:	4643      	mov	r3, r8
 8014a9a:	463a      	mov	r2, r7
 8014a9c:	4628      	mov	r0, r5
 8014a9e:	47b0      	blx	r6
 8014aa0:	2800      	cmp	r0, #0
 8014aa2:	dc06      	bgt.n	8014ab2 <__sflush_r+0xfe>
 8014aa4:	89a3      	ldrh	r3, [r4, #12]
 8014aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014aaa:	81a3      	strh	r3, [r4, #12]
 8014aac:	f04f 30ff 	mov.w	r0, #4294967295
 8014ab0:	e78e      	b.n	80149d0 <__sflush_r+0x1c>
 8014ab2:	4407      	add	r7, r0
 8014ab4:	eba8 0800 	sub.w	r8, r8, r0
 8014ab8:	e7e9      	b.n	8014a8e <__sflush_r+0xda>
 8014aba:	bf00      	nop
 8014abc:	20400001 	.word	0x20400001

08014ac0 <_fflush_r>:
 8014ac0:	b538      	push	{r3, r4, r5, lr}
 8014ac2:	690b      	ldr	r3, [r1, #16]
 8014ac4:	4605      	mov	r5, r0
 8014ac6:	460c      	mov	r4, r1
 8014ac8:	b913      	cbnz	r3, 8014ad0 <_fflush_r+0x10>
 8014aca:	2500      	movs	r5, #0
 8014acc:	4628      	mov	r0, r5
 8014ace:	bd38      	pop	{r3, r4, r5, pc}
 8014ad0:	b118      	cbz	r0, 8014ada <_fflush_r+0x1a>
 8014ad2:	6983      	ldr	r3, [r0, #24]
 8014ad4:	b90b      	cbnz	r3, 8014ada <_fflush_r+0x1a>
 8014ad6:	f7fe f933 	bl	8012d40 <__sinit>
 8014ada:	4b14      	ldr	r3, [pc, #80]	; (8014b2c <_fflush_r+0x6c>)
 8014adc:	429c      	cmp	r4, r3
 8014ade:	d11b      	bne.n	8014b18 <_fflush_r+0x58>
 8014ae0:	686c      	ldr	r4, [r5, #4]
 8014ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d0ef      	beq.n	8014aca <_fflush_r+0xa>
 8014aea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014aec:	07d0      	lsls	r0, r2, #31
 8014aee:	d404      	bmi.n	8014afa <_fflush_r+0x3a>
 8014af0:	0599      	lsls	r1, r3, #22
 8014af2:	d402      	bmi.n	8014afa <_fflush_r+0x3a>
 8014af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014af6:	f7fe f9e6 	bl	8012ec6 <__retarget_lock_acquire_recursive>
 8014afa:	4628      	mov	r0, r5
 8014afc:	4621      	mov	r1, r4
 8014afe:	f7ff ff59 	bl	80149b4 <__sflush_r>
 8014b02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b04:	07da      	lsls	r2, r3, #31
 8014b06:	4605      	mov	r5, r0
 8014b08:	d4e0      	bmi.n	8014acc <_fflush_r+0xc>
 8014b0a:	89a3      	ldrh	r3, [r4, #12]
 8014b0c:	059b      	lsls	r3, r3, #22
 8014b0e:	d4dd      	bmi.n	8014acc <_fflush_r+0xc>
 8014b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b12:	f7fe f9d9 	bl	8012ec8 <__retarget_lock_release_recursive>
 8014b16:	e7d9      	b.n	8014acc <_fflush_r+0xc>
 8014b18:	4b05      	ldr	r3, [pc, #20]	; (8014b30 <_fflush_r+0x70>)
 8014b1a:	429c      	cmp	r4, r3
 8014b1c:	d101      	bne.n	8014b22 <_fflush_r+0x62>
 8014b1e:	68ac      	ldr	r4, [r5, #8]
 8014b20:	e7df      	b.n	8014ae2 <_fflush_r+0x22>
 8014b22:	4b04      	ldr	r3, [pc, #16]	; (8014b34 <_fflush_r+0x74>)
 8014b24:	429c      	cmp	r4, r3
 8014b26:	bf08      	it	eq
 8014b28:	68ec      	ldreq	r4, [r5, #12]
 8014b2a:	e7da      	b.n	8014ae2 <_fflush_r+0x22>
 8014b2c:	08019ec0 	.word	0x08019ec0
 8014b30:	08019ee0 	.word	0x08019ee0
 8014b34:	08019ea0 	.word	0x08019ea0

08014b38 <_localeconv_r>:
 8014b38:	4800      	ldr	r0, [pc, #0]	; (8014b3c <_localeconv_r+0x4>)
 8014b3a:	4770      	bx	lr
 8014b3c:	200001d4 	.word	0x200001d4

08014b40 <_lseek_r>:
 8014b40:	b538      	push	{r3, r4, r5, lr}
 8014b42:	4d07      	ldr	r5, [pc, #28]	; (8014b60 <_lseek_r+0x20>)
 8014b44:	4604      	mov	r4, r0
 8014b46:	4608      	mov	r0, r1
 8014b48:	4611      	mov	r1, r2
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	602a      	str	r2, [r5, #0]
 8014b4e:	461a      	mov	r2, r3
 8014b50:	f7fd fe89 	bl	8012866 <_lseek>
 8014b54:	1c43      	adds	r3, r0, #1
 8014b56:	d102      	bne.n	8014b5e <_lseek_r+0x1e>
 8014b58:	682b      	ldr	r3, [r5, #0]
 8014b5a:	b103      	cbz	r3, 8014b5e <_lseek_r+0x1e>
 8014b5c:	6023      	str	r3, [r4, #0]
 8014b5e:	bd38      	pop	{r3, r4, r5, pc}
 8014b60:	20005778 	.word	0x20005778

08014b64 <__swhatbuf_r>:
 8014b64:	b570      	push	{r4, r5, r6, lr}
 8014b66:	460e      	mov	r6, r1
 8014b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b6c:	2900      	cmp	r1, #0
 8014b6e:	b096      	sub	sp, #88	; 0x58
 8014b70:	4614      	mov	r4, r2
 8014b72:	461d      	mov	r5, r3
 8014b74:	da08      	bge.n	8014b88 <__swhatbuf_r+0x24>
 8014b76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	602a      	str	r2, [r5, #0]
 8014b7e:	061a      	lsls	r2, r3, #24
 8014b80:	d410      	bmi.n	8014ba4 <__swhatbuf_r+0x40>
 8014b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014b86:	e00e      	b.n	8014ba6 <__swhatbuf_r+0x42>
 8014b88:	466a      	mov	r2, sp
 8014b8a:	f000 ff43 	bl	8015a14 <_fstat_r>
 8014b8e:	2800      	cmp	r0, #0
 8014b90:	dbf1      	blt.n	8014b76 <__swhatbuf_r+0x12>
 8014b92:	9a01      	ldr	r2, [sp, #4]
 8014b94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014b98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014b9c:	425a      	negs	r2, r3
 8014b9e:	415a      	adcs	r2, r3
 8014ba0:	602a      	str	r2, [r5, #0]
 8014ba2:	e7ee      	b.n	8014b82 <__swhatbuf_r+0x1e>
 8014ba4:	2340      	movs	r3, #64	; 0x40
 8014ba6:	2000      	movs	r0, #0
 8014ba8:	6023      	str	r3, [r4, #0]
 8014baa:	b016      	add	sp, #88	; 0x58
 8014bac:	bd70      	pop	{r4, r5, r6, pc}
	...

08014bb0 <__smakebuf_r>:
 8014bb0:	898b      	ldrh	r3, [r1, #12]
 8014bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014bb4:	079d      	lsls	r5, r3, #30
 8014bb6:	4606      	mov	r6, r0
 8014bb8:	460c      	mov	r4, r1
 8014bba:	d507      	bpl.n	8014bcc <__smakebuf_r+0x1c>
 8014bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014bc0:	6023      	str	r3, [r4, #0]
 8014bc2:	6123      	str	r3, [r4, #16]
 8014bc4:	2301      	movs	r3, #1
 8014bc6:	6163      	str	r3, [r4, #20]
 8014bc8:	b002      	add	sp, #8
 8014bca:	bd70      	pop	{r4, r5, r6, pc}
 8014bcc:	ab01      	add	r3, sp, #4
 8014bce:	466a      	mov	r2, sp
 8014bd0:	f7ff ffc8 	bl	8014b64 <__swhatbuf_r>
 8014bd4:	9900      	ldr	r1, [sp, #0]
 8014bd6:	4605      	mov	r5, r0
 8014bd8:	4630      	mov	r0, r6
 8014bda:	f7fe f9ad 	bl	8012f38 <_malloc_r>
 8014bde:	b948      	cbnz	r0, 8014bf4 <__smakebuf_r+0x44>
 8014be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014be4:	059a      	lsls	r2, r3, #22
 8014be6:	d4ef      	bmi.n	8014bc8 <__smakebuf_r+0x18>
 8014be8:	f023 0303 	bic.w	r3, r3, #3
 8014bec:	f043 0302 	orr.w	r3, r3, #2
 8014bf0:	81a3      	strh	r3, [r4, #12]
 8014bf2:	e7e3      	b.n	8014bbc <__smakebuf_r+0xc>
 8014bf4:	4b0d      	ldr	r3, [pc, #52]	; (8014c2c <__smakebuf_r+0x7c>)
 8014bf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8014bf8:	89a3      	ldrh	r3, [r4, #12]
 8014bfa:	6020      	str	r0, [r4, #0]
 8014bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c00:	81a3      	strh	r3, [r4, #12]
 8014c02:	9b00      	ldr	r3, [sp, #0]
 8014c04:	6163      	str	r3, [r4, #20]
 8014c06:	9b01      	ldr	r3, [sp, #4]
 8014c08:	6120      	str	r0, [r4, #16]
 8014c0a:	b15b      	cbz	r3, 8014c24 <__smakebuf_r+0x74>
 8014c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c10:	4630      	mov	r0, r6
 8014c12:	f000 ff11 	bl	8015a38 <_isatty_r>
 8014c16:	b128      	cbz	r0, 8014c24 <__smakebuf_r+0x74>
 8014c18:	89a3      	ldrh	r3, [r4, #12]
 8014c1a:	f023 0303 	bic.w	r3, r3, #3
 8014c1e:	f043 0301 	orr.w	r3, r3, #1
 8014c22:	81a3      	strh	r3, [r4, #12]
 8014c24:	89a0      	ldrh	r0, [r4, #12]
 8014c26:	4305      	orrs	r5, r0
 8014c28:	81a5      	strh	r5, [r4, #12]
 8014c2a:	e7cd      	b.n	8014bc8 <__smakebuf_r+0x18>
 8014c2c:	08012cd9 	.word	0x08012cd9

08014c30 <malloc>:
 8014c30:	4b02      	ldr	r3, [pc, #8]	; (8014c3c <malloc+0xc>)
 8014c32:	4601      	mov	r1, r0
 8014c34:	6818      	ldr	r0, [r3, #0]
 8014c36:	f7fe b97f 	b.w	8012f38 <_malloc_r>
 8014c3a:	bf00      	nop
 8014c3c:	20000080 	.word	0x20000080

08014c40 <__malloc_lock>:
 8014c40:	4801      	ldr	r0, [pc, #4]	; (8014c48 <__malloc_lock+0x8>)
 8014c42:	f7fe b940 	b.w	8012ec6 <__retarget_lock_acquire_recursive>
 8014c46:	bf00      	nop
 8014c48:	2000576c 	.word	0x2000576c

08014c4c <__malloc_unlock>:
 8014c4c:	4801      	ldr	r0, [pc, #4]	; (8014c54 <__malloc_unlock+0x8>)
 8014c4e:	f7fe b93b 	b.w	8012ec8 <__retarget_lock_release_recursive>
 8014c52:	bf00      	nop
 8014c54:	2000576c 	.word	0x2000576c

08014c58 <_Balloc>:
 8014c58:	b570      	push	{r4, r5, r6, lr}
 8014c5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014c5c:	4604      	mov	r4, r0
 8014c5e:	460d      	mov	r5, r1
 8014c60:	b976      	cbnz	r6, 8014c80 <_Balloc+0x28>
 8014c62:	2010      	movs	r0, #16
 8014c64:	f7ff ffe4 	bl	8014c30 <malloc>
 8014c68:	4602      	mov	r2, r0
 8014c6a:	6260      	str	r0, [r4, #36]	; 0x24
 8014c6c:	b920      	cbnz	r0, 8014c78 <_Balloc+0x20>
 8014c6e:	4b18      	ldr	r3, [pc, #96]	; (8014cd0 <_Balloc+0x78>)
 8014c70:	4818      	ldr	r0, [pc, #96]	; (8014cd4 <_Balloc+0x7c>)
 8014c72:	2166      	movs	r1, #102	; 0x66
 8014c74:	f000 fe9e 	bl	80159b4 <__assert_func>
 8014c78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014c7c:	6006      	str	r6, [r0, #0]
 8014c7e:	60c6      	str	r6, [r0, #12]
 8014c80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014c82:	68f3      	ldr	r3, [r6, #12]
 8014c84:	b183      	cbz	r3, 8014ca8 <_Balloc+0x50>
 8014c86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c88:	68db      	ldr	r3, [r3, #12]
 8014c8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014c8e:	b9b8      	cbnz	r0, 8014cc0 <_Balloc+0x68>
 8014c90:	2101      	movs	r1, #1
 8014c92:	fa01 f605 	lsl.w	r6, r1, r5
 8014c96:	1d72      	adds	r2, r6, #5
 8014c98:	0092      	lsls	r2, r2, #2
 8014c9a:	4620      	mov	r0, r4
 8014c9c:	f000 fb60 	bl	8015360 <_calloc_r>
 8014ca0:	b160      	cbz	r0, 8014cbc <_Balloc+0x64>
 8014ca2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014ca6:	e00e      	b.n	8014cc6 <_Balloc+0x6e>
 8014ca8:	2221      	movs	r2, #33	; 0x21
 8014caa:	2104      	movs	r1, #4
 8014cac:	4620      	mov	r0, r4
 8014cae:	f000 fb57 	bl	8015360 <_calloc_r>
 8014cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014cb4:	60f0      	str	r0, [r6, #12]
 8014cb6:	68db      	ldr	r3, [r3, #12]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d1e4      	bne.n	8014c86 <_Balloc+0x2e>
 8014cbc:	2000      	movs	r0, #0
 8014cbe:	bd70      	pop	{r4, r5, r6, pc}
 8014cc0:	6802      	ldr	r2, [r0, #0]
 8014cc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014ccc:	e7f7      	b.n	8014cbe <_Balloc+0x66>
 8014cce:	bf00      	nop
 8014cd0:	08019f45 	.word	0x08019f45
 8014cd4:	08019fc8 	.word	0x08019fc8

08014cd8 <_Bfree>:
 8014cd8:	b570      	push	{r4, r5, r6, lr}
 8014cda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014cdc:	4605      	mov	r5, r0
 8014cde:	460c      	mov	r4, r1
 8014ce0:	b976      	cbnz	r6, 8014d00 <_Bfree+0x28>
 8014ce2:	2010      	movs	r0, #16
 8014ce4:	f7ff ffa4 	bl	8014c30 <malloc>
 8014ce8:	4602      	mov	r2, r0
 8014cea:	6268      	str	r0, [r5, #36]	; 0x24
 8014cec:	b920      	cbnz	r0, 8014cf8 <_Bfree+0x20>
 8014cee:	4b09      	ldr	r3, [pc, #36]	; (8014d14 <_Bfree+0x3c>)
 8014cf0:	4809      	ldr	r0, [pc, #36]	; (8014d18 <_Bfree+0x40>)
 8014cf2:	218a      	movs	r1, #138	; 0x8a
 8014cf4:	f000 fe5e 	bl	80159b4 <__assert_func>
 8014cf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014cfc:	6006      	str	r6, [r0, #0]
 8014cfe:	60c6      	str	r6, [r0, #12]
 8014d00:	b13c      	cbz	r4, 8014d12 <_Bfree+0x3a>
 8014d02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014d04:	6862      	ldr	r2, [r4, #4]
 8014d06:	68db      	ldr	r3, [r3, #12]
 8014d08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014d0c:	6021      	str	r1, [r4, #0]
 8014d0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014d12:	bd70      	pop	{r4, r5, r6, pc}
 8014d14:	08019f45 	.word	0x08019f45
 8014d18:	08019fc8 	.word	0x08019fc8

08014d1c <__multadd>:
 8014d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d20:	690d      	ldr	r5, [r1, #16]
 8014d22:	4607      	mov	r7, r0
 8014d24:	460c      	mov	r4, r1
 8014d26:	461e      	mov	r6, r3
 8014d28:	f101 0c14 	add.w	ip, r1, #20
 8014d2c:	2000      	movs	r0, #0
 8014d2e:	f8dc 3000 	ldr.w	r3, [ip]
 8014d32:	b299      	uxth	r1, r3
 8014d34:	fb02 6101 	mla	r1, r2, r1, r6
 8014d38:	0c1e      	lsrs	r6, r3, #16
 8014d3a:	0c0b      	lsrs	r3, r1, #16
 8014d3c:	fb02 3306 	mla	r3, r2, r6, r3
 8014d40:	b289      	uxth	r1, r1
 8014d42:	3001      	adds	r0, #1
 8014d44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014d48:	4285      	cmp	r5, r0
 8014d4a:	f84c 1b04 	str.w	r1, [ip], #4
 8014d4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014d52:	dcec      	bgt.n	8014d2e <__multadd+0x12>
 8014d54:	b30e      	cbz	r6, 8014d9a <__multadd+0x7e>
 8014d56:	68a3      	ldr	r3, [r4, #8]
 8014d58:	42ab      	cmp	r3, r5
 8014d5a:	dc19      	bgt.n	8014d90 <__multadd+0x74>
 8014d5c:	6861      	ldr	r1, [r4, #4]
 8014d5e:	4638      	mov	r0, r7
 8014d60:	3101      	adds	r1, #1
 8014d62:	f7ff ff79 	bl	8014c58 <_Balloc>
 8014d66:	4680      	mov	r8, r0
 8014d68:	b928      	cbnz	r0, 8014d76 <__multadd+0x5a>
 8014d6a:	4602      	mov	r2, r0
 8014d6c:	4b0c      	ldr	r3, [pc, #48]	; (8014da0 <__multadd+0x84>)
 8014d6e:	480d      	ldr	r0, [pc, #52]	; (8014da4 <__multadd+0x88>)
 8014d70:	21b5      	movs	r1, #181	; 0xb5
 8014d72:	f000 fe1f 	bl	80159b4 <__assert_func>
 8014d76:	6922      	ldr	r2, [r4, #16]
 8014d78:	3202      	adds	r2, #2
 8014d7a:	f104 010c 	add.w	r1, r4, #12
 8014d7e:	0092      	lsls	r2, r2, #2
 8014d80:	300c      	adds	r0, #12
 8014d82:	f7fe f8a2 	bl	8012eca <memcpy>
 8014d86:	4621      	mov	r1, r4
 8014d88:	4638      	mov	r0, r7
 8014d8a:	f7ff ffa5 	bl	8014cd8 <_Bfree>
 8014d8e:	4644      	mov	r4, r8
 8014d90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014d94:	3501      	adds	r5, #1
 8014d96:	615e      	str	r6, [r3, #20]
 8014d98:	6125      	str	r5, [r4, #16]
 8014d9a:	4620      	mov	r0, r4
 8014d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014da0:	08019fb7 	.word	0x08019fb7
 8014da4:	08019fc8 	.word	0x08019fc8

08014da8 <__hi0bits>:
 8014da8:	0c03      	lsrs	r3, r0, #16
 8014daa:	041b      	lsls	r3, r3, #16
 8014dac:	b9d3      	cbnz	r3, 8014de4 <__hi0bits+0x3c>
 8014dae:	0400      	lsls	r0, r0, #16
 8014db0:	2310      	movs	r3, #16
 8014db2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014db6:	bf04      	itt	eq
 8014db8:	0200      	lsleq	r0, r0, #8
 8014dba:	3308      	addeq	r3, #8
 8014dbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014dc0:	bf04      	itt	eq
 8014dc2:	0100      	lsleq	r0, r0, #4
 8014dc4:	3304      	addeq	r3, #4
 8014dc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014dca:	bf04      	itt	eq
 8014dcc:	0080      	lsleq	r0, r0, #2
 8014dce:	3302      	addeq	r3, #2
 8014dd0:	2800      	cmp	r0, #0
 8014dd2:	db05      	blt.n	8014de0 <__hi0bits+0x38>
 8014dd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014dd8:	f103 0301 	add.w	r3, r3, #1
 8014ddc:	bf08      	it	eq
 8014dde:	2320      	moveq	r3, #32
 8014de0:	4618      	mov	r0, r3
 8014de2:	4770      	bx	lr
 8014de4:	2300      	movs	r3, #0
 8014de6:	e7e4      	b.n	8014db2 <__hi0bits+0xa>

08014de8 <__lo0bits>:
 8014de8:	6803      	ldr	r3, [r0, #0]
 8014dea:	f013 0207 	ands.w	r2, r3, #7
 8014dee:	4601      	mov	r1, r0
 8014df0:	d00b      	beq.n	8014e0a <__lo0bits+0x22>
 8014df2:	07da      	lsls	r2, r3, #31
 8014df4:	d423      	bmi.n	8014e3e <__lo0bits+0x56>
 8014df6:	0798      	lsls	r0, r3, #30
 8014df8:	bf49      	itett	mi
 8014dfa:	085b      	lsrmi	r3, r3, #1
 8014dfc:	089b      	lsrpl	r3, r3, #2
 8014dfe:	2001      	movmi	r0, #1
 8014e00:	600b      	strmi	r3, [r1, #0]
 8014e02:	bf5c      	itt	pl
 8014e04:	600b      	strpl	r3, [r1, #0]
 8014e06:	2002      	movpl	r0, #2
 8014e08:	4770      	bx	lr
 8014e0a:	b298      	uxth	r0, r3
 8014e0c:	b9a8      	cbnz	r0, 8014e3a <__lo0bits+0x52>
 8014e0e:	0c1b      	lsrs	r3, r3, #16
 8014e10:	2010      	movs	r0, #16
 8014e12:	b2da      	uxtb	r2, r3
 8014e14:	b90a      	cbnz	r2, 8014e1a <__lo0bits+0x32>
 8014e16:	3008      	adds	r0, #8
 8014e18:	0a1b      	lsrs	r3, r3, #8
 8014e1a:	071a      	lsls	r2, r3, #28
 8014e1c:	bf04      	itt	eq
 8014e1e:	091b      	lsreq	r3, r3, #4
 8014e20:	3004      	addeq	r0, #4
 8014e22:	079a      	lsls	r2, r3, #30
 8014e24:	bf04      	itt	eq
 8014e26:	089b      	lsreq	r3, r3, #2
 8014e28:	3002      	addeq	r0, #2
 8014e2a:	07da      	lsls	r2, r3, #31
 8014e2c:	d403      	bmi.n	8014e36 <__lo0bits+0x4e>
 8014e2e:	085b      	lsrs	r3, r3, #1
 8014e30:	f100 0001 	add.w	r0, r0, #1
 8014e34:	d005      	beq.n	8014e42 <__lo0bits+0x5a>
 8014e36:	600b      	str	r3, [r1, #0]
 8014e38:	4770      	bx	lr
 8014e3a:	4610      	mov	r0, r2
 8014e3c:	e7e9      	b.n	8014e12 <__lo0bits+0x2a>
 8014e3e:	2000      	movs	r0, #0
 8014e40:	4770      	bx	lr
 8014e42:	2020      	movs	r0, #32
 8014e44:	4770      	bx	lr
	...

08014e48 <__i2b>:
 8014e48:	b510      	push	{r4, lr}
 8014e4a:	460c      	mov	r4, r1
 8014e4c:	2101      	movs	r1, #1
 8014e4e:	f7ff ff03 	bl	8014c58 <_Balloc>
 8014e52:	4602      	mov	r2, r0
 8014e54:	b928      	cbnz	r0, 8014e62 <__i2b+0x1a>
 8014e56:	4b05      	ldr	r3, [pc, #20]	; (8014e6c <__i2b+0x24>)
 8014e58:	4805      	ldr	r0, [pc, #20]	; (8014e70 <__i2b+0x28>)
 8014e5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014e5e:	f000 fda9 	bl	80159b4 <__assert_func>
 8014e62:	2301      	movs	r3, #1
 8014e64:	6144      	str	r4, [r0, #20]
 8014e66:	6103      	str	r3, [r0, #16]
 8014e68:	bd10      	pop	{r4, pc}
 8014e6a:	bf00      	nop
 8014e6c:	08019fb7 	.word	0x08019fb7
 8014e70:	08019fc8 	.word	0x08019fc8

08014e74 <__multiply>:
 8014e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e78:	4691      	mov	r9, r2
 8014e7a:	690a      	ldr	r2, [r1, #16]
 8014e7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014e80:	429a      	cmp	r2, r3
 8014e82:	bfb8      	it	lt
 8014e84:	460b      	movlt	r3, r1
 8014e86:	460c      	mov	r4, r1
 8014e88:	bfbc      	itt	lt
 8014e8a:	464c      	movlt	r4, r9
 8014e8c:	4699      	movlt	r9, r3
 8014e8e:	6927      	ldr	r7, [r4, #16]
 8014e90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014e94:	68a3      	ldr	r3, [r4, #8]
 8014e96:	6861      	ldr	r1, [r4, #4]
 8014e98:	eb07 060a 	add.w	r6, r7, sl
 8014e9c:	42b3      	cmp	r3, r6
 8014e9e:	b085      	sub	sp, #20
 8014ea0:	bfb8      	it	lt
 8014ea2:	3101      	addlt	r1, #1
 8014ea4:	f7ff fed8 	bl	8014c58 <_Balloc>
 8014ea8:	b930      	cbnz	r0, 8014eb8 <__multiply+0x44>
 8014eaa:	4602      	mov	r2, r0
 8014eac:	4b44      	ldr	r3, [pc, #272]	; (8014fc0 <__multiply+0x14c>)
 8014eae:	4845      	ldr	r0, [pc, #276]	; (8014fc4 <__multiply+0x150>)
 8014eb0:	f240 115d 	movw	r1, #349	; 0x15d
 8014eb4:	f000 fd7e 	bl	80159b4 <__assert_func>
 8014eb8:	f100 0514 	add.w	r5, r0, #20
 8014ebc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014ec0:	462b      	mov	r3, r5
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	4543      	cmp	r3, r8
 8014ec6:	d321      	bcc.n	8014f0c <__multiply+0x98>
 8014ec8:	f104 0314 	add.w	r3, r4, #20
 8014ecc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014ed0:	f109 0314 	add.w	r3, r9, #20
 8014ed4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014ed8:	9202      	str	r2, [sp, #8]
 8014eda:	1b3a      	subs	r2, r7, r4
 8014edc:	3a15      	subs	r2, #21
 8014ede:	f022 0203 	bic.w	r2, r2, #3
 8014ee2:	3204      	adds	r2, #4
 8014ee4:	f104 0115 	add.w	r1, r4, #21
 8014ee8:	428f      	cmp	r7, r1
 8014eea:	bf38      	it	cc
 8014eec:	2204      	movcc	r2, #4
 8014eee:	9201      	str	r2, [sp, #4]
 8014ef0:	9a02      	ldr	r2, [sp, #8]
 8014ef2:	9303      	str	r3, [sp, #12]
 8014ef4:	429a      	cmp	r2, r3
 8014ef6:	d80c      	bhi.n	8014f12 <__multiply+0x9e>
 8014ef8:	2e00      	cmp	r6, #0
 8014efa:	dd03      	ble.n	8014f04 <__multiply+0x90>
 8014efc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d05a      	beq.n	8014fba <__multiply+0x146>
 8014f04:	6106      	str	r6, [r0, #16]
 8014f06:	b005      	add	sp, #20
 8014f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f0c:	f843 2b04 	str.w	r2, [r3], #4
 8014f10:	e7d8      	b.n	8014ec4 <__multiply+0x50>
 8014f12:	f8b3 a000 	ldrh.w	sl, [r3]
 8014f16:	f1ba 0f00 	cmp.w	sl, #0
 8014f1a:	d024      	beq.n	8014f66 <__multiply+0xf2>
 8014f1c:	f104 0e14 	add.w	lr, r4, #20
 8014f20:	46a9      	mov	r9, r5
 8014f22:	f04f 0c00 	mov.w	ip, #0
 8014f26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014f2a:	f8d9 1000 	ldr.w	r1, [r9]
 8014f2e:	fa1f fb82 	uxth.w	fp, r2
 8014f32:	b289      	uxth	r1, r1
 8014f34:	fb0a 110b 	mla	r1, sl, fp, r1
 8014f38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014f3c:	f8d9 2000 	ldr.w	r2, [r9]
 8014f40:	4461      	add	r1, ip
 8014f42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014f46:	fb0a c20b 	mla	r2, sl, fp, ip
 8014f4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014f4e:	b289      	uxth	r1, r1
 8014f50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014f54:	4577      	cmp	r7, lr
 8014f56:	f849 1b04 	str.w	r1, [r9], #4
 8014f5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014f5e:	d8e2      	bhi.n	8014f26 <__multiply+0xb2>
 8014f60:	9a01      	ldr	r2, [sp, #4]
 8014f62:	f845 c002 	str.w	ip, [r5, r2]
 8014f66:	9a03      	ldr	r2, [sp, #12]
 8014f68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014f6c:	3304      	adds	r3, #4
 8014f6e:	f1b9 0f00 	cmp.w	r9, #0
 8014f72:	d020      	beq.n	8014fb6 <__multiply+0x142>
 8014f74:	6829      	ldr	r1, [r5, #0]
 8014f76:	f104 0c14 	add.w	ip, r4, #20
 8014f7a:	46ae      	mov	lr, r5
 8014f7c:	f04f 0a00 	mov.w	sl, #0
 8014f80:	f8bc b000 	ldrh.w	fp, [ip]
 8014f84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014f88:	fb09 220b 	mla	r2, r9, fp, r2
 8014f8c:	4492      	add	sl, r2
 8014f8e:	b289      	uxth	r1, r1
 8014f90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014f94:	f84e 1b04 	str.w	r1, [lr], #4
 8014f98:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014f9c:	f8be 1000 	ldrh.w	r1, [lr]
 8014fa0:	0c12      	lsrs	r2, r2, #16
 8014fa2:	fb09 1102 	mla	r1, r9, r2, r1
 8014fa6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8014faa:	4567      	cmp	r7, ip
 8014fac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014fb0:	d8e6      	bhi.n	8014f80 <__multiply+0x10c>
 8014fb2:	9a01      	ldr	r2, [sp, #4]
 8014fb4:	50a9      	str	r1, [r5, r2]
 8014fb6:	3504      	adds	r5, #4
 8014fb8:	e79a      	b.n	8014ef0 <__multiply+0x7c>
 8014fba:	3e01      	subs	r6, #1
 8014fbc:	e79c      	b.n	8014ef8 <__multiply+0x84>
 8014fbe:	bf00      	nop
 8014fc0:	08019fb7 	.word	0x08019fb7
 8014fc4:	08019fc8 	.word	0x08019fc8

08014fc8 <__pow5mult>:
 8014fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fcc:	4615      	mov	r5, r2
 8014fce:	f012 0203 	ands.w	r2, r2, #3
 8014fd2:	4606      	mov	r6, r0
 8014fd4:	460f      	mov	r7, r1
 8014fd6:	d007      	beq.n	8014fe8 <__pow5mult+0x20>
 8014fd8:	4c25      	ldr	r4, [pc, #148]	; (8015070 <__pow5mult+0xa8>)
 8014fda:	3a01      	subs	r2, #1
 8014fdc:	2300      	movs	r3, #0
 8014fde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014fe2:	f7ff fe9b 	bl	8014d1c <__multadd>
 8014fe6:	4607      	mov	r7, r0
 8014fe8:	10ad      	asrs	r5, r5, #2
 8014fea:	d03d      	beq.n	8015068 <__pow5mult+0xa0>
 8014fec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014fee:	b97c      	cbnz	r4, 8015010 <__pow5mult+0x48>
 8014ff0:	2010      	movs	r0, #16
 8014ff2:	f7ff fe1d 	bl	8014c30 <malloc>
 8014ff6:	4602      	mov	r2, r0
 8014ff8:	6270      	str	r0, [r6, #36]	; 0x24
 8014ffa:	b928      	cbnz	r0, 8015008 <__pow5mult+0x40>
 8014ffc:	4b1d      	ldr	r3, [pc, #116]	; (8015074 <__pow5mult+0xac>)
 8014ffe:	481e      	ldr	r0, [pc, #120]	; (8015078 <__pow5mult+0xb0>)
 8015000:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015004:	f000 fcd6 	bl	80159b4 <__assert_func>
 8015008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801500c:	6004      	str	r4, [r0, #0]
 801500e:	60c4      	str	r4, [r0, #12]
 8015010:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015018:	b94c      	cbnz	r4, 801502e <__pow5mult+0x66>
 801501a:	f240 2171 	movw	r1, #625	; 0x271
 801501e:	4630      	mov	r0, r6
 8015020:	f7ff ff12 	bl	8014e48 <__i2b>
 8015024:	2300      	movs	r3, #0
 8015026:	f8c8 0008 	str.w	r0, [r8, #8]
 801502a:	4604      	mov	r4, r0
 801502c:	6003      	str	r3, [r0, #0]
 801502e:	f04f 0900 	mov.w	r9, #0
 8015032:	07eb      	lsls	r3, r5, #31
 8015034:	d50a      	bpl.n	801504c <__pow5mult+0x84>
 8015036:	4639      	mov	r1, r7
 8015038:	4622      	mov	r2, r4
 801503a:	4630      	mov	r0, r6
 801503c:	f7ff ff1a 	bl	8014e74 <__multiply>
 8015040:	4639      	mov	r1, r7
 8015042:	4680      	mov	r8, r0
 8015044:	4630      	mov	r0, r6
 8015046:	f7ff fe47 	bl	8014cd8 <_Bfree>
 801504a:	4647      	mov	r7, r8
 801504c:	106d      	asrs	r5, r5, #1
 801504e:	d00b      	beq.n	8015068 <__pow5mult+0xa0>
 8015050:	6820      	ldr	r0, [r4, #0]
 8015052:	b938      	cbnz	r0, 8015064 <__pow5mult+0x9c>
 8015054:	4622      	mov	r2, r4
 8015056:	4621      	mov	r1, r4
 8015058:	4630      	mov	r0, r6
 801505a:	f7ff ff0b 	bl	8014e74 <__multiply>
 801505e:	6020      	str	r0, [r4, #0]
 8015060:	f8c0 9000 	str.w	r9, [r0]
 8015064:	4604      	mov	r4, r0
 8015066:	e7e4      	b.n	8015032 <__pow5mult+0x6a>
 8015068:	4638      	mov	r0, r7
 801506a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801506e:	bf00      	nop
 8015070:	0801a118 	.word	0x0801a118
 8015074:	08019f45 	.word	0x08019f45
 8015078:	08019fc8 	.word	0x08019fc8

0801507c <__lshift>:
 801507c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015080:	460c      	mov	r4, r1
 8015082:	6849      	ldr	r1, [r1, #4]
 8015084:	6923      	ldr	r3, [r4, #16]
 8015086:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801508a:	68a3      	ldr	r3, [r4, #8]
 801508c:	4607      	mov	r7, r0
 801508e:	4691      	mov	r9, r2
 8015090:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015094:	f108 0601 	add.w	r6, r8, #1
 8015098:	42b3      	cmp	r3, r6
 801509a:	db0b      	blt.n	80150b4 <__lshift+0x38>
 801509c:	4638      	mov	r0, r7
 801509e:	f7ff fddb 	bl	8014c58 <_Balloc>
 80150a2:	4605      	mov	r5, r0
 80150a4:	b948      	cbnz	r0, 80150ba <__lshift+0x3e>
 80150a6:	4602      	mov	r2, r0
 80150a8:	4b2a      	ldr	r3, [pc, #168]	; (8015154 <__lshift+0xd8>)
 80150aa:	482b      	ldr	r0, [pc, #172]	; (8015158 <__lshift+0xdc>)
 80150ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80150b0:	f000 fc80 	bl	80159b4 <__assert_func>
 80150b4:	3101      	adds	r1, #1
 80150b6:	005b      	lsls	r3, r3, #1
 80150b8:	e7ee      	b.n	8015098 <__lshift+0x1c>
 80150ba:	2300      	movs	r3, #0
 80150bc:	f100 0114 	add.w	r1, r0, #20
 80150c0:	f100 0210 	add.w	r2, r0, #16
 80150c4:	4618      	mov	r0, r3
 80150c6:	4553      	cmp	r3, sl
 80150c8:	db37      	blt.n	801513a <__lshift+0xbe>
 80150ca:	6920      	ldr	r0, [r4, #16]
 80150cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80150d0:	f104 0314 	add.w	r3, r4, #20
 80150d4:	f019 091f 	ands.w	r9, r9, #31
 80150d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80150dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80150e0:	d02f      	beq.n	8015142 <__lshift+0xc6>
 80150e2:	f1c9 0e20 	rsb	lr, r9, #32
 80150e6:	468a      	mov	sl, r1
 80150e8:	f04f 0c00 	mov.w	ip, #0
 80150ec:	681a      	ldr	r2, [r3, #0]
 80150ee:	fa02 f209 	lsl.w	r2, r2, r9
 80150f2:	ea42 020c 	orr.w	r2, r2, ip
 80150f6:	f84a 2b04 	str.w	r2, [sl], #4
 80150fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80150fe:	4298      	cmp	r0, r3
 8015100:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015104:	d8f2      	bhi.n	80150ec <__lshift+0x70>
 8015106:	1b03      	subs	r3, r0, r4
 8015108:	3b15      	subs	r3, #21
 801510a:	f023 0303 	bic.w	r3, r3, #3
 801510e:	3304      	adds	r3, #4
 8015110:	f104 0215 	add.w	r2, r4, #21
 8015114:	4290      	cmp	r0, r2
 8015116:	bf38      	it	cc
 8015118:	2304      	movcc	r3, #4
 801511a:	f841 c003 	str.w	ip, [r1, r3]
 801511e:	f1bc 0f00 	cmp.w	ip, #0
 8015122:	d001      	beq.n	8015128 <__lshift+0xac>
 8015124:	f108 0602 	add.w	r6, r8, #2
 8015128:	3e01      	subs	r6, #1
 801512a:	4638      	mov	r0, r7
 801512c:	612e      	str	r6, [r5, #16]
 801512e:	4621      	mov	r1, r4
 8015130:	f7ff fdd2 	bl	8014cd8 <_Bfree>
 8015134:	4628      	mov	r0, r5
 8015136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801513a:	f842 0f04 	str.w	r0, [r2, #4]!
 801513e:	3301      	adds	r3, #1
 8015140:	e7c1      	b.n	80150c6 <__lshift+0x4a>
 8015142:	3904      	subs	r1, #4
 8015144:	f853 2b04 	ldr.w	r2, [r3], #4
 8015148:	f841 2f04 	str.w	r2, [r1, #4]!
 801514c:	4298      	cmp	r0, r3
 801514e:	d8f9      	bhi.n	8015144 <__lshift+0xc8>
 8015150:	e7ea      	b.n	8015128 <__lshift+0xac>
 8015152:	bf00      	nop
 8015154:	08019fb7 	.word	0x08019fb7
 8015158:	08019fc8 	.word	0x08019fc8

0801515c <__mcmp>:
 801515c:	b530      	push	{r4, r5, lr}
 801515e:	6902      	ldr	r2, [r0, #16]
 8015160:	690c      	ldr	r4, [r1, #16]
 8015162:	1b12      	subs	r2, r2, r4
 8015164:	d10e      	bne.n	8015184 <__mcmp+0x28>
 8015166:	f100 0314 	add.w	r3, r0, #20
 801516a:	3114      	adds	r1, #20
 801516c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015170:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015174:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015178:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801517c:	42a5      	cmp	r5, r4
 801517e:	d003      	beq.n	8015188 <__mcmp+0x2c>
 8015180:	d305      	bcc.n	801518e <__mcmp+0x32>
 8015182:	2201      	movs	r2, #1
 8015184:	4610      	mov	r0, r2
 8015186:	bd30      	pop	{r4, r5, pc}
 8015188:	4283      	cmp	r3, r0
 801518a:	d3f3      	bcc.n	8015174 <__mcmp+0x18>
 801518c:	e7fa      	b.n	8015184 <__mcmp+0x28>
 801518e:	f04f 32ff 	mov.w	r2, #4294967295
 8015192:	e7f7      	b.n	8015184 <__mcmp+0x28>

08015194 <__mdiff>:
 8015194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015198:	460c      	mov	r4, r1
 801519a:	4606      	mov	r6, r0
 801519c:	4611      	mov	r1, r2
 801519e:	4620      	mov	r0, r4
 80151a0:	4690      	mov	r8, r2
 80151a2:	f7ff ffdb 	bl	801515c <__mcmp>
 80151a6:	1e05      	subs	r5, r0, #0
 80151a8:	d110      	bne.n	80151cc <__mdiff+0x38>
 80151aa:	4629      	mov	r1, r5
 80151ac:	4630      	mov	r0, r6
 80151ae:	f7ff fd53 	bl	8014c58 <_Balloc>
 80151b2:	b930      	cbnz	r0, 80151c2 <__mdiff+0x2e>
 80151b4:	4b3a      	ldr	r3, [pc, #232]	; (80152a0 <__mdiff+0x10c>)
 80151b6:	4602      	mov	r2, r0
 80151b8:	f240 2132 	movw	r1, #562	; 0x232
 80151bc:	4839      	ldr	r0, [pc, #228]	; (80152a4 <__mdiff+0x110>)
 80151be:	f000 fbf9 	bl	80159b4 <__assert_func>
 80151c2:	2301      	movs	r3, #1
 80151c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80151c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151cc:	bfa4      	itt	ge
 80151ce:	4643      	movge	r3, r8
 80151d0:	46a0      	movge	r8, r4
 80151d2:	4630      	mov	r0, r6
 80151d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80151d8:	bfa6      	itte	ge
 80151da:	461c      	movge	r4, r3
 80151dc:	2500      	movge	r5, #0
 80151de:	2501      	movlt	r5, #1
 80151e0:	f7ff fd3a 	bl	8014c58 <_Balloc>
 80151e4:	b920      	cbnz	r0, 80151f0 <__mdiff+0x5c>
 80151e6:	4b2e      	ldr	r3, [pc, #184]	; (80152a0 <__mdiff+0x10c>)
 80151e8:	4602      	mov	r2, r0
 80151ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80151ee:	e7e5      	b.n	80151bc <__mdiff+0x28>
 80151f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80151f4:	6926      	ldr	r6, [r4, #16]
 80151f6:	60c5      	str	r5, [r0, #12]
 80151f8:	f104 0914 	add.w	r9, r4, #20
 80151fc:	f108 0514 	add.w	r5, r8, #20
 8015200:	f100 0e14 	add.w	lr, r0, #20
 8015204:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015208:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801520c:	f108 0210 	add.w	r2, r8, #16
 8015210:	46f2      	mov	sl, lr
 8015212:	2100      	movs	r1, #0
 8015214:	f859 3b04 	ldr.w	r3, [r9], #4
 8015218:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801521c:	fa1f f883 	uxth.w	r8, r3
 8015220:	fa11 f18b 	uxtah	r1, r1, fp
 8015224:	0c1b      	lsrs	r3, r3, #16
 8015226:	eba1 0808 	sub.w	r8, r1, r8
 801522a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801522e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015232:	fa1f f888 	uxth.w	r8, r8
 8015236:	1419      	asrs	r1, r3, #16
 8015238:	454e      	cmp	r6, r9
 801523a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801523e:	f84a 3b04 	str.w	r3, [sl], #4
 8015242:	d8e7      	bhi.n	8015214 <__mdiff+0x80>
 8015244:	1b33      	subs	r3, r6, r4
 8015246:	3b15      	subs	r3, #21
 8015248:	f023 0303 	bic.w	r3, r3, #3
 801524c:	3304      	adds	r3, #4
 801524e:	3415      	adds	r4, #21
 8015250:	42a6      	cmp	r6, r4
 8015252:	bf38      	it	cc
 8015254:	2304      	movcc	r3, #4
 8015256:	441d      	add	r5, r3
 8015258:	4473      	add	r3, lr
 801525a:	469e      	mov	lr, r3
 801525c:	462e      	mov	r6, r5
 801525e:	4566      	cmp	r6, ip
 8015260:	d30e      	bcc.n	8015280 <__mdiff+0xec>
 8015262:	f10c 0203 	add.w	r2, ip, #3
 8015266:	1b52      	subs	r2, r2, r5
 8015268:	f022 0203 	bic.w	r2, r2, #3
 801526c:	3d03      	subs	r5, #3
 801526e:	45ac      	cmp	ip, r5
 8015270:	bf38      	it	cc
 8015272:	2200      	movcc	r2, #0
 8015274:	441a      	add	r2, r3
 8015276:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801527a:	b17b      	cbz	r3, 801529c <__mdiff+0x108>
 801527c:	6107      	str	r7, [r0, #16]
 801527e:	e7a3      	b.n	80151c8 <__mdiff+0x34>
 8015280:	f856 8b04 	ldr.w	r8, [r6], #4
 8015284:	fa11 f288 	uxtah	r2, r1, r8
 8015288:	1414      	asrs	r4, r2, #16
 801528a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801528e:	b292      	uxth	r2, r2
 8015290:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015294:	f84e 2b04 	str.w	r2, [lr], #4
 8015298:	1421      	asrs	r1, r4, #16
 801529a:	e7e0      	b.n	801525e <__mdiff+0xca>
 801529c:	3f01      	subs	r7, #1
 801529e:	e7ea      	b.n	8015276 <__mdiff+0xe2>
 80152a0:	08019fb7 	.word	0x08019fb7
 80152a4:	08019fc8 	.word	0x08019fc8

080152a8 <__d2b>:
 80152a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80152ac:	4689      	mov	r9, r1
 80152ae:	2101      	movs	r1, #1
 80152b0:	ec57 6b10 	vmov	r6, r7, d0
 80152b4:	4690      	mov	r8, r2
 80152b6:	f7ff fccf 	bl	8014c58 <_Balloc>
 80152ba:	4604      	mov	r4, r0
 80152bc:	b930      	cbnz	r0, 80152cc <__d2b+0x24>
 80152be:	4602      	mov	r2, r0
 80152c0:	4b25      	ldr	r3, [pc, #148]	; (8015358 <__d2b+0xb0>)
 80152c2:	4826      	ldr	r0, [pc, #152]	; (801535c <__d2b+0xb4>)
 80152c4:	f240 310a 	movw	r1, #778	; 0x30a
 80152c8:	f000 fb74 	bl	80159b4 <__assert_func>
 80152cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80152d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80152d4:	bb35      	cbnz	r5, 8015324 <__d2b+0x7c>
 80152d6:	2e00      	cmp	r6, #0
 80152d8:	9301      	str	r3, [sp, #4]
 80152da:	d028      	beq.n	801532e <__d2b+0x86>
 80152dc:	4668      	mov	r0, sp
 80152de:	9600      	str	r6, [sp, #0]
 80152e0:	f7ff fd82 	bl	8014de8 <__lo0bits>
 80152e4:	9900      	ldr	r1, [sp, #0]
 80152e6:	b300      	cbz	r0, 801532a <__d2b+0x82>
 80152e8:	9a01      	ldr	r2, [sp, #4]
 80152ea:	f1c0 0320 	rsb	r3, r0, #32
 80152ee:	fa02 f303 	lsl.w	r3, r2, r3
 80152f2:	430b      	orrs	r3, r1
 80152f4:	40c2      	lsrs	r2, r0
 80152f6:	6163      	str	r3, [r4, #20]
 80152f8:	9201      	str	r2, [sp, #4]
 80152fa:	9b01      	ldr	r3, [sp, #4]
 80152fc:	61a3      	str	r3, [r4, #24]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	bf14      	ite	ne
 8015302:	2202      	movne	r2, #2
 8015304:	2201      	moveq	r2, #1
 8015306:	6122      	str	r2, [r4, #16]
 8015308:	b1d5      	cbz	r5, 8015340 <__d2b+0x98>
 801530a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801530e:	4405      	add	r5, r0
 8015310:	f8c9 5000 	str.w	r5, [r9]
 8015314:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015318:	f8c8 0000 	str.w	r0, [r8]
 801531c:	4620      	mov	r0, r4
 801531e:	b003      	add	sp, #12
 8015320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015324:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015328:	e7d5      	b.n	80152d6 <__d2b+0x2e>
 801532a:	6161      	str	r1, [r4, #20]
 801532c:	e7e5      	b.n	80152fa <__d2b+0x52>
 801532e:	a801      	add	r0, sp, #4
 8015330:	f7ff fd5a 	bl	8014de8 <__lo0bits>
 8015334:	9b01      	ldr	r3, [sp, #4]
 8015336:	6163      	str	r3, [r4, #20]
 8015338:	2201      	movs	r2, #1
 801533a:	6122      	str	r2, [r4, #16]
 801533c:	3020      	adds	r0, #32
 801533e:	e7e3      	b.n	8015308 <__d2b+0x60>
 8015340:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015344:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015348:	f8c9 0000 	str.w	r0, [r9]
 801534c:	6918      	ldr	r0, [r3, #16]
 801534e:	f7ff fd2b 	bl	8014da8 <__hi0bits>
 8015352:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015356:	e7df      	b.n	8015318 <__d2b+0x70>
 8015358:	08019fb7 	.word	0x08019fb7
 801535c:	08019fc8 	.word	0x08019fc8

08015360 <_calloc_r>:
 8015360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015362:	fba1 2402 	umull	r2, r4, r1, r2
 8015366:	b94c      	cbnz	r4, 801537c <_calloc_r+0x1c>
 8015368:	4611      	mov	r1, r2
 801536a:	9201      	str	r2, [sp, #4]
 801536c:	f7fd fde4 	bl	8012f38 <_malloc_r>
 8015370:	9a01      	ldr	r2, [sp, #4]
 8015372:	4605      	mov	r5, r0
 8015374:	b930      	cbnz	r0, 8015384 <_calloc_r+0x24>
 8015376:	4628      	mov	r0, r5
 8015378:	b003      	add	sp, #12
 801537a:	bd30      	pop	{r4, r5, pc}
 801537c:	220c      	movs	r2, #12
 801537e:	6002      	str	r2, [r0, #0]
 8015380:	2500      	movs	r5, #0
 8015382:	e7f8      	b.n	8015376 <_calloc_r+0x16>
 8015384:	4621      	mov	r1, r4
 8015386:	f7fd fdae 	bl	8012ee6 <memset>
 801538a:	e7f4      	b.n	8015376 <_calloc_r+0x16>

0801538c <_free_r>:
 801538c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801538e:	2900      	cmp	r1, #0
 8015390:	d044      	beq.n	801541c <_free_r+0x90>
 8015392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015396:	9001      	str	r0, [sp, #4]
 8015398:	2b00      	cmp	r3, #0
 801539a:	f1a1 0404 	sub.w	r4, r1, #4
 801539e:	bfb8      	it	lt
 80153a0:	18e4      	addlt	r4, r4, r3
 80153a2:	f7ff fc4d 	bl	8014c40 <__malloc_lock>
 80153a6:	4a1e      	ldr	r2, [pc, #120]	; (8015420 <_free_r+0x94>)
 80153a8:	9801      	ldr	r0, [sp, #4]
 80153aa:	6813      	ldr	r3, [r2, #0]
 80153ac:	b933      	cbnz	r3, 80153bc <_free_r+0x30>
 80153ae:	6063      	str	r3, [r4, #4]
 80153b0:	6014      	str	r4, [r2, #0]
 80153b2:	b003      	add	sp, #12
 80153b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80153b8:	f7ff bc48 	b.w	8014c4c <__malloc_unlock>
 80153bc:	42a3      	cmp	r3, r4
 80153be:	d908      	bls.n	80153d2 <_free_r+0x46>
 80153c0:	6825      	ldr	r5, [r4, #0]
 80153c2:	1961      	adds	r1, r4, r5
 80153c4:	428b      	cmp	r3, r1
 80153c6:	bf01      	itttt	eq
 80153c8:	6819      	ldreq	r1, [r3, #0]
 80153ca:	685b      	ldreq	r3, [r3, #4]
 80153cc:	1949      	addeq	r1, r1, r5
 80153ce:	6021      	streq	r1, [r4, #0]
 80153d0:	e7ed      	b.n	80153ae <_free_r+0x22>
 80153d2:	461a      	mov	r2, r3
 80153d4:	685b      	ldr	r3, [r3, #4]
 80153d6:	b10b      	cbz	r3, 80153dc <_free_r+0x50>
 80153d8:	42a3      	cmp	r3, r4
 80153da:	d9fa      	bls.n	80153d2 <_free_r+0x46>
 80153dc:	6811      	ldr	r1, [r2, #0]
 80153de:	1855      	adds	r5, r2, r1
 80153e0:	42a5      	cmp	r5, r4
 80153e2:	d10b      	bne.n	80153fc <_free_r+0x70>
 80153e4:	6824      	ldr	r4, [r4, #0]
 80153e6:	4421      	add	r1, r4
 80153e8:	1854      	adds	r4, r2, r1
 80153ea:	42a3      	cmp	r3, r4
 80153ec:	6011      	str	r1, [r2, #0]
 80153ee:	d1e0      	bne.n	80153b2 <_free_r+0x26>
 80153f0:	681c      	ldr	r4, [r3, #0]
 80153f2:	685b      	ldr	r3, [r3, #4]
 80153f4:	6053      	str	r3, [r2, #4]
 80153f6:	4421      	add	r1, r4
 80153f8:	6011      	str	r1, [r2, #0]
 80153fa:	e7da      	b.n	80153b2 <_free_r+0x26>
 80153fc:	d902      	bls.n	8015404 <_free_r+0x78>
 80153fe:	230c      	movs	r3, #12
 8015400:	6003      	str	r3, [r0, #0]
 8015402:	e7d6      	b.n	80153b2 <_free_r+0x26>
 8015404:	6825      	ldr	r5, [r4, #0]
 8015406:	1961      	adds	r1, r4, r5
 8015408:	428b      	cmp	r3, r1
 801540a:	bf04      	itt	eq
 801540c:	6819      	ldreq	r1, [r3, #0]
 801540e:	685b      	ldreq	r3, [r3, #4]
 8015410:	6063      	str	r3, [r4, #4]
 8015412:	bf04      	itt	eq
 8015414:	1949      	addeq	r1, r1, r5
 8015416:	6021      	streq	r1, [r4, #0]
 8015418:	6054      	str	r4, [r2, #4]
 801541a:	e7ca      	b.n	80153b2 <_free_r+0x26>
 801541c:	b003      	add	sp, #12
 801541e:	bd30      	pop	{r4, r5, pc}
 8015420:	20005770 	.word	0x20005770

08015424 <__ssputs_r>:
 8015424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015428:	688e      	ldr	r6, [r1, #8]
 801542a:	429e      	cmp	r6, r3
 801542c:	4682      	mov	sl, r0
 801542e:	460c      	mov	r4, r1
 8015430:	4690      	mov	r8, r2
 8015432:	461f      	mov	r7, r3
 8015434:	d838      	bhi.n	80154a8 <__ssputs_r+0x84>
 8015436:	898a      	ldrh	r2, [r1, #12]
 8015438:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801543c:	d032      	beq.n	80154a4 <__ssputs_r+0x80>
 801543e:	6825      	ldr	r5, [r4, #0]
 8015440:	6909      	ldr	r1, [r1, #16]
 8015442:	eba5 0901 	sub.w	r9, r5, r1
 8015446:	6965      	ldr	r5, [r4, #20]
 8015448:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801544c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015450:	3301      	adds	r3, #1
 8015452:	444b      	add	r3, r9
 8015454:	106d      	asrs	r5, r5, #1
 8015456:	429d      	cmp	r5, r3
 8015458:	bf38      	it	cc
 801545a:	461d      	movcc	r5, r3
 801545c:	0553      	lsls	r3, r2, #21
 801545e:	d531      	bpl.n	80154c4 <__ssputs_r+0xa0>
 8015460:	4629      	mov	r1, r5
 8015462:	f7fd fd69 	bl	8012f38 <_malloc_r>
 8015466:	4606      	mov	r6, r0
 8015468:	b950      	cbnz	r0, 8015480 <__ssputs_r+0x5c>
 801546a:	230c      	movs	r3, #12
 801546c:	f8ca 3000 	str.w	r3, [sl]
 8015470:	89a3      	ldrh	r3, [r4, #12]
 8015472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015476:	81a3      	strh	r3, [r4, #12]
 8015478:	f04f 30ff 	mov.w	r0, #4294967295
 801547c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015480:	6921      	ldr	r1, [r4, #16]
 8015482:	464a      	mov	r2, r9
 8015484:	f7fd fd21 	bl	8012eca <memcpy>
 8015488:	89a3      	ldrh	r3, [r4, #12]
 801548a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801548e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015492:	81a3      	strh	r3, [r4, #12]
 8015494:	6126      	str	r6, [r4, #16]
 8015496:	6165      	str	r5, [r4, #20]
 8015498:	444e      	add	r6, r9
 801549a:	eba5 0509 	sub.w	r5, r5, r9
 801549e:	6026      	str	r6, [r4, #0]
 80154a0:	60a5      	str	r5, [r4, #8]
 80154a2:	463e      	mov	r6, r7
 80154a4:	42be      	cmp	r6, r7
 80154a6:	d900      	bls.n	80154aa <__ssputs_r+0x86>
 80154a8:	463e      	mov	r6, r7
 80154aa:	6820      	ldr	r0, [r4, #0]
 80154ac:	4632      	mov	r2, r6
 80154ae:	4641      	mov	r1, r8
 80154b0:	f000 fae4 	bl	8015a7c <memmove>
 80154b4:	68a3      	ldr	r3, [r4, #8]
 80154b6:	1b9b      	subs	r3, r3, r6
 80154b8:	60a3      	str	r3, [r4, #8]
 80154ba:	6823      	ldr	r3, [r4, #0]
 80154bc:	4433      	add	r3, r6
 80154be:	6023      	str	r3, [r4, #0]
 80154c0:	2000      	movs	r0, #0
 80154c2:	e7db      	b.n	801547c <__ssputs_r+0x58>
 80154c4:	462a      	mov	r2, r5
 80154c6:	f000 faf3 	bl	8015ab0 <_realloc_r>
 80154ca:	4606      	mov	r6, r0
 80154cc:	2800      	cmp	r0, #0
 80154ce:	d1e1      	bne.n	8015494 <__ssputs_r+0x70>
 80154d0:	6921      	ldr	r1, [r4, #16]
 80154d2:	4650      	mov	r0, sl
 80154d4:	f7ff ff5a 	bl	801538c <_free_r>
 80154d8:	e7c7      	b.n	801546a <__ssputs_r+0x46>
	...

080154dc <_svfiprintf_r>:
 80154dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154e0:	4698      	mov	r8, r3
 80154e2:	898b      	ldrh	r3, [r1, #12]
 80154e4:	061b      	lsls	r3, r3, #24
 80154e6:	b09d      	sub	sp, #116	; 0x74
 80154e8:	4607      	mov	r7, r0
 80154ea:	460d      	mov	r5, r1
 80154ec:	4614      	mov	r4, r2
 80154ee:	d50e      	bpl.n	801550e <_svfiprintf_r+0x32>
 80154f0:	690b      	ldr	r3, [r1, #16]
 80154f2:	b963      	cbnz	r3, 801550e <_svfiprintf_r+0x32>
 80154f4:	2140      	movs	r1, #64	; 0x40
 80154f6:	f7fd fd1f 	bl	8012f38 <_malloc_r>
 80154fa:	6028      	str	r0, [r5, #0]
 80154fc:	6128      	str	r0, [r5, #16]
 80154fe:	b920      	cbnz	r0, 801550a <_svfiprintf_r+0x2e>
 8015500:	230c      	movs	r3, #12
 8015502:	603b      	str	r3, [r7, #0]
 8015504:	f04f 30ff 	mov.w	r0, #4294967295
 8015508:	e0d1      	b.n	80156ae <_svfiprintf_r+0x1d2>
 801550a:	2340      	movs	r3, #64	; 0x40
 801550c:	616b      	str	r3, [r5, #20]
 801550e:	2300      	movs	r3, #0
 8015510:	9309      	str	r3, [sp, #36]	; 0x24
 8015512:	2320      	movs	r3, #32
 8015514:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015518:	f8cd 800c 	str.w	r8, [sp, #12]
 801551c:	2330      	movs	r3, #48	; 0x30
 801551e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80156c8 <_svfiprintf_r+0x1ec>
 8015522:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015526:	f04f 0901 	mov.w	r9, #1
 801552a:	4623      	mov	r3, r4
 801552c:	469a      	mov	sl, r3
 801552e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015532:	b10a      	cbz	r2, 8015538 <_svfiprintf_r+0x5c>
 8015534:	2a25      	cmp	r2, #37	; 0x25
 8015536:	d1f9      	bne.n	801552c <_svfiprintf_r+0x50>
 8015538:	ebba 0b04 	subs.w	fp, sl, r4
 801553c:	d00b      	beq.n	8015556 <_svfiprintf_r+0x7a>
 801553e:	465b      	mov	r3, fp
 8015540:	4622      	mov	r2, r4
 8015542:	4629      	mov	r1, r5
 8015544:	4638      	mov	r0, r7
 8015546:	f7ff ff6d 	bl	8015424 <__ssputs_r>
 801554a:	3001      	adds	r0, #1
 801554c:	f000 80aa 	beq.w	80156a4 <_svfiprintf_r+0x1c8>
 8015550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015552:	445a      	add	r2, fp
 8015554:	9209      	str	r2, [sp, #36]	; 0x24
 8015556:	f89a 3000 	ldrb.w	r3, [sl]
 801555a:	2b00      	cmp	r3, #0
 801555c:	f000 80a2 	beq.w	80156a4 <_svfiprintf_r+0x1c8>
 8015560:	2300      	movs	r3, #0
 8015562:	f04f 32ff 	mov.w	r2, #4294967295
 8015566:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801556a:	f10a 0a01 	add.w	sl, sl, #1
 801556e:	9304      	str	r3, [sp, #16]
 8015570:	9307      	str	r3, [sp, #28]
 8015572:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015576:	931a      	str	r3, [sp, #104]	; 0x68
 8015578:	4654      	mov	r4, sl
 801557a:	2205      	movs	r2, #5
 801557c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015580:	4851      	ldr	r0, [pc, #324]	; (80156c8 <_svfiprintf_r+0x1ec>)
 8015582:	f7ea fe2d 	bl	80001e0 <memchr>
 8015586:	9a04      	ldr	r2, [sp, #16]
 8015588:	b9d8      	cbnz	r0, 80155c2 <_svfiprintf_r+0xe6>
 801558a:	06d0      	lsls	r0, r2, #27
 801558c:	bf44      	itt	mi
 801558e:	2320      	movmi	r3, #32
 8015590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015594:	0711      	lsls	r1, r2, #28
 8015596:	bf44      	itt	mi
 8015598:	232b      	movmi	r3, #43	; 0x2b
 801559a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801559e:	f89a 3000 	ldrb.w	r3, [sl]
 80155a2:	2b2a      	cmp	r3, #42	; 0x2a
 80155a4:	d015      	beq.n	80155d2 <_svfiprintf_r+0xf6>
 80155a6:	9a07      	ldr	r2, [sp, #28]
 80155a8:	4654      	mov	r4, sl
 80155aa:	2000      	movs	r0, #0
 80155ac:	f04f 0c0a 	mov.w	ip, #10
 80155b0:	4621      	mov	r1, r4
 80155b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80155b6:	3b30      	subs	r3, #48	; 0x30
 80155b8:	2b09      	cmp	r3, #9
 80155ba:	d94e      	bls.n	801565a <_svfiprintf_r+0x17e>
 80155bc:	b1b0      	cbz	r0, 80155ec <_svfiprintf_r+0x110>
 80155be:	9207      	str	r2, [sp, #28]
 80155c0:	e014      	b.n	80155ec <_svfiprintf_r+0x110>
 80155c2:	eba0 0308 	sub.w	r3, r0, r8
 80155c6:	fa09 f303 	lsl.w	r3, r9, r3
 80155ca:	4313      	orrs	r3, r2
 80155cc:	9304      	str	r3, [sp, #16]
 80155ce:	46a2      	mov	sl, r4
 80155d0:	e7d2      	b.n	8015578 <_svfiprintf_r+0x9c>
 80155d2:	9b03      	ldr	r3, [sp, #12]
 80155d4:	1d19      	adds	r1, r3, #4
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	9103      	str	r1, [sp, #12]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	bfbb      	ittet	lt
 80155de:	425b      	neglt	r3, r3
 80155e0:	f042 0202 	orrlt.w	r2, r2, #2
 80155e4:	9307      	strge	r3, [sp, #28]
 80155e6:	9307      	strlt	r3, [sp, #28]
 80155e8:	bfb8      	it	lt
 80155ea:	9204      	strlt	r2, [sp, #16]
 80155ec:	7823      	ldrb	r3, [r4, #0]
 80155ee:	2b2e      	cmp	r3, #46	; 0x2e
 80155f0:	d10c      	bne.n	801560c <_svfiprintf_r+0x130>
 80155f2:	7863      	ldrb	r3, [r4, #1]
 80155f4:	2b2a      	cmp	r3, #42	; 0x2a
 80155f6:	d135      	bne.n	8015664 <_svfiprintf_r+0x188>
 80155f8:	9b03      	ldr	r3, [sp, #12]
 80155fa:	1d1a      	adds	r2, r3, #4
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	9203      	str	r2, [sp, #12]
 8015600:	2b00      	cmp	r3, #0
 8015602:	bfb8      	it	lt
 8015604:	f04f 33ff 	movlt.w	r3, #4294967295
 8015608:	3402      	adds	r4, #2
 801560a:	9305      	str	r3, [sp, #20]
 801560c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80156d8 <_svfiprintf_r+0x1fc>
 8015610:	7821      	ldrb	r1, [r4, #0]
 8015612:	2203      	movs	r2, #3
 8015614:	4650      	mov	r0, sl
 8015616:	f7ea fde3 	bl	80001e0 <memchr>
 801561a:	b140      	cbz	r0, 801562e <_svfiprintf_r+0x152>
 801561c:	2340      	movs	r3, #64	; 0x40
 801561e:	eba0 000a 	sub.w	r0, r0, sl
 8015622:	fa03 f000 	lsl.w	r0, r3, r0
 8015626:	9b04      	ldr	r3, [sp, #16]
 8015628:	4303      	orrs	r3, r0
 801562a:	3401      	adds	r4, #1
 801562c:	9304      	str	r3, [sp, #16]
 801562e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015632:	4826      	ldr	r0, [pc, #152]	; (80156cc <_svfiprintf_r+0x1f0>)
 8015634:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015638:	2206      	movs	r2, #6
 801563a:	f7ea fdd1 	bl	80001e0 <memchr>
 801563e:	2800      	cmp	r0, #0
 8015640:	d038      	beq.n	80156b4 <_svfiprintf_r+0x1d8>
 8015642:	4b23      	ldr	r3, [pc, #140]	; (80156d0 <_svfiprintf_r+0x1f4>)
 8015644:	bb1b      	cbnz	r3, 801568e <_svfiprintf_r+0x1b2>
 8015646:	9b03      	ldr	r3, [sp, #12]
 8015648:	3307      	adds	r3, #7
 801564a:	f023 0307 	bic.w	r3, r3, #7
 801564e:	3308      	adds	r3, #8
 8015650:	9303      	str	r3, [sp, #12]
 8015652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015654:	4433      	add	r3, r6
 8015656:	9309      	str	r3, [sp, #36]	; 0x24
 8015658:	e767      	b.n	801552a <_svfiprintf_r+0x4e>
 801565a:	fb0c 3202 	mla	r2, ip, r2, r3
 801565e:	460c      	mov	r4, r1
 8015660:	2001      	movs	r0, #1
 8015662:	e7a5      	b.n	80155b0 <_svfiprintf_r+0xd4>
 8015664:	2300      	movs	r3, #0
 8015666:	3401      	adds	r4, #1
 8015668:	9305      	str	r3, [sp, #20]
 801566a:	4619      	mov	r1, r3
 801566c:	f04f 0c0a 	mov.w	ip, #10
 8015670:	4620      	mov	r0, r4
 8015672:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015676:	3a30      	subs	r2, #48	; 0x30
 8015678:	2a09      	cmp	r2, #9
 801567a:	d903      	bls.n	8015684 <_svfiprintf_r+0x1a8>
 801567c:	2b00      	cmp	r3, #0
 801567e:	d0c5      	beq.n	801560c <_svfiprintf_r+0x130>
 8015680:	9105      	str	r1, [sp, #20]
 8015682:	e7c3      	b.n	801560c <_svfiprintf_r+0x130>
 8015684:	fb0c 2101 	mla	r1, ip, r1, r2
 8015688:	4604      	mov	r4, r0
 801568a:	2301      	movs	r3, #1
 801568c:	e7f0      	b.n	8015670 <_svfiprintf_r+0x194>
 801568e:	ab03      	add	r3, sp, #12
 8015690:	9300      	str	r3, [sp, #0]
 8015692:	462a      	mov	r2, r5
 8015694:	4b0f      	ldr	r3, [pc, #60]	; (80156d4 <_svfiprintf_r+0x1f8>)
 8015696:	a904      	add	r1, sp, #16
 8015698:	4638      	mov	r0, r7
 801569a:	f7fd fd61 	bl	8013160 <_printf_float>
 801569e:	1c42      	adds	r2, r0, #1
 80156a0:	4606      	mov	r6, r0
 80156a2:	d1d6      	bne.n	8015652 <_svfiprintf_r+0x176>
 80156a4:	89ab      	ldrh	r3, [r5, #12]
 80156a6:	065b      	lsls	r3, r3, #25
 80156a8:	f53f af2c 	bmi.w	8015504 <_svfiprintf_r+0x28>
 80156ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80156ae:	b01d      	add	sp, #116	; 0x74
 80156b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156b4:	ab03      	add	r3, sp, #12
 80156b6:	9300      	str	r3, [sp, #0]
 80156b8:	462a      	mov	r2, r5
 80156ba:	4b06      	ldr	r3, [pc, #24]	; (80156d4 <_svfiprintf_r+0x1f8>)
 80156bc:	a904      	add	r1, sp, #16
 80156be:	4638      	mov	r0, r7
 80156c0:	f7fd fff2 	bl	80136a8 <_printf_i>
 80156c4:	e7eb      	b.n	801569e <_svfiprintf_r+0x1c2>
 80156c6:	bf00      	nop
 80156c8:	0801a124 	.word	0x0801a124
 80156cc:	0801a12e 	.word	0x0801a12e
 80156d0:	08013161 	.word	0x08013161
 80156d4:	08015425 	.word	0x08015425
 80156d8:	0801a12a 	.word	0x0801a12a

080156dc <__sfputc_r>:
 80156dc:	6893      	ldr	r3, [r2, #8]
 80156de:	3b01      	subs	r3, #1
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	b410      	push	{r4}
 80156e4:	6093      	str	r3, [r2, #8]
 80156e6:	da08      	bge.n	80156fa <__sfputc_r+0x1e>
 80156e8:	6994      	ldr	r4, [r2, #24]
 80156ea:	42a3      	cmp	r3, r4
 80156ec:	db01      	blt.n	80156f2 <__sfputc_r+0x16>
 80156ee:	290a      	cmp	r1, #10
 80156f0:	d103      	bne.n	80156fa <__sfputc_r+0x1e>
 80156f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156f6:	f7fe b9ff 	b.w	8013af8 <__swbuf_r>
 80156fa:	6813      	ldr	r3, [r2, #0]
 80156fc:	1c58      	adds	r0, r3, #1
 80156fe:	6010      	str	r0, [r2, #0]
 8015700:	7019      	strb	r1, [r3, #0]
 8015702:	4608      	mov	r0, r1
 8015704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015708:	4770      	bx	lr

0801570a <__sfputs_r>:
 801570a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801570c:	4606      	mov	r6, r0
 801570e:	460f      	mov	r7, r1
 8015710:	4614      	mov	r4, r2
 8015712:	18d5      	adds	r5, r2, r3
 8015714:	42ac      	cmp	r4, r5
 8015716:	d101      	bne.n	801571c <__sfputs_r+0x12>
 8015718:	2000      	movs	r0, #0
 801571a:	e007      	b.n	801572c <__sfputs_r+0x22>
 801571c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015720:	463a      	mov	r2, r7
 8015722:	4630      	mov	r0, r6
 8015724:	f7ff ffda 	bl	80156dc <__sfputc_r>
 8015728:	1c43      	adds	r3, r0, #1
 801572a:	d1f3      	bne.n	8015714 <__sfputs_r+0xa>
 801572c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015730 <_vfiprintf_r>:
 8015730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015734:	460d      	mov	r5, r1
 8015736:	b09d      	sub	sp, #116	; 0x74
 8015738:	4614      	mov	r4, r2
 801573a:	4698      	mov	r8, r3
 801573c:	4606      	mov	r6, r0
 801573e:	b118      	cbz	r0, 8015748 <_vfiprintf_r+0x18>
 8015740:	6983      	ldr	r3, [r0, #24]
 8015742:	b90b      	cbnz	r3, 8015748 <_vfiprintf_r+0x18>
 8015744:	f7fd fafc 	bl	8012d40 <__sinit>
 8015748:	4b89      	ldr	r3, [pc, #548]	; (8015970 <_vfiprintf_r+0x240>)
 801574a:	429d      	cmp	r5, r3
 801574c:	d11b      	bne.n	8015786 <_vfiprintf_r+0x56>
 801574e:	6875      	ldr	r5, [r6, #4]
 8015750:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015752:	07d9      	lsls	r1, r3, #31
 8015754:	d405      	bmi.n	8015762 <_vfiprintf_r+0x32>
 8015756:	89ab      	ldrh	r3, [r5, #12]
 8015758:	059a      	lsls	r2, r3, #22
 801575a:	d402      	bmi.n	8015762 <_vfiprintf_r+0x32>
 801575c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801575e:	f7fd fbb2 	bl	8012ec6 <__retarget_lock_acquire_recursive>
 8015762:	89ab      	ldrh	r3, [r5, #12]
 8015764:	071b      	lsls	r3, r3, #28
 8015766:	d501      	bpl.n	801576c <_vfiprintf_r+0x3c>
 8015768:	692b      	ldr	r3, [r5, #16]
 801576a:	b9eb      	cbnz	r3, 80157a8 <_vfiprintf_r+0x78>
 801576c:	4629      	mov	r1, r5
 801576e:	4630      	mov	r0, r6
 8015770:	f7fe fa26 	bl	8013bc0 <__swsetup_r>
 8015774:	b1c0      	cbz	r0, 80157a8 <_vfiprintf_r+0x78>
 8015776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015778:	07dc      	lsls	r4, r3, #31
 801577a:	d50e      	bpl.n	801579a <_vfiprintf_r+0x6a>
 801577c:	f04f 30ff 	mov.w	r0, #4294967295
 8015780:	b01d      	add	sp, #116	; 0x74
 8015782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015786:	4b7b      	ldr	r3, [pc, #492]	; (8015974 <_vfiprintf_r+0x244>)
 8015788:	429d      	cmp	r5, r3
 801578a:	d101      	bne.n	8015790 <_vfiprintf_r+0x60>
 801578c:	68b5      	ldr	r5, [r6, #8]
 801578e:	e7df      	b.n	8015750 <_vfiprintf_r+0x20>
 8015790:	4b79      	ldr	r3, [pc, #484]	; (8015978 <_vfiprintf_r+0x248>)
 8015792:	429d      	cmp	r5, r3
 8015794:	bf08      	it	eq
 8015796:	68f5      	ldreq	r5, [r6, #12]
 8015798:	e7da      	b.n	8015750 <_vfiprintf_r+0x20>
 801579a:	89ab      	ldrh	r3, [r5, #12]
 801579c:	0598      	lsls	r0, r3, #22
 801579e:	d4ed      	bmi.n	801577c <_vfiprintf_r+0x4c>
 80157a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80157a2:	f7fd fb91 	bl	8012ec8 <__retarget_lock_release_recursive>
 80157a6:	e7e9      	b.n	801577c <_vfiprintf_r+0x4c>
 80157a8:	2300      	movs	r3, #0
 80157aa:	9309      	str	r3, [sp, #36]	; 0x24
 80157ac:	2320      	movs	r3, #32
 80157ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80157b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80157b6:	2330      	movs	r3, #48	; 0x30
 80157b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801597c <_vfiprintf_r+0x24c>
 80157bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80157c0:	f04f 0901 	mov.w	r9, #1
 80157c4:	4623      	mov	r3, r4
 80157c6:	469a      	mov	sl, r3
 80157c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80157cc:	b10a      	cbz	r2, 80157d2 <_vfiprintf_r+0xa2>
 80157ce:	2a25      	cmp	r2, #37	; 0x25
 80157d0:	d1f9      	bne.n	80157c6 <_vfiprintf_r+0x96>
 80157d2:	ebba 0b04 	subs.w	fp, sl, r4
 80157d6:	d00b      	beq.n	80157f0 <_vfiprintf_r+0xc0>
 80157d8:	465b      	mov	r3, fp
 80157da:	4622      	mov	r2, r4
 80157dc:	4629      	mov	r1, r5
 80157de:	4630      	mov	r0, r6
 80157e0:	f7ff ff93 	bl	801570a <__sfputs_r>
 80157e4:	3001      	adds	r0, #1
 80157e6:	f000 80aa 	beq.w	801593e <_vfiprintf_r+0x20e>
 80157ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80157ec:	445a      	add	r2, fp
 80157ee:	9209      	str	r2, [sp, #36]	; 0x24
 80157f0:	f89a 3000 	ldrb.w	r3, [sl]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	f000 80a2 	beq.w	801593e <_vfiprintf_r+0x20e>
 80157fa:	2300      	movs	r3, #0
 80157fc:	f04f 32ff 	mov.w	r2, #4294967295
 8015800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015804:	f10a 0a01 	add.w	sl, sl, #1
 8015808:	9304      	str	r3, [sp, #16]
 801580a:	9307      	str	r3, [sp, #28]
 801580c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015810:	931a      	str	r3, [sp, #104]	; 0x68
 8015812:	4654      	mov	r4, sl
 8015814:	2205      	movs	r2, #5
 8015816:	f814 1b01 	ldrb.w	r1, [r4], #1
 801581a:	4858      	ldr	r0, [pc, #352]	; (801597c <_vfiprintf_r+0x24c>)
 801581c:	f7ea fce0 	bl	80001e0 <memchr>
 8015820:	9a04      	ldr	r2, [sp, #16]
 8015822:	b9d8      	cbnz	r0, 801585c <_vfiprintf_r+0x12c>
 8015824:	06d1      	lsls	r1, r2, #27
 8015826:	bf44      	itt	mi
 8015828:	2320      	movmi	r3, #32
 801582a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801582e:	0713      	lsls	r3, r2, #28
 8015830:	bf44      	itt	mi
 8015832:	232b      	movmi	r3, #43	; 0x2b
 8015834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015838:	f89a 3000 	ldrb.w	r3, [sl]
 801583c:	2b2a      	cmp	r3, #42	; 0x2a
 801583e:	d015      	beq.n	801586c <_vfiprintf_r+0x13c>
 8015840:	9a07      	ldr	r2, [sp, #28]
 8015842:	4654      	mov	r4, sl
 8015844:	2000      	movs	r0, #0
 8015846:	f04f 0c0a 	mov.w	ip, #10
 801584a:	4621      	mov	r1, r4
 801584c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015850:	3b30      	subs	r3, #48	; 0x30
 8015852:	2b09      	cmp	r3, #9
 8015854:	d94e      	bls.n	80158f4 <_vfiprintf_r+0x1c4>
 8015856:	b1b0      	cbz	r0, 8015886 <_vfiprintf_r+0x156>
 8015858:	9207      	str	r2, [sp, #28]
 801585a:	e014      	b.n	8015886 <_vfiprintf_r+0x156>
 801585c:	eba0 0308 	sub.w	r3, r0, r8
 8015860:	fa09 f303 	lsl.w	r3, r9, r3
 8015864:	4313      	orrs	r3, r2
 8015866:	9304      	str	r3, [sp, #16]
 8015868:	46a2      	mov	sl, r4
 801586a:	e7d2      	b.n	8015812 <_vfiprintf_r+0xe2>
 801586c:	9b03      	ldr	r3, [sp, #12]
 801586e:	1d19      	adds	r1, r3, #4
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	9103      	str	r1, [sp, #12]
 8015874:	2b00      	cmp	r3, #0
 8015876:	bfbb      	ittet	lt
 8015878:	425b      	neglt	r3, r3
 801587a:	f042 0202 	orrlt.w	r2, r2, #2
 801587e:	9307      	strge	r3, [sp, #28]
 8015880:	9307      	strlt	r3, [sp, #28]
 8015882:	bfb8      	it	lt
 8015884:	9204      	strlt	r2, [sp, #16]
 8015886:	7823      	ldrb	r3, [r4, #0]
 8015888:	2b2e      	cmp	r3, #46	; 0x2e
 801588a:	d10c      	bne.n	80158a6 <_vfiprintf_r+0x176>
 801588c:	7863      	ldrb	r3, [r4, #1]
 801588e:	2b2a      	cmp	r3, #42	; 0x2a
 8015890:	d135      	bne.n	80158fe <_vfiprintf_r+0x1ce>
 8015892:	9b03      	ldr	r3, [sp, #12]
 8015894:	1d1a      	adds	r2, r3, #4
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	9203      	str	r2, [sp, #12]
 801589a:	2b00      	cmp	r3, #0
 801589c:	bfb8      	it	lt
 801589e:	f04f 33ff 	movlt.w	r3, #4294967295
 80158a2:	3402      	adds	r4, #2
 80158a4:	9305      	str	r3, [sp, #20]
 80158a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801598c <_vfiprintf_r+0x25c>
 80158aa:	7821      	ldrb	r1, [r4, #0]
 80158ac:	2203      	movs	r2, #3
 80158ae:	4650      	mov	r0, sl
 80158b0:	f7ea fc96 	bl	80001e0 <memchr>
 80158b4:	b140      	cbz	r0, 80158c8 <_vfiprintf_r+0x198>
 80158b6:	2340      	movs	r3, #64	; 0x40
 80158b8:	eba0 000a 	sub.w	r0, r0, sl
 80158bc:	fa03 f000 	lsl.w	r0, r3, r0
 80158c0:	9b04      	ldr	r3, [sp, #16]
 80158c2:	4303      	orrs	r3, r0
 80158c4:	3401      	adds	r4, #1
 80158c6:	9304      	str	r3, [sp, #16]
 80158c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158cc:	482c      	ldr	r0, [pc, #176]	; (8015980 <_vfiprintf_r+0x250>)
 80158ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80158d2:	2206      	movs	r2, #6
 80158d4:	f7ea fc84 	bl	80001e0 <memchr>
 80158d8:	2800      	cmp	r0, #0
 80158da:	d03f      	beq.n	801595c <_vfiprintf_r+0x22c>
 80158dc:	4b29      	ldr	r3, [pc, #164]	; (8015984 <_vfiprintf_r+0x254>)
 80158de:	bb1b      	cbnz	r3, 8015928 <_vfiprintf_r+0x1f8>
 80158e0:	9b03      	ldr	r3, [sp, #12]
 80158e2:	3307      	adds	r3, #7
 80158e4:	f023 0307 	bic.w	r3, r3, #7
 80158e8:	3308      	adds	r3, #8
 80158ea:	9303      	str	r3, [sp, #12]
 80158ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158ee:	443b      	add	r3, r7
 80158f0:	9309      	str	r3, [sp, #36]	; 0x24
 80158f2:	e767      	b.n	80157c4 <_vfiprintf_r+0x94>
 80158f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80158f8:	460c      	mov	r4, r1
 80158fa:	2001      	movs	r0, #1
 80158fc:	e7a5      	b.n	801584a <_vfiprintf_r+0x11a>
 80158fe:	2300      	movs	r3, #0
 8015900:	3401      	adds	r4, #1
 8015902:	9305      	str	r3, [sp, #20]
 8015904:	4619      	mov	r1, r3
 8015906:	f04f 0c0a 	mov.w	ip, #10
 801590a:	4620      	mov	r0, r4
 801590c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015910:	3a30      	subs	r2, #48	; 0x30
 8015912:	2a09      	cmp	r2, #9
 8015914:	d903      	bls.n	801591e <_vfiprintf_r+0x1ee>
 8015916:	2b00      	cmp	r3, #0
 8015918:	d0c5      	beq.n	80158a6 <_vfiprintf_r+0x176>
 801591a:	9105      	str	r1, [sp, #20]
 801591c:	e7c3      	b.n	80158a6 <_vfiprintf_r+0x176>
 801591e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015922:	4604      	mov	r4, r0
 8015924:	2301      	movs	r3, #1
 8015926:	e7f0      	b.n	801590a <_vfiprintf_r+0x1da>
 8015928:	ab03      	add	r3, sp, #12
 801592a:	9300      	str	r3, [sp, #0]
 801592c:	462a      	mov	r2, r5
 801592e:	4b16      	ldr	r3, [pc, #88]	; (8015988 <_vfiprintf_r+0x258>)
 8015930:	a904      	add	r1, sp, #16
 8015932:	4630      	mov	r0, r6
 8015934:	f7fd fc14 	bl	8013160 <_printf_float>
 8015938:	4607      	mov	r7, r0
 801593a:	1c78      	adds	r0, r7, #1
 801593c:	d1d6      	bne.n	80158ec <_vfiprintf_r+0x1bc>
 801593e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015940:	07d9      	lsls	r1, r3, #31
 8015942:	d405      	bmi.n	8015950 <_vfiprintf_r+0x220>
 8015944:	89ab      	ldrh	r3, [r5, #12]
 8015946:	059a      	lsls	r2, r3, #22
 8015948:	d402      	bmi.n	8015950 <_vfiprintf_r+0x220>
 801594a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801594c:	f7fd fabc 	bl	8012ec8 <__retarget_lock_release_recursive>
 8015950:	89ab      	ldrh	r3, [r5, #12]
 8015952:	065b      	lsls	r3, r3, #25
 8015954:	f53f af12 	bmi.w	801577c <_vfiprintf_r+0x4c>
 8015958:	9809      	ldr	r0, [sp, #36]	; 0x24
 801595a:	e711      	b.n	8015780 <_vfiprintf_r+0x50>
 801595c:	ab03      	add	r3, sp, #12
 801595e:	9300      	str	r3, [sp, #0]
 8015960:	462a      	mov	r2, r5
 8015962:	4b09      	ldr	r3, [pc, #36]	; (8015988 <_vfiprintf_r+0x258>)
 8015964:	a904      	add	r1, sp, #16
 8015966:	4630      	mov	r0, r6
 8015968:	f7fd fe9e 	bl	80136a8 <_printf_i>
 801596c:	e7e4      	b.n	8015938 <_vfiprintf_r+0x208>
 801596e:	bf00      	nop
 8015970:	08019ec0 	.word	0x08019ec0
 8015974:	08019ee0 	.word	0x08019ee0
 8015978:	08019ea0 	.word	0x08019ea0
 801597c:	0801a124 	.word	0x0801a124
 8015980:	0801a12e 	.word	0x0801a12e
 8015984:	08013161 	.word	0x08013161
 8015988:	0801570b 	.word	0x0801570b
 801598c:	0801a12a 	.word	0x0801a12a

08015990 <_read_r>:
 8015990:	b538      	push	{r3, r4, r5, lr}
 8015992:	4d07      	ldr	r5, [pc, #28]	; (80159b0 <_read_r+0x20>)
 8015994:	4604      	mov	r4, r0
 8015996:	4608      	mov	r0, r1
 8015998:	4611      	mov	r1, r2
 801599a:	2200      	movs	r2, #0
 801599c:	602a      	str	r2, [r5, #0]
 801599e:	461a      	mov	r2, r3
 80159a0:	f7fc ff09 	bl	80127b6 <_read>
 80159a4:	1c43      	adds	r3, r0, #1
 80159a6:	d102      	bne.n	80159ae <_read_r+0x1e>
 80159a8:	682b      	ldr	r3, [r5, #0]
 80159aa:	b103      	cbz	r3, 80159ae <_read_r+0x1e>
 80159ac:	6023      	str	r3, [r4, #0]
 80159ae:	bd38      	pop	{r3, r4, r5, pc}
 80159b0:	20005778 	.word	0x20005778

080159b4 <__assert_func>:
 80159b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80159b6:	4614      	mov	r4, r2
 80159b8:	461a      	mov	r2, r3
 80159ba:	4b09      	ldr	r3, [pc, #36]	; (80159e0 <__assert_func+0x2c>)
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	4605      	mov	r5, r0
 80159c0:	68d8      	ldr	r0, [r3, #12]
 80159c2:	b14c      	cbz	r4, 80159d8 <__assert_func+0x24>
 80159c4:	4b07      	ldr	r3, [pc, #28]	; (80159e4 <__assert_func+0x30>)
 80159c6:	9100      	str	r1, [sp, #0]
 80159c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80159cc:	4906      	ldr	r1, [pc, #24]	; (80159e8 <__assert_func+0x34>)
 80159ce:	462b      	mov	r3, r5
 80159d0:	f000 f80e 	bl	80159f0 <fiprintf>
 80159d4:	f000 f8a8 	bl	8015b28 <abort>
 80159d8:	4b04      	ldr	r3, [pc, #16]	; (80159ec <__assert_func+0x38>)
 80159da:	461c      	mov	r4, r3
 80159dc:	e7f3      	b.n	80159c6 <__assert_func+0x12>
 80159de:	bf00      	nop
 80159e0:	20000080 	.word	0x20000080
 80159e4:	0801a135 	.word	0x0801a135
 80159e8:	0801a142 	.word	0x0801a142
 80159ec:	0801a170 	.word	0x0801a170

080159f0 <fiprintf>:
 80159f0:	b40e      	push	{r1, r2, r3}
 80159f2:	b503      	push	{r0, r1, lr}
 80159f4:	4601      	mov	r1, r0
 80159f6:	ab03      	add	r3, sp, #12
 80159f8:	4805      	ldr	r0, [pc, #20]	; (8015a10 <fiprintf+0x20>)
 80159fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80159fe:	6800      	ldr	r0, [r0, #0]
 8015a00:	9301      	str	r3, [sp, #4]
 8015a02:	f7ff fe95 	bl	8015730 <_vfiprintf_r>
 8015a06:	b002      	add	sp, #8
 8015a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a0c:	b003      	add	sp, #12
 8015a0e:	4770      	bx	lr
 8015a10:	20000080 	.word	0x20000080

08015a14 <_fstat_r>:
 8015a14:	b538      	push	{r3, r4, r5, lr}
 8015a16:	4d07      	ldr	r5, [pc, #28]	; (8015a34 <_fstat_r+0x20>)
 8015a18:	2300      	movs	r3, #0
 8015a1a:	4604      	mov	r4, r0
 8015a1c:	4608      	mov	r0, r1
 8015a1e:	4611      	mov	r1, r2
 8015a20:	602b      	str	r3, [r5, #0]
 8015a22:	f7fc ffac 	bl	801297e <_fstat>
 8015a26:	1c43      	adds	r3, r0, #1
 8015a28:	d102      	bne.n	8015a30 <_fstat_r+0x1c>
 8015a2a:	682b      	ldr	r3, [r5, #0]
 8015a2c:	b103      	cbz	r3, 8015a30 <_fstat_r+0x1c>
 8015a2e:	6023      	str	r3, [r4, #0]
 8015a30:	bd38      	pop	{r3, r4, r5, pc}
 8015a32:	bf00      	nop
 8015a34:	20005778 	.word	0x20005778

08015a38 <_isatty_r>:
 8015a38:	b538      	push	{r3, r4, r5, lr}
 8015a3a:	4d06      	ldr	r5, [pc, #24]	; (8015a54 <_isatty_r+0x1c>)
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	4604      	mov	r4, r0
 8015a40:	4608      	mov	r0, r1
 8015a42:	602b      	str	r3, [r5, #0]
 8015a44:	f7fd f902 	bl	8012c4c <_isatty>
 8015a48:	1c43      	adds	r3, r0, #1
 8015a4a:	d102      	bne.n	8015a52 <_isatty_r+0x1a>
 8015a4c:	682b      	ldr	r3, [r5, #0]
 8015a4e:	b103      	cbz	r3, 8015a52 <_isatty_r+0x1a>
 8015a50:	6023      	str	r3, [r4, #0]
 8015a52:	bd38      	pop	{r3, r4, r5, pc}
 8015a54:	20005778 	.word	0x20005778

08015a58 <__ascii_mbtowc>:
 8015a58:	b082      	sub	sp, #8
 8015a5a:	b901      	cbnz	r1, 8015a5e <__ascii_mbtowc+0x6>
 8015a5c:	a901      	add	r1, sp, #4
 8015a5e:	b142      	cbz	r2, 8015a72 <__ascii_mbtowc+0x1a>
 8015a60:	b14b      	cbz	r3, 8015a76 <__ascii_mbtowc+0x1e>
 8015a62:	7813      	ldrb	r3, [r2, #0]
 8015a64:	600b      	str	r3, [r1, #0]
 8015a66:	7812      	ldrb	r2, [r2, #0]
 8015a68:	1e10      	subs	r0, r2, #0
 8015a6a:	bf18      	it	ne
 8015a6c:	2001      	movne	r0, #1
 8015a6e:	b002      	add	sp, #8
 8015a70:	4770      	bx	lr
 8015a72:	4610      	mov	r0, r2
 8015a74:	e7fb      	b.n	8015a6e <__ascii_mbtowc+0x16>
 8015a76:	f06f 0001 	mvn.w	r0, #1
 8015a7a:	e7f8      	b.n	8015a6e <__ascii_mbtowc+0x16>

08015a7c <memmove>:
 8015a7c:	4288      	cmp	r0, r1
 8015a7e:	b510      	push	{r4, lr}
 8015a80:	eb01 0402 	add.w	r4, r1, r2
 8015a84:	d902      	bls.n	8015a8c <memmove+0x10>
 8015a86:	4284      	cmp	r4, r0
 8015a88:	4623      	mov	r3, r4
 8015a8a:	d807      	bhi.n	8015a9c <memmove+0x20>
 8015a8c:	1e43      	subs	r3, r0, #1
 8015a8e:	42a1      	cmp	r1, r4
 8015a90:	d008      	beq.n	8015aa4 <memmove+0x28>
 8015a92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015a96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015a9a:	e7f8      	b.n	8015a8e <memmove+0x12>
 8015a9c:	4402      	add	r2, r0
 8015a9e:	4601      	mov	r1, r0
 8015aa0:	428a      	cmp	r2, r1
 8015aa2:	d100      	bne.n	8015aa6 <memmove+0x2a>
 8015aa4:	bd10      	pop	{r4, pc}
 8015aa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015aaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015aae:	e7f7      	b.n	8015aa0 <memmove+0x24>

08015ab0 <_realloc_r>:
 8015ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ab4:	4680      	mov	r8, r0
 8015ab6:	4614      	mov	r4, r2
 8015ab8:	460e      	mov	r6, r1
 8015aba:	b921      	cbnz	r1, 8015ac6 <_realloc_r+0x16>
 8015abc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ac0:	4611      	mov	r1, r2
 8015ac2:	f7fd ba39 	b.w	8012f38 <_malloc_r>
 8015ac6:	b92a      	cbnz	r2, 8015ad4 <_realloc_r+0x24>
 8015ac8:	f7ff fc60 	bl	801538c <_free_r>
 8015acc:	4625      	mov	r5, r4
 8015ace:	4628      	mov	r0, r5
 8015ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ad4:	f000 f82f 	bl	8015b36 <_malloc_usable_size_r>
 8015ad8:	4284      	cmp	r4, r0
 8015ada:	4607      	mov	r7, r0
 8015adc:	d802      	bhi.n	8015ae4 <_realloc_r+0x34>
 8015ade:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015ae2:	d812      	bhi.n	8015b0a <_realloc_r+0x5a>
 8015ae4:	4621      	mov	r1, r4
 8015ae6:	4640      	mov	r0, r8
 8015ae8:	f7fd fa26 	bl	8012f38 <_malloc_r>
 8015aec:	4605      	mov	r5, r0
 8015aee:	2800      	cmp	r0, #0
 8015af0:	d0ed      	beq.n	8015ace <_realloc_r+0x1e>
 8015af2:	42bc      	cmp	r4, r7
 8015af4:	4622      	mov	r2, r4
 8015af6:	4631      	mov	r1, r6
 8015af8:	bf28      	it	cs
 8015afa:	463a      	movcs	r2, r7
 8015afc:	f7fd f9e5 	bl	8012eca <memcpy>
 8015b00:	4631      	mov	r1, r6
 8015b02:	4640      	mov	r0, r8
 8015b04:	f7ff fc42 	bl	801538c <_free_r>
 8015b08:	e7e1      	b.n	8015ace <_realloc_r+0x1e>
 8015b0a:	4635      	mov	r5, r6
 8015b0c:	e7df      	b.n	8015ace <_realloc_r+0x1e>

08015b0e <__ascii_wctomb>:
 8015b0e:	b149      	cbz	r1, 8015b24 <__ascii_wctomb+0x16>
 8015b10:	2aff      	cmp	r2, #255	; 0xff
 8015b12:	bf85      	ittet	hi
 8015b14:	238a      	movhi	r3, #138	; 0x8a
 8015b16:	6003      	strhi	r3, [r0, #0]
 8015b18:	700a      	strbls	r2, [r1, #0]
 8015b1a:	f04f 30ff 	movhi.w	r0, #4294967295
 8015b1e:	bf98      	it	ls
 8015b20:	2001      	movls	r0, #1
 8015b22:	4770      	bx	lr
 8015b24:	4608      	mov	r0, r1
 8015b26:	4770      	bx	lr

08015b28 <abort>:
 8015b28:	b508      	push	{r3, lr}
 8015b2a:	2006      	movs	r0, #6
 8015b2c:	f000 f834 	bl	8015b98 <raise>
 8015b30:	2001      	movs	r0, #1
 8015b32:	f000 f855 	bl	8015be0 <_exit>

08015b36 <_malloc_usable_size_r>:
 8015b36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b3a:	1f18      	subs	r0, r3, #4
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	bfbc      	itt	lt
 8015b40:	580b      	ldrlt	r3, [r1, r0]
 8015b42:	18c0      	addlt	r0, r0, r3
 8015b44:	4770      	bx	lr

08015b46 <_raise_r>:
 8015b46:	291f      	cmp	r1, #31
 8015b48:	b538      	push	{r3, r4, r5, lr}
 8015b4a:	4604      	mov	r4, r0
 8015b4c:	460d      	mov	r5, r1
 8015b4e:	d904      	bls.n	8015b5a <_raise_r+0x14>
 8015b50:	2316      	movs	r3, #22
 8015b52:	6003      	str	r3, [r0, #0]
 8015b54:	f04f 30ff 	mov.w	r0, #4294967295
 8015b58:	bd38      	pop	{r3, r4, r5, pc}
 8015b5a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015b5c:	b112      	cbz	r2, 8015b64 <_raise_r+0x1e>
 8015b5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015b62:	b94b      	cbnz	r3, 8015b78 <_raise_r+0x32>
 8015b64:	4620      	mov	r0, r4
 8015b66:	f000 f831 	bl	8015bcc <_getpid_r>
 8015b6a:	462a      	mov	r2, r5
 8015b6c:	4601      	mov	r1, r0
 8015b6e:	4620      	mov	r0, r4
 8015b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b74:	f000 b818 	b.w	8015ba8 <_kill_r>
 8015b78:	2b01      	cmp	r3, #1
 8015b7a:	d00a      	beq.n	8015b92 <_raise_r+0x4c>
 8015b7c:	1c59      	adds	r1, r3, #1
 8015b7e:	d103      	bne.n	8015b88 <_raise_r+0x42>
 8015b80:	2316      	movs	r3, #22
 8015b82:	6003      	str	r3, [r0, #0]
 8015b84:	2001      	movs	r0, #1
 8015b86:	e7e7      	b.n	8015b58 <_raise_r+0x12>
 8015b88:	2400      	movs	r4, #0
 8015b8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015b8e:	4628      	mov	r0, r5
 8015b90:	4798      	blx	r3
 8015b92:	2000      	movs	r0, #0
 8015b94:	e7e0      	b.n	8015b58 <_raise_r+0x12>
	...

08015b98 <raise>:
 8015b98:	4b02      	ldr	r3, [pc, #8]	; (8015ba4 <raise+0xc>)
 8015b9a:	4601      	mov	r1, r0
 8015b9c:	6818      	ldr	r0, [r3, #0]
 8015b9e:	f7ff bfd2 	b.w	8015b46 <_raise_r>
 8015ba2:	bf00      	nop
 8015ba4:	20000080 	.word	0x20000080

08015ba8 <_kill_r>:
 8015ba8:	b538      	push	{r3, r4, r5, lr}
 8015baa:	4d07      	ldr	r5, [pc, #28]	; (8015bc8 <_kill_r+0x20>)
 8015bac:	2300      	movs	r3, #0
 8015bae:	4604      	mov	r4, r0
 8015bb0:	4608      	mov	r0, r1
 8015bb2:	4611      	mov	r1, r2
 8015bb4:	602b      	str	r3, [r5, #0]
 8015bb6:	f000 f80b 	bl	8015bd0 <_kill>
 8015bba:	1c43      	adds	r3, r0, #1
 8015bbc:	d102      	bne.n	8015bc4 <_kill_r+0x1c>
 8015bbe:	682b      	ldr	r3, [r5, #0]
 8015bc0:	b103      	cbz	r3, 8015bc4 <_kill_r+0x1c>
 8015bc2:	6023      	str	r3, [r4, #0]
 8015bc4:	bd38      	pop	{r3, r4, r5, pc}
 8015bc6:	bf00      	nop
 8015bc8:	20005778 	.word	0x20005778

08015bcc <_getpid_r>:
 8015bcc:	f7fc beb4 	b.w	8012938 <_getpid>

08015bd0 <_kill>:
 8015bd0:	4b02      	ldr	r3, [pc, #8]	; (8015bdc <_kill+0xc>)
 8015bd2:	2258      	movs	r2, #88	; 0x58
 8015bd4:	601a      	str	r2, [r3, #0]
 8015bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8015bda:	4770      	bx	lr
 8015bdc:	20005778 	.word	0x20005778

08015be0 <_exit>:
 8015be0:	e7fe      	b.n	8015be0 <_exit>
	...

08015be4 <_init>:
 8015be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015be6:	bf00      	nop
 8015be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015bea:	bc08      	pop	{r3}
 8015bec:	469e      	mov	lr, r3
 8015bee:	4770      	bx	lr

08015bf0 <_fini>:
 8015bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bf2:	bf00      	nop
 8015bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015bf6:	bc08      	pop	{r3}
 8015bf8:	469e      	mov	lr, r3
 8015bfa:	4770      	bx	lr
