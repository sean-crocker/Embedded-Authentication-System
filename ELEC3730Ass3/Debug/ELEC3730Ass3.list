
ELEC3730Ass3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001187c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000041fc  08011a10  08011a10  00021a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015c0c  08015c0c  00030250  2**0
                  CONTENTS
  4 .ARM          00000008  08015c0c  08015c0c  00025c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015c14  08015c14  00030250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015c14  08015c14  00025c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015c18  08015c18  00025c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  08015c1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030250  2**0
                  CONTENTS
 10 .bss          0000623c  20000250  20000250  00030250  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000648c  2000648c  00030250  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029783  00000000  00000000  00030280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006efd  00000000  00000000  00059a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002408  00000000  00000000  00060900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002068  00000000  00000000  00062d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c07c  00000000  00000000  00064d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032b89  00000000  00000000  00090dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5057  00000000  00000000  000c3975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a89cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a764  00000000  00000000  001a8a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  001b3180  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000003c  00000000  00000000  001b31a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080119f4 	.word	0x080119f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	080119f4 	.word	0x080119f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <StartControlTask>:
#include "Ass-03.h"

enum State state = WELCOME;		// State of the system

void StartControlTask(void const * argument)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	osEvent event;												// Event structure to receive message from queue
	while(1) {
		event = osMessageGet(stateQueueHandle, osWaitForever);	// Wait and get message
 8000ef4:	4b4c      	ldr	r3, [pc, #304]	; (8001028 <StartControlTask+0x13c>)
 8000ef6:	6819      	ldr	r1, [r3, #0]
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	4618      	mov	r0, r3
 8000f02:	f00a f9cd 	bl	800b2a0 <osMessageGet>
		if (event.status == 0x10) {
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2b10      	cmp	r3, #16
 8000f0a:	f040 8088 	bne.w	800101e <StartControlTask+0x132>
			switch (event.value.v) {
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	2b07      	cmp	r3, #7
 8000f12:	f200 8085 	bhi.w	8001020 <StartControlTask+0x134>
 8000f16:	a201      	add	r2, pc, #4	; (adr r2, 8000f1c <StartControlTask+0x30>)
 8000f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1c:	08000f3d 	.word	0x08000f3d
 8000f20:	08000f5f 	.word	0x08000f5f
 8000f24:	08000f77 	.word	0x08000f77
 8000f28:	08000f8f 	.word	0x08000f8f
 8000f2c:	08000fa7 	.word	0x08000fa7
 8000f30:	08000fc7 	.word	0x08000fc7
 8000f34:	08000fdf 	.word	0x08000fdf
 8000f38:	08000fff 	.word	0x08000fff
				case (FINISHED):
					osTimerStop(messageTimerHandle);					// Stop the message timer
 8000f3c:	4b3b      	ldr	r3, [pc, #236]	; (800102c <StartControlTask+0x140>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f00a f827 	bl	800af94 <osTimerStop>
					osMessagePut(renderQueueHandle, FINISHED, osWaitForever);
 8000f46:	4b3a      	ldr	r3, [pc, #232]	; (8001030 <StartControlTask+0x144>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00a f965 	bl	800b220 <osMessagePut>
					state = WELCOME;
 8000f56:	4b37      	ldr	r3, [pc, #220]	; (8001034 <StartControlTask+0x148>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
					break;
 8000f5c:	e060      	b.n	8001020 <StartControlTask+0x134>
				case (REG_ID):
					osMessagePut(renderQueueHandle, REG_ID, osWaitForever);
 8000f5e:	4b34      	ldr	r3, [pc, #208]	; (8001030 <StartControlTask+0x144>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f04f 32ff 	mov.w	r2, #4294967295
 8000f66:	2101      	movs	r1, #1
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f00a f959 	bl	800b220 <osMessagePut>
					state = REGISTER_ID;
 8000f6e:	4b31      	ldr	r3, [pc, #196]	; (8001034 <StartControlTask+0x148>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
					break;
 8000f74:	e054      	b.n	8001020 <StartControlTask+0x134>
				case (REG_PIN):
					osMessagePut(renderQueueHandle, REG_PIN, osWaitForever);
 8000f76:	4b2e      	ldr	r3, [pc, #184]	; (8001030 <StartControlTask+0x144>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7e:	2102      	movs	r1, #2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f00a f94d 	bl	800b220 <osMessagePut>
					state = REGISTER_PIN;
 8000f86:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <StartControlTask+0x148>)
 8000f88:	2202      	movs	r2, #2
 8000f8a:	701a      	strb	r2, [r3, #0]
					break;
 8000f8c:	e048      	b.n	8001020 <StartControlTask+0x134>
				case (LOG_ID):
					osMessagePut(renderQueueHandle, LOG_ID, osWaitForever);
 8000f8e:	4b28      	ldr	r3, [pc, #160]	; (8001030 <StartControlTask+0x144>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f04f 32ff 	mov.w	r2, #4294967295
 8000f96:	2103      	movs	r1, #3
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f00a f941 	bl	800b220 <osMessagePut>
					state = LOGIN_ID;
 8000f9e:	4b25      	ldr	r3, [pc, #148]	; (8001034 <StartControlTask+0x148>)
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	701a      	strb	r2, [r3, #0]
					break;
 8000fa4:	e03c      	b.n	8001020 <StartControlTask+0x134>
				// Display error message for id not registered and change state to welcome
				case (LOG_ID_ERR):
					osMessagePut(renderQueueHandle, LOG_ID_ERR, osWaitForever);
 8000fa6:	4b22      	ldr	r3, [pc, #136]	; (8001030 <StartControlTask+0x144>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f04f 32ff 	mov.w	r2, #4294967295
 8000fae:	2104      	movs	r1, #4
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f00a f935 	bl	800b220 <osMessagePut>
					osTimerStart(messageTimerHandle, 2000);			// Start the message timer
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <StartControlTask+0x140>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f009 ffa4 	bl	800af0c <osTimerStart>
					break;
 8000fc4:	e02c      	b.n	8001020 <StartControlTask+0x134>
				// Display login screen with prompt to enter Pin and change state to login
				case (LOG_ID_OK):
					osMessagePut(renderQueueHandle, LOG_ID_OK, osWaitForever);
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <StartControlTask+0x144>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f04f 32ff 	mov.w	r2, #4294967295
 8000fce:	2105      	movs	r1, #5
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00a f925 	bl	800b220 <osMessagePut>
					state = LOGIN_PIN;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <StartControlTask+0x148>)
 8000fd8:	2204      	movs	r2, #4
 8000fda:	701a      	strb	r2, [r3, #0]
					break;
 8000fdc:	e020      	b.n	8001020 <StartControlTask+0x134>
				// Display "Access Denied" for 2 seconds then change state to welcome
				case (LOG_AUTH_ERR):
					osMessagePut(renderQueueHandle, LOG_AUTH_ERR, osWaitForever);
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <StartControlTask+0x144>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe6:	2106      	movs	r1, #6
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f00a f919 	bl	800b220 <osMessagePut>
					osTimerStart(messageTimerHandle, 2000);			// Start the message timer
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <StartControlTask+0x140>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f009 ff88 	bl	800af0c <osTimerStart>
					break;
 8000ffc:	e010      	b.n	8001020 <StartControlTask+0x134>
				// Display "Access Granted" for 2 seconds then change state to welcome
				case (LOG_AUTH_OK):
					osMessagePut(renderQueueHandle, LOG_AUTH_OK, osWaitForever);
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <StartControlTask+0x144>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f04f 32ff 	mov.w	r2, #4294967295
 8001006:	2107      	movs	r1, #7
 8001008:	4618      	mov	r0, r3
 800100a:	f00a f909 	bl	800b220 <osMessagePut>
					osTimerStart(messageTimerHandle, 2000);			// Start the message timer
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <StartControlTask+0x140>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001016:	4618      	mov	r0, r3
 8001018:	f009 ff78 	bl	800af0c <osTimerStart>
					break;
 800101c:	e000      	b.n	8001020 <StartControlTask+0x134>
			}
		}
 800101e:	bf00      	nop
		osDelay(100);
 8001020:	2064      	movs	r0, #100	; 0x64
 8001022:	f009 ff2b 	bl	800ae7c <osDelay>
		event = osMessageGet(stateQueueHandle, osWaitForever);	// Wait and get message
 8001026:	e765      	b.n	8000ef4 <StartControlTask+0x8>
 8001028:	20001564 	.word	0x20001564
 800102c:	20001570 	.word	0x20001570
 8001030:	20001568 	.word	0x20001568
 8001034:	2000026c 	.word	0x2000026c

08001038 <initialise>:
uint32_t byteswritten, bytesread; 	// File write/read counts
BYTE work[4096];         			// Working buffer
char rtext[256]; 					// File read buffer

void initialise()
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af02      	add	r7, sp, #8
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) != 0)							// Card detection status
 800103e:	2108      	movs	r1, #8
 8001040:	481e      	ldr	r0, [pc, #120]	; (80010bc <initialise+0x84>)
 8001042:	f003 ffe7 	bl	8005014 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <initialise+0x1a>
		printf("ERROR: No card detect\n");
 800104c:	481c      	ldr	r0, [pc, #112]	; (80010c0 <initialise+0x88>)
 800104e:	f00e fbdf 	bl	800f810 <puts>
	if (retSD != 0)															// SD link I/O driver link status
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <initialise+0x8c>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <initialise+0x28>
		printf("ERROR: Linking of SD disk I/O driver failed\n");
 800105a:	481b      	ldr	r0, [pc, #108]	; (80010c8 <initialise+0x90>)
 800105c:	f00e fbd8 	bl	800f810 <puts>
	if ((res = f_mount(&SDFatFs, (TCHAR const*)SDPath, 1)) != FR_OK)		// Register the file system object to the module
 8001060:	2201      	movs	r2, #1
 8001062:	491a      	ldr	r1, [pc, #104]	; (80010cc <initialise+0x94>)
 8001064:	481a      	ldr	r0, [pc, #104]	; (80010d0 <initialise+0x98>)
 8001066:	f009 f939 	bl	800a2dc <f_mount>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <initialise+0x9c>)
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <initialise+0x9c>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d005      	beq.n	8001086 <initialise+0x4e>
		printf("ERROR: Could not mount SD card (%d).\n", res);
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <initialise+0x9c>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4619      	mov	r1, r3
 8001080:	4815      	ldr	r0, [pc, #84]	; (80010d8 <initialise+0xa0>)
 8001082:	f00e fb3f 	bl	800f704 <iprintf>
	if ((res = f_mkfs(SDPath, FM_FAT32, 4096, work, sizeof work)) != FR_OK)	// Format the drive
 8001086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <initialise+0xa4>)
 800108e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001092:	2102      	movs	r1, #2
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <initialise+0x94>)
 8001096:	f009 f985 	bl	800a3a4 <f_mkfs>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <initialise+0x9c>)
 80010a0:	701a      	strb	r2, [r3, #0]
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <initialise+0x9c>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d005      	beq.n	80010b6 <initialise+0x7e>
		printf("ERROR: Could not create FAT file system on SD card (%d).\n", res);
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <initialise+0x9c>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4619      	mov	r1, r3
 80010b0:	480b      	ldr	r0, [pc, #44]	; (80010e0 <initialise+0xa8>)
 80010b2:	f00e fb27 	bl	800f704 <iprintf>
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	08011a24 	.word	0x08011a24
 80010c4:	20002500 	.word	0x20002500
 80010c8:	08011a3c 	.word	0x08011a3c
 80010cc:	20002504 	.word	0x20002504
 80010d0:	20000270 	.word	0x20000270
 80010d4:	200004a8 	.word	0x200004a8
 80010d8:	08011a68 	.word	0x08011a68
 80010dc:	200004ac 	.word	0x200004ac
 80010e0:	08011a90 	.word	0x08011a90

080010e4 <StartFileSystemTask>:
	// Close the open text file
	f_close(&MyFile);
}

void StartFileSystemTask(void const * argument)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80010ea:	af8c      	add	r7, sp, #560	; 0x230
 80010ec:	6078      	str	r0, [r7, #4]
	initialise(SDFatFs, res, work);
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <StartFileSystemTask+0x38>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	4c0a      	ldr	r4, [pc, #40]	; (8001120 <StartFileSystemTask+0x3c>)
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <StartFileSystemTask+0x40>)
 80010f8:	938b      	str	r3, [sp, #556]	; 0x22c
 80010fa:	928a      	str	r2, [sp, #552]	; 0x228
 80010fc:	4668      	mov	r0, sp
 80010fe:	f104 0310 	add.w	r3, r4, #16
 8001102:	f44f 720a 	mov.w	r2, #552	; 0x228
 8001106:	4619      	mov	r1, r3
 8001108:	f00d fde7 	bl	800ecda <memcpy>
 800110c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001110:	f7ff ff92 	bl	8001038 <initialise>
	if ((res = f_mkfs(SDPath, FM_FAT32, 4096, work, sizeof work)) != FR_OK)	// Format the drive
		printf("ERROR: Could not create FAT file system on SD card (%d).\n", res);
	*/

	while(1) {
		osDelay(100);
 8001114:	2064      	movs	r0, #100	; 0x64
 8001116:	f009 feb1 	bl	800ae7c <osDelay>
 800111a:	e7fb      	b.n	8001114 <StartFileSystemTask+0x30>
 800111c:	200004a8 	.word	0x200004a8
 8001120:	20000270 	.word	0x20000270
 8001124:	200004ac 	.word	0x200004ac

08001128 <StartKeypadTask>:
#include "Ass-03.h"

extern enum State state;		// State of the system

void StartKeypadTask(void const * argument)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	uint16_t keys[4];
	uint8_t index = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	osEvent event;							// Event structure to receive message from queue
	uint16_t display_text_x_pos = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	84bb      	strh	r3, [r7, #36]	; 0x24

	while(1) {
		event = osMessageGet(keypadQueueHandle, osWaitForever);	// Wait and get message
 800113a:	4b51      	ldr	r3, [pc, #324]	; (8001280 <StartKeypadTask+0x158>)
 800113c:	6819      	ldr	r1, [r3, #0]
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	f04f 32ff 	mov.w	r2, #4294967295
 8001146:	4618      	mov	r0, r3
 8001148:	f00a f8aa 	bl	800b2a0 <osMessageGet>
		if (event.status == 0x10) {
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b10      	cmp	r3, #16
 8001150:	d1f3      	bne.n	800113a <StartKeypadTask+0x12>
			keys[index] = event.value.v;		// Get key input from message queue and add it to the array
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001158:	b292      	uxth	r2, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	3328      	adds	r3, #40	; 0x28
 800115e:	443b      	add	r3, r7
 8001160:	f823 2c10 	strh.w	r2, [r3, #-16]
			index++;
 8001164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001168:	3301      	adds	r3, #1
 800116a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			char display[4] = "";
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
			switch (index) {
 8001172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001176:	3b01      	subs	r3, #1
 8001178:	2b03      	cmp	r3, #3
 800117a:	d817      	bhi.n	80011ac <StartKeypadTask+0x84>
 800117c:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <StartKeypadTask+0x5c>)
 800117e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001182:	bf00      	nop
 8001184:	08001195 	.word	0x08001195
 8001188:	0800119b 	.word	0x0800119b
 800118c:	080011a1 	.word	0x080011a1
 8001190:	080011a7 	.word	0x080011a7
				case 1:
					display_text_x_pos = 234;
 8001194:	23ea      	movs	r3, #234	; 0xea
 8001196:	84bb      	strh	r3, [r7, #36]	; 0x24
					break;
 8001198:	e008      	b.n	80011ac <StartKeypadTask+0x84>
				case 2:
					display_text_x_pos = 229;
 800119a:	23e5      	movs	r3, #229	; 0xe5
 800119c:	84bb      	strh	r3, [r7, #36]	; 0x24
					break;
 800119e:	e005      	b.n	80011ac <StartKeypadTask+0x84>
				case 3:
					display_text_x_pos = 223;
 80011a0:	23df      	movs	r3, #223	; 0xdf
 80011a2:	84bb      	strh	r3, [r7, #36]	; 0x24
					break;
 80011a4:	e002      	b.n	80011ac <StartKeypadTask+0x84>
				case 4:
					display_text_x_pos = 218;
 80011a6:	23da      	movs	r3, #218	; 0xda
 80011a8:	84bb      	strh	r3, [r7, #36]	; 0x24
					break;
 80011aa:	bf00      	nop
			}
			for (uint8_t i = 0; i < index; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80011b2:	e014      	b.n	80011de <StartKeypadTask+0xb6>
				sprintf(&display[i], "%d", keys[i]);
 80011b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011b8:	f107 0208 	add.w	r2, r7, #8
 80011bc:	18d0      	adds	r0, r2, r3
 80011be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	3328      	adds	r3, #40	; 0x28
 80011c6:	443b      	add	r3, r7
 80011c8:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80011cc:	461a      	mov	r2, r3
 80011ce:	492d      	ldr	r1, [pc, #180]	; (8001284 <StartKeypadTask+0x15c>)
 80011d0:	f00e fb36 	bl	800f840 <siprintf>
			for (uint8_t i = 0; i < index; i++)
 80011d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011d8:	3301      	adds	r3, #1
 80011da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80011de:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80011e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d3e4      	bcc.n	80011b4 <StartKeypadTask+0x8c>

			// TODO: Add mutex
			BSP_LCD_DisplayStringAt(display_text_x_pos, (uint16_t)92, (uint8_t*)display, LEFT_MODE);
 80011ea:	f107 0208 	add.w	r2, r7, #8
 80011ee:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80011f0:	2303      	movs	r3, #3
 80011f2:	215c      	movs	r1, #92	; 0x5c
 80011f4:	f001 fffe 	bl	80031f4 <BSP_LCD_DisplayStringAt>

			if ((state == LOGIN_ID && index == 3) || ((state == REGISTER_PIN || state == LOGIN_PIN) && index == 4)) {
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <StartKeypadTask+0x160>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d103      	bne.n	8001208 <StartKeypadTask+0xe0>
 8001200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001204:	2b03      	cmp	r3, #3
 8001206:	d00b      	beq.n	8001220 <StartKeypadTask+0xf8>
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <StartKeypadTask+0x160>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d003      	beq.n	8001218 <StartKeypadTask+0xf0>
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <StartKeypadTask+0x160>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b04      	cmp	r3, #4
 8001216:	d190      	bne.n	800113a <StartKeypadTask+0x12>
 8001218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800121c:	2b04      	cmp	r3, #4
 800121e:	d18c      	bne.n	800113a <StartKeypadTask+0x12>
				for (uint8_t i = 0; i < index; i++) {
 8001220:	2300      	movs	r3, #0
 8001222:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001226:	e00c      	b.n	8001242 <StartKeypadTask+0x11a>
					keys[i] = 0;
 8001228:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	3328      	adds	r3, #40	; 0x28
 8001230:	443b      	add	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	f823 2c10 	strh.w	r2, [r3, #-16]
				for (uint8_t i = 0; i < index; i++) {
 8001238:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800123c:	3301      	adds	r3, #1
 800123e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001242:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800124a:	429a      	cmp	r2, r3
 800124c:	d3ec      	bcc.n	8001228 <StartKeypadTask+0x100>
			    }
			    index = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			    if (state == LOGIN_ID) {
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <StartKeypadTask+0x160>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d108      	bne.n	800126e <StartKeypadTask+0x146>
			      osMessagePut(stateQueueHandle, LOG_ID_OK, osWaitForever);
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <StartKeypadTask+0x164>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	2105      	movs	r1, #5
 8001266:	4618      	mov	r0, r3
 8001268:	f009 ffda 	bl	800b220 <osMessagePut>
 800126c:	e765      	b.n	800113a <StartKeypadTask+0x12>
			      // TODO: Add invalid ID
			    } else {
			      osMessagePut(stateQueueHandle, WELCOME, osWaitForever);
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <StartKeypadTask+0x164>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f04f 32ff 	mov.w	r2, #4294967295
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f009 ffd1 	bl	800b220 <osMessagePut>
		event = osMessageGet(keypadQueueHandle, osWaitForever);	// Wait and get message
 800127e:	e75c      	b.n	800113a <StartKeypadTask+0x12>
 8001280:	2000156c 	.word	0x2000156c
 8001284:	08011b68 	.word	0x08011b68
 8001288:	2000026c 	.word	0x2000026c
 800128c:	20001564 	.word	0x20001564

08001290 <display_welcome>:

//extern enum State state;		// State of the system
extern enum Command;

void display_welcome()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);										// Clear the LCD and set background to white
 8001294:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001298:	f001 ff4e 	bl	8003138 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font20);											// Set the font to be used
 800129c:	4814      	ldr	r0, [pc, #80]	; (80012f0 <display_welcome+0x60>)
 800129e:	f001 ff2f 	bl	8003100 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);								// Set the text colour to black
 80012a2:	2000      	movs	r0, #0
 80012a4:	f001 ff1c 	bl	80030e0 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(191, 20, (uint8_t*)"WELCOME", LEFT_MODE);	// Display welcome statement
 80012a8:	2303      	movs	r3, #3
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <display_welcome+0x64>)
 80012ac:	2114      	movs	r1, #20
 80012ae:	20bf      	movs	r0, #191	; 0xbf
 80012b0:	f001 ffa0 	bl	80031f4 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font16);											// Set the font to be used for buttons
 80012b4:	4810      	ldr	r0, [pc, #64]	; (80012f8 <display_welcome+0x68>)
 80012b6:	f001 ff23 	bl	8003100 <BSP_LCD_SetFont>

	// TODO: Input Live Camera

	BSP_LCD_DrawRect(BTN_REGISTER_X_POS, BTN_REGISTER_Y_POS, BTN_WIDTH, BTN_HEIGHT);
 80012ba:	231e      	movs	r3, #30
 80012bc:	2264      	movs	r2, #100	; 0x64
 80012be:	215a      	movs	r1, #90	; 0x5a
 80012c0:	20be      	movs	r0, #190	; 0xbe
 80012c2:	f002 f8b1 	bl	8003428 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt((BTN_REGISTER_X_POS + BTN_REGISTER_TEXT_X_PADDING),
 80012c6:	2303      	movs	r3, #3
 80012c8:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <display_welcome+0x6c>)
 80012ca:	2161      	movs	r1, #97	; 0x61
 80012cc:	20c4      	movs	r0, #196	; 0xc4
 80012ce:	f001 ff91 	bl	80031f4 <BSP_LCD_DisplayStringAt>
			(BTN_REGISTER_Y_POS + BTN_TEXT_Y_PADDING), (uint8_t*)"Register", LEFT_MODE);

	BSP_LCD_DrawRect(BTN_LOGIN_X_POS, BTN_LOGIN_Y_POS, BTN_WIDTH, BTN_HEIGHT);
 80012d2:	231e      	movs	r3, #30
 80012d4:	2264      	movs	r2, #100	; 0x64
 80012d6:	218c      	movs	r1, #140	; 0x8c
 80012d8:	20be      	movs	r0, #190	; 0xbe
 80012da:	f002 f8a5 	bl	8003428 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt((BTN_LOGIN_X_POS + BTN_LOGIN_TEXT_X_PADDING),
 80012de:	2303      	movs	r3, #3
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <display_welcome+0x70>)
 80012e2:	2193      	movs	r1, #147	; 0x93
 80012e4:	20d4      	movs	r0, #212	; 0xd4
 80012e6:	f001 ff85 	bl	80031f4 <BSP_LCD_DisplayStringAt>
			(BTN_LOGIN_Y_POS + BTN_TEXT_Y_PADDING), (uint8_t*)"Login", LEFT_MODE);
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000005c 	.word	0x2000005c
 80012f4:	08011b6c 	.word	0x08011b6c
 80012f8:	20000054 	.word	0x20000054
 80012fc:	08011b74 	.word	0x08011b74
 8001300:	08011b80 	.word	0x08011b80

08001304 <display_keypad>:

void display_keypad()
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
	// TODO: Change if live preview is cleared
	//for (uint16_t y = 90; y <= 230; y++) {
	//	BSP_LCD_ClearStringLine(y);
	//}

	BSP_LCD_DrawRect(KEY_DISPLAY_X_POS, KEY_DISPLAY_Y_POS, KEY_DISPLAY_WIDTH, KEY_DISPLAY_HEIGHT);
 800130a:	2314      	movs	r3, #20
 800130c:	2250      	movs	r2, #80	; 0x50
 800130e:	215a      	movs	r1, #90	; 0x5a
 8001310:	20c8      	movs	r0, #200	; 0xc8
 8001312:	f002 f889 	bl	8003428 <BSP_LCD_DrawRect>
	uint16_t y_pos = KEY_BTN_Y_POS;
 8001316:	2378      	movs	r3, #120	; 0x78
 8001318:	82fb      	strh	r3, [r7, #22]
	uint8_t btn_number = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	757b      	strb	r3, [r7, #21]
	char key_value[1];
	for (int row = 1; row <= 3; row++) {
 800131e:	2301      	movs	r3, #1
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	e02c      	b.n	800137e <display_keypad+0x7a>
		uint16_t x_pos = KEY_BTN_X_POS;
 8001324:	23c8      	movs	r3, #200	; 0xc8
 8001326:	81fb      	strh	r3, [r7, #14]
		for (int column = 1; column <= 3; column++) {
 8001328:	2301      	movs	r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	e01e      	b.n	800136c <display_keypad+0x68>
			BSP_LCD_DrawRect(x_pos, y_pos, KEY_BTN_SIZE, KEY_BTN_SIZE);
 800132e:	8af9      	ldrh	r1, [r7, #22]
 8001330:	89f8      	ldrh	r0, [r7, #14]
 8001332:	2314      	movs	r3, #20
 8001334:	2214      	movs	r2, #20
 8001336:	f002 f877 	bl	8003428 <BSP_LCD_DrawRect>
			sprintf(key_value, "%d", ++btn_number);
 800133a:	7d7b      	ldrb	r3, [r7, #21]
 800133c:	3301      	adds	r3, #1
 800133e:	757b      	strb	r3, [r7, #21]
 8001340:	7d7a      	ldrb	r2, [r7, #21]
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	4917      	ldr	r1, [pc, #92]	; (80013a4 <display_keypad+0xa0>)
 8001346:	4618      	mov	r0, r3
 8001348:	f00e fa7a 	bl	800f840 <siprintf>
			BSP_LCD_DisplayStringAt((x_pos + 4), (y_pos + 2), (uint8_t*)key_value, LEFT_MODE);
 800134c:	89fb      	ldrh	r3, [r7, #14]
 800134e:	3304      	adds	r3, #4
 8001350:	b298      	uxth	r0, r3
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	3302      	adds	r3, #2
 8001356:	b299      	uxth	r1, r3
 8001358:	1d3a      	adds	r2, r7, #4
 800135a:	2303      	movs	r3, #3
 800135c:	f001 ff4a 	bl	80031f4 <BSP_LCD_DisplayStringAt>
			x_pos += 30;
 8001360:	89fb      	ldrh	r3, [r7, #14]
 8001362:	331e      	adds	r3, #30
 8001364:	81fb      	strh	r3, [r7, #14]
		for (int column = 1; column <= 3; column++) {
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	3301      	adds	r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2b03      	cmp	r3, #3
 8001370:	dddd      	ble.n	800132e <display_keypad+0x2a>
		}
		y_pos += 30;
 8001372:	8afb      	ldrh	r3, [r7, #22]
 8001374:	331e      	adds	r3, #30
 8001376:	82fb      	strh	r3, [r7, #22]
	for (int row = 1; row <= 3; row++) {
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	3301      	adds	r3, #1
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	2b03      	cmp	r3, #3
 8001382:	ddcf      	ble.n	8001324 <display_keypad+0x20>
	}
	BSP_LCD_DrawRect(230, 210, KEY_BTN_SIZE, KEY_BTN_SIZE);
 8001384:	2314      	movs	r3, #20
 8001386:	2214      	movs	r2, #20
 8001388:	21d2      	movs	r1, #210	; 0xd2
 800138a:	20e6      	movs	r0, #230	; 0xe6
 800138c:	f002 f84c 	bl	8003428 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt((230 + 4), (210 + 2), (uint8_t*)"0", LEFT_MODE);
 8001390:	2303      	movs	r3, #3
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <display_keypad+0xa4>)
 8001394:	21d4      	movs	r1, #212	; 0xd4
 8001396:	20ea      	movs	r0, #234	; 0xea
 8001398:	f001 ff2c 	bl	80031f4 <BSP_LCD_DisplayStringAt>
}
 800139c:	bf00      	nop
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	08011b88 	.word	0x08011b88
 80013a8:	08011b8c 	.word	0x08011b8c

080013ac <display_registration>:

void display_registration(bool hasTakenPhoto)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
	BSP_LCD_Clear(LCD_COLOR_WHITE);										// Clear the LCD and set background to white
 80013b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013ba:	f001 febd 	bl	8003138 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font20);											// Set the font to be used
 80013be:	481b      	ldr	r0, [pc, #108]	; (800142c <display_registration+0x80>)
 80013c0:	f001 fe9e 	bl	8003100 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);								// Set the text colour to black
 80013c4:	2000      	movs	r0, #0
 80013c6:	f001 fe8b 	bl	80030e0 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(184, 20, (uint8_t*)"REGISTER", LEFT_MODE);			// Display register statement
 80013ca:	2303      	movs	r3, #3
 80013cc:	4a18      	ldr	r2, [pc, #96]	; (8001430 <display_registration+0x84>)
 80013ce:	2114      	movs	r1, #20
 80013d0:	20b8      	movs	r0, #184	; 0xb8
 80013d2:	f001 ff0f 	bl	80031f4 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font16);											// Set the font to be used for buttons
 80013d6:	4817      	ldr	r0, [pc, #92]	; (8001434 <display_registration+0x88>)
 80013d8:	f001 fe92 	bl	8003100 <BSP_LCD_SetFont>

	// TODO: Read SD to get user ID
	BSP_LCD_DisplayStringAt(223, 50, (uint8_t*)"000", LEFT_MODE);					// Display User ID
 80013dc:	2303      	movs	r3, #3
 80013de:	4a16      	ldr	r2, [pc, #88]	; (8001438 <display_registration+0x8c>)
 80013e0:	2132      	movs	r1, #50	; 0x32
 80013e2:	20df      	movs	r0, #223	; 0xdf
 80013e4:	f001 ff06 	bl	80031f4 <BSP_LCD_DisplayStringAt>

	// TODO: Input Live Camera

	BSP_LCD_DrawRect(BTN_CANCEL_X_POS, BTN_CANCEL_Y_POS, BTN_WIDTH, BTN_HEIGHT);
 80013e8:	231e      	movs	r3, #30
 80013ea:	2264      	movs	r2, #100	; 0x64
 80013ec:	21be      	movs	r1, #190	; 0xbe
 80013ee:	2014      	movs	r0, #20
 80013f0:	f002 f81a 	bl	8003428 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt((BTN_CANCEL_X_POS + BTN_CANCEL_TEXT_X_PADDING),
 80013f4:	2303      	movs	r3, #3
 80013f6:	4a11      	ldr	r2, [pc, #68]	; (800143c <display_registration+0x90>)
 80013f8:	21c5      	movs	r1, #197	; 0xc5
 80013fa:	2025      	movs	r0, #37	; 0x25
 80013fc:	f001 fefa 	bl	80031f4 <BSP_LCD_DisplayStringAt>
			(BTN_CANCEL_Y_POS + BTN_TEXT_Y_PADDING), (uint8_t*)"Cancel", LEFT_MODE);

	if (hasTakenPhoto)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <display_registration+0x60>
		display_keypad();
 8001406:	f7ff ff7d 	bl	8001304 <display_keypad>
	else {
		BSP_LCD_DrawRect(BTN_PHOTO_X_POS, BTN_PHOTO_Y_POS, BTN_WIDTH, BTN_HEIGHT);
		BSP_LCD_DisplayStringAt((BTN_PHOTO_X_POS + BTN_PHOTO_TEXT_X_PADDING),
				(BTN_PHOTO_Y_POS + BTN_TEXT_Y_PADDING), (uint8_t*)"Photo", LEFT_MODE);
	}
}
 800140a:	e00b      	b.n	8001424 <display_registration+0x78>
		BSP_LCD_DrawRect(BTN_PHOTO_X_POS, BTN_PHOTO_Y_POS, BTN_WIDTH, BTN_HEIGHT);
 800140c:	231e      	movs	r3, #30
 800140e:	2264      	movs	r2, #100	; 0x64
 8001410:	2173      	movs	r1, #115	; 0x73
 8001412:	20be      	movs	r0, #190	; 0xbe
 8001414:	f002 f808 	bl	8003428 <BSP_LCD_DrawRect>
		BSP_LCD_DisplayStringAt((BTN_PHOTO_X_POS + BTN_PHOTO_TEXT_X_PADDING),
 8001418:	2303      	movs	r3, #3
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <display_registration+0x94>)
 800141c:	217a      	movs	r1, #122	; 0x7a
 800141e:	20d4      	movs	r0, #212	; 0xd4
 8001420:	f001 fee8 	bl	80031f4 <BSP_LCD_DisplayStringAt>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000005c 	.word	0x2000005c
 8001430:	08011b90 	.word	0x08011b90
 8001434:	20000054 	.word	0x20000054
 8001438:	08011b9c 	.word	0x08011b9c
 800143c:	08011ba0 	.word	0x08011ba0
 8001440:	08011ba8 	.word	0x08011ba8

08001444 <display_login>:

void display_login(enum Command command)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
	BSP_LCD_Clear(LCD_COLOR_WHITE);										// Clear the LCD and set background to white
 800144e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001452:	f001 fe71 	bl	8003138 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font20);											// Set the font to be used
 8001456:	4833      	ldr	r0, [pc, #204]	; (8001524 <display_login+0xe0>)
 8001458:	f001 fe52 	bl	8003100 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);								// Set the text colour to black
 800145c:	2000      	movs	r0, #0
 800145e:	f001 fe3f 	bl	80030e0 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(205, 20, (uint8_t*)"LOGIN", LEFT_MODE);				// Display login statement
 8001462:	2303      	movs	r3, #3
 8001464:	4a30      	ldr	r2, [pc, #192]	; (8001528 <display_login+0xe4>)
 8001466:	2114      	movs	r1, #20
 8001468:	20cd      	movs	r0, #205	; 0xcd
 800146a:	f001 fec3 	bl	80031f4 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font16);											// Set the font to be used for buttons
 800146e:	482f      	ldr	r0, [pc, #188]	; (800152c <display_login+0xe8>)
 8001470:	f001 fe46 	bl	8003100 <BSP_LCD_SetFont>

	//char prompt[] = hasID ? "Enter Pin" : "Enter ID";
	//BSP_LCD_DisplayStringAt(210, 50, (uint8_t*)prompt, CENTER_MODE);

	switch (command) {
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	3b03      	subs	r3, #3
 8001478:	2b04      	cmp	r3, #4
 800147a:	d83c      	bhi.n	80014f6 <display_login+0xb2>
 800147c:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <display_login+0x40>)
 800147e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001482:	bf00      	nop
 8001484:	08001499 	.word	0x08001499
 8001488:	080014a7 	.word	0x080014a7
 800148c:	080014bd 	.word	0x080014bd
 8001490:	080014cb 	.word	0x080014cb
 8001494:	080014e1 	.word	0x080014e1
		case (LOG_ID):
			BSP_LCD_DisplayStringAt(196, 50, (uint8_t*)"Enter ID", LEFT_MODE);		// Prompt to enter user ID
 8001498:	2303      	movs	r3, #3
 800149a:	4a25      	ldr	r2, [pc, #148]	; (8001530 <display_login+0xec>)
 800149c:	2132      	movs	r1, #50	; 0x32
 800149e:	20c4      	movs	r0, #196	; 0xc4
 80014a0:	f001 fea8 	bl	80031f4 <BSP_LCD_DisplayStringAt>
			// TODO: Input Live Camera
			break;
 80014a4:	e02b      	b.n	80014fe <display_login+0xba>
		case (LOG_ID_ERR):
			BSP_LCD_SetTextColor(LCD_COLOR_RED);							// Set the text colour to red
 80014a6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80014aa:	f001 fe19 	bl	80030e0 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(174, 50, (uint8_t*)"ID Not Valid", LEFT_MODE);
 80014ae:	2303      	movs	r3, #3
 80014b0:	4a20      	ldr	r2, [pc, #128]	; (8001534 <display_login+0xf0>)
 80014b2:	2132      	movs	r1, #50	; 0x32
 80014b4:	20ae      	movs	r0, #174	; 0xae
 80014b6:	f001 fe9d 	bl	80031f4 <BSP_LCD_DisplayStringAt>
			// TODO: Input Live Camera
			break;
 80014ba:	e020      	b.n	80014fe <display_login+0xba>
		case (LOG_ID_OK):
			BSP_LCD_DisplayStringAt(190, 50, (uint8_t*)"Enter PIN", LEFT_MODE);		// Prompt to enter user PIN
 80014bc:	2303      	movs	r3, #3
 80014be:	4a1e      	ldr	r2, [pc, #120]	; (8001538 <display_login+0xf4>)
 80014c0:	2132      	movs	r1, #50	; 0x32
 80014c2:	20be      	movs	r0, #190	; 0xbe
 80014c4:	f001 fe96 	bl	80031f4 <BSP_LCD_DisplayStringAt>
			// TODO: Read photo from SD and display on screen
			break;
 80014c8:	e019      	b.n	80014fe <display_login+0xba>
		case (LOG_AUTH_ERR):
			BSP_LCD_SetTextColor(LCD_COLOR_RED);							// Set the text colour to red
 80014ca:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80014ce:	f001 fe07 	bl	80030e0 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(168, 50, (uint8_t*)"Access Denied", LEFT_MODE);
 80014d2:	2303      	movs	r3, #3
 80014d4:	4a19      	ldr	r2, [pc, #100]	; (800153c <display_login+0xf8>)
 80014d6:	2132      	movs	r1, #50	; 0x32
 80014d8:	20a8      	movs	r0, #168	; 0xa8
 80014da:	f001 fe8b 	bl	80031f4 <BSP_LCD_DisplayStringAt>
			// TODO: Read photo from SD and display on screen
			break;
 80014de:	e00e      	b.n	80014fe <display_login+0xba>
		case (LOG_AUTH_OK):
			BSP_LCD_SetTextColor(LCD_COLOR_GREEN);							// Set the text colour to green
 80014e0:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80014e4:	f001 fdfc 	bl	80030e0 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAt(163, 50, (uint8_t*)"Access Granted", LEFT_MODE);
 80014e8:	2303      	movs	r3, #3
 80014ea:	4a15      	ldr	r2, [pc, #84]	; (8001540 <display_login+0xfc>)
 80014ec:	2132      	movs	r1, #50	; 0x32
 80014ee:	20a3      	movs	r0, #163	; 0xa3
 80014f0:	f001 fe80 	bl	80031f4 <BSP_LCD_DisplayStringAt>
			// TODO: Read photo from SD and display on screen
			break;
 80014f4:	e003      	b.n	80014fe <display_login+0xba>
		default:
			printf("Error displaying login screen.\n");
 80014f6:	4813      	ldr	r0, [pc, #76]	; (8001544 <display_login+0x100>)
 80014f8:	f00e f98a 	bl	800f810 <puts>
			break;
 80014fc:	bf00      	nop
	}

	display_keypad();
 80014fe:	f7ff ff01 	bl	8001304 <display_keypad>

	BSP_LCD_DrawRect(BTN_CANCEL_X_POS, BTN_CANCEL_Y_POS, BTN_WIDTH, BTN_HEIGHT);
 8001502:	231e      	movs	r3, #30
 8001504:	2264      	movs	r2, #100	; 0x64
 8001506:	21be      	movs	r1, #190	; 0xbe
 8001508:	2014      	movs	r0, #20
 800150a:	f001 ff8d 	bl	8003428 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt((BTN_CANCEL_X_POS + BTN_CANCEL_TEXT_X_PADDING),
 800150e:	2303      	movs	r3, #3
 8001510:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <display_login+0x104>)
 8001512:	21c5      	movs	r1, #197	; 0xc5
 8001514:	2025      	movs	r0, #37	; 0x25
 8001516:	f001 fe6d 	bl	80031f4 <BSP_LCD_DisplayStringAt>
			(BTN_CANCEL_Y_POS + BTN_TEXT_Y_PADDING), (uint8_t*)"Cancel", LEFT_MODE);
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000005c 	.word	0x2000005c
 8001528:	08011bb0 	.word	0x08011bb0
 800152c:	20000054 	.word	0x20000054
 8001530:	08011bb8 	.word	0x08011bb8
 8001534:	08011bc4 	.word	0x08011bc4
 8001538:	08011bd4 	.word	0x08011bd4
 800153c:	08011be0 	.word	0x08011be0
 8001540:	08011bf0 	.word	0x08011bf0
 8001544:	08011c00 	.word	0x08011c00
 8001548:	08011ba0 	.word	0x08011ba0

0800154c <StartLCDTask>:

void StartLCDTask(void const * argument)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	BSP_LCD_Init();							// Initialize the LCD
 8001554:	f001 fd72 	bl	800303c <BSP_LCD_Init>
	BSP_LCD_DisplayOn();					// Enable the LCD
 8001558:	f001 ffe4 	bl	8003524 <BSP_LCD_DisplayOn>
	TouchPanel_Calibrate();					// Touch Panel configuration
 800155c:	f002 fd4e 	bl	8003ffc <TouchPanel_Calibrate>
	osEvent event;							// Event structure to receive message from queue
	display_welcome();
 8001560:	f7ff fe96 	bl	8001290 <display_welcome>
	while(1) {
		event = osMessageGet(renderQueueHandle, osWaitForever);
 8001564:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <StartLCDTask+0xa4>)
 8001566:	6819      	ldr	r1, [r3, #0]
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	4618      	mov	r0, r3
 8001572:	f009 fe95 	bl	800b2a0 <osMessageGet>
		if (event.status == 0x10) {
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2b10      	cmp	r3, #16
 800157a:	d134      	bne.n	80015e6 <StartLCDTask+0x9a>
			switch (event.value.v) {
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	2b07      	cmp	r3, #7
 8001580:	d832      	bhi.n	80015e8 <StartLCDTask+0x9c>
 8001582:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <StartLCDTask+0x3c>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	080015a9 	.word	0x080015a9
 800158c:	080015af 	.word	0x080015af
 8001590:	080015b7 	.word	0x080015b7
 8001594:	080015bf 	.word	0x080015bf
 8001598:	080015c7 	.word	0x080015c7
 800159c:	080015cf 	.word	0x080015cf
 80015a0:	080015d7 	.word	0x080015d7
 80015a4:	080015df 	.word	0x080015df
				case (FINISHED):
					display_welcome();
 80015a8:	f7ff fe72 	bl	8001290 <display_welcome>
					break;
 80015ac:	e01c      	b.n	80015e8 <StartLCDTask+0x9c>
				case (REG_ID):
					display_registration(0);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f7ff fefc 	bl	80013ac <display_registration>
					break;
 80015b4:	e018      	b.n	80015e8 <StartLCDTask+0x9c>
				case (REG_PIN):
					display_registration(1);
 80015b6:	2001      	movs	r0, #1
 80015b8:	f7ff fef8 	bl	80013ac <display_registration>
					break;
 80015bc:	e014      	b.n	80015e8 <StartLCDTask+0x9c>
				case (LOG_ID):
					display_login(LOG_ID);
 80015be:	2003      	movs	r0, #3
 80015c0:	f7ff ff40 	bl	8001444 <display_login>
					break;
 80015c4:	e010      	b.n	80015e8 <StartLCDTask+0x9c>
				case (LOG_ID_ERR):
					display_login(LOG_ID_ERR);
 80015c6:	2004      	movs	r0, #4
 80015c8:	f7ff ff3c 	bl	8001444 <display_login>
					break;
 80015cc:	e00c      	b.n	80015e8 <StartLCDTask+0x9c>
				case (LOG_ID_OK):
					display_login(LOG_ID_OK);
 80015ce:	2005      	movs	r0, #5
 80015d0:	f7ff ff38 	bl	8001444 <display_login>
					break;
 80015d4:	e008      	b.n	80015e8 <StartLCDTask+0x9c>
				case (LOG_AUTH_ERR):
					display_login(LOG_AUTH_ERR);
 80015d6:	2006      	movs	r0, #6
 80015d8:	f7ff ff34 	bl	8001444 <display_login>
					break;
 80015dc:	e004      	b.n	80015e8 <StartLCDTask+0x9c>
				case (LOG_AUTH_OK):
					display_login(LOG_AUTH_OK);
 80015de:	2007      	movs	r0, #7
 80015e0:	f7ff ff30 	bl	8001444 <display_login>
					break;
 80015e4:	e000      	b.n	80015e8 <StartLCDTask+0x9c>
			}
		}
 80015e6:	bf00      	nop
		osDelay(100);
 80015e8:	2064      	movs	r0, #100	; 0x64
 80015ea:	f009 fc47 	bl	800ae7c <osDelay>
		event = osMessageGet(renderQueueHandle, osWaitForever);
 80015ee:	e7b9      	b.n	8001564 <StartLCDTask+0x18>
 80015f0:	20001568 	.word	0x20001568

080015f4 <MessageTimerCallback>:
 */

#include "Ass-03.h"

void MessageTimerCallback(void const * argument)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	osMessagePut(stateQueueHandle, WELCOME, osWaitForever);
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <MessageTimerCallback+0x20>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f009 fe0a 	bl	800b220 <osMessagePut>
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20001564 	.word	0x20001564

08001618 <is_btn_touched>:
#include "Ass-03.h"

extern enum State state;		// State of the system

bool is_btn_touched(uint16_t corr_x_pos, uint16_t corr_y_pos, uint16_t btn_x_pos, uint16_t btn_y_pos)
{
 8001618:	b490      	push	{r4, r7}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4604      	mov	r4, r0
 8001620:	4608      	mov	r0, r1
 8001622:	4611      	mov	r1, r2
 8001624:	461a      	mov	r2, r3
 8001626:	4623      	mov	r3, r4
 8001628:	80fb      	strh	r3, [r7, #6]
 800162a:	4603      	mov	r3, r0
 800162c:	80bb      	strh	r3, [r7, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	807b      	strh	r3, [r7, #2]
 8001632:	4613      	mov	r3, r2
 8001634:	803b      	strh	r3, [r7, #0]
	return (corr_x_pos >= btn_x_pos && corr_x_pos <= btn_x_pos + BTN_WIDTH &&
			corr_y_pos >= btn_y_pos && corr_y_pos <= btn_y_pos + BTN_HEIGHT);
 8001636:	88fa      	ldrh	r2, [r7, #6]
 8001638:	887b      	ldrh	r3, [r7, #2]
 800163a:	429a      	cmp	r2, r3
 800163c:	d30f      	bcc.n	800165e <is_btn_touched+0x46>
	return (corr_x_pos >= btn_x_pos && corr_x_pos <= btn_x_pos + BTN_WIDTH &&
 800163e:	88fa      	ldrh	r2, [r7, #6]
 8001640:	887b      	ldrh	r3, [r7, #2]
 8001642:	3364      	adds	r3, #100	; 0x64
 8001644:	429a      	cmp	r2, r3
 8001646:	dc0a      	bgt.n	800165e <is_btn_touched+0x46>
 8001648:	88ba      	ldrh	r2, [r7, #4]
 800164a:	883b      	ldrh	r3, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d306      	bcc.n	800165e <is_btn_touched+0x46>
			corr_y_pos >= btn_y_pos && corr_y_pos <= btn_y_pos + BTN_HEIGHT);
 8001650:	88ba      	ldrh	r2, [r7, #4]
 8001652:	883b      	ldrh	r3, [r7, #0]
 8001654:	331e      	adds	r3, #30
 8001656:	429a      	cmp	r2, r3
 8001658:	dc01      	bgt.n	800165e <is_btn_touched+0x46>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <is_btn_touched+0x48>
 800165e:	2300      	movs	r3, #0
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	b2db      	uxtb	r3, r3
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bc90      	pop	{r4, r7}
 800166e:	4770      	bx	lr

08001670 <touch_keypad>:

void touch_keypad(uint16_t x, uint16_t y)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	460a      	mov	r2, r1
 800167a:	80fb      	strh	r3, [r7, #6]
 800167c:	4613      	mov	r3, r2
 800167e:	80bb      	strh	r3, [r7, #4]
	//switch (display.x) {
	switch (x) {
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8001686:	f300 809e 	bgt.w	80017c6 <touch_keypad+0x156>
 800168a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800168e:	da6b      	bge.n	8001768 <touch_keypad+0xf8>
 8001690:	2bdc      	cmp	r3, #220	; 0xdc
 8001692:	dc02      	bgt.n	800169a <touch_keypad+0x2a>
 8001694:	2bc8      	cmp	r3, #200	; 0xc8
 8001696:	da05      	bge.n	80016a4 <touch_keypad+0x34>
					osMessagePut(keypadQueueHandle, 9, osWaitForever);
					break;
			}
			break;
	}
}
 8001698:	e095      	b.n	80017c6 <touch_keypad+0x156>
 800169a:	3be6      	subs	r3, #230	; 0xe6
	switch (x) {
 800169c:	2b14      	cmp	r3, #20
 800169e:	f200 8092 	bhi.w	80017c6 <touch_keypad+0x156>
 80016a2:	e02a      	b.n	80016fa <touch_keypad+0x8a>
			switch (y) {
 80016a4:	88bb      	ldrh	r3, [r7, #4]
 80016a6:	2bc8      	cmp	r3, #200	; 0xc8
 80016a8:	f300 8088 	bgt.w	80017bc <touch_keypad+0x14c>
 80016ac:	2bb4      	cmp	r3, #180	; 0xb4
 80016ae:	da1a      	bge.n	80016e6 <touch_keypad+0x76>
 80016b0:	2b8c      	cmp	r3, #140	; 0x8c
 80016b2:	dc02      	bgt.n	80016ba <touch_keypad+0x4a>
 80016b4:	2b78      	cmp	r3, #120	; 0x78
 80016b6:	da04      	bge.n	80016c2 <touch_keypad+0x52>
			break;
 80016b8:	e080      	b.n	80017bc <touch_keypad+0x14c>
 80016ba:	3b96      	subs	r3, #150	; 0x96
 80016bc:	2b14      	cmp	r3, #20
 80016be:	d87d      	bhi.n	80017bc <touch_keypad+0x14c>
 80016c0:	e008      	b.n	80016d4 <touch_keypad+0x64>
					osMessagePut(keypadQueueHandle, 1, osWaitForever);
 80016c2:	4b43      	ldr	r3, [pc, #268]	; (80017d0 <touch_keypad+0x160>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f04f 32ff 	mov.w	r2, #4294967295
 80016ca:	2101      	movs	r1, #1
 80016cc:	4618      	mov	r0, r3
 80016ce:	f009 fda7 	bl	800b220 <osMessagePut>
					break;
 80016d2:	e011      	b.n	80016f8 <touch_keypad+0x88>
					osMessagePut(keypadQueueHandle, 4, osWaitForever);
 80016d4:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <touch_keypad+0x160>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295
 80016dc:	2104      	movs	r1, #4
 80016de:	4618      	mov	r0, r3
 80016e0:	f009 fd9e 	bl	800b220 <osMessagePut>
					break;
 80016e4:	e008      	b.n	80016f8 <touch_keypad+0x88>
					osMessagePut(keypadQueueHandle, 7, osWaitForever);
 80016e6:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <touch_keypad+0x160>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f04f 32ff 	mov.w	r2, #4294967295
 80016ee:	2107      	movs	r1, #7
 80016f0:	4618      	mov	r0, r3
 80016f2:	f009 fd95 	bl	800b220 <osMessagePut>
					break;
 80016f6:	bf00      	nop
			break;
 80016f8:	e060      	b.n	80017bc <touch_keypad+0x14c>
			switch (y) {
 80016fa:	88bb      	ldrh	r3, [r7, #4]
 80016fc:	2be6      	cmp	r3, #230	; 0xe6
 80016fe:	dc5f      	bgt.n	80017c0 <touch_keypad+0x150>
 8001700:	2bd2      	cmp	r3, #210	; 0xd2
 8001702:	da27      	bge.n	8001754 <touch_keypad+0xe4>
 8001704:	2bc8      	cmp	r3, #200	; 0xc8
 8001706:	dc5b      	bgt.n	80017c0 <touch_keypad+0x150>
 8001708:	2bb4      	cmp	r3, #180	; 0xb4
 800170a:	da1a      	bge.n	8001742 <touch_keypad+0xd2>
 800170c:	2b8c      	cmp	r3, #140	; 0x8c
 800170e:	dc02      	bgt.n	8001716 <touch_keypad+0xa6>
 8001710:	2b78      	cmp	r3, #120	; 0x78
 8001712:	da04      	bge.n	800171e <touch_keypad+0xae>
			break;
 8001714:	e054      	b.n	80017c0 <touch_keypad+0x150>
 8001716:	3b96      	subs	r3, #150	; 0x96
 8001718:	2b14      	cmp	r3, #20
 800171a:	d851      	bhi.n	80017c0 <touch_keypad+0x150>
 800171c:	e008      	b.n	8001730 <touch_keypad+0xc0>
					osMessagePut(keypadQueueHandle, 2, osWaitForever);
 800171e:	4b2c      	ldr	r3, [pc, #176]	; (80017d0 <touch_keypad+0x160>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f04f 32ff 	mov.w	r2, #4294967295
 8001726:	2102      	movs	r1, #2
 8001728:	4618      	mov	r0, r3
 800172a:	f009 fd79 	bl	800b220 <osMessagePut>
					break;
 800172e:	e01a      	b.n	8001766 <touch_keypad+0xf6>
					osMessagePut(keypadQueueHandle, 5, osWaitForever);
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <touch_keypad+0x160>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f04f 32ff 	mov.w	r2, #4294967295
 8001738:	2105      	movs	r1, #5
 800173a:	4618      	mov	r0, r3
 800173c:	f009 fd70 	bl	800b220 <osMessagePut>
					break;
 8001740:	e011      	b.n	8001766 <touch_keypad+0xf6>
					osMessagePut(keypadQueueHandle, 8, osWaitForever);
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <touch_keypad+0x160>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f04f 32ff 	mov.w	r2, #4294967295
 800174a:	2108      	movs	r1, #8
 800174c:	4618      	mov	r0, r3
 800174e:	f009 fd67 	bl	800b220 <osMessagePut>
					break;
 8001752:	e008      	b.n	8001766 <touch_keypad+0xf6>
					osMessagePut(keypadQueueHandle, 0, osWaitForever);
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <touch_keypad+0x160>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f009 fd5e 	bl	800b220 <osMessagePut>
					break;
 8001764:	bf00      	nop
			break;
 8001766:	e02b      	b.n	80017c0 <touch_keypad+0x150>
			switch (y) {
 8001768:	88bb      	ldrh	r3, [r7, #4]
 800176a:	2bc8      	cmp	r3, #200	; 0xc8
 800176c:	dc2a      	bgt.n	80017c4 <touch_keypad+0x154>
 800176e:	2bb4      	cmp	r3, #180	; 0xb4
 8001770:	da1a      	bge.n	80017a8 <touch_keypad+0x138>
 8001772:	2b8c      	cmp	r3, #140	; 0x8c
 8001774:	dc02      	bgt.n	800177c <touch_keypad+0x10c>
 8001776:	2b78      	cmp	r3, #120	; 0x78
 8001778:	da04      	bge.n	8001784 <touch_keypad+0x114>
			break;
 800177a:	e023      	b.n	80017c4 <touch_keypad+0x154>
 800177c:	3b96      	subs	r3, #150	; 0x96
 800177e:	2b14      	cmp	r3, #20
 8001780:	d820      	bhi.n	80017c4 <touch_keypad+0x154>
 8001782:	e008      	b.n	8001796 <touch_keypad+0x126>
					osMessagePut(keypadQueueHandle, 3, osWaitForever);
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <touch_keypad+0x160>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f04f 32ff 	mov.w	r2, #4294967295
 800178c:	2103      	movs	r1, #3
 800178e:	4618      	mov	r0, r3
 8001790:	f009 fd46 	bl	800b220 <osMessagePut>
					break;
 8001794:	e011      	b.n	80017ba <touch_keypad+0x14a>
					osMessagePut(keypadQueueHandle, 6, osWaitForever);
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <touch_keypad+0x160>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f04f 32ff 	mov.w	r2, #4294967295
 800179e:	2106      	movs	r1, #6
 80017a0:	4618      	mov	r0, r3
 80017a2:	f009 fd3d 	bl	800b220 <osMessagePut>
					break;
 80017a6:	e008      	b.n	80017ba <touch_keypad+0x14a>
					osMessagePut(keypadQueueHandle, 9, osWaitForever);
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <touch_keypad+0x160>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	2109      	movs	r1, #9
 80017b2:	4618      	mov	r0, r3
 80017b4:	f009 fd34 	bl	800b220 <osMessagePut>
					break;
 80017b8:	bf00      	nop
			break;
 80017ba:	e003      	b.n	80017c4 <touch_keypad+0x154>
			break;
 80017bc:	bf00      	nop
 80017be:	e002      	b.n	80017c6 <touch_keypad+0x156>
			break;
 80017c0:	bf00      	nop
 80017c2:	e000      	b.n	80017c6 <touch_keypad+0x156>
			break;
 80017c4:	bf00      	nop
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000156c 	.word	0x2000156c

080017d4 <StartTouchPanelTask>:

void StartTouchPanelTask(void const * argument)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	while (1) {
		getDisplayPoint(&display, Read_Ads7846(), &matrix);
 80017dc:	f002 f8a2 	bl	8003924 <Read_Ads7846>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4a42      	ldr	r2, [pc, #264]	; (80018ec <StartTouchPanelTask+0x118>)
 80017e4:	4619      	mov	r1, r3
 80017e6:	4842      	ldr	r0, [pc, #264]	; (80018f0 <StartTouchPanelTask+0x11c>)
 80017e8:	f002 fb65 	bl	8003eb6 <getDisplayPoint>
		switch (state) {
 80017ec:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <StartTouchPanelTask+0x120>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	dc77      	bgt.n	80018e4 <StartTouchPanelTask+0x110>
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	da54      	bge.n	80018a2 <StartTouchPanelTask+0xce>
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <StartTouchPanelTask+0x2e>
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d028      	beq.n	8001852 <StartTouchPanelTask+0x7e>
 8001800:	e070      	b.n	80018e4 <StartTouchPanelTask+0x110>
			case (WELCOME):
				if (is_btn_touched(display.x, display.y, BTN_REGISTER_X_POS, BTN_REGISTER_Y_POS))		// Tell Control Task that register button has been pressed
 8001802:	4b3b      	ldr	r3, [pc, #236]	; (80018f0 <StartTouchPanelTask+0x11c>)
 8001804:	8818      	ldrh	r0, [r3, #0]
 8001806:	4b3a      	ldr	r3, [pc, #232]	; (80018f0 <StartTouchPanelTask+0x11c>)
 8001808:	8859      	ldrh	r1, [r3, #2]
 800180a:	235a      	movs	r3, #90	; 0x5a
 800180c:	22be      	movs	r2, #190	; 0xbe
 800180e:	f7ff ff03 	bl	8001618 <is_btn_touched>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <StartTouchPanelTask+0x56>
					osMessagePut(stateQueueHandle, REGISTER_ID, osWaitForever);
 8001818:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <StartTouchPanelTask+0x124>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	2101      	movs	r1, #1
 8001822:	4618      	mov	r0, r3
 8001824:	f009 fcfc 	bl	800b220 <osMessagePut>
				else if (is_btn_touched(display.x, display.y, BTN_LOGIN_X_POS, BTN_LOGIN_Y_POS))		// Tell Control Task that login button has been pressed
					osMessagePut(stateQueueHandle, LOGIN_ID, osWaitForever);
				break;
 8001828:	e057      	b.n	80018da <StartTouchPanelTask+0x106>
				else if (is_btn_touched(display.x, display.y, BTN_LOGIN_X_POS, BTN_LOGIN_Y_POS))		// Tell Control Task that login button has been pressed
 800182a:	4b31      	ldr	r3, [pc, #196]	; (80018f0 <StartTouchPanelTask+0x11c>)
 800182c:	8818      	ldrh	r0, [r3, #0]
 800182e:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <StartTouchPanelTask+0x11c>)
 8001830:	8859      	ldrh	r1, [r3, #2]
 8001832:	238c      	movs	r3, #140	; 0x8c
 8001834:	22be      	movs	r2, #190	; 0xbe
 8001836:	f7ff feef 	bl	8001618 <is_btn_touched>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d04c      	beq.n	80018da <StartTouchPanelTask+0x106>
					osMessagePut(stateQueueHandle, LOGIN_ID, osWaitForever);
 8001840:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <StartTouchPanelTask+0x124>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f04f 32ff 	mov.w	r2, #4294967295
 8001848:	2103      	movs	r1, #3
 800184a:	4618      	mov	r0, r3
 800184c:	f009 fce8 	bl	800b220 <osMessagePut>
				break;
 8001850:	e043      	b.n	80018da <StartTouchPanelTask+0x106>
					}
				}
				break;
				*/
			case (REGISTER_ID):
				if (is_btn_touched(display.x, display.y, BTN_PHOTO_X_POS, BTN_PHOTO_Y_POS))				// Tell Control Task that photo button has been pressed
 8001852:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <StartTouchPanelTask+0x11c>)
 8001854:	8818      	ldrh	r0, [r3, #0]
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <StartTouchPanelTask+0x11c>)
 8001858:	8859      	ldrh	r1, [r3, #2]
 800185a:	2373      	movs	r3, #115	; 0x73
 800185c:	22be      	movs	r2, #190	; 0xbe
 800185e:	f7ff fedb 	bl	8001618 <is_btn_touched>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <StartTouchPanelTask+0xa6>
					osMessagePut(stateQueueHandle, REGISTER_PIN, osWaitForever);
 8001868:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <StartTouchPanelTask+0x124>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	2102      	movs	r1, #2
 8001872:	4618      	mov	r0, r3
 8001874:	f009 fcd4 	bl	800b220 <osMessagePut>
				else if (is_btn_touched(display.x, display.y, BTN_CANCEL_X_POS, BTN_CANCEL_Y_POS))		// Tell Control Task that cancel button has been pressed
					osMessagePut(stateQueueHandle, WELCOME, osWaitForever);
				break;
 8001878:	e031      	b.n	80018de <StartTouchPanelTask+0x10a>
				else if (is_btn_touched(display.x, display.y, BTN_CANCEL_X_POS, BTN_CANCEL_Y_POS))		// Tell Control Task that cancel button has been pressed
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <StartTouchPanelTask+0x11c>)
 800187c:	8818      	ldrh	r0, [r3, #0]
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <StartTouchPanelTask+0x11c>)
 8001880:	8859      	ldrh	r1, [r3, #2]
 8001882:	23be      	movs	r3, #190	; 0xbe
 8001884:	2214      	movs	r2, #20
 8001886:	f7ff fec7 	bl	8001618 <is_btn_touched>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d026      	beq.n	80018de <StartTouchPanelTask+0x10a>
					osMessagePut(stateQueueHandle, WELCOME, osWaitForever);
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <StartTouchPanelTask+0x124>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f009 fcc0 	bl	800b220 <osMessagePut>
				break;
 80018a0:	e01d      	b.n	80018de <StartTouchPanelTask+0x10a>
				break;
				*/
			case (REGISTER_PIN):
			case (LOGIN_ID):
			case (LOGIN_PIN):
				touch_keypad(display.x, display.y);
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <StartTouchPanelTask+0x11c>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <StartTouchPanelTask+0x11c>)
 80018a8:	8852      	ldrh	r2, [r2, #2]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fedf 	bl	8001670 <touch_keypad>
				if (is_btn_touched(display.x, display.y, BTN_CANCEL_X_POS, BTN_CANCEL_Y_POS))			// Tell Control Task that cancel button has been pressed
 80018b2:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <StartTouchPanelTask+0x11c>)
 80018b4:	8818      	ldrh	r0, [r3, #0]
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <StartTouchPanelTask+0x11c>)
 80018b8:	8859      	ldrh	r1, [r3, #2]
 80018ba:	23be      	movs	r3, #190	; 0xbe
 80018bc:	2214      	movs	r2, #20
 80018be:	f7ff feab 	bl	8001618 <is_btn_touched>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00c      	beq.n	80018e2 <StartTouchPanelTask+0x10e>
					osMessagePut(stateQueueHandle, WELCOME, osWaitForever);
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <StartTouchPanelTask+0x124>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f009 fca4 	bl	800b220 <osMessagePut>
				break;
 80018d8:	e003      	b.n	80018e2 <StartTouchPanelTask+0x10e>
				break;
 80018da:	bf00      	nop
 80018dc:	e002      	b.n	80018e4 <StartTouchPanelTask+0x110>
				break;
 80018de:	bf00      	nop
 80018e0:	e000      	b.n	80018e4 <StartTouchPanelTask+0x110>
				break;
 80018e2:	bf00      	nop
		}
		osDelay(100);
 80018e4:	2064      	movs	r0, #100	; 0x64
 80018e6:	f009 fac9 	bl	800ae7c <osDelay>
		getDisplayPoint(&display, Read_Ads7846(), &matrix);
 80018ea:	e777      	b.n	80017dc <StartTouchPanelTask+0x8>
 80018ec:	200024b0 	.word	0x200024b0
 80018f0:	200024e8 	.word	0x200024e8
 80018f4:	2000026c 	.word	0x2000026c
 80018f8:	20001564 	.word	0x20001564

080018fc <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001900:	4b10      	ldr	r3, [pc, #64]	; (8001944 <MX_DCMI_Init+0x48>)
 8001902:	4a11      	ldr	r2, [pc, #68]	; (8001948 <MX_DCMI_Init+0x4c>)
 8001904:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MX_DCMI_Init+0x48>)
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <MX_DCMI_Init+0x48>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_DCMI_Init+0x48>)
 8001914:	2280      	movs	r2, #128	; 0x80
 8001916:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <MX_DCMI_Init+0x48>)
 800191a:	2240      	movs	r2, #64	; 0x40
 800191c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_DCMI_Init+0x48>)
 8001920:	2200      	movs	r2, #0
 8001922:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <MX_DCMI_Init+0x48>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_DCMI_Init+0x48>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001930:	4804      	ldr	r0, [pc, #16]	; (8001944 <MX_DCMI_Init+0x48>)
 8001932:	f002 fdc8 	bl	80044c6 <HAL_DCMI_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 800193c:	f000 fd0a 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200014ac 	.word	0x200014ac
 8001948:	50050000 	.word	0x50050000

0800194c <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08c      	sub	sp, #48	; 0x30
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a68      	ldr	r2, [pc, #416]	; (8001b0c <HAL_DCMI_MspInit+0x1c0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	f040 80c9 	bne.w	8001b02 <HAL_DCMI_MspInit+0x1b6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	61bb      	str	r3, [r7, #24]
 8001974:	4b66      	ldr	r3, [pc, #408]	; (8001b10 <HAL_DCMI_MspInit+0x1c4>)
 8001976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001978:	4a65      	ldr	r2, [pc, #404]	; (8001b10 <HAL_DCMI_MspInit+0x1c4>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6353      	str	r3, [r2, #52]	; 0x34
 8001980:	4b63      	ldr	r3, [pc, #396]	; (8001b10 <HAL_DCMI_MspInit+0x1c4>)
 8001982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	4b5f      	ldr	r3, [pc, #380]	; (8001b10 <HAL_DCMI_MspInit+0x1c4>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	4a5e      	ldr	r2, [pc, #376]	; (8001b10 <HAL_DCMI_MspInit+0x1c4>)
 8001996:	f043 0310 	orr.w	r3, r3, #16
 800199a:	6313      	str	r3, [r2, #48]	; 0x30
 800199c:	4b5c      	ldr	r3, [pc, #368]	; (8001b10 <HAL_DCMI_MspInit+0x1c4>)
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	4b58      	ldr	r3, [pc, #352]	; (8001b10 <HAL_DCMI_MspInit+0x1c4>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	4a57      	ldr	r2, [pc, #348]	; (8001b10 <HAL_DCMI_MspInit+0x1c4>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6313      	str	r3, [r2, #48]	; 0x30
 80019b8:	4b55      	ldr	r3, [pc, #340]	; (8001b10 <HAL_DCMI_MspInit+0x1c4>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	4b51      	ldr	r3, [pc, #324]	; (8001b10 <HAL_DCMI_MspInit+0x1c4>)
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	4a50      	ldr	r2, [pc, #320]	; (8001b10 <HAL_DCMI_MspInit+0x1c4>)
 80019ce:	f043 0304 	orr.w	r3, r3, #4
 80019d2:	6313      	str	r3, [r2, #48]	; 0x30
 80019d4:	4b4e      	ldr	r3, [pc, #312]	; (8001b10 <HAL_DCMI_MspInit+0x1c4>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	4b4a      	ldr	r3, [pc, #296]	; (8001b10 <HAL_DCMI_MspInit+0x1c4>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	4a49      	ldr	r2, [pc, #292]	; (8001b10 <HAL_DCMI_MspInit+0x1c4>)
 80019ea:	f043 0302 	orr.w	r3, r3, #2
 80019ee:	6313      	str	r3, [r2, #48]	; 0x30
 80019f0:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <HAL_DCMI_MspInit+0x1c4>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 80019fc:	2373      	movs	r3, #115	; 0x73
 80019fe:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a0c:	230d      	movs	r3, #13
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	4619      	mov	r1, r3
 8001a16:	483f      	ldr	r0, [pc, #252]	; (8001b14 <HAL_DCMI_MspInit+0x1c8>)
 8001a18:	f003 f960 	bl	8004cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_10;
 8001a1c:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8001a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a2e:	230d      	movs	r3, #13
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	4619      	mov	r1, r3
 8001a38:	4837      	ldr	r0, [pc, #220]	; (8001b18 <HAL_DCMI_MspInit+0x1cc>)
 8001a3a:	f003 f94f 	bl	8004cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a3e:	2340      	movs	r3, #64	; 0x40
 8001a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a4e:	230d      	movs	r3, #13
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4619      	mov	r1, r3
 8001a58:	4830      	ldr	r0, [pc, #192]	; (8001b1c <HAL_DCMI_MspInit+0x1d0>)
 8001a5a:	f003 f93f 	bl	8004cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a5e:	23c0      	movs	r3, #192	; 0xc0
 8001a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a6e:	230d      	movs	r3, #13
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	4829      	ldr	r0, [pc, #164]	; (8001b20 <HAL_DCMI_MspInit+0x1d4>)
 8001a7a:	f003 f92f 	bl	8004cdc <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001a7e:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <HAL_DCMI_MspInit+0x1d8>)
 8001a80:	4a29      	ldr	r2, [pc, #164]	; (8001b28 <HAL_DCMI_MspInit+0x1dc>)
 8001a82:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001a84:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <HAL_DCMI_MspInit+0x1d8>)
 8001a86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a8a:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a8c:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <HAL_DCMI_MspInit+0x1d8>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <HAL_DCMI_MspInit+0x1d8>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001a98:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <HAL_DCMI_MspInit+0x1d8>)
 8001a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a9e:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001aa0:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <HAL_DCMI_MspInit+0x1d8>)
 8001aa2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aa6:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001aa8:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <HAL_DCMI_MspInit+0x1d8>)
 8001aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aae:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <HAL_DCMI_MspInit+0x1d8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <HAL_DCMI_MspInit+0x1d8>)
 8001ab8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001abc:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_DCMI_MspInit+0x1d8>)
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001ac4:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <HAL_DCMI_MspInit+0x1d8>)
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <HAL_DCMI_MspInit+0x1d8>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_DCMI_MspInit+0x1d8>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001ad6:	4813      	ldr	r0, [pc, #76]	; (8001b24 <HAL_DCMI_MspInit+0x1d8>)
 8001ad8:	f002 fd62 	bl	80045a0 <HAL_DMA_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_DCMI_MspInit+0x19a>
    {
      Error_Handler();
 8001ae2:	f000 fc37 	bl	8002354 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a0e      	ldr	r2, [pc, #56]	; (8001b24 <HAL_DCMI_MspInit+0x1d8>)
 8001aea:	639a      	str	r2, [r3, #56]	; 0x38
 8001aec:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <HAL_DCMI_MspInit+0x1d8>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2105      	movs	r1, #5
 8001af6:	204e      	movs	r0, #78	; 0x4e
 8001af8:	f002 fbfe 	bl	80042f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001afc:	204e      	movs	r0, #78	; 0x4e
 8001afe:	f002 fc17 	bl	8004330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8001b02:	bf00      	nop
 8001b04:	3730      	adds	r7, #48	; 0x30
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	50050000 	.word	0x50050000
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	40020400 	.word	0x40020400
 8001b24:	200014ec 	.word	0x200014ec
 8001b28:	40026428 	.word	0x40026428

08001b2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <MX_DMA_Init+0x5c>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a13      	ldr	r2, [pc, #76]	; (8001b88 <MX_DMA_Init+0x5c>)
 8001b3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_DMA_Init+0x5c>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2105      	movs	r1, #5
 8001b52:	2039      	movs	r0, #57	; 0x39
 8001b54:	f002 fbd0 	bl	80042f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b58:	2039      	movs	r0, #57	; 0x39
 8001b5a:	f002 fbe9 	bl	8004330 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2105      	movs	r1, #5
 8001b62:	203b      	movs	r0, #59	; 0x3b
 8001b64:	f002 fbc8 	bl	80042f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001b68:	203b      	movs	r0, #59	; 0x3b
 8001b6a:	f002 fbe1 	bl	8004330 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2105      	movs	r1, #5
 8001b72:	2045      	movs	r0, #69	; 0x45
 8001b74:	f002 fbc0 	bl	80042f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001b78:	2045      	movs	r0, #69	; 0x45
 8001b7a:	f002 fbd9 	bl	8004330 <HAL_NVIC_EnableIRQ>

}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800

08001b8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <vApplicationGetIdleTaskMemory+0x30>)
 8001ba2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	2000157c 	.word	0x2000157c
 8001bbc:	200015d0 	.word	0x200015d0

08001bc0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4a07      	ldr	r2, [pc, #28]	; (8001bec <vApplicationGetTimerTaskMemory+0x2c>)
 8001bd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	4a06      	ldr	r2, [pc, #24]	; (8001bf0 <vApplicationGetTimerTaskMemory+0x30>)
 8001bd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bde:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	200017d0 	.word	0x200017d0
 8001bf0:	20001824 	.word	0x20001824

08001bf4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001bf4:	b5b0      	push	{r4, r5, r7, lr}
 8001bf6:	b0bc      	sub	sp, #240	; 0xf0
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of cameraMutex */
  osMutexDef(cameraMutex);
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  cameraMutexHandle = osMutexCreate(osMutex(cameraMutex));
 8001c06:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f009 f9fe 	bl	800b00c <osMutexCreate>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4a60      	ldr	r2, [pc, #384]	; (8001d94 <MX_FREERTOS_Init+0x1a0>)
 8001c14:	6013      	str	r3, [r2, #0]

  /* definition and creation of sdMutex */
  osMutexDef(sdMutex);
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  sdMutexHandle = osMutexCreate(osMutex(sdMutex));
 8001c22:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f009 f9f0 	bl	800b00c <osMutexCreate>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4a5a      	ldr	r2, [pc, #360]	; (8001d98 <MX_FREERTOS_Init+0x1a4>)
 8001c30:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of messageTimer */
  osTimerDef(messageTimer, MessageTimerCallback);
 8001c32:	4b5a      	ldr	r3, [pc, #360]	; (8001d9c <MX_FREERTOS_Init+0x1a8>)
 8001c34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  messageTimerHandle = osTimerCreate(osTimer(messageTimer), osTimerOnce, NULL);
 8001c3e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f009 f92c 	bl	800aea4 <osTimerCreate>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4a54      	ldr	r2, [pc, #336]	; (8001da0 <MX_FREERTOS_Init+0x1ac>)
 8001c50:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of stateQueue */
  osMessageQDef(stateQueue, 16, uint16_t);
 8001c52:	4b54      	ldr	r3, [pc, #336]	; (8001da4 <MX_FREERTOS_Init+0x1b0>)
 8001c54:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8001c58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  stateQueueHandle = osMessageCreate(osMessageQ(stateQueue), NULL);
 8001c5e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f009 fab2 	bl	800b1ce <osMessageCreate>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4a4e      	ldr	r2, [pc, #312]	; (8001da8 <MX_FREERTOS_Init+0x1b4>)
 8001c6e:	6013      	str	r3, [r2, #0]

  /* definition and creation of renderQueue */
  osMessageQDef(renderQueue, 16, uint16_t);
 8001c70:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <MX_FREERTOS_Init+0x1b0>)
 8001c72:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8001c76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  renderQueueHandle = osMessageCreate(osMessageQ(renderQueue), NULL);
 8001c7c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f009 faa3 	bl	800b1ce <osMessageCreate>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4a48      	ldr	r2, [pc, #288]	; (8001dac <MX_FREERTOS_Init+0x1b8>)
 8001c8c:	6013      	str	r3, [r2, #0]

  /* definition and creation of keypadQueue */
  osMessageQDef(keypadQueue, 4, uint16_t);
 8001c8e:	4b48      	ldr	r3, [pc, #288]	; (8001db0 <MX_FREERTOS_Init+0x1bc>)
 8001c90:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001c94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  keypadQueueHandle = osMessageCreate(osMessageQ(keypadQueue), NULL);
 8001c9a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f009 fa94 	bl	800b1ce <osMessageCreate>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4a42      	ldr	r2, [pc, #264]	; (8001db4 <MX_FREERTOS_Init+0x1c0>)
 8001caa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001cac:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <MX_FREERTOS_Init+0x1c4>)
 8001cae:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001cb2:	461d      	mov	r5, r3
 8001cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001cc0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f009 f88c 	bl	800ade4 <osThreadCreate>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4a3b      	ldr	r2, [pc, #236]	; (8001dbc <MX_FREERTOS_Init+0x1c8>)
 8001cd0:	6013      	str	r3, [r2, #0]

  /* definition and creation of controlTask */
  osThreadDef(controlTask, StartControlTask, osPriorityNormal, 0, 128);
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <MX_FREERTOS_Init+0x1cc>)
 8001cd4:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001cd8:	461d      	mov	r5, r3
 8001cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ce2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8001ce6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001cea:	2100      	movs	r1, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f009 f879 	bl	800ade4 <osThreadCreate>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4a33      	ldr	r2, [pc, #204]	; (8001dc4 <MX_FREERTOS_Init+0x1d0>)
 8001cf6:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdTask */
  osThreadDef(lcdTask, StartLCDTask, osPriorityNormal, 0, 128);
 8001cf8:	4b33      	ldr	r3, [pc, #204]	; (8001dc8 <MX_FREERTOS_Init+0x1d4>)
 8001cfa:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001cfe:	461d      	mov	r5, r3
 8001d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 8001d0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f009 f866 	bl	800ade4 <osThreadCreate>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4a2c      	ldr	r2, [pc, #176]	; (8001dcc <MX_FREERTOS_Init+0x1d8>)
 8001d1c:	6013      	str	r3, [r2, #0]

  /* definition and creation of touchPanelTask */
  osThreadDef(touchPanelTask, StartTouchPanelTask, osPriorityNormal, 0, 128);
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <MX_FREERTOS_Init+0x1dc>)
 8001d20:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001d24:	461d      	mov	r5, r3
 8001d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  touchPanelTaskHandle = osThreadCreate(osThread(touchPanelTask), NULL);
 8001d32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f009 f853 	bl	800ade4 <osThreadCreate>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4a24      	ldr	r2, [pc, #144]	; (8001dd4 <MX_FREERTOS_Init+0x1e0>)
 8001d42:	6013      	str	r3, [r2, #0]

  /* definition and creation of keypadTask */
  osThreadDef(keypadTask, StartKeypadTask, osPriorityNormal, 0, 128);
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <MX_FREERTOS_Init+0x1e4>)
 8001d46:	f107 041c 	add.w	r4, r7, #28
 8001d4a:	461d      	mov	r5, r3
 8001d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  keypadTaskHandle = osThreadCreate(osThread(keypadTask), NULL);
 8001d58:	f107 031c 	add.w	r3, r7, #28
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f009 f840 	bl	800ade4 <osThreadCreate>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4a1d      	ldr	r2, [pc, #116]	; (8001ddc <MX_FREERTOS_Init+0x1e8>)
 8001d68:	6013      	str	r3, [r2, #0]

  /* definition and creation of fileSystemTask */
  osThreadDef(fileSystemTask, StartFileSystemTask, osPriorityNormal, 0, 128);
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <MX_FREERTOS_Init+0x1ec>)
 8001d6c:	463c      	mov	r4, r7
 8001d6e:	461d      	mov	r5, r3
 8001d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  fileSystemTaskHandle = osThreadCreate(osThread(fileSystemTask), NULL);
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f009 f82f 	bl	800ade4 <osThreadCreate>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4a16      	ldr	r2, [pc, #88]	; (8001de4 <MX_FREERTOS_Init+0x1f0>)
 8001d8a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001d8c:	bf00      	nop
 8001d8e:	37f0      	adds	r7, #240	; 0xf0
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bdb0      	pop	{r4, r5, r7, pc}
 8001d94:	20001574 	.word	0x20001574
 8001d98:	20001578 	.word	0x20001578
 8001d9c:	080015f5 	.word	0x080015f5
 8001da0:	20001570 	.word	0x20001570
 8001da4:	08011c6c 	.word	0x08011c6c
 8001da8:	20001564 	.word	0x20001564
 8001dac:	20001568 	.word	0x20001568
 8001db0:	08011c7c 	.word	0x08011c7c
 8001db4:	2000156c 	.word	0x2000156c
 8001db8:	08011c8c 	.word	0x08011c8c
 8001dbc:	2000154c 	.word	0x2000154c
 8001dc0:	08011ca8 	.word	0x08011ca8
 8001dc4:	20001550 	.word	0x20001550
 8001dc8:	08011cc4 	.word	0x08011cc4
 8001dcc:	20001554 	.word	0x20001554
 8001dd0:	08011ce0 	.word	0x08011ce0
 8001dd4:	20001558 	.word	0x20001558
 8001dd8:	08011cfc 	.word	0x08011cfc
 8001ddc:	2000155c 	.word	0x2000155c
 8001de0:	08011d18 	.word	0x08011d18
 8001de4:	20001560 	.word	0x20001560

08001de8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void const * argument)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001df0:	2001      	movs	r0, #1
 8001df2:	f009 f843 	bl	800ae7c <osDelay>
 8001df6:	e7fb      	b.n	8001df0 <StartDefaultTask+0x8>

08001df8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
 8001e0c:	615a      	str	r2, [r3, #20]
 8001e0e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001e10:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <MX_FSMC_Init+0xb8>)
 8001e12:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001e16:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001e18:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <MX_FSMC_Init+0xb8>)
 8001e1a:	4a26      	ldr	r2, [pc, #152]	; (8001eb4 <MX_FSMC_Init+0xbc>)
 8001e1c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001e1e:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <MX_FSMC_Init+0xb8>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001e24:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <MX_FSMC_Init+0xb8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001e2a:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <MX_FSMC_Init+0xb8>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001e30:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <MX_FSMC_Init+0xb8>)
 8001e32:	2210      	movs	r2, #16
 8001e34:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <MX_FSMC_Init+0xb8>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001e3c:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <MX_FSMC_Init+0xb8>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001e42:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <MX_FSMC_Init+0xb8>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001e48:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <MX_FSMC_Init+0xb8>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001e4e:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <MX_FSMC_Init+0xb8>)
 8001e50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <MX_FSMC_Init+0xb8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <MX_FSMC_Init+0xb8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <MX_FSMC_Init+0xb8>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <MX_FSMC_Init+0xb8>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <MX_FSMC_Init+0xb8>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 4;
 8001e74:	2304      	movs	r3, #4
 8001e76:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001e78:	230f      	movs	r3, #15
 8001e7a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 40;
 8001e7c:	2328      	movs	r3, #40	; 0x28
 8001e7e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001e84:	2310      	movs	r3, #16
 8001e86:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001e88:	2311      	movs	r3, #17
 8001e8a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	2200      	movs	r2, #0
 8001e94:	4619      	mov	r1, r3
 8001e96:	4806      	ldr	r0, [pc, #24]	; (8001eb0 <MX_FSMC_Init+0xb8>)
 8001e98:	f006 f94a 	bl	8008130 <HAL_SRAM_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8001ea2:	f000 fa57 	bl	8002354 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001ea6:	bf00      	nop
 8001ea8:	3720      	adds	r7, #32
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20001c24 	.word	0x20001c24
 8001eb4:	a0000104 	.word	0xa0000104

08001eb8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001ecc:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <HAL_FSMC_MspInit+0x88>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d131      	bne.n	8001f38 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_FSMC_MspInit+0x88>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	603b      	str	r3, [r7, #0]
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_FSMC_MspInit+0x8c>)
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee2:	4a18      	ldr	r2, [pc, #96]	; (8001f44 <HAL_FSMC_MspInit+0x8c>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6393      	str	r3, [r2, #56]	; 0x38
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <HAL_FSMC_MspInit+0x8c>)
 8001eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001ef6:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001efa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001f08:	230c      	movs	r3, #12
 8001f0a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480d      	ldr	r0, [pc, #52]	; (8001f48 <HAL_FSMC_MspInit+0x90>)
 8001f12:	f002 fee3 	bl	8004cdc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001f16:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001f1a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f24:	2303      	movs	r3, #3
 8001f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001f28:	230c      	movs	r3, #12
 8001f2a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4806      	ldr	r0, [pc, #24]	; (8001f4c <HAL_FSMC_MspInit+0x94>)
 8001f32:	f002 fed3 	bl	8004cdc <HAL_GPIO_Init>
 8001f36:	e000      	b.n	8001f3a <HAL_FSMC_MspInit+0x82>
    return;
 8001f38:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20001c74 	.word	0x20001c74
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40020c00 	.word	0x40020c00

08001f50 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001f58:	f7ff ffae 	bl	8001eb8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08c      	sub	sp, #48	; 0x30
 8001f68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
 8001f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	4b63      	ldr	r3, [pc, #396]	; (800210c <MX_GPIO_Init+0x1a8>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a62      	ldr	r2, [pc, #392]	; (800210c <MX_GPIO_Init+0x1a8>)
 8001f84:	f043 0310 	orr.w	r3, r3, #16
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b60      	ldr	r3, [pc, #384]	; (800210c <MX_GPIO_Init+0x1a8>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	61bb      	str	r3, [r7, #24]
 8001f94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	4b5c      	ldr	r3, [pc, #368]	; (800210c <MX_GPIO_Init+0x1a8>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a5b      	ldr	r2, [pc, #364]	; (800210c <MX_GPIO_Init+0x1a8>)
 8001fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b59      	ldr	r3, [pc, #356]	; (800210c <MX_GPIO_Init+0x1a8>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	4b55      	ldr	r3, [pc, #340]	; (800210c <MX_GPIO_Init+0x1a8>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a54      	ldr	r2, [pc, #336]	; (800210c <MX_GPIO_Init+0x1a8>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b52      	ldr	r3, [pc, #328]	; (800210c <MX_GPIO_Init+0x1a8>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	4b4e      	ldr	r3, [pc, #312]	; (800210c <MX_GPIO_Init+0x1a8>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a4d      	ldr	r2, [pc, #308]	; (800210c <MX_GPIO_Init+0x1a8>)
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b4b      	ldr	r3, [pc, #300]	; (800210c <MX_GPIO_Init+0x1a8>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	4b47      	ldr	r3, [pc, #284]	; (800210c <MX_GPIO_Init+0x1a8>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a46      	ldr	r2, [pc, #280]	; (800210c <MX_GPIO_Init+0x1a8>)
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b44      	ldr	r3, [pc, #272]	; (800210c <MX_GPIO_Init+0x1a8>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	4b40      	ldr	r3, [pc, #256]	; (800210c <MX_GPIO_Init+0x1a8>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a3f      	ldr	r2, [pc, #252]	; (800210c <MX_GPIO_Init+0x1a8>)
 8002010:	f043 0308 	orr.w	r3, r3, #8
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b3d      	ldr	r3, [pc, #244]	; (800210c <MX_GPIO_Init+0x1a8>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCDTP_CS_GPIO_Port, LCDTP_CS_Pin, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	2110      	movs	r1, #16
 8002026:	483a      	ldr	r0, [pc, #232]	; (8002110 <MX_GPIO_Init+0x1ac>)
 8002028:	f003 f80c 	bl	8005044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BL_PWM_GPIO_Port, BL_PWM_Pin, GPIO_PIN_RESET);
 800202c:	2200      	movs	r2, #0
 800202e:	2101      	movs	r1, #1
 8002030:	4838      	ldr	r0, [pc, #224]	; (8002114 <MX_GPIO_Init+0x1b0>)
 8002032:	f003 f807 	bl	8005044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002036:	2200      	movs	r2, #0
 8002038:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800203c:	4836      	ldr	r0, [pc, #216]	; (8002118 <MX_GPIO_Init+0x1b4>)
 800203e:	f003 f801 	bl	8005044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002042:	2301      	movs	r3, #1
 8002044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002046:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800204a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	4831      	ldr	r0, [pc, #196]	; (800211c <MX_GPIO_Init+0x1b8>)
 8002058:	f002 fe40 	bl	8004cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCDTP_CS_Pin;
 800205c:	2310      	movs	r3, #16
 800205e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002060:	2301      	movs	r3, #1
 8002062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002064:	2302      	movs	r3, #2
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	2300      	movs	r3, #0
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCDTP_CS_GPIO_Port, &GPIO_InitStruct);
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	4619      	mov	r1, r3
 8002072:	4827      	ldr	r0, [pc, #156]	; (8002110 <MX_GPIO_Init+0x1ac>)
 8002074:	f002 fe32 	bl	8004cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCDTP_IRQ_Pin;
 8002078:	2320      	movs	r3, #32
 800207a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCDTP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	4619      	mov	r1, r3
 800208a:	4821      	ldr	r0, [pc, #132]	; (8002110 <MX_GPIO_Init+0x1ac>)
 800208c:	f002 fe26 	bl	8004cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BL_PWM_Pin;
 8002090:	2301      	movs	r3, #1
 8002092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002094:	2301      	movs	r3, #1
 8002096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 80020a0:	f107 031c 	add.w	r3, r7, #28
 80020a4:	4619      	mov	r1, r3
 80020a6:	481b      	ldr	r0, [pc, #108]	; (8002114 <MX_GPIO_Init+0x1b0>)
 80020a8:	f002 fe18 	bl	8004cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80020ac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80020b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b2:	2301      	movs	r3, #1
 80020b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020be:	f107 031c 	add.w	r3, r7, #28
 80020c2:	4619      	mov	r1, r3
 80020c4:	4814      	ldr	r0, [pc, #80]	; (8002118 <MX_GPIO_Init+0x1b4>)
 80020c6:	f002 fe09 	bl	8004cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80020dc:	2300      	movs	r3, #0
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e0:	f107 031c 	add.w	r3, r7, #28
 80020e4:	4619      	mov	r1, r3
 80020e6:	480d      	ldr	r0, [pc, #52]	; (800211c <MX_GPIO_Init+0x1b8>)
 80020e8:	f002 fdf8 	bl	8004cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 80020ec:	2308      	movs	r3, #8
 80020ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 80020f8:	f107 031c 	add.w	r3, r7, #28
 80020fc:	4619      	mov	r1, r3
 80020fe:	4806      	ldr	r0, [pc, #24]	; (8002118 <MX_GPIO_Init+0x1b4>)
 8002100:	f002 fdec 	bl	8004cdc <HAL_GPIO_Init>

}
 8002104:	bf00      	nop
 8002106:	3730      	adds	r7, #48	; 0x30
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	40020800 	.word	0x40020800
 8002114:	40020400 	.word	0x40020400
 8002118:	40020c00 	.word	0x40020c00
 800211c:	40020000 	.word	0x40020000

08002120 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <MX_I2C2_Init+0x50>)
 8002126:	4a13      	ldr	r2, [pc, #76]	; (8002174 <MX_I2C2_Init+0x54>)
 8002128:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <MX_I2C2_Init+0x50>)
 800212c:	4a12      	ldr	r2, [pc, #72]	; (8002178 <MX_I2C2_Init+0x58>)
 800212e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <MX_I2C2_Init+0x50>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <MX_I2C2_Init+0x50>)
 8002138:	2200      	movs	r2, #0
 800213a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <MX_I2C2_Init+0x50>)
 800213e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002142:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002144:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <MX_I2C2_Init+0x50>)
 8002146:	2200      	movs	r2, #0
 8002148:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <MX_I2C2_Init+0x50>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002150:	4b07      	ldr	r3, [pc, #28]	; (8002170 <MX_I2C2_Init+0x50>)
 8002152:	2200      	movs	r2, #0
 8002154:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <MX_I2C2_Init+0x50>)
 8002158:	2200      	movs	r2, #0
 800215a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800215c:	4804      	ldr	r0, [pc, #16]	; (8002170 <MX_I2C2_Init+0x50>)
 800215e:	f002 ff8b 	bl	8005078 <HAL_I2C_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002168:	f000 f8f4 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20001c78 	.word	0x20001c78
 8002174:	40005800 	.word	0x40005800
 8002178:	000186a0 	.word	0x000186a0

0800217c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08a      	sub	sp, #40	; 0x28
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a19      	ldr	r2, [pc, #100]	; (8002200 <HAL_I2C_MspInit+0x84>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d12c      	bne.n	80021f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_I2C_MspInit+0x88>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a17      	ldr	r2, [pc, #92]	; (8002204 <HAL_I2C_MspInit+0x88>)
 80021a8:	f043 0302 	orr.w	r3, r3, #2
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_I2C_MspInit+0x88>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_SIOC_Pin|I2C_SIOD_Pin;
 80021ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021c0:	2312      	movs	r3, #18
 80021c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c4:	2301      	movs	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c8:	2303      	movs	r3, #3
 80021ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021cc:	2304      	movs	r3, #4
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	480c      	ldr	r0, [pc, #48]	; (8002208 <HAL_I2C_MspInit+0x8c>)
 80021d8:	f002 fd80 	bl	8004cdc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_I2C_MspInit+0x88>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	4a07      	ldr	r2, [pc, #28]	; (8002204 <HAL_I2C_MspInit+0x88>)
 80021e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021ea:	6413      	str	r3, [r2, #64]	; 0x40
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_I2C_MspInit+0x88>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80021f8:	bf00      	nop
 80021fa:	3728      	adds	r7, #40	; 0x28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40005800 	.word	0x40005800
 8002204:	40023800 	.word	0x40023800
 8002208:	40020400 	.word	0x40020400

0800220c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8002210:	f00c fbc4 	bl	800e99c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002214:	f001 ff52 	bl	80040bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002218:	f000 f816 	bl	8002248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800221c:	f7ff fea2 	bl	8001f64 <MX_GPIO_Init>
  MX_DMA_Init();
 8002220:	f7ff fc84 	bl	8001b2c <MX_DMA_Init>
  MX_FSMC_Init();
 8002224:	f7ff fde8 	bl	8001df8 <MX_FSMC_Init>
  MX_DCMI_Init();
 8002228:	f7ff fb68 	bl	80018fc <MX_DCMI_Init>
  MX_I2C2_Init();
 800222c:	f7ff ff78 	bl	8002120 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8002230:	f000 f896 	bl	8002360 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8002234:	f000 f9a8 	bl	8002588 <MX_SPI2_Init>
  MX_FATFS_Init();
 8002238:	f007 f8bc 	bl	80093b4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800223c:	f7ff fcda 	bl	8001bf4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002240:	f008 fdad 	bl	800ad9e <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002244:	e7fe      	b.n	8002244 <main+0x38>
	...

08002248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b094      	sub	sp, #80	; 0x50
 800224c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800224e:	f107 0320 	add.w	r3, r7, #32
 8002252:	2230      	movs	r2, #48	; 0x30
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f00c fd4d 	bl	800ecf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <SystemClock_Config+0xe0>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	4a2c      	ldr	r2, [pc, #176]	; (8002328 <SystemClock_Config+0xe0>)
 8002276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227a:	6413      	str	r3, [r2, #64]	; 0x40
 800227c:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <SystemClock_Config+0xe0>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002288:	2300      	movs	r3, #0
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	4b27      	ldr	r3, [pc, #156]	; (800232c <SystemClock_Config+0xe4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a26      	ldr	r2, [pc, #152]	; (800232c <SystemClock_Config+0xe4>)
 8002292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b24      	ldr	r3, [pc, #144]	; (800232c <SystemClock_Config+0xe4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80022a4:	2303      	movs	r3, #3
 80022a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022ae:	2301      	movs	r3, #1
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022b2:	2310      	movs	r3, #16
 80022b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022b6:	2302      	movs	r3, #2
 80022b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022c0:	2308      	movs	r3, #8
 80022c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80022c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80022c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022ca:	2302      	movs	r3, #2
 80022cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80022ce:	2307      	movs	r3, #7
 80022d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022d2:	f107 0320 	add.w	r3, r7, #32
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 f812 	bl	8005300 <HAL_RCC_OscConfig>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80022e2:	f000 f837 	bl	8002354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022e6:	230f      	movs	r3, #15
 80022e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ea:	2302      	movs	r3, #2
 80022ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	2105      	movs	r1, #5
 8002304:	4618      	mov	r0, r3
 8002306:	f003 fa73 	bl	80057f0 <HAL_RCC_ClockConfig>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002310:	f000 f820 	bl	8002354 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8002314:	2200      	movs	r2, #0
 8002316:	2100      	movs	r1, #0
 8002318:	2000      	movs	r0, #0
 800231a:	f003 fb4f 	bl	80059bc <HAL_RCC_MCOConfig>
}
 800231e:	bf00      	nop
 8002320:	3750      	adds	r7, #80	; 0x50
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800
 800232c:	40007000 	.word	0x40007000

08002330 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a04      	ldr	r2, [pc, #16]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d101      	bne.n	8002346 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002342:	f001 fedd 	bl	8004100 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40001000 	.word	0x40001000

08002354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002358:	b672      	cpsid	i
}
 800235a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800235c:	e7fe      	b.n	800235c <Error_Handler+0x8>
	...

08002360 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002364:	4b0d      	ldr	r3, [pc, #52]	; (800239c <MX_SDIO_SD_Init+0x3c>)
 8002366:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <MX_SDIO_SD_Init+0x40>)
 8002368:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <MX_SDIO_SD_Init+0x3c>)
 800236c:	2200      	movs	r2, #0
 800236e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002370:	4b0a      	ldr	r3, [pc, #40]	; (800239c <MX_SDIO_SD_Init+0x3c>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <MX_SDIO_SD_Init+0x3c>)
 8002378:	2200      	movs	r2, #0
 800237a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 800237c:	4b07      	ldr	r3, [pc, #28]	; (800239c <MX_SDIO_SD_Init+0x3c>)
 800237e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002382:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <MX_SDIO_SD_Init+0x3c>)
 8002386:	2200      	movs	r2, #0
 8002388:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <MX_SDIO_SD_Init+0x3c>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20001ccc 	.word	0x20001ccc
 80023a0:	40012c00 	.word	0x40012c00

080023a4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a69      	ldr	r2, [pc, #420]	; (8002568 <HAL_SD_MspInit+0x1c4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	f040 80cb 	bne.w	800255e <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80023c8:	2300      	movs	r3, #0
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	4b67      	ldr	r3, [pc, #412]	; (800256c <HAL_SD_MspInit+0x1c8>)
 80023ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d0:	4a66      	ldr	r2, [pc, #408]	; (800256c <HAL_SD_MspInit+0x1c8>)
 80023d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023d6:	6453      	str	r3, [r2, #68]	; 0x44
 80023d8:	4b64      	ldr	r3, [pc, #400]	; (800256c <HAL_SD_MspInit+0x1c8>)
 80023da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	4b60      	ldr	r3, [pc, #384]	; (800256c <HAL_SD_MspInit+0x1c8>)
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	4a5f      	ldr	r2, [pc, #380]	; (800256c <HAL_SD_MspInit+0x1c8>)
 80023ee:	f043 0304 	orr.w	r3, r3, #4
 80023f2:	6313      	str	r3, [r2, #48]	; 0x30
 80023f4:	4b5d      	ldr	r3, [pc, #372]	; (800256c <HAL_SD_MspInit+0x1c8>)
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	4b59      	ldr	r3, [pc, #356]	; (800256c <HAL_SD_MspInit+0x1c8>)
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	4a58      	ldr	r2, [pc, #352]	; (800256c <HAL_SD_MspInit+0x1c8>)
 800240a:	f043 0308 	orr.w	r3, r3, #8
 800240e:	6313      	str	r3, [r2, #48]	; 0x30
 8002410:	4b56      	ldr	r3, [pc, #344]	; (800256c <HAL_SD_MspInit+0x1c8>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800241c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002420:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800242e:	230c      	movs	r3, #12
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002432:	f107 0314 	add.w	r3, r7, #20
 8002436:	4619      	mov	r1, r3
 8002438:	484d      	ldr	r0, [pc, #308]	; (8002570 <HAL_SD_MspInit+0x1cc>)
 800243a:	f002 fc4f 	bl	8004cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800243e:	2304      	movs	r3, #4
 8002440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244a:	2303      	movs	r3, #3
 800244c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800244e:	230c      	movs	r3, #12
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	4619      	mov	r1, r3
 8002458:	4846      	ldr	r0, [pc, #280]	; (8002574 <HAL_SD_MspInit+0x1d0>)
 800245a:	f002 fc3f 	bl	8004cdc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800245e:	4b46      	ldr	r3, [pc, #280]	; (8002578 <HAL_SD_MspInit+0x1d4>)
 8002460:	4a46      	ldr	r2, [pc, #280]	; (800257c <HAL_SD_MspInit+0x1d8>)
 8002462:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002464:	4b44      	ldr	r3, [pc, #272]	; (8002578 <HAL_SD_MspInit+0x1d4>)
 8002466:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800246a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800246c:	4b42      	ldr	r3, [pc, #264]	; (8002578 <HAL_SD_MspInit+0x1d4>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002472:	4b41      	ldr	r3, [pc, #260]	; (8002578 <HAL_SD_MspInit+0x1d4>)
 8002474:	2200      	movs	r2, #0
 8002476:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002478:	4b3f      	ldr	r3, [pc, #252]	; (8002578 <HAL_SD_MspInit+0x1d4>)
 800247a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800247e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002480:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <HAL_SD_MspInit+0x1d4>)
 8002482:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002486:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002488:	4b3b      	ldr	r3, [pc, #236]	; (8002578 <HAL_SD_MspInit+0x1d4>)
 800248a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800248e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002490:	4b39      	ldr	r3, [pc, #228]	; (8002578 <HAL_SD_MspInit+0x1d4>)
 8002492:	2220      	movs	r2, #32
 8002494:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002496:	4b38      	ldr	r3, [pc, #224]	; (8002578 <HAL_SD_MspInit+0x1d4>)
 8002498:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800249c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800249e:	4b36      	ldr	r3, [pc, #216]	; (8002578 <HAL_SD_MspInit+0x1d4>)
 80024a0:	2204      	movs	r2, #4
 80024a2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80024a4:	4b34      	ldr	r3, [pc, #208]	; (8002578 <HAL_SD_MspInit+0x1d4>)
 80024a6:	2203      	movs	r2, #3
 80024a8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80024aa:	4b33      	ldr	r3, [pc, #204]	; (8002578 <HAL_SD_MspInit+0x1d4>)
 80024ac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80024b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80024b2:	4b31      	ldr	r3, [pc, #196]	; (8002578 <HAL_SD_MspInit+0x1d4>)
 80024b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80024b8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80024ba:	482f      	ldr	r0, [pc, #188]	; (8002578 <HAL_SD_MspInit+0x1d4>)
 80024bc:	f002 f870 	bl	80045a0 <HAL_DMA_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80024c6:	f7ff ff45 	bl	8002354 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a2a      	ldr	r2, [pc, #168]	; (8002578 <HAL_SD_MspInit+0x1d4>)
 80024ce:	641a      	str	r2, [r3, #64]	; 0x40
 80024d0:	4a29      	ldr	r2, [pc, #164]	; (8002578 <HAL_SD_MspInit+0x1d4>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80024d6:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <HAL_SD_MspInit+0x1dc>)
 80024d8:	4a2a      	ldr	r2, [pc, #168]	; (8002584 <HAL_SD_MspInit+0x1e0>)
 80024da:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80024dc:	4b28      	ldr	r3, [pc, #160]	; (8002580 <HAL_SD_MspInit+0x1dc>)
 80024de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024e2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024e4:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_SD_MspInit+0x1dc>)
 80024e6:	2240      	movs	r2, #64	; 0x40
 80024e8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ea:	4b25      	ldr	r3, [pc, #148]	; (8002580 <HAL_SD_MspInit+0x1dc>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024f0:	4b23      	ldr	r3, [pc, #140]	; (8002580 <HAL_SD_MspInit+0x1dc>)
 80024f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024f6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024f8:	4b21      	ldr	r3, [pc, #132]	; (8002580 <HAL_SD_MspInit+0x1dc>)
 80024fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024fe:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002500:	4b1f      	ldr	r3, [pc, #124]	; (8002580 <HAL_SD_MspInit+0x1dc>)
 8002502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002506:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002508:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <HAL_SD_MspInit+0x1dc>)
 800250a:	2220      	movs	r2, #32
 800250c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800250e:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <HAL_SD_MspInit+0x1dc>)
 8002510:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002514:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002516:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <HAL_SD_MspInit+0x1dc>)
 8002518:	2204      	movs	r2, #4
 800251a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800251c:	4b18      	ldr	r3, [pc, #96]	; (8002580 <HAL_SD_MspInit+0x1dc>)
 800251e:	2203      	movs	r2, #3
 8002520:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002522:	4b17      	ldr	r3, [pc, #92]	; (8002580 <HAL_SD_MspInit+0x1dc>)
 8002524:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002528:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800252a:	4b15      	ldr	r3, [pc, #84]	; (8002580 <HAL_SD_MspInit+0x1dc>)
 800252c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002532:	4813      	ldr	r0, [pc, #76]	; (8002580 <HAL_SD_MspInit+0x1dc>)
 8002534:	f002 f834 	bl	80045a0 <HAL_DMA_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800253e:	f7ff ff09 	bl	8002354 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <HAL_SD_MspInit+0x1dc>)
 8002546:	63da      	str	r2, [r3, #60]	; 0x3c
 8002548:	4a0d      	ldr	r2, [pc, #52]	; (8002580 <HAL_SD_MspInit+0x1dc>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2105      	movs	r1, #5
 8002552:	2031      	movs	r0, #49	; 0x31
 8002554:	f001 fed0 	bl	80042f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002558:	2031      	movs	r0, #49	; 0x31
 800255a:	f001 fee9 	bl	8004330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800255e:	bf00      	nop
 8002560:	3728      	adds	r7, #40	; 0x28
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40012c00 	.word	0x40012c00
 800256c:	40023800 	.word	0x40023800
 8002570:	40020800 	.word	0x40020800
 8002574:	40020c00 	.word	0x40020c00
 8002578:	20001d50 	.word	0x20001d50
 800257c:	40026458 	.word	0x40026458
 8002580:	20001db0 	.word	0x20001db0
 8002584:	400264a0 	.word	0x400264a0

08002588 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800258c:	4b17      	ldr	r3, [pc, #92]	; (80025ec <MX_SPI2_Init+0x64>)
 800258e:	4a18      	ldr	r2, [pc, #96]	; (80025f0 <MX_SPI2_Init+0x68>)
 8002590:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <MX_SPI2_Init+0x64>)
 8002594:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002598:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800259a:	4b14      	ldr	r3, [pc, #80]	; (80025ec <MX_SPI2_Init+0x64>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <MX_SPI2_Init+0x64>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <MX_SPI2_Init+0x64>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025ac:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <MX_SPI2_Init+0x64>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025b2:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <MX_SPI2_Init+0x64>)
 80025b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80025ba:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <MX_SPI2_Init+0x64>)
 80025bc:	2220      	movs	r2, #32
 80025be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025c0:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <MX_SPI2_Init+0x64>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025c6:	4b09      	ldr	r3, [pc, #36]	; (80025ec <MX_SPI2_Init+0x64>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <MX_SPI2_Init+0x64>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <MX_SPI2_Init+0x64>)
 80025d4:	220a      	movs	r2, #10
 80025d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025d8:	4804      	ldr	r0, [pc, #16]	; (80025ec <MX_SPI2_Init+0x64>)
 80025da:	f004 fee2 	bl	80073a2 <HAL_SPI_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80025e4:	f7ff feb6 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025e8:	bf00      	nop
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20001e10 	.word	0x20001e10
 80025f0:	40003800 	.word	0x40003800

080025f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	; 0x28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <HAL_SPI_MspInit+0x94>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d134      	bne.n	8002680 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	4b1c      	ldr	r3, [pc, #112]	; (800268c <HAL_SPI_MspInit+0x98>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a1b      	ldr	r2, [pc, #108]	; (800268c <HAL_SPI_MspInit+0x98>)
 8002620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_SPI_MspInit+0x98>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <HAL_SPI_MspInit+0x98>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a14      	ldr	r2, [pc, #80]	; (800268c <HAL_SPI_MspInit+0x98>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_SPI_MspInit+0x98>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCDTP_CLK_Pin|LCDTP_DOUT_Pin|LCDTP_DIN_Pin;
 800264e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265c:	2303      	movs	r3, #3
 800265e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002660:	2305      	movs	r3, #5
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002664:	f107 0314 	add.w	r3, r7, #20
 8002668:	4619      	mov	r1, r3
 800266a:	4809      	ldr	r0, [pc, #36]	; (8002690 <HAL_SPI_MspInit+0x9c>)
 800266c:	f002 fb36 	bl	8004cdc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002670:	2200      	movs	r2, #0
 8002672:	2105      	movs	r1, #5
 8002674:	2024      	movs	r0, #36	; 0x24
 8002676:	f001 fe3f 	bl	80042f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800267a:	2024      	movs	r0, #36	; 0x24
 800267c:	f001 fe58 	bl	8004330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002680:	bf00      	nop
 8002682:	3728      	adds	r7, #40	; 0x28
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40003800 	.word	0x40003800
 800268c:	40023800 	.word	0x40023800
 8002690:	40020400 	.word	0x40020400

08002694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_MspInit+0x54>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	4a11      	ldr	r2, [pc, #68]	; (80026e8 <HAL_MspInit+0x54>)
 80026a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a8:	6453      	str	r3, [r2, #68]	; 0x44
 80026aa:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <HAL_MspInit+0x54>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	603b      	str	r3, [r7, #0]
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_MspInit+0x54>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <HAL_MspInit+0x54>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HAL_MspInit+0x54>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026d2:	2200      	movs	r2, #0
 80026d4:	210f      	movs	r1, #15
 80026d6:	f06f 0001 	mvn.w	r0, #1
 80026da:	f001 fe0d 	bl	80042f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800

080026ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08e      	sub	sp, #56	; 0x38
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <HAL_InitTick+0xe4>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	4a32      	ldr	r2, [pc, #200]	; (80027d0 <HAL_InitTick+0xe4>)
 8002706:	f043 0310 	orr.w	r3, r3, #16
 800270a:	6413      	str	r3, [r2, #64]	; 0x40
 800270c:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <HAL_InitTick+0xe4>)
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002718:	f107 0210 	add.w	r2, r7, #16
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f003 fad8 	bl	8005cd8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d103      	bne.n	800273a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002732:	f003 fabd 	bl	8005cb0 <HAL_RCC_GetPCLK1Freq>
 8002736:	6378      	str	r0, [r7, #52]	; 0x34
 8002738:	e004      	b.n	8002744 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800273a:	f003 fab9 	bl	8005cb0 <HAL_RCC_GetPCLK1Freq>
 800273e:	4603      	mov	r3, r0
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002746:	4a23      	ldr	r2, [pc, #140]	; (80027d4 <HAL_InitTick+0xe8>)
 8002748:	fba2 2303 	umull	r2, r3, r2, r3
 800274c:	0c9b      	lsrs	r3, r3, #18
 800274e:	3b01      	subs	r3, #1
 8002750:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002752:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <HAL_InitTick+0xec>)
 8002754:	4a21      	ldr	r2, [pc, #132]	; (80027dc <HAL_InitTick+0xf0>)
 8002756:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002758:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <HAL_InitTick+0xec>)
 800275a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800275e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002760:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <HAL_InitTick+0xec>)
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002766:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <HAL_InitTick+0xec>)
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276c:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <HAL_InitTick+0xec>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002772:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_InitTick+0xec>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002778:	4817      	ldr	r0, [pc, #92]	; (80027d8 <HAL_InitTick+0xec>)
 800277a:	f005 fd21 	bl	80081c0 <HAL_TIM_Base_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002784:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002788:	2b00      	cmp	r3, #0
 800278a:	d11b      	bne.n	80027c4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800278c:	4812      	ldr	r0, [pc, #72]	; (80027d8 <HAL_InitTick+0xec>)
 800278e:	f005 fd71 	bl	8008274 <HAL_TIM_Base_Start_IT>
 8002792:	4603      	mov	r3, r0
 8002794:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002798:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800279c:	2b00      	cmp	r3, #0
 800279e:	d111      	bne.n	80027c4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80027a0:	2036      	movs	r0, #54	; 0x36
 80027a2:	f001 fdc5 	bl	8004330 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b0f      	cmp	r3, #15
 80027aa:	d808      	bhi.n	80027be <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80027ac:	2200      	movs	r2, #0
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	2036      	movs	r0, #54	; 0x36
 80027b2:	f001 fda1 	bl	80042f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <HAL_InitTick+0xf4>)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	e002      	b.n	80027c4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80027c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3738      	adds	r7, #56	; 0x38
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800
 80027d4:	431bde83 	.word	0x431bde83
 80027d8:	20001e68 	.word	0x20001e68
 80027dc:	40001000 	.word	0x40001000
 80027e0:	2000006c 	.word	0x2000006c

080027e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027e8:	e7fe      	b.n	80027e8 <NMI_Handler+0x4>

080027ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ee:	e7fe      	b.n	80027ee <HardFault_Handler+0x4>

080027f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f4:	e7fe      	b.n	80027f4 <MemManage_Handler+0x4>

080027f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027fa:	e7fe      	b.n	80027fa <BusFault_Handler+0x4>

080027fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002800:	e7fe      	b.n	8002800 <UsageFault_Handler+0x4>

08002802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002802:	b480      	push	{r7}
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002814:	4802      	ldr	r0, [pc, #8]	; (8002820 <SPI2_IRQHandler+0x10>)
 8002816:	f005 fa3d 	bl	8007c94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20001e10 	.word	0x20001e10

08002824 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002828:	4802      	ldr	r0, [pc, #8]	; (8002834 <SDIO_IRQHandler+0x10>)
 800282a:	f003 fcff 	bl	800622c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20001ccc 	.word	0x20001ccc

08002838 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800283c:	4802      	ldr	r0, [pc, #8]	; (8002848 <TIM6_DAC_IRQHandler+0x10>)
 800283e:	f005 fd89 	bl	8008354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20001e68 	.word	0x20001e68

0800284c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <DMA2_Stream1_IRQHandler+0x10>)
 8002852:	f001 ffcd 	bl	80047f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200014ec 	.word	0x200014ec

08002860 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <DMA2_Stream3_IRQHandler+0x10>)
 8002866:	f001 ffc3 	bl	80047f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20001d50 	.word	0x20001d50

08002874 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <DMA2_Stream6_IRQHandler+0x10>)
 800287a:	f001 ffb9 	bl	80047f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20001db0 	.word	0x20001db0

08002888 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800288c:	4802      	ldr	r0, [pc, #8]	; (8002898 <DCMI_IRQHandler+0x10>)
 800288e:	f001 fd5d 	bl	800434c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200014ac 	.word	0x200014ac

0800289c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a4:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <_sbrk+0x5c>)
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <_sbrk+0x60>)
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <_sbrk+0x64>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <_sbrk+0x64>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <_sbrk+0x68>)
 80028bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <_sbrk+0x64>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d207      	bcs.n	80028dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028cc:	f00c f8e2 	bl	800ea94 <__errno>
 80028d0:	4603      	mov	r3, r0
 80028d2:	220c      	movs	r2, #12
 80028d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	e009      	b.n	80028f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <_sbrk+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028e2:	4b07      	ldr	r3, [pc, #28]	; (8002900 <_sbrk+0x64>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	4a05      	ldr	r2, [pc, #20]	; (8002900 <_sbrk+0x64>)
 80028ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20020000 	.word	0x20020000
 80028fc:	00000400 	.word	0x00000400
 8002900:	20001eb0 	.word	0x20001eb0
 8002904:	20006490 	.word	0x20006490

08002908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <SystemInit+0x20>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	4a05      	ldr	r2, [pc, #20]	; (8002928 <SystemInit+0x20>)
 8002914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800292c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002964 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002930:	480d      	ldr	r0, [pc, #52]	; (8002968 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002932:	490e      	ldr	r1, [pc, #56]	; (800296c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002934:	4a0e      	ldr	r2, [pc, #56]	; (8002970 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002938:	e002      	b.n	8002940 <LoopCopyDataInit>

0800293a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800293a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800293c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293e:	3304      	adds	r3, #4

08002940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002944:	d3f9      	bcc.n	800293a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002946:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002948:	4c0b      	ldr	r4, [pc, #44]	; (8002978 <LoopFillZerobss+0x26>)
  movs r3, #0
 800294a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800294c:	e001      	b.n	8002952 <LoopFillZerobss>

0800294e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002950:	3204      	adds	r2, #4

08002952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002954:	d3fb      	bcc.n	800294e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002956:	f7ff ffd7 	bl	8002908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800295a:	f00c f997 	bl	800ec8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800295e:	f7ff fc55 	bl	800220c <main>
  bx  lr    
 8002962:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800296c:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8002970:	08015c1c 	.word	0x08015c1c
  ldr r2, =_sbss
 8002974:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8002978:	2000648c 	.word	0x2000648c

0800297c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800297c:	e7fe      	b.n	800297c <ADC_IRQHandler>

0800297e <LCD_IO_Init>:
/**
  * @brief  Configures the LCD_SPI interface.
  * @retval None
  */
void LCD_IO_Init(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
//  HAL_Delay(100);
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
//  HAL_Delay(300);

}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LCD_IO_WriteMultipleData>:
  * @param  pData Pointer on the register value
  * @param  Size Size of byte to transmit to the register
  * @retval None
  */
void LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t counter = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]

  for (counter = Size; counter != 0; counter--)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	e00c      	b.n	80029ba <LCD_IO_WriteMultipleData+0x2e>
  {
    /* Write 16-bit Data */
    LCD_RAM = *(uint16_t *)pData;
 80029a0:	4a0b      	ldr	r2, [pc, #44]	; (80029d0 <LCD_IO_WriteMultipleData+0x44>)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	8013      	strh	r3, [r2, #0]
    counter--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
    pData += 2;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3302      	adds	r3, #2
 80029b2:	607b      	str	r3, [r7, #4]
  for (counter = Size; counter != 0; counter--)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1ef      	bne.n	80029a0 <LCD_IO_WriteMultipleData+0x14>
  }
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	60020000 	.word	0x60020000

080029d4 <LCD_IO_WriteReg>:
  * @brief  register address.
  * @param  Reg
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Data */
  LCD_REG  = (uint16_t)Reg;
 80029de:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80029e2:	79fa      	ldrb	r2, [r7, #7]
 80029e4:	b292      	uxth	r2, r2
 80029e6:	801a      	strh	r2, [r3, #0]

}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <LCD_IO_ReadData>:
  * @brief  Read register value.
  * @param  Reg
  * @retval None
  */
uint16_t LCD_IO_ReadData(void) 
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* Read 16-bit Reg */
  return (uint16_t)LCD_RAM;
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <LCD_IO_ReadData+0x14>)
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	b29b      	uxth	r3, r3
  
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	60020000 	.word	0x60020000

08002a0c <ili9325_Init>:
  * @brief  Initialize the ILI9325 LCD Component.
  * @param  None
  * @retval None
  */
void ili9325_Init(void)
{  
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* Initialize ILI9325 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002a10:	f7ff ffb5 	bl	800297e <LCD_IO_Init>
  
  /* Start Initial Sequence --------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
 8002a14:	2101      	movs	r1, #1
 8002a16:	2000      	movs	r0, #0
 8002a18:	f000 f9a7 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
 8002a1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a20:	2001      	movs	r0, #1
 8002a22:	f000 f9a2 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
 8002a26:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002a2a:	2002      	movs	r0, #2
 8002a2c:	f000 f99d 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
 8002a30:	f241 0118 	movw	r1, #4120	; 0x1018
 8002a34:	2003      	movs	r0, #3
 8002a36:	f000 f998 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	2004      	movs	r0, #4
 8002a3e:	f000 f994 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
 8002a42:	f240 2102 	movw	r1, #514	; 0x202
 8002a46:	2008      	movs	r0, #8
 8002a48:	f000 f98f 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2009      	movs	r0, #9
 8002a50:	f000 f98b 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 8002a54:	2100      	movs	r1, #0
 8002a56:	200a      	movs	r0, #10
 8002a58:	f000 f987 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	200c      	movs	r0, #12
 8002a60:	f000 f983 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 8002a64:	2100      	movs	r1, #0
 8002a66:	200d      	movs	r0, #13
 8002a68:	f000 f97f 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	200f      	movs	r0, #15
 8002a70:	f000 f97b 	bl	8002d6a <ili9325_WriteReg>
  
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8002a74:	2100      	movs	r1, #0
 8002a76:	2010      	movs	r0, #16
 8002a78:	f000 f977 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	2011      	movs	r0, #17
 8002a80:	f000 f973 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8002a84:	2100      	movs	r1, #0
 8002a86:	2012      	movs	r0, #18
 8002a88:	f000 f96f 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	2013      	movs	r0, #19
 8002a90:	f000 f96b 	bl	8002d6a <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8002a94:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8002a98:	2010      	movs	r0, #16
 8002a9a:	f000 f966 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8002a9e:	f240 1137 	movw	r1, #311	; 0x137
 8002aa2:	2011      	movs	r0, #17
 8002aa4:	f000 f961 	bl	8002d6a <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8002aa8:	f240 1139 	movw	r1, #313	; 0x139
 8002aac:	2012      	movs	r0, #18
 8002aae:	f000 f95c 	bl	8002d6a <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8002ab2:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8002ab6:	2013      	movs	r0, #19
 8002ab8:	f000 f957 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8002abc:	2113      	movs	r1, #19
 8002abe:	2029      	movs	r0, #41	; 0x29
 8002ac0:	f000 f953 	bl	8002d6a <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	2020      	movs	r0, #32
 8002ac8:	f000 f94f 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 8002acc:	2100      	movs	r1, #0
 8002ace:	2021      	movs	r0, #33	; 0x21
 8002ad0:	f000 f94b 	bl	8002d6a <ili9325_WriteReg>

  /* Adjust the Gamma Curve (ILI9325) ----------------------------------------*/
  ili9325_WriteReg(LCD_REG_48, 0x0007);
 8002ad4:	2107      	movs	r1, #7
 8002ad6:	2030      	movs	r0, #48	; 0x30
 8002ad8:	f000 f947 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_49, 0x0302);
 8002adc:	f240 3102 	movw	r1, #770	; 0x302
 8002ae0:	2031      	movs	r0, #49	; 0x31
 8002ae2:	f000 f942 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_50, 0x0105);
 8002ae6:	f240 1105 	movw	r1, #261	; 0x105
 8002aea:	2032      	movs	r0, #50	; 0x32
 8002aec:	f000 f93d 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_53, 0x0206);
 8002af0:	f240 2106 	movw	r1, #518	; 0x206
 8002af4:	2035      	movs	r0, #53	; 0x35
 8002af6:	f000 f938 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_54, 0x0808);
 8002afa:	f640 0108 	movw	r1, #2056	; 0x808
 8002afe:	2036      	movs	r0, #54	; 0x36
 8002b00:	f000 f933 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_55, 0x0206);
 8002b04:	f240 2106 	movw	r1, #518	; 0x206
 8002b08:	2037      	movs	r0, #55	; 0x37
 8002b0a:	f000 f92e 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_56, 0x0504);
 8002b0e:	f240 5104 	movw	r1, #1284	; 0x504
 8002b12:	2038      	movs	r0, #56	; 0x38
 8002b14:	f000 f929 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_57, 0x0007);
 8002b18:	2107      	movs	r1, #7
 8002b1a:	2039      	movs	r0, #57	; 0x39
 8002b1c:	f000 f925 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_60, 0x0105);
 8002b20:	f240 1105 	movw	r1, #261	; 0x105
 8002b24:	203c      	movs	r0, #60	; 0x3c
 8002b26:	f000 f920 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_61, 0x0808);
 8002b2a:	f640 0108 	movw	r1, #2056	; 0x808
 8002b2e:	203d      	movs	r0, #61	; 0x3d
 8002b30:	f000 f91b 	bl	8002d6a <ili9325_WriteReg>
  HAL_Delay(50); 
 8002b34:	2032      	movs	r0, #50	; 0x32
 8002b36:	f001 fb03 	bl	8004140 <HAL_Delay>
  /* Set GRAM area -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	2050      	movs	r0, #80	; 0x50
 8002b3e:	f000 f914 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 8002b42:	21ef      	movs	r1, #239	; 0xef
 8002b44:	2051      	movs	r0, #81	; 0x51
 8002b46:	f000 f910 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	2052      	movs	r0, #82	; 0x52
 8002b4e:	f000 f90c 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 8002b52:	f240 113f 	movw	r1, #319	; 0x13f
 8002b56:	2053      	movs	r0, #83	; 0x53
 8002b58:	f000 f907 	bl	8002d6a <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
 8002b5c:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8002b60:	2060      	movs	r0, #96	; 0x60
 8002b62:	f000 f902 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 8002b66:	2101      	movs	r1, #1
 8002b68:	2061      	movs	r0, #97	; 0x61
 8002b6a:	f000 f8fe 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 8002b6e:	2100      	movs	r1, #0
 8002b70:	206a      	movs	r0, #106	; 0x6a
 8002b72:	f000 f8fa 	bl	8002d6a <ili9325_WriteReg>
  
  /* Partial Display Control -------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_128, 0x0000);
 8002b76:	2100      	movs	r1, #0
 8002b78:	2080      	movs	r0, #128	; 0x80
 8002b7a:	f000 f8f6 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_129, 0x0000);
 8002b7e:	2100      	movs	r1, #0
 8002b80:	2081      	movs	r0, #129	; 0x81
 8002b82:	f000 f8f2 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_130, 0x0000);
 8002b86:	2100      	movs	r1, #0
 8002b88:	2082      	movs	r0, #130	; 0x82
 8002b8a:	f000 f8ee 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_131, 0x0000);
 8002b8e:	2100      	movs	r1, #0
 8002b90:	2083      	movs	r0, #131	; 0x83
 8002b92:	f000 f8ea 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_132, 0x0000);
 8002b96:	2100      	movs	r1, #0
 8002b98:	2084      	movs	r0, #132	; 0x84
 8002b9a:	f000 f8e6 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_133, 0x0000);
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	2085      	movs	r0, #133	; 0x85
 8002ba2:	f000 f8e2 	bl	8002d6a <ili9325_WriteReg>
  
  /* Panel Control -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_144, 0x0010);
 8002ba6:	2110      	movs	r1, #16
 8002ba8:	2090      	movs	r0, #144	; 0x90
 8002baa:	f000 f8de 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_146, 0x0000);
 8002bae:	2100      	movs	r1, #0
 8002bb0:	2092      	movs	r0, #146	; 0x92
 8002bb2:	f000 f8da 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_147, 0x0003);
 8002bb6:	2103      	movs	r1, #3
 8002bb8:	2093      	movs	r0, #147	; 0x93
 8002bba:	f000 f8d6 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_149, 0x0110);
 8002bbe:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002bc2:	2095      	movs	r0, #149	; 0x95
 8002bc4:	f000 f8d1 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_151, 0x0000);
 8002bc8:	2100      	movs	r1, #0
 8002bca:	2097      	movs	r0, #151	; 0x97
 8002bcc:	f000 f8cd 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_152, 0x0000);
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	2098      	movs	r0, #152	; 0x98
 8002bd4:	f000 f8c9 	bl	8002d6a <ili9325_WriteReg>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 8002bd8:	f241 0128 	movw	r1, #4136	; 0x1028
 8002bdc:	2003      	movs	r0, #3
 8002bde:	f000 f8c4 	bl	8002d6a <ili9325_WriteReg>
  
  /* 262K color and display ON */ 
  ili9325_WriteReg(LCD_REG_7, 0x0173);    
 8002be2:	f240 1173 	movw	r1, #371	; 0x173
 8002be6:	2007      	movs	r0, #7
 8002be8:	f000 f8bf 	bl	8002d6a <ili9325_WriteReg>
  
  /* Set the Cursor */ 
  ili9325_SetCursor(0, 0);
 8002bec:	2100      	movs	r1, #0
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f000 f86d 	bl	8002cce <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8002bf4:	2022      	movs	r0, #34	; 0x22
 8002bf6:	f7ff feed 	bl	80029d4 <LCD_IO_WriteReg>
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <ili9325_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOn(void)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	af00      	add	r7, sp, #0
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8002c02:	2100      	movs	r1, #0
 8002c04:	2010      	movs	r0, #16
 8002c06:	f000 f8b0 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	2011      	movs	r0, #17
 8002c0e:	f000 f8ac 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8002c12:	2100      	movs	r1, #0
 8002c14:	2012      	movs	r0, #18
 8002c16:	f000 f8a8 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	2013      	movs	r0, #19
 8002c1e:	f000 f8a4 	bl	8002d6a <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8002c22:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8002c26:	2010      	movs	r0, #16
 8002c28:	f000 f89f 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8002c2c:	f240 1137 	movw	r1, #311	; 0x137
 8002c30:	2011      	movs	r0, #17
 8002c32:	f000 f89a 	bl	8002d6a <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8002c36:	f240 1139 	movw	r1, #313	; 0x139
 8002c3a:	2012      	movs	r0, #18
 8002c3c:	f000 f895 	bl	8002d6a <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8002c40:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8002c44:	2013      	movs	r0, #19
 8002c46:	f000 f890 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8002c4a:	2113      	movs	r1, #19
 8002c4c:	2029      	movs	r0, #41	; 0x29
 8002c4e:	f000 f88c 	bl	8002d6a <ili9325_WriteReg>
 
  /* Display On */
  ili9325_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
 8002c52:	f240 1173 	movw	r1, #371	; 0x173
 8002c56:	2007      	movs	r0, #7
 8002c58:	f000 f887 	bl	8002d6a <ili9325_WriteReg>
}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <ili9325_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOff(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Power Off sequence ------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8002c64:	2100      	movs	r1, #0
 8002c66:	2010      	movs	r0, #16
 8002c68:	f000 f87f 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	2011      	movs	r0, #17
 8002c70:	f000 f87b 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8002c74:	2100      	movs	r1, #0
 8002c76:	2012      	movs	r0, #18
 8002c78:	f000 f877 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	2013      	movs	r0, #19
 8002c80:	f000 f873 	bl	8002d6a <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_41, 0x0000); /* VCM[4:0] for VCOMH */
 8002c84:	2100      	movs	r1, #0
 8002c86:	2029      	movs	r0, #41	; 0x29
 8002c88:	f000 f86f 	bl	8002d6a <ili9325_WriteReg>
  
  /* Display Off */
  ili9325_WriteReg(LCD_REG_7, 0x0); 
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	2007      	movs	r0, #7
 8002c90:	f000 f86b 	bl	8002d6a <ili9325_WriteReg>
}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <ili9325_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9325_GetLcdPixelWidth(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
 return (uint16_t)320;
 8002c9c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <ili9325_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9325_GetLcdPixelHeight(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0
 return (uint16_t)240;
 8002cae:	23f0      	movs	r3, #240	; 0xf0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <ili9325_ReadID>:
  * @brief  Get the ILI9325 ID.
  * @param  None
  * @retval The ILI9325 ID 
  */
uint16_t ili9325_ReadID(void)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 8002cbe:	f7ff fe5e 	bl	800297e <LCD_IO_Init>
  return (ili9325_ReadReg(0x00));
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f000 f866 	bl	8002d94 <ili9325_ReadReg>
 8002cc8:	4603      	mov	r3, r0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <ili9325_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9325_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	460a      	mov	r2, r1
 8002cd8:	80fb      	strh	r3, [r7, #6]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	80bb      	strh	r3, [r7, #4]
//  ili9325_WriteReg(LCD_REG_32, Ypos);
//  ili9325_WriteReg(LCD_REG_33, (ILI9325_LCD_PIXEL_WIDTH - 1 - Xpos));

  ili9325_WriteReg(LCD_REG_32, (ILI9325_LCD_PIXEL_HEIGHT- 1 - Ypos));
 8002cde:	88bb      	ldrh	r3, [r7, #4]
 8002ce0:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	2020      	movs	r0, #32
 8002cea:	f000 f83e 	bl	8002d6a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, Xpos);
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	2021      	movs	r0, #33	; 0x21
 8002cf4:	f000 f839 	bl	8002d6a <ili9325_WriteReg>

}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <ili9325_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9325_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	80fb      	strh	r3, [r7, #6]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	80bb      	strh	r3, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8002d12:	88ba      	ldrh	r2, [r7, #4]
 8002d14:	88fb      	ldrh	r3, [r7, #6]
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ffd8 	bl	8002cce <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8002d1e:	2022      	movs	r0, #34	; 0x22
 8002d20:	f7ff fe58 	bl	80029d4 <LCD_IO_WriteReg>

  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&RGBCode, 2);
 8002d24:	1cbb      	adds	r3, r7, #2
 8002d26:	2102      	movs	r1, #2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fe2f 	bl	800298c <LCD_IO_WriteMultipleData>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <ili9325_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval The RGB pixel color
  */
uint16_t ili9325_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	460a      	mov	r2, r1
 8002d40:	80fb      	strh	r3, [r7, #6]
 8002d42:	4613      	mov	r3, r2
 8002d44:	80bb      	strh	r3, [r7, #4]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8002d46:	88ba      	ldrh	r2, [r7, #4]
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ffbe 	bl	8002cce <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8002d52:	2022      	movs	r0, #34	; 0x22
 8002d54:	f7ff fe3e 	bl	80029d4 <LCD_IO_WriteReg>
  
  /* Dummy read */
  LCD_IO_ReadData();
 8002d58:	f7ff fe4c 	bl	80029f4 <LCD_IO_ReadData>
  
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 8002d5c:	f7ff fe4a 	bl	80029f4 <LCD_IO_ReadData>
 8002d60:	4603      	mov	r3, r0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <ili9325_WriteReg>:
  * @param  LCDReg: Address of the selected register.
  * @param  LCDRegValue: Value to write to the selected register.
  * @retval None
  */
void ili9325_WriteReg(uint8_t LCDReg, uint16_t LCDRegValue)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4603      	mov	r3, r0
 8002d72:	460a      	mov	r2, r1
 8002d74:	71fb      	strb	r3, [r7, #7]
 8002d76:	4613      	mov	r3, r2
 8002d78:	80bb      	strh	r3, [r7, #4]
  LCD_IO_WriteReg(LCDReg);
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fe29 	bl	80029d4 <LCD_IO_WriteReg>
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&LCDRegValue, 2);
 8002d82:	1d3b      	adds	r3, r7, #4
 8002d84:	2102      	movs	r1, #2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fe00 	bl	800298c <LCD_IO_WriteMultipleData>
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <ili9325_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCDReg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t ili9325_ReadReg(uint8_t LCDReg)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index (then Read Reg) */
  LCD_IO_WriteReg(LCDReg);
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fe17 	bl	80029d4 <LCD_IO_WriteReg>

  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 8002da6:	f7ff fe25 	bl	80029f4 <LCD_IO_ReadData>
 8002daa:	4603      	mov	r3, r0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <ili9325_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9325_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4604      	mov	r4, r0
 8002dbc:	4608      	mov	r0, r1
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4623      	mov	r3, r4
 8002dc4:	80fb      	strh	r3, [r7, #6]
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	80bb      	strh	r3, [r7, #4]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	807b      	strh	r3, [r7, #2]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	803b      	strh	r3, [r7, #0]
//  ili9325_WriteReg(LCD_REG_82, ILI9325_LCD_PIXEL_WIDTH - Xpos - Width);
//  /* Vertical GRAM End Address */
//  ili9325_WriteReg(LCD_REG_83, ILI9325_LCD_PIXEL_WIDTH - Xpos - 1);   
  
  /* Horizontal GRAM Start Address */
  ili9325_WriteReg(LCD_REG_80, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - Height));
 8002dd2:	88ba      	ldrh	r2, [r7, #4]
 8002dd4:	883b      	ldrh	r3, [r7, #0]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	4619      	mov	r1, r3
 8002de2:	2050      	movs	r0, #80	; 0x50
 8002de4:	f7ff ffc1 	bl	8002d6a <ili9325_WriteReg>
  /* Horizontal GRAM End Address */
  ili9325_WriteReg(LCD_REG_81, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - 1));
 8002de8:	88bb      	ldrh	r3, [r7, #4]
 8002dea:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	4619      	mov	r1, r3
 8002df2:	2051      	movs	r0, #81	; 0x51
 8002df4:	f7ff ffb9 	bl	8002d6a <ili9325_WriteReg>
  
  /* Vertical GRAM Start Address */
  ili9325_WriteReg(LCD_REG_82,  Xpos);
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	2052      	movs	r0, #82	; 0x52
 8002dfe:	f7ff ffb4 	bl	8002d6a <ili9325_WriteReg>
  /* Vertical GRAM End Address */
  ili9325_WriteReg(LCD_REG_83, (Xpos + Width - 1));
 8002e02:	88fa      	ldrh	r2, [r7, #6]
 8002e04:	887b      	ldrh	r3, [r7, #2]
 8002e06:	4413      	add	r3, r2
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	4619      	mov	r1, r3
 8002e10:	2053      	movs	r0, #83	; 0x53
 8002e12:	f7ff ffaa 	bl	8002d6a <ili9325_WriteReg>
  
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd90      	pop	{r4, r7, pc}
	...

08002e20 <ili9325_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4604      	mov	r4, r0
 8002e28:	4608      	mov	r0, r1
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4623      	mov	r3, r4
 8002e30:	80fb      	strh	r3, [r7, #6]
 8002e32:	4603      	mov	r3, r0
 8002e34:	80bb      	strh	r3, [r7, #4]
 8002e36:	460b      	mov	r3, r1
 8002e38:	807b      	strh	r3, [r7, #2]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos); 
 8002e42:	887a      	ldrh	r2, [r7, #2]
 8002e44:	88bb      	ldrh	r3, [r7, #4]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff40 	bl	8002cce <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8002e4e:	2022      	movs	r0, #34	; 0x22
 8002e50:	f7ff fdc0 	bl	80029d4 <LCD_IO_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	81fb      	strh	r3, [r7, #14]
 8002e58:	e007      	b.n	8002e6a <ili9325_DrawHLine+0x4a>
  {
    ArrayRGB[counter] = RGBCode;
 8002e5a:	89fb      	ldrh	r3, [r7, #14]
 8002e5c:	490a      	ldr	r1, [pc, #40]	; (8002e88 <ili9325_DrawHLine+0x68>)
 8002e5e:	88fa      	ldrh	r2, [r7, #6]
 8002e60:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8002e64:	89fb      	ldrh	r3, [r7, #14]
 8002e66:	3301      	adds	r3, #1
 8002e68:	81fb      	strh	r3, [r7, #14]
 8002e6a:	89fa      	ldrh	r2, [r7, #14]
 8002e6c:	883b      	ldrh	r3, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d3f3      	bcc.n	8002e5a <ili9325_DrawHLine+0x3a>
  }  

  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8002e72:	883b      	ldrh	r3, [r7, #0]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4619      	mov	r1, r3
 8002e78:	4803      	ldr	r0, [pc, #12]	; (8002e88 <ili9325_DrawHLine+0x68>)
 8002e7a:	f7ff fd87 	bl	800298c <LCD_IO_WriteMultipleData>
}
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd90      	pop	{r4, r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20001eb4 	.word	0x20001eb4

08002e8c <ili9325_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002e8c:	b590      	push	{r4, r7, lr}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4604      	mov	r4, r0
 8002e94:	4608      	mov	r0, r1
 8002e96:	4611      	mov	r1, r2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4623      	mov	r3, r4
 8002e9c:	80fb      	strh	r3, [r7, #6]
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	80bb      	strh	r3, [r7, #4]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	807b      	strh	r3, [r7, #2]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	81fb      	strh	r3, [r7, #14]

  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1020);
 8002eae:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8002eb2:	2003      	movs	r0, #3
 8002eb4:	f7ff ff59 	bl	8002d6a <ili9325_WriteReg>
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8002eb8:	887a      	ldrh	r2, [r7, #2]
 8002eba:	88bb      	ldrh	r3, [r7, #4]
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff ff05 	bl	8002cce <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8002ec4:	2022      	movs	r0, #34	; 0x22
 8002ec6:	f7ff fd85 	bl	80029d4 <LCD_IO_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8002eca:	2300      	movs	r3, #0
 8002ecc:	81fb      	strh	r3, [r7, #14]
 8002ece:	e007      	b.n	8002ee0 <ili9325_DrawVLine+0x54>
  {
    ArrayRGB[counter] = RGBCode;
 8002ed0:	89fb      	ldrh	r3, [r7, #14]
 8002ed2:	490d      	ldr	r1, [pc, #52]	; (8002f08 <ili9325_DrawVLine+0x7c>)
 8002ed4:	88fa      	ldrh	r2, [r7, #6]
 8002ed6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8002eda:	89fb      	ldrh	r3, [r7, #14]
 8002edc:	3301      	adds	r3, #1
 8002ede:	81fb      	strh	r3, [r7, #14]
 8002ee0:	89fa      	ldrh	r2, [r7, #14]
 8002ee2:	883b      	ldrh	r3, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d3f3      	bcc.n	8002ed0 <ili9325_DrawVLine+0x44>
  }
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8002ee8:	883b      	ldrh	r3, [r7, #0]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4619      	mov	r1, r3
 8002eee:	4806      	ldr	r0, [pc, #24]	; (8002f08 <ili9325_DrawVLine+0x7c>)
 8002ef0:	f7ff fd4c 	bl	800298c <LCD_IO_WriteMultipleData>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);  
 8002ef4:	f241 0128 	movw	r1, #4136	; 0x1028
 8002ef8:	2003      	movs	r0, #3
 8002efa:	f7ff ff36 	bl	8002d6a <ili9325_WriteReg>
}
 8002efe:	bf00      	nop
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd90      	pop	{r4, r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20001eb4 	.word	0x20001eb4

08002f0c <ili9325_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ili9325_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	603a      	str	r2, [r7, #0]
 8002f16:	80fb      	strh	r3, [r7, #6]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	2300      	movs	r3, #0
 8002f22:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	3302      	adds	r3, #2
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	3304      	adds	r3, #4
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	041b      	lsls	r3, r3, #16
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	330a      	adds	r3, #10
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	041b      	lsls	r3, r3, #16
 8002f54:	461a      	mov	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	603b      	str	r3, [r7, #0]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : decrement, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1038);
 8002f6e:	f241 0138 	movw	r1, #4152	; 0x1038
 8002f72:	2003      	movs	r0, #3
 8002f74:	f7ff fef9 	bl	8002d6a <ili9325_WriteReg>

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8002f78:	88ba      	ldrh	r2, [r7, #4]
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fea5 	bl	8002cce <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8002f84:	2022      	movs	r0, #34	; 0x22
 8002f86:	f7ff fd25 	bl	80029d4 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6838      	ldr	r0, [r7, #0]
 8002f92:	f7ff fcfb 	bl	800298c <LCD_IO_WriteMultipleData>
 
  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 8002f96:	f241 0128 	movw	r1, #4136	; 0x1028
 8002f9a:	2003      	movs	r0, #3
 8002f9c:	f7ff fee5 	bl	8002d6a <ili9325_WriteReg>
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <ili9325_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ili9325_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4604      	mov	r4, r0
 8002fb0:	4608      	mov	r0, r1
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4623      	mov	r3, r4
 8002fb8:	80fb      	strh	r3, [r7, #6]
 8002fba:	4603      	mov	r3, r0
 8002fbc:	80bb      	strh	r3, [r7, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	807b      	strh	r3, [r7, #2]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]

  size = (Xsize * Ysize);
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	883a      	ldrh	r2, [r7, #0]
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8002fd4:	88ba      	ldrh	r2, [r7, #4]
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fe77 	bl	8002cce <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8002fe0:	2022      	movs	r0, #34	; 0x22
 8002fe2:	f7ff fcf7 	bl	80029d4 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pdata, size*2);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	4619      	mov	r1, r3
 8002fec:	6a38      	ldr	r0, [r7, #32]
 8002fee:	f7ff fccd 	bl	800298c <LCD_IO_WriteMultipleData>
}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd90      	pop	{r4, r7, pc}
	...

08002ffc <ili9325_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void ili9325_Clear(uint16_t Color)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	80fb      	strh	r3, [r7, #6]
  uint32_t size = ILI9325_LCD_PIXEL_HEIGHT * ILI9325_LCD_PIXEL_WIDTH;
 8003006:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800300a:	60fb      	str	r3, [r7, #12]
  
  /* Set Cursor */
  ili9325_SetCursor(0, 0);  
 800300c:	2100      	movs	r1, #0
 800300e:	2000      	movs	r0, #0
 8003010:	f7ff fe5d 	bl	8002cce <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8003014:	2022      	movs	r0, #34	; 0x22
 8003016:	f7ff fcdd 	bl	80029d4 <LCD_IO_WriteReg>
  
  while((size--) != 0)
 800301a:	e002      	b.n	8003022 <ili9325_Clear+0x26>
  {
    /* Write 16-bit Data */
    LCD_RAM = Color;
 800301c:	4a06      	ldr	r2, [pc, #24]	; (8003038 <ili9325_Clear+0x3c>)
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	8013      	strh	r3, [r2, #0]
  while((size--) != 0)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1e5a      	subs	r2, r3, #1
 8003026:	60fa      	str	r2, [r7, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f7      	bne.n	800301c <ili9325_Clear+0x20>
  }
}
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	60020000 	.word	0x60020000

0800303c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8003046:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <BSP_LCD_Init+0x64>)
 8003048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800304c:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 800304e:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <BSP_LCD_Init+0x64>)
 8003050:	4a14      	ldr	r2, [pc, #80]	; (80030a4 <BSP_LCD_Init+0x68>)
 8003052:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <BSP_LCD_Init+0x64>)
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
  if(ili9325_drv.ReadID() == ILI9325_ID || ili9325_drv.ReadID() == ILI9328_ID)
 800305a:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <BSP_LCD_Init+0x6c>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4798      	blx	r3
 8003060:	4603      	mov	r3, r0
 8003062:	461a      	mov	r2, r3
 8003064:	f249 3325 	movw	r3, #37669	; 0x9325
 8003068:	429a      	cmp	r2, r3
 800306a:	d008      	beq.n	800307e <BSP_LCD_Init+0x42>
 800306c:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <BSP_LCD_Init+0x6c>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4798      	blx	r3
 8003072:	4603      	mov	r3, r0
 8003074:	461a      	mov	r2, r3
 8003076:	f249 3328 	movw	r3, #37672	; 0x9328
 800307a:	429a      	cmp	r2, r3
 800307c:	d10b      	bne.n	8003096 <BSP_LCD_Init+0x5a>
  {
    lcd_drv = &ili9325_drv;
 800307e:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <BSP_LCD_Init+0x70>)
 8003080:	4a09      	ldr	r2, [pc, #36]	; (80030a8 <BSP_LCD_Init+0x6c>)
 8003082:	601a      	str	r2, [r3, #0]

    /* LCD Init */   
    lcd_drv->Init();
 8003084:	4b09      	ldr	r3, [pc, #36]	; (80030ac <BSP_LCD_Init+0x70>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800308c:	4805      	ldr	r0, [pc, #20]	; (80030a4 <BSP_LCD_Init+0x68>)
 800308e:	f000 f837 	bl	8003100 <BSP_LCD_SetFont>

    ret = LCD_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 8003096:	79fb      	ldrb	r3, [r7, #7]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20002134 	.word	0x20002134
 80030a4:	20000064 	.word	0x20000064
 80030a8:	20000004 	.word	0x20000004
 80030ac:	20002140 	.word	0x20002140

080030b0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <BSP_LCD_GetXSize+0x14>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	4798      	blx	r3
 80030bc:	4603      	mov	r3, r0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20002140 	.word	0x20002140

080030c8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 80030cc:	4b03      	ldr	r3, [pc, #12]	; (80030dc <BSP_LCD_GetYSize+0x14>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	4798      	blx	r3
 80030d4:	4603      	mov	r3, r0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20002140 	.word	0x20002140

080030e0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	4a03      	ldr	r2, [pc, #12]	; (80030fc <BSP_LCD_SetTextColor+0x1c>)
 80030ee:	6013      	str	r3, [r2, #0]
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	20002134 	.word	0x20002134

08003100 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  pFonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8003108:	4a04      	ldr	r2, [pc, #16]	; (800311c <BSP_LCD_SetFont+0x1c>)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6093      	str	r3, [r2, #8]
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20002134 	.word	0x20002134

08003120 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 8003124:	4b03      	ldr	r3, [pc, #12]	; (8003134 <BSP_LCD_GetFont+0x14>)
 8003126:	689b      	ldr	r3, [r3, #8]
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20002134 	.word	0x20002134

08003138 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
  
  uint32_t color_backup = DrawProp.TextColor; 
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <BSP_LCD_Clear+0x64>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	4a13      	ldr	r2, [pc, #76]	; (800319c <BSP_LCD_Clear+0x64>)
 8003150:	6013      	str	r3, [r2, #0]
  
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	e00d      	b.n	8003174 <BSP_LCD_Clear+0x3c>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	b29c      	uxth	r4, r3
 800315c:	f7ff ffa8 	bl	80030b0 <BSP_LCD_GetXSize>
 8003160:	4603      	mov	r3, r0
 8003162:	b29b      	uxth	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	4621      	mov	r1, r4
 8003168:	2000      	movs	r0, #0
 800316a:	f000 f8e9 	bl	8003340 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	3301      	adds	r3, #1
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	f7ff ffa8 	bl	80030c8 <BSP_LCD_GetYSize>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4293      	cmp	r3, r2
 800317e:	d3eb      	bcc.n	8003158 <BSP_LCD_Clear+0x20>
  }

  DrawProp.TextColor = color_backup; 
 8003180:	4a06      	ldr	r2, [pc, #24]	; (800319c <BSP_LCD_Clear+0x64>)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003186:	4b05      	ldr	r3, [pc, #20]	; (800319c <BSP_LCD_Clear+0x64>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff ffa7 	bl	80030e0 <BSP_LCD_SetTextColor>
}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	bd90      	pop	{r4, r7, pc}
 800319a:	bf00      	nop
 800319c:	20002134 	.word	0x20002134

080031a0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	80fb      	strh	r3, [r7, #6]
 80031aa:	460b      	mov	r3, r1
 80031ac:	80bb      	strh	r3, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80031b2:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <BSP_LCD_DisplayChar+0x50>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80031bc:	490c      	ldr	r1, [pc, #48]	; (80031f0 <BSP_LCD_DisplayChar+0x50>)
 80031be:	6889      	ldr	r1, [r1, #8]
 80031c0:	88c9      	ldrh	r1, [r1, #6]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80031c2:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <BSP_LCD_DisplayChar+0x50>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	889b      	ldrh	r3, [r3, #4]
 80031cc:	3307      	adds	r3, #7
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	da00      	bge.n	80031d4 <BSP_LCD_DisplayChar+0x34>
 80031d2:	3307      	adds	r3, #7
 80031d4:	10db      	asrs	r3, r3, #3
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80031da:	441a      	add	r2, r3
 80031dc:	88b9      	ldrh	r1, [r7, #4]
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 f9c5 	bl	8003570 <LCD_DrawChar>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20002134 	.word	0x20002134

080031f4 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *pText, Line_ModeTypdef Mode)
{
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b089      	sub	sp, #36	; 0x24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60ba      	str	r2, [r7, #8]
 80031fc:	461a      	mov	r2, r3
 80031fe:	4603      	mov	r3, r0
 8003200:	81fb      	strh	r3, [r7, #14]
 8003202:	460b      	mov	r3, r1
 8003204:	81bb      	strh	r3, [r7, #12]
 8003206:	4613      	mov	r3, r2
 8003208:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, counter = 0;
 800320a:	2301      	movs	r3, #1
 800320c:	83fb      	strh	r3, [r7, #30]
 800320e:	2300      	movs	r3, #0
 8003210:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800321e:	e002      	b.n	8003226 <BSP_LCD_DisplayStringAt+0x32>
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	3301      	adds	r3, #1
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	617a      	str	r2, [r7, #20]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f6      	bne.n	8003220 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8003232:	f7ff ff3d 	bl	80030b0 <BSP_LCD_GetXSize>
 8003236:	4602      	mov	r2, r0
 8003238:	4b34      	ldr	r3, [pc, #208]	; (800330c <BSP_LCD_DisplayStringAt+0x118>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	889b      	ldrh	r3, [r3, #4]
 800323e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003242:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d014      	beq.n	8003274 <BSP_LCD_DisplayStringAt+0x80>
 800324a:	2b03      	cmp	r3, #3
 800324c:	dc23      	bgt.n	8003296 <BSP_LCD_DisplayStringAt+0xa2>
 800324e:	2b01      	cmp	r3, #1
 8003250:	d002      	beq.n	8003258 <BSP_LCD_DisplayStringAt+0x64>
 8003252:	2b02      	cmp	r3, #2
 8003254:	d011      	beq.n	800327a <BSP_LCD_DisplayStringAt+0x86>
 8003256:	e01e      	b.n	8003296 <BSP_LCD_DisplayStringAt+0xa2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	4a2b      	ldr	r2, [pc, #172]	; (800330c <BSP_LCD_DisplayStringAt+0x118>)
 8003260:	6892      	ldr	r2, [r2, #8]
 8003262:	8892      	ldrh	r2, [r2, #4]
 8003264:	fb02 f303 	mul.w	r3, r2, r3
 8003268:	085b      	lsrs	r3, r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	89fb      	ldrh	r3, [r7, #14]
 800326e:	4413      	add	r3, r2
 8003270:	83fb      	strh	r3, [r7, #30]
      break;
 8003272:	e013      	b.n	800329c <BSP_LCD_DisplayStringAt+0xa8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8003274:	89fb      	ldrh	r3, [r7, #14]
 8003276:	83fb      	strh	r3, [r7, #30]
      break;
 8003278:	e010      	b.n	800329c <BSP_LCD_DisplayStringAt+0xa8>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	b29a      	uxth	r2, r3
 8003282:	4b22      	ldr	r3, [pc, #136]	; (800330c <BSP_LCD_DisplayStringAt+0x118>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	889b      	ldrh	r3, [r3, #4]
 8003288:	fb12 f303 	smulbb	r3, r2, r3
 800328c:	b29a      	uxth	r2, r3
 800328e:	89fb      	ldrh	r3, [r7, #14]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	83fb      	strh	r3, [r7, #30]
      break;
 8003294:	e002      	b.n	800329c <BSP_LCD_DisplayStringAt+0xa8>
    }    
  default:
    {
      refcolumn = Xpos;
 8003296:	89fb      	ldrh	r3, [r7, #14]
 8003298:	83fb      	strh	r3, [r7, #30]
      break;
 800329a:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800329c:	e012      	b.n	80032c4 <BSP_LCD_DisplayStringAt+0xd0>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *pText);
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	89b9      	ldrh	r1, [r7, #12]
 80032a4:	8bfb      	ldrh	r3, [r7, #30]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ff7a 	bl	80031a0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 80032ac:	4b17      	ldr	r3, [pc, #92]	; (800330c <BSP_LCD_DisplayStringAt+0x118>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	889a      	ldrh	r2, [r3, #4]
 80032b2:	8bfb      	ldrh	r3, [r7, #30]
 80032b4:	4413      	add	r3, r2
 80032b6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	3301      	adds	r3, #1
 80032bc:	60bb      	str	r3, [r7, #8]
    counter++;
 80032be:	8bbb      	ldrh	r3, [r7, #28]
 80032c0:	3301      	adds	r3, #1
 80032c2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf14      	ite	ne
 80032cc:	2301      	movne	r3, #1
 80032ce:	2300      	moveq	r3, #0
 80032d0:	b2dc      	uxtb	r4, r3
 80032d2:	f7ff feed 	bl	80030b0 <BSP_LCD_GetXSize>
 80032d6:	4601      	mov	r1, r0
 80032d8:	8bbb      	ldrh	r3, [r7, #28]
 80032da:	4a0c      	ldr	r2, [pc, #48]	; (800330c <BSP_LCD_DisplayStringAt+0x118>)
 80032dc:	6892      	ldr	r2, [r2, #8]
 80032de:	8892      	ldrh	r2, [r2, #4]
 80032e0:	fb02 f303 	mul.w	r3, r2, r3
 80032e4:	1acb      	subs	r3, r1, r3
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	4a08      	ldr	r2, [pc, #32]	; (800330c <BSP_LCD_DisplayStringAt+0x118>)
 80032ea:	6892      	ldr	r2, [r2, #8]
 80032ec:	8892      	ldrh	r2, [r2, #4]
 80032ee:	4293      	cmp	r3, r2
 80032f0:	bf2c      	ite	cs
 80032f2:	2301      	movcs	r3, #1
 80032f4:	2300      	movcc	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	4023      	ands	r3, r4
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1ce      	bne.n	800329e <BSP_LCD_DisplayStringAt+0xaa>
  }
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	3724      	adds	r7, #36	; 0x24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd90      	pop	{r4, r7, pc}
 800330a:	bf00      	nop
 800330c:	20002134 	.word	0x20002134

08003310 <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0..29: if the Current fonts is Font8x8
  * @param  pText: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *pText)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	6039      	str	r1, [r7, #0]
 800331a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line),pText, LEFT_MODE);
 800331c:	f7ff ff00 	bl	8003120 <BSP_LCD_GetFont>
 8003320:	4603      	mov	r3, r0
 8003322:	88db      	ldrh	r3, [r3, #6]
 8003324:	88fa      	ldrh	r2, [r7, #6]
 8003326:	fb12 f303 	smulbb	r3, r2, r3
 800332a:	b299      	uxth	r1, r3
 800332c:	2303      	movs	r3, #3
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	2000      	movs	r0, #0
 8003332:	f7ff ff5f 	bl	80031f4 <BSP_LCD_DisplayStringAt>
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	80fb      	strh	r3, [r7, #6]
 800334a:	460b      	mov	r3, r1
 800334c:	80bb      	strh	r3, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 8003356:	4b15      	ldr	r3, [pc, #84]	; (80033ac <BSP_LCD_DrawHLine+0x6c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8003360:	4b12      	ldr	r3, [pc, #72]	; (80033ac <BSP_LCD_DrawHLine+0x6c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6a1c      	ldr	r4, [r3, #32]
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <BSP_LCD_DrawHLine+0x70>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	b298      	uxth	r0, r3
 800336c:	887b      	ldrh	r3, [r7, #2]
 800336e:	88ba      	ldrh	r2, [r7, #4]
 8003370:	88f9      	ldrh	r1, [r7, #6]
 8003372:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8003374:	e015      	b.n	80033a2 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	e00e      	b.n	800339a <BSP_LCD_DrawHLine+0x5a>
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	b29a      	uxth	r2, r3
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	4413      	add	r3, r2
 8003384:	b29b      	uxth	r3, r3
 8003386:	4a0a      	ldr	r2, [pc, #40]	; (80033b0 <BSP_LCD_DrawHLine+0x70>)
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	b292      	uxth	r2, r2
 800338c:	88b9      	ldrh	r1, [r7, #4]
 800338e:	4618      	mov	r0, r3
 8003390:	f000 f8d2 	bl	8003538 <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3301      	adds	r3, #1
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	887b      	ldrh	r3, [r7, #2]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d3ec      	bcc.n	800337c <BSP_LCD_DrawHLine+0x3c>
}
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd90      	pop	{r4, r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20002140 	.word	0x20002140
 80033b0:	20002134 	.word	0x20002134

080033b4 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80033b4:	b590      	push	{r4, r7, lr}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	80fb      	strh	r3, [r7, #6]
 80033be:	460b      	mov	r3, r1
 80033c0:	80bb      	strh	r3, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <BSP_LCD_DrawVLine+0x6c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80033d4:	4b12      	ldr	r3, [pc, #72]	; (8003420 <BSP_LCD_DrawVLine+0x6c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80033da:	4b12      	ldr	r3, [pc, #72]	; (8003424 <BSP_LCD_DrawVLine+0x70>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	b298      	uxth	r0, r3
 80033e0:	887b      	ldrh	r3, [r7, #2]
 80033e2:	88ba      	ldrh	r2, [r7, #4]
 80033e4:	88f9      	ldrh	r1, [r7, #6]
 80033e6:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 80033e8:	e015      	b.n	8003416 <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	e00e      	b.n	800340e <BSP_LCD_DrawVLine+0x5a>
      LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	88bb      	ldrh	r3, [r7, #4]
 80033f6:	4413      	add	r3, r2
 80033f8:	b299      	uxth	r1, r3
 80033fa:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <BSP_LCD_DrawVLine+0x70>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	b29a      	uxth	r2, r3
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f898 	bl	8003538 <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3301      	adds	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	887b      	ldrh	r3, [r7, #2]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	429a      	cmp	r2, r3
 8003414:	d3ec      	bcc.n	80033f0 <BSP_LCD_DrawVLine+0x3c>
}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	bd90      	pop	{r4, r7, pc}
 800341e:	bf00      	nop
 8003420:	20002140 	.word	0x20002140
 8003424:	20002134 	.word	0x20002134

08003428 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003428:	b590      	push	{r4, r7, lr}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4604      	mov	r4, r0
 8003430:	4608      	mov	r0, r1
 8003432:	4611      	mov	r1, r2
 8003434:	461a      	mov	r2, r3
 8003436:	4623      	mov	r3, r4
 8003438:	80fb      	strh	r3, [r7, #6]
 800343a:	4603      	mov	r3, r0
 800343c:	80bb      	strh	r3, [r7, #4]
 800343e:	460b      	mov	r3, r1
 8003440:	807b      	strh	r3, [r7, #2]
 8003442:	4613      	mov	r3, r2
 8003444:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8003446:	887a      	ldrh	r2, [r7, #2]
 8003448:	88b9      	ldrh	r1, [r7, #4]
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff ff77 	bl	8003340 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8003452:	88ba      	ldrh	r2, [r7, #4]
 8003454:	883b      	ldrh	r3, [r7, #0]
 8003456:	4413      	add	r3, r2
 8003458:	b299      	uxth	r1, r3
 800345a:	887a      	ldrh	r2, [r7, #2]
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff ff6e 	bl	8003340 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8003464:	883a      	ldrh	r2, [r7, #0]
 8003466:	88b9      	ldrh	r1, [r7, #4]
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff ffa2 	bl	80033b4 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8003470:	88fa      	ldrh	r2, [r7, #6]
 8003472:	887b      	ldrh	r3, [r7, #2]
 8003474:	4413      	add	r3, r2
 8003476:	b29b      	uxth	r3, r3
 8003478:	883a      	ldrh	r2, [r7, #0]
 800347a:	88b9      	ldrh	r1, [r7, #4]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ff99 	bl	80033b4 <BSP_LCD_DrawVLine>
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	bd90      	pop	{r4, r7, pc}
	...

0800348c <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address.
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 800348c:	b590      	push	{r4, r7, lr}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	603a      	str	r2, [r7, #0]
 8003496:	80fb      	strh	r3, [r7, #6]
 8003498:	460b      	mov	r3, r1
 800349a:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60bb      	str	r3, [r7, #8]
  
  
  /* Read bitmap width */
  width = *(uint16_t *) (pbmp + 18);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	3312      	adds	r3, #18
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	60bb      	str	r3, [r7, #8]
  width |= (*(uint16_t *) (pbmp + 20)) << 16;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	3314      	adds	r3, #20
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	041b      	lsls	r3, r3, #16
 80034b4:	461a      	mov	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap height */
  height = *(uint16_t *) (pbmp + 22);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	3316      	adds	r3, #22
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (pbmp + 24)) << 16; 
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	3318      	adds	r3, #24
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	041b      	lsls	r3, r3, #16
 80034cc:	461a      	mov	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
  
  LCD_SetDisplayWindow(Xpos, Ypos, width, height);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	88b9      	ldrh	r1, [r7, #4]
 80034de:	88f8      	ldrh	r0, [r7, #6]
 80034e0:	f000 f938 	bl	8003754 <LCD_SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 80034e4:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <BSP_LCD_DrawBitmap+0x94>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d006      	beq.n	80034fc <BSP_LCD_DrawBitmap+0x70>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pbmp);
 80034ee:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <BSP_LCD_DrawBitmap+0x94>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	88b9      	ldrh	r1, [r7, #4]
 80034f6:	88f8      	ldrh	r0, [r7, #6]
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	4798      	blx	r3
  } 
  LCD_SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80034fc:	f7ff fdd8 	bl	80030b0 <BSP_LCD_GetXSize>
 8003500:	4603      	mov	r3, r0
 8003502:	b29c      	uxth	r4, r3
 8003504:	f7ff fde0 	bl	80030c8 <BSP_LCD_GetYSize>
 8003508:	4603      	mov	r3, r0
 800350a:	b29b      	uxth	r3, r3
 800350c:	4622      	mov	r2, r4
 800350e:	2100      	movs	r1, #0
 8003510:	2000      	movs	r0, #0
 8003512:	f000 f91f 	bl	8003754 <LCD_SetDisplayWindow>
}
 8003516:	bf00      	nop
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	bd90      	pop	{r4, r7, pc}
 800351e:	bf00      	nop
 8003520:	20002140 	.word	0x20002140

08003524 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOn();
 8003528:	4b02      	ldr	r3, [pc, #8]	; (8003534 <BSP_LCD_DisplayOn+0x10>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	4798      	blx	r3
}
 8003530:	bf00      	nop
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20002140 	.word	0x20002140

08003538 <LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGBCode: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
static void LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	80fb      	strh	r3, [r7, #6]
 8003542:	460b      	mov	r3, r1
 8003544:	80bb      	strh	r3, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 800354a:	4b08      	ldr	r3, [pc, #32]	; (800356c <LCD_DrawPixel+0x34>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d006      	beq.n	8003562 <LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGBCode);
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <LCD_DrawPixel+0x34>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	887a      	ldrh	r2, [r7, #2]
 800355c:	88b9      	ldrh	r1, [r7, #4]
 800355e:	88f8      	ldrh	r0, [r7, #6]
 8003560:	4798      	blx	r3
  }
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20002140 	.word	0x20002140

08003570 <LCD_DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	; 0x28
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	603a      	str	r2, [r7, #0]
 800357a:	80fb      	strh	r3, [r7, #6]
 800357c:	460b      	mov	r3, r1
 800357e:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8003580:	2300      	movs	r3, #0
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
 8003584:	2300      	movs	r3, #0
 8003586:	623b      	str	r3, [r7, #32]
 8003588:	2300      	movs	r3, #0
 800358a:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	82fb      	strh	r3, [r7, #22]
 8003590:	2300      	movs	r3, #0
 8003592:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
  
 
  height = DrawProp.pFont->Height;
 80035a0:	4b63      	ldr	r3, [pc, #396]	; (8003730 <LCD_DrawChar+0x1c0>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	88db      	ldrh	r3, [r3, #6]
 80035a6:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 80035a8:	4b61      	ldr	r3, [pc, #388]	; (8003730 <LCD_DrawChar+0x1c0>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	889b      	ldrh	r3, [r3, #4]
 80035ae:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 80035b0:	8afa      	ldrh	r2, [r7, #22]
 80035b2:	8abb      	ldrh	r3, [r7, #20]
 80035b4:	fb12 f303 	smulbb	r3, r2, r3
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	331b      	adds	r3, #27
 80035bc:	b29b      	uxth	r3, r3
 80035be:	4a5d      	ldr	r2, [pc, #372]	; (8003734 <LCD_DrawChar+0x1c4>)
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 80035c6:	8afb      	ldrh	r3, [r7, #22]
 80035c8:	8aba      	ldrh	r2, [r7, #20]
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	331b      	adds	r3, #27
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	141a      	asrs	r2, r3, #16
 80035d4:	4b58      	ldr	r3, [pc, #352]	; (8003738 <LCD_DrawChar+0x1c8>)
 80035d6:	b292      	uxth	r2, r2
 80035d8:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 80035da:	4b58      	ldr	r3, [pc, #352]	; (800373c <LCD_DrawChar+0x1cc>)
 80035dc:	2236      	movs	r2, #54	; 0x36
 80035de:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 80035e0:	4a57      	ldr	r2, [pc, #348]	; (8003740 <LCD_DrawChar+0x1d0>)
 80035e2:	8abb      	ldrh	r3, [r7, #20]
 80035e4:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 80035e6:	8abb      	ldrh	r3, [r7, #20]
 80035e8:	141a      	asrs	r2, r3, #16
 80035ea:	4b56      	ldr	r3, [pc, #344]	; (8003744 <LCD_DrawChar+0x1d4>)
 80035ec:	b292      	uxth	r2, r2
 80035ee:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 80035f0:	4a55      	ldr	r2, [pc, #340]	; (8003748 <LCD_DrawChar+0x1d8>)
 80035f2:	8afb      	ldrh	r3, [r7, #22]
 80035f4:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 80035f6:	8afb      	ldrh	r3, [r7, #22]
 80035f8:	141a      	asrs	r2, r3, #16
 80035fa:	4b54      	ldr	r3, [pc, #336]	; (800374c <LCD_DrawChar+0x1dc>)
 80035fc:	b292      	uxth	r2, r2
 80035fe:	801a      	strh	r2, [r3, #0]

  offset =  8 *((width + 7)/8) -  width ;
 8003600:	8abb      	ldrh	r3, [r7, #20]
 8003602:	3307      	adds	r3, #7
 8003604:	2b00      	cmp	r3, #0
 8003606:	da00      	bge.n	800360a <LCD_DrawChar+0x9a>
 8003608:	3307      	adds	r3, #7
 800360a:	10db      	asrs	r3, r3, #3
 800360c:	b2db      	uxtb	r3, r3
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	b2da      	uxtb	r2, r3
 8003612:	8abb      	ldrh	r3, [r7, #20]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 800361a:	2300      	movs	r3, #0
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
 800361e:	e078      	b.n	8003712 <LCD_DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 8003620:	8abb      	ldrh	r3, [r7, #20]
 8003622:	3307      	adds	r3, #7
 8003624:	2b00      	cmp	r3, #0
 8003626:	da00      	bge.n	800362a <LCD_DrawChar+0xba>
 8003628:	3307      	adds	r3, #7
 800362a:	10db      	asrs	r3, r3, #3
 800362c:	461a      	mov	r2, r3
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	fb02 f303 	mul.w	r3, r2, r3
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	4413      	add	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 800363a:	8abb      	ldrh	r3, [r7, #20]
 800363c:	3b11      	subs	r3, #17
 800363e:	2b07      	cmp	r3, #7
 8003640:	d80c      	bhi.n	800365c <LCD_DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	041a      	lsls	r2, r3, #16
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3301      	adds	r3, #1
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	4313      	orrs	r3, r2
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	3202      	adds	r2, #2
 8003656:	7812      	ldrb	r2, [r2, #0]
 8003658:	4313      	orrs	r3, r2
 800365a:	61fb      	str	r3, [r7, #28]
    }

    if(((width + 7)/8) == 2)
 800365c:	8abb      	ldrh	r3, [r7, #20]
 800365e:	3b09      	subs	r3, #9
 8003660:	2b07      	cmp	r3, #7
 8003662:	d807      	bhi.n	8003674 <LCD_DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	3201      	adds	r2, #1
 800366e:	7812      	ldrb	r2, [r2, #0]
 8003670:	4313      	orrs	r3, r2
 8003672:	61fb      	str	r3, [r7, #28]
    }
      
    if(((width + 7)/8) == 1)
 8003674:	8abb      	ldrh	r3, [r7, #20]
 8003676:	3b01      	subs	r3, #1
 8003678:	2b07      	cmp	r3, #7
 800367a:	d802      	bhi.n	8003682 <LCD_DrawChar+0x112>
    {
      line =  pchar[0];
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	61fb      	str	r3, [r7, #28]
    }  
    
    for (counterw = 0; counterw < width; counterw++)
 8003682:	2300      	movs	r3, #0
 8003684:	623b      	str	r3, [r7, #32]
 8003686:	e03d      	b.n	8003704 <LCD_DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8003688:	8afa      	ldrh	r2, [r7, #22]
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	8aba      	ldrh	r2, [r7, #20]
 8003692:	fb03 f202 	mul.w	r2, r3, r2
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	4413      	add	r3, r2
 800369a:	331b      	adds	r3, #27
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 80036a0:	8aba      	ldrh	r2, [r7, #20]
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	1ad2      	subs	r2, r2, r3
 80036a6:	7cfb      	ldrb	r3, [r7, #19]
 80036a8:	4413      	add	r3, r2
 80036aa:	3b01      	subs	r3, #1
 80036ac:	2201      	movs	r2, #1
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d010      	beq.n	80036de <LCD_DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 80036bc:	4b1c      	ldr	r3, [pc, #112]	; (8003730 <LCD_DrawChar+0x1c0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	b2d9      	uxtb	r1, r3
 80036c2:	4a23      	ldr	r2, [pc, #140]	; (8003750 <LCD_DrawChar+0x1e0>)
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	4413      	add	r3, r2
 80036c8:	460a      	mov	r2, r1
 80036ca:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 80036cc:	4b18      	ldr	r3, [pc, #96]	; (8003730 <LCD_DrawChar+0x1c0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	0a1a      	lsrs	r2, r3, #8
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	3301      	adds	r3, #1
 80036d6:	b2d1      	uxtb	r1, r2
 80036d8:	4a1d      	ldr	r2, [pc, #116]	; (8003750 <LCD_DrawChar+0x1e0>)
 80036da:	54d1      	strb	r1, [r2, r3]
 80036dc:	e00f      	b.n	80036fe <LCD_DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <LCD_DrawChar+0x1c0>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	b2d9      	uxtb	r1, r3
 80036e4:	4a1a      	ldr	r2, [pc, #104]	; (8003750 <LCD_DrawChar+0x1e0>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	4413      	add	r3, r2
 80036ea:	460a      	mov	r2, r1
 80036ec:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 80036ee:	4b10      	ldr	r3, [pc, #64]	; (8003730 <LCD_DrawChar+0x1c0>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	0a1a      	lsrs	r2, r3, #8
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	3301      	adds	r3, #1
 80036f8:	b2d1      	uxtb	r1, r2
 80036fa:	4a15      	ldr	r2, [pc, #84]	; (8003750 <LCD_DrawChar+0x1e0>)
 80036fc:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	3301      	adds	r3, #1
 8003702:	623b      	str	r3, [r7, #32]
 8003704:	8abb      	ldrh	r3, [r7, #20]
 8003706:	6a3a      	ldr	r2, [r7, #32]
 8003708:	429a      	cmp	r2, r3
 800370a:	d3bd      	bcc.n	8003688 <LCD_DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	3301      	adds	r3, #1
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
 8003712:	8afb      	ldrh	r3, [r7, #22]
 8003714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003716:	429a      	cmp	r2, r3
 8003718:	d382      	bcc.n	8003620 <LCD_DrawChar+0xb0>
      } 
    }
  }

  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 800371a:	88b9      	ldrh	r1, [r7, #4]
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	4a0c      	ldr	r2, [pc, #48]	; (8003750 <LCD_DrawChar+0x1e0>)
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff feb3 	bl	800348c <BSP_LCD_DrawBitmap>
}
 8003726:	bf00      	nop
 8003728:	3728      	adds	r7, #40	; 0x28
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20002134 	.word	0x20002134
 8003734:	20002146 	.word	0x20002146
 8003738:	20002148 	.word	0x20002148
 800373c:	2000214e 	.word	0x2000214e
 8003740:	20002156 	.word	0x20002156
 8003744:	20002158 	.word	0x20002158
 8003748:	2000215a 	.word	0x2000215a
 800374c:	2000215c 	.word	0x2000215c
 8003750:	20002144 	.word	0x20002144

08003754 <LCD_SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003754:	b590      	push	{r4, r7, lr}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4604      	mov	r4, r0
 800375c:	4608      	mov	r0, r1
 800375e:	4611      	mov	r1, r2
 8003760:	461a      	mov	r2, r3
 8003762:	4623      	mov	r3, r4
 8003764:	80fb      	strh	r3, [r7, #6]
 8003766:	4603      	mov	r3, r0
 8003768:	80bb      	strh	r3, [r7, #4]
 800376a:	460b      	mov	r3, r1
 800376c:	807b      	strh	r3, [r7, #2]
 800376e:	4613      	mov	r3, r2
 8003770:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 8003772:	4b08      	ldr	r3, [pc, #32]	; (8003794 <LCD_SetDisplayWindow+0x40>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <LCD_SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <LCD_SetDisplayWindow+0x40>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69dc      	ldr	r4, [r3, #28]
 8003782:	883b      	ldrh	r3, [r7, #0]
 8003784:	887a      	ldrh	r2, [r7, #2]
 8003786:	88b9      	ldrh	r1, [r7, #4]
 8003788:	88f8      	ldrh	r0, [r7, #6]
 800378a:	47a0      	blx	r4
  }  
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	bd90      	pop	{r4, r7, pc}
 8003794:	20002140 	.word	0x20002140

08003798 <DelayUS>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DelayUS(uint32_t cnt)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  i = cnt * 4;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	60fb      	str	r3, [r7, #12]
  while(i--);
 80037a6:	bf00      	nop
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1e5a      	subs	r2, r3, #1
 80037ac:	60fa      	str	r2, [r7, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1fa      	bne.n	80037a8 <DelayUS+0x10>
}
 80037b2:	bf00      	nop
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <WR_CMD>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
static void WR_CMD (uint8_t cmd)  
{ 
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&TP_hspi,&cmd,1,1000);
 80037ca:	1df9      	adds	r1, r7, #7
 80037cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037d0:	2201      	movs	r2, #1
 80037d2:	4803      	ldr	r0, [pc, #12]	; (80037e0 <WR_CMD+0x20>)
 80037d4:	f003 fe6e 	bl	80074b4 <HAL_SPI_Transmit>
} 
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20001e10 	.word	0x20001e10

080037e4 <RD_AD>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
static int RD_AD(void)  
{ 
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
  uint8_t buf[2];
  int value;
  HAL_SPI_Receive(&TP_hspi,buf,2,1000);
 80037ea:	4639      	mov	r1, r7
 80037ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037f0:	2202      	movs	r2, #2
 80037f2:	4809      	ldr	r0, [pc, #36]	; (8003818 <RD_AD+0x34>)
 80037f4:	f003 ff9a 	bl	800772c <HAL_SPI_Receive>
  value = (uint16_t)((buf[0] << 8) + buf[1]) >> 3;
 80037f8:	783b      	ldrb	r3, [r7, #0]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	b29a      	uxth	r2, r3
 8003800:	787b      	ldrb	r3, [r7, #1]
 8003802:	b29b      	uxth	r3, r3
 8003804:	4413      	add	r3, r2
 8003806:	b29b      	uxth	r3, r3
 8003808:	08db      	lsrs	r3, r3, #3
 800380a:	b29b      	uxth	r3, r3
 800380c:	607b      	str	r3, [r7, #4]
  return value;
 800380e:	687b      	ldr	r3, [r7, #4]
} 
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20001e10 	.word	0x20001e10

0800381c <Read_X>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_X(void)  
{  
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
  int i; 
  TP_CS(0); 
 8003822:	2200      	movs	r2, #0
 8003824:	2110      	movs	r1, #16
 8003826:	480c      	ldr	r0, [pc, #48]	; (8003858 <Read_X+0x3c>)
 8003828:	f001 fc0c 	bl	8005044 <HAL_GPIO_WritePin>
  DelayUS(1); 
 800382c:	2001      	movs	r0, #1
 800382e:	f7ff ffb3 	bl	8003798 <DelayUS>
  WR_CMD(CHX); 
 8003832:	2090      	movs	r0, #144	; 0x90
 8003834:	f7ff ffc4 	bl	80037c0 <WR_CMD>
  DelayUS(1); 
 8003838:	2001      	movs	r0, #1
 800383a:	f7ff ffad 	bl	8003798 <DelayUS>
  i=RD_AD(); 
 800383e:	f7ff ffd1 	bl	80037e4 <RD_AD>
 8003842:	6078      	str	r0, [r7, #4]
  TP_CS(1); 
 8003844:	2201      	movs	r2, #1
 8003846:	2110      	movs	r1, #16
 8003848:	4803      	ldr	r0, [pc, #12]	; (8003858 <Read_X+0x3c>)
 800384a:	f001 fbfb 	bl	8005044 <HAL_GPIO_WritePin>
  return i;    
 800384e:	687b      	ldr	r3, [r7, #4]
} 
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40020800 	.word	0x40020800

0800385c <Read_Y>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_Y(void)  
{  
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
  int i; 
  TP_CS(0); 
 8003862:	2200      	movs	r2, #0
 8003864:	2110      	movs	r1, #16
 8003866:	480c      	ldr	r0, [pc, #48]	; (8003898 <Read_Y+0x3c>)
 8003868:	f001 fbec 	bl	8005044 <HAL_GPIO_WritePin>
  DelayUS(1); 
 800386c:	2001      	movs	r0, #1
 800386e:	f7ff ff93 	bl	8003798 <DelayUS>
  WR_CMD(CHY); 
 8003872:	20d0      	movs	r0, #208	; 0xd0
 8003874:	f7ff ffa4 	bl	80037c0 <WR_CMD>
  DelayUS(1); 
 8003878:	2001      	movs	r0, #1
 800387a:	f7ff ff8d 	bl	8003798 <DelayUS>
  i=RD_AD(); 
 800387e:	f7ff ffb1 	bl	80037e4 <RD_AD>
 8003882:	6078      	str	r0, [r7, #4]
  TP_CS(1); 
 8003884:	2201      	movs	r2, #1
 8003886:	2110      	movs	r1, #16
 8003888:	4803      	ldr	r0, [pc, #12]	; (8003898 <Read_Y+0x3c>)
 800388a:	f001 fbdb 	bl	8005044 <HAL_GPIO_WritePin>
  return i;     
 800388e:	687b      	ldr	r3, [r7, #4]
} 
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40020800 	.word	0x40020800

0800389c <TP_GetAdXY>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
void TP_GetAdXY(int *x,int *y)  
{ 
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  int adx,ady; 
  adx=Read_X(); 
 80038a6:	f7ff ffb9 	bl	800381c <Read_X>
 80038aa:	60f8      	str	r0, [r7, #12]
  DelayUS(1); 
 80038ac:	2001      	movs	r0, #1
 80038ae:	f7ff ff73 	bl	8003798 <DelayUS>
  ady=Read_Y(); 
 80038b2:	f7ff ffd3 	bl	800385c <Read_Y>
 80038b6:	60b8      	str	r0, [r7, #8]
  *x=adx; 
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	601a      	str	r2, [r3, #0]
  *y=ady; 
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	601a      	str	r2, [r3, #0]
} 
 80038c4:	bf00      	nop
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <DrawCross>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DrawCross(uint16_t Xpos,uint16_t Ypos)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	460a      	mov	r2, r1
 80038d6:	80fb      	strh	r3, [r7, #6]
 80038d8:	4613      	mov	r3, r2
 80038da:	80bb      	strh	r3, [r7, #4]
  BSP_LCD_DrawHLine(Xpos-13, Ypos, 10);
 80038dc:	88fb      	ldrh	r3, [r7, #6]
 80038de:	3b0d      	subs	r3, #13
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	88b9      	ldrh	r1, [r7, #4]
 80038e4:	220a      	movs	r2, #10
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff fd2a 	bl	8003340 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos+4, Ypos, 10);
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	3304      	adds	r3, #4
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	88b9      	ldrh	r1, [r7, #4]
 80038f4:	220a      	movs	r2, #10
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fd22 	bl	8003340 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos-13, 10);
 80038fc:	88bb      	ldrh	r3, [r7, #4]
 80038fe:	3b0d      	subs	r3, #13
 8003900:	b299      	uxth	r1, r3
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	220a      	movs	r2, #10
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff fd54 	bl	80033b4 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine(Xpos, Ypos+4, 10);  
 800390c:	88bb      	ldrh	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	b299      	uxth	r1, r3
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	220a      	movs	r2, #10
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff fd4c 	bl	80033b4 <BSP_LCD_DrawVLine>

}  
 800391c:	bf00      	nop
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <Read_Ads7846>:
* Output         : None
* Return         : Coordinate *
* Attention      : None
*******************************************************************************/
Coordinate *Read_Ads7846(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b09c      	sub	sp, #112	; 0x70
 8003928:	af00      	add	r7, sp, #0
  static Coordinate  screen;
  int m0,m1,m2,TP_X[1],TP_Y[1],temp[3];
  uint8_t count=0;
 800392a:	2300      	movs	r3, #0
 800392c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  int buffer[2][9]={{0},{0}};
 8003930:	1d3b      	adds	r3, r7, #4
 8003932:	2248      	movs	r2, #72	; 0x48
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f00b f9dd 	bl	800ecf6 <memset>
  
  do
  {       
    TP_GetAdXY(TP_X,TP_Y);  
 800393c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003940:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff ffa8 	bl	800389c <TP_GetAdXY>
    buffer[0][count]=TP_X[0];  
 800394c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003950:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	3370      	adds	r3, #112	; 0x70
 8003956:	443b      	add	r3, r7
 8003958:	f843 2c6c 	str.w	r2, [r3, #-108]
    buffer[1][count]=TP_Y[0];
 800395c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003960:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003962:	3309      	adds	r3, #9
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	3370      	adds	r3, #112	; 0x70
 8003968:	443b      	add	r3, r7
 800396a:	f843 2c6c 	str.w	r2, [r3, #-108]
    count++;  
 800396e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003972:	3301      	adds	r3, #1
 8003974:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  while(!TP_INT_IN&& count<9);  /* TP_INT_IN  */
 8003978:	2120      	movs	r1, #32
 800397a:	4885      	ldr	r0, [pc, #532]	; (8003b90 <Read_Ads7846+0x26c>)
 800397c:	f001 fb4a 	bl	8005014 <HAL_GPIO_ReadPin>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d103      	bne.n	800398e <Read_Ads7846+0x6a>
 8003986:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800398a:	2b08      	cmp	r3, #8
 800398c:	d9d6      	bls.n	800393c <Read_Ads7846+0x18>
  if(count==9)   /* Average X Y  */ 
 800398e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003992:	2b09      	cmp	r3, #9
 8003994:	f040 80f6 	bne.w	8003b84 <Read_Ads7846+0x260>
  {
    /* Average X  */
    temp[0]=(buffer[0][0]+buffer[0][1]+buffer[0][2])/3;
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	441a      	add	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4413      	add	r3, r2
 80039a2:	4a7c      	ldr	r2, [pc, #496]	; (8003b94 <Read_Ads7846+0x270>)
 80039a4:	fb82 1203 	smull	r1, r2, r2, r3
 80039a8:	17db      	asrs	r3, r3, #31
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp[1]=(buffer[0][3]+buffer[0][4]+buffer[0][5])/3;
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	441a      	add	r2, r3
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	4413      	add	r3, r2
 80039b8:	4a76      	ldr	r2, [pc, #472]	; (8003b94 <Read_Ads7846+0x270>)
 80039ba:	fb82 1203 	smull	r1, r2, r2, r3
 80039be:	17db      	asrs	r3, r3, #31
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	653b      	str	r3, [r7, #80]	; 0x50
    temp[2]=(buffer[0][6]+buffer[0][7]+buffer[0][8])/3;
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	441a      	add	r2, r3
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	4413      	add	r3, r2
 80039ce:	4a71      	ldr	r2, [pc, #452]	; (8003b94 <Read_Ads7846+0x270>)
 80039d0:	fb82 1203 	smull	r1, r2, r2, r3
 80039d4:	17db      	asrs	r3, r3, #31
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	657b      	str	r3, [r7, #84]	; 0x54
   
    m0=temp[0]-temp[1];
 80039da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=temp[1]-temp[2];
 80039e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	667b      	str	r3, [r7, #100]	; 0x64
    m2=temp[2]-temp[0];
 80039ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	663b      	str	r3, [r7, #96]	; 0x60
   
    m0=m0>0?m0:(-m0);
 80039f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	bfb8      	it	lt
 80039f8:	425b      	neglt	r3, r3
 80039fa:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=m1>0?m1:(-m1);
 80039fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bfb8      	it	lt
 8003a02:	425b      	neglt	r3, r3
 8003a04:	667b      	str	r3, [r7, #100]	; 0x64
    m2=m2>0?m2:(-m2);
 8003a06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bfb8      	it	lt
 8003a0c:	425b      	neglt	r3, r3
 8003a0e:	663b      	str	r3, [r7, #96]	; 0x60
   
    if( m0>THRESHOLD  &&  m1>THRESHOLD  &&  m2>THRESHOLD ) return 0;
 8003a10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	dd07      	ble.n	8003a26 <Read_Ads7846+0x102>
 8003a16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	dd04      	ble.n	8003a26 <Read_Ads7846+0x102>
 8003a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	dd01      	ble.n	8003a26 <Read_Ads7846+0x102>
 8003a22:	2300      	movs	r3, #0
 8003a24:	e0af      	b.n	8003b86 <Read_Ads7846+0x262>
   
    if(m0<m1)
 8003a26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	da17      	bge.n	8003a5e <Read_Ads7846+0x13a>
    {
      if(m2<m0) 
 8003a2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a32:	429a      	cmp	r2, r3
 8003a34:	da09      	bge.n	8003a4a <Read_Ads7846+0x126>
        screen.x=(temp[0]+temp[2])/2;
 8003a36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a3a:	4413      	add	r3, r2
 8003a3c:	0fda      	lsrs	r2, r3, #31
 8003a3e:	4413      	add	r3, r2
 8003a40:	105b      	asrs	r3, r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	4b54      	ldr	r3, [pc, #336]	; (8003b98 <Read_Ads7846+0x274>)
 8003a46:	801a      	strh	r2, [r3, #0]
 8003a48:	e020      	b.n	8003a8c <Read_Ads7846+0x168>
      else 
        screen.x=(temp[0]+temp[1])/2;  
 8003a4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4e:	4413      	add	r3, r2
 8003a50:	0fda      	lsrs	r2, r3, #31
 8003a52:	4413      	add	r3, r2
 8003a54:	105b      	asrs	r3, r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	4b4f      	ldr	r3, [pc, #316]	; (8003b98 <Read_Ads7846+0x274>)
 8003a5a:	801a      	strh	r2, [r3, #0]
 8003a5c:	e016      	b.n	8003a8c <Read_Ads7846+0x168>
    }
    else if(m2<m1) 
 8003a5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a62:	429a      	cmp	r2, r3
 8003a64:	da09      	bge.n	8003a7a <Read_Ads7846+0x156>
      screen.x=(temp[0]+temp[2])/2;
 8003a66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a6a:	4413      	add	r3, r2
 8003a6c:	0fda      	lsrs	r2, r3, #31
 8003a6e:	4413      	add	r3, r2
 8003a70:	105b      	asrs	r3, r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	4b48      	ldr	r3, [pc, #288]	; (8003b98 <Read_Ads7846+0x274>)
 8003a76:	801a      	strh	r2, [r3, #0]
 8003a78:	e008      	b.n	8003a8c <Read_Ads7846+0x168>
    else 
      screen.x=(temp[1]+temp[2])/2;
 8003a7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a7e:	4413      	add	r3, r2
 8003a80:	0fda      	lsrs	r2, r3, #31
 8003a82:	4413      	add	r3, r2
 8003a84:	105b      	asrs	r3, r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	4b43      	ldr	r3, [pc, #268]	; (8003b98 <Read_Ads7846+0x274>)
 8003a8a:	801a      	strh	r2, [r3, #0]
   
    /* Average Y  */
    temp[0]=(buffer[1][0]+buffer[1][1]+buffer[1][2])/3;
 8003a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a90:	441a      	add	r2, r3
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	4413      	add	r3, r2
 8003a96:	4a3f      	ldr	r2, [pc, #252]	; (8003b94 <Read_Ads7846+0x270>)
 8003a98:	fb82 1203 	smull	r1, r2, r2, r3
 8003a9c:	17db      	asrs	r3, r3, #31
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp[1]=(buffer[1][3]+buffer[1][4]+buffer[1][5])/3;
 8003aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa6:	441a      	add	r2, r3
 8003aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aaa:	4413      	add	r3, r2
 8003aac:	4a39      	ldr	r2, [pc, #228]	; (8003b94 <Read_Ads7846+0x270>)
 8003aae:	fb82 1203 	smull	r1, r2, r2, r3
 8003ab2:	17db      	asrs	r3, r3, #31
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	653b      	str	r3, [r7, #80]	; 0x50
    temp[2]=(buffer[1][6]+buffer[1][7]+buffer[1][8])/3;
 8003ab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003abc:	441a      	add	r2, r3
 8003abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac0:	4413      	add	r3, r2
 8003ac2:	4a34      	ldr	r2, [pc, #208]	; (8003b94 <Read_Ads7846+0x270>)
 8003ac4:	fb82 1203 	smull	r1, r2, r2, r3
 8003ac8:	17db      	asrs	r3, r3, #31
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	657b      	str	r3, [r7, #84]	; 0x54
    m0=temp[0]-temp[1];
 8003ace:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=temp[1]-temp[2];
 8003ad6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	667b      	str	r3, [r7, #100]	; 0x64
    m2=temp[2]-temp[0];
 8003ade:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	663b      	str	r3, [r7, #96]	; 0x60
    m0=m0>0?m0:(-m0);
 8003ae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bfb8      	it	lt
 8003aec:	425b      	neglt	r3, r3
 8003aee:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=m1>0?m1:(-m1);
 8003af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bfb8      	it	lt
 8003af6:	425b      	neglt	r3, r3
 8003af8:	667b      	str	r3, [r7, #100]	; 0x64
    m2=m2>0?m2:(-m2);
 8003afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	bfb8      	it	lt
 8003b00:	425b      	neglt	r3, r3
 8003b02:	663b      	str	r3, [r7, #96]	; 0x60
    if(m0>THRESHOLD&&m1>THRESHOLD&&m2>THRESHOLD) return 0;
 8003b04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	dd07      	ble.n	8003b1a <Read_Ads7846+0x1f6>
 8003b0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	dd04      	ble.n	8003b1a <Read_Ads7846+0x1f6>
 8003b10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	dd01      	ble.n	8003b1a <Read_Ads7846+0x1f6>
 8003b16:	2300      	movs	r3, #0
 8003b18:	e035      	b.n	8003b86 <Read_Ads7846+0x262>
   
    if(m0<m1)
 8003b1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	da17      	bge.n	8003b52 <Read_Ads7846+0x22e>
    {
      if(m2<m0) 
 8003b22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b26:	429a      	cmp	r2, r3
 8003b28:	da09      	bge.n	8003b3e <Read_Ads7846+0x21a>
        screen.y=(temp[0]+temp[2])/2;
 8003b2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b2e:	4413      	add	r3, r2
 8003b30:	0fda      	lsrs	r2, r3, #31
 8003b32:	4413      	add	r3, r2
 8003b34:	105b      	asrs	r3, r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <Read_Ads7846+0x274>)
 8003b3a:	805a      	strh	r2, [r3, #2]
 8003b3c:	e020      	b.n	8003b80 <Read_Ads7846+0x25c>
      else 
        screen.y=(temp[0]+temp[1])/2;  
 8003b3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b42:	4413      	add	r3, r2
 8003b44:	0fda      	lsrs	r2, r3, #31
 8003b46:	4413      	add	r3, r2
 8003b48:	105b      	asrs	r3, r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <Read_Ads7846+0x274>)
 8003b4e:	805a      	strh	r2, [r3, #2]
 8003b50:	e016      	b.n	8003b80 <Read_Ads7846+0x25c>
      }
    else if(m2<m1) 
 8003b52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b56:	429a      	cmp	r2, r3
 8003b58:	da09      	bge.n	8003b6e <Read_Ads7846+0x24a>
       screen.y=(temp[0]+temp[2])/2;
 8003b5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b5e:	4413      	add	r3, r2
 8003b60:	0fda      	lsrs	r2, r3, #31
 8003b62:	4413      	add	r3, r2
 8003b64:	105b      	asrs	r3, r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <Read_Ads7846+0x274>)
 8003b6a:	805a      	strh	r2, [r3, #2]
 8003b6c:	e008      	b.n	8003b80 <Read_Ads7846+0x25c>
    else
       screen.y=(temp[1]+temp[2])/2;
 8003b6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b72:	4413      	add	r3, r2
 8003b74:	0fda      	lsrs	r2, r3, #31
 8003b76:	4413      	add	r3, r2
 8003b78:	105b      	asrs	r3, r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <Read_Ads7846+0x274>)
 8003b7e:	805a      	strh	r2, [r3, #2]
   
    return &screen;
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <Read_Ads7846+0x274>)
 8003b82:	e000      	b.n	8003b86 <Read_Ads7846+0x262>
  }
  return 0; 
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3770      	adds	r7, #112	; 0x70
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40020800 	.word	0x40020800
 8003b94:	55555556 	.word	0x55555556
 8003b98:	200024f8 	.word	0x200024f8

08003b9c <setCalibrationMatrix>:
* Attention      : None
*******************************************************************************/
FunctionalState setCalibrationMatrix( Coordinate * displayPtr,
                          Coordinate * screenPtr,
                          Matrix * matrixPtr)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]

  FunctionalState retTHRESHOLD = ENABLE ;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	75fb      	strb	r3, [r7, #23]
  /* K=(X0-X2) (Y1-Y2)-(X1-X2) (Y0-Y2) */
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	3204      	adds	r2, #4
 8003bbe:	8852      	ldrh	r2, [r2, #2]
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	3208      	adds	r2, #8
 8003bc6:	8852      	ldrh	r2, [r2, #2]
 8003bc8:	1a8a      	subs	r2, r1, r2
 8003bca:	fb03 f202 	mul.w	r2, r3, r2
                       ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	3308      	adds	r3, #8
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	1acb      	subs	r3, r1, r3
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	8849      	ldrh	r1, [r1, #2]
 8003be2:	4608      	mov	r0, r1
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	3108      	adds	r1, #8
 8003be8:	8849      	ldrh	r1, [r1, #2]
 8003bea:	1a41      	subs	r1, r0, r1
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fc fc96 	bl	8000524 <__aeabi_i2d>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  if( matrixPtr->Divider == 0 )
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	f7fc ff5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <setCalibrationMatrix+0x84>
  {
    retTHRESHOLD = DISABLE;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	75fb      	strb	r3, [r7, #23]
 8003c1e:	e145      	b.n	8003eac <setCalibrationMatrix+0x310>
  }
  else
  {
    /* A=((XD0-XD2) (Y1-Y2)-(XD1-XD2) (Y0-Y2))/K  */
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3308      	adds	r3, #8
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	3204      	adds	r2, #4
 8003c32:	8852      	ldrh	r2, [r2, #2]
 8003c34:	4611      	mov	r1, r2
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	3208      	adds	r2, #8
 8003c3a:	8852      	ldrh	r2, [r2, #2]
 8003c3c:	1a8a      	subs	r2, r1, r2
 8003c3e:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3304      	adds	r3, #4
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	4619      	mov	r1, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	1acb      	subs	r3, r1, r3
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	8849      	ldrh	r1, [r1, #2]
 8003c56:	4608      	mov	r0, r1
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	3108      	adds	r1, #8
 8003c5c:	8849      	ldrh	r1, [r1, #2]
 8003c5e:	1a41      	subs	r1, r0, r1
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fc fc5c 	bl	8000524 <__aeabi_i2d>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	e9c1 2300 	strd	r2, r3, [r1]
  /* B=((X0-X2) (XD1-XD2)-(XD0-XD2) (X1-X2))/K  */
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	3308      	adds	r3, #8
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	3204      	adds	r2, #4
 8003c88:	8812      	ldrh	r2, [r2, #0]
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	3208      	adds	r2, #8
 8003c90:	8812      	ldrh	r2, [r2, #0]
 8003c92:	1a8a      	subs	r2, r1, r2
 8003c94:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	1acb      	subs	r3, r1, r3
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	3104      	adds	r1, #4
 8003caa:	8809      	ldrh	r1, [r1, #0]
 8003cac:	4608      	mov	r0, r1
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	3108      	adds	r1, #8
 8003cb2:	8809      	ldrh	r1, [r1, #0]
 8003cb4:	1a41      	subs	r1, r0, r1
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fc fc31 	bl	8000524 <__aeabi_i2d>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    /* C=(Y0(X2XD1-X1XD2)+Y1(X0XD2-X2XD0)+Y2(X1XD0-X0XD1))/K */
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	3308      	adds	r3, #8
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	fb03 f202 	mul.w	r2, r3, r2
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	3308      	adds	r3, #8
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	8852      	ldrh	r2, [r2, #2]
 8003cf6:	fb03 f202 	mul.w	r2, r3, r2
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	4619      	mov	r1, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3308      	adds	r3, #8
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	fb03 f101 	mul.w	r1, r3, r1
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	fb00 f303 	mul.w	r3, r0, r3
 8003d1a:	1acb      	subs	r3, r1, r3
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	3104      	adds	r1, #4
 8003d20:	8849      	ldrh	r1, [r1, #2]
 8003d22:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8003d26:	441a      	add	r2, r3
                    (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	fb03 f101 	mul.w	r1, r3, r1
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3304      	adds	r3, #4
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	fb00 f303 	mul.w	r3, r0, r3
 8003d48:	1acb      	subs	r3, r1, r3
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	3108      	adds	r1, #8
 8003d4e:	8849      	ldrh	r1, [r1, #2]
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8003d54:	4413      	add	r3, r2
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fc fbe4 	bl	8000524 <__aeabi_i2d>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	e9c1 2304 	strd	r2, r3, [r1, #16]
    /* D=((YD0-YD2) (Y1-Y2)-(YD1-YD2) (Y0-Y2))/K  */
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	885b      	ldrh	r3, [r3, #2]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3308      	adds	r3, #8
 8003d70:	885b      	ldrh	r3, [r3, #2]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	3204      	adds	r2, #4
 8003d78:	8852      	ldrh	r2, [r2, #2]
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	3208      	adds	r2, #8
 8003d80:	8852      	ldrh	r2, [r2, #2]
 8003d82:	1a8a      	subs	r2, r1, r2
 8003d84:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	885b      	ldrh	r3, [r3, #2]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	3308      	adds	r3, #8
 8003d94:	885b      	ldrh	r3, [r3, #2]
 8003d96:	1acb      	subs	r3, r1, r3
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	8849      	ldrh	r1, [r1, #2]
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	3108      	adds	r1, #8
 8003da2:	8849      	ldrh	r1, [r1, #2]
 8003da4:	1a41      	subs	r1, r0, r1
 8003da6:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fc fbb9 	bl	8000524 <__aeabi_i2d>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    /* E=((X0-X2) (YD1-YD2)-(YD0-YD2) (X1-X2))/K  */
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	3204      	adds	r2, #4
 8003dce:	8852      	ldrh	r2, [r2, #2]
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	3208      	adds	r2, #8
 8003dd6:	8852      	ldrh	r2, [r2, #2]
 8003dd8:	1a8a      	subs	r2, r1, r2
 8003dda:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	885b      	ldrh	r3, [r3, #2]
 8003de2:	4619      	mov	r1, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3308      	adds	r3, #8
 8003de8:	885b      	ldrh	r3, [r3, #2]
 8003dea:	1acb      	subs	r3, r1, r3
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	3104      	adds	r1, #4
 8003df0:	8809      	ldrh	r1, [r1, #0]
 8003df2:	4608      	mov	r0, r1
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	3108      	adds	r1, #8
 8003df8:	8809      	ldrh	r1, [r1, #0]
 8003dfa:	1a41      	subs	r1, r0, r1
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fc fb8e 	bl	8000524 <__aeabi_i2d>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    /* F=(Y0(X2YD1-X1YD2)+Y1(X0YD2-X2YD0)+Y2(X1YD0-X0YD1))/K */
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	3308      	adds	r3, #8
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	885b      	ldrh	r3, [r3, #2]
 8003e20:	fb03 f202 	mul.w	r2, r3, r2
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	3304      	adds	r3, #4
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3308      	adds	r3, #8
 8003e30:	885b      	ldrh	r3, [r3, #2]
 8003e32:	fb01 f303 	mul.w	r3, r1, r3
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	8852      	ldrh	r2, [r2, #2]
 8003e3c:	fb03 f202 	mul.w	r2, r3, r2
                    (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	4619      	mov	r1, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	3308      	adds	r3, #8
 8003e4a:	885b      	ldrh	r3, [r3, #2]
 8003e4c:	fb03 f101 	mul.w	r1, r3, r1
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	3308      	adds	r3, #8
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	885b      	ldrh	r3, [r3, #2]
 8003e5c:	fb00 f303 	mul.w	r3, r0, r3
 8003e60:	1acb      	subs	r3, r1, r3
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	3104      	adds	r1, #4
 8003e66:	8849      	ldrh	r1, [r1, #2]
 8003e68:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8003e6c:	441a      	add	r2, r3
                    (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	3304      	adds	r3, #4
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	4619      	mov	r1, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	885b      	ldrh	r3, [r3, #2]
 8003e7a:	fb03 f101 	mul.w	r1, r3, r1
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3304      	adds	r3, #4
 8003e88:	885b      	ldrh	r3, [r3, #2]
 8003e8a:	fb00 f303 	mul.w	r3, r0, r3
 8003e8e:	1acb      	subs	r3, r1, r3
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	3108      	adds	r1, #8
 8003e94:	8849      	ldrh	r1, [r1, #2]
 8003e96:	fb01 f303 	mul.w	r3, r1, r3
                    (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8003e9a:	4413      	add	r3, r2
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fc fb41 	bl	8000524 <__aeabi_i2d>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  }
  return( retTHRESHOLD ) ;
 8003eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <getDisplayPoint>:
* Attention      : None
*******************************************************************************/
FunctionalState getDisplayPoint(Coordinate * displayPtr,
                     Coordinate * screenPtr,
                     Matrix * matrixPtr )
{
 8003eb6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  FunctionalState retTHRESHOLD =ENABLE ;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	75fb      	strb	r3, [r7, #23]
  /*
  An=168
  */
  if( matrixPtr->Divider != 0 )
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	f7fc fdf7 	bl	8000ac8 <__aeabi_dcmpeq>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f040 8085 	bne.w	8003fec <getDisplayPoint+0x136>
  {
    /* XD = AX+BY+C */        
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fc fb19 	bl	8000524 <__aeabi_i2d>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	4629      	mov	r1, r5
 8003efa:	f7fc fb7d 	bl	80005f8 <__aeabi_dmul>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4690      	mov	r8, r2
 8003f04:	4699      	mov	r9, r3
                      (matrixPtr->Bn * screenPtr->y) + 
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	885b      	ldrh	r3, [r3, #2]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fc fb07 	bl	8000524 <__aeabi_i2d>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	4629      	mov	r1, r5
 8003f1e:	f7fc fb6b 	bl	80005f8 <__aeabi_dmul>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8003f26:	4640      	mov	r0, r8
 8003f28:	4649      	mov	r1, r9
 8003f2a:	f7fc f9af 	bl	800028c <__adddf3>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4610      	mov	r0, r2
 8003f34:	4619      	mov	r1, r3
                       matrixPtr->Cn 
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
                      (matrixPtr->Bn * screenPtr->y) + 
 8003f3c:	f7fc f9a6 	bl	800028c <__adddf3>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4610      	mov	r0, r2
 8003f46:	4619      	mov	r1, r3
                    ) / matrixPtr->Divider ;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003f4e:	f7fc fc7d 	bl	800084c <__aeabi_ddiv>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8003f56:	4610      	mov	r0, r2
 8003f58:	4619      	mov	r1, r3
 8003f5a:	f7fc fe25 	bl	8000ba8 <__aeabi_d2uiz>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	801a      	strh	r2, [r3, #0]
    /* YD = DX+EY+F */        
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fc fad7 	bl	8000524 <__aeabi_i2d>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	f7fc fb3b 	bl	80005f8 <__aeabi_dmul>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4690      	mov	r8, r2
 8003f88:	4699      	mov	r9, r3
                      (matrixPtr->En * screenPtr->y) + 
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	885b      	ldrh	r3, [r3, #2]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fc fac5 	bl	8000524 <__aeabi_i2d>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	4629      	mov	r1, r5
 8003fa2:	f7fc fb29 	bl	80005f8 <__aeabi_dmul>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8003faa:	4640      	mov	r0, r8
 8003fac:	4649      	mov	r1, r9
 8003fae:	f7fc f96d 	bl	800028c <__adddf3>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	4619      	mov	r1, r3
                       matrixPtr->Fn 
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
                      (matrixPtr->En * screenPtr->y) + 
 8003fc0:	f7fc f964 	bl	800028c <__adddf3>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4610      	mov	r0, r2
 8003fca:	4619      	mov	r1, r3
                    ) / matrixPtr->Divider ;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003fd2:	f7fc fc3b 	bl	800084c <__aeabi_ddiv>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8003fda:	4610      	mov	r0, r2
 8003fdc:	4619      	mov	r1, r3
 8003fde:	f7fc fde3 	bl	8000ba8 <__aeabi_d2uiz>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	805a      	strh	r2, [r3, #2]
 8003fea:	e001      	b.n	8003ff0 <getDisplayPoint+0x13a>
  }
  else
  {
    retTHRESHOLD = DISABLE;
 8003fec:	2300      	movs	r3, #0
 8003fee:	75fb      	strb	r3, [r7, #23]
  }
  return(retTHRESHOLD);
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003ffc <TouchPanel_Calibrate>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void TouchPanel_Calibrate(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
  uint8_t i;
  Coordinate * Ptr;

  for(i=0;i<3;i++)
 8004002:	2300      	movs	r3, #0
 8004004:	71fb      	strb	r3, [r7, #7]
 8004006:	e03b      	b.n	8004080 <TouchPanel_Calibrate+0x84>
  {
    BSP_LCD_SetFont(&Font12);
 8004008:	4825      	ldr	r0, [pc, #148]	; (80040a0 <TouchPanel_Calibrate+0xa4>)
 800400a:	f7ff f879 	bl	8003100 <BSP_LCD_SetFont>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 800400e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004012:	f7ff f891 	bl	8003138 <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8004016:	201f      	movs	r0, #31
 8004018:	f7ff f862 	bl	80030e0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"        Touch crosshair to calibrate");
 800401c:	4921      	ldr	r1, [pc, #132]	; (80040a4 <TouchPanel_Calibrate+0xa8>)
 800401e:	2001      	movs	r0, #1
 8004020:	f7ff f976 	bl	8003310 <BSP_LCD_DisplayStringAtLine>
    BSP_LCD_SetFont(&Font24);
 8004024:	4820      	ldr	r0, [pc, #128]	; (80040a8 <TouchPanel_Calibrate+0xac>)
 8004026:	f7ff f86b 	bl	8003100 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAtLine(5, (uint8_t*)"   Waveshare LCD");
 800402a:	4920      	ldr	r1, [pc, #128]	; (80040ac <TouchPanel_Calibrate+0xb0>)
 800402c:	2005      	movs	r0, #5
 800402e:	f7ff f96f 	bl	8003310 <BSP_LCD_DisplayStringAtLine>
    HAL_Delay(200);
 8004032:	20c8      	movs	r0, #200	; 0xc8
 8004034:	f000 f884 	bl	8004140 <HAL_Delay>
    DrawCross(DisplaySample[i].x,DisplaySample[i].y);
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	4a1d      	ldr	r2, [pc, #116]	; (80040b0 <TouchPanel_Calibrate+0xb4>)
 800403c:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	491b      	ldr	r1, [pc, #108]	; (80040b0 <TouchPanel_Calibrate+0xb4>)
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	885b      	ldrh	r3, [r3, #2]
 800404a:	4619      	mov	r1, r3
 800404c:	4610      	mov	r0, r2
 800404e:	f7ff fc3d 	bl	80038cc <DrawCross>
    do
    {
      Ptr=Read_Ads7846();
 8004052:	f7ff fc67 	bl	8003924 <Read_Ads7846>
 8004056:	6038      	str	r0, [r7, #0]
    }
    while( Ptr == (void*)0 );
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f9      	beq.n	8004052 <TouchPanel_Calibrate+0x56>
    ScreenSample[i].x= Ptr->x; ScreenSample[i].y= Ptr->y;
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	8811      	ldrh	r1, [r2, #0]
 8004064:	4a13      	ldr	r2, [pc, #76]	; (80040b4 <TouchPanel_Calibrate+0xb8>)
 8004066:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	8851      	ldrh	r1, [r2, #2]
 8004070:	4a10      	ldr	r2, [pc, #64]	; (80040b4 <TouchPanel_Calibrate+0xb8>)
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	460a      	mov	r2, r1
 8004078:	805a      	strh	r2, [r3, #2]
  for(i=0;i<3;i++)
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	3301      	adds	r3, #1
 800407e:	71fb      	strb	r3, [r7, #7]
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d9c0      	bls.n	8004008 <TouchPanel_Calibrate+0xc>
  }
  setCalibrationMatrix( &DisplaySample[0],&ScreenSample[0],&matrix );
 8004086:	4a0c      	ldr	r2, [pc, #48]	; (80040b8 <TouchPanel_Calibrate+0xbc>)
 8004088:	490a      	ldr	r1, [pc, #40]	; (80040b4 <TouchPanel_Calibrate+0xb8>)
 800408a:	4809      	ldr	r0, [pc, #36]	; (80040b0 <TouchPanel_Calibrate+0xb4>)
 800408c:	f7ff fd86 	bl	8003b9c <setCalibrationMatrix>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8004090:	2000      	movs	r0, #0
 8004092:	f7ff f851 	bl	8003138 <BSP_LCD_Clear>
} 
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	2000004c 	.word	0x2000004c
 80040a4:	08011d34 	.word	0x08011d34
 80040a8:	20000064 	.word	0x20000064
 80040ac:	08011d5c 	.word	0x08011d5c
 80040b0:	20000040 	.word	0x20000040
 80040b4:	200024ec 	.word	0x200024ec
 80040b8:	200024b0 	.word	0x200024b0

080040bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040c0:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <HAL_Init+0x40>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a0d      	ldr	r2, [pc, #52]	; (80040fc <HAL_Init+0x40>)
 80040c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_Init+0x40>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <HAL_Init+0x40>)
 80040d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040d8:	4b08      	ldr	r3, [pc, #32]	; (80040fc <HAL_Init+0x40>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a07      	ldr	r2, [pc, #28]	; (80040fc <HAL_Init+0x40>)
 80040de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040e4:	2003      	movs	r0, #3
 80040e6:	f000 f8fc 	bl	80042e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040ea:	200f      	movs	r0, #15
 80040ec:	f7fe fafe 	bl	80026ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040f0:	f7fe fad0 	bl	8002694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40023c00 	.word	0x40023c00

08004100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <HAL_IncTick+0x20>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <HAL_IncTick+0x24>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4413      	add	r3, r2
 8004110:	4a04      	ldr	r2, [pc, #16]	; (8004124 <HAL_IncTick+0x24>)
 8004112:	6013      	str	r3, [r2, #0]
}
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000070 	.word	0x20000070
 8004124:	200024fc 	.word	0x200024fc

08004128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  return uwTick;
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <HAL_GetTick+0x14>)
 800412e:	681b      	ldr	r3, [r3, #0]
}
 8004130:	4618      	mov	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	200024fc 	.word	0x200024fc

08004140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004148:	f7ff ffee 	bl	8004128 <HAL_GetTick>
 800414c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d005      	beq.n	8004166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <HAL_Delay+0x44>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004166:	bf00      	nop
 8004168:	f7ff ffde 	bl	8004128 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	429a      	cmp	r2, r3
 8004176:	d8f7      	bhi.n	8004168 <HAL_Delay+0x28>
  {
  }
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000070 	.word	0x20000070

08004188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004198:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <__NVIC_SetPriorityGrouping+0x44>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041a4:	4013      	ands	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ba:	4a04      	ldr	r2, [pc, #16]	; (80041cc <__NVIC_SetPriorityGrouping+0x44>)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	60d3      	str	r3, [r2, #12]
}
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	e000ed00 	.word	0xe000ed00

080041d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041d4:	4b04      	ldr	r3, [pc, #16]	; (80041e8 <__NVIC_GetPriorityGrouping+0x18>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	0a1b      	lsrs	r3, r3, #8
 80041da:	f003 0307 	and.w	r3, r3, #7
}
 80041de:	4618      	mov	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	e000ed00 	.word	0xe000ed00

080041ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	db0b      	blt.n	8004216 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	f003 021f 	and.w	r2, r3, #31
 8004204:	4907      	ldr	r1, [pc, #28]	; (8004224 <__NVIC_EnableIRQ+0x38>)
 8004206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	2001      	movs	r0, #1
 800420e:	fa00 f202 	lsl.w	r2, r0, r2
 8004212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	e000e100 	.word	0xe000e100

08004228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	6039      	str	r1, [r7, #0]
 8004232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004238:	2b00      	cmp	r3, #0
 800423a:	db0a      	blt.n	8004252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	b2da      	uxtb	r2, r3
 8004240:	490c      	ldr	r1, [pc, #48]	; (8004274 <__NVIC_SetPriority+0x4c>)
 8004242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004246:	0112      	lsls	r2, r2, #4
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	440b      	add	r3, r1
 800424c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004250:	e00a      	b.n	8004268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	4908      	ldr	r1, [pc, #32]	; (8004278 <__NVIC_SetPriority+0x50>)
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	3b04      	subs	r3, #4
 8004260:	0112      	lsls	r2, r2, #4
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	440b      	add	r3, r1
 8004266:	761a      	strb	r2, [r3, #24]
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	e000e100 	.word	0xe000e100
 8004278:	e000ed00 	.word	0xe000ed00

0800427c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800427c:	b480      	push	{r7}
 800427e:	b089      	sub	sp, #36	; 0x24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f1c3 0307 	rsb	r3, r3, #7
 8004296:	2b04      	cmp	r3, #4
 8004298:	bf28      	it	cs
 800429a:	2304      	movcs	r3, #4
 800429c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	3304      	adds	r3, #4
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d902      	bls.n	80042ac <NVIC_EncodePriority+0x30>
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	3b03      	subs	r3, #3
 80042aa:	e000      	b.n	80042ae <NVIC_EncodePriority+0x32>
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b0:	f04f 32ff 	mov.w	r2, #4294967295
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43da      	mvns	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	401a      	ands	r2, r3
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042c4:	f04f 31ff 	mov.w	r1, #4294967295
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	fa01 f303 	lsl.w	r3, r1, r3
 80042ce:	43d9      	mvns	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d4:	4313      	orrs	r3, r2
         );
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3724      	adds	r7, #36	; 0x24
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff ff4c 	bl	8004188 <__NVIC_SetPriorityGrouping>
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800430a:	f7ff ff61 	bl	80041d0 <__NVIC_GetPriorityGrouping>
 800430e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	6978      	ldr	r0, [r7, #20]
 8004316:	f7ff ffb1 	bl	800427c <NVIC_EncodePriority>
 800431a:	4602      	mov	r2, r0
 800431c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004320:	4611      	mov	r1, r2
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff ff80 	bl	8004228 <__NVIC_SetPriority>
}
 8004328:	bf00      	nop
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800433a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ff54 	bl	80041ec <__NVIC_EnableIRQ>
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b00      	cmp	r3, #0
 8004364:	d016      	beq.n	8004394 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2204      	movs	r2, #4
 800436c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004372:	f043 0202 	orr.w	r2, r3, #2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2204      	movs	r2, #4
 800437e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	4a2f      	ldr	r2, [pc, #188]	; (8004444 <HAL_DCMI_IRQHandler+0xf8>)
 8004388:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fa0c 	bl	80047ac <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d016      	beq.n	80043cc <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2202      	movs	r2, #2
 80043a4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	f043 0201 	orr.w	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2204      	movs	r2, #4
 80043b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	4a21      	ldr	r2, [pc, #132]	; (8004444 <HAL_DCMI_IRQHandler+0xf8>)
 80043c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f9f0 	bl	80047ac <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d006      	beq.n	80043e4 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2210      	movs	r2, #16
 80043dc:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f83c 	bl	800445c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d006      	beq.n	80043fc <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2208      	movs	r2, #8
 80043f4:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f83a 	bl	8004470 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d019      	beq.n	800443a <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b02      	cmp	r3, #2
 8004412:	d107      	bne.n	8004424 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 021e 	bic.w	r2, r2, #30
 8004422:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f825 	bl	8004484 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 800443a:	bf00      	nop
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	08004499 	.word	0x08004499

08004448 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d003      	beq.n	80044b8 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7ff ffc5 	bl	8004448 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 80044be:	bf00      	nop
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b082      	sub	sp, #8
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e05f      	b.n	8004598 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d109      	bne.n	80044f8 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7fd fa2d 	bl	800194c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fd fa2a 	bl	800194c <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6812      	ldr	r2, [r2, #0]
 800450a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800450e:	f023 0308 	bic.w	r3, r3, #8
 8004512:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6819      	ldr	r1, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004528:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8004534:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8004540:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b10      	cmp	r3, #16
 8004550:	d112      	bne.n	8004578 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	7f1b      	ldrb	r3, [r3, #28]
 8004556:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	7f5b      	ldrb	r3, [r3, #29]
 800455c:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800455e:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	7f9b      	ldrb	r3, [r3, #30]
 8004564:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8004566:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	7fdb      	ldrb	r3, [r3, #31]
 800456e:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8004574:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8004576:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 021e 	orr.w	r2, r2, #30
 8004586:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80045ac:	f7ff fdbc 	bl	8004128 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e099      	b.n	80046f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0201 	bic.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045dc:	e00f      	b.n	80045fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045de:	f7ff fda3 	bl	8004128 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b05      	cmp	r3, #5
 80045ea:	d908      	bls.n	80045fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2220      	movs	r2, #32
 80045f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2203      	movs	r2, #3
 80045f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e078      	b.n	80046f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1e8      	bne.n	80045de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4b38      	ldr	r3, [pc, #224]	; (80046f8 <HAL_DMA_Init+0x158>)
 8004618:	4013      	ands	r3, r2
 800461a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800462a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004636:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004642:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	2b04      	cmp	r3, #4
 8004656:	d107      	bne.n	8004668 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	4313      	orrs	r3, r2
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 0307 	bic.w	r3, r3, #7
 800467e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	2b04      	cmp	r3, #4
 8004690:	d117      	bne.n	80046c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00e      	beq.n	80046c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 fa9d 	bl	8004be4 <DMA_CheckFifoParam>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d008      	beq.n	80046c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2240      	movs	r2, #64	; 0x40
 80046b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80046be:	2301      	movs	r3, #1
 80046c0:	e016      	b.n	80046f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fa54 	bl	8004b78 <DMA_CalcBaseAndBitshift>
 80046d0:	4603      	mov	r3, r0
 80046d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d8:	223f      	movs	r2, #63	; 0x3f
 80046da:	409a      	lsls	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	f010803f 	.word	0xf010803f

080046fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004712:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_DMA_Start_IT+0x26>
 800471e:	2302      	movs	r3, #2
 8004720:	e040      	b.n	80047a4 <HAL_DMA_Start_IT+0xa8>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b01      	cmp	r3, #1
 8004734:	d12f      	bne.n	8004796 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2202      	movs	r2, #2
 800473a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 f9e6 	bl	8004b1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004754:	223f      	movs	r2, #63	; 0x3f
 8004756:	409a      	lsls	r2, r3
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0216 	orr.w	r2, r2, #22
 800476a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d007      	beq.n	8004784 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0208 	orr.w	r2, r2, #8
 8004782:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	e005      	b.n	80047a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800479e:	2302      	movs	r3, #2
 80047a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80047a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d004      	beq.n	80047ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2280      	movs	r2, #128	; 0x80
 80047c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e00c      	b.n	80047e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2205      	movs	r2, #5
 80047ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0201 	bic.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047fc:	4b8e      	ldr	r3, [pc, #568]	; (8004a38 <HAL_DMA_IRQHandler+0x248>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a8e      	ldr	r2, [pc, #568]	; (8004a3c <HAL_DMA_IRQHandler+0x24c>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	0a9b      	lsrs	r3, r3, #10
 8004808:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481a:	2208      	movs	r2, #8
 800481c:	409a      	lsls	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4013      	ands	r3, r2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01a      	beq.n	800485c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d013      	beq.n	800485c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0204 	bic.w	r2, r2, #4
 8004842:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004848:	2208      	movs	r2, #8
 800484a:	409a      	lsls	r2, r3
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004854:	f043 0201 	orr.w	r2, r3, #1
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004860:	2201      	movs	r2, #1
 8004862:	409a      	lsls	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d012      	beq.n	8004892 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487e:	2201      	movs	r2, #1
 8004880:	409a      	lsls	r2, r3
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488a:	f043 0202 	orr.w	r2, r3, #2
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004896:	2204      	movs	r2, #4
 8004898:	409a      	lsls	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4013      	ands	r3, r2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d012      	beq.n	80048c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00b      	beq.n	80048c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b4:	2204      	movs	r2, #4
 80048b6:	409a      	lsls	r2, r3
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c0:	f043 0204 	orr.w	r2, r3, #4
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048cc:	2210      	movs	r2, #16
 80048ce:	409a      	lsls	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d043      	beq.n	8004960 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d03c      	beq.n	8004960 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ea:	2210      	movs	r2, #16
 80048ec:	409a      	lsls	r2, r3
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d018      	beq.n	8004932 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d108      	bne.n	8004920 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d024      	beq.n	8004960 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	4798      	blx	r3
 800491e:	e01f      	b.n	8004960 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01b      	beq.n	8004960 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	4798      	blx	r3
 8004930:	e016      	b.n	8004960 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493c:	2b00      	cmp	r3, #0
 800493e:	d107      	bne.n	8004950 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0208 	bic.w	r2, r2, #8
 800494e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004964:	2220      	movs	r2, #32
 8004966:	409a      	lsls	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 808f 	beq.w	8004a90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8087 	beq.w	8004a90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004986:	2220      	movs	r2, #32
 8004988:	409a      	lsls	r2, r3
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b05      	cmp	r3, #5
 8004998:	d136      	bne.n	8004a08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0216 	bic.w	r2, r2, #22
 80049a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695a      	ldr	r2, [r3, #20]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d103      	bne.n	80049ca <HAL_DMA_IRQHandler+0x1da>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d007      	beq.n	80049da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0208 	bic.w	r2, r2, #8
 80049d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049de:	223f      	movs	r2, #63	; 0x3f
 80049e0:	409a      	lsls	r2, r3
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d07e      	beq.n	8004afc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	4798      	blx	r3
        }
        return;
 8004a06:	e079      	b.n	8004afc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d01d      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10d      	bne.n	8004a40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d031      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	4798      	blx	r3
 8004a34:	e02c      	b.n	8004a90 <HAL_DMA_IRQHandler+0x2a0>
 8004a36:	bf00      	nop
 8004a38:	20000000 	.word	0x20000000
 8004a3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d023      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	4798      	blx	r3
 8004a50:	e01e      	b.n	8004a90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10f      	bne.n	8004a80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0210 	bic.w	r2, r2, #16
 8004a6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d032      	beq.n	8004afe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d022      	beq.n	8004aea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2205      	movs	r2, #5
 8004aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0201 	bic.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d307      	bcc.n	8004ad8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1f2      	bne.n	8004abc <HAL_DMA_IRQHandler+0x2cc>
 8004ad6:	e000      	b.n	8004ada <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ad8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d005      	beq.n	8004afe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	4798      	blx	r3
 8004afa:	e000      	b.n	8004afe <HAL_DMA_IRQHandler+0x30e>
        return;
 8004afc:	bf00      	nop
    }
  }
}
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	2b40      	cmp	r3, #64	; 0x40
 8004b48:	d108      	bne.n	8004b5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b5a:	e007      	b.n	8004b6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	60da      	str	r2, [r3, #12]
}
 8004b6c:	bf00      	nop
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	3b10      	subs	r3, #16
 8004b88:	4a14      	ldr	r2, [pc, #80]	; (8004bdc <DMA_CalcBaseAndBitshift+0x64>)
 8004b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8e:	091b      	lsrs	r3, r3, #4
 8004b90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b92:	4a13      	ldr	r2, [pc, #76]	; (8004be0 <DMA_CalcBaseAndBitshift+0x68>)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d909      	bls.n	8004bba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bae:	f023 0303 	bic.w	r3, r3, #3
 8004bb2:	1d1a      	adds	r2, r3, #4
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	659a      	str	r2, [r3, #88]	; 0x58
 8004bb8:	e007      	b.n	8004bca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bc2:	f023 0303 	bic.w	r3, r3, #3
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	aaaaaaab 	.word	0xaaaaaaab
 8004be0:	080157e0 	.word	0x080157e0

08004be4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d11f      	bne.n	8004c3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d856      	bhi.n	8004cb2 <DMA_CheckFifoParam+0xce>
 8004c04:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <DMA_CheckFifoParam+0x28>)
 8004c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0a:	bf00      	nop
 8004c0c:	08004c1d 	.word	0x08004c1d
 8004c10:	08004c2f 	.word	0x08004c2f
 8004c14:	08004c1d 	.word	0x08004c1d
 8004c18:	08004cb3 	.word	0x08004cb3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d046      	beq.n	8004cb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c2c:	e043      	b.n	8004cb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c36:	d140      	bne.n	8004cba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c3c:	e03d      	b.n	8004cba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c46:	d121      	bne.n	8004c8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d837      	bhi.n	8004cbe <DMA_CheckFifoParam+0xda>
 8004c4e:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <DMA_CheckFifoParam+0x70>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004c65 	.word	0x08004c65
 8004c58:	08004c6b 	.word	0x08004c6b
 8004c5c:	08004c65 	.word	0x08004c65
 8004c60:	08004c7d 	.word	0x08004c7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
      break;
 8004c68:	e030      	b.n	8004ccc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d025      	beq.n	8004cc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c7a:	e022      	b.n	8004cc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c84:	d11f      	bne.n	8004cc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c8a:	e01c      	b.n	8004cc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d903      	bls.n	8004c9a <DMA_CheckFifoParam+0xb6>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d003      	beq.n	8004ca0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c98:	e018      	b.n	8004ccc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c9e:	e015      	b.n	8004ccc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00e      	beq.n	8004cca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb0:	e00b      	b.n	8004cca <DMA_CheckFifoParam+0xe6>
      break;
 8004cb2:	bf00      	nop
 8004cb4:	e00a      	b.n	8004ccc <DMA_CheckFifoParam+0xe8>
      break;
 8004cb6:	bf00      	nop
 8004cb8:	e008      	b.n	8004ccc <DMA_CheckFifoParam+0xe8>
      break;
 8004cba:	bf00      	nop
 8004cbc:	e006      	b.n	8004ccc <DMA_CheckFifoParam+0xe8>
      break;
 8004cbe:	bf00      	nop
 8004cc0:	e004      	b.n	8004ccc <DMA_CheckFifoParam+0xe8>
      break;
 8004cc2:	bf00      	nop
 8004cc4:	e002      	b.n	8004ccc <DMA_CheckFifoParam+0xe8>
      break;   
 8004cc6:	bf00      	nop
 8004cc8:	e000      	b.n	8004ccc <DMA_CheckFifoParam+0xe8>
      break;
 8004cca:	bf00      	nop
    }
  } 
  
  return status; 
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop

08004cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b089      	sub	sp, #36	; 0x24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	e16b      	b.n	8004fd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	f040 815a 	bne.w	8004fca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d005      	beq.n	8004d2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d130      	bne.n	8004d90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	2203      	movs	r2, #3
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	4013      	ands	r3, r2
 8004d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d64:	2201      	movs	r2, #1
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	4013      	ands	r3, r2
 8004d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	091b      	lsrs	r3, r3, #4
 8004d7a:	f003 0201 	and.w	r2, r3, #1
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d017      	beq.n	8004dcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	2203      	movs	r2, #3
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	43db      	mvns	r3, r3
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	4013      	ands	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d123      	bne.n	8004e20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	08da      	lsrs	r2, r3, #3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3208      	adds	r2, #8
 8004de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	220f      	movs	r2, #15
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	43db      	mvns	r3, r3
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	08da      	lsrs	r2, r3, #3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3208      	adds	r2, #8
 8004e1a:	69b9      	ldr	r1, [r7, #24]
 8004e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	2203      	movs	r2, #3
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	43db      	mvns	r3, r3
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	4013      	ands	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f003 0203 	and.w	r2, r3, #3
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 80b4 	beq.w	8004fca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	4b60      	ldr	r3, [pc, #384]	; (8004fe8 <HAL_GPIO_Init+0x30c>)
 8004e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6a:	4a5f      	ldr	r2, [pc, #380]	; (8004fe8 <HAL_GPIO_Init+0x30c>)
 8004e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e70:	6453      	str	r3, [r2, #68]	; 0x44
 8004e72:	4b5d      	ldr	r3, [pc, #372]	; (8004fe8 <HAL_GPIO_Init+0x30c>)
 8004e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e7e:	4a5b      	ldr	r2, [pc, #364]	; (8004fec <HAL_GPIO_Init+0x310>)
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	089b      	lsrs	r3, r3, #2
 8004e84:	3302      	adds	r3, #2
 8004e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	220f      	movs	r2, #15
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a52      	ldr	r2, [pc, #328]	; (8004ff0 <HAL_GPIO_Init+0x314>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d02b      	beq.n	8004f02 <HAL_GPIO_Init+0x226>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a51      	ldr	r2, [pc, #324]	; (8004ff4 <HAL_GPIO_Init+0x318>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d025      	beq.n	8004efe <HAL_GPIO_Init+0x222>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a50      	ldr	r2, [pc, #320]	; (8004ff8 <HAL_GPIO_Init+0x31c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d01f      	beq.n	8004efa <HAL_GPIO_Init+0x21e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a4f      	ldr	r2, [pc, #316]	; (8004ffc <HAL_GPIO_Init+0x320>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d019      	beq.n	8004ef6 <HAL_GPIO_Init+0x21a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a4e      	ldr	r2, [pc, #312]	; (8005000 <HAL_GPIO_Init+0x324>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <HAL_GPIO_Init+0x216>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a4d      	ldr	r2, [pc, #308]	; (8005004 <HAL_GPIO_Init+0x328>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00d      	beq.n	8004eee <HAL_GPIO_Init+0x212>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a4c      	ldr	r2, [pc, #304]	; (8005008 <HAL_GPIO_Init+0x32c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <HAL_GPIO_Init+0x20e>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a4b      	ldr	r2, [pc, #300]	; (800500c <HAL_GPIO_Init+0x330>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d101      	bne.n	8004ee6 <HAL_GPIO_Init+0x20a>
 8004ee2:	2307      	movs	r3, #7
 8004ee4:	e00e      	b.n	8004f04 <HAL_GPIO_Init+0x228>
 8004ee6:	2308      	movs	r3, #8
 8004ee8:	e00c      	b.n	8004f04 <HAL_GPIO_Init+0x228>
 8004eea:	2306      	movs	r3, #6
 8004eec:	e00a      	b.n	8004f04 <HAL_GPIO_Init+0x228>
 8004eee:	2305      	movs	r3, #5
 8004ef0:	e008      	b.n	8004f04 <HAL_GPIO_Init+0x228>
 8004ef2:	2304      	movs	r3, #4
 8004ef4:	e006      	b.n	8004f04 <HAL_GPIO_Init+0x228>
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e004      	b.n	8004f04 <HAL_GPIO_Init+0x228>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e002      	b.n	8004f04 <HAL_GPIO_Init+0x228>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <HAL_GPIO_Init+0x228>
 8004f02:	2300      	movs	r3, #0
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	f002 0203 	and.w	r2, r2, #3
 8004f0a:	0092      	lsls	r2, r2, #2
 8004f0c:	4093      	lsls	r3, r2
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f14:	4935      	ldr	r1, [pc, #212]	; (8004fec <HAL_GPIO_Init+0x310>)
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	089b      	lsrs	r3, r3, #2
 8004f1a:	3302      	adds	r3, #2
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f22:	4b3b      	ldr	r3, [pc, #236]	; (8005010 <HAL_GPIO_Init+0x334>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f46:	4a32      	ldr	r2, [pc, #200]	; (8005010 <HAL_GPIO_Init+0x334>)
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f4c:	4b30      	ldr	r3, [pc, #192]	; (8005010 <HAL_GPIO_Init+0x334>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	43db      	mvns	r3, r3
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f70:	4a27      	ldr	r2, [pc, #156]	; (8005010 <HAL_GPIO_Init+0x334>)
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f76:	4b26      	ldr	r3, [pc, #152]	; (8005010 <HAL_GPIO_Init+0x334>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	4013      	ands	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f9a:	4a1d      	ldr	r2, [pc, #116]	; (8005010 <HAL_GPIO_Init+0x334>)
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fa0:	4b1b      	ldr	r3, [pc, #108]	; (8005010 <HAL_GPIO_Init+0x334>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4013      	ands	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fc4:	4a12      	ldr	r2, [pc, #72]	; (8005010 <HAL_GPIO_Init+0x334>)
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	61fb      	str	r3, [r7, #28]
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	2b0f      	cmp	r3, #15
 8004fd4:	f67f ae90 	bls.w	8004cf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	3724      	adds	r7, #36	; 0x24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	40013800 	.word	0x40013800
 8004ff0:	40020000 	.word	0x40020000
 8004ff4:	40020400 	.word	0x40020400
 8004ff8:	40020800 	.word	0x40020800
 8004ffc:	40020c00 	.word	0x40020c00
 8005000:	40021000 	.word	0x40021000
 8005004:	40021400 	.word	0x40021400
 8005008:	40021800 	.word	0x40021800
 800500c:	40021c00 	.word	0x40021c00
 8005010:	40013c00 	.word	0x40013c00

08005014 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	887b      	ldrh	r3, [r7, #2]
 8005026:	4013      	ands	r3, r2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800502c:	2301      	movs	r3, #1
 800502e:	73fb      	strb	r3, [r7, #15]
 8005030:	e001      	b.n	8005036 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005032:	2300      	movs	r3, #0
 8005034:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005036:	7bfb      	ldrb	r3, [r7, #15]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	807b      	strh	r3, [r7, #2]
 8005050:	4613      	mov	r3, r2
 8005052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005054:	787b      	ldrb	r3, [r7, #1]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800505a:	887a      	ldrh	r2, [r7, #2]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005060:	e003      	b.n	800506a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005062:	887b      	ldrh	r3, [r7, #2]
 8005064:	041a      	lsls	r2, r3, #16
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	619a      	str	r2, [r3, #24]
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e12b      	b.n	80052e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fd f86c 	bl	800217c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2224      	movs	r2, #36	; 0x24
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0201 	bic.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050dc:	f000 fde8 	bl	8005cb0 <HAL_RCC_GetPCLK1Freq>
 80050e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	4a81      	ldr	r2, [pc, #516]	; (80052ec <HAL_I2C_Init+0x274>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d807      	bhi.n	80050fc <HAL_I2C_Init+0x84>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4a80      	ldr	r2, [pc, #512]	; (80052f0 <HAL_I2C_Init+0x278>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	bf94      	ite	ls
 80050f4:	2301      	movls	r3, #1
 80050f6:	2300      	movhi	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	e006      	b.n	800510a <HAL_I2C_Init+0x92>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4a7d      	ldr	r2, [pc, #500]	; (80052f4 <HAL_I2C_Init+0x27c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	bf94      	ite	ls
 8005104:	2301      	movls	r3, #1
 8005106:	2300      	movhi	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e0e7      	b.n	80052e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4a78      	ldr	r2, [pc, #480]	; (80052f8 <HAL_I2C_Init+0x280>)
 8005116:	fba2 2303 	umull	r2, r3, r2, r3
 800511a:	0c9b      	lsrs	r3, r3, #18
 800511c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4a6a      	ldr	r2, [pc, #424]	; (80052ec <HAL_I2C_Init+0x274>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d802      	bhi.n	800514c <HAL_I2C_Init+0xd4>
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	3301      	adds	r3, #1
 800514a:	e009      	b.n	8005160 <HAL_I2C_Init+0xe8>
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005152:	fb02 f303 	mul.w	r3, r2, r3
 8005156:	4a69      	ldr	r2, [pc, #420]	; (80052fc <HAL_I2C_Init+0x284>)
 8005158:	fba2 2303 	umull	r2, r3, r2, r3
 800515c:	099b      	lsrs	r3, r3, #6
 800515e:	3301      	adds	r3, #1
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	430b      	orrs	r3, r1
 8005166:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005172:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	495c      	ldr	r1, [pc, #368]	; (80052ec <HAL_I2C_Init+0x274>)
 800517c:	428b      	cmp	r3, r1
 800517e:	d819      	bhi.n	80051b4 <HAL_I2C_Init+0x13c>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	1e59      	subs	r1, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	fbb1 f3f3 	udiv	r3, r1, r3
 800518e:	1c59      	adds	r1, r3, #1
 8005190:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005194:	400b      	ands	r3, r1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <HAL_I2C_Init+0x138>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1e59      	subs	r1, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80051a8:	3301      	adds	r3, #1
 80051aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ae:	e051      	b.n	8005254 <HAL_I2C_Init+0x1dc>
 80051b0:	2304      	movs	r3, #4
 80051b2:	e04f      	b.n	8005254 <HAL_I2C_Init+0x1dc>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d111      	bne.n	80051e0 <HAL_I2C_Init+0x168>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	1e58      	subs	r0, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6859      	ldr	r1, [r3, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	440b      	add	r3, r1
 80051ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ce:	3301      	adds	r3, #1
 80051d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bf0c      	ite	eq
 80051d8:	2301      	moveq	r3, #1
 80051da:	2300      	movne	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	e012      	b.n	8005206 <HAL_I2C_Init+0x18e>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	1e58      	subs	r0, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6859      	ldr	r1, [r3, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	0099      	lsls	r1, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80051f6:	3301      	adds	r3, #1
 80051f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	bf0c      	ite	eq
 8005200:	2301      	moveq	r3, #1
 8005202:	2300      	movne	r3, #0
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_I2C_Init+0x196>
 800520a:	2301      	movs	r3, #1
 800520c:	e022      	b.n	8005254 <HAL_I2C_Init+0x1dc>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10e      	bne.n	8005234 <HAL_I2C_Init+0x1bc>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	1e58      	subs	r0, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6859      	ldr	r1, [r3, #4]
 800521e:	460b      	mov	r3, r1
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	440b      	add	r3, r1
 8005224:	fbb0 f3f3 	udiv	r3, r0, r3
 8005228:	3301      	adds	r3, #1
 800522a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800522e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005232:	e00f      	b.n	8005254 <HAL_I2C_Init+0x1dc>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	1e58      	subs	r0, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6859      	ldr	r1, [r3, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	0099      	lsls	r1, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	fbb0 f3f3 	udiv	r3, r0, r3
 800524a:	3301      	adds	r3, #1
 800524c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	6809      	ldr	r1, [r1, #0]
 8005258:	4313      	orrs	r3, r2
 800525a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69da      	ldr	r2, [r3, #28]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005282:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6911      	ldr	r1, [r2, #16]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	68d2      	ldr	r2, [r2, #12]
 800528e:	4311      	orrs	r1, r2
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6812      	ldr	r2, [r2, #0]
 8005294:	430b      	orrs	r3, r1
 8005296:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695a      	ldr	r2, [r3, #20]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	000186a0 	.word	0x000186a0
 80052f0:	001e847f 	.word	0x001e847f
 80052f4:	003d08ff 	.word	0x003d08ff
 80052f8:	431bde83 	.word	0x431bde83
 80052fc:	10624dd3 	.word	0x10624dd3

08005300 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e267      	b.n	80057e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d075      	beq.n	800540a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800531e:	4b88      	ldr	r3, [pc, #544]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 030c 	and.w	r3, r3, #12
 8005326:	2b04      	cmp	r3, #4
 8005328:	d00c      	beq.n	8005344 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800532a:	4b85      	ldr	r3, [pc, #532]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005332:	2b08      	cmp	r3, #8
 8005334:	d112      	bne.n	800535c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005336:	4b82      	ldr	r3, [pc, #520]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800533e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005342:	d10b      	bne.n	800535c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005344:	4b7e      	ldr	r3, [pc, #504]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d05b      	beq.n	8005408 <HAL_RCC_OscConfig+0x108>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d157      	bne.n	8005408 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e242      	b.n	80057e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005364:	d106      	bne.n	8005374 <HAL_RCC_OscConfig+0x74>
 8005366:	4b76      	ldr	r3, [pc, #472]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a75      	ldr	r2, [pc, #468]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 800536c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	e01d      	b.n	80053b0 <HAL_RCC_OscConfig+0xb0>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800537c:	d10c      	bne.n	8005398 <HAL_RCC_OscConfig+0x98>
 800537e:	4b70      	ldr	r3, [pc, #448]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a6f      	ldr	r2, [pc, #444]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 8005384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	4b6d      	ldr	r3, [pc, #436]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a6c      	ldr	r2, [pc, #432]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 8005390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	e00b      	b.n	80053b0 <HAL_RCC_OscConfig+0xb0>
 8005398:	4b69      	ldr	r3, [pc, #420]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a68      	ldr	r2, [pc, #416]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 800539e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	4b66      	ldr	r3, [pc, #408]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a65      	ldr	r2, [pc, #404]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 80053aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d013      	beq.n	80053e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b8:	f7fe feb6 	bl	8004128 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053c0:	f7fe feb2 	bl	8004128 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b64      	cmp	r3, #100	; 0x64
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e207      	b.n	80057e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053d2:	4b5b      	ldr	r3, [pc, #364]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0f0      	beq.n	80053c0 <HAL_RCC_OscConfig+0xc0>
 80053de:	e014      	b.n	800540a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e0:	f7fe fea2 	bl	8004128 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053e8:	f7fe fe9e 	bl	8004128 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b64      	cmp	r3, #100	; 0x64
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e1f3      	b.n	80057e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053fa:	4b51      	ldr	r3, [pc, #324]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f0      	bne.n	80053e8 <HAL_RCC_OscConfig+0xe8>
 8005406:	e000      	b.n	800540a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d063      	beq.n	80054de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005416:	4b4a      	ldr	r3, [pc, #296]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 030c 	and.w	r3, r3, #12
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00b      	beq.n	800543a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005422:	4b47      	ldr	r3, [pc, #284]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800542a:	2b08      	cmp	r3, #8
 800542c:	d11c      	bne.n	8005468 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800542e:	4b44      	ldr	r3, [pc, #272]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d116      	bne.n	8005468 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800543a:	4b41      	ldr	r3, [pc, #260]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d005      	beq.n	8005452 <HAL_RCC_OscConfig+0x152>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d001      	beq.n	8005452 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e1c7      	b.n	80057e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005452:	4b3b      	ldr	r3, [pc, #236]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	4937      	ldr	r1, [pc, #220]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 8005462:	4313      	orrs	r3, r2
 8005464:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005466:	e03a      	b.n	80054de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d020      	beq.n	80054b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005470:	4b34      	ldr	r3, [pc, #208]	; (8005544 <HAL_RCC_OscConfig+0x244>)
 8005472:	2201      	movs	r2, #1
 8005474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005476:	f7fe fe57 	bl	8004128 <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800547e:	f7fe fe53 	bl	8004128 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e1a8      	b.n	80057e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005490:	4b2b      	ldr	r3, [pc, #172]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0f0      	beq.n	800547e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800549c:	4b28      	ldr	r3, [pc, #160]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	4925      	ldr	r1, [pc, #148]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	600b      	str	r3, [r1, #0]
 80054b0:	e015      	b.n	80054de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054b2:	4b24      	ldr	r3, [pc, #144]	; (8005544 <HAL_RCC_OscConfig+0x244>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b8:	f7fe fe36 	bl	8004128 <HAL_GetTick>
 80054bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054be:	e008      	b.n	80054d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054c0:	f7fe fe32 	bl	8004128 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e187      	b.n	80057e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054d2:	4b1b      	ldr	r3, [pc, #108]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1f0      	bne.n	80054c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d036      	beq.n	8005558 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d016      	beq.n	8005520 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054f2:	4b15      	ldr	r3, [pc, #84]	; (8005548 <HAL_RCC_OscConfig+0x248>)
 80054f4:	2201      	movs	r2, #1
 80054f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f8:	f7fe fe16 	bl	8004128 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005500:	f7fe fe12 	bl	8004128 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e167      	b.n	80057e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005512:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <HAL_RCC_OscConfig+0x240>)
 8005514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0f0      	beq.n	8005500 <HAL_RCC_OscConfig+0x200>
 800551e:	e01b      	b.n	8005558 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005520:	4b09      	ldr	r3, [pc, #36]	; (8005548 <HAL_RCC_OscConfig+0x248>)
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005526:	f7fe fdff 	bl	8004128 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800552c:	e00e      	b.n	800554c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800552e:	f7fe fdfb 	bl	8004128 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d907      	bls.n	800554c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e150      	b.n	80057e2 <HAL_RCC_OscConfig+0x4e2>
 8005540:	40023800 	.word	0x40023800
 8005544:	42470000 	.word	0x42470000
 8005548:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800554c:	4b88      	ldr	r3, [pc, #544]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 800554e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1ea      	bne.n	800552e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 8097 	beq.w	8005694 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005566:	2300      	movs	r3, #0
 8005568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800556a:	4b81      	ldr	r3, [pc, #516]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10f      	bne.n	8005596 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005576:	2300      	movs	r3, #0
 8005578:	60bb      	str	r3, [r7, #8]
 800557a:	4b7d      	ldr	r3, [pc, #500]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	4a7c      	ldr	r2, [pc, #496]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 8005580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005584:	6413      	str	r3, [r2, #64]	; 0x40
 8005586:	4b7a      	ldr	r3, [pc, #488]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558e:	60bb      	str	r3, [r7, #8]
 8005590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005592:	2301      	movs	r3, #1
 8005594:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005596:	4b77      	ldr	r3, [pc, #476]	; (8005774 <HAL_RCC_OscConfig+0x474>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d118      	bne.n	80055d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055a2:	4b74      	ldr	r3, [pc, #464]	; (8005774 <HAL_RCC_OscConfig+0x474>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a73      	ldr	r2, [pc, #460]	; (8005774 <HAL_RCC_OscConfig+0x474>)
 80055a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ae:	f7fe fdbb 	bl	8004128 <HAL_GetTick>
 80055b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b4:	e008      	b.n	80055c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055b6:	f7fe fdb7 	bl	8004128 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e10c      	b.n	80057e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c8:	4b6a      	ldr	r3, [pc, #424]	; (8005774 <HAL_RCC_OscConfig+0x474>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0f0      	beq.n	80055b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d106      	bne.n	80055ea <HAL_RCC_OscConfig+0x2ea>
 80055dc:	4b64      	ldr	r3, [pc, #400]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e0:	4a63      	ldr	r2, [pc, #396]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 80055e2:	f043 0301 	orr.w	r3, r3, #1
 80055e6:	6713      	str	r3, [r2, #112]	; 0x70
 80055e8:	e01c      	b.n	8005624 <HAL_RCC_OscConfig+0x324>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	2b05      	cmp	r3, #5
 80055f0:	d10c      	bne.n	800560c <HAL_RCC_OscConfig+0x30c>
 80055f2:	4b5f      	ldr	r3, [pc, #380]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 80055f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f6:	4a5e      	ldr	r2, [pc, #376]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 80055f8:	f043 0304 	orr.w	r3, r3, #4
 80055fc:	6713      	str	r3, [r2, #112]	; 0x70
 80055fe:	4b5c      	ldr	r3, [pc, #368]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005602:	4a5b      	ldr	r2, [pc, #364]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 8005604:	f043 0301 	orr.w	r3, r3, #1
 8005608:	6713      	str	r3, [r2, #112]	; 0x70
 800560a:	e00b      	b.n	8005624 <HAL_RCC_OscConfig+0x324>
 800560c:	4b58      	ldr	r3, [pc, #352]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 800560e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005610:	4a57      	ldr	r2, [pc, #348]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 8005612:	f023 0301 	bic.w	r3, r3, #1
 8005616:	6713      	str	r3, [r2, #112]	; 0x70
 8005618:	4b55      	ldr	r3, [pc, #340]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 800561a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561c:	4a54      	ldr	r2, [pc, #336]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 800561e:	f023 0304 	bic.w	r3, r3, #4
 8005622:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d015      	beq.n	8005658 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562c:	f7fe fd7c 	bl	8004128 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005632:	e00a      	b.n	800564a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005634:	f7fe fd78 	bl	8004128 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005642:	4293      	cmp	r3, r2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e0cb      	b.n	80057e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800564a:	4b49      	ldr	r3, [pc, #292]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 800564c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0ee      	beq.n	8005634 <HAL_RCC_OscConfig+0x334>
 8005656:	e014      	b.n	8005682 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005658:	f7fe fd66 	bl	8004128 <HAL_GetTick>
 800565c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800565e:	e00a      	b.n	8005676 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005660:	f7fe fd62 	bl	8004128 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	f241 3288 	movw	r2, #5000	; 0x1388
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e0b5      	b.n	80057e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005676:	4b3e      	ldr	r3, [pc, #248]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 8005678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1ee      	bne.n	8005660 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005682:	7dfb      	ldrb	r3, [r7, #23]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d105      	bne.n	8005694 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005688:	4b39      	ldr	r3, [pc, #228]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	4a38      	ldr	r2, [pc, #224]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 800568e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005692:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80a1 	beq.w	80057e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800569e:	4b34      	ldr	r3, [pc, #208]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 030c 	and.w	r3, r3, #12
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	d05c      	beq.n	8005764 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d141      	bne.n	8005736 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b2:	4b31      	ldr	r3, [pc, #196]	; (8005778 <HAL_RCC_OscConfig+0x478>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b8:	f7fe fd36 	bl	8004128 <HAL_GetTick>
 80056bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056be:	e008      	b.n	80056d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056c0:	f7fe fd32 	bl	8004128 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e087      	b.n	80057e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056d2:	4b27      	ldr	r3, [pc, #156]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f0      	bne.n	80056c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	019b      	lsls	r3, r3, #6
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f4:	085b      	lsrs	r3, r3, #1
 80056f6:	3b01      	subs	r3, #1
 80056f8:	041b      	lsls	r3, r3, #16
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005700:	061b      	lsls	r3, r3, #24
 8005702:	491b      	ldr	r1, [pc, #108]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 8005704:	4313      	orrs	r3, r2
 8005706:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005708:	4b1b      	ldr	r3, [pc, #108]	; (8005778 <HAL_RCC_OscConfig+0x478>)
 800570a:	2201      	movs	r2, #1
 800570c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570e:	f7fe fd0b 	bl	8004128 <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005714:	e008      	b.n	8005728 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005716:	f7fe fd07 	bl	8004128 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e05c      	b.n	80057e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005728:	4b11      	ldr	r3, [pc, #68]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0f0      	beq.n	8005716 <HAL_RCC_OscConfig+0x416>
 8005734:	e054      	b.n	80057e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005736:	4b10      	ldr	r3, [pc, #64]	; (8005778 <HAL_RCC_OscConfig+0x478>)
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573c:	f7fe fcf4 	bl	8004128 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005744:	f7fe fcf0 	bl	8004128 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e045      	b.n	80057e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005756:	4b06      	ldr	r3, [pc, #24]	; (8005770 <HAL_RCC_OscConfig+0x470>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1f0      	bne.n	8005744 <HAL_RCC_OscConfig+0x444>
 8005762:	e03d      	b.n	80057e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d107      	bne.n	800577c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e038      	b.n	80057e2 <HAL_RCC_OscConfig+0x4e2>
 8005770:	40023800 	.word	0x40023800
 8005774:	40007000 	.word	0x40007000
 8005778:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800577c:	4b1b      	ldr	r3, [pc, #108]	; (80057ec <HAL_RCC_OscConfig+0x4ec>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d028      	beq.n	80057dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005794:	429a      	cmp	r2, r3
 8005796:	d121      	bne.n	80057dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d11a      	bne.n	80057dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057ac:	4013      	ands	r3, r2
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d111      	bne.n	80057dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c2:	085b      	lsrs	r3, r3, #1
 80057c4:	3b01      	subs	r3, #1
 80057c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d107      	bne.n	80057dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057d8:	429a      	cmp	r2, r3
 80057da:	d001      	beq.n	80057e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e000      	b.n	80057e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	40023800 	.word	0x40023800

080057f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e0cc      	b.n	800599e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005804:	4b68      	ldr	r3, [pc, #416]	; (80059a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d90c      	bls.n	800582c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005812:	4b65      	ldr	r3, [pc, #404]	; (80059a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800581a:	4b63      	ldr	r3, [pc, #396]	; (80059a8 <HAL_RCC_ClockConfig+0x1b8>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d001      	beq.n	800582c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e0b8      	b.n	800599e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d020      	beq.n	800587a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005844:	4b59      	ldr	r3, [pc, #356]	; (80059ac <HAL_RCC_ClockConfig+0x1bc>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	4a58      	ldr	r2, [pc, #352]	; (80059ac <HAL_RCC_ClockConfig+0x1bc>)
 800584a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800584e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b00      	cmp	r3, #0
 800585a:	d005      	beq.n	8005868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800585c:	4b53      	ldr	r3, [pc, #332]	; (80059ac <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	4a52      	ldr	r2, [pc, #328]	; (80059ac <HAL_RCC_ClockConfig+0x1bc>)
 8005862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005868:	4b50      	ldr	r3, [pc, #320]	; (80059ac <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	494d      	ldr	r1, [pc, #308]	; (80059ac <HAL_RCC_ClockConfig+0x1bc>)
 8005876:	4313      	orrs	r3, r2
 8005878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d044      	beq.n	8005910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d107      	bne.n	800589e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800588e:	4b47      	ldr	r3, [pc, #284]	; (80059ac <HAL_RCC_ClockConfig+0x1bc>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d119      	bne.n	80058ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e07f      	b.n	800599e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d003      	beq.n	80058ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d107      	bne.n	80058be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ae:	4b3f      	ldr	r3, [pc, #252]	; (80059ac <HAL_RCC_ClockConfig+0x1bc>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d109      	bne.n	80058ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e06f      	b.n	800599e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058be:	4b3b      	ldr	r3, [pc, #236]	; (80059ac <HAL_RCC_ClockConfig+0x1bc>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e067      	b.n	800599e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ce:	4b37      	ldr	r3, [pc, #220]	; (80059ac <HAL_RCC_ClockConfig+0x1bc>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f023 0203 	bic.w	r2, r3, #3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	4934      	ldr	r1, [pc, #208]	; (80059ac <HAL_RCC_ClockConfig+0x1bc>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058e0:	f7fe fc22 	bl	8004128 <HAL_GetTick>
 80058e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058e6:	e00a      	b.n	80058fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e8:	f7fe fc1e 	bl	8004128 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e04f      	b.n	800599e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058fe:	4b2b      	ldr	r3, [pc, #172]	; (80059ac <HAL_RCC_ClockConfig+0x1bc>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 020c 	and.w	r2, r3, #12
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	429a      	cmp	r2, r3
 800590e:	d1eb      	bne.n	80058e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005910:	4b25      	ldr	r3, [pc, #148]	; (80059a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d20c      	bcs.n	8005938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800591e:	4b22      	ldr	r3, [pc, #136]	; (80059a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	b2d2      	uxtb	r2, r2
 8005924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005926:	4b20      	ldr	r3, [pc, #128]	; (80059a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0307 	and.w	r3, r3, #7
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d001      	beq.n	8005938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e032      	b.n	800599e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	d008      	beq.n	8005956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005944:	4b19      	ldr	r3, [pc, #100]	; (80059ac <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	4916      	ldr	r1, [pc, #88]	; (80059ac <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	4313      	orrs	r3, r2
 8005954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d009      	beq.n	8005976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005962:	4b12      	ldr	r3, [pc, #72]	; (80059ac <HAL_RCC_ClockConfig+0x1bc>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	490e      	ldr	r1, [pc, #56]	; (80059ac <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	4313      	orrs	r3, r2
 8005974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005976:	f000 f889 	bl	8005a8c <HAL_RCC_GetSysClockFreq>
 800597a:	4602      	mov	r2, r0
 800597c:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <HAL_RCC_ClockConfig+0x1bc>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	091b      	lsrs	r3, r3, #4
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	490a      	ldr	r1, [pc, #40]	; (80059b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005988:	5ccb      	ldrb	r3, [r1, r3]
 800598a:	fa22 f303 	lsr.w	r3, r2, r3
 800598e:	4a09      	ldr	r2, [pc, #36]	; (80059b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005992:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	f7fc fea8 	bl	80026ec <HAL_InitTick>

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	40023c00 	.word	0x40023c00
 80059ac:	40023800 	.word	0x40023800
 80059b0:	08011de4 	.word	0x08011de4
 80059b4:	20000000 	.word	0x20000000
 80059b8:	2000006c 	.word	0x2000006c

080059bc <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08c      	sub	sp, #48	; 0x30
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d129      	bne.n	8005a22 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80059ce:	2300      	movs	r3, #0
 80059d0:	61bb      	str	r3, [r7, #24]
 80059d2:	4b2b      	ldr	r3, [pc, #172]	; (8005a80 <HAL_RCC_MCOConfig+0xc4>)
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	4a2a      	ldr	r2, [pc, #168]	; (8005a80 <HAL_RCC_MCOConfig+0xc4>)
 80059d8:	f043 0301 	orr.w	r3, r3, #1
 80059dc:	6313      	str	r3, [r2, #48]	; 0x30
 80059de:	4b28      	ldr	r3, [pc, #160]	; (8005a80 <HAL_RCC_MCOConfig+0xc4>)
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	61bb      	str	r3, [r7, #24]
 80059e8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80059ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f0:	2302      	movs	r3, #2
 80059f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059f4:	2303      	movs	r3, #3
 80059f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80059fc:	2300      	movs	r3, #0
 80059fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005a00:	f107 031c 	add.w	r3, r7, #28
 8005a04:	4619      	mov	r1, r3
 8005a06:	481f      	ldr	r0, [pc, #124]	; (8005a84 <HAL_RCC_MCOConfig+0xc8>)
 8005a08:	f7ff f968 	bl	8004cdc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005a0c:	4b1c      	ldr	r3, [pc, #112]	; (8005a80 <HAL_RCC_MCOConfig+0xc4>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	4919      	ldr	r1, [pc, #100]	; (8005a80 <HAL_RCC_MCOConfig+0xc4>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005a20:	e029      	b.n	8005a76 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8005a22:	2300      	movs	r3, #0
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	4b16      	ldr	r3, [pc, #88]	; (8005a80 <HAL_RCC_MCOConfig+0xc4>)
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	4a15      	ldr	r2, [pc, #84]	; (8005a80 <HAL_RCC_MCOConfig+0xc4>)
 8005a2c:	f043 0304 	orr.w	r3, r3, #4
 8005a30:	6313      	str	r3, [r2, #48]	; 0x30
 8005a32:	4b13      	ldr	r3, [pc, #76]	; (8005a80 <HAL_RCC_MCOConfig+0xc4>)
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005a3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a44:	2302      	movs	r3, #2
 8005a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005a50:	2300      	movs	r3, #0
 8005a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005a54:	f107 031c 	add.w	r3, r7, #28
 8005a58:	4619      	mov	r1, r3
 8005a5a:	480b      	ldr	r0, [pc, #44]	; (8005a88 <HAL_RCC_MCOConfig+0xcc>)
 8005a5c:	f7ff f93e 	bl	8004cdc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005a60:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <HAL_RCC_MCOConfig+0xc4>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	00d9      	lsls	r1, r3, #3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	430b      	orrs	r3, r1
 8005a70:	4903      	ldr	r1, [pc, #12]	; (8005a80 <HAL_RCC_MCOConfig+0xc4>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	608b      	str	r3, [r1, #8]
}
 8005a76:	bf00      	nop
 8005a78:	3730      	adds	r7, #48	; 0x30
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	40023800 	.word	0x40023800
 8005a84:	40020000 	.word	0x40020000
 8005a88:	40020800 	.word	0x40020800

08005a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a90:	b094      	sub	sp, #80	; 0x50
 8005a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	647b      	str	r3, [r7, #68]	; 0x44
 8005a98:	2300      	movs	r3, #0
 8005a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005aa4:	4b79      	ldr	r3, [pc, #484]	; (8005c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f003 030c 	and.w	r3, r3, #12
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d00d      	beq.n	8005acc <HAL_RCC_GetSysClockFreq+0x40>
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	f200 80e1 	bhi.w	8005c78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d003      	beq.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005abe:	e0db      	b.n	8005c78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ac0:	4b73      	ldr	r3, [pc, #460]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ac2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005ac4:	e0db      	b.n	8005c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ac6:	4b73      	ldr	r3, [pc, #460]	; (8005c94 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ac8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005aca:	e0d8      	b.n	8005c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005acc:	4b6f      	ldr	r3, [pc, #444]	; (8005c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ad4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ad6:	4b6d      	ldr	r3, [pc, #436]	; (8005c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d063      	beq.n	8005baa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ae2:	4b6a      	ldr	r3, [pc, #424]	; (8005c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	099b      	lsrs	r3, r3, #6
 8005ae8:	2200      	movs	r2, #0
 8005aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8005aec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af4:	633b      	str	r3, [r7, #48]	; 0x30
 8005af6:	2300      	movs	r3, #0
 8005af8:	637b      	str	r3, [r7, #52]	; 0x34
 8005afa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005afe:	4622      	mov	r2, r4
 8005b00:	462b      	mov	r3, r5
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f04f 0100 	mov.w	r1, #0
 8005b0a:	0159      	lsls	r1, r3, #5
 8005b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b10:	0150      	lsls	r0, r2, #5
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4621      	mov	r1, r4
 8005b18:	1a51      	subs	r1, r2, r1
 8005b1a:	6139      	str	r1, [r7, #16]
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	f04f 0300 	mov.w	r3, #0
 8005b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b30:	4659      	mov	r1, fp
 8005b32:	018b      	lsls	r3, r1, #6
 8005b34:	4651      	mov	r1, sl
 8005b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b3a:	4651      	mov	r1, sl
 8005b3c:	018a      	lsls	r2, r1, #6
 8005b3e:	4651      	mov	r1, sl
 8005b40:	ebb2 0801 	subs.w	r8, r2, r1
 8005b44:	4659      	mov	r1, fp
 8005b46:	eb63 0901 	sbc.w	r9, r3, r1
 8005b4a:	f04f 0200 	mov.w	r2, #0
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b5e:	4690      	mov	r8, r2
 8005b60:	4699      	mov	r9, r3
 8005b62:	4623      	mov	r3, r4
 8005b64:	eb18 0303 	adds.w	r3, r8, r3
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	462b      	mov	r3, r5
 8005b6c:	eb49 0303 	adc.w	r3, r9, r3
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	f04f 0300 	mov.w	r3, #0
 8005b7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b7e:	4629      	mov	r1, r5
 8005b80:	024b      	lsls	r3, r1, #9
 8005b82:	4621      	mov	r1, r4
 8005b84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b88:	4621      	mov	r1, r4
 8005b8a:	024a      	lsls	r2, r1, #9
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b92:	2200      	movs	r2, #0
 8005b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b9c:	f7fb f824 	bl	8000be8 <__aeabi_uldivmod>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ba8:	e058      	b.n	8005c5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005baa:	4b38      	ldr	r3, [pc, #224]	; (8005c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	099b      	lsrs	r3, r3, #6
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bba:	623b      	str	r3, [r7, #32]
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bc4:	4642      	mov	r2, r8
 8005bc6:	464b      	mov	r3, r9
 8005bc8:	f04f 0000 	mov.w	r0, #0
 8005bcc:	f04f 0100 	mov.w	r1, #0
 8005bd0:	0159      	lsls	r1, r3, #5
 8005bd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bd6:	0150      	lsls	r0, r2, #5
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4641      	mov	r1, r8
 8005bde:	ebb2 0a01 	subs.w	sl, r2, r1
 8005be2:	4649      	mov	r1, r9
 8005be4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005be8:	f04f 0200 	mov.w	r2, #0
 8005bec:	f04f 0300 	mov.w	r3, #0
 8005bf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bfc:	ebb2 040a 	subs.w	r4, r2, sl
 8005c00:	eb63 050b 	sbc.w	r5, r3, fp
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	00eb      	lsls	r3, r5, #3
 8005c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c12:	00e2      	lsls	r2, r4, #3
 8005c14:	4614      	mov	r4, r2
 8005c16:	461d      	mov	r5, r3
 8005c18:	4643      	mov	r3, r8
 8005c1a:	18e3      	adds	r3, r4, r3
 8005c1c:	603b      	str	r3, [r7, #0]
 8005c1e:	464b      	mov	r3, r9
 8005c20:	eb45 0303 	adc.w	r3, r5, r3
 8005c24:	607b      	str	r3, [r7, #4]
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c32:	4629      	mov	r1, r5
 8005c34:	028b      	lsls	r3, r1, #10
 8005c36:	4621      	mov	r1, r4
 8005c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	028a      	lsls	r2, r1, #10
 8005c40:	4610      	mov	r0, r2
 8005c42:	4619      	mov	r1, r3
 8005c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c46:	2200      	movs	r2, #0
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	61fa      	str	r2, [r7, #28]
 8005c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c50:	f7fa ffca 	bl	8000be8 <__aeabi_uldivmod>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4613      	mov	r3, r2
 8005c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c5c:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	0c1b      	lsrs	r3, r3, #16
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	3301      	adds	r3, #1
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c76:	e002      	b.n	8005c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c78:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3750      	adds	r7, #80	; 0x50
 8005c84:	46bd      	mov	sp, r7
 8005c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40023800 	.word	0x40023800
 8005c90:	00f42400 	.word	0x00f42400
 8005c94:	007a1200 	.word	0x007a1200

08005c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c9c:	4b03      	ldr	r3, [pc, #12]	; (8005cac <HAL_RCC_GetHCLKFreq+0x14>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	20000000 	.word	0x20000000

08005cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cb4:	f7ff fff0 	bl	8005c98 <HAL_RCC_GetHCLKFreq>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	0a9b      	lsrs	r3, r3, #10
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	4903      	ldr	r1, [pc, #12]	; (8005cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cc6:	5ccb      	ldrb	r3, [r1, r3]
 8005cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40023800 	.word	0x40023800
 8005cd4:	08011df4 	.word	0x08011df4

08005cd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	220f      	movs	r2, #15
 8005ce6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ce8:	4b12      	ldr	r3, [pc, #72]	; (8005d34 <HAL_RCC_GetClockConfig+0x5c>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f003 0203 	and.w	r2, r3, #3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005cf4:	4b0f      	ldr	r3, [pc, #60]	; (8005d34 <HAL_RCC_GetClockConfig+0x5c>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d00:	4b0c      	ldr	r3, [pc, #48]	; (8005d34 <HAL_RCC_GetClockConfig+0x5c>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d0c:	4b09      	ldr	r3, [pc, #36]	; (8005d34 <HAL_RCC_GetClockConfig+0x5c>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	08db      	lsrs	r3, r3, #3
 8005d12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d1a:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <HAL_RCC_GetClockConfig+0x60>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0207 	and.w	r2, r3, #7
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	601a      	str	r2, [r3, #0]
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40023800 	.word	0x40023800
 8005d38:	40023c00 	.word	0x40023c00

08005d3c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e022      	b.n	8005d94 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d105      	bne.n	8005d66 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7fc fb1f 	bl	80023a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2203      	movs	r2, #3
 8005d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f814 	bl	8005d9c <HAL_SD_InitCard>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e00a      	b.n	8005d94 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005d9c:	b5b0      	push	{r4, r5, r7, lr}
 8005d9e:	b08e      	sub	sp, #56	; 0x38
 8005da0:	af04      	add	r7, sp, #16
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005dac:	2300      	movs	r3, #0
 8005dae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005db0:	2300      	movs	r3, #0
 8005db2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005db4:	2300      	movs	r3, #0
 8005db6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005db8:	2376      	movs	r3, #118	; 0x76
 8005dba:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681d      	ldr	r5, [r3, #0]
 8005dc0:	466c      	mov	r4, sp
 8005dc2:	f107 0314 	add.w	r3, r7, #20
 8005dc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005dca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005dce:	f107 0308 	add.w	r3, r7, #8
 8005dd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	f002 fd79 	bl	80088cc <SDIO_Init>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e04f      	b.n	8005e8c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005dec:	4b29      	ldr	r3, [pc, #164]	; (8005e94 <HAL_SD_InitCard+0xf8>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f002 fdb1 	bl	800895e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005dfc:	4b25      	ldr	r3, [pc, #148]	; (8005e94 <HAL_SD_InitCard+0xf8>)
 8005dfe:	2201      	movs	r2, #1
 8005e00:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005e02:	2002      	movs	r0, #2
 8005e04:	f7fe f99c 	bl	8004140 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f001 f805 	bl	8006e18 <SD_PowerON>
 8005e0e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00b      	beq.n	8005e2e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	431a      	orrs	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e02e      	b.n	8005e8c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 ff24 	bl	8006c7c <SD_InitCard>
 8005e34:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00b      	beq.n	8005e54 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e01b      	b.n	8005e8c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f002 fe10 	bl	8008a82 <SDMMC_CmdBlockLength>
 8005e62:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00f      	beq.n	8005e8a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a0a      	ldr	r2, [pc, #40]	; (8005e98 <HAL_SD_InitCard+0xfc>)
 8005e70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3728      	adds	r7, #40	; 0x28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bdb0      	pop	{r4, r5, r7, pc}
 8005e94:	422580a0 	.word	0x422580a0
 8005e98:	004005ff 	.word	0x004005ff

08005e9c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08c      	sub	sp, #48	; 0x30
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d107      	bne.n	8005ec4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e0c0      	b.n	8006046 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	f040 80b9 	bne.w	8006044 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	441a      	add	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d907      	bls.n	8005ef6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e0a7      	b.n	8006046 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2203      	movs	r2, #3
 8005efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2200      	movs	r2, #0
 8005f04:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	6812      	ldr	r2, [r2, #0]
 8005f10:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8005f14:	f043 0302 	orr.w	r3, r3, #2
 8005f18:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	4a4c      	ldr	r2, [pc, #304]	; (8006050 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8005f20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	4a4b      	ldr	r2, [pc, #300]	; (8006054 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005f28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	2200      	movs	r2, #0
 8005f30:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	2200      	movs	r2, #0
 8005f38:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3380      	adds	r3, #128	; 0x80
 8005f60:	4619      	mov	r1, r3
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	025b      	lsls	r3, r3, #9
 8005f68:	089b      	lsrs	r3, r3, #2
 8005f6a:	f7fe fbc7 	bl	80046fc <HAL_DMA_Start_IT>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d017      	beq.n	8005fa4 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005f82:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a33      	ldr	r2, [pc, #204]	; (8006058 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005f8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e050      	b.n	8006046 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005fa4:	4b2d      	ldr	r3, [pc, #180]	; (800605c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d002      	beq.n	8005fb8 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	025b      	lsls	r3, r3, #9
 8005fb6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fbc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	025b      	lsls	r3, r3, #9
 8005fc2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005fc4:	2390      	movs	r3, #144	; 0x90
 8005fc6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f107 0210 	add.w	r2, r7, #16
 8005fdc:	4611      	mov	r1, r2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f002 fd23 	bl	8008a2a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d90a      	bls.n	8006000 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2282      	movs	r2, #130	; 0x82
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f002 fd87 	bl	8008b0a <SDMMC_CmdReadMultiBlock>
 8005ffc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005ffe:	e009      	b.n	8006014 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2281      	movs	r2, #129	; 0x81
 8006004:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800600c:	4618      	mov	r0, r3
 800600e:	f002 fd5a 	bl	8008ac6 <SDMMC_CmdReadSingleBlock>
 8006012:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	2b00      	cmp	r3, #0
 8006018:	d012      	beq.n	8006040 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a0e      	ldr	r2, [pc, #56]	; (8006058 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006020:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006028:	431a      	orrs	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e002      	b.n	8006046 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	e000      	b.n	8006046 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8006044:	2302      	movs	r3, #2
  }
}
 8006046:	4618      	mov	r0, r3
 8006048:	3730      	adds	r7, #48	; 0x30
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	08006a8b 	.word	0x08006a8b
 8006054:	08006afd 	.word	0x08006afd
 8006058:	004005ff 	.word	0x004005ff
 800605c:	4225858c 	.word	0x4225858c

08006060 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b08c      	sub	sp, #48	; 0x30
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d107      	bne.n	8006088 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e0c5      	b.n	8006214 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b01      	cmp	r3, #1
 8006092:	f040 80be 	bne.w	8006212 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800609c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	441a      	add	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d907      	bls.n	80060ba <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e0ac      	b.n	8006214 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2203      	movs	r2, #3
 80060be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2200      	movs	r2, #0
 80060c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	6812      	ldr	r2, [r2, #0]
 80060d4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80060d8:	f043 0302 	orr.w	r3, r3, #2
 80060dc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e2:	4a4e      	ldr	r2, [pc, #312]	; (800621c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80060e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ea:	4a4d      	ldr	r2, [pc, #308]	; (8006220 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80060ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f2:	2200      	movs	r2, #0
 80060f4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d002      	beq.n	8006104 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80060fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006100:	025b      	lsls	r3, r3, #9
 8006102:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d90a      	bls.n	8006120 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	22a0      	movs	r2, #160	; 0xa0
 800610e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006116:	4618      	mov	r0, r3
 8006118:	f002 fd3b 	bl	8008b92 <SDMMC_CmdWriteMultiBlock>
 800611c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800611e:	e009      	b.n	8006134 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2290      	movs	r2, #144	; 0x90
 8006124:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800612c:	4618      	mov	r0, r3
 800612e:	f002 fd0e 	bl	8008b4e <SDMMC_CmdWriteSingleBlock>
 8006132:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d012      	beq.n	8006160 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a39      	ldr	r2, [pc, #228]	; (8006224 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006140:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006148:	431a      	orrs	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e059      	b.n	8006214 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006160:	4b31      	ldr	r3, [pc, #196]	; (8006228 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006162:	2201      	movs	r2, #1
 8006164:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616a:	2240      	movs	r2, #64	; 0x40
 800616c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3380      	adds	r3, #128	; 0x80
 8006196:	461a      	mov	r2, r3
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	025b      	lsls	r3, r3, #9
 800619c:	089b      	lsrs	r3, r3, #2
 800619e:	f7fe faad 	bl	80046fc <HAL_DMA_Start_IT>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01c      	beq.n	80061e2 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80061b6:	f023 0302 	bic.w	r3, r3, #2
 80061ba:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a18      	ldr	r2, [pc, #96]	; (8006224 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80061c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e018      	b.n	8006214 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80061e2:	f04f 33ff 	mov.w	r3, #4294967295
 80061e6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	025b      	lsls	r3, r3, #9
 80061ec:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80061ee:	2390      	movs	r3, #144	; 0x90
 80061f0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80061f2:	2300      	movs	r3, #0
 80061f4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80061fa:	2301      	movs	r3, #1
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f107 0210 	add.w	r2, r7, #16
 8006206:	4611      	mov	r1, r2
 8006208:	4618      	mov	r0, r3
 800620a:	f002 fc0e 	bl	8008a2a <SDIO_ConfigData>

      return HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	e000      	b.n	8006214 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8006212:	2302      	movs	r3, #2
  }
}
 8006214:	4618      	mov	r0, r3
 8006216:	3730      	adds	r7, #48	; 0x30
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	08006a61 	.word	0x08006a61
 8006220:	08006afd 	.word	0x08006afd
 8006224:	004005ff 	.word	0x004005ff
 8006228:	4225858c 	.word	0x4225858c

0800622c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006238:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d008      	beq.n	800625a <HAL_SD_IRQHandler+0x2e>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f003 0308 	and.w	r3, r3, #8
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 ffff 	bl	8007256 <SD_Read_IT>
 8006258:	e165      	b.n	8006526 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 808f 	beq.w	8006388 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006272:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8006282:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006286:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d039      	beq.n	8006316 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d104      	bne.n	80062b6 <HAL_SD_IRQHandler+0x8a>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f003 0320 	and.w	r3, r3, #32
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d011      	beq.n	80062da <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f002 fc8c 	bl	8008bd8 <SDMMC_CmdStopTransfer>
 80062c0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d008      	beq.n	80062da <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f92f 	bl	8006538 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f240 523a 	movw	r2, #1338	; 0x53a
 80062e2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <HAL_SD_IRQHandler+0xda>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f003 f8fa 	bl	8009500 <HAL_SD_RxCpltCallback>
 800630c:	e10b      	b.n	8006526 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f003 f8ec 	bl	80094ec <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006314:	e107      	b.n	8006526 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 8102 	beq.w	8006526 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b00      	cmp	r3, #0
 800632a:	d011      	beq.n	8006350 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4618      	mov	r0, r3
 8006332:	f002 fc51 	bl	8008bd8 <SDMMC_CmdStopTransfer>
 8006336:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d008      	beq.n	8006350 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	431a      	orrs	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f8f4 	bl	8006538 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	f040 80e5 	bne.w	8006526 <HAL_SD_IRQHandler+0x2fa>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	f040 80df 	bne.w	8006526 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0208 	bic.w	r2, r2, #8
 8006376:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f003 f8b3 	bl	80094ec <HAL_SD_TxCpltCallback>
}
 8006386:	e0ce      	b.n	8006526 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d008      	beq.n	80063a8 <HAL_SD_IRQHandler+0x17c>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f003 0308 	and.w	r3, r3, #8
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 ffa9 	bl	80072f8 <SD_Write_IT>
 80063a6:	e0be      	b.n	8006526 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ae:	f240 233a 	movw	r3, #570	; 0x23a
 80063b2:	4013      	ands	r3, r2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 80b6 	beq.w	8006526 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	f043 0202 	orr.w	r2, r3, #2
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d005      	beq.n	80063ee <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e6:	f043 0208 	orr.w	r2, r3, #8
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d005      	beq.n	8006408 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	f043 0220 	orr.w	r2, r3, #32
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640e:	f003 0310 	and.w	r3, r3, #16
 8006412:	2b00      	cmp	r3, #0
 8006414:	d005      	beq.n	8006422 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641a:	f043 0210 	orr.w	r2, r3, #16
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	f043 0208 	orr.w	r2, r3, #8
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f240 723a 	movw	r2, #1850	; 0x73a
 8006444:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6812      	ldr	r2, [r2, #0]
 8006450:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006454:	f023 0302 	bic.w	r3, r3, #2
 8006458:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4618      	mov	r0, r3
 8006460:	f002 fbba 	bl	8008bd8 <SDMMC_CmdStopTransfer>
 8006464:	4602      	mov	r2, r0
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	431a      	orrs	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f003 0308 	and.w	r3, r3, #8
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f855 	bl	8006538 <HAL_SD_ErrorCallback>
}
 800648e:	e04a      	b.n	8006526 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006496:	2b00      	cmp	r3, #0
 8006498:	d045      	beq.n	8006526 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f003 0310 	and.w	r3, r3, #16
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d104      	bne.n	80064ae <HAL_SD_IRQHandler+0x282>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f003 0320 	and.w	r3, r3, #32
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d011      	beq.n	80064d2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b2:	4a1f      	ldr	r2, [pc, #124]	; (8006530 <HAL_SD_IRQHandler+0x304>)
 80064b4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fe f976 	bl	80047ac <HAL_DMA_Abort_IT>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d02f      	beq.n	8006526 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fb68 	bl	8006ba0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80064d0:	e029      	b.n	8006526 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d104      	bne.n	80064e6 <HAL_SD_IRQHandler+0x2ba>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d011      	beq.n	800650a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	4a12      	ldr	r2, [pc, #72]	; (8006534 <HAL_SD_IRQHandler+0x308>)
 80064ec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe f95a 	bl	80047ac <HAL_DMA_Abort_IT>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d013      	beq.n	8006526 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fb83 	bl	8006c0e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006508:	e00d      	b.n	8006526 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f002 ffda 	bl	80094d8 <HAL_SD_AbortCallback>
}
 8006524:	e7ff      	b.n	8006526 <HAL_SD_IRQHandler+0x2fa>
 8006526:	bf00      	nop
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	08006ba1 	.word	0x08006ba1
 8006534:	08006c0f 	.word	0x08006c0f

08006538 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800655a:	0f9b      	lsrs	r3, r3, #30
 800655c:	b2da      	uxtb	r2, r3
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006566:	0e9b      	lsrs	r3, r3, #26
 8006568:	b2db      	uxtb	r3, r3
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	b2da      	uxtb	r2, r3
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006578:	0e1b      	lsrs	r3, r3, #24
 800657a:	b2db      	uxtb	r3, r3
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	b2da      	uxtb	r2, r3
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800658a:	0c1b      	lsrs	r3, r3, #16
 800658c:	b2da      	uxtb	r2, r3
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006596:	0a1b      	lsrs	r3, r3, #8
 8006598:	b2da      	uxtb	r2, r3
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065ac:	0d1b      	lsrs	r3, r3, #20
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065b8:	0c1b      	lsrs	r3, r3, #16
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065ca:	0bdb      	lsrs	r3, r3, #15
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065dc:	0b9b      	lsrs	r3, r3, #14
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065ee:	0b5b      	lsrs	r3, r3, #13
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006600:	0b1b      	lsrs	r3, r3, #12
 8006602:	b2db      	uxtb	r3, r3
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	b2da      	uxtb	r2, r3
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2200      	movs	r2, #0
 8006612:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006618:	2b00      	cmp	r3, #0
 800661a:	d163      	bne.n	80066e4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006620:	009a      	lsls	r2, r3, #2
 8006622:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006626:	4013      	ands	r3, r2
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800662c:	0f92      	lsrs	r2, r2, #30
 800662e:	431a      	orrs	r2, r3
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006638:	0edb      	lsrs	r3, r3, #27
 800663a:	b2db      	uxtb	r3, r3
 800663c:	f003 0307 	and.w	r3, r3, #7
 8006640:	b2da      	uxtb	r2, r3
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800664a:	0e1b      	lsrs	r3, r3, #24
 800664c:	b2db      	uxtb	r3, r3
 800664e:	f003 0307 	and.w	r3, r3, #7
 8006652:	b2da      	uxtb	r2, r3
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800665c:	0d5b      	lsrs	r3, r3, #21
 800665e:	b2db      	uxtb	r3, r3
 8006660:	f003 0307 	and.w	r3, r3, #7
 8006664:	b2da      	uxtb	r2, r3
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800666e:	0c9b      	lsrs	r3, r3, #18
 8006670:	b2db      	uxtb	r3, r3
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	b2da      	uxtb	r2, r3
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006680:	0bdb      	lsrs	r3, r3, #15
 8006682:	b2db      	uxtb	r3, r3
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	b2da      	uxtb	r2, r3
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	7e1b      	ldrb	r3, [r3, #24]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	3302      	adds	r3, #2
 80066a4:	2201      	movs	r2, #1
 80066a6:	fa02 f303 	lsl.w	r3, r2, r3
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80066ae:	fb03 f202 	mul.w	r2, r3, r2
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	7a1b      	ldrb	r3, [r3, #8]
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	f003 030f 	and.w	r3, r3, #15
 80066c0:	2201      	movs	r2, #1
 80066c2:	409a      	lsls	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80066d0:	0a52      	lsrs	r2, r2, #9
 80066d2:	fb03 f202 	mul.w	r2, r3, r2
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066e0:	661a      	str	r2, [r3, #96]	; 0x60
 80066e2:	e031      	b.n	8006748 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d11d      	bne.n	8006728 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066f0:	041b      	lsls	r3, r3, #16
 80066f2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066fa:	0c1b      	lsrs	r3, r3, #16
 80066fc:	431a      	orrs	r2, r3
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	3301      	adds	r3, #1
 8006708:	029a      	lsls	r2, r3, #10
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800671c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	661a      	str	r2, [r3, #96]	; 0x60
 8006726:	e00f      	b.n	8006748 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a58      	ldr	r2, [pc, #352]	; (8006890 <HAL_SD_GetCardCSD+0x344>)
 800672e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006734:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e09d      	b.n	8006884 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800674c:	0b9b      	lsrs	r3, r3, #14
 800674e:	b2db      	uxtb	r3, r3
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	b2da      	uxtb	r2, r3
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800675e:	09db      	lsrs	r3, r3, #7
 8006760:	b2db      	uxtb	r3, r3
 8006762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006766:	b2da      	uxtb	r2, r3
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006770:	b2db      	uxtb	r3, r3
 8006772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006776:	b2da      	uxtb	r2, r3
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006780:	0fdb      	lsrs	r3, r3, #31
 8006782:	b2da      	uxtb	r2, r3
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678c:	0f5b      	lsrs	r3, r3, #29
 800678e:	b2db      	uxtb	r3, r3
 8006790:	f003 0303 	and.w	r3, r3, #3
 8006794:	b2da      	uxtb	r2, r3
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679e:	0e9b      	lsrs	r3, r3, #26
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b0:	0d9b      	lsrs	r3, r3, #22
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f003 030f 	and.w	r3, r3, #15
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c2:	0d5b      	lsrs	r3, r3, #21
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067de:	0c1b      	lsrs	r3, r3, #16
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f2:	0bdb      	lsrs	r3, r3, #15
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006806:	0b9b      	lsrs	r3, r3, #14
 8006808:	b2db      	uxtb	r3, r3
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	b2da      	uxtb	r2, r3
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681a:	0b5b      	lsrs	r3, r3, #13
 800681c:	b2db      	uxtb	r3, r3
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	b2da      	uxtb	r2, r3
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682e:	0b1b      	lsrs	r3, r3, #12
 8006830:	b2db      	uxtb	r3, r3
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	b2da      	uxtb	r2, r3
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006842:	0a9b      	lsrs	r3, r3, #10
 8006844:	b2db      	uxtb	r3, r3
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	b2da      	uxtb	r2, r3
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006856:	0a1b      	lsrs	r3, r3, #8
 8006858:	b2db      	uxtb	r3, r3
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	b2da      	uxtb	r2, r3
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	b2db      	uxtb	r3, r3
 800686e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006872:	b2da      	uxtb	r2, r3
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	004005ff 	.word	0x004005ff

08006894 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80068ec:	b5b0      	push	{r4, r5, r7, lr}
 80068ee:	b08e      	sub	sp, #56	; 0x38
 80068f0:	af04      	add	r7, sp, #16
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2203      	movs	r2, #3
 8006900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006908:	2b03      	cmp	r3, #3
 800690a:	d02e      	beq.n	800696a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006912:	d106      	bne.n	8006922 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	639a      	str	r2, [r3, #56]	; 0x38
 8006920:	e029      	b.n	8006976 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006928:	d10a      	bne.n	8006940 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fb2a 	bl	8006f84 <SD_WideBus_Enable>
 8006930:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	431a      	orrs	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	639a      	str	r2, [r3, #56]	; 0x38
 800693e:	e01a      	b.n	8006976 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10a      	bne.n	800695c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fb67 	bl	800701a <SD_WideBus_Disable>
 800694c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	639a      	str	r2, [r3, #56]	; 0x38
 800695a:	e00c      	b.n	8006976 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006960:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	639a      	str	r2, [r3, #56]	; 0x38
 8006968:	e005      	b.n	8006976 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00b      	beq.n	8006996 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a26      	ldr	r2, [pc, #152]	; (8006a1c <HAL_SD_ConfigWideBusOperation+0x130>)
 8006984:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006994:	e01f      	b.n	80069d6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681d      	ldr	r5, [r3, #0]
 80069bc:	466c      	mov	r4, sp
 80069be:	f107 0314 	add.w	r3, r7, #20
 80069c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80069c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80069ca:	f107 0308 	add.w	r3, r7, #8
 80069ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069d0:	4628      	mov	r0, r5
 80069d2:	f001 ff7b 	bl	80088cc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069de:	4618      	mov	r0, r3
 80069e0:	f002 f84f 	bl	8008a82 <SDMMC_CmdBlockLength>
 80069e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00c      	beq.n	8006a06 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a0a      	ldr	r2, [pc, #40]	; (8006a1c <HAL_SD_ConfigWideBusOperation+0x130>)
 80069f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	431a      	orrs	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3728      	adds	r7, #40	; 0x28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bdb0      	pop	{r4, r5, r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	004005ff 	.word	0x004005ff

08006a20 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006a2c:	f107 030c 	add.w	r3, r7, #12
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fa7e 	bl	8006f34 <SD_SendStatus>
 8006a38:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d005      	beq.n	8006a4c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	431a      	orrs	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	0a5b      	lsrs	r3, r3, #9
 8006a50:	f003 030f 	and.w	r3, r3, #15
 8006a54:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006a56:	693b      	ldr	r3, [r7, #16]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a7c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006a7e:	bf00      	nop
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a96:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9c:	2b82      	cmp	r3, #130	; 0x82
 8006a9e:	d111      	bne.n	8006ac4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f002 f897 	bl	8008bd8 <SDMMC_CmdStopTransfer>
 8006aaa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d008      	beq.n	8006ac4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f7ff fd3a 	bl	8006538 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0208 	bic.w	r2, r2, #8
 8006ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f240 523a 	movw	r2, #1338	; 0x53a
 8006adc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f002 fd07 	bl	8009500 <HAL_SD_RxCpltCallback>
#endif
}
 8006af2:	bf00      	nop
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
	...

08006afc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b08:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7fd fffa 	bl	8004b04 <HAL_DMA_GetError>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d03e      	beq.n	8006b94 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b24:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d002      	beq.n	8006b32 <SD_DMAError+0x36>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d12d      	bne.n	8006b8e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a19      	ldr	r2, [pc, #100]	; (8006b9c <SD_DMAError+0xa0>)
 8006b38:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006b48:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006b56:	6978      	ldr	r0, [r7, #20]
 8006b58:	f7ff ff62 	bl	8006a20 <HAL_SD_GetCardState>
 8006b5c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b06      	cmp	r3, #6
 8006b62:	d002      	beq.n	8006b6a <SD_DMAError+0x6e>
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2b05      	cmp	r3, #5
 8006b68:	d10a      	bne.n	8006b80 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f002 f832 	bl	8008bd8 <SDMMC_CmdStopTransfer>
 8006b74:	4602      	mov	r2, r0
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006b8e:	6978      	ldr	r0, [r7, #20]
 8006b90:	f7ff fcd2 	bl	8006538 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006b94:	bf00      	nop
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	004005ff 	.word	0x004005ff

08006ba0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f240 523a 	movw	r2, #1338	; 0x53a
 8006bb6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f7ff ff31 	bl	8006a20 <HAL_SD_GetCardState>
 8006bbe:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b06      	cmp	r3, #6
 8006bd2:	d002      	beq.n	8006bda <SD_DMATxAbort+0x3a>
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b05      	cmp	r3, #5
 8006bd8:	d10a      	bne.n	8006bf0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f001 fffa 	bl	8008bd8 <SDMMC_CmdStopTransfer>
 8006be4:	4602      	mov	r2, r0
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	431a      	orrs	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d103      	bne.n	8006c00 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f002 fc6d 	bl	80094d8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006bfe:	e002      	b.n	8006c06 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f7ff fc99 	bl	8006538 <HAL_SD_ErrorCallback>
}
 8006c06:	bf00      	nop
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f240 523a 	movw	r2, #1338	; 0x53a
 8006c24:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7ff fefa 	bl	8006a20 <HAL_SD_GetCardState>
 8006c2c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2b06      	cmp	r3, #6
 8006c40:	d002      	beq.n	8006c48 <SD_DMARxAbort+0x3a>
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2b05      	cmp	r3, #5
 8006c46:	d10a      	bne.n	8006c5e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f001 ffc3 	bl	8008bd8 <SDMMC_CmdStopTransfer>
 8006c52:	4602      	mov	r2, r0
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d103      	bne.n	8006c6e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f002 fc36 	bl	80094d8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006c6c:	e002      	b.n	8006c74 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f7ff fc62 	bl	8006538 <HAL_SD_ErrorCallback>
}
 8006c74:	bf00      	nop
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006c7c:	b5b0      	push	{r4, r5, r7, lr}
 8006c7e:	b094      	sub	sp, #80	; 0x50
 8006c80:	af04      	add	r7, sp, #16
 8006c82:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006c84:	2301      	movs	r3, #1
 8006c86:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f001 fe74 	bl	800897a <SDIO_GetPowerState>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d102      	bne.n	8006c9e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c98:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006c9c:	e0b8      	b.n	8006e10 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d02f      	beq.n	8006d06 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f002 f89e 	bl	8008dec <SDMMC_CmdSendCID>
 8006cb0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <SD_InitCard+0x40>
    {
      return errorstate;
 8006cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cba:	e0a9      	b.n	8006e10 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f001 fe9e 	bl	8008a04 <SDIO_GetResponse>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2104      	movs	r1, #4
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f001 fe95 	bl	8008a04 <SDIO_GetResponse>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2108      	movs	r1, #8
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 fe8c 	bl	8008a04 <SDIO_GetResponse>
 8006cec:	4602      	mov	r2, r0
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	210c      	movs	r1, #12
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f001 fe83 	bl	8008a04 <SDIO_GetResponse>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	d00d      	beq.n	8006d2a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f107 020e 	add.w	r2, r7, #14
 8006d16:	4611      	mov	r1, r2
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f002 f8a4 	bl	8008e66 <SDMMC_CmdSetRelAdd>
 8006d1e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <SD_InitCard+0xae>
    {
      return errorstate;
 8006d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d28:	e072      	b.n	8006e10 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d036      	beq.n	8006da0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006d32:	89fb      	ldrh	r3, [r7, #14]
 8006d34:	461a      	mov	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d42:	041b      	lsls	r3, r3, #16
 8006d44:	4619      	mov	r1, r3
 8006d46:	4610      	mov	r0, r2
 8006d48:	f002 f86e 	bl	8008e28 <SDMMC_CmdSendCSD>
 8006d4c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d56:	e05b      	b.n	8006e10 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f001 fe50 	bl	8008a04 <SDIO_GetResponse>
 8006d64:	4602      	mov	r2, r0
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2104      	movs	r1, #4
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 fe47 	bl	8008a04 <SDIO_GetResponse>
 8006d76:	4602      	mov	r2, r0
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2108      	movs	r1, #8
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 fe3e 	bl	8008a04 <SDIO_GetResponse>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	210c      	movs	r1, #12
 8006d94:	4618      	mov	r0, r3
 8006d96:	f001 fe35 	bl	8008a04 <SDIO_GetResponse>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2104      	movs	r1, #4
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 fe2c 	bl	8008a04 <SDIO_GetResponse>
 8006dac:	4603      	mov	r3, r0
 8006dae:	0d1a      	lsrs	r2, r3, #20
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006db4:	f107 0310 	add.w	r3, r7, #16
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7ff fbc6 	bl	800654c <HAL_SD_GetCardCSD>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006dc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006dca:	e021      	b.n	8006e10 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6819      	ldr	r1, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd4:	041b      	lsls	r3, r3, #16
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	461c      	mov	r4, r3
 8006dda:	4615      	mov	r5, r2
 8006ddc:	4622      	mov	r2, r4
 8006dde:	462b      	mov	r3, r5
 8006de0:	4608      	mov	r0, r1
 8006de2:	f001 ff1b 	bl	8008c1c <SDMMC_CmdSelDesel>
 8006de6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <SD_InitCard+0x176>
  {
    return errorstate;
 8006dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df0:	e00e      	b.n	8006e10 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681d      	ldr	r5, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	466c      	mov	r4, sp
 8006dfa:	f103 0210 	add.w	r2, r3, #16
 8006dfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e04:	3304      	adds	r3, #4
 8006e06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e08:	4628      	mov	r0, r5
 8006e0a:	f001 fd5f 	bl	80088cc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3740      	adds	r7, #64	; 0x40
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bdb0      	pop	{r4, r5, r7, pc}

08006e18 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	2300      	movs	r3, #0
 8006e2a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f001 ff16 	bl	8008c62 <SDMMC_CmdGoIdleState>
 8006e36:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	e072      	b.n	8006f28 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f001 ff29 	bl	8008c9e <SDMMC_CmdOperCond>
 8006e4c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00d      	beq.n	8006e70 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f001 feff 	bl	8008c62 <SDMMC_CmdGoIdleState>
 8006e64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d004      	beq.n	8006e76 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	e05b      	b.n	8006f28 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d137      	bne.n	8006eee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2100      	movs	r1, #0
 8006e84:	4618      	mov	r0, r3
 8006e86:	f001 ff29 	bl	8008cdc <SDMMC_CmdAppCommand>
 8006e8a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d02d      	beq.n	8006eee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e96:	e047      	b.n	8006f28 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f001 ff1c 	bl	8008cdc <SDMMC_CmdAppCommand>
 8006ea4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <SD_PowerON+0x98>
    {
      return errorstate;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	e03b      	b.n	8006f28 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	491e      	ldr	r1, [pc, #120]	; (8006f30 <SD_PowerON+0x118>)
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f001 ff32 	bl	8008d20 <SDMMC_CmdAppOperCommand>
 8006ebc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ec8:	e02e      	b.n	8006f28 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f001 fd97 	bl	8008a04 <SDIO_GetResponse>
 8006ed6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	0fdb      	lsrs	r3, r3, #31
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <SD_PowerON+0xcc>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e000      	b.n	8006ee6 <SD_PowerON+0xce>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	613b      	str	r3, [r7, #16]

    count++;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	3301      	adds	r3, #1
 8006eec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d802      	bhi.n	8006efe <SD_PowerON+0xe6>
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0cc      	beq.n	8006e98 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d902      	bls.n	8006f0e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f0c:	e00c      	b.n	8006f28 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	645a      	str	r2, [r3, #68]	; 0x44
 8006f1e:	e002      	b.n	8006f26 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	c1100000 	.word	0xc1100000

08006f34 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d102      	bne.n	8006f4a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006f44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f48:	e018      	b.n	8006f7c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f52:	041b      	lsls	r3, r3, #16
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f001 ffa6 	bl	8008ea8 <SDMMC_CmdSendStatus>
 8006f5c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	e009      	b.n	8006f7c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f001 fd48 	bl	8008a04 <SDIO_GetResponse>
 8006f74:	4602      	mov	r2, r0
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	2300      	movs	r3, #0
 8006f92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2100      	movs	r1, #0
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f001 fd32 	bl	8008a04 <SDIO_GetResponse>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006faa:	d102      	bne.n	8006fb2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006fac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fb0:	e02f      	b.n	8007012 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006fb2:	f107 030c 	add.w	r3, r7, #12
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f879 	bl	80070b0 <SD_FindSCR>
 8006fbe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	e023      	b.n	8007012 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d01c      	beq.n	800700e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fdc:	041b      	lsls	r3, r3, #16
 8006fde:	4619      	mov	r1, r3
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	f001 fe7b 	bl	8008cdc <SDMMC_CmdAppCommand>
 8006fe6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	e00f      	b.n	8007012 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2102      	movs	r1, #2
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f001 feb4 	bl	8008d66 <SDMMC_CmdBusWidth>
 8006ffe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	e003      	b.n	8007012 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800700a:	2300      	movs	r3, #0
 800700c:	e001      	b.n	8007012 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800700e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007012:	4618      	mov	r0, r3
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b086      	sub	sp, #24
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007022:	2300      	movs	r3, #0
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	2300      	movs	r3, #0
 8007028:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2100      	movs	r1, #0
 8007030:	4618      	mov	r0, r3
 8007032:	f001 fce7 	bl	8008a04 <SDIO_GetResponse>
 8007036:	4603      	mov	r3, r0
 8007038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800703c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007040:	d102      	bne.n	8007048 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007042:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007046:	e02f      	b.n	80070a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007048:	f107 030c 	add.w	r3, r7, #12
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f82e 	bl	80070b0 <SD_FindSCR>
 8007054:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	e023      	b.n	80070a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d01c      	beq.n	80070a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007072:	041b      	lsls	r3, r3, #16
 8007074:	4619      	mov	r1, r3
 8007076:	4610      	mov	r0, r2
 8007078:	f001 fe30 	bl	8008cdc <SDMMC_CmdAppCommand>
 800707c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	e00f      	b.n	80070a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2100      	movs	r1, #0
 800708e:	4618      	mov	r0, r3
 8007090:	f001 fe69 	bl	8008d66 <SDMMC_CmdBusWidth>
 8007094:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d001      	beq.n	80070a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	e003      	b.n	80070a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80070a0:	2300      	movs	r3, #0
 80070a2:	e001      	b.n	80070a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80070a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80070b0:	b590      	push	{r4, r7, lr}
 80070b2:	b08f      	sub	sp, #60	; 0x3c
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80070ba:	f7fd f835 	bl	8004128 <HAL_GetTick>
 80070be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80070c4:	2300      	movs	r3, #0
 80070c6:	60bb      	str	r3, [r7, #8]
 80070c8:	2300      	movs	r3, #0
 80070ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2108      	movs	r1, #8
 80070d6:	4618      	mov	r0, r3
 80070d8:	f001 fcd3 	bl	8008a82 <SDMMC_CmdBlockLength>
 80070dc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80070de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80070e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e6:	e0b2      	b.n	800724e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f0:	041b      	lsls	r3, r3, #16
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f001 fdf1 	bl	8008cdc <SDMMC_CmdAppCommand>
 80070fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	e0a3      	b.n	800724e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007106:	f04f 33ff 	mov.w	r3, #4294967295
 800710a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800710c:	2308      	movs	r3, #8
 800710e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007110:	2330      	movs	r3, #48	; 0x30
 8007112:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007114:	2302      	movs	r3, #2
 8007116:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007118:	2300      	movs	r3, #0
 800711a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800711c:	2301      	movs	r3, #1
 800711e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f107 0210 	add.w	r2, r7, #16
 8007128:	4611      	mov	r1, r2
 800712a:	4618      	mov	r0, r3
 800712c:	f001 fc7d 	bl	8008a2a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4618      	mov	r0, r3
 8007136:	f001 fe38 	bl	8008daa <SDMMC_CmdSendSCR>
 800713a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	2b00      	cmp	r3, #0
 8007140:	d02a      	beq.n	8007198 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007144:	e083      	b.n	800724e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00f      	beq.n	8007174 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6819      	ldr	r1, [r3, #0]
 8007158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	f107 0208 	add.w	r2, r7, #8
 8007160:	18d4      	adds	r4, r2, r3
 8007162:	4608      	mov	r0, r1
 8007164:	f001 fbdd 	bl	8008922 <SDIO_ReadFIFO>
 8007168:	4603      	mov	r3, r0
 800716a:	6023      	str	r3, [r4, #0]
      index++;
 800716c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716e:	3301      	adds	r3, #1
 8007170:	637b      	str	r3, [r7, #52]	; 0x34
 8007172:	e006      	b.n	8007182 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d012      	beq.n	80071a8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007182:	f7fc ffd1 	bl	8004128 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007190:	d102      	bne.n	8007198 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007192:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007196:	e05a      	b.n	800724e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0cf      	beq.n	8007146 <SD_FindSCR+0x96>
 80071a6:	e000      	b.n	80071aa <SD_FindSCR+0xfa>
      break;
 80071a8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b0:	f003 0308 	and.w	r3, r3, #8
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d005      	beq.n	80071c4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2208      	movs	r2, #8
 80071be:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80071c0:	2308      	movs	r3, #8
 80071c2:	e044      	b.n	800724e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2202      	movs	r2, #2
 80071d8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80071da:	2302      	movs	r3, #2
 80071dc:	e037      	b.n	800724e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e4:	f003 0320 	and.w	r3, r3, #32
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d005      	beq.n	80071f8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2220      	movs	r2, #32
 80071f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80071f4:	2320      	movs	r3, #32
 80071f6:	e02a      	b.n	800724e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f240 523a 	movw	r2, #1338	; 0x53a
 8007200:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	061a      	lsls	r2, r3, #24
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	021b      	lsls	r3, r3, #8
 800720a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800720e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	0a1b      	lsrs	r3, r3, #8
 8007214:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007218:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	0e1b      	lsrs	r3, r3, #24
 800721e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007222:	601a      	str	r2, [r3, #0]
    scr++;
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	3304      	adds	r3, #4
 8007228:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	061a      	lsls	r2, r3, #24
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	021b      	lsls	r3, r3, #8
 8007232:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007236:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	0a1b      	lsrs	r3, r3, #8
 800723c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007240:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	0e1b      	lsrs	r3, r3, #24
 8007246:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	373c      	adds	r7, #60	; 0x3c
 8007252:	46bd      	mov	sp, r7
 8007254:	bd90      	pop	{r4, r7, pc}

08007256 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b086      	sub	sp, #24
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007268:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d03f      	beq.n	80072f0 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007270:	2300      	movs	r3, #0
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	e033      	b.n	80072de <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4618      	mov	r0, r3
 800727c:	f001 fb51 	bl	8008922 <SDIO_ReadFIFO>
 8007280:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	b2da      	uxtb	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	701a      	strb	r2, [r3, #0]
      tmp++;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	3301      	adds	r3, #1
 800728e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	3b01      	subs	r3, #1
 8007294:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	0a1b      	lsrs	r3, r3, #8
 800729a:	b2da      	uxtb	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	701a      	strb	r2, [r3, #0]
      tmp++;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3301      	adds	r3, #1
 80072a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	3b01      	subs	r3, #1
 80072aa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	0c1b      	lsrs	r3, r3, #16
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3301      	adds	r3, #1
 80072ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	3b01      	subs	r3, #1
 80072c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	0e1b      	lsrs	r3, r3, #24
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	3301      	adds	r3, #1
 80072d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	3b01      	subs	r3, #1
 80072d6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	3301      	adds	r3, #1
 80072dc:	617b      	str	r3, [r7, #20]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2b07      	cmp	r3, #7
 80072e2:	d9c8      	bls.n	8007276 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80072f0:	bf00      	nop
 80072f2:	3718      	adds	r7, #24
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d043      	beq.n	800739a <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007312:	2300      	movs	r3, #0
 8007314:	617b      	str	r3, [r7, #20]
 8007316:	e037      	b.n	8007388 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3301      	adds	r3, #1
 8007322:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	3b01      	subs	r3, #1
 8007328:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	021a      	lsls	r2, r3, #8
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	4313      	orrs	r3, r2
 8007334:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	3301      	adds	r3, #1
 800733a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	3b01      	subs	r3, #1
 8007340:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	041a      	lsls	r2, r3, #16
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	4313      	orrs	r3, r2
 800734c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3301      	adds	r3, #1
 8007352:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	3b01      	subs	r3, #1
 8007358:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	061a      	lsls	r2, r3, #24
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	4313      	orrs	r3, r2
 8007364:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	3301      	adds	r3, #1
 800736a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	3b01      	subs	r3, #1
 8007370:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f107 0208 	add.w	r2, r7, #8
 800737a:	4611      	mov	r1, r2
 800737c:	4618      	mov	r0, r3
 800737e:	f001 fadd 	bl	800893c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	3301      	adds	r3, #1
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	2b07      	cmp	r3, #7
 800738c:	d9c4      	bls.n	8007318 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800739a:	bf00      	nop
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b082      	sub	sp, #8
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e07b      	b.n	80074ac <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d108      	bne.n	80073ce <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073c4:	d009      	beq.n	80073da <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	61da      	str	r2, [r3, #28]
 80073cc:	e005      	b.n	80073da <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d106      	bne.n	80073fa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7fb f8fd 	bl	80025f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2202      	movs	r2, #2
 80073fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007410:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800742c:	431a      	orrs	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	f003 0302 	and.w	r3, r3, #2
 8007436:	431a      	orrs	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	431a      	orrs	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800744a:	431a      	orrs	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007454:	431a      	orrs	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800745e:	ea42 0103 	orr.w	r1, r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007466:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	0c1b      	lsrs	r3, r3, #16
 8007478:	f003 0104 	and.w	r1, r3, #4
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	f003 0210 	and.w	r2, r3, #16
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	430a      	orrs	r2, r1
 800748a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	69da      	ldr	r2, [r3, #28]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800749a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b088      	sub	sp, #32
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	603b      	str	r3, [r7, #0]
 80074c0:	4613      	mov	r3, r2
 80074c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d101      	bne.n	80074d6 <HAL_SPI_Transmit+0x22>
 80074d2:	2302      	movs	r3, #2
 80074d4:	e126      	b.n	8007724 <HAL_SPI_Transmit+0x270>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074de:	f7fc fe23 	bl	8004128 <HAL_GetTick>
 80074e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80074e4:	88fb      	ldrh	r3, [r7, #6]
 80074e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d002      	beq.n	80074fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80074f4:	2302      	movs	r3, #2
 80074f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074f8:	e10b      	b.n	8007712 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <HAL_SPI_Transmit+0x52>
 8007500:	88fb      	ldrh	r3, [r7, #6]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d102      	bne.n	800750c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	77fb      	strb	r3, [r7, #31]
    goto error;
 800750a:	e102      	b.n	8007712 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2203      	movs	r2, #3
 8007510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	88fa      	ldrh	r2, [r7, #6]
 8007524:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	88fa      	ldrh	r2, [r7, #6]
 800752a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007552:	d10f      	bne.n	8007574 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007562:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007572:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757e:	2b40      	cmp	r3, #64	; 0x40
 8007580:	d007      	beq.n	8007592 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007590:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800759a:	d14b      	bne.n	8007634 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d002      	beq.n	80075aa <HAL_SPI_Transmit+0xf6>
 80075a4:	8afb      	ldrh	r3, [r7, #22]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d13e      	bne.n	8007628 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ae:	881a      	ldrh	r2, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ba:	1c9a      	adds	r2, r3, #2
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075ce:	e02b      	b.n	8007628 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d112      	bne.n	8007604 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e2:	881a      	ldrh	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ee:	1c9a      	adds	r2, r3, #2
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	3b01      	subs	r3, #1
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	86da      	strh	r2, [r3, #54]	; 0x36
 8007602:	e011      	b.n	8007628 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007604:	f7fc fd90 	bl	8004128 <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	429a      	cmp	r2, r3
 8007612:	d803      	bhi.n	800761c <HAL_SPI_Transmit+0x168>
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761a:	d102      	bne.n	8007622 <HAL_SPI_Transmit+0x16e>
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d102      	bne.n	8007628 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007626:	e074      	b.n	8007712 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800762c:	b29b      	uxth	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1ce      	bne.n	80075d0 <HAL_SPI_Transmit+0x11c>
 8007632:	e04c      	b.n	80076ce <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <HAL_SPI_Transmit+0x18e>
 800763c:	8afb      	ldrh	r3, [r7, #22]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d140      	bne.n	80076c4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	330c      	adds	r3, #12
 800764c:	7812      	ldrb	r2, [r2, #0]
 800764e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007654:	1c5a      	adds	r2, r3, #1
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800765e:	b29b      	uxth	r3, r3
 8007660:	3b01      	subs	r3, #1
 8007662:	b29a      	uxth	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007668:	e02c      	b.n	80076c4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b02      	cmp	r3, #2
 8007676:	d113      	bne.n	80076a0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	330c      	adds	r3, #12
 8007682:	7812      	ldrb	r2, [r2, #0]
 8007684:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007694:	b29b      	uxth	r3, r3
 8007696:	3b01      	subs	r3, #1
 8007698:	b29a      	uxth	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	86da      	strh	r2, [r3, #54]	; 0x36
 800769e:	e011      	b.n	80076c4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076a0:	f7fc fd42 	bl	8004128 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d803      	bhi.n	80076b8 <HAL_SPI_Transmit+0x204>
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b6:	d102      	bne.n	80076be <HAL_SPI_Transmit+0x20a>
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d102      	bne.n	80076c4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076c2:	e026      	b.n	8007712 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1cd      	bne.n	800766a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f000 fcea 	bl	80080ac <SPI_EndRxTxTransaction>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2220      	movs	r2, #32
 80076e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10a      	bne.n	8007702 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076ec:	2300      	movs	r3, #0
 80076ee:	613b      	str	r3, [r7, #16]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	613b      	str	r3, [r7, #16]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	613b      	str	r3, [r7, #16]
 8007700:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	77fb      	strb	r3, [r7, #31]
 800770e:	e000      	b.n	8007712 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007710:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007722:	7ffb      	ldrb	r3, [r7, #31]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3720      	adds	r7, #32
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b088      	sub	sp, #32
 8007730:	af02      	add	r7, sp, #8
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	4613      	mov	r3, r2
 800773a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007748:	d112      	bne.n	8007770 <HAL_SPI_Receive+0x44>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10e      	bne.n	8007770 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2204      	movs	r2, #4
 8007756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800775a:	88fa      	ldrh	r2, [r7, #6]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	4613      	mov	r3, r2
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	68b9      	ldr	r1, [r7, #8]
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 f8f1 	bl	800794e <HAL_SPI_TransmitReceive>
 800776c:	4603      	mov	r3, r0
 800776e:	e0ea      	b.n	8007946 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007776:	2b01      	cmp	r3, #1
 8007778:	d101      	bne.n	800777e <HAL_SPI_Receive+0x52>
 800777a:	2302      	movs	r3, #2
 800777c:	e0e3      	b.n	8007946 <HAL_SPI_Receive+0x21a>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007786:	f7fc fccf 	bl	8004128 <HAL_GetTick>
 800778a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b01      	cmp	r3, #1
 8007796:	d002      	beq.n	800779e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007798:	2302      	movs	r3, #2
 800779a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800779c:	e0ca      	b.n	8007934 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <HAL_SPI_Receive+0x7e>
 80077a4:	88fb      	ldrh	r3, [r7, #6]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077ae:	e0c1      	b.n	8007934 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2204      	movs	r2, #4
 80077b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	88fa      	ldrh	r2, [r7, #6]
 80077c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	88fa      	ldrh	r2, [r7, #6]
 80077ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077f6:	d10f      	bne.n	8007818 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007806:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007816:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007822:	2b40      	cmp	r3, #64	; 0x40
 8007824:	d007      	beq.n	8007836 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007834:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d162      	bne.n	8007904 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800783e:	e02e      	b.n	800789e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b01      	cmp	r3, #1
 800784c:	d115      	bne.n	800787a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f103 020c 	add.w	r2, r3, #12
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785a:	7812      	ldrb	r2, [r2, #0]
 800785c:	b2d2      	uxtb	r2, r2
 800785e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800786e:	b29b      	uxth	r3, r3
 8007870:	3b01      	subs	r3, #1
 8007872:	b29a      	uxth	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007878:	e011      	b.n	800789e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800787a:	f7fc fc55 	bl	8004128 <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	429a      	cmp	r2, r3
 8007888:	d803      	bhi.n	8007892 <HAL_SPI_Receive+0x166>
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007890:	d102      	bne.n	8007898 <HAL_SPI_Receive+0x16c>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d102      	bne.n	800789e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800789c:	e04a      	b.n	8007934 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1cb      	bne.n	8007840 <HAL_SPI_Receive+0x114>
 80078a8:	e031      	b.n	800790e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d113      	bne.n	80078e0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c2:	b292      	uxth	r2, r2
 80078c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ca:	1c9a      	adds	r2, r3, #2
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	3b01      	subs	r3, #1
 80078d8:	b29a      	uxth	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078de:	e011      	b.n	8007904 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078e0:	f7fc fc22 	bl	8004128 <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d803      	bhi.n	80078f8 <HAL_SPI_Receive+0x1cc>
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f6:	d102      	bne.n	80078fe <HAL_SPI_Receive+0x1d2>
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d102      	bne.n	8007904 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007902:	e017      	b.n	8007934 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007908:	b29b      	uxth	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1cd      	bne.n	80078aa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 fb64 	bl	8007fe0 <SPI_EndRxTransaction>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2220      	movs	r2, #32
 8007922:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	75fb      	strb	r3, [r7, #23]
 8007930:	e000      	b.n	8007934 <HAL_SPI_Receive+0x208>
  }

error :
 8007932:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007944:	7dfb      	ldrb	r3, [r7, #23]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b08c      	sub	sp, #48	; 0x30
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	607a      	str	r2, [r7, #4]
 800795a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800795c:	2301      	movs	r3, #1
 800795e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800796c:	2b01      	cmp	r3, #1
 800796e:	d101      	bne.n	8007974 <HAL_SPI_TransmitReceive+0x26>
 8007970:	2302      	movs	r3, #2
 8007972:	e18a      	b.n	8007c8a <HAL_SPI_TransmitReceive+0x33c>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800797c:	f7fc fbd4 	bl	8004128 <HAL_GetTick>
 8007980:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007992:	887b      	ldrh	r3, [r7, #2]
 8007994:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007996:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800799a:	2b01      	cmp	r3, #1
 800799c:	d00f      	beq.n	80079be <HAL_SPI_TransmitReceive+0x70>
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079a4:	d107      	bne.n	80079b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d103      	bne.n	80079b6 <HAL_SPI_TransmitReceive+0x68>
 80079ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079b2:	2b04      	cmp	r3, #4
 80079b4:	d003      	beq.n	80079be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80079b6:	2302      	movs	r3, #2
 80079b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80079bc:	e15b      	b.n	8007c76 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d005      	beq.n	80079d0 <HAL_SPI_TransmitReceive+0x82>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <HAL_SPI_TransmitReceive+0x82>
 80079ca:	887b      	ldrh	r3, [r7, #2]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d103      	bne.n	80079d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80079d6:	e14e      	b.n	8007c76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	d003      	beq.n	80079ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2205      	movs	r2, #5
 80079e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	887a      	ldrh	r2, [r7, #2]
 80079fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	887a      	ldrh	r2, [r7, #2]
 8007a02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	887a      	ldrh	r2, [r7, #2]
 8007a0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	887a      	ldrh	r2, [r7, #2]
 8007a14:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2c:	2b40      	cmp	r3, #64	; 0x40
 8007a2e:	d007      	beq.n	8007a40 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a48:	d178      	bne.n	8007b3c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <HAL_SPI_TransmitReceive+0x10a>
 8007a52:	8b7b      	ldrh	r3, [r7, #26]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d166      	bne.n	8007b26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5c:	881a      	ldrh	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a68:	1c9a      	adds	r2, r3, #2
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	3b01      	subs	r3, #1
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a7c:	e053      	b.n	8007b26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d11b      	bne.n	8007ac4 <HAL_SPI_TransmitReceive+0x176>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d016      	beq.n	8007ac4 <HAL_SPI_TransmitReceive+0x176>
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d113      	bne.n	8007ac4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa0:	881a      	ldrh	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aac:	1c9a      	adds	r2, r3, #2
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d119      	bne.n	8007b06 <HAL_SPI_TransmitReceive+0x1b8>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d014      	beq.n	8007b06 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae6:	b292      	uxth	r2, r2
 8007ae8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aee:	1c9a      	adds	r2, r3, #2
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	3b01      	subs	r3, #1
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b02:	2301      	movs	r3, #1
 8007b04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b06:	f7fc fb0f 	bl	8004128 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d807      	bhi.n	8007b26 <HAL_SPI_TransmitReceive+0x1d8>
 8007b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1c:	d003      	beq.n	8007b26 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b24:	e0a7      	b.n	8007c76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1a6      	bne.n	8007a7e <HAL_SPI_TransmitReceive+0x130>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1a1      	bne.n	8007a7e <HAL_SPI_TransmitReceive+0x130>
 8007b3a:	e07c      	b.n	8007c36 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <HAL_SPI_TransmitReceive+0x1fc>
 8007b44:	8b7b      	ldrh	r3, [r7, #26]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d16b      	bne.n	8007c22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	330c      	adds	r3, #12
 8007b54:	7812      	ldrb	r2, [r2, #0]
 8007b56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b70:	e057      	b.n	8007c22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f003 0302 	and.w	r3, r3, #2
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d11c      	bne.n	8007bba <HAL_SPI_TransmitReceive+0x26c>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d017      	beq.n	8007bba <HAL_SPI_TransmitReceive+0x26c>
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d114      	bne.n	8007bba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	330c      	adds	r3, #12
 8007b9a:	7812      	ldrb	r2, [r2, #0]
 8007b9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba2:	1c5a      	adds	r2, r3, #1
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d119      	bne.n	8007bfc <HAL_SPI_TransmitReceive+0x2ae>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d014      	beq.n	8007bfc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68da      	ldr	r2, [r3, #12]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bdc:	b2d2      	uxtb	r2, r2
 8007bde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007bfc:	f7fc fa94 	bl	8004128 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d803      	bhi.n	8007c14 <HAL_SPI_TransmitReceive+0x2c6>
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c12:	d102      	bne.n	8007c1a <HAL_SPI_TransmitReceive+0x2cc>
 8007c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d103      	bne.n	8007c22 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c20:	e029      	b.n	8007c76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1a2      	bne.n	8007b72 <HAL_SPI_TransmitReceive+0x224>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d19d      	bne.n	8007b72 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 fa36 	bl	80080ac <SPI_EndRxTxTransaction>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d006      	beq.n	8007c54 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007c52:	e010      	b.n	8007c76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10b      	bne.n	8007c74 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	617b      	str	r3, [r7, #20]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	617b      	str	r3, [r7, #20]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	617b      	str	r3, [r7, #20]
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	e000      	b.n	8007c76 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007c74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3730      	adds	r7, #48	; 0x30
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
	...

08007c94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b088      	sub	sp, #32
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	099b      	lsrs	r3, r3, #6
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10f      	bne.n	8007cd8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	099b      	lsrs	r3, r3, #6
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d004      	beq.n	8007cd8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	4798      	blx	r3
    return;
 8007cd6:	e0d7      	b.n	8007e88 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	085b      	lsrs	r3, r3, #1
 8007cdc:	f003 0301 	and.w	r3, r3, #1
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00a      	beq.n	8007cfa <HAL_SPI_IRQHandler+0x66>
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	09db      	lsrs	r3, r3, #7
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d004      	beq.n	8007cfa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	4798      	blx	r3
    return;
 8007cf8:	e0c6      	b.n	8007e88 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	095b      	lsrs	r3, r3, #5
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10c      	bne.n	8007d20 <HAL_SPI_IRQHandler+0x8c>
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	099b      	lsrs	r3, r3, #6
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d106      	bne.n	8007d20 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	0a1b      	lsrs	r3, r3, #8
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 80b4 	beq.w	8007e88 <HAL_SPI_IRQHandler+0x1f4>
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	095b      	lsrs	r3, r3, #5
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 80ad 	beq.w	8007e88 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	099b      	lsrs	r3, r3, #6
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d023      	beq.n	8007d82 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d011      	beq.n	8007d6a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4a:	f043 0204 	orr.w	r2, r3, #4
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d52:	2300      	movs	r3, #0
 8007d54:	617b      	str	r3, [r7, #20]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	617b      	str	r3, [r7, #20]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	617b      	str	r3, [r7, #20]
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	e00b      	b.n	8007d82 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	613b      	str	r3, [r7, #16]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	613b      	str	r3, [r7, #16]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	613b      	str	r3, [r7, #16]
 8007d7e:	693b      	ldr	r3, [r7, #16]
        return;
 8007d80:	e082      	b.n	8007e88 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	095b      	lsrs	r3, r3, #5
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d014      	beq.n	8007db8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d92:	f043 0201 	orr.w	r2, r3, #1
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60fb      	str	r3, [r7, #12]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	60fb      	str	r3, [r7, #12]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	0a1b      	lsrs	r3, r3, #8
 8007dbc:	f003 0301 	and.w	r3, r3, #1
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00c      	beq.n	8007dde <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc8:	f043 0208 	orr.w	r2, r3, #8
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	60bb      	str	r3, [r7, #8]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	60bb      	str	r3, [r7, #8]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d04f      	beq.n	8007e86 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007df4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	f003 0302 	and.w	r3, r3, #2
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d104      	bne.n	8007e12 <HAL_SPI_IRQHandler+0x17e>
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d034      	beq.n	8007e7c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 0203 	bic.w	r2, r2, #3
 8007e20:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d011      	beq.n	8007e4e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e2e:	4a18      	ldr	r2, [pc, #96]	; (8007e90 <HAL_SPI_IRQHandler+0x1fc>)
 8007e30:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fc fcb8 	bl	80047ac <HAL_DMA_Abort_IT>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d005      	beq.n	8007e4e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d016      	beq.n	8007e84 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e5a:	4a0d      	ldr	r2, [pc, #52]	; (8007e90 <HAL_SPI_IRQHandler+0x1fc>)
 8007e5c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fc fca2 	bl	80047ac <HAL_DMA_Abort_IT>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00a      	beq.n	8007e84 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007e7a:	e003      	b.n	8007e84 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f809 	bl	8007e94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007e82:	e000      	b.n	8007e86 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007e84:	bf00      	nop
    return;
 8007e86:	bf00      	nop
  }
}
 8007e88:	3720      	adds	r7, #32
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	08007ea9 	.word	0x08007ea9

08007e94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f7ff ffe6 	bl	8007e94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ec8:	bf00      	nop
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b088      	sub	sp, #32
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	4613      	mov	r3, r2
 8007ede:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ee0:	f7fc f922 	bl	8004128 <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee8:	1a9b      	subs	r3, r3, r2
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	4413      	add	r3, r2
 8007eee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ef0:	f7fc f91a 	bl	8004128 <HAL_GetTick>
 8007ef4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ef6:	4b39      	ldr	r3, [pc, #228]	; (8007fdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	015b      	lsls	r3, r3, #5
 8007efc:	0d1b      	lsrs	r3, r3, #20
 8007efe:	69fa      	ldr	r2, [r7, #28]
 8007f00:	fb02 f303 	mul.w	r3, r2, r3
 8007f04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f06:	e054      	b.n	8007fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0e:	d050      	beq.n	8007fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f10:	f7fc f90a 	bl	8004128 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	69fa      	ldr	r2, [r7, #28]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d902      	bls.n	8007f26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d13d      	bne.n	8007fa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f3e:	d111      	bne.n	8007f64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f48:	d004      	beq.n	8007f54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f52:	d107      	bne.n	8007f64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f6c:	d10f      	bne.n	8007f8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e017      	b.n	8007fd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	689a      	ldr	r2, [r3, #8]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	bf0c      	ite	eq
 8007fc2:	2301      	moveq	r3, #1
 8007fc4:	2300      	movne	r3, #0
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	461a      	mov	r2, r3
 8007fca:	79fb      	ldrb	r3, [r7, #7]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d19b      	bne.n	8007f08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3720      	adds	r7, #32
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	20000000 	.word	0x20000000

08007fe0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ff4:	d111      	bne.n	800801a <SPI_EndRxTransaction+0x3a>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ffe:	d004      	beq.n	800800a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008008:	d107      	bne.n	800801a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008018:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008022:	d12a      	bne.n	800807a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800802c:	d012      	beq.n	8008054 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2200      	movs	r2, #0
 8008036:	2180      	movs	r1, #128	; 0x80
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f7ff ff49 	bl	8007ed0 <SPI_WaitFlagStateUntilTimeout>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d02d      	beq.n	80080a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008048:	f043 0220 	orr.w	r2, r3, #32
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e026      	b.n	80080a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2200      	movs	r2, #0
 800805c:	2101      	movs	r1, #1
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f7ff ff36 	bl	8007ed0 <SPI_WaitFlagStateUntilTimeout>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d01a      	beq.n	80080a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800806e:	f043 0220 	orr.w	r2, r3, #32
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e013      	b.n	80080a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	2200      	movs	r2, #0
 8008082:	2101      	movs	r1, #1
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f7ff ff23 	bl	8007ed0 <SPI_WaitFlagStateUntilTimeout>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d007      	beq.n	80080a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008094:	f043 0220 	orr.w	r2, r3, #32
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e000      	b.n	80080a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
	...

080080ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80080b8:	4b1b      	ldr	r3, [pc, #108]	; (8008128 <SPI_EndRxTxTransaction+0x7c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a1b      	ldr	r2, [pc, #108]	; (800812c <SPI_EndRxTxTransaction+0x80>)
 80080be:	fba2 2303 	umull	r2, r3, r2, r3
 80080c2:	0d5b      	lsrs	r3, r3, #21
 80080c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080c8:	fb02 f303 	mul.w	r3, r2, r3
 80080cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080d6:	d112      	bne.n	80080fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2200      	movs	r2, #0
 80080e0:	2180      	movs	r1, #128	; 0x80
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f7ff fef4 	bl	8007ed0 <SPI_WaitFlagStateUntilTimeout>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d016      	beq.n	800811c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f2:	f043 0220 	orr.w	r2, r3, #32
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e00f      	b.n	800811e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00a      	beq.n	800811a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	3b01      	subs	r3, #1
 8008108:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008114:	2b80      	cmp	r3, #128	; 0x80
 8008116:	d0f2      	beq.n	80080fe <SPI_EndRxTxTransaction+0x52>
 8008118:	e000      	b.n	800811c <SPI_EndRxTxTransaction+0x70>
        break;
 800811a:	bf00      	nop
  }

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20000000 	.word	0x20000000
 800812c:	165e9f81 	.word	0x165e9f81

08008130 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e038      	b.n	80081b8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d106      	bne.n	8008160 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f7f9 fef8 	bl	8001f50 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	3308      	adds	r3, #8
 8008168:	4619      	mov	r1, r3
 800816a:	4610      	mov	r0, r2
 800816c:	f000 fad6 	bl	800871c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6818      	ldr	r0, [r3, #0]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	461a      	mov	r2, r3
 800817a:	68b9      	ldr	r1, [r7, #8]
 800817c:	f000 fb38 	bl	80087f0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6858      	ldr	r0, [r3, #4]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	689a      	ldr	r2, [r3, #8]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818c:	6879      	ldr	r1, [r7, #4]
 800818e:	f000 fb65 	bl	800885c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	6892      	ldr	r2, [r2, #8]
 800819a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	6892      	ldr	r2, [r2, #8]
 80081a6:	f041 0101 	orr.w	r1, r1, #1
 80081aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2201      	movs	r2, #1
 80081b2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e041      	b.n	8008256 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d106      	bne.n	80081ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f839 	bl	800825e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2202      	movs	r2, #2
 80081f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	3304      	adds	r3, #4
 80081fc:	4619      	mov	r1, r3
 80081fe:	4610      	mov	r0, r2
 8008200:	f000 f9d8 	bl	80085b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800825e:	b480      	push	{r7}
 8008260:	b083      	sub	sp, #12
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008266:	bf00      	nop
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
	...

08008274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008282:	b2db      	uxtb	r3, r3
 8008284:	2b01      	cmp	r3, #1
 8008286:	d001      	beq.n	800828c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e04e      	b.n	800832a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68da      	ldr	r2, [r3, #12]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f042 0201 	orr.w	r2, r2, #1
 80082a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a23      	ldr	r2, [pc, #140]	; (8008338 <HAL_TIM_Base_Start_IT+0xc4>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d022      	beq.n	80082f4 <HAL_TIM_Base_Start_IT+0x80>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b6:	d01d      	beq.n	80082f4 <HAL_TIM_Base_Start_IT+0x80>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a1f      	ldr	r2, [pc, #124]	; (800833c <HAL_TIM_Base_Start_IT+0xc8>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d018      	beq.n	80082f4 <HAL_TIM_Base_Start_IT+0x80>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a1e      	ldr	r2, [pc, #120]	; (8008340 <HAL_TIM_Base_Start_IT+0xcc>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d013      	beq.n	80082f4 <HAL_TIM_Base_Start_IT+0x80>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a1c      	ldr	r2, [pc, #112]	; (8008344 <HAL_TIM_Base_Start_IT+0xd0>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d00e      	beq.n	80082f4 <HAL_TIM_Base_Start_IT+0x80>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a1b      	ldr	r2, [pc, #108]	; (8008348 <HAL_TIM_Base_Start_IT+0xd4>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d009      	beq.n	80082f4 <HAL_TIM_Base_Start_IT+0x80>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a19      	ldr	r2, [pc, #100]	; (800834c <HAL_TIM_Base_Start_IT+0xd8>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d004      	beq.n	80082f4 <HAL_TIM_Base_Start_IT+0x80>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a18      	ldr	r2, [pc, #96]	; (8008350 <HAL_TIM_Base_Start_IT+0xdc>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d111      	bne.n	8008318 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f003 0307 	and.w	r3, r3, #7
 80082fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2b06      	cmp	r3, #6
 8008304:	d010      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f042 0201 	orr.w	r2, r2, #1
 8008314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008316:	e007      	b.n	8008328 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f042 0201 	orr.w	r2, r2, #1
 8008326:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	40010000 	.word	0x40010000
 800833c:	40000400 	.word	0x40000400
 8008340:	40000800 	.word	0x40000800
 8008344:	40000c00 	.word	0x40000c00
 8008348:	40010400 	.word	0x40010400
 800834c:	40014000 	.word	0x40014000
 8008350:	40001800 	.word	0x40001800

08008354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	f003 0302 	and.w	r3, r3, #2
 8008366:	2b02      	cmp	r3, #2
 8008368:	d122      	bne.n	80083b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f003 0302 	and.w	r3, r3, #2
 8008374:	2b02      	cmp	r3, #2
 8008376:	d11b      	bne.n	80083b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f06f 0202 	mvn.w	r2, #2
 8008380:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2201      	movs	r2, #1
 8008386:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	f003 0303 	and.w	r3, r3, #3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d003      	beq.n	800839e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f8ee 	bl	8008578 <HAL_TIM_IC_CaptureCallback>
 800839c:	e005      	b.n	80083aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f8e0 	bl	8008564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f8f1 	bl	800858c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	f003 0304 	and.w	r3, r3, #4
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	d122      	bne.n	8008404 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f003 0304 	and.w	r3, r3, #4
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	d11b      	bne.n	8008404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f06f 0204 	mvn.w	r2, #4
 80083d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2202      	movs	r2, #2
 80083da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f8c4 	bl	8008578 <HAL_TIM_IC_CaptureCallback>
 80083f0:	e005      	b.n	80083fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f8b6 	bl	8008564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f8c7 	bl	800858c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	f003 0308 	and.w	r3, r3, #8
 800840e:	2b08      	cmp	r3, #8
 8008410:	d122      	bne.n	8008458 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	f003 0308 	and.w	r3, r3, #8
 800841c:	2b08      	cmp	r3, #8
 800841e:	d11b      	bne.n	8008458 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f06f 0208 	mvn.w	r2, #8
 8008428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2204      	movs	r2, #4
 800842e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	f003 0303 	and.w	r3, r3, #3
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f89a 	bl	8008578 <HAL_TIM_IC_CaptureCallback>
 8008444:	e005      	b.n	8008452 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f88c 	bl	8008564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f89d 	bl	800858c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	f003 0310 	and.w	r3, r3, #16
 8008462:	2b10      	cmp	r3, #16
 8008464:	d122      	bne.n	80084ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	f003 0310 	and.w	r3, r3, #16
 8008470:	2b10      	cmp	r3, #16
 8008472:	d11b      	bne.n	80084ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f06f 0210 	mvn.w	r2, #16
 800847c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2208      	movs	r2, #8
 8008482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800848e:	2b00      	cmp	r3, #0
 8008490:	d003      	beq.n	800849a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f870 	bl	8008578 <HAL_TIM_IC_CaptureCallback>
 8008498:	e005      	b.n	80084a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f862 	bl	8008564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 f873 	bl	800858c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d10e      	bne.n	80084d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d107      	bne.n	80084d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f06f 0201 	mvn.w	r2, #1
 80084d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7f9 ff2c 	bl	8002330 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e2:	2b80      	cmp	r3, #128	; 0x80
 80084e4:	d10e      	bne.n	8008504 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f0:	2b80      	cmp	r3, #128	; 0x80
 80084f2:	d107      	bne.n	8008504 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f902 	bl	8008708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800850e:	2b40      	cmp	r3, #64	; 0x40
 8008510:	d10e      	bne.n	8008530 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851c:	2b40      	cmp	r3, #64	; 0x40
 800851e:	d107      	bne.n	8008530 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f838 	bl	80085a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	f003 0320 	and.w	r3, r3, #32
 800853a:	2b20      	cmp	r3, #32
 800853c:	d10e      	bne.n	800855c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	f003 0320 	and.w	r3, r3, #32
 8008548:	2b20      	cmp	r3, #32
 800854a:	d107      	bne.n	800855c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f06f 0220 	mvn.w	r2, #32
 8008554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 f8cc 	bl	80086f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800855c:	bf00      	nop
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a40      	ldr	r2, [pc, #256]	; (80086c8 <TIM_Base_SetConfig+0x114>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d013      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d2:	d00f      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a3d      	ldr	r2, [pc, #244]	; (80086cc <TIM_Base_SetConfig+0x118>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d00b      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a3c      	ldr	r2, [pc, #240]	; (80086d0 <TIM_Base_SetConfig+0x11c>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d007      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a3b      	ldr	r2, [pc, #236]	; (80086d4 <TIM_Base_SetConfig+0x120>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d003      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a3a      	ldr	r2, [pc, #232]	; (80086d8 <TIM_Base_SetConfig+0x124>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d108      	bne.n	8008606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	4313      	orrs	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a2f      	ldr	r2, [pc, #188]	; (80086c8 <TIM_Base_SetConfig+0x114>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d02b      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008614:	d027      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a2c      	ldr	r2, [pc, #176]	; (80086cc <TIM_Base_SetConfig+0x118>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d023      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a2b      	ldr	r2, [pc, #172]	; (80086d0 <TIM_Base_SetConfig+0x11c>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d01f      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a2a      	ldr	r2, [pc, #168]	; (80086d4 <TIM_Base_SetConfig+0x120>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d01b      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a29      	ldr	r2, [pc, #164]	; (80086d8 <TIM_Base_SetConfig+0x124>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d017      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a28      	ldr	r2, [pc, #160]	; (80086dc <TIM_Base_SetConfig+0x128>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d013      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a27      	ldr	r2, [pc, #156]	; (80086e0 <TIM_Base_SetConfig+0x12c>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d00f      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a26      	ldr	r2, [pc, #152]	; (80086e4 <TIM_Base_SetConfig+0x130>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d00b      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a25      	ldr	r2, [pc, #148]	; (80086e8 <TIM_Base_SetConfig+0x134>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d007      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a24      	ldr	r2, [pc, #144]	; (80086ec <TIM_Base_SetConfig+0x138>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d003      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a23      	ldr	r2, [pc, #140]	; (80086f0 <TIM_Base_SetConfig+0x13c>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d108      	bne.n	8008678 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800866c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	4313      	orrs	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	4313      	orrs	r3, r2
 8008684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	689a      	ldr	r2, [r3, #8]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a0a      	ldr	r2, [pc, #40]	; (80086c8 <TIM_Base_SetConfig+0x114>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d003      	beq.n	80086ac <TIM_Base_SetConfig+0xf8>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a0c      	ldr	r2, [pc, #48]	; (80086d8 <TIM_Base_SetConfig+0x124>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d103      	bne.n	80086b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	691a      	ldr	r2, [r3, #16]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	615a      	str	r2, [r3, #20]
}
 80086ba:	bf00      	nop
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	40010000 	.word	0x40010000
 80086cc:	40000400 	.word	0x40000400
 80086d0:	40000800 	.word	0x40000800
 80086d4:	40000c00 	.word	0x40000c00
 80086d8:	40010400 	.word	0x40010400
 80086dc:	40014000 	.word	0x40014000
 80086e0:	40014400 	.word	0x40014400
 80086e4:	40014800 	.word	0x40014800
 80086e8:	40001800 	.word	0x40001800
 80086ec:	40001c00 	.word	0x40001c00
 80086f0:	40002000 	.word	0x40002000

080086f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008730:	683a      	ldr	r2, [r7, #0]
 8008732:	6812      	ldr	r2, [r2, #0]
 8008734:	f023 0101 	bic.w	r1, r3, #1
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	2b08      	cmp	r3, #8
 8008744:	d102      	bne.n	800874c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008746:	2340      	movs	r3, #64	; 0x40
 8008748:	617b      	str	r3, [r7, #20]
 800874a:	e001      	b.n	8008750 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800874c:	2300      	movs	r3, #0
 800874e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800875c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008762:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008768:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800876e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8008774:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800877a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8008780:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8008786:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800878c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8008792:	4313      	orrs	r3, r2
 8008794:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	4313      	orrs	r3, r2
 800879e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80087aa:	4b10      	ldr	r3, [pc, #64]	; (80087ec <FSMC_NORSRAM_Init+0xd0>)
 80087ac:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80087b4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80087bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	43db      	mvns	r3, r3
 80087cc:	ea02 0103 	and.w	r1, r2, r3
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	4319      	orrs	r1, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	371c      	adds	r7, #28
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	0008fb7f 	.word	0x0008fb7f

080087f0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	1c5a      	adds	r2, r3, #1
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008806:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	011b      	lsls	r3, r3, #4
 8008814:	431a      	orrs	r2, r3
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	021b      	lsls	r3, r3, #8
 800881c:	431a      	orrs	r2, r3
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	041b      	lsls	r3, r3, #16
 8008824:	431a      	orrs	r2, r3
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	3b01      	subs	r3, #1
 800882c:	051b      	lsls	r3, r3, #20
 800882e:	431a      	orrs	r2, r3
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	695b      	ldr	r3, [r3, #20]
 8008834:	3b02      	subs	r3, #2
 8008836:	061b      	lsls	r3, r3, #24
 8008838:	431a      	orrs	r2, r3
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	4313      	orrs	r3, r2
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	3201      	adds	r2, #1
 8008844:	4319      	orrs	r1, r3
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3714      	adds	r7, #20
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
	...

0800885c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008870:	d11d      	bne.n	80088ae <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800887a:	4b13      	ldr	r3, [pc, #76]	; (80088c8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800887c:	4013      	ands	r3, r2
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	6811      	ldr	r1, [r2, #0]
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	6852      	ldr	r2, [r2, #4]
 8008886:	0112      	lsls	r2, r2, #4
 8008888:	4311      	orrs	r1, r2
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	6892      	ldr	r2, [r2, #8]
 800888e:	0212      	lsls	r2, r2, #8
 8008890:	4311      	orrs	r1, r2
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	6992      	ldr	r2, [r2, #24]
 8008896:	4311      	orrs	r1, r2
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	68d2      	ldr	r2, [r2, #12]
 800889c:	0412      	lsls	r2, r2, #16
 800889e:	430a      	orrs	r2, r1
 80088a0:	ea43 0102 	orr.w	r1, r3, r2
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80088ac:	e005      	b.n	80088ba <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80088b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	cff00000 	.word	0xcff00000

080088cc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80088cc:	b084      	sub	sp, #16
 80088ce:	b480      	push	{r7}
 80088d0:	b085      	sub	sp, #20
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	f107 001c 	add.w	r0, r7, #28
 80088da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80088de:	2300      	movs	r3, #0
 80088e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80088e2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80088e4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80088e6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80088ea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80088ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80088ee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80088f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80088f2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80088f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80088f6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008906:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	431a      	orrs	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3714      	adds	r7, #20
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	b004      	add	sp, #16
 8008920:	4770      	bx	lr

08008922 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008922:	b480      	push	{r7}
 8008924:	b083      	sub	sp, #12
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008930:	4618      	mov	r0, r3
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2203      	movs	r2, #3
 800896a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800897a:	b480      	push	{r7}
 800897c:	b083      	sub	sp, #12
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0303 	and.w	r3, r3, #3
}
 800898a:	4618      	mov	r0, r3
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008996:	b480      	push	{r7}
 8008998:	b085      	sub	sp, #20
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80089a0:	2300      	movs	r3, #0
 80089a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80089b4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80089ba:	431a      	orrs	r2, r3
                       Command->CPSM);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80089c0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80089d0:	f023 030f 	bic.w	r3, r3, #15
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	431a      	orrs	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b083      	sub	sp, #12
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	b2db      	uxtb	r3, r3
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	3314      	adds	r3, #20
 8008a12:	461a      	mov	r2, r3
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	4413      	add	r3, r2
 8008a18:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
}  
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b085      	sub	sp, #20
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008a34:	2300      	movs	r3, #0
 8008a36:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	685a      	ldr	r2, [r3, #4]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a50:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008a56:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008a5c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a68:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008a74:	2300      	movs	r3, #0

}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b088      	sub	sp, #32
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008a90:	2310      	movs	r3, #16
 8008a92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a94:	2340      	movs	r3, #64	; 0x40
 8008a96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aa0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008aa2:	f107 0308 	add.w	r3, r7, #8
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7ff ff74 	bl	8008996 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ab2:	2110      	movs	r1, #16
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fa19 	bl	8008eec <SDMMC_GetCmdResp1>
 8008aba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008abc:	69fb      	ldr	r3, [r7, #28]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3720      	adds	r7, #32
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b088      	sub	sp, #32
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008ad4:	2311      	movs	r3, #17
 8008ad6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ad8:	2340      	movs	r3, #64	; 0x40
 8008ada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008adc:	2300      	movs	r3, #0
 8008ade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ae4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ae6:	f107 0308 	add.w	r3, r7, #8
 8008aea:	4619      	mov	r1, r3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff ff52 	bl	8008996 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008af6:	2111      	movs	r1, #17
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f9f7 	bl	8008eec <SDMMC_GetCmdResp1>
 8008afe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b00:	69fb      	ldr	r3, [r7, #28]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3720      	adds	r7, #32
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b088      	sub	sp, #32
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008b18:	2312      	movs	r3, #18
 8008b1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b1c:	2340      	movs	r3, #64	; 0x40
 8008b1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b20:	2300      	movs	r3, #0
 8008b22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b2a:	f107 0308 	add.w	r3, r7, #8
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7ff ff30 	bl	8008996 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b3a:	2112      	movs	r1, #18
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f9d5 	bl	8008eec <SDMMC_GetCmdResp1>
 8008b42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b44:	69fb      	ldr	r3, [r7, #28]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3720      	adds	r7, #32
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b088      	sub	sp, #32
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008b5c:	2318      	movs	r3, #24
 8008b5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b60:	2340      	movs	r3, #64	; 0x40
 8008b62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b64:	2300      	movs	r3, #0
 8008b66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b6e:	f107 0308 	add.w	r3, r7, #8
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f7ff ff0e 	bl	8008996 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b7e:	2118      	movs	r1, #24
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f9b3 	bl	8008eec <SDMMC_GetCmdResp1>
 8008b86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b88:	69fb      	ldr	r3, [r7, #28]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3720      	adds	r7, #32
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b088      	sub	sp, #32
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008ba0:	2319      	movs	r3, #25
 8008ba2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ba4:	2340      	movs	r3, #64	; 0x40
 8008ba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008bb2:	f107 0308 	add.w	r3, r7, #8
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7ff feec 	bl	8008996 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bc2:	2119      	movs	r1, #25
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f991 	bl	8008eec <SDMMC_GetCmdResp1>
 8008bca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bcc:	69fb      	ldr	r3, [r7, #28]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3720      	adds	r7, #32
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
	...

08008bd8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b088      	sub	sp, #32
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008be0:	2300      	movs	r3, #0
 8008be2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008be4:	230c      	movs	r3, #12
 8008be6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008be8:	2340      	movs	r3, #64	; 0x40
 8008bea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008bec:	2300      	movs	r3, #0
 8008bee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bf4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008bf6:	f107 0308 	add.w	r3, r7, #8
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f7ff feca 	bl	8008996 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008c02:	4a05      	ldr	r2, [pc, #20]	; (8008c18 <SDMMC_CmdStopTransfer+0x40>)
 8008c04:	210c      	movs	r1, #12
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f970 	bl	8008eec <SDMMC_GetCmdResp1>
 8008c0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c0e:	69fb      	ldr	r3, [r7, #28]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3720      	adds	r7, #32
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	05f5e100 	.word	0x05f5e100

08008c1c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b08a      	sub	sp, #40	; 0x28
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008c2c:	2307      	movs	r3, #7
 8008c2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c30:	2340      	movs	r3, #64	; 0x40
 8008c32:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c34:	2300      	movs	r3, #0
 8008c36:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c3c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c3e:	f107 0310 	add.w	r3, r7, #16
 8008c42:	4619      	mov	r1, r3
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f7ff fea6 	bl	8008996 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c4e:	2107      	movs	r1, #7
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f000 f94b 	bl	8008eec <SDMMC_GetCmdResp1>
 8008c56:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3728      	adds	r7, #40	; 0x28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b088      	sub	sp, #32
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008c72:	2300      	movs	r3, #0
 8008c74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c76:	2300      	movs	r3, #0
 8008c78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c80:	f107 0308 	add.w	r3, r7, #8
 8008c84:	4619      	mov	r1, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7ff fe85 	bl	8008996 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fb65 	bl	800935c <SDMMC_GetCmdError>
 8008c92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c94:	69fb      	ldr	r3, [r7, #28]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3720      	adds	r7, #32
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b088      	sub	sp, #32
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008ca6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008caa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008cac:	2308      	movs	r3, #8
 8008cae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008cb0:	2340      	movs	r3, #64	; 0x40
 8008cb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008cbe:	f107 0308 	add.w	r3, r7, #8
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f7ff fe66 	bl	8008996 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 faf8 	bl	80092c0 <SDMMC_GetCmdResp7>
 8008cd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cd2:	69fb      	ldr	r3, [r7, #28]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3720      	adds	r7, #32
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b088      	sub	sp, #32
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008cea:	2337      	movs	r3, #55	; 0x37
 8008cec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008cee:	2340      	movs	r3, #64	; 0x40
 8008cf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008cfc:	f107 0308 	add.w	r3, r7, #8
 8008d00:	4619      	mov	r1, r3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7ff fe47 	bl	8008996 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d0c:	2137      	movs	r1, #55	; 0x37
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f8ec 	bl	8008eec <SDMMC_GetCmdResp1>
 8008d14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d16:	69fb      	ldr	r3, [r7, #28]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3720      	adds	r7, #32
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b088      	sub	sp, #32
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008d36:	2329      	movs	r3, #41	; 0x29
 8008d38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d3a:	2340      	movs	r3, #64	; 0x40
 8008d3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d48:	f107 0308 	add.w	r3, r7, #8
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7ff fe21 	bl	8008996 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f9ff 	bl	8009158 <SDMMC_GetCmdResp3>
 8008d5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d5c:	69fb      	ldr	r3, [r7, #28]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3720      	adds	r7, #32
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b088      	sub	sp, #32
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008d74:	2306      	movs	r3, #6
 8008d76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d78:	2340      	movs	r3, #64	; 0x40
 8008d7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d86:	f107 0308 	add.w	r3, r7, #8
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7ff fe02 	bl	8008996 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d96:	2106      	movs	r1, #6
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f8a7 	bl	8008eec <SDMMC_GetCmdResp1>
 8008d9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008da0:	69fb      	ldr	r3, [r7, #28]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3720      	adds	r7, #32
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b088      	sub	sp, #32
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008db6:	2333      	movs	r3, #51	; 0x33
 8008db8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008dba:	2340      	movs	r3, #64	; 0x40
 8008dbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dc6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dc8:	f107 0308 	add.w	r3, r7, #8
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7ff fde1 	bl	8008996 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dd8:	2133      	movs	r1, #51	; 0x33
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f886 	bl	8008eec <SDMMC_GetCmdResp1>
 8008de0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008de2:	69fb      	ldr	r3, [r7, #28]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3720      	adds	r7, #32
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b088      	sub	sp, #32
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008df4:	2300      	movs	r3, #0
 8008df6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008df8:	2302      	movs	r3, #2
 8008dfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008dfc:	23c0      	movs	r3, #192	; 0xc0
 8008dfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e00:	2300      	movs	r3, #0
 8008e02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e0a:	f107 0308 	add.w	r3, r7, #8
 8008e0e:	4619      	mov	r1, r3
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f7ff fdc0 	bl	8008996 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f956 	bl	80090c8 <SDMMC_GetCmdResp2>
 8008e1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e1e:	69fb      	ldr	r3, [r7, #28]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3720      	adds	r7, #32
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b088      	sub	sp, #32
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008e36:	2309      	movs	r3, #9
 8008e38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008e3a:	23c0      	movs	r3, #192	; 0xc0
 8008e3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e48:	f107 0308 	add.w	r3, r7, #8
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7ff fda1 	bl	8008996 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f937 	bl	80090c8 <SDMMC_GetCmdResp2>
 8008e5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e5c:	69fb      	ldr	r3, [r7, #28]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3720      	adds	r7, #32
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b088      	sub	sp, #32
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008e70:	2300      	movs	r3, #0
 8008e72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008e74:	2303      	movs	r3, #3
 8008e76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e78:	2340      	movs	r3, #64	; 0x40
 8008e7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e86:	f107 0308 	add.w	r3, r7, #8
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7ff fd82 	bl	8008996 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	2103      	movs	r1, #3
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f99c 	bl	80091d4 <SDMMC_GetCmdResp6>
 8008e9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e9e:	69fb      	ldr	r3, [r7, #28]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3720      	adds	r7, #32
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b088      	sub	sp, #32
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008eb6:	230d      	movs	r3, #13
 8008eb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008eba:	2340      	movs	r3, #64	; 0x40
 8008ebc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ec6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ec8:	f107 0308 	add.w	r3, r7, #8
 8008ecc:	4619      	mov	r1, r3
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7ff fd61 	bl	8008996 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ed8:	210d      	movs	r1, #13
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f806 	bl	8008eec <SDMMC_GetCmdResp1>
 8008ee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ee2:	69fb      	ldr	r3, [r7, #28]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3720      	adds	r7, #32
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b088      	sub	sp, #32
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	607a      	str	r2, [r7, #4]
 8008ef8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008efa:	4b70      	ldr	r3, [pc, #448]	; (80090bc <SDMMC_GetCmdResp1+0x1d0>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a70      	ldr	r2, [pc, #448]	; (80090c0 <SDMMC_GetCmdResp1+0x1d4>)
 8008f00:	fba2 2303 	umull	r2, r3, r2, r3
 8008f04:	0a5a      	lsrs	r2, r3, #9
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	fb02 f303 	mul.w	r3, r2, r3
 8008f0c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	1e5a      	subs	r2, r3, #1
 8008f12:	61fa      	str	r2, [r7, #28]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d102      	bne.n	8008f1e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f1c:	e0c9      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f22:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d0ef      	beq.n	8008f0e <SDMMC_GetCmdResp1+0x22>
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1ea      	bne.n	8008f0e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f3c:	f003 0304 	and.w	r3, r3, #4
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d004      	beq.n	8008f4e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2204      	movs	r2, #4
 8008f48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008f4a:	2304      	movs	r3, #4
 8008f4c:	e0b1      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d004      	beq.n	8008f64 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e0a6      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	22c5      	movs	r2, #197	; 0xc5
 8008f68:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f7ff fd3d 	bl	80089ea <SDIO_GetCommandResponse>
 8008f70:	4603      	mov	r3, r0
 8008f72:	461a      	mov	r2, r3
 8008f74:	7afb      	ldrb	r3, [r7, #11]
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d001      	beq.n	8008f7e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e099      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008f7e:	2100      	movs	r1, #0
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f7ff fd3f 	bl	8008a04 <SDIO_GetResponse>
 8008f86:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	4b4e      	ldr	r3, [pc, #312]	; (80090c4 <SDMMC_GetCmdResp1+0x1d8>)
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d101      	bne.n	8008f96 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008f92:	2300      	movs	r3, #0
 8008f94:	e08d      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	da02      	bge.n	8008fa2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008f9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fa0:	e087      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008fac:	2340      	movs	r3, #64	; 0x40
 8008fae:	e080      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008fba:	2380      	movs	r3, #128	; 0x80
 8008fbc:	e079      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fcc:	e071      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fdc:	e069      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fec:	e061      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008ff8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ffc:	e059      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800900c:	e051      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800901c:	e049      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009024:	2b00      	cmp	r3, #0
 8009026:	d002      	beq.n	800902e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009028:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800902c:	e041      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d002      	beq.n	800903e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009038:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800903c:	e039      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800904c:	e031      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009058:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800905c:	e029      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009064:	2b00      	cmp	r3, #0
 8009066:	d002      	beq.n	800906e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009068:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800906c:	e021      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d002      	beq.n	800907e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009078:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800907c:	e019      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d002      	beq.n	800908e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009088:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800908c:	e011      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d002      	beq.n	800909e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009098:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800909c:	e009      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f003 0308 	and.w	r3, r3, #8
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d002      	beq.n	80090ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80090a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80090ac:	e001      	b.n	80090b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80090ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3720      	adds	r7, #32
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20000000 	.word	0x20000000
 80090c0:	10624dd3 	.word	0x10624dd3
 80090c4:	fdffe008 	.word	0xfdffe008

080090c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80090d0:	4b1f      	ldr	r3, [pc, #124]	; (8009150 <SDMMC_GetCmdResp2+0x88>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a1f      	ldr	r2, [pc, #124]	; (8009154 <SDMMC_GetCmdResp2+0x8c>)
 80090d6:	fba2 2303 	umull	r2, r3, r2, r3
 80090da:	0a5b      	lsrs	r3, r3, #9
 80090dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e0:	fb02 f303 	mul.w	r3, r2, r3
 80090e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	1e5a      	subs	r2, r3, #1
 80090ea:	60fa      	str	r2, [r7, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d102      	bne.n	80090f6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090f4:	e026      	b.n	8009144 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009102:	2b00      	cmp	r3, #0
 8009104:	d0ef      	beq.n	80090e6 <SDMMC_GetCmdResp2+0x1e>
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1ea      	bne.n	80090e6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009114:	f003 0304 	and.w	r3, r3, #4
 8009118:	2b00      	cmp	r3, #0
 800911a:	d004      	beq.n	8009126 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2204      	movs	r2, #4
 8009120:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009122:	2304      	movs	r3, #4
 8009124:	e00e      	b.n	8009144 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	2b00      	cmp	r3, #0
 8009130:	d004      	beq.n	800913c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2201      	movs	r2, #1
 8009136:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009138:	2301      	movs	r3, #1
 800913a:	e003      	b.n	8009144 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	22c5      	movs	r2, #197	; 0xc5
 8009140:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr
 8009150:	20000000 	.word	0x20000000
 8009154:	10624dd3 	.word	0x10624dd3

08009158 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009160:	4b1a      	ldr	r3, [pc, #104]	; (80091cc <SDMMC_GetCmdResp3+0x74>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a1a      	ldr	r2, [pc, #104]	; (80091d0 <SDMMC_GetCmdResp3+0x78>)
 8009166:	fba2 2303 	umull	r2, r3, r2, r3
 800916a:	0a5b      	lsrs	r3, r3, #9
 800916c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009170:	fb02 f303 	mul.w	r3, r2, r3
 8009174:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	1e5a      	subs	r2, r3, #1
 800917a:	60fa      	str	r2, [r7, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d102      	bne.n	8009186 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009180:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009184:	e01b      	b.n	80091be <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800918a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0ef      	beq.n	8009176 <SDMMC_GetCmdResp3+0x1e>
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800919c:	2b00      	cmp	r3, #0
 800919e:	d1ea      	bne.n	8009176 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a4:	f003 0304 	and.w	r3, r3, #4
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d004      	beq.n	80091b6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2204      	movs	r2, #4
 80091b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80091b2:	2304      	movs	r3, #4
 80091b4:	e003      	b.n	80091be <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	22c5      	movs	r2, #197	; 0xc5
 80091ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	20000000 	.word	0x20000000
 80091d0:	10624dd3 	.word	0x10624dd3

080091d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b088      	sub	sp, #32
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	460b      	mov	r3, r1
 80091de:	607a      	str	r2, [r7, #4]
 80091e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80091e2:	4b35      	ldr	r3, [pc, #212]	; (80092b8 <SDMMC_GetCmdResp6+0xe4>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a35      	ldr	r2, [pc, #212]	; (80092bc <SDMMC_GetCmdResp6+0xe8>)
 80091e8:	fba2 2303 	umull	r2, r3, r2, r3
 80091ec:	0a5b      	lsrs	r3, r3, #9
 80091ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80091f2:	fb02 f303 	mul.w	r3, r2, r3
 80091f6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	1e5a      	subs	r2, r3, #1
 80091fc:	61fa      	str	r2, [r7, #28]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d102      	bne.n	8009208 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009202:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009206:	e052      	b.n	80092ae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800920c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009214:	2b00      	cmp	r3, #0
 8009216:	d0ef      	beq.n	80091f8 <SDMMC_GetCmdResp6+0x24>
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1ea      	bne.n	80091f8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009226:	f003 0304 	and.w	r3, r3, #4
 800922a:	2b00      	cmp	r3, #0
 800922c:	d004      	beq.n	8009238 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2204      	movs	r2, #4
 8009232:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009234:	2304      	movs	r3, #4
 8009236:	e03a      	b.n	80092ae <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800923c:	f003 0301 	and.w	r3, r3, #1
 8009240:	2b00      	cmp	r3, #0
 8009242:	d004      	beq.n	800924e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2201      	movs	r2, #1
 8009248:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800924a:	2301      	movs	r3, #1
 800924c:	e02f      	b.n	80092ae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f7ff fbcb 	bl	80089ea <SDIO_GetCommandResponse>
 8009254:	4603      	mov	r3, r0
 8009256:	461a      	mov	r2, r3
 8009258:	7afb      	ldrb	r3, [r7, #11]
 800925a:	4293      	cmp	r3, r2
 800925c:	d001      	beq.n	8009262 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800925e:	2301      	movs	r3, #1
 8009260:	e025      	b.n	80092ae <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	22c5      	movs	r2, #197	; 0xc5
 8009266:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009268:	2100      	movs	r1, #0
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f7ff fbca 	bl	8008a04 <SDIO_GetResponse>
 8009270:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d106      	bne.n	800928a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	0c1b      	lsrs	r3, r3, #16
 8009280:	b29a      	uxth	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009286:	2300      	movs	r3, #0
 8009288:	e011      	b.n	80092ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009290:	2b00      	cmp	r3, #0
 8009292:	d002      	beq.n	800929a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009294:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009298:	e009      	b.n	80092ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d002      	beq.n	80092aa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80092a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092a8:	e001      	b.n	80092ae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80092aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3720      	adds	r7, #32
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	20000000 	.word	0x20000000
 80092bc:	10624dd3 	.word	0x10624dd3

080092c0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80092c8:	4b22      	ldr	r3, [pc, #136]	; (8009354 <SDMMC_GetCmdResp7+0x94>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a22      	ldr	r2, [pc, #136]	; (8009358 <SDMMC_GetCmdResp7+0x98>)
 80092ce:	fba2 2303 	umull	r2, r3, r2, r3
 80092d2:	0a5b      	lsrs	r3, r3, #9
 80092d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d8:	fb02 f303 	mul.w	r3, r2, r3
 80092dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	1e5a      	subs	r2, r3, #1
 80092e2:	60fa      	str	r2, [r7, #12]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d102      	bne.n	80092ee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092ec:	e02c      	b.n	8009348 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d0ef      	beq.n	80092de <SDMMC_GetCmdResp7+0x1e>
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1ea      	bne.n	80092de <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800930c:	f003 0304 	and.w	r3, r3, #4
 8009310:	2b00      	cmp	r3, #0
 8009312:	d004      	beq.n	800931e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2204      	movs	r2, #4
 8009318:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800931a:	2304      	movs	r3, #4
 800931c:	e014      	b.n	8009348 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	2b00      	cmp	r3, #0
 8009328:	d004      	beq.n	8009334 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009330:	2301      	movs	r3, #1
 8009332:	e009      	b.n	8009348 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2240      	movs	r2, #64	; 0x40
 8009344:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009346:	2300      	movs	r3, #0
  
}
 8009348:	4618      	mov	r0, r3
 800934a:	3714      	adds	r7, #20
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr
 8009354:	20000000 	.word	0x20000000
 8009358:	10624dd3 	.word	0x10624dd3

0800935c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009364:	4b11      	ldr	r3, [pc, #68]	; (80093ac <SDMMC_GetCmdError+0x50>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a11      	ldr	r2, [pc, #68]	; (80093b0 <SDMMC_GetCmdError+0x54>)
 800936a:	fba2 2303 	umull	r2, r3, r2, r3
 800936e:	0a5b      	lsrs	r3, r3, #9
 8009370:	f241 3288 	movw	r2, #5000	; 0x1388
 8009374:	fb02 f303 	mul.w	r3, r2, r3
 8009378:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	1e5a      	subs	r2, r3, #1
 800937e:	60fa      	str	r2, [r7, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d102      	bne.n	800938a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009384:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009388:	e009      	b.n	800939e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800938e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009392:	2b00      	cmp	r3, #0
 8009394:	d0f1      	beq.n	800937a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	22c5      	movs	r2, #197	; 0xc5
 800939a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	20000000 	.word	0x20000000
 80093b0:	10624dd3 	.word	0x10624dd3

080093b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80093b8:	4904      	ldr	r1, [pc, #16]	; (80093cc <MX_FATFS_Init+0x18>)
 80093ba:	4805      	ldr	r0, [pc, #20]	; (80093d0 <MX_FATFS_Init+0x1c>)
 80093bc:	f001 fc6a 	bl	800ac94 <FATFS_LinkDriver>
 80093c0:	4603      	mov	r3, r0
 80093c2:	461a      	mov	r2, r3
 80093c4:	4b03      	ldr	r3, [pc, #12]	; (80093d4 <MX_FATFS_Init+0x20>)
 80093c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80093c8:	bf00      	nop
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	20002504 	.word	0x20002504
 80093d0:	080157e8 	.word	0x080157e8
 80093d4:	20002500 	.word	0x20002500

080093d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80093d8:	b480      	push	{r7}
 80093da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80093dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80093de:	4618      	mov	r0, r3
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80093ee:	2300      	movs	r3, #0
 80093f0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80093f2:	f000 f896 	bl	8009522 <BSP_SD_IsDetected>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d001      	beq.n	8009400 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e012      	b.n	8009426 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009400:	480b      	ldr	r0, [pc, #44]	; (8009430 <BSP_SD_Init+0x48>)
 8009402:	f7fc fc9b 	bl	8005d3c <HAL_SD_Init>
 8009406:	4603      	mov	r3, r0
 8009408:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800940a:	79fb      	ldrb	r3, [r7, #7]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d109      	bne.n	8009424 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009410:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009414:	4806      	ldr	r0, [pc, #24]	; (8009430 <BSP_SD_Init+0x48>)
 8009416:	f7fd fa69 	bl	80068ec <HAL_SD_ConfigWideBusOperation>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d001      	beq.n	8009424 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009424:	79fb      	ldrb	r3, [r7, #7]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	20001ccc 	.word	0x20001ccc

08009434 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009440:	2300      	movs	r3, #0
 8009442:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	68f9      	ldr	r1, [r7, #12]
 800944a:	4806      	ldr	r0, [pc, #24]	; (8009464 <BSP_SD_ReadBlocks_DMA+0x30>)
 800944c:	f7fc fd26 	bl	8005e9c <HAL_SD_ReadBlocks_DMA>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800945a:	7dfb      	ldrb	r3, [r7, #23]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	20001ccc 	.word	0x20001ccc

08009468 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	68f9      	ldr	r1, [r7, #12]
 800947e:	4806      	ldr	r0, [pc, #24]	; (8009498 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009480:	f7fc fdee 	bl	8006060 <HAL_SD_WriteBlocks_DMA>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800948e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3718      	adds	r7, #24
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	20001ccc 	.word	0x20001ccc

0800949c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80094a0:	4805      	ldr	r0, [pc, #20]	; (80094b8 <BSP_SD_GetCardState+0x1c>)
 80094a2:	f7fd fabd 	bl	8006a20 <HAL_SD_GetCardState>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b04      	cmp	r3, #4
 80094aa:	bf14      	ite	ne
 80094ac:	2301      	movne	r3, #1
 80094ae:	2300      	moveq	r3, #0
 80094b0:	b2db      	uxtb	r3, r3
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20001ccc 	.word	0x20001ccc

080094bc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80094c4:	6879      	ldr	r1, [r7, #4]
 80094c6:	4803      	ldr	r0, [pc, #12]	; (80094d4 <BSP_SD_GetCardInfo+0x18>)
 80094c8:	f7fd f9e4 	bl	8006894 <HAL_SD_GetCardInfo>
}
 80094cc:	bf00      	nop
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	20001ccc 	.word	0x20001ccc

080094d8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80094e0:	f000 f818 	bl	8009514 <BSP_SD_AbortCallback>
}
 80094e4:	bf00      	nop
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80094f4:	f000 f9c4 	bl	8009880 <BSP_SD_WriteCpltCallback>
}
 80094f8:	bf00      	nop
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009508:	f000 f9c8 	bl	800989c <BSP_SD_ReadCpltCallback>
}
 800950c:	bf00      	nop
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009514:	b480      	push	{r7}
 8009516:	af00      	add	r7, sp, #0

}
 8009518:	bf00      	nop
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr

08009522 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b082      	sub	sp, #8
 8009526:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009528:	2301      	movs	r3, #1
 800952a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800952c:	f000 f80c 	bl	8009548 <BSP_PlatformIsDetected>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009536:	2300      	movs	r3, #0
 8009538:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800953a:	79fb      	ldrb	r3, [r7, #7]
 800953c:	b2db      	uxtb	r3, r3
}
 800953e:	4618      	mov	r0, r3
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
	...

08009548 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800954e:	2301      	movs	r3, #1
 8009550:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009552:	2108      	movs	r1, #8
 8009554:	4806      	ldr	r0, [pc, #24]	; (8009570 <BSP_PlatformIsDetected+0x28>)
 8009556:	f7fb fd5d 	bl	8005014 <HAL_GPIO_ReadPin>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009560:	2300      	movs	r3, #0
 8009562:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009564:	79fb      	ldrb	r3, [r7, #7]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	40020c00 	.word	0x40020c00

08009574 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800957c:	f001 fc22 	bl	800adc4 <osKernelSysTick>
 8009580:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8009582:	e006      	b.n	8009592 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009584:	f7ff ff8a 	bl	800949c <BSP_SD_GetCardState>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d101      	bne.n	8009592 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800958e:	2300      	movs	r3, #0
 8009590:	e009      	b.n	80095a6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8009592:	f001 fc17 	bl	800adc4 <osKernelSysTick>
 8009596:	4602      	mov	r2, r0
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d8f0      	bhi.n	8009584 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80095a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
	...

080095b0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	4603      	mov	r3, r0
 80095b8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80095ba:	4b0b      	ldr	r3, [pc, #44]	; (80095e8 <SD_CheckStatus+0x38>)
 80095bc:	2201      	movs	r2, #1
 80095be:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80095c0:	f7ff ff6c 	bl	800949c <BSP_SD_GetCardState>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d107      	bne.n	80095da <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80095ca:	4b07      	ldr	r3, [pc, #28]	; (80095e8 <SD_CheckStatus+0x38>)
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	f023 0301 	bic.w	r3, r3, #1
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	4b04      	ldr	r3, [pc, #16]	; (80095e8 <SD_CheckStatus+0x38>)
 80095d8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80095da:	4b03      	ldr	r3, [pc, #12]	; (80095e8 <SD_CheckStatus+0x38>)
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	b2db      	uxtb	r3, r3
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	20000071 	.word	0x20000071

080095ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80095ec:	b590      	push	{r4, r7, lr}
 80095ee:	b087      	sub	sp, #28
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80095f6:	4b20      	ldr	r3, [pc, #128]	; (8009678 <SD_initialize+0x8c>)
 80095f8:	2201      	movs	r2, #1
 80095fa:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 80095fc:	f001 fbd6 	bl	800adac <osKernelRunning>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d030      	beq.n	8009668 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8009606:	f7ff feef 	bl	80093e8 <BSP_SD_Init>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d107      	bne.n	8009620 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8009610:	79fb      	ldrb	r3, [r7, #7]
 8009612:	4618      	mov	r0, r3
 8009614:	f7ff ffcc 	bl	80095b0 <SD_CheckStatus>
 8009618:	4603      	mov	r3, r0
 800961a:	461a      	mov	r2, r3
 800961c:	4b16      	ldr	r3, [pc, #88]	; (8009678 <SD_initialize+0x8c>)
 800961e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8009620:	4b15      	ldr	r3, [pc, #84]	; (8009678 <SD_initialize+0x8c>)
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b01      	cmp	r3, #1
 8009628:	d01e      	beq.n	8009668 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800962a:	4b14      	ldr	r3, [pc, #80]	; (800967c <SD_initialize+0x90>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d10e      	bne.n	8009650 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8009632:	4b13      	ldr	r3, [pc, #76]	; (8009680 <SD_initialize+0x94>)
 8009634:	f107 0408 	add.w	r4, r7, #8
 8009638:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800963a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800963e:	f107 0308 	add.w	r3, r7, #8
 8009642:	2100      	movs	r1, #0
 8009644:	4618      	mov	r0, r3
 8009646:	f001 fdc2 	bl	800b1ce <osMessageCreate>
 800964a:	4603      	mov	r3, r0
 800964c:	4a0b      	ldr	r2, [pc, #44]	; (800967c <SD_initialize+0x90>)
 800964e:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8009650:	4b0a      	ldr	r3, [pc, #40]	; (800967c <SD_initialize+0x90>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d107      	bne.n	8009668 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8009658:	4b07      	ldr	r3, [pc, #28]	; (8009678 <SD_initialize+0x8c>)
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	b2db      	uxtb	r3, r3
 800965e:	f043 0301 	orr.w	r3, r3, #1
 8009662:	b2da      	uxtb	r2, r3
 8009664:	4b04      	ldr	r3, [pc, #16]	; (8009678 <SD_initialize+0x8c>)
 8009666:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8009668:	4b03      	ldr	r3, [pc, #12]	; (8009678 <SD_initialize+0x8c>)
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	b2db      	uxtb	r3, r3
}
 800966e:	4618      	mov	r0, r3
 8009670:	371c      	adds	r7, #28
 8009672:	46bd      	mov	sp, r7
 8009674:	bd90      	pop	{r4, r7, pc}
 8009676:	bf00      	nop
 8009678:	20000071 	.word	0x20000071
 800967c:	20002508 	.word	0x20002508
 8009680:	08011d70 	.word	0x08011d70

08009684 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	4603      	mov	r3, r0
 800968c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800968e:	79fb      	ldrb	r3, [r7, #7]
 8009690:	4618      	mov	r0, r3
 8009692:	f7ff ff8d 	bl	80095b0 <SD_CheckStatus>
 8009696:	4603      	mov	r3, r0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b08a      	sub	sp, #40	; 0x28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60b9      	str	r1, [r7, #8]
 80096a8:	607a      	str	r2, [r7, #4]
 80096aa:	603b      	str	r3, [r7, #0]
 80096ac:	4603      	mov	r3, r0
 80096ae:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80096b6:	f247 5030 	movw	r0, #30000	; 0x7530
 80096ba:	f7ff ff5b 	bl	8009574 <SD_CheckStatusWithTimeout>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	da02      	bge.n	80096ca <SD_read+0x2a>
  {
    return res;
 80096c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096c8:	e032      	b.n	8009730 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80096ca:	683a      	ldr	r2, [r7, #0]
 80096cc:	6879      	ldr	r1, [r7, #4]
 80096ce:	68b8      	ldr	r0, [r7, #8]
 80096d0:	f7ff feb0 	bl	8009434 <BSP_SD_ReadBlocks_DMA>
 80096d4:	4603      	mov	r3, r0
 80096d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 80096da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d124      	bne.n	800972c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80096e2:	4b15      	ldr	r3, [pc, #84]	; (8009738 <SD_read+0x98>)
 80096e4:	6819      	ldr	r1, [r3, #0]
 80096e6:	f107 0314 	add.w	r3, r7, #20
 80096ea:	f247 5230 	movw	r2, #30000	; 0x7530
 80096ee:	4618      	mov	r0, r3
 80096f0:	f001 fdd6 	bl	800b2a0 <osMessageGet>

    if (event.status == osEventMessage)
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	2b10      	cmp	r3, #16
 80096f8:	d118      	bne.n	800972c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d115      	bne.n	800972c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8009700:	f001 fb60 	bl	800adc4 <osKernelSysTick>
 8009704:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8009706:	e008      	b.n	800971a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009708:	f7ff fec8 	bl	800949c <BSP_SD_GetCardState>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d103      	bne.n	800971a <SD_read+0x7a>
              {
                res = RES_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8009718:	e008      	b.n	800972c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800971a:	f001 fb53 	bl	800adc4 <osKernelSysTick>
 800971e:	4602      	mov	r2, r0
 8009720:	6a3b      	ldr	r3, [r7, #32]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	f247 522f 	movw	r2, #29999	; 0x752f
 8009728:	4293      	cmp	r3, r2
 800972a:	d9ed      	bls.n	8009708 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800972c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009730:	4618      	mov	r0, r3
 8009732:	3728      	adds	r7, #40	; 0x28
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	20002508 	.word	0x20002508

0800973c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b08a      	sub	sp, #40	; 0x28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60b9      	str	r1, [r7, #8]
 8009744:	607a      	str	r2, [r7, #4]
 8009746:	603b      	str	r3, [r7, #0]
 8009748:	4603      	mov	r3, r0
 800974a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009752:	f247 5030 	movw	r0, #30000	; 0x7530
 8009756:	f7ff ff0d 	bl	8009574 <SD_CheckStatusWithTimeout>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	da02      	bge.n	8009766 <SD_write+0x2a>
  {
    return res;
 8009760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009764:	e02e      	b.n	80097c4 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009766:	683a      	ldr	r2, [r7, #0]
 8009768:	6879      	ldr	r1, [r7, #4]
 800976a:	68b8      	ldr	r0, [r7, #8]
 800976c:	f7ff fe7c 	bl	8009468 <BSP_SD_WriteBlocks_DMA>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d124      	bne.n	80097c0 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8009776:	4b15      	ldr	r3, [pc, #84]	; (80097cc <SD_write+0x90>)
 8009778:	6819      	ldr	r1, [r3, #0]
 800977a:	f107 0314 	add.w	r3, r7, #20
 800977e:	f247 5230 	movw	r2, #30000	; 0x7530
 8009782:	4618      	mov	r0, r3
 8009784:	f001 fd8c 	bl	800b2a0 <osMessageGet>

    if (event.status == osEventMessage)
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	2b10      	cmp	r3, #16
 800978c:	d118      	bne.n	80097c0 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	2b02      	cmp	r3, #2
 8009792:	d115      	bne.n	80097c0 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8009794:	f001 fb16 	bl	800adc4 <osKernelSysTick>
 8009798:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800979a:	e008      	b.n	80097ae <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800979c:	f7ff fe7e 	bl	800949c <BSP_SD_GetCardState>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d103      	bne.n	80097ae <SD_write+0x72>
          {
            res = RES_OK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80097ac:	e008      	b.n	80097c0 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80097ae:	f001 fb09 	bl	800adc4 <osKernelSysTick>
 80097b2:	4602      	mov	r2, r0
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	f247 522f 	movw	r2, #29999	; 0x752f
 80097bc:	4293      	cmp	r3, r2
 80097be:	d9ed      	bls.n	800979c <SD_write+0x60>
    }

  }
#endif

  return res;
 80097c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3728      	adds	r7, #40	; 0x28
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	20002508 	.word	0x20002508

080097d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08c      	sub	sp, #48	; 0x30
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	4603      	mov	r3, r0
 80097d8:	603a      	str	r2, [r7, #0]
 80097da:	71fb      	strb	r3, [r7, #7]
 80097dc:	460b      	mov	r3, r1
 80097de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80097e6:	4b25      	ldr	r3, [pc, #148]	; (800987c <SD_ioctl+0xac>)
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	f003 0301 	and.w	r3, r3, #1
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <SD_ioctl+0x28>
 80097f4:	2303      	movs	r3, #3
 80097f6:	e03c      	b.n	8009872 <SD_ioctl+0xa2>

  switch (cmd)
 80097f8:	79bb      	ldrb	r3, [r7, #6]
 80097fa:	2b03      	cmp	r3, #3
 80097fc:	d834      	bhi.n	8009868 <SD_ioctl+0x98>
 80097fe:	a201      	add	r2, pc, #4	; (adr r2, 8009804 <SD_ioctl+0x34>)
 8009800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009804:	08009815 	.word	0x08009815
 8009808:	0800981d 	.word	0x0800981d
 800980c:	08009835 	.word	0x08009835
 8009810:	0800984f 	.word	0x0800984f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800981a:	e028      	b.n	800986e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800981c:	f107 030c 	add.w	r3, r7, #12
 8009820:	4618      	mov	r0, r3
 8009822:	f7ff fe4b 	bl	80094bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009832:	e01c      	b.n	800986e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009834:	f107 030c 	add.w	r3, r7, #12
 8009838:	4618      	mov	r0, r3
 800983a:	f7ff fe3f 	bl	80094bc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800983e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009840:	b29a      	uxth	r2, r3
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800984c:	e00f      	b.n	800986e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800984e:	f107 030c 	add.w	r3, r7, #12
 8009852:	4618      	mov	r0, r3
 8009854:	f7ff fe32 	bl	80094bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	0a5a      	lsrs	r2, r3, #9
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009860:	2300      	movs	r3, #0
 8009862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009866:	e002      	b.n	800986e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009868:	2304      	movs	r3, #4
 800986a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800986e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009872:	4618      	mov	r0, r3
 8009874:	3730      	adds	r7, #48	; 0x30
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	20000071 	.word	0x20000071

08009880 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8009884:	4b04      	ldr	r3, [pc, #16]	; (8009898 <BSP_SD_WriteCpltCallback+0x18>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2200      	movs	r2, #0
 800988a:	2102      	movs	r1, #2
 800988c:	4618      	mov	r0, r3
 800988e:	f001 fcc7 	bl	800b220 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8009892:	bf00      	nop
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20002508 	.word	0x20002508

0800989c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 80098a0:	4b04      	ldr	r3, [pc, #16]	; (80098b4 <BSP_SD_ReadCpltCallback+0x18>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2200      	movs	r2, #0
 80098a6:	2101      	movs	r1, #1
 80098a8:	4618      	mov	r0, r3
 80098aa:	f001 fcb9 	bl	800b220 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 80098ae:	bf00      	nop
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	20002508 	.word	0x20002508

080098b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	4603      	mov	r3, r0
 80098c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80098c2:	79fb      	ldrb	r3, [r7, #7]
 80098c4:	4a08      	ldr	r2, [pc, #32]	; (80098e8 <disk_status+0x30>)
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	79fa      	ldrb	r2, [r7, #7]
 80098d0:	4905      	ldr	r1, [pc, #20]	; (80098e8 <disk_status+0x30>)
 80098d2:	440a      	add	r2, r1
 80098d4:	7a12      	ldrb	r2, [r2, #8]
 80098d6:	4610      	mov	r0, r2
 80098d8:	4798      	blx	r3
 80098da:	4603      	mov	r3, r0
 80098dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80098de:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20002534 	.word	0x20002534

080098ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	4603      	mov	r3, r0
 80098f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80098fa:	79fb      	ldrb	r3, [r7, #7]
 80098fc:	4a0d      	ldr	r2, [pc, #52]	; (8009934 <disk_initialize+0x48>)
 80098fe:	5cd3      	ldrb	r3, [r2, r3]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d111      	bne.n	8009928 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	4a0b      	ldr	r2, [pc, #44]	; (8009934 <disk_initialize+0x48>)
 8009908:	2101      	movs	r1, #1
 800990a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800990c:	79fb      	ldrb	r3, [r7, #7]
 800990e:	4a09      	ldr	r2, [pc, #36]	; (8009934 <disk_initialize+0x48>)
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	79fa      	ldrb	r2, [r7, #7]
 800991a:	4906      	ldr	r1, [pc, #24]	; (8009934 <disk_initialize+0x48>)
 800991c:	440a      	add	r2, r1
 800991e:	7a12      	ldrb	r2, [r2, #8]
 8009920:	4610      	mov	r0, r2
 8009922:	4798      	blx	r3
 8009924:	4603      	mov	r3, r0
 8009926:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009928:	7bfb      	ldrb	r3, [r7, #15]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20002534 	.word	0x20002534

08009938 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009938:	b590      	push	{r4, r7, lr}
 800993a:	b087      	sub	sp, #28
 800993c:	af00      	add	r7, sp, #0
 800993e:	60b9      	str	r1, [r7, #8]
 8009940:	607a      	str	r2, [r7, #4]
 8009942:	603b      	str	r3, [r7, #0]
 8009944:	4603      	mov	r3, r0
 8009946:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009948:	7bfb      	ldrb	r3, [r7, #15]
 800994a:	4a0a      	ldr	r2, [pc, #40]	; (8009974 <disk_read+0x3c>)
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	689c      	ldr	r4, [r3, #8]
 8009954:	7bfb      	ldrb	r3, [r7, #15]
 8009956:	4a07      	ldr	r2, [pc, #28]	; (8009974 <disk_read+0x3c>)
 8009958:	4413      	add	r3, r2
 800995a:	7a18      	ldrb	r0, [r3, #8]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	68b9      	ldr	r1, [r7, #8]
 8009962:	47a0      	blx	r4
 8009964:	4603      	mov	r3, r0
 8009966:	75fb      	strb	r3, [r7, #23]
  return res;
 8009968:	7dfb      	ldrb	r3, [r7, #23]
}
 800996a:	4618      	mov	r0, r3
 800996c:	371c      	adds	r7, #28
 800996e:	46bd      	mov	sp, r7
 8009970:	bd90      	pop	{r4, r7, pc}
 8009972:	bf00      	nop
 8009974:	20002534 	.word	0x20002534

08009978 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009978:	b590      	push	{r4, r7, lr}
 800997a:	b087      	sub	sp, #28
 800997c:	af00      	add	r7, sp, #0
 800997e:	60b9      	str	r1, [r7, #8]
 8009980:	607a      	str	r2, [r7, #4]
 8009982:	603b      	str	r3, [r7, #0]
 8009984:	4603      	mov	r3, r0
 8009986:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009988:	7bfb      	ldrb	r3, [r7, #15]
 800998a:	4a0a      	ldr	r2, [pc, #40]	; (80099b4 <disk_write+0x3c>)
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	68dc      	ldr	r4, [r3, #12]
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	4a07      	ldr	r2, [pc, #28]	; (80099b4 <disk_write+0x3c>)
 8009998:	4413      	add	r3, r2
 800999a:	7a18      	ldrb	r0, [r3, #8]
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	68b9      	ldr	r1, [r7, #8]
 80099a2:	47a0      	blx	r4
 80099a4:	4603      	mov	r3, r0
 80099a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80099a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	371c      	adds	r7, #28
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd90      	pop	{r4, r7, pc}
 80099b2:	bf00      	nop
 80099b4:	20002534 	.word	0x20002534

080099b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	4603      	mov	r3, r0
 80099c0:	603a      	str	r2, [r7, #0]
 80099c2:	71fb      	strb	r3, [r7, #7]
 80099c4:	460b      	mov	r3, r1
 80099c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80099c8:	79fb      	ldrb	r3, [r7, #7]
 80099ca:	4a09      	ldr	r2, [pc, #36]	; (80099f0 <disk_ioctl+0x38>)
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	79fa      	ldrb	r2, [r7, #7]
 80099d6:	4906      	ldr	r1, [pc, #24]	; (80099f0 <disk_ioctl+0x38>)
 80099d8:	440a      	add	r2, r1
 80099da:	7a10      	ldrb	r0, [r2, #8]
 80099dc:	79b9      	ldrb	r1, [r7, #6]
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	4798      	blx	r3
 80099e2:	4603      	mov	r3, r0
 80099e4:	73fb      	strb	r3, [r7, #15]
  return res;
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	20002534 	.word	0x20002534

080099f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	3301      	adds	r3, #1
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009a04:	89fb      	ldrh	r3, [r7, #14]
 8009a06:	021b      	lsls	r3, r3, #8
 8009a08:	b21a      	sxth	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	b21b      	sxth	r3, r3
 8009a10:	4313      	orrs	r3, r2
 8009a12:	b21b      	sxth	r3, r3
 8009a14:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009a16:	89fb      	ldrh	r3, [r7, #14]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3714      	adds	r7, #20
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	3303      	adds	r3, #3
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	021b      	lsls	r3, r3, #8
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	3202      	adds	r2, #2
 8009a3c:	7812      	ldrb	r2, [r2, #0]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	021b      	lsls	r3, r3, #8
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	3201      	adds	r2, #1
 8009a4a:	7812      	ldrb	r2, [r2, #0]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	021b      	lsls	r3, r3, #8
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	7812      	ldrb	r2, [r2, #0]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]
	return rv;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b083      	sub	sp, #12
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	460b      	mov	r3, r1
 8009a74:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	1c5a      	adds	r2, r3, #1
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	887a      	ldrh	r2, [r7, #2]
 8009a7e:	b2d2      	uxtb	r2, r2
 8009a80:	701a      	strb	r2, [r3, #0]
 8009a82:	887b      	ldrh	r3, [r7, #2]
 8009a84:	0a1b      	lsrs	r3, r3, #8
 8009a86:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	607a      	str	r2, [r7, #4]
 8009a8e:	887a      	ldrh	r2, [r7, #2]
 8009a90:	b2d2      	uxtb	r2, r2
 8009a92:	701a      	strb	r2, [r3, #0]
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	1c5a      	adds	r2, r3, #1
 8009aae:	607a      	str	r2, [r7, #4]
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	b2d2      	uxtb	r2, r2
 8009ab4:	701a      	strb	r2, [r3, #0]
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	0a1b      	lsrs	r3, r3, #8
 8009aba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	1c5a      	adds	r2, r3, #1
 8009ac0:	607a      	str	r2, [r7, #4]
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	b2d2      	uxtb	r2, r2
 8009ac6:	701a      	strb	r2, [r3, #0]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	0a1b      	lsrs	r3, r3, #8
 8009acc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	1c5a      	adds	r2, r3, #1
 8009ad2:	607a      	str	r2, [r7, #4]
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	b2d2      	uxtb	r2, r2
 8009ad8:	701a      	strb	r2, [r3, #0]
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	0a1b      	lsrs	r3, r3, #8
 8009ade:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	1c5a      	adds	r2, r3, #1
 8009ae4:	607a      	str	r2, [r7, #4]
 8009ae6:	683a      	ldr	r2, [r7, #0]
 8009ae8:	b2d2      	uxtb	r2, r2
 8009aea:	701a      	strb	r2, [r3, #0]
}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009af8:	b480      	push	{r7}
 8009afa:	b087      	sub	sp, #28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00d      	beq.n	8009b2e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	1c53      	adds	r3, r2, #1
 8009b16:	613b      	str	r3, [r7, #16]
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	1c59      	adds	r1, r3, #1
 8009b1c:	6179      	str	r1, [r7, #20]
 8009b1e:	7812      	ldrb	r2, [r2, #0]
 8009b20:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	3b01      	subs	r3, #1
 8009b26:	607b      	str	r3, [r7, #4]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1f1      	bne.n	8009b12 <mem_cpy+0x1a>
	}
}
 8009b2e:	bf00      	nop
 8009b30:	371c      	adds	r7, #28
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009b3a:	b480      	push	{r7}
 8009b3c:	b087      	sub	sp, #28
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	60f8      	str	r0, [r7, #12]
 8009b42:	60b9      	str	r1, [r7, #8]
 8009b44:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	1c5a      	adds	r2, r3, #1
 8009b4e:	617a      	str	r2, [r7, #20]
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	b2d2      	uxtb	r2, r2
 8009b54:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	607b      	str	r3, [r7, #4]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1f3      	bne.n	8009b4a <mem_set+0x10>
}
 8009b62:	bf00      	nop
 8009b64:	bf00      	nop
 8009b66:	371c      	adds	r7, #28
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d009      	beq.n	8009b92 <lock_fs+0x22>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f001 f8c1 	bl	800ad0a <ff_req_grant>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d001      	beq.n	8009b92 <lock_fs+0x22>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e000      	b.n	8009b94 <lock_fs+0x24>
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00d      	beq.n	8009bca <unlock_fs+0x2e>
 8009bae:	78fb      	ldrb	r3, [r7, #3]
 8009bb0:	2b0c      	cmp	r3, #12
 8009bb2:	d00a      	beq.n	8009bca <unlock_fs+0x2e>
 8009bb4:	78fb      	ldrb	r3, [r7, #3]
 8009bb6:	2b0b      	cmp	r3, #11
 8009bb8:	d007      	beq.n	8009bca <unlock_fs+0x2e>
 8009bba:	78fb      	ldrb	r3, [r7, #3]
 8009bbc:	2b0f      	cmp	r3, #15
 8009bbe:	d004      	beq.n	8009bca <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f001 f8b5 	bl	800ad34 <ff_rel_grant>
	}
}
 8009bca:	bf00      	nop
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
	...

08009bd4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009bdc:	2300      	movs	r3, #0
 8009bde:	60fb      	str	r3, [r7, #12]
 8009be0:	e010      	b.n	8009c04 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009be2:	4a0d      	ldr	r2, [pc, #52]	; (8009c18 <clear_lock+0x44>)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	011b      	lsls	r3, r3, #4
 8009be8:	4413      	add	r3, r2
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d105      	bne.n	8009bfe <clear_lock+0x2a>
 8009bf2:	4a09      	ldr	r2, [pc, #36]	; (8009c18 <clear_lock+0x44>)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	011b      	lsls	r3, r3, #4
 8009bf8:	4413      	add	r3, r2
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3301      	adds	r3, #1
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d9eb      	bls.n	8009be2 <clear_lock+0xe>
	}
}
 8009c0a:	bf00      	nop
 8009c0c:	bf00      	nop
 8009c0e:	3714      	adds	r7, #20
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr
 8009c18:	20002514 	.word	0x20002514

08009c1c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	78db      	ldrb	r3, [r3, #3]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d034      	beq.n	8009c9a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c34:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	7858      	ldrb	r0, [r3, #1]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009c40:	2301      	movs	r3, #1
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	f7ff fe98 	bl	8009978 <disk_write>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d002      	beq.n	8009c54 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	73fb      	strb	r3, [r7, #15]
 8009c52:	e022      	b.n	8009c9a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	1ad2      	subs	r2, r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d217      	bcs.n	8009c9a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	789b      	ldrb	r3, [r3, #2]
 8009c6e:	613b      	str	r3, [r7, #16]
 8009c70:	e010      	b.n	8009c94 <sync_window+0x78>
					wsect += fs->fsize;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	4413      	add	r3, r2
 8009c7a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	7858      	ldrb	r0, [r3, #1]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009c86:	2301      	movs	r3, #1
 8009c88:	697a      	ldr	r2, [r7, #20]
 8009c8a:	f7ff fe75 	bl	8009978 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	3b01      	subs	r3, #1
 8009c92:	613b      	str	r3, [r7, #16]
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d8eb      	bhi.n	8009c72 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3718      	adds	r7, #24
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb6:	683a      	ldr	r2, [r7, #0]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d01b      	beq.n	8009cf4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff ffad 	bl	8009c1c <sync_window>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009cc6:	7bfb      	ldrb	r3, [r7, #15]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d113      	bne.n	8009cf4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	7858      	ldrb	r0, [r3, #1]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	683a      	ldr	r2, [r7, #0]
 8009cda:	f7ff fe2d 	bl	8009938 <disk_read>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d004      	beq.n	8009cee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	683a      	ldr	r2, [r7, #0]
 8009cf2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009cfe:	b480      	push	{r7}
 8009d00:	b087      	sub	sp, #28
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009d06:	f04f 33ff 	mov.w	r3, #4294967295
 8009d0a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d031      	beq.n	8009d78 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	617b      	str	r3, [r7, #20]
 8009d1a:	e002      	b.n	8009d22 <get_ldnumber+0x24>
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	617b      	str	r3, [r7, #20]
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	2b1f      	cmp	r3, #31
 8009d28:	d903      	bls.n	8009d32 <get_ldnumber+0x34>
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	2b3a      	cmp	r3, #58	; 0x3a
 8009d30:	d1f4      	bne.n	8009d1c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	2b3a      	cmp	r3, #58	; 0x3a
 8009d38:	d11c      	bne.n	8009d74 <get_ldnumber+0x76>
			tp = *path;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	1c5a      	adds	r2, r3, #1
 8009d44:	60fa      	str	r2, [r7, #12]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	3b30      	subs	r3, #48	; 0x30
 8009d4a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2b09      	cmp	r3, #9
 8009d50:	d80e      	bhi.n	8009d70 <get_ldnumber+0x72>
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d10a      	bne.n	8009d70 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d107      	bne.n	8009d70 <get_ldnumber+0x72>
					vol = (int)i;
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	3301      	adds	r3, #1
 8009d68:	617b      	str	r3, [r7, #20]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	697a      	ldr	r2, [r7, #20]
 8009d6e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	e002      	b.n	8009d7a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009d74:	2300      	movs	r3, #0
 8009d76:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009d78:	693b      	ldr	r3, [r7, #16]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	371c      	adds	r7, #28
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
	...

08009d88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	70da      	strb	r2, [r3, #3]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009da0:	6839      	ldr	r1, [r7, #0]
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f7ff ff7e 	bl	8009ca4 <move_window>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <check_fs+0x2a>
 8009dae:	2304      	movs	r3, #4
 8009db0:	e038      	b.n	8009e24 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	3338      	adds	r3, #56	; 0x38
 8009db6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7ff fe1a 	bl	80099f4 <ld_word>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d001      	beq.n	8009dd0 <check_fs+0x48>
 8009dcc:	2303      	movs	r3, #3
 8009dce:	e029      	b.n	8009e24 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009dd6:	2be9      	cmp	r3, #233	; 0xe9
 8009dd8:	d009      	beq.n	8009dee <check_fs+0x66>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009de0:	2beb      	cmp	r3, #235	; 0xeb
 8009de2:	d11e      	bne.n	8009e22 <check_fs+0x9a>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009dea:	2b90      	cmp	r3, #144	; 0x90
 8009dec:	d119      	bne.n	8009e22 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	3338      	adds	r3, #56	; 0x38
 8009df2:	3336      	adds	r3, #54	; 0x36
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7ff fe15 	bl	8009a24 <ld_dword>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009e00:	4a0a      	ldr	r2, [pc, #40]	; (8009e2c <check_fs+0xa4>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d101      	bne.n	8009e0a <check_fs+0x82>
 8009e06:	2300      	movs	r3, #0
 8009e08:	e00c      	b.n	8009e24 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	3338      	adds	r3, #56	; 0x38
 8009e0e:	3352      	adds	r3, #82	; 0x52
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7ff fe07 	bl	8009a24 <ld_dword>
 8009e16:	4603      	mov	r3, r0
 8009e18:	4a05      	ldr	r2, [pc, #20]	; (8009e30 <check_fs+0xa8>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d101      	bne.n	8009e22 <check_fs+0x9a>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	e000      	b.n	8009e24 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009e22:	2302      	movs	r3, #2
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	00544146 	.word	0x00544146
 8009e30:	33544146 	.word	0x33544146

08009e34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b096      	sub	sp, #88	; 0x58
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2200      	movs	r2, #0
 8009e46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f7ff ff58 	bl	8009cfe <get_ldnumber>
 8009e4e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	da01      	bge.n	8009e5a <find_volume+0x26>
 8009e56:	230b      	movs	r3, #11
 8009e58:	e235      	b.n	800a2c6 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009e5a:	4aa5      	ldr	r2, [pc, #660]	; (800a0f0 <find_volume+0x2bc>)
 8009e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d101      	bne.n	8009e6e <find_volume+0x3a>
 8009e6a:	230c      	movs	r3, #12
 8009e6c:	e22b      	b.n	800a2c6 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8009e6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e70:	f7ff fe7e 	bl	8009b70 <lock_fs>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d101      	bne.n	8009e7e <find_volume+0x4a>
 8009e7a:	230f      	movs	r3, #15
 8009e7c:	e223      	b.n	800a2c6 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e82:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009e84:	79fb      	ldrb	r3, [r7, #7]
 8009e86:	f023 0301 	bic.w	r3, r3, #1
 8009e8a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d01a      	beq.n	8009eca <find_volume+0x96>
		stat = disk_status(fs->drv);
 8009e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e96:	785b      	ldrb	r3, [r3, #1]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7ff fd0d 	bl	80098b8 <disk_status>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009ea4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10c      	bne.n	8009eca <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009eb0:	79fb      	ldrb	r3, [r7, #7]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d007      	beq.n	8009ec6 <find_volume+0x92>
 8009eb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009eba:	f003 0304 	and.w	r3, r3, #4
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8009ec2:	230a      	movs	r3, #10
 8009ec4:	e1ff      	b.n	800a2c6 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	e1fd      	b.n	800a2c6 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ecc:	2200      	movs	r2, #0
 8009ece:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eda:	785b      	ldrb	r3, [r3, #1]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7ff fd05 	bl	80098ec <disk_initialize>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009ee8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009eec:	f003 0301 	and.w	r3, r3, #1
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d001      	beq.n	8009ef8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	e1e6      	b.n	800a2c6 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009ef8:	79fb      	ldrb	r3, [r7, #7]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d007      	beq.n	8009f0e <find_volume+0xda>
 8009efe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f02:	f003 0304 	and.w	r3, r3, #4
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009f0a:	230a      	movs	r3, #10
 8009f0c:	e1db      	b.n	800a2c6 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009f12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f16:	f7ff ff37 	bl	8009d88 <check_fs>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009f20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	d149      	bne.n	8009fbc <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009f28:	2300      	movs	r3, #0
 8009f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8009f2c:	e01e      	b.n	8009f6c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f30:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f36:	011b      	lsls	r3, r3, #4
 8009f38:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009f3c:	4413      	add	r3, r2
 8009f3e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f42:	3304      	adds	r3, #4
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d006      	beq.n	8009f58 <find_volume+0x124>
 8009f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4c:	3308      	adds	r3, #8
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7ff fd68 	bl	8009a24 <ld_dword>
 8009f54:	4602      	mov	r2, r0
 8009f56:	e000      	b.n	8009f5a <find_volume+0x126>
 8009f58:	2200      	movs	r2, #0
 8009f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	3358      	adds	r3, #88	; 0x58
 8009f60:	443b      	add	r3, r7
 8009f62:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f68:	3301      	adds	r3, #1
 8009f6a:	643b      	str	r3, [r7, #64]	; 0x40
 8009f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f6e:	2b03      	cmp	r3, #3
 8009f70:	d9dd      	bls.n	8009f2e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009f72:	2300      	movs	r3, #0
 8009f74:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <find_volume+0x14e>
 8009f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	3358      	adds	r3, #88	; 0x58
 8009f88:	443b      	add	r3, r7
 8009f8a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009f8e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d005      	beq.n	8009fa2 <find_volume+0x16e>
 8009f96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f9a:	f7ff fef5 	bl	8009d88 <check_fs>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	e000      	b.n	8009fa4 <find_volume+0x170>
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009fa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d905      	bls.n	8009fbc <find_volume+0x188>
 8009fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	643b      	str	r3, [r7, #64]	; 0x40
 8009fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fb8:	2b03      	cmp	r3, #3
 8009fba:	d9e2      	bls.n	8009f82 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009fbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fc0:	2b04      	cmp	r3, #4
 8009fc2:	d101      	bne.n	8009fc8 <find_volume+0x194>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e17e      	b.n	800a2c6 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009fc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d901      	bls.n	8009fd4 <find_volume+0x1a0>
 8009fd0:	230d      	movs	r3, #13
 8009fd2:	e178      	b.n	800a2c6 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd6:	3338      	adds	r3, #56	; 0x38
 8009fd8:	330b      	adds	r3, #11
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7ff fd0a 	bl	80099f4 <ld_word>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fe6:	d001      	beq.n	8009fec <find_volume+0x1b8>
 8009fe8:	230d      	movs	r3, #13
 8009fea:	e16c      	b.n	800a2c6 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fee:	3338      	adds	r3, #56	; 0x38
 8009ff0:	3316      	adds	r3, #22
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7ff fcfe 	bl	80099f4 <ld_word>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d106      	bne.n	800a010 <find_volume+0x1dc>
 800a002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a004:	3338      	adds	r3, #56	; 0x38
 800a006:	3324      	adds	r3, #36	; 0x24
 800a008:	4618      	mov	r0, r3
 800a00a:	f7ff fd0b 	bl	8009a24 <ld_dword>
 800a00e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a012:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a014:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a018:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a022:	789b      	ldrb	r3, [r3, #2]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d005      	beq.n	800a034 <find_volume+0x200>
 800a028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02a:	789b      	ldrb	r3, [r3, #2]
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	d001      	beq.n	800a034 <find_volume+0x200>
 800a030:	230d      	movs	r3, #13
 800a032:	e148      	b.n	800a2c6 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a036:	789b      	ldrb	r3, [r3, #2]
 800a038:	461a      	mov	r2, r3
 800a03a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a03c:	fb02 f303 	mul.w	r3, r2, r3
 800a040:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a048:	b29a      	uxth	r2, r3
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a050:	895b      	ldrh	r3, [r3, #10]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d008      	beq.n	800a068 <find_volume+0x234>
 800a056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a058:	895b      	ldrh	r3, [r3, #10]
 800a05a:	461a      	mov	r2, r3
 800a05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05e:	895b      	ldrh	r3, [r3, #10]
 800a060:	3b01      	subs	r3, #1
 800a062:	4013      	ands	r3, r2
 800a064:	2b00      	cmp	r3, #0
 800a066:	d001      	beq.n	800a06c <find_volume+0x238>
 800a068:	230d      	movs	r3, #13
 800a06a:	e12c      	b.n	800a2c6 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06e:	3338      	adds	r3, #56	; 0x38
 800a070:	3311      	adds	r3, #17
 800a072:	4618      	mov	r0, r3
 800a074:	f7ff fcbe 	bl	80099f4 <ld_word>
 800a078:	4603      	mov	r3, r0
 800a07a:	461a      	mov	r2, r3
 800a07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a082:	891b      	ldrh	r3, [r3, #8]
 800a084:	f003 030f 	and.w	r3, r3, #15
 800a088:	b29b      	uxth	r3, r3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <find_volume+0x25e>
 800a08e:	230d      	movs	r3, #13
 800a090:	e119      	b.n	800a2c6 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a094:	3338      	adds	r3, #56	; 0x38
 800a096:	3313      	adds	r3, #19
 800a098:	4618      	mov	r0, r3
 800a09a:	f7ff fcab 	bl	80099f4 <ld_word>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a0a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d106      	bne.n	800a0b6 <find_volume+0x282>
 800a0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0aa:	3338      	adds	r3, #56	; 0x38
 800a0ac:	3320      	adds	r3, #32
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff fcb8 	bl	8009a24 <ld_dword>
 800a0b4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b8:	3338      	adds	r3, #56	; 0x38
 800a0ba:	330e      	adds	r3, #14
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7ff fc99 	bl	80099f4 <ld_word>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a0c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d101      	bne.n	800a0d0 <find_volume+0x29c>
 800a0cc:	230d      	movs	r3, #13
 800a0ce:	e0fa      	b.n	800a2c6 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a0d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0d4:	4413      	add	r3, r2
 800a0d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0d8:	8912      	ldrh	r2, [r2, #8]
 800a0da:	0912      	lsrs	r2, r2, #4
 800a0dc:	b292      	uxth	r2, r2
 800a0de:	4413      	add	r3, r2
 800a0e0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a0e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d204      	bcs.n	800a0f4 <find_volume+0x2c0>
 800a0ea:	230d      	movs	r3, #13
 800a0ec:	e0eb      	b.n	800a2c6 <find_volume+0x492>
 800a0ee:	bf00      	nop
 800a0f0:	2000250c 	.word	0x2000250c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a0f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0fc:	8952      	ldrh	r2, [r2, #10]
 800a0fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800a102:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a106:	2b00      	cmp	r3, #0
 800a108:	d101      	bne.n	800a10e <find_volume+0x2da>
 800a10a:	230d      	movs	r3, #13
 800a10c:	e0db      	b.n	800a2c6 <find_volume+0x492>
		fmt = FS_FAT32;
 800a10e:	2303      	movs	r3, #3
 800a110:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d802      	bhi.n	800a124 <find_volume+0x2f0>
 800a11e:	2302      	movs	r3, #2
 800a120:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d802      	bhi.n	800a134 <find_volume+0x300>
 800a12e:	2301      	movs	r3, #1
 800a130:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	1c9a      	adds	r2, r3, #2
 800a138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a140:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a142:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a146:	441a      	add	r2, r3
 800a148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a14c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a150:	441a      	add	r2, r3
 800a152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a154:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a156:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a15a:	2b03      	cmp	r3, #3
 800a15c:	d11e      	bne.n	800a19c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a160:	3338      	adds	r3, #56	; 0x38
 800a162:	332a      	adds	r3, #42	; 0x2a
 800a164:	4618      	mov	r0, r3
 800a166:	f7ff fc45 	bl	80099f4 <ld_word>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <find_volume+0x340>
 800a170:	230d      	movs	r3, #13
 800a172:	e0a8      	b.n	800a2c6 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a176:	891b      	ldrh	r3, [r3, #8]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <find_volume+0x34c>
 800a17c:	230d      	movs	r3, #13
 800a17e:	e0a2      	b.n	800a2c6 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a182:	3338      	adds	r3, #56	; 0x38
 800a184:	332c      	adds	r3, #44	; 0x2c
 800a186:	4618      	mov	r0, r3
 800a188:	f7ff fc4c 	bl	8009a24 <ld_dword>
 800a18c:	4602      	mov	r2, r0
 800a18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a190:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a194:	69db      	ldr	r3, [r3, #28]
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	647b      	str	r3, [r7, #68]	; 0x44
 800a19a:	e01f      	b.n	800a1dc <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19e:	891b      	ldrh	r3, [r3, #8]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <find_volume+0x374>
 800a1a4:	230d      	movs	r3, #13
 800a1a6:	e08e      	b.n	800a2c6 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1ae:	441a      	add	r2, r3
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a1b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d103      	bne.n	800a1c4 <find_volume+0x390>
 800a1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1be:	69db      	ldr	r3, [r3, #28]
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	e00a      	b.n	800a1da <find_volume+0x3a6>
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c6:	69da      	ldr	r2, [r3, #28]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	005b      	lsls	r3, r3, #1
 800a1cc:	4413      	add	r3, r2
 800a1ce:	085a      	lsrs	r2, r3, #1
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d2:	69db      	ldr	r3, [r3, #28]
 800a1d4:	f003 0301 	and.w	r3, r3, #1
 800a1d8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a1da:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1de:	6a1a      	ldr	r2, [r3, #32]
 800a1e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1e2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a1e6:	0a5b      	lsrs	r3, r3, #9
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d201      	bcs.n	800a1f0 <find_volume+0x3bc>
 800a1ec:	230d      	movs	r3, #13
 800a1ee:	e06a      	b.n	800a2c6 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f6:	619a      	str	r2, [r3, #24]
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fa:	699a      	ldr	r2, [r3, #24]
 800a1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fe:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a202:	2280      	movs	r2, #128	; 0x80
 800a204:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a206:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d149      	bne.n	800a2a2 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a210:	3338      	adds	r3, #56	; 0x38
 800a212:	3330      	adds	r3, #48	; 0x30
 800a214:	4618      	mov	r0, r3
 800a216:	f7ff fbed 	bl	80099f4 <ld_word>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d140      	bne.n	800a2a2 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a222:	3301      	adds	r3, #1
 800a224:	4619      	mov	r1, r3
 800a226:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a228:	f7ff fd3c 	bl	8009ca4 <move_window>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d137      	bne.n	800a2a2 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800a232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a234:	2200      	movs	r2, #0
 800a236:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23a:	3338      	adds	r3, #56	; 0x38
 800a23c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a240:	4618      	mov	r0, r3
 800a242:	f7ff fbd7 	bl	80099f4 <ld_word>
 800a246:	4603      	mov	r3, r0
 800a248:	461a      	mov	r2, r3
 800a24a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a24e:	429a      	cmp	r2, r3
 800a250:	d127      	bne.n	800a2a2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a254:	3338      	adds	r3, #56	; 0x38
 800a256:	4618      	mov	r0, r3
 800a258:	f7ff fbe4 	bl	8009a24 <ld_dword>
 800a25c:	4603      	mov	r3, r0
 800a25e:	4a1c      	ldr	r2, [pc, #112]	; (800a2d0 <find_volume+0x49c>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d11e      	bne.n	800a2a2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a266:	3338      	adds	r3, #56	; 0x38
 800a268:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7ff fbd9 	bl	8009a24 <ld_dword>
 800a272:	4603      	mov	r3, r0
 800a274:	4a17      	ldr	r2, [pc, #92]	; (800a2d4 <find_volume+0x4a0>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d113      	bne.n	800a2a2 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27c:	3338      	adds	r3, #56	; 0x38
 800a27e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a282:	4618      	mov	r0, r3
 800a284:	f7ff fbce 	bl	8009a24 <ld_dword>
 800a288:	4602      	mov	r2, r0
 800a28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a290:	3338      	adds	r3, #56	; 0x38
 800a292:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a296:	4618      	mov	r0, r3
 800a298:	f7ff fbc4 	bl	8009a24 <ld_dword>
 800a29c:	4602      	mov	r2, r0
 800a29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a0:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a2a8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a2aa:	4b0b      	ldr	r3, [pc, #44]	; (800a2d8 <find_volume+0x4a4>)
 800a2ac:	881b      	ldrh	r3, [r3, #0]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	4b09      	ldr	r3, [pc, #36]	; (800a2d8 <find_volume+0x4a4>)
 800a2b4:	801a      	strh	r2, [r3, #0]
 800a2b6:	4b08      	ldr	r3, [pc, #32]	; (800a2d8 <find_volume+0x4a4>)
 800a2b8:	881a      	ldrh	r2, [r3, #0]
 800a2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2bc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a2be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2c0:	f7ff fc88 	bl	8009bd4 <clear_lock>
#endif
	return FR_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3758      	adds	r7, #88	; 0x58
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	41615252 	.word	0x41615252
 800a2d4:	61417272 	.word	0x61417272
 800a2d8:	20002510 	.word	0x20002510

0800a2dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b088      	sub	sp, #32
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a2ee:	f107 0310 	add.w	r3, r7, #16
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7ff fd03 	bl	8009cfe <get_ldnumber>
 800a2f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	da01      	bge.n	800a304 <f_mount+0x28>
 800a300:	230b      	movs	r3, #11
 800a302:	e048      	b.n	800a396 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a304:	4a26      	ldr	r2, [pc, #152]	; (800a3a0 <f_mount+0xc4>)
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a30c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00f      	beq.n	800a334 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a314:	69b8      	ldr	r0, [r7, #24]
 800a316:	f7ff fc5d 	bl	8009bd4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	691b      	ldr	r3, [r3, #16]
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 fce7 	bl	800acf2 <ff_del_syncobj>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <f_mount+0x52>
 800a32a:	2302      	movs	r3, #2
 800a32c:	e033      	b.n	800a396 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	2200      	movs	r2, #0
 800a332:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00f      	beq.n	800a35a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	b2da      	uxtb	r2, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	3310      	adds	r3, #16
 800a348:	4619      	mov	r1, r3
 800a34a:	4610      	mov	r0, r2
 800a34c:	f000 fcb1 	bl	800acb2 <ff_cre_syncobj>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <f_mount+0x7e>
 800a356:	2302      	movs	r3, #2
 800a358:	e01d      	b.n	800a396 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	4910      	ldr	r1, [pc, #64]	; (800a3a0 <f_mount+0xc4>)
 800a35e:	69fb      	ldr	r3, [r7, #28]
 800a360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d002      	beq.n	800a370 <f_mount+0x94>
 800a36a:	79fb      	ldrb	r3, [r7, #7]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d001      	beq.n	800a374 <f_mount+0x98>
 800a370:	2300      	movs	r3, #0
 800a372:	e010      	b.n	800a396 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a374:	f107 010c 	add.w	r1, r7, #12
 800a378:	f107 0308 	add.w	r3, r7, #8
 800a37c:	2200      	movs	r2, #0
 800a37e:	4618      	mov	r0, r3
 800a380:	f7ff fd58 	bl	8009e34 <find_volume>
 800a384:	4603      	mov	r3, r0
 800a386:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	7dfa      	ldrb	r2, [r7, #23]
 800a38c:	4611      	mov	r1, r2
 800a38e:	4618      	mov	r0, r3
 800a390:	f7ff fc04 	bl	8009b9c <unlock_fs>
 800a394:	7dfb      	ldrb	r3, [r7, #23]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3720      	adds	r7, #32
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	2000250c 	.word	0x2000250c

0800a3a4 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800a3a4:	b590      	push	{r4, r7, lr}
 800a3a6:	b09d      	sub	sp, #116	; 0x74
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	607a      	str	r2, [r7, #4]
 800a3ae:	603b      	str	r3, [r7, #0]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800a3b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3bc:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800a3be:	f107 030c 	add.w	r3, r7, #12
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7ff fc9b 	bl	8009cfe <get_ldnumber>
 800a3c8:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a3ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	da02      	bge.n	800a3d6 <f_mkfs+0x32>
 800a3d0:	230b      	movs	r3, #11
 800a3d2:	f000 bc0d 	b.w	800abf0 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800a3d6:	4a94      	ldr	r2, [pc, #592]	; (800a628 <f_mkfs+0x284>)
 800a3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d005      	beq.n	800a3ee <f_mkfs+0x4a>
 800a3e2:	4a91      	ldr	r2, [pc, #580]	; (800a628 <f_mkfs+0x284>)
 800a3e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800a3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800a3fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7ff fa74 	bl	80098ec <disk_initialize>
 800a404:	4603      	mov	r3, r0
 800a406:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800a40a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a40e:	f003 0301 	and.w	r3, r3, #1
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <f_mkfs+0x76>
 800a416:	2303      	movs	r3, #3
 800a418:	e3ea      	b.n	800abf0 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a41a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a41e:	f003 0304 	and.w	r3, r3, #4
 800a422:	2b00      	cmp	r3, #0
 800a424:	d001      	beq.n	800a42a <f_mkfs+0x86>
 800a426:	230a      	movs	r3, #10
 800a428:	e3e2      	b.n	800abf0 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800a42a:	f107 0214 	add.w	r2, r7, #20
 800a42e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a432:	2103      	movs	r1, #3
 800a434:	4618      	mov	r0, r3
 800a436:	f7ff fabf 	bl	80099b8 <disk_ioctl>
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d10c      	bne.n	800a45a <f_mkfs+0xb6>
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d009      	beq.n	800a45a <f_mkfs+0xb6>
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a44c:	d805      	bhi.n	800a45a <f_mkfs+0xb6>
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	1e5a      	subs	r2, r3, #1
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	4013      	ands	r3, r2
 800a456:	2b00      	cmp	r3, #0
 800a458:	d001      	beq.n	800a45e <f_mkfs+0xba>
 800a45a:	2301      	movs	r3, #1
 800a45c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800a45e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a462:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <f_mkfs+0xce>
 800a46a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d309      	bcc.n	800a486 <f_mkfs+0xe2>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a478:	d805      	bhi.n	800a486 <f_mkfs+0xe2>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	1e5a      	subs	r2, r3, #1
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4013      	ands	r3, r2
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <f_mkfs+0xe6>
 800a486:	2313      	movs	r3, #19
 800a488:	e3b2      	b.n	800abf0 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800a48a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a492:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800a498:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a49a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a49e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800a4a4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a8:	fb02 f303 	mul.w	r3, r2, r3
 800a4ac:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800a4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d101      	bne.n	800a4b8 <f_mkfs+0x114>
 800a4b4:	230e      	movs	r3, #14
 800a4b6:	e39b      	b.n	800abf0 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800a4b8:	f107 0210 	add.w	r2, r7, #16
 800a4bc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a4c0:	2101      	movs	r1, #1
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7ff fa78 	bl	80099b8 <disk_ioctl>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <f_mkfs+0x12e>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e38e      	b.n	800abf0 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800a4d2:	7afb      	ldrb	r3, [r7, #11]
 800a4d4:	f003 0308 	and.w	r3, r3, #8
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <f_mkfs+0x13c>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	e000      	b.n	800a4e2 <f_mkfs+0x13e>
 800a4e0:	233f      	movs	r3, #63	; 0x3f
 800a4e2:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d901      	bls.n	800a4f0 <f_mkfs+0x14c>
 800a4ec:	230e      	movs	r3, #14
 800a4ee:	e37f      	b.n	800abf0 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800a4f0:	693a      	ldr	r2, [r7, #16]
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	1ad3      	subs	r3, r2, r3
 800a4f6:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	2b7f      	cmp	r3, #127	; 0x7f
 800a4fc:	d801      	bhi.n	800a502 <f_mkfs+0x15e>
 800a4fe:	230e      	movs	r3, #14
 800a500:	e376      	b.n	800abf0 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b80      	cmp	r3, #128	; 0x80
 800a506:	d901      	bls.n	800a50c <f_mkfs+0x168>
 800a508:	2313      	movs	r3, #19
 800a50a:	e371      	b.n	800abf0 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800a50c:	7afb      	ldrb	r3, [r7, #11]
 800a50e:	f003 0302 	and.w	r3, r3, #2
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00d      	beq.n	800a532 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800a516:	7afb      	ldrb	r3, [r7, #11]
 800a518:	f003 0307 	and.w	r3, r3, #7
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d004      	beq.n	800a52a <f_mkfs+0x186>
 800a520:	7afb      	ldrb	r3, [r7, #11]
 800a522:	f003 0301 	and.w	r3, r3, #1
 800a526:	2b00      	cmp	r3, #0
 800a528:	d103      	bne.n	800a532 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800a52a:	2303      	movs	r3, #3
 800a52c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a530:	e009      	b.n	800a546 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800a532:	7afb      	ldrb	r3, [r7, #11]
 800a534:	f003 0301 	and.w	r3, r3, #1
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d101      	bne.n	800a540 <f_mkfs+0x19c>
 800a53c:	2313      	movs	r3, #19
 800a53e:	e357      	b.n	800abf0 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800a540:	2302      	movs	r3, #2
 800a542:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800a54a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a54e:	2b03      	cmp	r3, #3
 800a550:	d13c      	bne.n	800a5cc <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800a552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a554:	2b00      	cmp	r3, #0
 800a556:	d11b      	bne.n	800a590 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	0c5b      	lsrs	r3, r3, #17
 800a55c:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a55e:	2300      	movs	r3, #0
 800a560:	64bb      	str	r3, [r7, #72]	; 0x48
 800a562:	2301      	movs	r3, #1
 800a564:	653b      	str	r3, [r7, #80]	; 0x50
 800a566:	e005      	b.n	800a574 <f_mkfs+0x1d0>
 800a568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a56a:	3301      	adds	r3, #1
 800a56c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a56e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a570:	005b      	lsls	r3, r3, #1
 800a572:	653b      	str	r3, [r7, #80]	; 0x50
 800a574:	4a2d      	ldr	r2, [pc, #180]	; (800a62c <f_mkfs+0x288>)
 800a576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d007      	beq.n	800a590 <f_mkfs+0x1ec>
 800a580:	4a2a      	ldr	r2, [pc, #168]	; (800a62c <f_mkfs+0x288>)
 800a582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a588:	461a      	mov	r2, r3
 800a58a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d2eb      	bcs.n	800a568 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800a590:	693a      	ldr	r2, [r7, #16]
 800a592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a594:	fbb2 f3f3 	udiv	r3, r2, r3
 800a598:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800a59a:	6a3b      	ldr	r3, [r7, #32]
 800a59c:	3302      	adds	r3, #2
 800a59e:	009a      	lsls	r2, r3, #2
 800a5a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a5a2:	4413      	add	r3, r2
 800a5a4:	1e5a      	subs	r2, r3, #1
 800a5a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a5a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ac:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800a5ae:	2320      	movs	r3, #32
 800a5b0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800a5b6:	6a3b      	ldr	r3, [r7, #32]
 800a5b8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d903      	bls.n	800a5c8 <f_mkfs+0x224>
 800a5c0:	6a3b      	ldr	r3, [r7, #32]
 800a5c2:	4a1b      	ldr	r2, [pc, #108]	; (800a630 <f_mkfs+0x28c>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d952      	bls.n	800a66e <f_mkfs+0x2ca>
 800a5c8:	230e      	movs	r3, #14
 800a5ca:	e311      	b.n	800abf0 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800a5cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d11b      	bne.n	800a60a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	0b1b      	lsrs	r3, r3, #12
 800a5d6:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a5d8:	2300      	movs	r3, #0
 800a5da:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5dc:	2301      	movs	r3, #1
 800a5de:	653b      	str	r3, [r7, #80]	; 0x50
 800a5e0:	e005      	b.n	800a5ee <f_mkfs+0x24a>
 800a5e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5ea:	005b      	lsls	r3, r3, #1
 800a5ec:	653b      	str	r3, [r7, #80]	; 0x50
 800a5ee:	4a11      	ldr	r2, [pc, #68]	; (800a634 <f_mkfs+0x290>)
 800a5f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d007      	beq.n	800a60a <f_mkfs+0x266>
 800a5fa:	4a0e      	ldr	r2, [pc, #56]	; (800a634 <f_mkfs+0x290>)
 800a5fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a602:	461a      	mov	r2, r3
 800a604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a606:	4293      	cmp	r3, r2
 800a608:	d2eb      	bcs.n	800a5e2 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a60e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a612:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800a614:	6a3b      	ldr	r3, [r7, #32]
 800a616:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d90c      	bls.n	800a638 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	3302      	adds	r3, #2
 800a622:	005b      	lsls	r3, r3, #1
 800a624:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a626:	e012      	b.n	800a64e <f_mkfs+0x2aa>
 800a628:	2000250c 	.word	0x2000250c
 800a62c:	080157fc 	.word	0x080157fc
 800a630:	0ffffff5 	.word	0x0ffffff5
 800a634:	0801580c 	.word	0x0801580c
				} else {
					fmt = FS_FAT12;
 800a638:	2301      	movs	r3, #1
 800a63a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800a63e:	6a3a      	ldr	r2, [r7, #32]
 800a640:	4613      	mov	r3, r2
 800a642:	005b      	lsls	r3, r3, #1
 800a644:	4413      	add	r3, r2
 800a646:	3301      	adds	r3, #1
 800a648:	085b      	lsrs	r3, r3, #1
 800a64a:	3303      	adds	r3, #3
 800a64c:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800a64e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a652:	4413      	add	r3, r2
 800a654:	1e5a      	subs	r2, r3, #1
 800a656:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a658:	fbb2 f3f3 	udiv	r3, r2, r3
 800a65c:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800a65e:	2301      	movs	r3, #1
 800a660:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800a662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a664:	015a      	lsls	r2, r3, #5
 800a666:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a668:	fbb2 f3f3 	udiv	r3, r2, r3
 800a66c:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800a66e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a672:	4413      	add	r3, r2
 800a674:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800a676:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a678:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a67a:	fb03 f202 	mul.w	r2, r3, r2
 800a67e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a680:	4413      	add	r3, r2
 800a682:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a684:	4413      	add	r3, r2
 800a686:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800a688:	697a      	ldr	r2, [r7, #20]
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	4413      	add	r3, r2
 800a68e:	1e5a      	subs	r2, r3, #1
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	425b      	negs	r3, r3
 800a694:	401a      	ands	r2, r3
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800a69c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a6a0:	2b03      	cmp	r3, #3
 800a6a2:	d108      	bne.n	800a6b6 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800a6a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a6a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6a8:	4413      	add	r3, r2
 800a6aa:	657b      	str	r3, [r7, #84]	; 0x54
 800a6ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6b0:	4413      	add	r3, r2
 800a6b2:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6b4:	e006      	b.n	800a6c4 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800a6b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a6b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a6c0:	4413      	add	r3, r2
 800a6c2:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800a6c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6c6:	011a      	lsls	r2, r3, #4
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	441a      	add	r2, r3
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ce:	1ad2      	subs	r2, r2, r3
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d901      	bls.n	800a6da <f_mkfs+0x336>
 800a6d6:	230e      	movs	r3, #14
 800a6d8:	e28a      	b.n	800abf0 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800a6da:	693a      	ldr	r2, [r7, #16]
 800a6dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6de:	1ad2      	subs	r2, r2, r3
 800a6e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a6e4:	fb01 f303 	mul.w	r3, r1, r3
 800a6e8:	1ad2      	subs	r2, r2, r3
 800a6ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6ec:	1ad2      	subs	r2, r2, r3
 800a6ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f4:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800a6f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a6fa:	2b03      	cmp	r3, #3
 800a6fc:	d10f      	bne.n	800a71e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a704:	4293      	cmp	r3, r2
 800a706:	d80a      	bhi.n	800a71e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d105      	bne.n	800a71a <f_mkfs+0x376>
 800a70e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a710:	085b      	lsrs	r3, r3, #1
 800a712:	607b      	str	r3, [r7, #4]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d144      	bne.n	800a7a4 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800a71a:	230e      	movs	r3, #14
 800a71c:	e268      	b.n	800abf0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800a71e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a722:	2b02      	cmp	r3, #2
 800a724:	d133      	bne.n	800a78e <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d91e      	bls.n	800a76e <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d107      	bne.n	800a746 <f_mkfs+0x3a2>
 800a736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	2b40      	cmp	r3, #64	; 0x40
 800a73c:	d803      	bhi.n	800a746 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800a73e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a740:	005b      	lsls	r3, r3, #1
 800a742:	607b      	str	r3, [r7, #4]
 800a744:	e033      	b.n	800a7ae <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800a746:	7afb      	ldrb	r3, [r7, #11]
 800a748:	f003 0302 	and.w	r3, r3, #2
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d003      	beq.n	800a758 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800a750:	2303      	movs	r3, #3
 800a752:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a756:	e02a      	b.n	800a7ae <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d105      	bne.n	800a76a <f_mkfs+0x3c6>
 800a75e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a760:	005b      	lsls	r3, r3, #1
 800a762:	607b      	str	r3, [r7, #4]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2b80      	cmp	r3, #128	; 0x80
 800a768:	d91e      	bls.n	800a7a8 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800a76a:	230e      	movs	r3, #14
 800a76c:	e240      	b.n	800abf0 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800a76e:	6a3b      	ldr	r3, [r7, #32]
 800a770:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a774:	4293      	cmp	r3, r2
 800a776:	d80a      	bhi.n	800a78e <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d105      	bne.n	800a78a <f_mkfs+0x3e6>
 800a77e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a780:	005b      	lsls	r3, r3, #1
 800a782:	607b      	str	r3, [r7, #4]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b80      	cmp	r3, #128	; 0x80
 800a788:	d910      	bls.n	800a7ac <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800a78a:	230e      	movs	r3, #14
 800a78c:	e230      	b.n	800abf0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800a78e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a792:	2b01      	cmp	r3, #1
 800a794:	d10c      	bne.n	800a7b0 <f_mkfs+0x40c>
 800a796:	6a3b      	ldr	r3, [r7, #32]
 800a798:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d907      	bls.n	800a7b0 <f_mkfs+0x40c>
 800a7a0:	230e      	movs	r3, #14
 800a7a2:	e225      	b.n	800abf0 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a7a4:	bf00      	nop
 800a7a6:	e6ce      	b.n	800a546 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a7a8:	bf00      	nop
 800a7aa:	e6cc      	b.n	800a546 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a7ac:	bf00      	nop
			pau = au;
 800a7ae:	e6ca      	b.n	800a546 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800a7b0:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800a7b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7ba:	f7ff f9be 	bl	8009b3a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800a7be:	220b      	movs	r2, #11
 800a7c0:	49b2      	ldr	r1, [pc, #712]	; (800aa8c <f_mkfs+0x6e8>)
 800a7c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7c4:	f7ff f998 	bl	8009af8 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ca:	330b      	adds	r3, #11
 800a7cc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a7ce:	4611      	mov	r1, r2
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7ff f94a 	bl	8009a6a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d8:	330d      	adds	r3, #13
 800a7da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a7dc:	b2d2      	uxtb	r2, r2
 800a7de:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e2:	330e      	adds	r3, #14
 800a7e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a7e6:	b292      	uxth	r2, r2
 800a7e8:	4611      	mov	r1, r2
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7ff f93d 	bl	8009a6a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f2:	3310      	adds	r3, #16
 800a7f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7f6:	b2d2      	uxtb	r2, r2
 800a7f8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fc:	f103 0211 	add.w	r2, r3, #17
 800a800:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a804:	2b03      	cmp	r3, #3
 800a806:	d002      	beq.n	800a80e <f_mkfs+0x46a>
 800a808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	e000      	b.n	800a810 <f_mkfs+0x46c>
 800a80e:	2300      	movs	r3, #0
 800a810:	4619      	mov	r1, r3
 800a812:	4610      	mov	r0, r2
 800a814:	f7ff f929 	bl	8009a6a <st_word>
		if (sz_vol < 0x10000) {
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a81e:	d208      	bcs.n	800a832 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800a820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a822:	3313      	adds	r3, #19
 800a824:	693a      	ldr	r2, [r7, #16]
 800a826:	b292      	uxth	r2, r2
 800a828:	4611      	mov	r1, r2
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7ff f91d 	bl	8009a6a <st_word>
 800a830:	e006      	b.n	800a840 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800a832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a834:	3320      	adds	r3, #32
 800a836:	693a      	ldr	r2, [r7, #16]
 800a838:	4611      	mov	r1, r2
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7ff f930 	bl	8009aa0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800a840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a842:	3315      	adds	r3, #21
 800a844:	22f8      	movs	r2, #248	; 0xf8
 800a846:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800a848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84a:	3318      	adds	r3, #24
 800a84c:	213f      	movs	r1, #63	; 0x3f
 800a84e:	4618      	mov	r0, r3
 800a850:	f7ff f90b 	bl	8009a6a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800a854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a856:	331a      	adds	r3, #26
 800a858:	21ff      	movs	r1, #255	; 0xff
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7ff f905 	bl	8009a6a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800a860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a862:	331c      	adds	r3, #28
 800a864:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a866:	4618      	mov	r0, r3
 800a868:	f7ff f91a 	bl	8009aa0 <st_dword>
		if (fmt == FS_FAT32) {
 800a86c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a870:	2b03      	cmp	r3, #3
 800a872:	d131      	bne.n	800a8d8 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800a874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a876:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800a87a:	f7fe fdad 	bl	80093d8 <get_fattime>
 800a87e:	4603      	mov	r3, r0
 800a880:	4619      	mov	r1, r3
 800a882:	4620      	mov	r0, r4
 800a884:	f7ff f90c 	bl	8009aa0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800a888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88a:	3324      	adds	r3, #36	; 0x24
 800a88c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a88e:	4618      	mov	r0, r3
 800a890:	f7ff f906 	bl	8009aa0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800a894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a896:	332c      	adds	r3, #44	; 0x2c
 800a898:	2102      	movs	r1, #2
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7ff f900 	bl	8009aa0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800a8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a2:	3330      	adds	r3, #48	; 0x30
 800a8a4:	2101      	movs	r1, #1
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7ff f8df 	bl	8009a6a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ae:	3332      	adds	r3, #50	; 0x32
 800a8b0:	2106      	movs	r1, #6
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7ff f8d9 	bl	8009a6a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800a8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ba:	3340      	adds	r3, #64	; 0x40
 800a8bc:	2280      	movs	r2, #128	; 0x80
 800a8be:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800a8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c2:	3342      	adds	r3, #66	; 0x42
 800a8c4:	2229      	movs	r2, #41	; 0x29
 800a8c6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800a8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ca:	3347      	adds	r3, #71	; 0x47
 800a8cc:	2213      	movs	r2, #19
 800a8ce:	4970      	ldr	r1, [pc, #448]	; (800aa90 <f_mkfs+0x6ec>)
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7ff f911 	bl	8009af8 <mem_cpy>
 800a8d6:	e020      	b.n	800a91a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800a8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8da:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800a8de:	f7fe fd7b 	bl	80093d8 <get_fattime>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f7ff f8da 	bl	8009aa0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800a8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ee:	3316      	adds	r3, #22
 800a8f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a8f2:	b292      	uxth	r2, r2
 800a8f4:	4611      	mov	r1, r2
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7ff f8b7 	bl	8009a6a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fe:	3324      	adds	r3, #36	; 0x24
 800a900:	2280      	movs	r2, #128	; 0x80
 800a902:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800a904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a906:	3326      	adds	r3, #38	; 0x26
 800a908:	2229      	movs	r2, #41	; 0x29
 800a90a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800a90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90e:	332b      	adds	r3, #43	; 0x2b
 800a910:	2213      	movs	r2, #19
 800a912:	4960      	ldr	r1, [pc, #384]	; (800aa94 <f_mkfs+0x6f0>)
 800a914:	4618      	mov	r0, r3
 800a916:	f7ff f8ef 	bl	8009af8 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a920:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a924:	4618      	mov	r0, r3
 800a926:	f7ff f8a0 	bl	8009a6a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800a92a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a92e:	2301      	movs	r3, #1
 800a930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a932:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a934:	f7ff f820 	bl	8009978 <disk_write>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d001      	beq.n	800a942 <f_mkfs+0x59e>
 800a93e:	2301      	movs	r3, #1
 800a940:	e156      	b.n	800abf0 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800a942:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a946:	2b03      	cmp	r3, #3
 800a948:	d140      	bne.n	800a9cc <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94c:	1d9a      	adds	r2, r3, #6
 800a94e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a952:	2301      	movs	r3, #1
 800a954:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a956:	f7ff f80f 	bl	8009978 <disk_write>
			mem_set(buf, 0, ss);
 800a95a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a95c:	461a      	mov	r2, r3
 800a95e:	2100      	movs	r1, #0
 800a960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a962:	f7ff f8ea 	bl	8009b3a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800a966:	494c      	ldr	r1, [pc, #304]	; (800aa98 <f_mkfs+0x6f4>)
 800a968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a96a:	f7ff f899 	bl	8009aa0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800a96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a970:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a974:	4949      	ldr	r1, [pc, #292]	; (800aa9c <f_mkfs+0x6f8>)
 800a976:	4618      	mov	r0, r3
 800a978:	f7ff f892 	bl	8009aa0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800a97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a982:	6a3b      	ldr	r3, [r7, #32]
 800a984:	3b01      	subs	r3, #1
 800a986:	4619      	mov	r1, r3
 800a988:	4610      	mov	r0, r2
 800a98a:	f7ff f889 	bl	8009aa0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800a98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a990:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a994:	2102      	movs	r1, #2
 800a996:	4618      	mov	r0, r3
 800a998:	f7ff f882 	bl	8009aa0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800a99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a9a2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7ff f85f 	bl	8009a6a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	1dda      	adds	r2, r3, #7
 800a9b0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9b8:	f7fe ffde 	bl	8009978 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9be:	1c5a      	adds	r2, r3, #1
 800a9c0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9c8:	f7fe ffd6 	bl	8009978 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800a9cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9d2:	f7ff f8b2 	bl	8009b3a <mem_set>
		sect = b_fat;		/* FAT start sector */
 800a9d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9d8:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800a9da:	2300      	movs	r3, #0
 800a9dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9de:	e04b      	b.n	800aa78 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800a9e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a9e4:	2b03      	cmp	r3, #3
 800a9e6:	d113      	bne.n	800aa10 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800a9e8:	f06f 0107 	mvn.w	r1, #7
 800a9ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9ee:	f7ff f857 	bl	8009aa0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f4:	3304      	adds	r3, #4
 800a9f6:	f04f 31ff 	mov.w	r1, #4294967295
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7ff f850 	bl	8009aa0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800aa00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa02:	3308      	adds	r3, #8
 800aa04:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7ff f849 	bl	8009aa0 <st_dword>
 800aa0e:	e00b      	b.n	800aa28 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800aa10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d101      	bne.n	800aa1c <f_mkfs+0x678>
 800aa18:	4b21      	ldr	r3, [pc, #132]	; (800aaa0 <f_mkfs+0x6fc>)
 800aa1a:	e001      	b.n	800aa20 <f_mkfs+0x67c>
 800aa1c:	f06f 0307 	mvn.w	r3, #7
 800aa20:	4619      	mov	r1, r3
 800aa22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa24:	f7ff f83c 	bl	8009aa0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800aa28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa2a:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800aa2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa30:	4293      	cmp	r3, r2
 800aa32:	bf28      	it	cs
 800aa34:	4613      	movcs	r3, r2
 800aa36:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800aa38:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800aa3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aa40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa42:	f7fe ff99 	bl	8009978 <disk_write>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d001      	beq.n	800aa50 <f_mkfs+0x6ac>
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e0cf      	b.n	800abf0 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800aa50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aa52:	461a      	mov	r2, r3
 800aa54:	2100      	movs	r1, #0
 800aa56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa58:	f7ff f86f 	bl	8009b3a <mem_set>
				sect += n; nsect -= n;
 800aa5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aa5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa60:	4413      	add	r3, r2
 800aa62:	667b      	str	r3, [r7, #100]	; 0x64
 800aa64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa68:	1ad3      	subs	r3, r2, r3
 800aa6a:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800aa6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1dc      	bne.n	800aa2c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800aa72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa74:	3301      	adds	r3, #1
 800aa76:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d3af      	bcc.n	800a9e0 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800aa80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aa84:	2b03      	cmp	r3, #3
 800aa86:	d10d      	bne.n	800aaa4 <f_mkfs+0x700>
 800aa88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa8a:	e00c      	b.n	800aaa6 <f_mkfs+0x702>
 800aa8c:	08011d94 	.word	0x08011d94
 800aa90:	08011da0 	.word	0x08011da0
 800aa94:	08011db4 	.word	0x08011db4
 800aa98:	41615252 	.word	0x41615252
 800aa9c:	61417272 	.word	0x61417272
 800aaa0:	00fffff8 	.word	0x00fffff8
 800aaa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaa6:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800aaa8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaac:	4293      	cmp	r3, r2
 800aaae:	bf28      	it	cs
 800aab0:	4613      	movcs	r3, r2
 800aab2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800aab4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800aab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aaba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aabc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aabe:	f7fe ff5b 	bl	8009978 <disk_write>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <f_mkfs+0x728>
 800aac8:	2301      	movs	r3, #1
 800aaca:	e091      	b.n	800abf0 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800aacc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aad0:	4413      	add	r3, r2
 800aad2:	667b      	str	r3, [r7, #100]	; 0x64
 800aad4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aad8:	1ad3      	subs	r3, r2, r3
 800aada:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800aadc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1e2      	bne.n	800aaa8 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800aae2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aae6:	2b03      	cmp	r3, #3
 800aae8:	d103      	bne.n	800aaf2 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800aaea:	230c      	movs	r3, #12
 800aaec:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800aaf0:	e010      	b.n	800ab14 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaf8:	d303      	bcc.n	800ab02 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800aafa:	2306      	movs	r3, #6
 800aafc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800ab00:	e008      	b.n	800ab14 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800ab02:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d101      	bne.n	800ab0e <f_mkfs+0x76a>
 800ab0a:	2304      	movs	r3, #4
 800ab0c:	e000      	b.n	800ab10 <f_mkfs+0x76c>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800ab14:	7afb      	ldrb	r3, [r7, #11]
 800ab16:	f003 0308 	and.w	r3, r3, #8
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d15b      	bne.n	800abd6 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800ab1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab20:	461a      	mov	r2, r3
 800ab22:	2100      	movs	r1, #0
 800ab24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab26:	f7ff f808 	bl	8009b3a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ab30:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7fe ff98 	bl	8009a6a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ab40:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	2200      	movs	r2, #0
 800ab46:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	3302      	adds	r3, #2
 800ab54:	2201      	movs	r2, #1
 800ab56:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	3303      	adds	r3, #3
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	3304      	adds	r3, #4
 800ab64:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ab68:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6e:	441a      	add	r2, r3
 800ab70:	4b21      	ldr	r3, [pc, #132]	; (800abf8 <f_mkfs+0x854>)
 800ab72:	fba3 1302 	umull	r1, r3, r3, r2
 800ab76:	1ad2      	subs	r2, r2, r3
 800ab78:	0852      	lsrs	r2, r2, #1
 800ab7a:	4413      	add	r3, r2
 800ab7c:	0b5b      	lsrs	r3, r3, #13
 800ab7e:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	3305      	adds	r3, #5
 800ab84:	22fe      	movs	r2, #254	; 0xfe
 800ab86:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800ab88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab8a:	089b      	lsrs	r3, r3, #2
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	3306      	adds	r3, #6
 800ab92:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800ab96:	b2d2      	uxtb	r2, r2
 800ab98:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	3307      	adds	r3, #7
 800ab9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aba0:	b2d2      	uxtb	r2, r2
 800aba2:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	3308      	adds	r3, #8
 800aba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fe ff78 	bl	8009aa0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800abb0:	69bb      	ldr	r3, [r7, #24]
 800abb2:	330c      	adds	r3, #12
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	4611      	mov	r1, r2
 800abb8:	4618      	mov	r0, r3
 800abba:	f7fe ff71 	bl	8009aa0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800abbe:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800abc2:	2301      	movs	r3, #1
 800abc4:	2200      	movs	r2, #0
 800abc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800abc8:	f7fe fed6 	bl	8009978 <disk_write>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <f_mkfs+0x832>
 800abd2:	2301      	movs	r3, #1
 800abd4:	e00c      	b.n	800abf0 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800abd6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800abda:	2200      	movs	r2, #0
 800abdc:	2100      	movs	r1, #0
 800abde:	4618      	mov	r0, r3
 800abe0:	f7fe feea 	bl	80099b8 <disk_ioctl>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <f_mkfs+0x84a>
 800abea:	2301      	movs	r3, #1
 800abec:	e000      	b.n	800abf0 <f_mkfs+0x84c>

	return FR_OK;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3774      	adds	r7, #116	; 0x74
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd90      	pop	{r4, r7, pc}
 800abf8:	0515565b 	.word	0x0515565b

0800abfc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b087      	sub	sp, #28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	4613      	mov	r3, r2
 800ac08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ac12:	4b1f      	ldr	r3, [pc, #124]	; (800ac90 <FATFS_LinkDriverEx+0x94>)
 800ac14:	7a5b      	ldrb	r3, [r3, #9]
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d131      	bne.n	800ac80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ac1c:	4b1c      	ldr	r3, [pc, #112]	; (800ac90 <FATFS_LinkDriverEx+0x94>)
 800ac1e:	7a5b      	ldrb	r3, [r3, #9]
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	461a      	mov	r2, r3
 800ac24:	4b1a      	ldr	r3, [pc, #104]	; (800ac90 <FATFS_LinkDriverEx+0x94>)
 800ac26:	2100      	movs	r1, #0
 800ac28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ac2a:	4b19      	ldr	r3, [pc, #100]	; (800ac90 <FATFS_LinkDriverEx+0x94>)
 800ac2c:	7a5b      	ldrb	r3, [r3, #9]
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	4a17      	ldr	r2, [pc, #92]	; (800ac90 <FATFS_LinkDriverEx+0x94>)
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4413      	add	r3, r2
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ac3a:	4b15      	ldr	r3, [pc, #84]	; (800ac90 <FATFS_LinkDriverEx+0x94>)
 800ac3c:	7a5b      	ldrb	r3, [r3, #9]
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	461a      	mov	r2, r3
 800ac42:	4b13      	ldr	r3, [pc, #76]	; (800ac90 <FATFS_LinkDriverEx+0x94>)
 800ac44:	4413      	add	r3, r2
 800ac46:	79fa      	ldrb	r2, [r7, #7]
 800ac48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ac4a:	4b11      	ldr	r3, [pc, #68]	; (800ac90 <FATFS_LinkDriverEx+0x94>)
 800ac4c:	7a5b      	ldrb	r3, [r3, #9]
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	1c5a      	adds	r2, r3, #1
 800ac52:	b2d1      	uxtb	r1, r2
 800ac54:	4a0e      	ldr	r2, [pc, #56]	; (800ac90 <FATFS_LinkDriverEx+0x94>)
 800ac56:	7251      	strb	r1, [r2, #9]
 800ac58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ac5a:	7dbb      	ldrb	r3, [r7, #22]
 800ac5c:	3330      	adds	r3, #48	; 0x30
 800ac5e:	b2da      	uxtb	r2, r3
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	3301      	adds	r3, #1
 800ac68:	223a      	movs	r2, #58	; 0x3a
 800ac6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	3302      	adds	r3, #2
 800ac70:	222f      	movs	r2, #47	; 0x2f
 800ac72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	3303      	adds	r3, #3
 800ac78:	2200      	movs	r2, #0
 800ac7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ac80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	371c      	adds	r7, #28
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	20002534 	.word	0x20002534

0800ac94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ac9e:	2200      	movs	r2, #0
 800aca0:	6839      	ldr	r1, [r7, #0]
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f7ff ffaa 	bl	800abfc <FATFS_LinkDriverEx>
 800aca8:	4603      	mov	r3, r0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3708      	adds	r7, #8
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b086      	sub	sp, #24
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	4603      	mov	r3, r0
 800acba:	6039      	str	r1, [r7, #0]
 800acbc:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800acbe:	2300      	movs	r3, #0
 800acc0:	60fb      	str	r3, [r7, #12]
 800acc2:	2300      	movs	r3, #0
 800acc4:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800acc6:	f107 030c 	add.w	r3, r7, #12
 800acca:	2101      	movs	r1, #1
 800accc:	4618      	mov	r0, r3
 800acce:	f000 f9b5 	bl	800b03c <osSemaphoreCreate>
 800acd2:	4602      	mov	r2, r0
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	bf14      	ite	ne
 800ace0:	2301      	movne	r3, #1
 800ace2:	2300      	moveq	r3, #0
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	617b      	str	r3, [r7, #20]

    return ret;
 800ace8:	697b      	ldr	r3, [r7, #20]
}
 800acea:	4618      	mov	r0, r3
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b082      	sub	sp, #8
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 fa54 	bl	800b1a8 <osSemaphoreDelete>
#endif
    return 1;
 800ad00:	2301      	movs	r3, #1
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3708      	adds	r7, #8
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800ad12:	2300      	movs	r3, #0
 800ad14:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800ad16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 f9c0 	bl	800b0a0 <osSemaphoreWait>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d101      	bne.n	800ad2a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800ad26:	2301      	movs	r3, #1
 800ad28:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f9fd 	bl	800b13c <osSemaphoreRelease>
#endif
}
 800ad42:	bf00      	nop
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ad4a:	b480      	push	{r7}
 800ad4c:	b085      	sub	sp, #20
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	4603      	mov	r3, r0
 800ad52:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ad54:	2300      	movs	r3, #0
 800ad56:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ad58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad5c:	2b84      	cmp	r3, #132	; 0x84
 800ad5e:	d005      	beq.n	800ad6c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ad60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	4413      	add	r3, r2
 800ad68:	3303      	adds	r3, #3
 800ad6a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b083      	sub	sp, #12
 800ad7e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad80:	f3ef 8305 	mrs	r3, IPSR
 800ad84:	607b      	str	r3, [r7, #4]
  return(result);
 800ad86:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	bf14      	ite	ne
 800ad8c:	2301      	movne	r3, #1
 800ad8e:	2300      	moveq	r3, #0
 800ad90:	b2db      	uxtb	r3, r3
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	370c      	adds	r7, #12
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ada2:	f001 fd59 	bl	800c858 <vTaskStartScheduler>
  
  return osOK;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	bd80      	pop	{r7, pc}

0800adac <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800adb0:	f002 f9a4 	bl	800d0fc <xTaskGetSchedulerState>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d101      	bne.n	800adbe <osKernelRunning+0x12>
    return 0;
 800adba:	2300      	movs	r3, #0
 800adbc:	e000      	b.n	800adc0 <osKernelRunning+0x14>
  else
    return 1;
 800adbe:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800adc8:	f7ff ffd7 	bl	800ad7a <inHandlerMode>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d003      	beq.n	800adda <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800add2:	f001 fe61 	bl	800ca98 <xTaskGetTickCountFromISR>
 800add6:	4603      	mov	r3, r0
 800add8:	e002      	b.n	800ade0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800adda:	f001 fe4d 	bl	800ca78 <xTaskGetTickCount>
 800adde:	4603      	mov	r3, r0
  }
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ade4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ade6:	b089      	sub	sp, #36	; 0x24
 800ade8:	af04      	add	r7, sp, #16
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	695b      	ldr	r3, [r3, #20]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d020      	beq.n	800ae38 <osThreadCreate+0x54>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d01c      	beq.n	800ae38 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	685c      	ldr	r4, [r3, #4]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681d      	ldr	r5, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	691e      	ldr	r6, [r3, #16]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff ff9a 	bl	800ad4a <makeFreeRtosPriority>
 800ae16:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	695b      	ldr	r3, [r3, #20]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae20:	9202      	str	r2, [sp, #8]
 800ae22:	9301      	str	r3, [sp, #4]
 800ae24:	9100      	str	r1, [sp, #0]
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	4632      	mov	r2, r6
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	f001 fb4b 	bl	800c4c8 <xTaskCreateStatic>
 800ae32:	4603      	mov	r3, r0
 800ae34:	60fb      	str	r3, [r7, #12]
 800ae36:	e01c      	b.n	800ae72 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685c      	ldr	r4, [r3, #4]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae44:	b29e      	uxth	r6, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7ff ff7c 	bl	800ad4a <makeFreeRtosPriority>
 800ae52:	4602      	mov	r2, r0
 800ae54:	f107 030c 	add.w	r3, r7, #12
 800ae58:	9301      	str	r3, [sp, #4]
 800ae5a:	9200      	str	r2, [sp, #0]
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	4632      	mov	r2, r6
 800ae60:	4629      	mov	r1, r5
 800ae62:	4620      	mov	r0, r4
 800ae64:	f001 fb8d 	bl	800c582 <xTaskCreate>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d001      	beq.n	800ae72 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	e000      	b.n	800ae74 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ae72:	68fb      	ldr	r3, [r7, #12]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae7c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <osDelay+0x16>
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	e000      	b.n	800ae94 <osDelay+0x18>
 800ae92:	2301      	movs	r3, #1
 800ae94:	4618      	mov	r0, r3
 800ae96:	f001 fcab 	bl	800c7f0 <vTaskDelay>
  
  return osOK;
 800ae9a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3710      	adds	r7, #16
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af02      	add	r7, sp, #8
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	460b      	mov	r3, r1
 800aeae:	607a      	str	r2, [r7, #4]
 800aeb0:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d013      	beq.n	800aee2 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800aeba:	7afb      	ldrb	r3, [r7, #11]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d101      	bne.n	800aec4 <osTimerCreate+0x20>
 800aec0:	2101      	movs	r1, #1
 800aec2:	e000      	b.n	800aec6 <osTimerCreate+0x22>
 800aec4:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800aece:	9201      	str	r2, [sp, #4]
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	460a      	mov	r2, r1
 800aed6:	2101      	movs	r1, #1
 800aed8:	480b      	ldr	r0, [pc, #44]	; (800af08 <osTimerCreate+0x64>)
 800aeda:	f002 fb9a 	bl	800d612 <xTimerCreateStatic>
 800aede:	4603      	mov	r3, r0
 800aee0:	e00e      	b.n	800af00 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800aee2:	7afb      	ldrb	r3, [r7, #11]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d101      	bne.n	800aeec <osTimerCreate+0x48>
 800aee8:	2201      	movs	r2, #1
 800aeea:	e000      	b.n	800aeee <osTimerCreate+0x4a>
 800aeec:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800aef2:	9300      	str	r3, [sp, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2101      	movs	r1, #1
 800aef8:	4803      	ldr	r0, [pc, #12]	; (800af08 <osTimerCreate+0x64>)
 800aefa:	f002 fb69 	bl	800d5d0 <xTimerCreate>
 800aefe:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800af00:	4618      	mov	r0, r3
 800af02:	3710      	adds	r7, #16
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	08011dc8 	.word	0x08011dc8

0800af0c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b088      	sub	sp, #32
 800af10:	af02      	add	r7, sp, #8
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800af16:	2300      	movs	r3, #0
 800af18:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800af1a:	2300      	movs	r3, #0
 800af1c:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d101      	bne.n	800af2c <osTimerStart+0x20>
    ticks = 1;
 800af28:	2301      	movs	r3, #1
 800af2a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800af2c:	f7ff ff25 	bl	800ad7a <inHandlerMode>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d01a      	beq.n	800af6c <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800af36:	f107 030c 	add.w	r3, r7, #12
 800af3a:	2200      	movs	r2, #0
 800af3c:	9200      	str	r2, [sp, #0]
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	2109      	movs	r1, #9
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f002 fbde 	bl	800d704 <xTimerGenericCommand>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d002      	beq.n	800af54 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800af4e:	23ff      	movs	r3, #255	; 0xff
 800af50:	617b      	str	r3, [r7, #20]
 800af52:	e018      	b.n	800af86 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d015      	beq.n	800af86 <osTimerStart+0x7a>
 800af5a:	4b0d      	ldr	r3, [pc, #52]	; (800af90 <osTimerStart+0x84>)
 800af5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	f3bf 8f4f 	dsb	sy
 800af66:	f3bf 8f6f 	isb	sy
 800af6a:	e00c      	b.n	800af86 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800af6c:	2300      	movs	r3, #0
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	2300      	movs	r3, #0
 800af72:	693a      	ldr	r2, [r7, #16]
 800af74:	2104      	movs	r1, #4
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f002 fbc4 	bl	800d704 <xTimerGenericCommand>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d001      	beq.n	800af86 <osTimerStart+0x7a>
      result = osErrorOS;
 800af82:	23ff      	movs	r3, #255	; 0xff
 800af84:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800af86:	697b      	ldr	r3, [r7, #20]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3718      	adds	r7, #24
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	e000ed04 	.word	0xe000ed04

0800af94 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b086      	sub	sp, #24
 800af98:	af02      	add	r7, sp, #8
 800af9a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800afa0:	2300      	movs	r3, #0
 800afa2:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 800afa4:	f7ff fee9 	bl	800ad7a <inHandlerMode>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d019      	beq.n	800afe2 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800afae:	f107 0308 	add.w	r3, r7, #8
 800afb2:	2200      	movs	r2, #0
 800afb4:	9200      	str	r2, [sp, #0]
 800afb6:	2200      	movs	r2, #0
 800afb8:	2108      	movs	r1, #8
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f002 fba2 	bl	800d704 <xTimerGenericCommand>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d001      	beq.n	800afca <osTimerStop+0x36>
      return osErrorOS;
 800afc6:	23ff      	movs	r3, #255	; 0xff
 800afc8:	e019      	b.n	800affe <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d015      	beq.n	800affc <osTimerStop+0x68>
 800afd0:	4b0d      	ldr	r3, [pc, #52]	; (800b008 <osTimerStop+0x74>)
 800afd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afd6:	601a      	str	r2, [r3, #0]
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	e00c      	b.n	800affc <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 800afe2:	2300      	movs	r3, #0
 800afe4:	9300      	str	r3, [sp, #0]
 800afe6:	2300      	movs	r3, #0
 800afe8:	2200      	movs	r2, #0
 800afea:	2103      	movs	r1, #3
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f002 fb89 	bl	800d704 <xTimerGenericCommand>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d001      	beq.n	800affc <osTimerStop+0x68>
      result = osErrorOS;
 800aff8:	23ff      	movs	r3, #255	; 0xff
 800affa:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 800affc:	68fb      	ldr	r3, [r7, #12]
}
 800affe:	4618      	mov	r0, r3
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	e000ed04 	.word	0xe000ed04

0800b00c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d007      	beq.n	800b02c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	4619      	mov	r1, r3
 800b022:	2001      	movs	r0, #1
 800b024:	f000 fbcf 	bl	800b7c6 <xQueueCreateMutexStatic>
 800b028:	4603      	mov	r3, r0
 800b02a:	e003      	b.n	800b034 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b02c:	2001      	movs	r0, #1
 800b02e:	f000 fbb2 	bl	800b796 <xQueueCreateMutex>
 800b032:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b034:	4618      	mov	r0, r3
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b086      	sub	sp, #24
 800b040:	af02      	add	r7, sp, #8
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00f      	beq.n	800b06e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d10a      	bne.n	800b06a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	2203      	movs	r2, #3
 800b05a:	9200      	str	r2, [sp, #0]
 800b05c:	2200      	movs	r2, #0
 800b05e:	2100      	movs	r1, #0
 800b060:	2001      	movs	r0, #1
 800b062:	f000 faad 	bl	800b5c0 <xQueueGenericCreateStatic>
 800b066:	4603      	mov	r3, r0
 800b068:	e016      	b.n	800b098 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b06a:	2300      	movs	r3, #0
 800b06c:	e014      	b.n	800b098 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	2b01      	cmp	r3, #1
 800b072:	d110      	bne.n	800b096 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b074:	2203      	movs	r2, #3
 800b076:	2100      	movs	r1, #0
 800b078:	2001      	movs	r0, #1
 800b07a:	f000 fb19 	bl	800b6b0 <xQueueGenericCreate>
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d005      	beq.n	800b092 <osSemaphoreCreate+0x56>
 800b086:	2300      	movs	r3, #0
 800b088:	2200      	movs	r2, #0
 800b08a:	2100      	movs	r1, #0
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f000 fbb5 	bl	800b7fc <xQueueGenericSend>
      return sema;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	e000      	b.n	800b098 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b096:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d101      	bne.n	800b0b8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b0b4:	2380      	movs	r3, #128	; 0x80
 800b0b6:	e03a      	b.n	800b12e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c2:	d103      	bne.n	800b0cc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c8:	60fb      	str	r3, [r7, #12]
 800b0ca:	e009      	b.n	800b0e0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d006      	beq.n	800b0e0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d101      	bne.n	800b0e0 <osSemaphoreWait+0x40>
      ticks = 1;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b0e0:	f7ff fe4b 	bl	800ad7a <inHandlerMode>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d017      	beq.n	800b11a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b0ea:	f107 0308 	add.w	r3, r7, #8
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 ff94 	bl	800c020 <xQueueReceiveFromISR>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d001      	beq.n	800b102 <osSemaphoreWait+0x62>
      return osErrorOS;
 800b0fe:	23ff      	movs	r3, #255	; 0xff
 800b100:	e015      	b.n	800b12e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d011      	beq.n	800b12c <osSemaphoreWait+0x8c>
 800b108:	4b0b      	ldr	r3, [pc, #44]	; (800b138 <osSemaphoreWait+0x98>)
 800b10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b10e:	601a      	str	r2, [r3, #0]
 800b110:	f3bf 8f4f 	dsb	sy
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	e008      	b.n	800b12c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b11a:	68f9      	ldr	r1, [r7, #12]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 fe73 	bl	800be08 <xQueueSemaphoreTake>
 800b122:	4603      	mov	r3, r0
 800b124:	2b01      	cmp	r3, #1
 800b126:	d001      	beq.n	800b12c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b128:	23ff      	movs	r3, #255	; 0xff
 800b12a:	e000      	b.n	800b12e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	e000ed04 	.word	0xe000ed04

0800b13c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b144:	2300      	movs	r3, #0
 800b146:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b148:	2300      	movs	r3, #0
 800b14a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b14c:	f7ff fe15 	bl	800ad7a <inHandlerMode>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d016      	beq.n	800b184 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b156:	f107 0308 	add.w	r3, r7, #8
 800b15a:	4619      	mov	r1, r3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 fce6 	bl	800bb2e <xQueueGiveFromISR>
 800b162:	4603      	mov	r3, r0
 800b164:	2b01      	cmp	r3, #1
 800b166:	d001      	beq.n	800b16c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b168:	23ff      	movs	r3, #255	; 0xff
 800b16a:	e017      	b.n	800b19c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d013      	beq.n	800b19a <osSemaphoreRelease+0x5e>
 800b172:	4b0c      	ldr	r3, [pc, #48]	; (800b1a4 <osSemaphoreRelease+0x68>)
 800b174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b178:	601a      	str	r2, [r3, #0]
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	e00a      	b.n	800b19a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b184:	2300      	movs	r3, #0
 800b186:	2200      	movs	r2, #0
 800b188:	2100      	movs	r1, #0
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 fb36 	bl	800b7fc <xQueueGenericSend>
 800b190:	4603      	mov	r3, r0
 800b192:	2b01      	cmp	r3, #1
 800b194:	d001      	beq.n	800b19a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b196:	23ff      	movs	r3, #255	; 0xff
 800b198:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b19a:	68fb      	ldr	r3, [r7, #12]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	e000ed04 	.word	0xe000ed04

0800b1a8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b1b0:	f7ff fde3 	bl	800ad7a <inHandlerMode>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d001      	beq.n	800b1be <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b1ba:	2382      	movs	r3, #130	; 0x82
 800b1bc:	e003      	b.n	800b1c6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 ffae 	bl	800c120 <vQueueDelete>

  return osOK; 
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b1ce:	b590      	push	{r4, r7, lr}
 800b1d0:	b085      	sub	sp, #20
 800b1d2:	af02      	add	r7, sp, #8
 800b1d4:	6078      	str	r0, [r7, #4]
 800b1d6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d011      	beq.n	800b204 <osMessageCreate+0x36>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00d      	beq.n	800b204 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6818      	ldr	r0, [r3, #0]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6859      	ldr	r1, [r3, #4]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	689a      	ldr	r2, [r3, #8]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	2400      	movs	r4, #0
 800b1fa:	9400      	str	r4, [sp, #0]
 800b1fc:	f000 f9e0 	bl	800b5c0 <xQueueGenericCreateStatic>
 800b200:	4603      	mov	r3, r0
 800b202:	e008      	b.n	800b216 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6818      	ldr	r0, [r3, #0]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	4619      	mov	r1, r3
 800b210:	f000 fa4e 	bl	800b6b0 <xQueueGenericCreate>
 800b214:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b216:	4618      	mov	r0, r3
 800b218:	370c      	adds	r7, #12
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd90      	pop	{r4, r7, pc}
	...

0800b220 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b22c:	2300      	movs	r3, #0
 800b22e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d101      	bne.n	800b23e <osMessagePut+0x1e>
    ticks = 1;
 800b23a:	2301      	movs	r3, #1
 800b23c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b23e:	f7ff fd9c 	bl	800ad7a <inHandlerMode>
 800b242:	4603      	mov	r3, r0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d018      	beq.n	800b27a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b248:	f107 0210 	add.w	r2, r7, #16
 800b24c:	f107 0108 	add.w	r1, r7, #8
 800b250:	2300      	movs	r3, #0
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f000 fbd0 	bl	800b9f8 <xQueueGenericSendFromISR>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d001      	beq.n	800b262 <osMessagePut+0x42>
      return osErrorOS;
 800b25e:	23ff      	movs	r3, #255	; 0xff
 800b260:	e018      	b.n	800b294 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d014      	beq.n	800b292 <osMessagePut+0x72>
 800b268:	4b0c      	ldr	r3, [pc, #48]	; (800b29c <osMessagePut+0x7c>)
 800b26a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b26e:	601a      	str	r2, [r3, #0]
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	f3bf 8f6f 	isb	sy
 800b278:	e00b      	b.n	800b292 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b27a:	f107 0108 	add.w	r1, r7, #8
 800b27e:	2300      	movs	r3, #0
 800b280:	697a      	ldr	r2, [r7, #20]
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f000 faba 	bl	800b7fc <xQueueGenericSend>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d001      	beq.n	800b292 <osMessagePut+0x72>
      return osErrorOS;
 800b28e:	23ff      	movs	r3, #255	; 0xff
 800b290:	e000      	b.n	800b294 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3718      	adds	r7, #24
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	e000ed04 	.word	0xe000ed04

0800b2a0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b2a0:	b590      	push	{r4, r7, lr}
 800b2a2:	b08b      	sub	sp, #44	; 0x2c
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d10a      	bne.n	800b2d0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b2ba:	2380      	movs	r3, #128	; 0x80
 800b2bc:	617b      	str	r3, [r7, #20]
    return event;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	461c      	mov	r4, r3
 800b2c2:	f107 0314 	add.w	r3, r7, #20
 800b2c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b2ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b2ce:	e054      	b.n	800b37a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2de:	d103      	bne.n	800b2e8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b2e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e4:	627b      	str	r3, [r7, #36]	; 0x24
 800b2e6:	e009      	b.n	800b2fc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d006      	beq.n	800b2fc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d101      	bne.n	800b2fc <osMessageGet+0x5c>
      ticks = 1;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b2fc:	f7ff fd3d 	bl	800ad7a <inHandlerMode>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d01c      	beq.n	800b340 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b306:	f107 0220 	add.w	r2, r7, #32
 800b30a:	f107 0314 	add.w	r3, r7, #20
 800b30e:	3304      	adds	r3, #4
 800b310:	4619      	mov	r1, r3
 800b312:	68b8      	ldr	r0, [r7, #8]
 800b314:	f000 fe84 	bl	800c020 <xQueueReceiveFromISR>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d102      	bne.n	800b324 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b31e:	2310      	movs	r3, #16
 800b320:	617b      	str	r3, [r7, #20]
 800b322:	e001      	b.n	800b328 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b324:	2300      	movs	r3, #0
 800b326:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b328:	6a3b      	ldr	r3, [r7, #32]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d01d      	beq.n	800b36a <osMessageGet+0xca>
 800b32e:	4b15      	ldr	r3, [pc, #84]	; (800b384 <osMessageGet+0xe4>)
 800b330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b334:	601a      	str	r2, [r3, #0]
 800b336:	f3bf 8f4f 	dsb	sy
 800b33a:	f3bf 8f6f 	isb	sy
 800b33e:	e014      	b.n	800b36a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b340:	f107 0314 	add.w	r3, r7, #20
 800b344:	3304      	adds	r3, #4
 800b346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b348:	4619      	mov	r1, r3
 800b34a:	68b8      	ldr	r0, [r7, #8]
 800b34c:	f000 fc7c 	bl	800bc48 <xQueueReceive>
 800b350:	4603      	mov	r3, r0
 800b352:	2b01      	cmp	r3, #1
 800b354:	d102      	bne.n	800b35c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b356:	2310      	movs	r3, #16
 800b358:	617b      	str	r3, [r7, #20]
 800b35a:	e006      	b.n	800b36a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d101      	bne.n	800b366 <osMessageGet+0xc6>
 800b362:	2300      	movs	r3, #0
 800b364:	e000      	b.n	800b368 <osMessageGet+0xc8>
 800b366:	2340      	movs	r3, #64	; 0x40
 800b368:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	461c      	mov	r4, r3
 800b36e:	f107 0314 	add.w	r3, r7, #20
 800b372:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b376:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	372c      	adds	r7, #44	; 0x2c
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd90      	pop	{r4, r7, pc}
 800b382:	bf00      	nop
 800b384:	e000ed04 	.word	0xe000ed04

0800b388 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f103 0208 	add.w	r2, r3, #8
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f103 0208 	add.w	r2, r3, #8
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f103 0208 	add.w	r2, r3, #8
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b3bc:	bf00      	nop
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b3d6:	bf00      	nop
 800b3d8:	370c      	adds	r7, #12
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr

0800b3e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3e2:	b480      	push	{r7}
 800b3e4:	b085      	sub	sp, #20
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
 800b3ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	689a      	ldr	r2, [r3, #8]
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	683a      	ldr	r2, [r7, #0]
 800b406:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	683a      	ldr	r2, [r7, #0]
 800b40c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	1c5a      	adds	r2, r3, #1
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	601a      	str	r2, [r3, #0]
}
 800b41e:	bf00      	nop
 800b420:	3714      	adds	r7, #20
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b42a:	b480      	push	{r7}
 800b42c:	b085      	sub	sp, #20
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b440:	d103      	bne.n	800b44a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	60fb      	str	r3, [r7, #12]
 800b448:	e00c      	b.n	800b464 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	3308      	adds	r3, #8
 800b44e:	60fb      	str	r3, [r7, #12]
 800b450:	e002      	b.n	800b458 <vListInsert+0x2e>
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	60fb      	str	r3, [r7, #12]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	68ba      	ldr	r2, [r7, #8]
 800b460:	429a      	cmp	r2, r3
 800b462:	d2f6      	bcs.n	800b452 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	685a      	ldr	r2, [r3, #4]
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	683a      	ldr	r2, [r7, #0]
 800b472:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	683a      	ldr	r2, [r7, #0]
 800b47e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	1c5a      	adds	r2, r3, #1
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	601a      	str	r2, [r3, #0]
}
 800b490:	bf00      	nop
 800b492:	3714      	adds	r7, #20
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	6892      	ldr	r2, [r2, #8]
 800b4b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	6852      	ldr	r2, [r2, #4]
 800b4bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d103      	bne.n	800b4d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	689a      	ldr	r2, [r3, #8]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	1e5a      	subs	r2, r3, #1
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d10a      	bne.n	800b51a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b508:	f383 8811 	msr	BASEPRI, r3
 800b50c:	f3bf 8f6f 	isb	sy
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b516:	bf00      	nop
 800b518:	e7fe      	b.n	800b518 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b51a:	f002 fd0b 	bl	800df34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b526:	68f9      	ldr	r1, [r7, #12]
 800b528:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b52a:	fb01 f303 	mul.w	r3, r1, r3
 800b52e:	441a      	add	r2, r3
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2200      	movs	r2, #0
 800b538:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b54a:	3b01      	subs	r3, #1
 800b54c:	68f9      	ldr	r1, [r7, #12]
 800b54e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b550:	fb01 f303 	mul.w	r3, r1, r3
 800b554:	441a      	add	r2, r3
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	22ff      	movs	r2, #255	; 0xff
 800b55e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	22ff      	movs	r2, #255	; 0xff
 800b566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d114      	bne.n	800b59a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d01a      	beq.n	800b5ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	3310      	adds	r3, #16
 800b57c:	4618      	mov	r0, r3
 800b57e:	f001 fc01 	bl	800cd84 <xTaskRemoveFromEventList>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d012      	beq.n	800b5ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b588:	4b0c      	ldr	r3, [pc, #48]	; (800b5bc <xQueueGenericReset+0xcc>)
 800b58a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b58e:	601a      	str	r2, [r3, #0]
 800b590:	f3bf 8f4f 	dsb	sy
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	e009      	b.n	800b5ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	3310      	adds	r3, #16
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7ff fef2 	bl	800b388 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	3324      	adds	r3, #36	; 0x24
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7ff feed 	bl	800b388 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b5ae:	f002 fcf1 	bl	800df94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b5b2:	2301      	movs	r3, #1
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	e000ed04 	.word	0xe000ed04

0800b5c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b08e      	sub	sp, #56	; 0x38
 800b5c4:	af02      	add	r7, sp, #8
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
 800b5cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10a      	bne.n	800b5ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d8:	f383 8811 	msr	BASEPRI, r3
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b5e6:	bf00      	nop
 800b5e8:	e7fe      	b.n	800b5e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10a      	bne.n	800b606 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b602:	bf00      	nop
 800b604:	e7fe      	b.n	800b604 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d002      	beq.n	800b612 <xQueueGenericCreateStatic+0x52>
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d001      	beq.n	800b616 <xQueueGenericCreateStatic+0x56>
 800b612:	2301      	movs	r3, #1
 800b614:	e000      	b.n	800b618 <xQueueGenericCreateStatic+0x58>
 800b616:	2300      	movs	r3, #0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d10a      	bne.n	800b632 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	623b      	str	r3, [r7, #32]
}
 800b62e:	bf00      	nop
 800b630:	e7fe      	b.n	800b630 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d102      	bne.n	800b63e <xQueueGenericCreateStatic+0x7e>
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <xQueueGenericCreateStatic+0x82>
 800b63e:	2301      	movs	r3, #1
 800b640:	e000      	b.n	800b644 <xQueueGenericCreateStatic+0x84>
 800b642:	2300      	movs	r3, #0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10a      	bne.n	800b65e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64c:	f383 8811 	msr	BASEPRI, r3
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	61fb      	str	r3, [r7, #28]
}
 800b65a:	bf00      	nop
 800b65c:	e7fe      	b.n	800b65c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b65e:	2348      	movs	r3, #72	; 0x48
 800b660:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	2b48      	cmp	r3, #72	; 0x48
 800b666:	d00a      	beq.n	800b67e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66c:	f383 8811 	msr	BASEPRI, r3
 800b670:	f3bf 8f6f 	isb	sy
 800b674:	f3bf 8f4f 	dsb	sy
 800b678:	61bb      	str	r3, [r7, #24]
}
 800b67a:	bf00      	nop
 800b67c:	e7fe      	b.n	800b67c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b67e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00d      	beq.n	800b6a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68c:	2201      	movs	r2, #1
 800b68e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b692:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b698:	9300      	str	r3, [sp, #0]
 800b69a:	4613      	mov	r3, r2
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	68b9      	ldr	r1, [r7, #8]
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f000 f83f 	bl	800b724 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3730      	adds	r7, #48	; 0x30
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b08a      	sub	sp, #40	; 0x28
 800b6b4:	af02      	add	r7, sp, #8
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d10a      	bne.n	800b6da <xQueueGenericCreate+0x2a>
	__asm volatile
 800b6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c8:	f383 8811 	msr	BASEPRI, r3
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	613b      	str	r3, [r7, #16]
}
 800b6d6:	bf00      	nop
 800b6d8:	e7fe      	b.n	800b6d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	68ba      	ldr	r2, [r7, #8]
 800b6de:	fb02 f303 	mul.w	r3, r2, r3
 800b6e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	3348      	adds	r3, #72	; 0x48
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f002 fd45 	bl	800e178 <pvPortMalloc>
 800b6ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d011      	beq.n	800b71a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	3348      	adds	r3, #72	; 0x48
 800b6fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	2200      	movs	r2, #0
 800b704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b708:	79fa      	ldrb	r2, [r7, #7]
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	4613      	mov	r3, r2
 800b710:	697a      	ldr	r2, [r7, #20]
 800b712:	68b9      	ldr	r1, [r7, #8]
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f000 f805 	bl	800b724 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b71a:	69bb      	ldr	r3, [r7, #24]
	}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3720      	adds	r7, #32
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
 800b730:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d103      	bne.n	800b740 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	69ba      	ldr	r2, [r7, #24]
 800b73c:	601a      	str	r2, [r3, #0]
 800b73e:	e002      	b.n	800b746 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	68ba      	ldr	r2, [r7, #8]
 800b750:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b752:	2101      	movs	r1, #1
 800b754:	69b8      	ldr	r0, [r7, #24]
 800b756:	f7ff fecb 	bl	800b4f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b75a:	bf00      	nop
 800b75c:	3710      	adds	r7, #16
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b762:	b580      	push	{r7, lr}
 800b764:	b082      	sub	sp, #8
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d00e      	beq.n	800b78e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b782:	2300      	movs	r3, #0
 800b784:	2200      	movs	r2, #0
 800b786:	2100      	movs	r1, #0
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 f837 	bl	800b7fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b78e:	bf00      	nop
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}

0800b796 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b796:	b580      	push	{r7, lr}
 800b798:	b086      	sub	sp, #24
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	4603      	mov	r3, r0
 800b79e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	617b      	str	r3, [r7, #20]
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b7a8:	79fb      	ldrb	r3, [r7, #7]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	6939      	ldr	r1, [r7, #16]
 800b7ae:	6978      	ldr	r0, [r7, #20]
 800b7b0:	f7ff ff7e 	bl	800b6b0 <xQueueGenericCreate>
 800b7b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	f7ff ffd3 	bl	800b762 <prvInitialiseMutex>

		return xNewQueue;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
	}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3718      	adds	r7, #24
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b088      	sub	sp, #32
 800b7ca:	af02      	add	r7, sp, #8
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	6039      	str	r1, [r7, #0]
 800b7d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	617b      	str	r3, [r7, #20]
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b7da:	79fb      	ldrb	r3, [r7, #7]
 800b7dc:	9300      	str	r3, [sp, #0]
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	6939      	ldr	r1, [r7, #16]
 800b7e4:	6978      	ldr	r0, [r7, #20]
 800b7e6:	f7ff feeb 	bl	800b5c0 <xQueueGenericCreateStatic>
 800b7ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f7ff ffb8 	bl	800b762 <prvInitialiseMutex>

		return xNewQueue;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
	}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3718      	adds	r7, #24
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b08e      	sub	sp, #56	; 0x38
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
 800b808:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b80a:	2300      	movs	r3, #0
 800b80c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10a      	bne.n	800b82e <xQueueGenericSend+0x32>
	__asm volatile
 800b818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81c:	f383 8811 	msr	BASEPRI, r3
 800b820:	f3bf 8f6f 	isb	sy
 800b824:	f3bf 8f4f 	dsb	sy
 800b828:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b82a:	bf00      	nop
 800b82c:	e7fe      	b.n	800b82c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d103      	bne.n	800b83c <xQueueGenericSend+0x40>
 800b834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d101      	bne.n	800b840 <xQueueGenericSend+0x44>
 800b83c:	2301      	movs	r3, #1
 800b83e:	e000      	b.n	800b842 <xQueueGenericSend+0x46>
 800b840:	2300      	movs	r3, #0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d10a      	bne.n	800b85c <xQueueGenericSend+0x60>
	__asm volatile
 800b846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84a:	f383 8811 	msr	BASEPRI, r3
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b858:	bf00      	nop
 800b85a:	e7fe      	b.n	800b85a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	2b02      	cmp	r3, #2
 800b860:	d103      	bne.n	800b86a <xQueueGenericSend+0x6e>
 800b862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b866:	2b01      	cmp	r3, #1
 800b868:	d101      	bne.n	800b86e <xQueueGenericSend+0x72>
 800b86a:	2301      	movs	r3, #1
 800b86c:	e000      	b.n	800b870 <xQueueGenericSend+0x74>
 800b86e:	2300      	movs	r3, #0
 800b870:	2b00      	cmp	r3, #0
 800b872:	d10a      	bne.n	800b88a <xQueueGenericSend+0x8e>
	__asm volatile
 800b874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b878:	f383 8811 	msr	BASEPRI, r3
 800b87c:	f3bf 8f6f 	isb	sy
 800b880:	f3bf 8f4f 	dsb	sy
 800b884:	623b      	str	r3, [r7, #32]
}
 800b886:	bf00      	nop
 800b888:	e7fe      	b.n	800b888 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b88a:	f001 fc37 	bl	800d0fc <xTaskGetSchedulerState>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d102      	bne.n	800b89a <xQueueGenericSend+0x9e>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d101      	bne.n	800b89e <xQueueGenericSend+0xa2>
 800b89a:	2301      	movs	r3, #1
 800b89c:	e000      	b.n	800b8a0 <xQueueGenericSend+0xa4>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10a      	bne.n	800b8ba <xQueueGenericSend+0xbe>
	__asm volatile
 800b8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a8:	f383 8811 	msr	BASEPRI, r3
 800b8ac:	f3bf 8f6f 	isb	sy
 800b8b0:	f3bf 8f4f 	dsb	sy
 800b8b4:	61fb      	str	r3, [r7, #28]
}
 800b8b6:	bf00      	nop
 800b8b8:	e7fe      	b.n	800b8b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b8ba:	f002 fb3b 	bl	800df34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d302      	bcc.n	800b8d0 <xQueueGenericSend+0xd4>
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	d129      	bne.n	800b924 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	68b9      	ldr	r1, [r7, #8]
 800b8d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8d6:	f000 fc5e 	bl	800c196 <prvCopyDataToQueue>
 800b8da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d010      	beq.n	800b906 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e6:	3324      	adds	r3, #36	; 0x24
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f001 fa4b 	bl	800cd84 <xTaskRemoveFromEventList>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d013      	beq.n	800b91c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b8f4:	4b3f      	ldr	r3, [pc, #252]	; (800b9f4 <xQueueGenericSend+0x1f8>)
 800b8f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8fa:	601a      	str	r2, [r3, #0]
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	f3bf 8f6f 	isb	sy
 800b904:	e00a      	b.n	800b91c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d007      	beq.n	800b91c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b90c:	4b39      	ldr	r3, [pc, #228]	; (800b9f4 <xQueueGenericSend+0x1f8>)
 800b90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b912:	601a      	str	r2, [r3, #0]
 800b914:	f3bf 8f4f 	dsb	sy
 800b918:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b91c:	f002 fb3a 	bl	800df94 <vPortExitCritical>
				return pdPASS;
 800b920:	2301      	movs	r3, #1
 800b922:	e063      	b.n	800b9ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d103      	bne.n	800b932 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b92a:	f002 fb33 	bl	800df94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b92e:	2300      	movs	r3, #0
 800b930:	e05c      	b.n	800b9ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b934:	2b00      	cmp	r3, #0
 800b936:	d106      	bne.n	800b946 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b938:	f107 0314 	add.w	r3, r7, #20
 800b93c:	4618      	mov	r0, r3
 800b93e:	f001 fa83 	bl	800ce48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b942:	2301      	movs	r3, #1
 800b944:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b946:	f002 fb25 	bl	800df94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b94a:	f000 ffeb 	bl	800c924 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b94e:	f002 faf1 	bl	800df34 <vPortEnterCritical>
 800b952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b958:	b25b      	sxtb	r3, r3
 800b95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b95e:	d103      	bne.n	800b968 <xQueueGenericSend+0x16c>
 800b960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b962:	2200      	movs	r2, #0
 800b964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b96e:	b25b      	sxtb	r3, r3
 800b970:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b974:	d103      	bne.n	800b97e <xQueueGenericSend+0x182>
 800b976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b978:	2200      	movs	r2, #0
 800b97a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b97e:	f002 fb09 	bl	800df94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b982:	1d3a      	adds	r2, r7, #4
 800b984:	f107 0314 	add.w	r3, r7, #20
 800b988:	4611      	mov	r1, r2
 800b98a:	4618      	mov	r0, r3
 800b98c:	f001 fa72 	bl	800ce74 <xTaskCheckForTimeOut>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d124      	bne.n	800b9e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b996:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b998:	f000 fcf5 	bl	800c386 <prvIsQueueFull>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d018      	beq.n	800b9d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a4:	3310      	adds	r3, #16
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	4611      	mov	r1, r2
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f001 f99a 	bl	800cce4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b9b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9b2:	f000 fc80 	bl	800c2b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b9b6:	f000 ffc3 	bl	800c940 <xTaskResumeAll>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f47f af7c 	bne.w	800b8ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b9c2:	4b0c      	ldr	r3, [pc, #48]	; (800b9f4 <xQueueGenericSend+0x1f8>)
 800b9c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9c8:	601a      	str	r2, [r3, #0]
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	f3bf 8f6f 	isb	sy
 800b9d2:	e772      	b.n	800b8ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b9d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9d6:	f000 fc6e 	bl	800c2b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b9da:	f000 ffb1 	bl	800c940 <xTaskResumeAll>
 800b9de:	e76c      	b.n	800b8ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b9e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9e2:	f000 fc68 	bl	800c2b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b9e6:	f000 ffab 	bl	800c940 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b9ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3738      	adds	r7, #56	; 0x38
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	e000ed04 	.word	0xe000ed04

0800b9f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b090      	sub	sp, #64	; 0x40
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
 800ba04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ba0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10a      	bne.n	800ba26 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba22:	bf00      	nop
 800ba24:	e7fe      	b.n	800ba24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d103      	bne.n	800ba34 <xQueueGenericSendFromISR+0x3c>
 800ba2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d101      	bne.n	800ba38 <xQueueGenericSendFromISR+0x40>
 800ba34:	2301      	movs	r3, #1
 800ba36:	e000      	b.n	800ba3a <xQueueGenericSendFromISR+0x42>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10a      	bne.n	800ba54 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ba3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba42:	f383 8811 	msr	BASEPRI, r3
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba50:	bf00      	nop
 800ba52:	e7fe      	b.n	800ba52 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	2b02      	cmp	r3, #2
 800ba58:	d103      	bne.n	800ba62 <xQueueGenericSendFromISR+0x6a>
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d101      	bne.n	800ba66 <xQueueGenericSendFromISR+0x6e>
 800ba62:	2301      	movs	r3, #1
 800ba64:	e000      	b.n	800ba68 <xQueueGenericSendFromISR+0x70>
 800ba66:	2300      	movs	r3, #0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d10a      	bne.n	800ba82 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ba6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba70:	f383 8811 	msr	BASEPRI, r3
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	623b      	str	r3, [r7, #32]
}
 800ba7e:	bf00      	nop
 800ba80:	e7fe      	b.n	800ba80 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba82:	f002 fb39 	bl	800e0f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ba86:	f3ef 8211 	mrs	r2, BASEPRI
 800ba8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8e:	f383 8811 	msr	BASEPRI, r3
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	61fa      	str	r2, [r7, #28]
 800ba9c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ba9e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800baa0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800baa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baaa:	429a      	cmp	r2, r3
 800baac:	d302      	bcc.n	800bab4 <xQueueGenericSendFromISR+0xbc>
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	2b02      	cmp	r3, #2
 800bab2:	d12f      	bne.n	800bb14 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800baba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800babe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bac4:	683a      	ldr	r2, [r7, #0]
 800bac6:	68b9      	ldr	r1, [r7, #8]
 800bac8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800baca:	f000 fb64 	bl	800c196 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bace:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad6:	d112      	bne.n	800bafe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800badc:	2b00      	cmp	r3, #0
 800bade:	d016      	beq.n	800bb0e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae2:	3324      	adds	r3, #36	; 0x24
 800bae4:	4618      	mov	r0, r3
 800bae6:	f001 f94d 	bl	800cd84 <xTaskRemoveFromEventList>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d00e      	beq.n	800bb0e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d00b      	beq.n	800bb0e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2201      	movs	r2, #1
 800bafa:	601a      	str	r2, [r3, #0]
 800bafc:	e007      	b.n	800bb0e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bafe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bb02:	3301      	adds	r3, #1
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	b25a      	sxtb	r2, r3
 800bb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bb12:	e001      	b.n	800bb18 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bb14:	2300      	movs	r3, #0
 800bb16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb1a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bb22:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3740      	adds	r7, #64	; 0x40
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b08e      	sub	sp, #56	; 0x38
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
 800bb36:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d10a      	bne.n	800bb58 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb46:	f383 8811 	msr	BASEPRI, r3
 800bb4a:	f3bf 8f6f 	isb	sy
 800bb4e:	f3bf 8f4f 	dsb	sy
 800bb52:	623b      	str	r3, [r7, #32]
}
 800bb54:	bf00      	nop
 800bb56:	e7fe      	b.n	800bb56 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00a      	beq.n	800bb76 <xQueueGiveFromISR+0x48>
	__asm volatile
 800bb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	61fb      	str	r3, [r7, #28]
}
 800bb72:	bf00      	nop
 800bb74:	e7fe      	b.n	800bb74 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d103      	bne.n	800bb86 <xQueueGiveFromISR+0x58>
 800bb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d101      	bne.n	800bb8a <xQueueGiveFromISR+0x5c>
 800bb86:	2301      	movs	r3, #1
 800bb88:	e000      	b.n	800bb8c <xQueueGiveFromISR+0x5e>
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d10a      	bne.n	800bba6 <xQueueGiveFromISR+0x78>
	__asm volatile
 800bb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb94:	f383 8811 	msr	BASEPRI, r3
 800bb98:	f3bf 8f6f 	isb	sy
 800bb9c:	f3bf 8f4f 	dsb	sy
 800bba0:	61bb      	str	r3, [r7, #24]
}
 800bba2:	bf00      	nop
 800bba4:	e7fe      	b.n	800bba4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bba6:	f002 faa7 	bl	800e0f8 <vPortValidateInterruptPriority>
	__asm volatile
 800bbaa:	f3ef 8211 	mrs	r2, BASEPRI
 800bbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb2:	f383 8811 	msr	BASEPRI, r3
 800bbb6:	f3bf 8f6f 	isb	sy
 800bbba:	f3bf 8f4f 	dsb	sy
 800bbbe:	617a      	str	r2, [r7, #20]
 800bbc0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bbc2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bbc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d22b      	bcs.n	800bc2e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe2:	1c5a      	adds	r2, r3, #1
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bbe8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bbec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf0:	d112      	bne.n	800bc18 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d016      	beq.n	800bc28 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfc:	3324      	adds	r3, #36	; 0x24
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f001 f8c0 	bl	800cd84 <xTaskRemoveFromEventList>
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00e      	beq.n	800bc28 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d00b      	beq.n	800bc28 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	2201      	movs	r2, #1
 800bc14:	601a      	str	r2, [r3, #0]
 800bc16:	e007      	b.n	800bc28 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	b25a      	sxtb	r2, r3
 800bc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	637b      	str	r3, [r7, #52]	; 0x34
 800bc2c:	e001      	b.n	800bc32 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	637b      	str	r3, [r7, #52]	; 0x34
 800bc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc34:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f383 8811 	msr	BASEPRI, r3
}
 800bc3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3738      	adds	r7, #56	; 0x38
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b08c      	sub	sp, #48	; 0x30
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc54:	2300      	movs	r3, #0
 800bc56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10a      	bne.n	800bc78 <xQueueReceive+0x30>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	623b      	str	r3, [r7, #32]
}
 800bc74:	bf00      	nop
 800bc76:	e7fe      	b.n	800bc76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d103      	bne.n	800bc86 <xQueueReceive+0x3e>
 800bc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d101      	bne.n	800bc8a <xQueueReceive+0x42>
 800bc86:	2301      	movs	r3, #1
 800bc88:	e000      	b.n	800bc8c <xQueueReceive+0x44>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10a      	bne.n	800bca6 <xQueueReceive+0x5e>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	61fb      	str	r3, [r7, #28]
}
 800bca2:	bf00      	nop
 800bca4:	e7fe      	b.n	800bca4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bca6:	f001 fa29 	bl	800d0fc <xTaskGetSchedulerState>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d102      	bne.n	800bcb6 <xQueueReceive+0x6e>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d101      	bne.n	800bcba <xQueueReceive+0x72>
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e000      	b.n	800bcbc <xQueueReceive+0x74>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10a      	bne.n	800bcd6 <xQueueReceive+0x8e>
	__asm volatile
 800bcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc4:	f383 8811 	msr	BASEPRI, r3
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	61bb      	str	r3, [r7, #24]
}
 800bcd2:	bf00      	nop
 800bcd4:	e7fe      	b.n	800bcd4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcd6:	f002 f92d 	bl	800df34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d01f      	beq.n	800bd26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bce6:	68b9      	ldr	r1, [r7, #8]
 800bce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcea:	f000 fabe 	bl	800c26a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf0:	1e5a      	subs	r2, r3, #1
 800bcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00f      	beq.n	800bd1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd00:	3310      	adds	r3, #16
 800bd02:	4618      	mov	r0, r3
 800bd04:	f001 f83e 	bl	800cd84 <xTaskRemoveFromEventList>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d007      	beq.n	800bd1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd0e:	4b3d      	ldr	r3, [pc, #244]	; (800be04 <xQueueReceive+0x1bc>)
 800bd10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd14:	601a      	str	r2, [r3, #0]
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd1e:	f002 f939 	bl	800df94 <vPortExitCritical>
				return pdPASS;
 800bd22:	2301      	movs	r3, #1
 800bd24:	e069      	b.n	800bdfa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d103      	bne.n	800bd34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd2c:	f002 f932 	bl	800df94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bd30:	2300      	movs	r3, #0
 800bd32:	e062      	b.n	800bdfa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d106      	bne.n	800bd48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd3a:	f107 0310 	add.w	r3, r7, #16
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f001 f882 	bl	800ce48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd44:	2301      	movs	r3, #1
 800bd46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd48:	f002 f924 	bl	800df94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd4c:	f000 fdea 	bl	800c924 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd50:	f002 f8f0 	bl	800df34 <vPortEnterCritical>
 800bd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd5a:	b25b      	sxtb	r3, r3
 800bd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd60:	d103      	bne.n	800bd6a <xQueueReceive+0x122>
 800bd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd64:	2200      	movs	r2, #0
 800bd66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd70:	b25b      	sxtb	r3, r3
 800bd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd76:	d103      	bne.n	800bd80 <xQueueReceive+0x138>
 800bd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd80:	f002 f908 	bl	800df94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd84:	1d3a      	adds	r2, r7, #4
 800bd86:	f107 0310 	add.w	r3, r7, #16
 800bd8a:	4611      	mov	r1, r2
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f001 f871 	bl	800ce74 <xTaskCheckForTimeOut>
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d123      	bne.n	800bde0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd9a:	f000 fade 	bl	800c35a <prvIsQueueEmpty>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d017      	beq.n	800bdd4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda6:	3324      	adds	r3, #36	; 0x24
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	4611      	mov	r1, r2
 800bdac:	4618      	mov	r0, r3
 800bdae:	f000 ff99 	bl	800cce4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bdb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdb4:	f000 fa7f 	bl	800c2b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bdb8:	f000 fdc2 	bl	800c940 <xTaskResumeAll>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d189      	bne.n	800bcd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bdc2:	4b10      	ldr	r3, [pc, #64]	; (800be04 <xQueueReceive+0x1bc>)
 800bdc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc8:	601a      	str	r2, [r3, #0]
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	e780      	b.n	800bcd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bdd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdd6:	f000 fa6e 	bl	800c2b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdda:	f000 fdb1 	bl	800c940 <xTaskResumeAll>
 800bdde:	e77a      	b.n	800bcd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bde0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bde2:	f000 fa68 	bl	800c2b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bde6:	f000 fdab 	bl	800c940 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdec:	f000 fab5 	bl	800c35a <prvIsQueueEmpty>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f43f af6f 	beq.w	800bcd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bdf8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3730      	adds	r7, #48	; 0x30
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	e000ed04 	.word	0xe000ed04

0800be08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b08e      	sub	sp, #56	; 0x38
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800be12:	2300      	movs	r3, #0
 800be14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800be1a:	2300      	movs	r3, #0
 800be1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800be1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be20:	2b00      	cmp	r3, #0
 800be22:	d10a      	bne.n	800be3a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800be24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be28:	f383 8811 	msr	BASEPRI, r3
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f3bf 8f4f 	dsb	sy
 800be34:	623b      	str	r3, [r7, #32]
}
 800be36:	bf00      	nop
 800be38:	e7fe      	b.n	800be38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00a      	beq.n	800be58 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800be42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be46:	f383 8811 	msr	BASEPRI, r3
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	61fb      	str	r3, [r7, #28]
}
 800be54:	bf00      	nop
 800be56:	e7fe      	b.n	800be56 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be58:	f001 f950 	bl	800d0fc <xTaskGetSchedulerState>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d102      	bne.n	800be68 <xQueueSemaphoreTake+0x60>
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d101      	bne.n	800be6c <xQueueSemaphoreTake+0x64>
 800be68:	2301      	movs	r3, #1
 800be6a:	e000      	b.n	800be6e <xQueueSemaphoreTake+0x66>
 800be6c:	2300      	movs	r3, #0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10a      	bne.n	800be88 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800be72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be76:	f383 8811 	msr	BASEPRI, r3
 800be7a:	f3bf 8f6f 	isb	sy
 800be7e:	f3bf 8f4f 	dsb	sy
 800be82:	61bb      	str	r3, [r7, #24]
}
 800be84:	bf00      	nop
 800be86:	e7fe      	b.n	800be86 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be88:	f002 f854 	bl	800df34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800be8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be90:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800be92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be94:	2b00      	cmp	r3, #0
 800be96:	d024      	beq.n	800bee2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800be98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9a:	1e5a      	subs	r2, r3, #1
 800be9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d104      	bne.n	800beb2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bea8:	f001 fad0 	bl	800d44c <pvTaskIncrementMutexHeldCount>
 800beac:	4602      	mov	r2, r0
 800beae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800beb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb4:	691b      	ldr	r3, [r3, #16]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00f      	beq.n	800beda <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800beba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bebc:	3310      	adds	r3, #16
 800bebe:	4618      	mov	r0, r3
 800bec0:	f000 ff60 	bl	800cd84 <xTaskRemoveFromEventList>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d007      	beq.n	800beda <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800beca:	4b54      	ldr	r3, [pc, #336]	; (800c01c <xQueueSemaphoreTake+0x214>)
 800becc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bed0:	601a      	str	r2, [r3, #0]
 800bed2:	f3bf 8f4f 	dsb	sy
 800bed6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800beda:	f002 f85b 	bl	800df94 <vPortExitCritical>
				return pdPASS;
 800bede:	2301      	movs	r3, #1
 800bee0:	e097      	b.n	800c012 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d111      	bne.n	800bf0c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00a      	beq.n	800bf04 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800beee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	617b      	str	r3, [r7, #20]
}
 800bf00:	bf00      	nop
 800bf02:	e7fe      	b.n	800bf02 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bf04:	f002 f846 	bl	800df94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	e082      	b.n	800c012 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d106      	bne.n	800bf20 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf12:	f107 030c 	add.w	r3, r7, #12
 800bf16:	4618      	mov	r0, r3
 800bf18:	f000 ff96 	bl	800ce48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf20:	f002 f838 	bl	800df94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf24:	f000 fcfe 	bl	800c924 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf28:	f002 f804 	bl	800df34 <vPortEnterCritical>
 800bf2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf32:	b25b      	sxtb	r3, r3
 800bf34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf38:	d103      	bne.n	800bf42 <xQueueSemaphoreTake+0x13a>
 800bf3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf48:	b25b      	sxtb	r3, r3
 800bf4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4e:	d103      	bne.n	800bf58 <xQueueSemaphoreTake+0x150>
 800bf50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf52:	2200      	movs	r2, #0
 800bf54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf58:	f002 f81c 	bl	800df94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf5c:	463a      	mov	r2, r7
 800bf5e:	f107 030c 	add.w	r3, r7, #12
 800bf62:	4611      	mov	r1, r2
 800bf64:	4618      	mov	r0, r3
 800bf66:	f000 ff85 	bl	800ce74 <xTaskCheckForTimeOut>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d132      	bne.n	800bfd6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf72:	f000 f9f2 	bl	800c35a <prvIsQueueEmpty>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d026      	beq.n	800bfca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d109      	bne.n	800bf98 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bf84:	f001 ffd6 	bl	800df34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8a:	689b      	ldr	r3, [r3, #8]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f001 f8d3 	bl	800d138 <xTaskPriorityInherit>
 800bf92:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bf94:	f001 fffe 	bl	800df94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9a:	3324      	adds	r3, #36	; 0x24
 800bf9c:	683a      	ldr	r2, [r7, #0]
 800bf9e:	4611      	mov	r1, r2
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f000 fe9f 	bl	800cce4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bfa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfa8:	f000 f985 	bl	800c2b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bfac:	f000 fcc8 	bl	800c940 <xTaskResumeAll>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	f47f af68 	bne.w	800be88 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bfb8:	4b18      	ldr	r3, [pc, #96]	; (800c01c <xQueueSemaphoreTake+0x214>)
 800bfba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfbe:	601a      	str	r2, [r3, #0]
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	e75e      	b.n	800be88 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bfca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfcc:	f000 f973 	bl	800c2b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfd0:	f000 fcb6 	bl	800c940 <xTaskResumeAll>
 800bfd4:	e758      	b.n	800be88 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bfd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfd8:	f000 f96d 	bl	800c2b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfdc:	f000 fcb0 	bl	800c940 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bfe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfe2:	f000 f9ba 	bl	800c35a <prvIsQueueEmpty>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f43f af4d 	beq.w	800be88 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00d      	beq.n	800c010 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bff4:	f001 ff9e 	bl	800df34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bffa:	f000 f8b4 	bl	800c166 <prvGetDisinheritPriorityAfterTimeout>
 800bffe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c006:	4618      	mov	r0, r3
 800c008:	f001 f992 	bl	800d330 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c00c:	f001 ffc2 	bl	800df94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c010:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c012:	4618      	mov	r0, r3
 800c014:	3738      	adds	r7, #56	; 0x38
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	e000ed04 	.word	0xe000ed04

0800c020 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b08e      	sub	sp, #56	; 0x38
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10a      	bne.n	800c04c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03a:	f383 8811 	msr	BASEPRI, r3
 800c03e:	f3bf 8f6f 	isb	sy
 800c042:	f3bf 8f4f 	dsb	sy
 800c046:	623b      	str	r3, [r7, #32]
}
 800c048:	bf00      	nop
 800c04a:	e7fe      	b.n	800c04a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d103      	bne.n	800c05a <xQueueReceiveFromISR+0x3a>
 800c052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c056:	2b00      	cmp	r3, #0
 800c058:	d101      	bne.n	800c05e <xQueueReceiveFromISR+0x3e>
 800c05a:	2301      	movs	r3, #1
 800c05c:	e000      	b.n	800c060 <xQueueReceiveFromISR+0x40>
 800c05e:	2300      	movs	r3, #0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d10a      	bne.n	800c07a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c068:	f383 8811 	msr	BASEPRI, r3
 800c06c:	f3bf 8f6f 	isb	sy
 800c070:	f3bf 8f4f 	dsb	sy
 800c074:	61fb      	str	r3, [r7, #28]
}
 800c076:	bf00      	nop
 800c078:	e7fe      	b.n	800c078 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c07a:	f002 f83d 	bl	800e0f8 <vPortValidateInterruptPriority>
	__asm volatile
 800c07e:	f3ef 8211 	mrs	r2, BASEPRI
 800c082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c086:	f383 8811 	msr	BASEPRI, r3
 800c08a:	f3bf 8f6f 	isb	sy
 800c08e:	f3bf 8f4f 	dsb	sy
 800c092:	61ba      	str	r2, [r7, #24]
 800c094:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c096:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c098:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c09e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d02f      	beq.n	800c106 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c0b0:	68b9      	ldr	r1, [r7, #8]
 800c0b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0b4:	f000 f8d9 	bl	800c26a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ba:	1e5a      	subs	r2, r3, #1
 800c0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c0c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c8:	d112      	bne.n	800c0f0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0cc:	691b      	ldr	r3, [r3, #16]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d016      	beq.n	800c100 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d4:	3310      	adds	r3, #16
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f000 fe54 	bl	800cd84 <xTaskRemoveFromEventList>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00e      	beq.n	800c100 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00b      	beq.n	800c100 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	601a      	str	r2, [r3, #0]
 800c0ee:	e007      	b.n	800c100 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c0f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	b25a      	sxtb	r2, r3
 800c0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c100:	2301      	movs	r3, #1
 800c102:	637b      	str	r3, [r7, #52]	; 0x34
 800c104:	e001      	b.n	800c10a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c106:	2300      	movs	r3, #0
 800c108:	637b      	str	r3, [r7, #52]	; 0x34
 800c10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	f383 8811 	msr	BASEPRI, r3
}
 800c114:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3738      	adds	r7, #56	; 0x38
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d10a      	bne.n	800c148 <vQueueDelete+0x28>
	__asm volatile
 800c132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c136:	f383 8811 	msr	BASEPRI, r3
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	60bb      	str	r3, [r7, #8]
}
 800c144:	bf00      	nop
 800c146:	e7fe      	b.n	800c146 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c148:	68f8      	ldr	r0, [r7, #12]
 800c14a:	f000 f95f 	bl	800c40c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c154:	2b00      	cmp	r3, #0
 800c156:	d102      	bne.n	800c15e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c158:	68f8      	ldr	r0, [r7, #12]
 800c15a:	f002 f8d9 	bl	800e310 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c15e:	bf00      	nop
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c166:	b480      	push	{r7}
 800c168:	b085      	sub	sp, #20
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c172:	2b00      	cmp	r3, #0
 800c174:	d006      	beq.n	800c184 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f1c3 0307 	rsb	r3, r3, #7
 800c180:	60fb      	str	r3, [r7, #12]
 800c182:	e001      	b.n	800c188 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c184:	2300      	movs	r3, #0
 800c186:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c188:	68fb      	ldr	r3, [r7, #12]
	}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3714      	adds	r7, #20
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr

0800c196 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b086      	sub	sp, #24
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	60f8      	str	r0, [r7, #12]
 800c19e:	60b9      	str	r1, [r7, #8]
 800c1a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10d      	bne.n	800c1d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d14d      	bne.n	800c258 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f001 f82f 	bl	800d224 <xTaskPriorityDisinherit>
 800c1c6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	609a      	str	r2, [r3, #8]
 800c1ce:	e043      	b.n	800c258 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d119      	bne.n	800c20a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6858      	ldr	r0, [r3, #4]
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1de:	461a      	mov	r2, r3
 800c1e0:	68b9      	ldr	r1, [r7, #8]
 800c1e2:	f002 fd7a 	bl	800ecda <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	685a      	ldr	r2, [r3, #4]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ee:	441a      	add	r2, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	685a      	ldr	r2, [r3, #4]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	689b      	ldr	r3, [r3, #8]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d32b      	bcc.n	800c258 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	605a      	str	r2, [r3, #4]
 800c208:	e026      	b.n	800c258 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	68d8      	ldr	r0, [r3, #12]
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c212:	461a      	mov	r2, r3
 800c214:	68b9      	ldr	r1, [r7, #8]
 800c216:	f002 fd60 	bl	800ecda <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	68da      	ldr	r2, [r3, #12]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c222:	425b      	negs	r3, r3
 800c224:	441a      	add	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	68da      	ldr	r2, [r3, #12]
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	429a      	cmp	r2, r3
 800c234:	d207      	bcs.n	800c246 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	689a      	ldr	r2, [r3, #8]
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c23e:	425b      	negs	r3, r3
 800c240:	441a      	add	r2, r3
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2b02      	cmp	r3, #2
 800c24a:	d105      	bne.n	800c258 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d002      	beq.n	800c258 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	3b01      	subs	r3, #1
 800c256:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	1c5a      	adds	r2, r3, #1
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c260:	697b      	ldr	r3, [r7, #20]
}
 800c262:	4618      	mov	r0, r3
 800c264:	3718      	adds	r7, #24
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b082      	sub	sp, #8
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
 800c272:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d018      	beq.n	800c2ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	68da      	ldr	r2, [r3, #12]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c284:	441a      	add	r2, r3
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	68da      	ldr	r2, [r3, #12]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	689b      	ldr	r3, [r3, #8]
 800c292:	429a      	cmp	r2, r3
 800c294:	d303      	bcc.n	800c29e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681a      	ldr	r2, [r3, #0]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	68d9      	ldr	r1, [r3, #12]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	6838      	ldr	r0, [r7, #0]
 800c2aa:	f002 fd16 	bl	800ecda <memcpy>
	}
}
 800c2ae:	bf00      	nop
 800c2b0:	3708      	adds	r7, #8
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b084      	sub	sp, #16
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c2be:	f001 fe39 	bl	800df34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2ca:	e011      	b.n	800c2f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d012      	beq.n	800c2fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	3324      	adds	r3, #36	; 0x24
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f000 fd53 	bl	800cd84 <xTaskRemoveFromEventList>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d001      	beq.n	800c2e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2e4:	f000 fe28 	bl	800cf38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c2e8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	dce9      	bgt.n	800c2cc <prvUnlockQueue+0x16>
 800c2f8:	e000      	b.n	800c2fc <prvUnlockQueue+0x46>
					break;
 800c2fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	22ff      	movs	r2, #255	; 0xff
 800c300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c304:	f001 fe46 	bl	800df94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c308:	f001 fe14 	bl	800df34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c312:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c314:	e011      	b.n	800c33a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	691b      	ldr	r3, [r3, #16]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d012      	beq.n	800c344 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	3310      	adds	r3, #16
 800c322:	4618      	mov	r0, r3
 800c324:	f000 fd2e 	bl	800cd84 <xTaskRemoveFromEventList>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d001      	beq.n	800c332 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c32e:	f000 fe03 	bl	800cf38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c332:	7bbb      	ldrb	r3, [r7, #14]
 800c334:	3b01      	subs	r3, #1
 800c336:	b2db      	uxtb	r3, r3
 800c338:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c33a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	dce9      	bgt.n	800c316 <prvUnlockQueue+0x60>
 800c342:	e000      	b.n	800c346 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c344:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	22ff      	movs	r2, #255	; 0xff
 800c34a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c34e:	f001 fe21 	bl	800df94 <vPortExitCritical>
}
 800c352:	bf00      	nop
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b084      	sub	sp, #16
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c362:	f001 fde7 	bl	800df34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d102      	bne.n	800c374 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c36e:	2301      	movs	r3, #1
 800c370:	60fb      	str	r3, [r7, #12]
 800c372:	e001      	b.n	800c378 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c374:	2300      	movs	r3, #0
 800c376:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c378:	f001 fe0c 	bl	800df94 <vPortExitCritical>

	return xReturn;
 800c37c:	68fb      	ldr	r3, [r7, #12]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}

0800c386 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c386:	b580      	push	{r7, lr}
 800c388:	b084      	sub	sp, #16
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c38e:	f001 fdd1 	bl	800df34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d102      	bne.n	800c3a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	60fb      	str	r3, [r7, #12]
 800c3a2:	e001      	b.n	800c3a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3a8:	f001 fdf4 	bl	800df94 <vPortExitCritical>

	return xReturn;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
	...

0800c3b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	60fb      	str	r3, [r7, #12]
 800c3c6:	e014      	b.n	800c3f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c3c8:	4a0f      	ldr	r2, [pc, #60]	; (800c408 <vQueueAddToRegistry+0x50>)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d10b      	bne.n	800c3ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c3d4:	490c      	ldr	r1, [pc, #48]	; (800c408 <vQueueAddToRegistry+0x50>)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	683a      	ldr	r2, [r7, #0]
 800c3da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c3de:	4a0a      	ldr	r2, [pc, #40]	; (800c408 <vQueueAddToRegistry+0x50>)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	00db      	lsls	r3, r3, #3
 800c3e4:	4413      	add	r3, r2
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c3ea:	e006      	b.n	800c3fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	60fb      	str	r3, [r7, #12]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2b07      	cmp	r3, #7
 800c3f6:	d9e7      	bls.n	800c3c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c3f8:	bf00      	nop
 800c3fa:	bf00      	nop
 800c3fc:	3714      	adds	r7, #20
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	20002540 	.word	0x20002540

0800c40c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c40c:	b480      	push	{r7}
 800c40e:	b085      	sub	sp, #20
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c414:	2300      	movs	r3, #0
 800c416:	60fb      	str	r3, [r7, #12]
 800c418:	e016      	b.n	800c448 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c41a:	4a10      	ldr	r2, [pc, #64]	; (800c45c <vQueueUnregisterQueue+0x50>)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	4413      	add	r3, r2
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	429a      	cmp	r2, r3
 800c428:	d10b      	bne.n	800c442 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c42a:	4a0c      	ldr	r2, [pc, #48]	; (800c45c <vQueueUnregisterQueue+0x50>)
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2100      	movs	r1, #0
 800c430:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c434:	4a09      	ldr	r2, [pc, #36]	; (800c45c <vQueueUnregisterQueue+0x50>)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	00db      	lsls	r3, r3, #3
 800c43a:	4413      	add	r3, r2
 800c43c:	2200      	movs	r2, #0
 800c43e:	605a      	str	r2, [r3, #4]
				break;
 800c440:	e006      	b.n	800c450 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	3301      	adds	r3, #1
 800c446:	60fb      	str	r3, [r7, #12]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2b07      	cmp	r3, #7
 800c44c:	d9e5      	bls.n	800c41a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c44e:	bf00      	nop
 800c450:	bf00      	nop
 800c452:	3714      	adds	r7, #20
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr
 800c45c:	20002540 	.word	0x20002540

0800c460 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c460:	b580      	push	{r7, lr}
 800c462:	b086      	sub	sp, #24
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c470:	f001 fd60 	bl	800df34 <vPortEnterCritical>
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c47a:	b25b      	sxtb	r3, r3
 800c47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c480:	d103      	bne.n	800c48a <vQueueWaitForMessageRestricted+0x2a>
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	2200      	movs	r2, #0
 800c486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c490:	b25b      	sxtb	r3, r3
 800c492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c496:	d103      	bne.n	800c4a0 <vQueueWaitForMessageRestricted+0x40>
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	2200      	movs	r2, #0
 800c49c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4a0:	f001 fd78 	bl	800df94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d106      	bne.n	800c4ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	3324      	adds	r3, #36	; 0x24
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	68b9      	ldr	r1, [r7, #8]
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f000 fc39 	bl	800cd2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c4ba:	6978      	ldr	r0, [r7, #20]
 800c4bc:	f7ff fefb 	bl	800c2b6 <prvUnlockQueue>
	}
 800c4c0:	bf00      	nop
 800c4c2:	3718      	adds	r7, #24
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b08e      	sub	sp, #56	; 0x38
 800c4cc:	af04      	add	r7, sp, #16
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	607a      	str	r2, [r7, #4]
 800c4d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10a      	bne.n	800c4f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e0:	f383 8811 	msr	BASEPRI, r3
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	623b      	str	r3, [r7, #32]
}
 800c4ee:	bf00      	nop
 800c4f0:	e7fe      	b.n	800c4f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d10a      	bne.n	800c50e <xTaskCreateStatic+0x46>
	__asm volatile
 800c4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fc:	f383 8811 	msr	BASEPRI, r3
 800c500:	f3bf 8f6f 	isb	sy
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	61fb      	str	r3, [r7, #28]
}
 800c50a:	bf00      	nop
 800c50c:	e7fe      	b.n	800c50c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c50e:	2354      	movs	r3, #84	; 0x54
 800c510:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	2b54      	cmp	r3, #84	; 0x54
 800c516:	d00a      	beq.n	800c52e <xTaskCreateStatic+0x66>
	__asm volatile
 800c518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	61bb      	str	r3, [r7, #24]
}
 800c52a:	bf00      	nop
 800c52c:	e7fe      	b.n	800c52c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c52e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c532:	2b00      	cmp	r3, #0
 800c534:	d01e      	beq.n	800c574 <xTaskCreateStatic+0xac>
 800c536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d01b      	beq.n	800c574 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c544:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c548:	2202      	movs	r2, #2
 800c54a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c54e:	2300      	movs	r3, #0
 800c550:	9303      	str	r3, [sp, #12]
 800c552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c554:	9302      	str	r3, [sp, #8]
 800c556:	f107 0314 	add.w	r3, r7, #20
 800c55a:	9301      	str	r3, [sp, #4]
 800c55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55e:	9300      	str	r3, [sp, #0]
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	68b9      	ldr	r1, [r7, #8]
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f000 f850 	bl	800c60c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c56c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c56e:	f000 f8d5 	bl	800c71c <prvAddNewTaskToReadyList>
 800c572:	e001      	b.n	800c578 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c574:	2300      	movs	r3, #0
 800c576:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c578:	697b      	ldr	r3, [r7, #20]
	}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3728      	adds	r7, #40	; 0x28
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c582:	b580      	push	{r7, lr}
 800c584:	b08c      	sub	sp, #48	; 0x30
 800c586:	af04      	add	r7, sp, #16
 800c588:	60f8      	str	r0, [r7, #12]
 800c58a:	60b9      	str	r1, [r7, #8]
 800c58c:	603b      	str	r3, [r7, #0]
 800c58e:	4613      	mov	r3, r2
 800c590:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c592:	88fb      	ldrh	r3, [r7, #6]
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	4618      	mov	r0, r3
 800c598:	f001 fdee 	bl	800e178 <pvPortMalloc>
 800c59c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d00e      	beq.n	800c5c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c5a4:	2054      	movs	r0, #84	; 0x54
 800c5a6:	f001 fde7 	bl	800e178 <pvPortMalloc>
 800c5aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d003      	beq.n	800c5ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	697a      	ldr	r2, [r7, #20]
 800c5b6:	631a      	str	r2, [r3, #48]	; 0x30
 800c5b8:	e005      	b.n	800c5c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c5ba:	6978      	ldr	r0, [r7, #20]
 800c5bc:	f001 fea8 	bl	800e310 <vPortFree>
 800c5c0:	e001      	b.n	800c5c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d017      	beq.n	800c5fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c5d4:	88fa      	ldrh	r2, [r7, #6]
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	9303      	str	r3, [sp, #12]
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	9302      	str	r3, [sp, #8]
 800c5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e0:	9301      	str	r3, [sp, #4]
 800c5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e4:	9300      	str	r3, [sp, #0]
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	68b9      	ldr	r1, [r7, #8]
 800c5ea:	68f8      	ldr	r0, [r7, #12]
 800c5ec:	f000 f80e 	bl	800c60c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c5f0:	69f8      	ldr	r0, [r7, #28]
 800c5f2:	f000 f893 	bl	800c71c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	61bb      	str	r3, [r7, #24]
 800c5fa:	e002      	b.n	800c602 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c5fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c600:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c602:	69bb      	ldr	r3, [r7, #24]
	}
 800c604:	4618      	mov	r0, r3
 800c606:	3720      	adds	r7, #32
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b088      	sub	sp, #32
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
 800c618:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c624:	3b01      	subs	r3, #1
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	4413      	add	r3, r2
 800c62a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c62c:	69bb      	ldr	r3, [r7, #24]
 800c62e:	f023 0307 	bic.w	r3, r3, #7
 800c632:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c634:	69bb      	ldr	r3, [r7, #24]
 800c636:	f003 0307 	and.w	r3, r3, #7
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00a      	beq.n	800c654 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	617b      	str	r3, [r7, #20]
}
 800c650:	bf00      	nop
 800c652:	e7fe      	b.n	800c652 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d01f      	beq.n	800c69a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c65a:	2300      	movs	r3, #0
 800c65c:	61fb      	str	r3, [r7, #28]
 800c65e:	e012      	b.n	800c686 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c660:	68ba      	ldr	r2, [r7, #8]
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	4413      	add	r3, r2
 800c666:	7819      	ldrb	r1, [r3, #0]
 800c668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	4413      	add	r3, r2
 800c66e:	3334      	adds	r3, #52	; 0x34
 800c670:	460a      	mov	r2, r1
 800c672:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c674:	68ba      	ldr	r2, [r7, #8]
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	4413      	add	r3, r2
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d006      	beq.n	800c68e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	3301      	adds	r3, #1
 800c684:	61fb      	str	r3, [r7, #28]
 800c686:	69fb      	ldr	r3, [r7, #28]
 800c688:	2b0f      	cmp	r3, #15
 800c68a:	d9e9      	bls.n	800c660 <prvInitialiseNewTask+0x54>
 800c68c:	e000      	b.n	800c690 <prvInitialiseNewTask+0x84>
			{
				break;
 800c68e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c692:	2200      	movs	r2, #0
 800c694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c698:	e003      	b.n	800c6a2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69c:	2200      	movs	r2, #0
 800c69e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a4:	2b06      	cmp	r3, #6
 800c6a6:	d901      	bls.n	800c6ac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c6a8:	2306      	movs	r3, #6
 800c6aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6b6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7fe fe80 	bl	800b3c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ca:	3318      	adds	r3, #24
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7fe fe7b 	bl	800b3c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6da:	f1c3 0207 	rsb	r2, r3, #7
 800c6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	68f9      	ldr	r1, [r7, #12]
 800c6fa:	69b8      	ldr	r0, [r7, #24]
 800c6fc:	f001 faec 	bl	800dcd8 <pxPortInitialiseStack>
 800c700:	4602      	mov	r2, r0
 800c702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c704:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d002      	beq.n	800c712 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c712:	bf00      	nop
 800c714:	3720      	adds	r7, #32
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
	...

0800c71c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c724:	f001 fc06 	bl	800df34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c728:	4b2a      	ldr	r3, [pc, #168]	; (800c7d4 <prvAddNewTaskToReadyList+0xb8>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	3301      	adds	r3, #1
 800c72e:	4a29      	ldr	r2, [pc, #164]	; (800c7d4 <prvAddNewTaskToReadyList+0xb8>)
 800c730:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c732:	4b29      	ldr	r3, [pc, #164]	; (800c7d8 <prvAddNewTaskToReadyList+0xbc>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d109      	bne.n	800c74e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c73a:	4a27      	ldr	r2, [pc, #156]	; (800c7d8 <prvAddNewTaskToReadyList+0xbc>)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c740:	4b24      	ldr	r3, [pc, #144]	; (800c7d4 <prvAddNewTaskToReadyList+0xb8>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b01      	cmp	r3, #1
 800c746:	d110      	bne.n	800c76a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c748:	f000 fc1a 	bl	800cf80 <prvInitialiseTaskLists>
 800c74c:	e00d      	b.n	800c76a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c74e:	4b23      	ldr	r3, [pc, #140]	; (800c7dc <prvAddNewTaskToReadyList+0xc0>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d109      	bne.n	800c76a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c756:	4b20      	ldr	r3, [pc, #128]	; (800c7d8 <prvAddNewTaskToReadyList+0xbc>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c760:	429a      	cmp	r2, r3
 800c762:	d802      	bhi.n	800c76a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c764:	4a1c      	ldr	r2, [pc, #112]	; (800c7d8 <prvAddNewTaskToReadyList+0xbc>)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c76a:	4b1d      	ldr	r3, [pc, #116]	; (800c7e0 <prvAddNewTaskToReadyList+0xc4>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	3301      	adds	r3, #1
 800c770:	4a1b      	ldr	r2, [pc, #108]	; (800c7e0 <prvAddNewTaskToReadyList+0xc4>)
 800c772:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c778:	2201      	movs	r2, #1
 800c77a:	409a      	lsls	r2, r3
 800c77c:	4b19      	ldr	r3, [pc, #100]	; (800c7e4 <prvAddNewTaskToReadyList+0xc8>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4313      	orrs	r3, r2
 800c782:	4a18      	ldr	r2, [pc, #96]	; (800c7e4 <prvAddNewTaskToReadyList+0xc8>)
 800c784:	6013      	str	r3, [r2, #0]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c78a:	4613      	mov	r3, r2
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	4413      	add	r3, r2
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	4a15      	ldr	r2, [pc, #84]	; (800c7e8 <prvAddNewTaskToReadyList+0xcc>)
 800c794:	441a      	add	r2, r3
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	3304      	adds	r3, #4
 800c79a:	4619      	mov	r1, r3
 800c79c:	4610      	mov	r0, r2
 800c79e:	f7fe fe20 	bl	800b3e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c7a2:	f001 fbf7 	bl	800df94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c7a6:	4b0d      	ldr	r3, [pc, #52]	; (800c7dc <prvAddNewTaskToReadyList+0xc0>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00e      	beq.n	800c7cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c7ae:	4b0a      	ldr	r3, [pc, #40]	; (800c7d8 <prvAddNewTaskToReadyList+0xbc>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d207      	bcs.n	800c7cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c7bc:	4b0b      	ldr	r3, [pc, #44]	; (800c7ec <prvAddNewTaskToReadyList+0xd0>)
 800c7be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7c2:	601a      	str	r2, [r3, #0]
 800c7c4:	f3bf 8f4f 	dsb	sy
 800c7c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7cc:	bf00      	nop
 800c7ce:	3708      	adds	r7, #8
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	20002680 	.word	0x20002680
 800c7d8:	20002580 	.word	0x20002580
 800c7dc:	2000268c 	.word	0x2000268c
 800c7e0:	2000269c 	.word	0x2000269c
 800c7e4:	20002688 	.word	0x20002688
 800c7e8:	20002584 	.word	0x20002584
 800c7ec:	e000ed04 	.word	0xe000ed04

0800c7f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d017      	beq.n	800c832 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c802:	4b13      	ldr	r3, [pc, #76]	; (800c850 <vTaskDelay+0x60>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00a      	beq.n	800c820 <vTaskDelay+0x30>
	__asm volatile
 800c80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80e:	f383 8811 	msr	BASEPRI, r3
 800c812:	f3bf 8f6f 	isb	sy
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	60bb      	str	r3, [r7, #8]
}
 800c81c:	bf00      	nop
 800c81e:	e7fe      	b.n	800c81e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c820:	f000 f880 	bl	800c924 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c824:	2100      	movs	r1, #0
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 fe24 	bl	800d474 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c82c:	f000 f888 	bl	800c940 <xTaskResumeAll>
 800c830:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d107      	bne.n	800c848 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c838:	4b06      	ldr	r3, [pc, #24]	; (800c854 <vTaskDelay+0x64>)
 800c83a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c83e:	601a      	str	r2, [r3, #0]
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c848:	bf00      	nop
 800c84a:	3710      	adds	r7, #16
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	200026a8 	.word	0x200026a8
 800c854:	e000ed04 	.word	0xe000ed04

0800c858 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b08a      	sub	sp, #40	; 0x28
 800c85c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c85e:	2300      	movs	r3, #0
 800c860:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c862:	2300      	movs	r3, #0
 800c864:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c866:	463a      	mov	r2, r7
 800c868:	1d39      	adds	r1, r7, #4
 800c86a:	f107 0308 	add.w	r3, r7, #8
 800c86e:	4618      	mov	r0, r3
 800c870:	f7f5 f98c 	bl	8001b8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c874:	6839      	ldr	r1, [r7, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	68ba      	ldr	r2, [r7, #8]
 800c87a:	9202      	str	r2, [sp, #8]
 800c87c:	9301      	str	r3, [sp, #4]
 800c87e:	2300      	movs	r3, #0
 800c880:	9300      	str	r3, [sp, #0]
 800c882:	2300      	movs	r3, #0
 800c884:	460a      	mov	r2, r1
 800c886:	4921      	ldr	r1, [pc, #132]	; (800c90c <vTaskStartScheduler+0xb4>)
 800c888:	4821      	ldr	r0, [pc, #132]	; (800c910 <vTaskStartScheduler+0xb8>)
 800c88a:	f7ff fe1d 	bl	800c4c8 <xTaskCreateStatic>
 800c88e:	4603      	mov	r3, r0
 800c890:	4a20      	ldr	r2, [pc, #128]	; (800c914 <vTaskStartScheduler+0xbc>)
 800c892:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c894:	4b1f      	ldr	r3, [pc, #124]	; (800c914 <vTaskStartScheduler+0xbc>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d002      	beq.n	800c8a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c89c:	2301      	movs	r3, #1
 800c89e:	617b      	str	r3, [r7, #20]
 800c8a0:	e001      	b.n	800c8a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d102      	bne.n	800c8b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c8ac:	f000 fe48 	bl	800d540 <xTimerCreateTimerTask>
 800c8b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d116      	bne.n	800c8e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8bc:	f383 8811 	msr	BASEPRI, r3
 800c8c0:	f3bf 8f6f 	isb	sy
 800c8c4:	f3bf 8f4f 	dsb	sy
 800c8c8:	613b      	str	r3, [r7, #16]
}
 800c8ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c8cc:	4b12      	ldr	r3, [pc, #72]	; (800c918 <vTaskStartScheduler+0xc0>)
 800c8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c8d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c8d4:	4b11      	ldr	r3, [pc, #68]	; (800c91c <vTaskStartScheduler+0xc4>)
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c8da:	4b11      	ldr	r3, [pc, #68]	; (800c920 <vTaskStartScheduler+0xc8>)
 800c8dc:	2200      	movs	r2, #0
 800c8de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c8e0:	f001 fa86 	bl	800ddf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c8e4:	e00e      	b.n	800c904 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ec:	d10a      	bne.n	800c904 <vTaskStartScheduler+0xac>
	__asm volatile
 800c8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f2:	f383 8811 	msr	BASEPRI, r3
 800c8f6:	f3bf 8f6f 	isb	sy
 800c8fa:	f3bf 8f4f 	dsb	sy
 800c8fe:	60fb      	str	r3, [r7, #12]
}
 800c900:	bf00      	nop
 800c902:	e7fe      	b.n	800c902 <vTaskStartScheduler+0xaa>
}
 800c904:	bf00      	nop
 800c906:	3718      	adds	r7, #24
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	08011dcc 	.word	0x08011dcc
 800c910:	0800cf51 	.word	0x0800cf51
 800c914:	200026a4 	.word	0x200026a4
 800c918:	200026a0 	.word	0x200026a0
 800c91c:	2000268c 	.word	0x2000268c
 800c920:	20002684 	.word	0x20002684

0800c924 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c924:	b480      	push	{r7}
 800c926:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c928:	4b04      	ldr	r3, [pc, #16]	; (800c93c <vTaskSuspendAll+0x18>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	3301      	adds	r3, #1
 800c92e:	4a03      	ldr	r2, [pc, #12]	; (800c93c <vTaskSuspendAll+0x18>)
 800c930:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c932:	bf00      	nop
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr
 800c93c:	200026a8 	.word	0x200026a8

0800c940 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c946:	2300      	movs	r3, #0
 800c948:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c94a:	2300      	movs	r3, #0
 800c94c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c94e:	4b41      	ldr	r3, [pc, #260]	; (800ca54 <xTaskResumeAll+0x114>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d10a      	bne.n	800c96c <xTaskResumeAll+0x2c>
	__asm volatile
 800c956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95a:	f383 8811 	msr	BASEPRI, r3
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	603b      	str	r3, [r7, #0]
}
 800c968:	bf00      	nop
 800c96a:	e7fe      	b.n	800c96a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c96c:	f001 fae2 	bl	800df34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c970:	4b38      	ldr	r3, [pc, #224]	; (800ca54 <xTaskResumeAll+0x114>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	3b01      	subs	r3, #1
 800c976:	4a37      	ldr	r2, [pc, #220]	; (800ca54 <xTaskResumeAll+0x114>)
 800c978:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c97a:	4b36      	ldr	r3, [pc, #216]	; (800ca54 <xTaskResumeAll+0x114>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d161      	bne.n	800ca46 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c982:	4b35      	ldr	r3, [pc, #212]	; (800ca58 <xTaskResumeAll+0x118>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d05d      	beq.n	800ca46 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c98a:	e02e      	b.n	800c9ea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c98c:	4b33      	ldr	r3, [pc, #204]	; (800ca5c <xTaskResumeAll+0x11c>)
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	3318      	adds	r3, #24
 800c998:	4618      	mov	r0, r3
 800c99a:	f7fe fd7f 	bl	800b49c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	3304      	adds	r3, #4
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fe fd7a 	bl	800b49c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	409a      	lsls	r2, r3
 800c9b0:	4b2b      	ldr	r3, [pc, #172]	; (800ca60 <xTaskResumeAll+0x120>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	4a2a      	ldr	r2, [pc, #168]	; (800ca60 <xTaskResumeAll+0x120>)
 800c9b8:	6013      	str	r3, [r2, #0]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9be:	4613      	mov	r3, r2
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	4413      	add	r3, r2
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	4a27      	ldr	r2, [pc, #156]	; (800ca64 <xTaskResumeAll+0x124>)
 800c9c8:	441a      	add	r2, r3
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	3304      	adds	r3, #4
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	4610      	mov	r0, r2
 800c9d2:	f7fe fd06 	bl	800b3e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9da:	4b23      	ldr	r3, [pc, #140]	; (800ca68 <xTaskResumeAll+0x128>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d302      	bcc.n	800c9ea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c9e4:	4b21      	ldr	r3, [pc, #132]	; (800ca6c <xTaskResumeAll+0x12c>)
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9ea:	4b1c      	ldr	r3, [pc, #112]	; (800ca5c <xTaskResumeAll+0x11c>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1cc      	bne.n	800c98c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d001      	beq.n	800c9fc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c9f8:	f000 fb60 	bl	800d0bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c9fc:	4b1c      	ldr	r3, [pc, #112]	; (800ca70 <xTaskResumeAll+0x130>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d010      	beq.n	800ca2a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ca08:	f000 f858 	bl	800cabc <xTaskIncrementTick>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d002      	beq.n	800ca18 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ca12:	4b16      	ldr	r3, [pc, #88]	; (800ca6c <xTaskResumeAll+0x12c>)
 800ca14:	2201      	movs	r2, #1
 800ca16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	3b01      	subs	r3, #1
 800ca1c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d1f1      	bne.n	800ca08 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ca24:	4b12      	ldr	r3, [pc, #72]	; (800ca70 <xTaskResumeAll+0x130>)
 800ca26:	2200      	movs	r2, #0
 800ca28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ca2a:	4b10      	ldr	r3, [pc, #64]	; (800ca6c <xTaskResumeAll+0x12c>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d009      	beq.n	800ca46 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ca32:	2301      	movs	r3, #1
 800ca34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ca36:	4b0f      	ldr	r3, [pc, #60]	; (800ca74 <xTaskResumeAll+0x134>)
 800ca38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca3c:	601a      	str	r2, [r3, #0]
 800ca3e:	f3bf 8f4f 	dsb	sy
 800ca42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca46:	f001 faa5 	bl	800df94 <vPortExitCritical>

	return xAlreadyYielded;
 800ca4a:	68bb      	ldr	r3, [r7, #8]
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	200026a8 	.word	0x200026a8
 800ca58:	20002680 	.word	0x20002680
 800ca5c:	20002640 	.word	0x20002640
 800ca60:	20002688 	.word	0x20002688
 800ca64:	20002584 	.word	0x20002584
 800ca68:	20002580 	.word	0x20002580
 800ca6c:	20002694 	.word	0x20002694
 800ca70:	20002690 	.word	0x20002690
 800ca74:	e000ed04 	.word	0xe000ed04

0800ca78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ca7e:	4b05      	ldr	r3, [pc, #20]	; (800ca94 <xTaskGetTickCount+0x1c>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ca84:	687b      	ldr	r3, [r7, #4]
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	370c      	adds	r7, #12
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop
 800ca94:	20002684 	.word	0x20002684

0800ca98 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca9e:	f001 fb2b 	bl	800e0f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800caa2:	2300      	movs	r3, #0
 800caa4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800caa6:	4b04      	ldr	r3, [pc, #16]	; (800cab8 <xTaskGetTickCountFromISR+0x20>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800caac:	683b      	ldr	r3, [r7, #0]
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3708      	adds	r7, #8
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	20002684 	.word	0x20002684

0800cabc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b086      	sub	sp, #24
 800cac0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cac2:	2300      	movs	r3, #0
 800cac4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cac6:	4b4e      	ldr	r3, [pc, #312]	; (800cc00 <xTaskIncrementTick+0x144>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	f040 808e 	bne.w	800cbec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cad0:	4b4c      	ldr	r3, [pc, #304]	; (800cc04 <xTaskIncrementTick+0x148>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	3301      	adds	r3, #1
 800cad6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cad8:	4a4a      	ldr	r2, [pc, #296]	; (800cc04 <xTaskIncrementTick+0x148>)
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d120      	bne.n	800cb26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cae4:	4b48      	ldr	r3, [pc, #288]	; (800cc08 <xTaskIncrementTick+0x14c>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d00a      	beq.n	800cb04 <xTaskIncrementTick+0x48>
	__asm volatile
 800caee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf2:	f383 8811 	msr	BASEPRI, r3
 800caf6:	f3bf 8f6f 	isb	sy
 800cafa:	f3bf 8f4f 	dsb	sy
 800cafe:	603b      	str	r3, [r7, #0]
}
 800cb00:	bf00      	nop
 800cb02:	e7fe      	b.n	800cb02 <xTaskIncrementTick+0x46>
 800cb04:	4b40      	ldr	r3, [pc, #256]	; (800cc08 <xTaskIncrementTick+0x14c>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	60fb      	str	r3, [r7, #12]
 800cb0a:	4b40      	ldr	r3, [pc, #256]	; (800cc0c <xTaskIncrementTick+0x150>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4a3e      	ldr	r2, [pc, #248]	; (800cc08 <xTaskIncrementTick+0x14c>)
 800cb10:	6013      	str	r3, [r2, #0]
 800cb12:	4a3e      	ldr	r2, [pc, #248]	; (800cc0c <xTaskIncrementTick+0x150>)
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	6013      	str	r3, [r2, #0]
 800cb18:	4b3d      	ldr	r3, [pc, #244]	; (800cc10 <xTaskIncrementTick+0x154>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	4a3c      	ldr	r2, [pc, #240]	; (800cc10 <xTaskIncrementTick+0x154>)
 800cb20:	6013      	str	r3, [r2, #0]
 800cb22:	f000 facb 	bl	800d0bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cb26:	4b3b      	ldr	r3, [pc, #236]	; (800cc14 <xTaskIncrementTick+0x158>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	693a      	ldr	r2, [r7, #16]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d348      	bcc.n	800cbc2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb30:	4b35      	ldr	r3, [pc, #212]	; (800cc08 <xTaskIncrementTick+0x14c>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d104      	bne.n	800cb44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb3a:	4b36      	ldr	r3, [pc, #216]	; (800cc14 <xTaskIncrementTick+0x158>)
 800cb3c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb40:	601a      	str	r2, [r3, #0]
					break;
 800cb42:	e03e      	b.n	800cbc2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb44:	4b30      	ldr	r3, [pc, #192]	; (800cc08 <xTaskIncrementTick+0x14c>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cb54:	693a      	ldr	r2, [r7, #16]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d203      	bcs.n	800cb64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cb5c:	4a2d      	ldr	r2, [pc, #180]	; (800cc14 <xTaskIncrementTick+0x158>)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cb62:	e02e      	b.n	800cbc2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	3304      	adds	r3, #4
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7fe fc97 	bl	800b49c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d004      	beq.n	800cb80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	3318      	adds	r3, #24
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fe fc8e 	bl	800b49c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb84:	2201      	movs	r2, #1
 800cb86:	409a      	lsls	r2, r3
 800cb88:	4b23      	ldr	r3, [pc, #140]	; (800cc18 <xTaskIncrementTick+0x15c>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	4a22      	ldr	r2, [pc, #136]	; (800cc18 <xTaskIncrementTick+0x15c>)
 800cb90:	6013      	str	r3, [r2, #0]
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb96:	4613      	mov	r3, r2
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	4413      	add	r3, r2
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	4a1f      	ldr	r2, [pc, #124]	; (800cc1c <xTaskIncrementTick+0x160>)
 800cba0:	441a      	add	r2, r3
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	3304      	adds	r3, #4
 800cba6:	4619      	mov	r1, r3
 800cba8:	4610      	mov	r0, r2
 800cbaa:	f7fe fc1a 	bl	800b3e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbb2:	4b1b      	ldr	r3, [pc, #108]	; (800cc20 <xTaskIncrementTick+0x164>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d3b9      	bcc.n	800cb30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbc0:	e7b6      	b.n	800cb30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cbc2:	4b17      	ldr	r3, [pc, #92]	; (800cc20 <xTaskIncrementTick+0x164>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbc8:	4914      	ldr	r1, [pc, #80]	; (800cc1c <xTaskIncrementTick+0x160>)
 800cbca:	4613      	mov	r3, r2
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	4413      	add	r3, r2
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	440b      	add	r3, r1
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	d901      	bls.n	800cbde <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cbde:	4b11      	ldr	r3, [pc, #68]	; (800cc24 <xTaskIncrementTick+0x168>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d007      	beq.n	800cbf6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	617b      	str	r3, [r7, #20]
 800cbea:	e004      	b.n	800cbf6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cbec:	4b0e      	ldr	r3, [pc, #56]	; (800cc28 <xTaskIncrementTick+0x16c>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	4a0d      	ldr	r2, [pc, #52]	; (800cc28 <xTaskIncrementTick+0x16c>)
 800cbf4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cbf6:	697b      	ldr	r3, [r7, #20]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3718      	adds	r7, #24
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	200026a8 	.word	0x200026a8
 800cc04:	20002684 	.word	0x20002684
 800cc08:	20002638 	.word	0x20002638
 800cc0c:	2000263c 	.word	0x2000263c
 800cc10:	20002698 	.word	0x20002698
 800cc14:	200026a0 	.word	0x200026a0
 800cc18:	20002688 	.word	0x20002688
 800cc1c:	20002584 	.word	0x20002584
 800cc20:	20002580 	.word	0x20002580
 800cc24:	20002694 	.word	0x20002694
 800cc28:	20002690 	.word	0x20002690

0800cc2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b087      	sub	sp, #28
 800cc30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cc32:	4b27      	ldr	r3, [pc, #156]	; (800ccd0 <vTaskSwitchContext+0xa4>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d003      	beq.n	800cc42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cc3a:	4b26      	ldr	r3, [pc, #152]	; (800ccd4 <vTaskSwitchContext+0xa8>)
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cc40:	e03f      	b.n	800ccc2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800cc42:	4b24      	ldr	r3, [pc, #144]	; (800ccd4 <vTaskSwitchContext+0xa8>)
 800cc44:	2200      	movs	r2, #0
 800cc46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc48:	4b23      	ldr	r3, [pc, #140]	; (800ccd8 <vTaskSwitchContext+0xac>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	fab3 f383 	clz	r3, r3
 800cc54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cc56:	7afb      	ldrb	r3, [r7, #11]
 800cc58:	f1c3 031f 	rsb	r3, r3, #31
 800cc5c:	617b      	str	r3, [r7, #20]
 800cc5e:	491f      	ldr	r1, [pc, #124]	; (800ccdc <vTaskSwitchContext+0xb0>)
 800cc60:	697a      	ldr	r2, [r7, #20]
 800cc62:	4613      	mov	r3, r2
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4413      	add	r3, r2
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	440b      	add	r3, r1
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d10a      	bne.n	800cc88 <vTaskSwitchContext+0x5c>
	__asm volatile
 800cc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc76:	f383 8811 	msr	BASEPRI, r3
 800cc7a:	f3bf 8f6f 	isb	sy
 800cc7e:	f3bf 8f4f 	dsb	sy
 800cc82:	607b      	str	r3, [r7, #4]
}
 800cc84:	bf00      	nop
 800cc86:	e7fe      	b.n	800cc86 <vTaskSwitchContext+0x5a>
 800cc88:	697a      	ldr	r2, [r7, #20]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	4413      	add	r3, r2
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	4a12      	ldr	r2, [pc, #72]	; (800ccdc <vTaskSwitchContext+0xb0>)
 800cc94:	4413      	add	r3, r2
 800cc96:	613b      	str	r3, [r7, #16]
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	685a      	ldr	r2, [r3, #4]
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	605a      	str	r2, [r3, #4]
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	685a      	ldr	r2, [r3, #4]
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	3308      	adds	r3, #8
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d104      	bne.n	800ccb8 <vTaskSwitchContext+0x8c>
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	685a      	ldr	r2, [r3, #4]
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	605a      	str	r2, [r3, #4]
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	4a08      	ldr	r2, [pc, #32]	; (800cce0 <vTaskSwitchContext+0xb4>)
 800ccc0:	6013      	str	r3, [r2, #0]
}
 800ccc2:	bf00      	nop
 800ccc4:	371c      	adds	r7, #28
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop
 800ccd0:	200026a8 	.word	0x200026a8
 800ccd4:	20002694 	.word	0x20002694
 800ccd8:	20002688 	.word	0x20002688
 800ccdc:	20002584 	.word	0x20002584
 800cce0:	20002580 	.word	0x20002580

0800cce4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d10a      	bne.n	800cd0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ccf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf8:	f383 8811 	msr	BASEPRI, r3
 800ccfc:	f3bf 8f6f 	isb	sy
 800cd00:	f3bf 8f4f 	dsb	sy
 800cd04:	60fb      	str	r3, [r7, #12]
}
 800cd06:	bf00      	nop
 800cd08:	e7fe      	b.n	800cd08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd0a:	4b07      	ldr	r3, [pc, #28]	; (800cd28 <vTaskPlaceOnEventList+0x44>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	3318      	adds	r3, #24
 800cd10:	4619      	mov	r1, r3
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7fe fb89 	bl	800b42a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd18:	2101      	movs	r1, #1
 800cd1a:	6838      	ldr	r0, [r7, #0]
 800cd1c:	f000 fbaa 	bl	800d474 <prvAddCurrentTaskToDelayedList>
}
 800cd20:	bf00      	nop
 800cd22:	3710      	adds	r7, #16
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	20002580 	.word	0x20002580

0800cd2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b086      	sub	sp, #24
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d10a      	bne.n	800cd54 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd42:	f383 8811 	msr	BASEPRI, r3
 800cd46:	f3bf 8f6f 	isb	sy
 800cd4a:	f3bf 8f4f 	dsb	sy
 800cd4e:	617b      	str	r3, [r7, #20]
}
 800cd50:	bf00      	nop
 800cd52:	e7fe      	b.n	800cd52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd54:	4b0a      	ldr	r3, [pc, #40]	; (800cd80 <vTaskPlaceOnEventListRestricted+0x54>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	3318      	adds	r3, #24
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	68f8      	ldr	r0, [r7, #12]
 800cd5e:	f7fe fb40 	bl	800b3e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d002      	beq.n	800cd6e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cd68:	f04f 33ff 	mov.w	r3, #4294967295
 800cd6c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cd6e:	6879      	ldr	r1, [r7, #4]
 800cd70:	68b8      	ldr	r0, [r7, #8]
 800cd72:	f000 fb7f 	bl	800d474 <prvAddCurrentTaskToDelayedList>
	}
 800cd76:	bf00      	nop
 800cd78:	3718      	adds	r7, #24
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	20002580 	.word	0x20002580

0800cd84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b086      	sub	sp, #24
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	68db      	ldr	r3, [r3, #12]
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d10a      	bne.n	800cdb0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9e:	f383 8811 	msr	BASEPRI, r3
 800cda2:	f3bf 8f6f 	isb	sy
 800cda6:	f3bf 8f4f 	dsb	sy
 800cdaa:	60fb      	str	r3, [r7, #12]
}
 800cdac:	bf00      	nop
 800cdae:	e7fe      	b.n	800cdae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	3318      	adds	r3, #24
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7fe fb71 	bl	800b49c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdba:	4b1d      	ldr	r3, [pc, #116]	; (800ce30 <xTaskRemoveFromEventList+0xac>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d11c      	bne.n	800cdfc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	3304      	adds	r3, #4
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7fe fb68 	bl	800b49c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	409a      	lsls	r2, r3
 800cdd4:	4b17      	ldr	r3, [pc, #92]	; (800ce34 <xTaskRemoveFromEventList+0xb0>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	4a16      	ldr	r2, [pc, #88]	; (800ce34 <xTaskRemoveFromEventList+0xb0>)
 800cddc:	6013      	str	r3, [r2, #0]
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cde2:	4613      	mov	r3, r2
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	4413      	add	r3, r2
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	4a13      	ldr	r2, [pc, #76]	; (800ce38 <xTaskRemoveFromEventList+0xb4>)
 800cdec:	441a      	add	r2, r3
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	3304      	adds	r3, #4
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	4610      	mov	r0, r2
 800cdf6:	f7fe faf4 	bl	800b3e2 <vListInsertEnd>
 800cdfa:	e005      	b.n	800ce08 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	3318      	adds	r3, #24
 800ce00:	4619      	mov	r1, r3
 800ce02:	480e      	ldr	r0, [pc, #56]	; (800ce3c <xTaskRemoveFromEventList+0xb8>)
 800ce04:	f7fe faed 	bl	800b3e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce0c:	4b0c      	ldr	r3, [pc, #48]	; (800ce40 <xTaskRemoveFromEventList+0xbc>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d905      	bls.n	800ce22 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ce16:	2301      	movs	r3, #1
 800ce18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ce1a:	4b0a      	ldr	r3, [pc, #40]	; (800ce44 <xTaskRemoveFromEventList+0xc0>)
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	601a      	str	r2, [r3, #0]
 800ce20:	e001      	b.n	800ce26 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ce22:	2300      	movs	r3, #0
 800ce24:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ce26:	697b      	ldr	r3, [r7, #20]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3718      	adds	r7, #24
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	200026a8 	.word	0x200026a8
 800ce34:	20002688 	.word	0x20002688
 800ce38:	20002584 	.word	0x20002584
 800ce3c:	20002640 	.word	0x20002640
 800ce40:	20002580 	.word	0x20002580
 800ce44:	20002694 	.word	0x20002694

0800ce48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b083      	sub	sp, #12
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ce50:	4b06      	ldr	r3, [pc, #24]	; (800ce6c <vTaskInternalSetTimeOutState+0x24>)
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ce58:	4b05      	ldr	r3, [pc, #20]	; (800ce70 <vTaskInternalSetTimeOutState+0x28>)
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	605a      	str	r2, [r3, #4]
}
 800ce60:	bf00      	nop
 800ce62:	370c      	adds	r7, #12
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr
 800ce6c:	20002698 	.word	0x20002698
 800ce70:	20002684 	.word	0x20002684

0800ce74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b088      	sub	sp, #32
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d10a      	bne.n	800ce9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ce84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce88:	f383 8811 	msr	BASEPRI, r3
 800ce8c:	f3bf 8f6f 	isb	sy
 800ce90:	f3bf 8f4f 	dsb	sy
 800ce94:	613b      	str	r3, [r7, #16]
}
 800ce96:	bf00      	nop
 800ce98:	e7fe      	b.n	800ce98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d10a      	bne.n	800ceb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea4:	f383 8811 	msr	BASEPRI, r3
 800cea8:	f3bf 8f6f 	isb	sy
 800ceac:	f3bf 8f4f 	dsb	sy
 800ceb0:	60fb      	str	r3, [r7, #12]
}
 800ceb2:	bf00      	nop
 800ceb4:	e7fe      	b.n	800ceb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ceb6:	f001 f83d 	bl	800df34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ceba:	4b1d      	ldr	r3, [pc, #116]	; (800cf30 <xTaskCheckForTimeOut+0xbc>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	69ba      	ldr	r2, [r7, #24]
 800cec6:	1ad3      	subs	r3, r2, r3
 800cec8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced2:	d102      	bne.n	800ceda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ced4:	2300      	movs	r3, #0
 800ced6:	61fb      	str	r3, [r7, #28]
 800ced8:	e023      	b.n	800cf22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	4b15      	ldr	r3, [pc, #84]	; (800cf34 <xTaskCheckForTimeOut+0xc0>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d007      	beq.n	800cef6 <xTaskCheckForTimeOut+0x82>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	69ba      	ldr	r2, [r7, #24]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d302      	bcc.n	800cef6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cef0:	2301      	movs	r3, #1
 800cef2:	61fb      	str	r3, [r7, #28]
 800cef4:	e015      	b.n	800cf22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	697a      	ldr	r2, [r7, #20]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d20b      	bcs.n	800cf18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	1ad2      	subs	r2, r2, r3
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f7ff ff9b 	bl	800ce48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cf12:	2300      	movs	r3, #0
 800cf14:	61fb      	str	r3, [r7, #28]
 800cf16:	e004      	b.n	800cf22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cf1e:	2301      	movs	r3, #1
 800cf20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cf22:	f001 f837 	bl	800df94 <vPortExitCritical>

	return xReturn;
 800cf26:	69fb      	ldr	r3, [r7, #28]
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3720      	adds	r7, #32
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	20002684 	.word	0x20002684
 800cf34:	20002698 	.word	0x20002698

0800cf38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cf38:	b480      	push	{r7}
 800cf3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cf3c:	4b03      	ldr	r3, [pc, #12]	; (800cf4c <vTaskMissedYield+0x14>)
 800cf3e:	2201      	movs	r2, #1
 800cf40:	601a      	str	r2, [r3, #0]
}
 800cf42:	bf00      	nop
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr
 800cf4c:	20002694 	.word	0x20002694

0800cf50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cf58:	f000 f852 	bl	800d000 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cf5c:	4b06      	ldr	r3, [pc, #24]	; (800cf78 <prvIdleTask+0x28>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d9f9      	bls.n	800cf58 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cf64:	4b05      	ldr	r3, [pc, #20]	; (800cf7c <prvIdleTask+0x2c>)
 800cf66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf6a:	601a      	str	r2, [r3, #0]
 800cf6c:	f3bf 8f4f 	dsb	sy
 800cf70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cf74:	e7f0      	b.n	800cf58 <prvIdleTask+0x8>
 800cf76:	bf00      	nop
 800cf78:	20002584 	.word	0x20002584
 800cf7c:	e000ed04 	.word	0xe000ed04

0800cf80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf86:	2300      	movs	r3, #0
 800cf88:	607b      	str	r3, [r7, #4]
 800cf8a:	e00c      	b.n	800cfa6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	4613      	mov	r3, r2
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	4413      	add	r3, r2
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	4a12      	ldr	r2, [pc, #72]	; (800cfe0 <prvInitialiseTaskLists+0x60>)
 800cf98:	4413      	add	r3, r2
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fe f9f4 	bl	800b388 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	607b      	str	r3, [r7, #4]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2b06      	cmp	r3, #6
 800cfaa:	d9ef      	bls.n	800cf8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cfac:	480d      	ldr	r0, [pc, #52]	; (800cfe4 <prvInitialiseTaskLists+0x64>)
 800cfae:	f7fe f9eb 	bl	800b388 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cfb2:	480d      	ldr	r0, [pc, #52]	; (800cfe8 <prvInitialiseTaskLists+0x68>)
 800cfb4:	f7fe f9e8 	bl	800b388 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cfb8:	480c      	ldr	r0, [pc, #48]	; (800cfec <prvInitialiseTaskLists+0x6c>)
 800cfba:	f7fe f9e5 	bl	800b388 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cfbe:	480c      	ldr	r0, [pc, #48]	; (800cff0 <prvInitialiseTaskLists+0x70>)
 800cfc0:	f7fe f9e2 	bl	800b388 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cfc4:	480b      	ldr	r0, [pc, #44]	; (800cff4 <prvInitialiseTaskLists+0x74>)
 800cfc6:	f7fe f9df 	bl	800b388 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cfca:	4b0b      	ldr	r3, [pc, #44]	; (800cff8 <prvInitialiseTaskLists+0x78>)
 800cfcc:	4a05      	ldr	r2, [pc, #20]	; (800cfe4 <prvInitialiseTaskLists+0x64>)
 800cfce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cfd0:	4b0a      	ldr	r3, [pc, #40]	; (800cffc <prvInitialiseTaskLists+0x7c>)
 800cfd2:	4a05      	ldr	r2, [pc, #20]	; (800cfe8 <prvInitialiseTaskLists+0x68>)
 800cfd4:	601a      	str	r2, [r3, #0]
}
 800cfd6:	bf00      	nop
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	20002584 	.word	0x20002584
 800cfe4:	20002610 	.word	0x20002610
 800cfe8:	20002624 	.word	0x20002624
 800cfec:	20002640 	.word	0x20002640
 800cff0:	20002654 	.word	0x20002654
 800cff4:	2000266c 	.word	0x2000266c
 800cff8:	20002638 	.word	0x20002638
 800cffc:	2000263c 	.word	0x2000263c

0800d000 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d006:	e019      	b.n	800d03c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d008:	f000 ff94 	bl	800df34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d00c:	4b10      	ldr	r3, [pc, #64]	; (800d050 <prvCheckTasksWaitingTermination+0x50>)
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	3304      	adds	r3, #4
 800d018:	4618      	mov	r0, r3
 800d01a:	f7fe fa3f 	bl	800b49c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d01e:	4b0d      	ldr	r3, [pc, #52]	; (800d054 <prvCheckTasksWaitingTermination+0x54>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	3b01      	subs	r3, #1
 800d024:	4a0b      	ldr	r2, [pc, #44]	; (800d054 <prvCheckTasksWaitingTermination+0x54>)
 800d026:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d028:	4b0b      	ldr	r3, [pc, #44]	; (800d058 <prvCheckTasksWaitingTermination+0x58>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	3b01      	subs	r3, #1
 800d02e:	4a0a      	ldr	r2, [pc, #40]	; (800d058 <prvCheckTasksWaitingTermination+0x58>)
 800d030:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d032:	f000 ffaf 	bl	800df94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 f810 	bl	800d05c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d03c:	4b06      	ldr	r3, [pc, #24]	; (800d058 <prvCheckTasksWaitingTermination+0x58>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d1e1      	bne.n	800d008 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d044:	bf00      	nop
 800d046:	bf00      	nop
 800d048:	3708      	adds	r7, #8
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	20002654 	.word	0x20002654
 800d054:	20002680 	.word	0x20002680
 800d058:	20002668 	.word	0x20002668

0800d05c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d108      	bne.n	800d080 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d072:	4618      	mov	r0, r3
 800d074:	f001 f94c 	bl	800e310 <vPortFree>
				vPortFree( pxTCB );
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f001 f949 	bl	800e310 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d07e:	e018      	b.n	800d0b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d086:	2b01      	cmp	r3, #1
 800d088:	d103      	bne.n	800d092 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f001 f940 	bl	800e310 <vPortFree>
	}
 800d090:	e00f      	b.n	800d0b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d098:	2b02      	cmp	r3, #2
 800d09a:	d00a      	beq.n	800d0b2 <prvDeleteTCB+0x56>
	__asm volatile
 800d09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	60fb      	str	r3, [r7, #12]
}
 800d0ae:	bf00      	nop
 800d0b0:	e7fe      	b.n	800d0b0 <prvDeleteTCB+0x54>
	}
 800d0b2:	bf00      	nop
 800d0b4:	3710      	adds	r7, #16
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
	...

0800d0bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b083      	sub	sp, #12
 800d0c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0c2:	4b0c      	ldr	r3, [pc, #48]	; (800d0f4 <prvResetNextTaskUnblockTime+0x38>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d104      	bne.n	800d0d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d0cc:	4b0a      	ldr	r3, [pc, #40]	; (800d0f8 <prvResetNextTaskUnblockTime+0x3c>)
 800d0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d0d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d0d4:	e008      	b.n	800d0e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0d6:	4b07      	ldr	r3, [pc, #28]	; (800d0f4 <prvResetNextTaskUnblockTime+0x38>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	4a04      	ldr	r2, [pc, #16]	; (800d0f8 <prvResetNextTaskUnblockTime+0x3c>)
 800d0e6:	6013      	str	r3, [r2, #0]
}
 800d0e8:	bf00      	nop
 800d0ea:	370c      	adds	r7, #12
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr
 800d0f4:	20002638 	.word	0x20002638
 800d0f8:	200026a0 	.word	0x200026a0

0800d0fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d102:	4b0b      	ldr	r3, [pc, #44]	; (800d130 <xTaskGetSchedulerState+0x34>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d102      	bne.n	800d110 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d10a:	2301      	movs	r3, #1
 800d10c:	607b      	str	r3, [r7, #4]
 800d10e:	e008      	b.n	800d122 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d110:	4b08      	ldr	r3, [pc, #32]	; (800d134 <xTaskGetSchedulerState+0x38>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d102      	bne.n	800d11e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d118:	2302      	movs	r3, #2
 800d11a:	607b      	str	r3, [r7, #4]
 800d11c:	e001      	b.n	800d122 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d11e:	2300      	movs	r3, #0
 800d120:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d122:	687b      	ldr	r3, [r7, #4]
	}
 800d124:	4618      	mov	r0, r3
 800d126:	370c      	adds	r7, #12
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr
 800d130:	2000268c 	.word	0x2000268c
 800d134:	200026a8 	.word	0x200026a8

0800d138 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d144:	2300      	movs	r3, #0
 800d146:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d05e      	beq.n	800d20c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d152:	4b31      	ldr	r3, [pc, #196]	; (800d218 <xTaskPriorityInherit+0xe0>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d158:	429a      	cmp	r2, r3
 800d15a:	d24e      	bcs.n	800d1fa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	699b      	ldr	r3, [r3, #24]
 800d160:	2b00      	cmp	r3, #0
 800d162:	db06      	blt.n	800d172 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d164:	4b2c      	ldr	r3, [pc, #176]	; (800d218 <xTaskPriorityInherit+0xe0>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d16a:	f1c3 0207 	rsb	r2, r3, #7
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	6959      	ldr	r1, [r3, #20]
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d17a:	4613      	mov	r3, r2
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	4413      	add	r3, r2
 800d180:	009b      	lsls	r3, r3, #2
 800d182:	4a26      	ldr	r2, [pc, #152]	; (800d21c <xTaskPriorityInherit+0xe4>)
 800d184:	4413      	add	r3, r2
 800d186:	4299      	cmp	r1, r3
 800d188:	d12f      	bne.n	800d1ea <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	3304      	adds	r3, #4
 800d18e:	4618      	mov	r0, r3
 800d190:	f7fe f984 	bl	800b49c <uxListRemove>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d10a      	bne.n	800d1b0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d19e:	2201      	movs	r2, #1
 800d1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d1a4:	43da      	mvns	r2, r3
 800d1a6:	4b1e      	ldr	r3, [pc, #120]	; (800d220 <xTaskPriorityInherit+0xe8>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	4013      	ands	r3, r2
 800d1ac:	4a1c      	ldr	r2, [pc, #112]	; (800d220 <xTaskPriorityInherit+0xe8>)
 800d1ae:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d1b0:	4b19      	ldr	r3, [pc, #100]	; (800d218 <xTaskPriorityInherit+0xe0>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1be:	2201      	movs	r2, #1
 800d1c0:	409a      	lsls	r2, r3
 800d1c2:	4b17      	ldr	r3, [pc, #92]	; (800d220 <xTaskPriorityInherit+0xe8>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	4a15      	ldr	r2, [pc, #84]	; (800d220 <xTaskPriorityInherit+0xe8>)
 800d1ca:	6013      	str	r3, [r2, #0]
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	4413      	add	r3, r2
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	4a10      	ldr	r2, [pc, #64]	; (800d21c <xTaskPriorityInherit+0xe4>)
 800d1da:	441a      	add	r2, r3
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	3304      	adds	r3, #4
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	4610      	mov	r0, r2
 800d1e4:	f7fe f8fd 	bl	800b3e2 <vListInsertEnd>
 800d1e8:	e004      	b.n	800d1f4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d1ea:	4b0b      	ldr	r3, [pc, #44]	; (800d218 <xTaskPriorityInherit+0xe0>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	60fb      	str	r3, [r7, #12]
 800d1f8:	e008      	b.n	800d20c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1fe:	4b06      	ldr	r3, [pc, #24]	; (800d218 <xTaskPriorityInherit+0xe0>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d204:	429a      	cmp	r2, r3
 800d206:	d201      	bcs.n	800d20c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d208:	2301      	movs	r3, #1
 800d20a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d20c:	68fb      	ldr	r3, [r7, #12]
	}
 800d20e:	4618      	mov	r0, r3
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	20002580 	.word	0x20002580
 800d21c:	20002584 	.word	0x20002584
 800d220:	20002688 	.word	0x20002688

0800d224 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d224:	b580      	push	{r7, lr}
 800d226:	b086      	sub	sp, #24
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d230:	2300      	movs	r3, #0
 800d232:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d06e      	beq.n	800d318 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d23a:	4b3a      	ldr	r3, [pc, #232]	; (800d324 <xTaskPriorityDisinherit+0x100>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	693a      	ldr	r2, [r7, #16]
 800d240:	429a      	cmp	r2, r3
 800d242:	d00a      	beq.n	800d25a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d248:	f383 8811 	msr	BASEPRI, r3
 800d24c:	f3bf 8f6f 	isb	sy
 800d250:	f3bf 8f4f 	dsb	sy
 800d254:	60fb      	str	r3, [r7, #12]
}
 800d256:	bf00      	nop
 800d258:	e7fe      	b.n	800d258 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d10a      	bne.n	800d278 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d266:	f383 8811 	msr	BASEPRI, r3
 800d26a:	f3bf 8f6f 	isb	sy
 800d26e:	f3bf 8f4f 	dsb	sy
 800d272:	60bb      	str	r3, [r7, #8]
}
 800d274:	bf00      	nop
 800d276:	e7fe      	b.n	800d276 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d27c:	1e5a      	subs	r2, r3, #1
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d044      	beq.n	800d318 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d292:	2b00      	cmp	r3, #0
 800d294:	d140      	bne.n	800d318 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	3304      	adds	r3, #4
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7fe f8fe 	bl	800b49c <uxListRemove>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d115      	bne.n	800d2d2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2aa:	491f      	ldr	r1, [pc, #124]	; (800d328 <xTaskPriorityDisinherit+0x104>)
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	4413      	add	r3, r2
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	440b      	add	r3, r1
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d10a      	bne.n	800d2d2 <xTaskPriorityDisinherit+0xae>
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d2c6:	43da      	mvns	r2, r3
 800d2c8:	4b18      	ldr	r3, [pc, #96]	; (800d32c <xTaskPriorityDisinherit+0x108>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4013      	ands	r3, r2
 800d2ce:	4a17      	ldr	r2, [pc, #92]	; (800d32c <xTaskPriorityDisinherit+0x108>)
 800d2d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2de:	f1c3 0207 	rsb	r2, r3, #7
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	409a      	lsls	r2, r3
 800d2ee:	4b0f      	ldr	r3, [pc, #60]	; (800d32c <xTaskPriorityDisinherit+0x108>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	4a0d      	ldr	r2, [pc, #52]	; (800d32c <xTaskPriorityDisinherit+0x108>)
 800d2f6:	6013      	str	r3, [r2, #0]
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2fc:	4613      	mov	r3, r2
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	4413      	add	r3, r2
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	4a08      	ldr	r2, [pc, #32]	; (800d328 <xTaskPriorityDisinherit+0x104>)
 800d306:	441a      	add	r2, r3
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	3304      	adds	r3, #4
 800d30c:	4619      	mov	r1, r3
 800d30e:	4610      	mov	r0, r2
 800d310:	f7fe f867 	bl	800b3e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d314:	2301      	movs	r3, #1
 800d316:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d318:	697b      	ldr	r3, [r7, #20]
	}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3718      	adds	r7, #24
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	20002580 	.word	0x20002580
 800d328:	20002584 	.word	0x20002584
 800d32c:	20002688 	.word	0x20002688

0800d330 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d330:	b580      	push	{r7, lr}
 800d332:	b088      	sub	sp, #32
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d33e:	2301      	movs	r3, #1
 800d340:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d077      	beq.n	800d438 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d10a      	bne.n	800d366 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d354:	f383 8811 	msr	BASEPRI, r3
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	60fb      	str	r3, [r7, #12]
}
 800d362:	bf00      	nop
 800d364:	e7fe      	b.n	800d364 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d366:	69bb      	ldr	r3, [r7, #24]
 800d368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d36a:	683a      	ldr	r2, [r7, #0]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d902      	bls.n	800d376 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	61fb      	str	r3, [r7, #28]
 800d374:	e002      	b.n	800d37c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d376:	69bb      	ldr	r3, [r7, #24]
 800d378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d37a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d37c:	69bb      	ldr	r3, [r7, #24]
 800d37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d380:	69fa      	ldr	r2, [r7, #28]
 800d382:	429a      	cmp	r2, r3
 800d384:	d058      	beq.n	800d438 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d38a:	697a      	ldr	r2, [r7, #20]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d153      	bne.n	800d438 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d390:	4b2b      	ldr	r3, [pc, #172]	; (800d440 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	69ba      	ldr	r2, [r7, #24]
 800d396:	429a      	cmp	r2, r3
 800d398:	d10a      	bne.n	800d3b0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39e:	f383 8811 	msr	BASEPRI, r3
 800d3a2:	f3bf 8f6f 	isb	sy
 800d3a6:	f3bf 8f4f 	dsb	sy
 800d3aa:	60bb      	str	r3, [r7, #8]
}
 800d3ac:	bf00      	nop
 800d3ae:	e7fe      	b.n	800d3ae <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	69fa      	ldr	r2, [r7, #28]
 800d3ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d3bc:	69bb      	ldr	r3, [r7, #24]
 800d3be:	699b      	ldr	r3, [r3, #24]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	db04      	blt.n	800d3ce <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	f1c3 0207 	rsb	r2, r3, #7
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	6959      	ldr	r1, [r3, #20]
 800d3d2:	693a      	ldr	r2, [r7, #16]
 800d3d4:	4613      	mov	r3, r2
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	4413      	add	r3, r2
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	4a19      	ldr	r2, [pc, #100]	; (800d444 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d3de:	4413      	add	r3, r2
 800d3e0:	4299      	cmp	r1, r3
 800d3e2:	d129      	bne.n	800d438 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3e4:	69bb      	ldr	r3, [r7, #24]
 800d3e6:	3304      	adds	r3, #4
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7fe f857 	bl	800b49c <uxListRemove>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d10a      	bne.n	800d40a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d3fe:	43da      	mvns	r2, r3
 800d400:	4b11      	ldr	r3, [pc, #68]	; (800d448 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4013      	ands	r3, r2
 800d406:	4a10      	ldr	r2, [pc, #64]	; (800d448 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d408:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d40a:	69bb      	ldr	r3, [r7, #24]
 800d40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40e:	2201      	movs	r2, #1
 800d410:	409a      	lsls	r2, r3
 800d412:	4b0d      	ldr	r3, [pc, #52]	; (800d448 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4313      	orrs	r3, r2
 800d418:	4a0b      	ldr	r2, [pc, #44]	; (800d448 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d41a:	6013      	str	r3, [r2, #0]
 800d41c:	69bb      	ldr	r3, [r7, #24]
 800d41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d420:	4613      	mov	r3, r2
 800d422:	009b      	lsls	r3, r3, #2
 800d424:	4413      	add	r3, r2
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	4a06      	ldr	r2, [pc, #24]	; (800d444 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d42a:	441a      	add	r2, r3
 800d42c:	69bb      	ldr	r3, [r7, #24]
 800d42e:	3304      	adds	r3, #4
 800d430:	4619      	mov	r1, r3
 800d432:	4610      	mov	r0, r2
 800d434:	f7fd ffd5 	bl	800b3e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d438:	bf00      	nop
 800d43a:	3720      	adds	r7, #32
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	20002580 	.word	0x20002580
 800d444:	20002584 	.word	0x20002584
 800d448:	20002688 	.word	0x20002688

0800d44c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d44c:	b480      	push	{r7}
 800d44e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d450:	4b07      	ldr	r3, [pc, #28]	; (800d470 <pvTaskIncrementMutexHeldCount+0x24>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d004      	beq.n	800d462 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d458:	4b05      	ldr	r3, [pc, #20]	; (800d470 <pvTaskIncrementMutexHeldCount+0x24>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d45e:	3201      	adds	r2, #1
 800d460:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d462:	4b03      	ldr	r3, [pc, #12]	; (800d470 <pvTaskIncrementMutexHeldCount+0x24>)
 800d464:	681b      	ldr	r3, [r3, #0]
	}
 800d466:	4618      	mov	r0, r3
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr
 800d470:	20002580 	.word	0x20002580

0800d474 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d47e:	4b29      	ldr	r3, [pc, #164]	; (800d524 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d484:	4b28      	ldr	r3, [pc, #160]	; (800d528 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	3304      	adds	r3, #4
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7fe f806 	bl	800b49c <uxListRemove>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d10b      	bne.n	800d4ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d496:	4b24      	ldr	r3, [pc, #144]	; (800d528 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d49c:	2201      	movs	r2, #1
 800d49e:	fa02 f303 	lsl.w	r3, r2, r3
 800d4a2:	43da      	mvns	r2, r3
 800d4a4:	4b21      	ldr	r3, [pc, #132]	; (800d52c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4013      	ands	r3, r2
 800d4aa:	4a20      	ldr	r2, [pc, #128]	; (800d52c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d4ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4b4:	d10a      	bne.n	800d4cc <prvAddCurrentTaskToDelayedList+0x58>
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d007      	beq.n	800d4cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4bc:	4b1a      	ldr	r3, [pc, #104]	; (800d528 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	3304      	adds	r3, #4
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	481a      	ldr	r0, [pc, #104]	; (800d530 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d4c6:	f7fd ff8c 	bl	800b3e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d4ca:	e026      	b.n	800d51a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	4413      	add	r3, r2
 800d4d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d4d4:	4b14      	ldr	r3, [pc, #80]	; (800d528 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	68ba      	ldr	r2, [r7, #8]
 800d4da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d4dc:	68ba      	ldr	r2, [r7, #8]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d209      	bcs.n	800d4f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4e4:	4b13      	ldr	r3, [pc, #76]	; (800d534 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	4b0f      	ldr	r3, [pc, #60]	; (800d528 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	3304      	adds	r3, #4
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	4610      	mov	r0, r2
 800d4f2:	f7fd ff9a 	bl	800b42a <vListInsert>
}
 800d4f6:	e010      	b.n	800d51a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4f8:	4b0f      	ldr	r3, [pc, #60]	; (800d538 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	4b0a      	ldr	r3, [pc, #40]	; (800d528 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	3304      	adds	r3, #4
 800d502:	4619      	mov	r1, r3
 800d504:	4610      	mov	r0, r2
 800d506:	f7fd ff90 	bl	800b42a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d50a:	4b0c      	ldr	r3, [pc, #48]	; (800d53c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	68ba      	ldr	r2, [r7, #8]
 800d510:	429a      	cmp	r2, r3
 800d512:	d202      	bcs.n	800d51a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d514:	4a09      	ldr	r2, [pc, #36]	; (800d53c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	6013      	str	r3, [r2, #0]
}
 800d51a:	bf00      	nop
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	20002684 	.word	0x20002684
 800d528:	20002580 	.word	0x20002580
 800d52c:	20002688 	.word	0x20002688
 800d530:	2000266c 	.word	0x2000266c
 800d534:	2000263c 	.word	0x2000263c
 800d538:	20002638 	.word	0x20002638
 800d53c:	200026a0 	.word	0x200026a0

0800d540 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b08a      	sub	sp, #40	; 0x28
 800d544:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d546:	2300      	movs	r3, #0
 800d548:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d54a:	f000 fb85 	bl	800dc58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d54e:	4b1c      	ldr	r3, [pc, #112]	; (800d5c0 <xTimerCreateTimerTask+0x80>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d021      	beq.n	800d59a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d556:	2300      	movs	r3, #0
 800d558:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d55a:	2300      	movs	r3, #0
 800d55c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d55e:	1d3a      	adds	r2, r7, #4
 800d560:	f107 0108 	add.w	r1, r7, #8
 800d564:	f107 030c 	add.w	r3, r7, #12
 800d568:	4618      	mov	r0, r3
 800d56a:	f7f4 fb29 	bl	8001bc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d56e:	6879      	ldr	r1, [r7, #4]
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	68fa      	ldr	r2, [r7, #12]
 800d574:	9202      	str	r2, [sp, #8]
 800d576:	9301      	str	r3, [sp, #4]
 800d578:	2302      	movs	r3, #2
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	2300      	movs	r3, #0
 800d57e:	460a      	mov	r2, r1
 800d580:	4910      	ldr	r1, [pc, #64]	; (800d5c4 <xTimerCreateTimerTask+0x84>)
 800d582:	4811      	ldr	r0, [pc, #68]	; (800d5c8 <xTimerCreateTimerTask+0x88>)
 800d584:	f7fe ffa0 	bl	800c4c8 <xTaskCreateStatic>
 800d588:	4603      	mov	r3, r0
 800d58a:	4a10      	ldr	r2, [pc, #64]	; (800d5cc <xTimerCreateTimerTask+0x8c>)
 800d58c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d58e:	4b0f      	ldr	r3, [pc, #60]	; (800d5cc <xTimerCreateTimerTask+0x8c>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d001      	beq.n	800d59a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d596:	2301      	movs	r3, #1
 800d598:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d10a      	bne.n	800d5b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a4:	f383 8811 	msr	BASEPRI, r3
 800d5a8:	f3bf 8f6f 	isb	sy
 800d5ac:	f3bf 8f4f 	dsb	sy
 800d5b0:	613b      	str	r3, [r7, #16]
}
 800d5b2:	bf00      	nop
 800d5b4:	e7fe      	b.n	800d5b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d5b6:	697b      	ldr	r3, [r7, #20]
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3718      	adds	r7, #24
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	200026dc 	.word	0x200026dc
 800d5c4:	08011dd4 	.word	0x08011dd4
 800d5c8:	0800d839 	.word	0x0800d839
 800d5cc:	200026e0 	.word	0x200026e0

0800d5d0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b088      	sub	sp, #32
 800d5d4:	af02      	add	r7, sp, #8
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	607a      	str	r2, [r7, #4]
 800d5dc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d5de:	2028      	movs	r0, #40	; 0x28
 800d5e0:	f000 fdca 	bl	800e178 <pvPortMalloc>
 800d5e4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d00d      	beq.n	800d608 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	9301      	str	r3, [sp, #4]
 800d5f8:	6a3b      	ldr	r3, [r7, #32]
 800d5fa:	9300      	str	r3, [sp, #0]
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	68b9      	ldr	r1, [r7, #8]
 800d602:	68f8      	ldr	r0, [r7, #12]
 800d604:	f000 f843 	bl	800d68e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d608:	697b      	ldr	r3, [r7, #20]
	}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3718      	adds	r7, #24
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d612:	b580      	push	{r7, lr}
 800d614:	b08a      	sub	sp, #40	; 0x28
 800d616:	af02      	add	r7, sp, #8
 800d618:	60f8      	str	r0, [r7, #12]
 800d61a:	60b9      	str	r1, [r7, #8]
 800d61c:	607a      	str	r2, [r7, #4]
 800d61e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d620:	2328      	movs	r3, #40	; 0x28
 800d622:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	2b28      	cmp	r3, #40	; 0x28
 800d628:	d00a      	beq.n	800d640 <xTimerCreateStatic+0x2e>
	__asm volatile
 800d62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d62e:	f383 8811 	msr	BASEPRI, r3
 800d632:	f3bf 8f6f 	isb	sy
 800d636:	f3bf 8f4f 	dsb	sy
 800d63a:	61bb      	str	r3, [r7, #24]
}
 800d63c:	bf00      	nop
 800d63e:	e7fe      	b.n	800d63e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d640:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d644:	2b00      	cmp	r3, #0
 800d646:	d10a      	bne.n	800d65e <xTimerCreateStatic+0x4c>
	__asm volatile
 800d648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64c:	f383 8811 	msr	BASEPRI, r3
 800d650:	f3bf 8f6f 	isb	sy
 800d654:	f3bf 8f4f 	dsb	sy
 800d658:	617b      	str	r3, [r7, #20]
}
 800d65a:	bf00      	nop
 800d65c:	e7fe      	b.n	800d65c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d660:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d00d      	beq.n	800d684 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	2202      	movs	r2, #2
 800d66c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	9301      	str	r3, [sp, #4]
 800d674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	68b9      	ldr	r1, [r7, #8]
 800d67e:	68f8      	ldr	r0, [r7, #12]
 800d680:	f000 f805 	bl	800d68e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d684:	69fb      	ldr	r3, [r7, #28]
	}
 800d686:	4618      	mov	r0, r3
 800d688:	3720      	adds	r7, #32
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d68e:	b580      	push	{r7, lr}
 800d690:	b086      	sub	sp, #24
 800d692:	af00      	add	r7, sp, #0
 800d694:	60f8      	str	r0, [r7, #12]
 800d696:	60b9      	str	r1, [r7, #8]
 800d698:	607a      	str	r2, [r7, #4]
 800d69a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d10a      	bne.n	800d6b8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800d6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a6:	f383 8811 	msr	BASEPRI, r3
 800d6aa:	f3bf 8f6f 	isb	sy
 800d6ae:	f3bf 8f4f 	dsb	sy
 800d6b2:	617b      	str	r3, [r7, #20]
}
 800d6b4:	bf00      	nop
 800d6b6:	e7fe      	b.n	800d6b6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d01e      	beq.n	800d6fc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d6be:	f000 facb 	bl	800dc58 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c4:	68fa      	ldr	r2, [r7, #12]
 800d6c6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d0:	683a      	ldr	r2, [r7, #0]
 800d6d2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d6:	6a3a      	ldr	r2, [r7, #32]
 800d6d8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6dc:	3304      	adds	r3, #4
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7fd fe72 	bl	800b3c8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d008      	beq.n	800d6fc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d6f0:	f043 0304 	orr.w	r3, r3, #4
 800d6f4:	b2da      	uxtb	r2, r3
 800d6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d6fc:	bf00      	nop
 800d6fe:	3718      	adds	r7, #24
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b08a      	sub	sp, #40	; 0x28
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	607a      	str	r2, [r7, #4]
 800d710:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d712:	2300      	movs	r3, #0
 800d714:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d10a      	bne.n	800d732 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d720:	f383 8811 	msr	BASEPRI, r3
 800d724:	f3bf 8f6f 	isb	sy
 800d728:	f3bf 8f4f 	dsb	sy
 800d72c:	623b      	str	r3, [r7, #32]
}
 800d72e:	bf00      	nop
 800d730:	e7fe      	b.n	800d730 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d732:	4b1a      	ldr	r3, [pc, #104]	; (800d79c <xTimerGenericCommand+0x98>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d02a      	beq.n	800d790 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	2b05      	cmp	r3, #5
 800d74a:	dc18      	bgt.n	800d77e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d74c:	f7ff fcd6 	bl	800d0fc <xTaskGetSchedulerState>
 800d750:	4603      	mov	r3, r0
 800d752:	2b02      	cmp	r3, #2
 800d754:	d109      	bne.n	800d76a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d756:	4b11      	ldr	r3, [pc, #68]	; (800d79c <xTimerGenericCommand+0x98>)
 800d758:	6818      	ldr	r0, [r3, #0]
 800d75a:	f107 0114 	add.w	r1, r7, #20
 800d75e:	2300      	movs	r3, #0
 800d760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d762:	f7fe f84b 	bl	800b7fc <xQueueGenericSend>
 800d766:	6278      	str	r0, [r7, #36]	; 0x24
 800d768:	e012      	b.n	800d790 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d76a:	4b0c      	ldr	r3, [pc, #48]	; (800d79c <xTimerGenericCommand+0x98>)
 800d76c:	6818      	ldr	r0, [r3, #0]
 800d76e:	f107 0114 	add.w	r1, r7, #20
 800d772:	2300      	movs	r3, #0
 800d774:	2200      	movs	r2, #0
 800d776:	f7fe f841 	bl	800b7fc <xQueueGenericSend>
 800d77a:	6278      	str	r0, [r7, #36]	; 0x24
 800d77c:	e008      	b.n	800d790 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d77e:	4b07      	ldr	r3, [pc, #28]	; (800d79c <xTimerGenericCommand+0x98>)
 800d780:	6818      	ldr	r0, [r3, #0]
 800d782:	f107 0114 	add.w	r1, r7, #20
 800d786:	2300      	movs	r3, #0
 800d788:	683a      	ldr	r2, [r7, #0]
 800d78a:	f7fe f935 	bl	800b9f8 <xQueueGenericSendFromISR>
 800d78e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d792:	4618      	mov	r0, r3
 800d794:	3728      	adds	r7, #40	; 0x28
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	200026dc 	.word	0x200026dc

0800d7a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b088      	sub	sp, #32
 800d7a4:	af02      	add	r7, sp, #8
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7aa:	4b22      	ldr	r3, [pc, #136]	; (800d834 <prvProcessExpiredTimer+0x94>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	68db      	ldr	r3, [r3, #12]
 800d7b0:	68db      	ldr	r3, [r3, #12]
 800d7b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	3304      	adds	r3, #4
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7fd fe6f 	bl	800b49c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d7c4:	f003 0304 	and.w	r3, r3, #4
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d022      	beq.n	800d812 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	699a      	ldr	r2, [r3, #24]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	18d1      	adds	r1, r2, r3
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	683a      	ldr	r2, [r7, #0]
 800d7d8:	6978      	ldr	r0, [r7, #20]
 800d7da:	f000 f8d1 	bl	800d980 <prvInsertTimerInActiveList>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d01f      	beq.n	800d824 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	9300      	str	r3, [sp, #0]
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	2100      	movs	r1, #0
 800d7ee:	6978      	ldr	r0, [r7, #20]
 800d7f0:	f7ff ff88 	bl	800d704 <xTimerGenericCommand>
 800d7f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d113      	bne.n	800d824 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d800:	f383 8811 	msr	BASEPRI, r3
 800d804:	f3bf 8f6f 	isb	sy
 800d808:	f3bf 8f4f 	dsb	sy
 800d80c:	60fb      	str	r3, [r7, #12]
}
 800d80e:	bf00      	nop
 800d810:	e7fe      	b.n	800d810 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d818:	f023 0301 	bic.w	r3, r3, #1
 800d81c:	b2da      	uxtb	r2, r3
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	6a1b      	ldr	r3, [r3, #32]
 800d828:	6978      	ldr	r0, [r7, #20]
 800d82a:	4798      	blx	r3
}
 800d82c:	bf00      	nop
 800d82e:	3718      	adds	r7, #24
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	200026d4 	.word	0x200026d4

0800d838 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d840:	f107 0308 	add.w	r3, r7, #8
 800d844:	4618      	mov	r0, r3
 800d846:	f000 f857 	bl	800d8f8 <prvGetNextExpireTime>
 800d84a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	4619      	mov	r1, r3
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	f000 f803 	bl	800d85c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d856:	f000 f8d5 	bl	800da04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d85a:	e7f1      	b.n	800d840 <prvTimerTask+0x8>

0800d85c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d866:	f7ff f85d 	bl	800c924 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d86a:	f107 0308 	add.w	r3, r7, #8
 800d86e:	4618      	mov	r0, r3
 800d870:	f000 f866 	bl	800d940 <prvSampleTimeNow>
 800d874:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d130      	bne.n	800d8de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d10a      	bne.n	800d898 <prvProcessTimerOrBlockTask+0x3c>
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	429a      	cmp	r2, r3
 800d888:	d806      	bhi.n	800d898 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d88a:	f7ff f859 	bl	800c940 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d88e:	68f9      	ldr	r1, [r7, #12]
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7ff ff85 	bl	800d7a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d896:	e024      	b.n	800d8e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d008      	beq.n	800d8b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d89e:	4b13      	ldr	r3, [pc, #76]	; (800d8ec <prvProcessTimerOrBlockTask+0x90>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d101      	bne.n	800d8ac <prvProcessTimerOrBlockTask+0x50>
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	e000      	b.n	800d8ae <prvProcessTimerOrBlockTask+0x52>
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d8b0:	4b0f      	ldr	r3, [pc, #60]	; (800d8f0 <prvProcessTimerOrBlockTask+0x94>)
 800d8b2:	6818      	ldr	r0, [r3, #0]
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	1ad3      	subs	r3, r2, r3
 800d8ba:	683a      	ldr	r2, [r7, #0]
 800d8bc:	4619      	mov	r1, r3
 800d8be:	f7fe fdcf 	bl	800c460 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d8c2:	f7ff f83d 	bl	800c940 <xTaskResumeAll>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d10a      	bne.n	800d8e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d8cc:	4b09      	ldr	r3, [pc, #36]	; (800d8f4 <prvProcessTimerOrBlockTask+0x98>)
 800d8ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8d2:	601a      	str	r2, [r3, #0]
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	f3bf 8f6f 	isb	sy
}
 800d8dc:	e001      	b.n	800d8e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d8de:	f7ff f82f 	bl	800c940 <xTaskResumeAll>
}
 800d8e2:	bf00      	nop
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	200026d8 	.word	0x200026d8
 800d8f0:	200026dc 	.word	0x200026dc
 800d8f4:	e000ed04 	.word	0xe000ed04

0800d8f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b085      	sub	sp, #20
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d900:	4b0e      	ldr	r3, [pc, #56]	; (800d93c <prvGetNextExpireTime+0x44>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d101      	bne.n	800d90e <prvGetNextExpireTime+0x16>
 800d90a:	2201      	movs	r2, #1
 800d90c:	e000      	b.n	800d910 <prvGetNextExpireTime+0x18>
 800d90e:	2200      	movs	r2, #0
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d105      	bne.n	800d928 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d91c:	4b07      	ldr	r3, [pc, #28]	; (800d93c <prvGetNextExpireTime+0x44>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	68db      	ldr	r3, [r3, #12]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	60fb      	str	r3, [r7, #12]
 800d926:	e001      	b.n	800d92c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d928:	2300      	movs	r3, #0
 800d92a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d92c:	68fb      	ldr	r3, [r7, #12]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3714      	adds	r7, #20
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	200026d4 	.word	0x200026d4

0800d940 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d948:	f7ff f896 	bl	800ca78 <xTaskGetTickCount>
 800d94c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d94e:	4b0b      	ldr	r3, [pc, #44]	; (800d97c <prvSampleTimeNow+0x3c>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	68fa      	ldr	r2, [r7, #12]
 800d954:	429a      	cmp	r2, r3
 800d956:	d205      	bcs.n	800d964 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d958:	f000 f91a 	bl	800db90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2201      	movs	r2, #1
 800d960:	601a      	str	r2, [r3, #0]
 800d962:	e002      	b.n	800d96a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d96a:	4a04      	ldr	r2, [pc, #16]	; (800d97c <prvSampleTimeNow+0x3c>)
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d970:	68fb      	ldr	r3, [r7, #12]
}
 800d972:	4618      	mov	r0, r3
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	200026e4 	.word	0x200026e4

0800d980 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b086      	sub	sp, #24
 800d984:	af00      	add	r7, sp, #0
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	60b9      	str	r1, [r7, #8]
 800d98a:	607a      	str	r2, [r7, #4]
 800d98c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d98e:	2300      	movs	r3, #0
 800d990:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d99e:	68ba      	ldr	r2, [r7, #8]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d812      	bhi.n	800d9cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	1ad2      	subs	r2, r2, r3
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	699b      	ldr	r3, [r3, #24]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d302      	bcc.n	800d9ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	617b      	str	r3, [r7, #20]
 800d9b8:	e01b      	b.n	800d9f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d9ba:	4b10      	ldr	r3, [pc, #64]	; (800d9fc <prvInsertTimerInActiveList+0x7c>)
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	3304      	adds	r3, #4
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	4610      	mov	r0, r2
 800d9c6:	f7fd fd30 	bl	800b42a <vListInsert>
 800d9ca:	e012      	b.n	800d9f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d9cc:	687a      	ldr	r2, [r7, #4]
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d206      	bcs.n	800d9e2 <prvInsertTimerInActiveList+0x62>
 800d9d4:	68ba      	ldr	r2, [r7, #8]
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d302      	bcc.n	800d9e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	617b      	str	r3, [r7, #20]
 800d9e0:	e007      	b.n	800d9f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d9e2:	4b07      	ldr	r3, [pc, #28]	; (800da00 <prvInsertTimerInActiveList+0x80>)
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	3304      	adds	r3, #4
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	4610      	mov	r0, r2
 800d9ee:	f7fd fd1c 	bl	800b42a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d9f2:	697b      	ldr	r3, [r7, #20]
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3718      	adds	r7, #24
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	200026d8 	.word	0x200026d8
 800da00:	200026d4 	.word	0x200026d4

0800da04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b08c      	sub	sp, #48	; 0x30
 800da08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800da0a:	e0ae      	b.n	800db6a <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f2c0 80aa 	blt.w	800db68 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800da18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1a:	695b      	ldr	r3, [r3, #20]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d004      	beq.n	800da2a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da22:	3304      	adds	r3, #4
 800da24:	4618      	mov	r0, r3
 800da26:	f7fd fd39 	bl	800b49c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da2a:	1d3b      	adds	r3, r7, #4
 800da2c:	4618      	mov	r0, r3
 800da2e:	f7ff ff87 	bl	800d940 <prvSampleTimeNow>
 800da32:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	2b09      	cmp	r3, #9
 800da38:	f200 8097 	bhi.w	800db6a <prvProcessReceivedCommands+0x166>
 800da3c:	a201      	add	r2, pc, #4	; (adr r2, 800da44 <prvProcessReceivedCommands+0x40>)
 800da3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da42:	bf00      	nop
 800da44:	0800da6d 	.word	0x0800da6d
 800da48:	0800da6d 	.word	0x0800da6d
 800da4c:	0800da6d 	.word	0x0800da6d
 800da50:	0800dae1 	.word	0x0800dae1
 800da54:	0800daf5 	.word	0x0800daf5
 800da58:	0800db3f 	.word	0x0800db3f
 800da5c:	0800da6d 	.word	0x0800da6d
 800da60:	0800da6d 	.word	0x0800da6d
 800da64:	0800dae1 	.word	0x0800dae1
 800da68:	0800daf5 	.word	0x0800daf5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800da72:	f043 0301 	orr.w	r3, r3, #1
 800da76:	b2da      	uxtb	r2, r3
 800da78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800da7e:	68fa      	ldr	r2, [r7, #12]
 800da80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da82:	699b      	ldr	r3, [r3, #24]
 800da84:	18d1      	adds	r1, r2, r3
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	6a3a      	ldr	r2, [r7, #32]
 800da8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da8c:	f7ff ff78 	bl	800d980 <prvInsertTimerInActiveList>
 800da90:	4603      	mov	r3, r0
 800da92:	2b00      	cmp	r3, #0
 800da94:	d069      	beq.n	800db6a <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da98:	6a1b      	ldr	r3, [r3, #32]
 800da9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800daa4:	f003 0304 	and.w	r3, r3, #4
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d05e      	beq.n	800db6a <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800daac:	68fa      	ldr	r2, [r7, #12]
 800daae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab0:	699b      	ldr	r3, [r3, #24]
 800dab2:	441a      	add	r2, r3
 800dab4:	2300      	movs	r3, #0
 800dab6:	9300      	str	r3, [sp, #0]
 800dab8:	2300      	movs	r3, #0
 800daba:	2100      	movs	r1, #0
 800dabc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dabe:	f7ff fe21 	bl	800d704 <xTimerGenericCommand>
 800dac2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800dac4:	69fb      	ldr	r3, [r7, #28]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d14f      	bne.n	800db6a <prvProcessReceivedCommands+0x166>
	__asm volatile
 800daca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dace:	f383 8811 	msr	BASEPRI, r3
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	f3bf 8f4f 	dsb	sy
 800dada:	61bb      	str	r3, [r7, #24]
}
 800dadc:	bf00      	nop
 800dade:	e7fe      	b.n	800dade <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dae6:	f023 0301 	bic.w	r3, r3, #1
 800daea:	b2da      	uxtb	r2, r3
 800daec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800daf2:	e03a      	b.n	800db6a <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800daf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dafa:	f043 0301 	orr.w	r3, r3, #1
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800db06:	68fa      	ldr	r2, [r7, #12]
 800db08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800db0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0e:	699b      	ldr	r3, [r3, #24]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d10a      	bne.n	800db2a <prvProcessReceivedCommands+0x126>
	__asm volatile
 800db14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db18:	f383 8811 	msr	BASEPRI, r3
 800db1c:	f3bf 8f6f 	isb	sy
 800db20:	f3bf 8f4f 	dsb	sy
 800db24:	617b      	str	r3, [r7, #20]
}
 800db26:	bf00      	nop
 800db28:	e7fe      	b.n	800db28 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800db2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2c:	699a      	ldr	r2, [r3, #24]
 800db2e:	6a3b      	ldr	r3, [r7, #32]
 800db30:	18d1      	adds	r1, r2, r3
 800db32:	6a3b      	ldr	r3, [r7, #32]
 800db34:	6a3a      	ldr	r2, [r7, #32]
 800db36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db38:	f7ff ff22 	bl	800d980 <prvInsertTimerInActiveList>
					break;
 800db3c:	e015      	b.n	800db6a <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800db3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800db44:	f003 0302 	and.w	r3, r3, #2
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d103      	bne.n	800db54 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800db4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db4e:	f000 fbdf 	bl	800e310 <vPortFree>
 800db52:	e00a      	b.n	800db6a <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800db5a:	f023 0301 	bic.w	r3, r3, #1
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800db66:	e000      	b.n	800db6a <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800db68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db6a:	4b08      	ldr	r3, [pc, #32]	; (800db8c <prvProcessReceivedCommands+0x188>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f107 0108 	add.w	r1, r7, #8
 800db72:	2200      	movs	r2, #0
 800db74:	4618      	mov	r0, r3
 800db76:	f7fe f867 	bl	800bc48 <xQueueReceive>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	f47f af45 	bne.w	800da0c <prvProcessReceivedCommands+0x8>
	}
}
 800db82:	bf00      	nop
 800db84:	bf00      	nop
 800db86:	3728      	adds	r7, #40	; 0x28
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	200026dc 	.word	0x200026dc

0800db90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b088      	sub	sp, #32
 800db94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db96:	e048      	b.n	800dc2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db98:	4b2d      	ldr	r3, [pc, #180]	; (800dc50 <prvSwitchTimerLists+0xc0>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dba2:	4b2b      	ldr	r3, [pc, #172]	; (800dc50 <prvSwitchTimerLists+0xc0>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	3304      	adds	r3, #4
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7fd fc73 	bl	800b49c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	6a1b      	ldr	r3, [r3, #32]
 800dbba:	68f8      	ldr	r0, [r7, #12]
 800dbbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dbc4:	f003 0304 	and.w	r3, r3, #4
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d02e      	beq.n	800dc2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	699b      	ldr	r3, [r3, #24]
 800dbd0:	693a      	ldr	r2, [r7, #16]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dbd6:	68ba      	ldr	r2, [r7, #8]
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d90e      	bls.n	800dbfc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	68ba      	ldr	r2, [r7, #8]
 800dbe2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	68fa      	ldr	r2, [r7, #12]
 800dbe8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbea:	4b19      	ldr	r3, [pc, #100]	; (800dc50 <prvSwitchTimerLists+0xc0>)
 800dbec:	681a      	ldr	r2, [r3, #0]
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	3304      	adds	r3, #4
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	4610      	mov	r0, r2
 800dbf6:	f7fd fc18 	bl	800b42a <vListInsert>
 800dbfa:	e016      	b.n	800dc2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	9300      	str	r3, [sp, #0]
 800dc00:	2300      	movs	r3, #0
 800dc02:	693a      	ldr	r2, [r7, #16]
 800dc04:	2100      	movs	r1, #0
 800dc06:	68f8      	ldr	r0, [r7, #12]
 800dc08:	f7ff fd7c 	bl	800d704 <xTimerGenericCommand>
 800dc0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d10a      	bne.n	800dc2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc18:	f383 8811 	msr	BASEPRI, r3
 800dc1c:	f3bf 8f6f 	isb	sy
 800dc20:	f3bf 8f4f 	dsb	sy
 800dc24:	603b      	str	r3, [r7, #0]
}
 800dc26:	bf00      	nop
 800dc28:	e7fe      	b.n	800dc28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc2a:	4b09      	ldr	r3, [pc, #36]	; (800dc50 <prvSwitchTimerLists+0xc0>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d1b1      	bne.n	800db98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dc34:	4b06      	ldr	r3, [pc, #24]	; (800dc50 <prvSwitchTimerLists+0xc0>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dc3a:	4b06      	ldr	r3, [pc, #24]	; (800dc54 <prvSwitchTimerLists+0xc4>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	4a04      	ldr	r2, [pc, #16]	; (800dc50 <prvSwitchTimerLists+0xc0>)
 800dc40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dc42:	4a04      	ldr	r2, [pc, #16]	; (800dc54 <prvSwitchTimerLists+0xc4>)
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	6013      	str	r3, [r2, #0]
}
 800dc48:	bf00      	nop
 800dc4a:	3718      	adds	r7, #24
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	200026d4 	.word	0x200026d4
 800dc54:	200026d8 	.word	0x200026d8

0800dc58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dc5e:	f000 f969 	bl	800df34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dc62:	4b15      	ldr	r3, [pc, #84]	; (800dcb8 <prvCheckForValidListAndQueue+0x60>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d120      	bne.n	800dcac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dc6a:	4814      	ldr	r0, [pc, #80]	; (800dcbc <prvCheckForValidListAndQueue+0x64>)
 800dc6c:	f7fd fb8c 	bl	800b388 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dc70:	4813      	ldr	r0, [pc, #76]	; (800dcc0 <prvCheckForValidListAndQueue+0x68>)
 800dc72:	f7fd fb89 	bl	800b388 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dc76:	4b13      	ldr	r3, [pc, #76]	; (800dcc4 <prvCheckForValidListAndQueue+0x6c>)
 800dc78:	4a10      	ldr	r2, [pc, #64]	; (800dcbc <prvCheckForValidListAndQueue+0x64>)
 800dc7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dc7c:	4b12      	ldr	r3, [pc, #72]	; (800dcc8 <prvCheckForValidListAndQueue+0x70>)
 800dc7e:	4a10      	ldr	r2, [pc, #64]	; (800dcc0 <prvCheckForValidListAndQueue+0x68>)
 800dc80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dc82:	2300      	movs	r3, #0
 800dc84:	9300      	str	r3, [sp, #0]
 800dc86:	4b11      	ldr	r3, [pc, #68]	; (800dccc <prvCheckForValidListAndQueue+0x74>)
 800dc88:	4a11      	ldr	r2, [pc, #68]	; (800dcd0 <prvCheckForValidListAndQueue+0x78>)
 800dc8a:	210c      	movs	r1, #12
 800dc8c:	200a      	movs	r0, #10
 800dc8e:	f7fd fc97 	bl	800b5c0 <xQueueGenericCreateStatic>
 800dc92:	4603      	mov	r3, r0
 800dc94:	4a08      	ldr	r2, [pc, #32]	; (800dcb8 <prvCheckForValidListAndQueue+0x60>)
 800dc96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dc98:	4b07      	ldr	r3, [pc, #28]	; (800dcb8 <prvCheckForValidListAndQueue+0x60>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d005      	beq.n	800dcac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dca0:	4b05      	ldr	r3, [pc, #20]	; (800dcb8 <prvCheckForValidListAndQueue+0x60>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	490b      	ldr	r1, [pc, #44]	; (800dcd4 <prvCheckForValidListAndQueue+0x7c>)
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7fe fb86 	bl	800c3b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dcac:	f000 f972 	bl	800df94 <vPortExitCritical>
}
 800dcb0:	bf00      	nop
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	200026dc 	.word	0x200026dc
 800dcbc:	200026ac 	.word	0x200026ac
 800dcc0:	200026c0 	.word	0x200026c0
 800dcc4:	200026d4 	.word	0x200026d4
 800dcc8:	200026d8 	.word	0x200026d8
 800dccc:	20002760 	.word	0x20002760
 800dcd0:	200026e8 	.word	0x200026e8
 800dcd4:	08011ddc 	.word	0x08011ddc

0800dcd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b085      	sub	sp, #20
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	60b9      	str	r1, [r7, #8]
 800dce2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	3b04      	subs	r3, #4
 800dce8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dcf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	3b04      	subs	r3, #4
 800dcf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	f023 0201 	bic.w	r2, r3, #1
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	3b04      	subs	r3, #4
 800dd06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dd08:	4a0c      	ldr	r2, [pc, #48]	; (800dd3c <pxPortInitialiseStack+0x64>)
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	3b14      	subs	r3, #20
 800dd12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	3b04      	subs	r3, #4
 800dd1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f06f 0202 	mvn.w	r2, #2
 800dd26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	3b20      	subs	r3, #32
 800dd2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3714      	adds	r7, #20
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr
 800dd3c:	0800dd41 	.word	0x0800dd41

0800dd40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dd46:	2300      	movs	r3, #0
 800dd48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dd4a:	4b12      	ldr	r3, [pc, #72]	; (800dd94 <prvTaskExitError+0x54>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd52:	d00a      	beq.n	800dd6a <prvTaskExitError+0x2a>
	__asm volatile
 800dd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd58:	f383 8811 	msr	BASEPRI, r3
 800dd5c:	f3bf 8f6f 	isb	sy
 800dd60:	f3bf 8f4f 	dsb	sy
 800dd64:	60fb      	str	r3, [r7, #12]
}
 800dd66:	bf00      	nop
 800dd68:	e7fe      	b.n	800dd68 <prvTaskExitError+0x28>
	__asm volatile
 800dd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd6e:	f383 8811 	msr	BASEPRI, r3
 800dd72:	f3bf 8f6f 	isb	sy
 800dd76:	f3bf 8f4f 	dsb	sy
 800dd7a:	60bb      	str	r3, [r7, #8]
}
 800dd7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dd7e:	bf00      	nop
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d0fc      	beq.n	800dd80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dd86:	bf00      	nop
 800dd88:	bf00      	nop
 800dd8a:	3714      	adds	r7, #20
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr
 800dd94:	20000074 	.word	0x20000074
	...

0800dda0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dda0:	4b07      	ldr	r3, [pc, #28]	; (800ddc0 <pxCurrentTCBConst2>)
 800dda2:	6819      	ldr	r1, [r3, #0]
 800dda4:	6808      	ldr	r0, [r1, #0]
 800dda6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddaa:	f380 8809 	msr	PSP, r0
 800ddae:	f3bf 8f6f 	isb	sy
 800ddb2:	f04f 0000 	mov.w	r0, #0
 800ddb6:	f380 8811 	msr	BASEPRI, r0
 800ddba:	4770      	bx	lr
 800ddbc:	f3af 8000 	nop.w

0800ddc0 <pxCurrentTCBConst2>:
 800ddc0:	20002580 	.word	0x20002580
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ddc4:	bf00      	nop
 800ddc6:	bf00      	nop

0800ddc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ddc8:	4808      	ldr	r0, [pc, #32]	; (800ddec <prvPortStartFirstTask+0x24>)
 800ddca:	6800      	ldr	r0, [r0, #0]
 800ddcc:	6800      	ldr	r0, [r0, #0]
 800ddce:	f380 8808 	msr	MSP, r0
 800ddd2:	f04f 0000 	mov.w	r0, #0
 800ddd6:	f380 8814 	msr	CONTROL, r0
 800ddda:	b662      	cpsie	i
 800dddc:	b661      	cpsie	f
 800ddde:	f3bf 8f4f 	dsb	sy
 800dde2:	f3bf 8f6f 	isb	sy
 800dde6:	df00      	svc	0
 800dde8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ddea:	bf00      	nop
 800ddec:	e000ed08 	.word	0xe000ed08

0800ddf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b086      	sub	sp, #24
 800ddf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ddf6:	4b46      	ldr	r3, [pc, #280]	; (800df10 <xPortStartScheduler+0x120>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4a46      	ldr	r2, [pc, #280]	; (800df14 <xPortStartScheduler+0x124>)
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d10a      	bne.n	800de16 <xPortStartScheduler+0x26>
	__asm volatile
 800de00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de04:	f383 8811 	msr	BASEPRI, r3
 800de08:	f3bf 8f6f 	isb	sy
 800de0c:	f3bf 8f4f 	dsb	sy
 800de10:	613b      	str	r3, [r7, #16]
}
 800de12:	bf00      	nop
 800de14:	e7fe      	b.n	800de14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800de16:	4b3e      	ldr	r3, [pc, #248]	; (800df10 <xPortStartScheduler+0x120>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a3f      	ldr	r2, [pc, #252]	; (800df18 <xPortStartScheduler+0x128>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d10a      	bne.n	800de36 <xPortStartScheduler+0x46>
	__asm volatile
 800de20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de24:	f383 8811 	msr	BASEPRI, r3
 800de28:	f3bf 8f6f 	isb	sy
 800de2c:	f3bf 8f4f 	dsb	sy
 800de30:	60fb      	str	r3, [r7, #12]
}
 800de32:	bf00      	nop
 800de34:	e7fe      	b.n	800de34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800de36:	4b39      	ldr	r3, [pc, #228]	; (800df1c <xPortStartScheduler+0x12c>)
 800de38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	22ff      	movs	r2, #255	; 0xff
 800de46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de50:	78fb      	ldrb	r3, [r7, #3]
 800de52:	b2db      	uxtb	r3, r3
 800de54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800de58:	b2da      	uxtb	r2, r3
 800de5a:	4b31      	ldr	r3, [pc, #196]	; (800df20 <xPortStartScheduler+0x130>)
 800de5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de5e:	4b31      	ldr	r3, [pc, #196]	; (800df24 <xPortStartScheduler+0x134>)
 800de60:	2207      	movs	r2, #7
 800de62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de64:	e009      	b.n	800de7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800de66:	4b2f      	ldr	r3, [pc, #188]	; (800df24 <xPortStartScheduler+0x134>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	3b01      	subs	r3, #1
 800de6c:	4a2d      	ldr	r2, [pc, #180]	; (800df24 <xPortStartScheduler+0x134>)
 800de6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de70:	78fb      	ldrb	r3, [r7, #3]
 800de72:	b2db      	uxtb	r3, r3
 800de74:	005b      	lsls	r3, r3, #1
 800de76:	b2db      	uxtb	r3, r3
 800de78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de7a:	78fb      	ldrb	r3, [r7, #3]
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de82:	2b80      	cmp	r3, #128	; 0x80
 800de84:	d0ef      	beq.n	800de66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de86:	4b27      	ldr	r3, [pc, #156]	; (800df24 <xPortStartScheduler+0x134>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f1c3 0307 	rsb	r3, r3, #7
 800de8e:	2b04      	cmp	r3, #4
 800de90:	d00a      	beq.n	800dea8 <xPortStartScheduler+0xb8>
	__asm volatile
 800de92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de96:	f383 8811 	msr	BASEPRI, r3
 800de9a:	f3bf 8f6f 	isb	sy
 800de9e:	f3bf 8f4f 	dsb	sy
 800dea2:	60bb      	str	r3, [r7, #8]
}
 800dea4:	bf00      	nop
 800dea6:	e7fe      	b.n	800dea6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dea8:	4b1e      	ldr	r3, [pc, #120]	; (800df24 <xPortStartScheduler+0x134>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	021b      	lsls	r3, r3, #8
 800deae:	4a1d      	ldr	r2, [pc, #116]	; (800df24 <xPortStartScheduler+0x134>)
 800deb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800deb2:	4b1c      	ldr	r3, [pc, #112]	; (800df24 <xPortStartScheduler+0x134>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800deba:	4a1a      	ldr	r2, [pc, #104]	; (800df24 <xPortStartScheduler+0x134>)
 800debc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	b2da      	uxtb	r2, r3
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dec6:	4b18      	ldr	r3, [pc, #96]	; (800df28 <xPortStartScheduler+0x138>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	4a17      	ldr	r2, [pc, #92]	; (800df28 <xPortStartScheduler+0x138>)
 800decc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ded0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ded2:	4b15      	ldr	r3, [pc, #84]	; (800df28 <xPortStartScheduler+0x138>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	4a14      	ldr	r2, [pc, #80]	; (800df28 <xPortStartScheduler+0x138>)
 800ded8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dedc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dede:	f000 f8dd 	bl	800e09c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dee2:	4b12      	ldr	r3, [pc, #72]	; (800df2c <xPortStartScheduler+0x13c>)
 800dee4:	2200      	movs	r2, #0
 800dee6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dee8:	f000 f8fc 	bl	800e0e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800deec:	4b10      	ldr	r3, [pc, #64]	; (800df30 <xPortStartScheduler+0x140>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a0f      	ldr	r2, [pc, #60]	; (800df30 <xPortStartScheduler+0x140>)
 800def2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800def6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800def8:	f7ff ff66 	bl	800ddc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800defc:	f7fe fe96 	bl	800cc2c <vTaskSwitchContext>
	prvTaskExitError();
 800df00:	f7ff ff1e 	bl	800dd40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800df04:	2300      	movs	r3, #0
}
 800df06:	4618      	mov	r0, r3
 800df08:	3718      	adds	r7, #24
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	e000ed00 	.word	0xe000ed00
 800df14:	410fc271 	.word	0x410fc271
 800df18:	410fc270 	.word	0x410fc270
 800df1c:	e000e400 	.word	0xe000e400
 800df20:	200027a8 	.word	0x200027a8
 800df24:	200027ac 	.word	0x200027ac
 800df28:	e000ed20 	.word	0xe000ed20
 800df2c:	20000074 	.word	0x20000074
 800df30:	e000ef34 	.word	0xe000ef34

0800df34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
	__asm volatile
 800df3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df3e:	f383 8811 	msr	BASEPRI, r3
 800df42:	f3bf 8f6f 	isb	sy
 800df46:	f3bf 8f4f 	dsb	sy
 800df4a:	607b      	str	r3, [r7, #4]
}
 800df4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800df4e:	4b0f      	ldr	r3, [pc, #60]	; (800df8c <vPortEnterCritical+0x58>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	3301      	adds	r3, #1
 800df54:	4a0d      	ldr	r2, [pc, #52]	; (800df8c <vPortEnterCritical+0x58>)
 800df56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800df58:	4b0c      	ldr	r3, [pc, #48]	; (800df8c <vPortEnterCritical+0x58>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2b01      	cmp	r3, #1
 800df5e:	d10f      	bne.n	800df80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800df60:	4b0b      	ldr	r3, [pc, #44]	; (800df90 <vPortEnterCritical+0x5c>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	b2db      	uxtb	r3, r3
 800df66:	2b00      	cmp	r3, #0
 800df68:	d00a      	beq.n	800df80 <vPortEnterCritical+0x4c>
	__asm volatile
 800df6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6e:	f383 8811 	msr	BASEPRI, r3
 800df72:	f3bf 8f6f 	isb	sy
 800df76:	f3bf 8f4f 	dsb	sy
 800df7a:	603b      	str	r3, [r7, #0]
}
 800df7c:	bf00      	nop
 800df7e:	e7fe      	b.n	800df7e <vPortEnterCritical+0x4a>
	}
}
 800df80:	bf00      	nop
 800df82:	370c      	adds	r7, #12
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr
 800df8c:	20000074 	.word	0x20000074
 800df90:	e000ed04 	.word	0xe000ed04

0800df94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df94:	b480      	push	{r7}
 800df96:	b083      	sub	sp, #12
 800df98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df9a:	4b12      	ldr	r3, [pc, #72]	; (800dfe4 <vPortExitCritical+0x50>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d10a      	bne.n	800dfb8 <vPortExitCritical+0x24>
	__asm volatile
 800dfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa6:	f383 8811 	msr	BASEPRI, r3
 800dfaa:	f3bf 8f6f 	isb	sy
 800dfae:	f3bf 8f4f 	dsb	sy
 800dfb2:	607b      	str	r3, [r7, #4]
}
 800dfb4:	bf00      	nop
 800dfb6:	e7fe      	b.n	800dfb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dfb8:	4b0a      	ldr	r3, [pc, #40]	; (800dfe4 <vPortExitCritical+0x50>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	3b01      	subs	r3, #1
 800dfbe:	4a09      	ldr	r2, [pc, #36]	; (800dfe4 <vPortExitCritical+0x50>)
 800dfc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dfc2:	4b08      	ldr	r3, [pc, #32]	; (800dfe4 <vPortExitCritical+0x50>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d105      	bne.n	800dfd6 <vPortExitCritical+0x42>
 800dfca:	2300      	movs	r3, #0
 800dfcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	f383 8811 	msr	BASEPRI, r3
}
 800dfd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dfd6:	bf00      	nop
 800dfd8:	370c      	adds	r7, #12
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop
 800dfe4:	20000074 	.word	0x20000074
	...

0800dff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dff0:	f3ef 8009 	mrs	r0, PSP
 800dff4:	f3bf 8f6f 	isb	sy
 800dff8:	4b15      	ldr	r3, [pc, #84]	; (800e050 <pxCurrentTCBConst>)
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	f01e 0f10 	tst.w	lr, #16
 800e000:	bf08      	it	eq
 800e002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e00a:	6010      	str	r0, [r2, #0]
 800e00c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e010:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e014:	f380 8811 	msr	BASEPRI, r0
 800e018:	f3bf 8f4f 	dsb	sy
 800e01c:	f3bf 8f6f 	isb	sy
 800e020:	f7fe fe04 	bl	800cc2c <vTaskSwitchContext>
 800e024:	f04f 0000 	mov.w	r0, #0
 800e028:	f380 8811 	msr	BASEPRI, r0
 800e02c:	bc09      	pop	{r0, r3}
 800e02e:	6819      	ldr	r1, [r3, #0]
 800e030:	6808      	ldr	r0, [r1, #0]
 800e032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e036:	f01e 0f10 	tst.w	lr, #16
 800e03a:	bf08      	it	eq
 800e03c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e040:	f380 8809 	msr	PSP, r0
 800e044:	f3bf 8f6f 	isb	sy
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop
 800e04c:	f3af 8000 	nop.w

0800e050 <pxCurrentTCBConst>:
 800e050:	20002580 	.word	0x20002580
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e054:	bf00      	nop
 800e056:	bf00      	nop

0800e058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
	__asm volatile
 800e05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e062:	f383 8811 	msr	BASEPRI, r3
 800e066:	f3bf 8f6f 	isb	sy
 800e06a:	f3bf 8f4f 	dsb	sy
 800e06e:	607b      	str	r3, [r7, #4]
}
 800e070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e072:	f7fe fd23 	bl	800cabc <xTaskIncrementTick>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d003      	beq.n	800e084 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e07c:	4b06      	ldr	r3, [pc, #24]	; (800e098 <SysTick_Handler+0x40>)
 800e07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e082:	601a      	str	r2, [r3, #0]
 800e084:	2300      	movs	r3, #0
 800e086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	f383 8811 	msr	BASEPRI, r3
}
 800e08e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e090:	bf00      	nop
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	e000ed04 	.word	0xe000ed04

0800e09c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e09c:	b480      	push	{r7}
 800e09e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e0a0:	4b0b      	ldr	r3, [pc, #44]	; (800e0d0 <vPortSetupTimerInterrupt+0x34>)
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e0a6:	4b0b      	ldr	r3, [pc, #44]	; (800e0d4 <vPortSetupTimerInterrupt+0x38>)
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e0ac:	4b0a      	ldr	r3, [pc, #40]	; (800e0d8 <vPortSetupTimerInterrupt+0x3c>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4a0a      	ldr	r2, [pc, #40]	; (800e0dc <vPortSetupTimerInterrupt+0x40>)
 800e0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e0b6:	099b      	lsrs	r3, r3, #6
 800e0b8:	4a09      	ldr	r2, [pc, #36]	; (800e0e0 <vPortSetupTimerInterrupt+0x44>)
 800e0ba:	3b01      	subs	r3, #1
 800e0bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e0be:	4b04      	ldr	r3, [pc, #16]	; (800e0d0 <vPortSetupTimerInterrupt+0x34>)
 800e0c0:	2207      	movs	r2, #7
 800e0c2:	601a      	str	r2, [r3, #0]
}
 800e0c4:	bf00      	nop
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr
 800e0ce:	bf00      	nop
 800e0d0:	e000e010 	.word	0xe000e010
 800e0d4:	e000e018 	.word	0xe000e018
 800e0d8:	20000000 	.word	0x20000000
 800e0dc:	10624dd3 	.word	0x10624dd3
 800e0e0:	e000e014 	.word	0xe000e014

0800e0e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e0e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e0f4 <vPortEnableVFP+0x10>
 800e0e8:	6801      	ldr	r1, [r0, #0]
 800e0ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e0ee:	6001      	str	r1, [r0, #0]
 800e0f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e0f2:	bf00      	nop
 800e0f4:	e000ed88 	.word	0xe000ed88

0800e0f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b085      	sub	sp, #20
 800e0fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e0fe:	f3ef 8305 	mrs	r3, IPSR
 800e102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2b0f      	cmp	r3, #15
 800e108:	d914      	bls.n	800e134 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e10a:	4a17      	ldr	r2, [pc, #92]	; (800e168 <vPortValidateInterruptPriority+0x70>)
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	4413      	add	r3, r2
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e114:	4b15      	ldr	r3, [pc, #84]	; (800e16c <vPortValidateInterruptPriority+0x74>)
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	7afa      	ldrb	r2, [r7, #11]
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d20a      	bcs.n	800e134 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e122:	f383 8811 	msr	BASEPRI, r3
 800e126:	f3bf 8f6f 	isb	sy
 800e12a:	f3bf 8f4f 	dsb	sy
 800e12e:	607b      	str	r3, [r7, #4]
}
 800e130:	bf00      	nop
 800e132:	e7fe      	b.n	800e132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e134:	4b0e      	ldr	r3, [pc, #56]	; (800e170 <vPortValidateInterruptPriority+0x78>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e13c:	4b0d      	ldr	r3, [pc, #52]	; (800e174 <vPortValidateInterruptPriority+0x7c>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	429a      	cmp	r2, r3
 800e142:	d90a      	bls.n	800e15a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e148:	f383 8811 	msr	BASEPRI, r3
 800e14c:	f3bf 8f6f 	isb	sy
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	603b      	str	r3, [r7, #0]
}
 800e156:	bf00      	nop
 800e158:	e7fe      	b.n	800e158 <vPortValidateInterruptPriority+0x60>
	}
 800e15a:	bf00      	nop
 800e15c:	3714      	adds	r7, #20
 800e15e:	46bd      	mov	sp, r7
 800e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e164:	4770      	bx	lr
 800e166:	bf00      	nop
 800e168:	e000e3f0 	.word	0xe000e3f0
 800e16c:	200027a8 	.word	0x200027a8
 800e170:	e000ed0c 	.word	0xe000ed0c
 800e174:	200027ac 	.word	0x200027ac

0800e178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b08a      	sub	sp, #40	; 0x28
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e180:	2300      	movs	r3, #0
 800e182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e184:	f7fe fbce 	bl	800c924 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e188:	4b5b      	ldr	r3, [pc, #364]	; (800e2f8 <pvPortMalloc+0x180>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d101      	bne.n	800e194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e190:	f000 f920 	bl	800e3d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e194:	4b59      	ldr	r3, [pc, #356]	; (800e2fc <pvPortMalloc+0x184>)
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	4013      	ands	r3, r2
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	f040 8093 	bne.w	800e2c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d01d      	beq.n	800e1e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e1a8:	2208      	movs	r2, #8
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	4413      	add	r3, r2
 800e1ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f003 0307 	and.w	r3, r3, #7
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d014      	beq.n	800e1e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f023 0307 	bic.w	r3, r3, #7
 800e1c0:	3308      	adds	r3, #8
 800e1c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f003 0307 	and.w	r3, r3, #7
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00a      	beq.n	800e1e4 <pvPortMalloc+0x6c>
	__asm volatile
 800e1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	617b      	str	r3, [r7, #20]
}
 800e1e0:	bf00      	nop
 800e1e2:	e7fe      	b.n	800e1e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d06e      	beq.n	800e2c8 <pvPortMalloc+0x150>
 800e1ea:	4b45      	ldr	r3, [pc, #276]	; (800e300 <pvPortMalloc+0x188>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d869      	bhi.n	800e2c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e1f4:	4b43      	ldr	r3, [pc, #268]	; (800e304 <pvPortMalloc+0x18c>)
 800e1f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e1f8:	4b42      	ldr	r3, [pc, #264]	; (800e304 <pvPortMalloc+0x18c>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1fe:	e004      	b.n	800e20a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e202:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	429a      	cmp	r2, r3
 800e212:	d903      	bls.n	800e21c <pvPortMalloc+0xa4>
 800e214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d1f1      	bne.n	800e200 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e21c:	4b36      	ldr	r3, [pc, #216]	; (800e2f8 <pvPortMalloc+0x180>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e222:	429a      	cmp	r2, r3
 800e224:	d050      	beq.n	800e2c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e226:	6a3b      	ldr	r3, [r7, #32]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2208      	movs	r2, #8
 800e22c:	4413      	add	r3, r2
 800e22e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e232:	681a      	ldr	r2, [r3, #0]
 800e234:	6a3b      	ldr	r3, [r7, #32]
 800e236:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23a:	685a      	ldr	r2, [r3, #4]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	1ad2      	subs	r2, r2, r3
 800e240:	2308      	movs	r3, #8
 800e242:	005b      	lsls	r3, r3, #1
 800e244:	429a      	cmp	r2, r3
 800e246:	d91f      	bls.n	800e288 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	4413      	add	r3, r2
 800e24e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e250:	69bb      	ldr	r3, [r7, #24]
 800e252:	f003 0307 	and.w	r3, r3, #7
 800e256:	2b00      	cmp	r3, #0
 800e258:	d00a      	beq.n	800e270 <pvPortMalloc+0xf8>
	__asm volatile
 800e25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e25e:	f383 8811 	msr	BASEPRI, r3
 800e262:	f3bf 8f6f 	isb	sy
 800e266:	f3bf 8f4f 	dsb	sy
 800e26a:	613b      	str	r3, [r7, #16]
}
 800e26c:	bf00      	nop
 800e26e:	e7fe      	b.n	800e26e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e272:	685a      	ldr	r2, [r3, #4]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	1ad2      	subs	r2, r2, r3
 800e278:	69bb      	ldr	r3, [r7, #24]
 800e27a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27e:	687a      	ldr	r2, [r7, #4]
 800e280:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e282:	69b8      	ldr	r0, [r7, #24]
 800e284:	f000 f908 	bl	800e498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e288:	4b1d      	ldr	r3, [pc, #116]	; (800e300 <pvPortMalloc+0x188>)
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28e:	685b      	ldr	r3, [r3, #4]
 800e290:	1ad3      	subs	r3, r2, r3
 800e292:	4a1b      	ldr	r2, [pc, #108]	; (800e300 <pvPortMalloc+0x188>)
 800e294:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e296:	4b1a      	ldr	r3, [pc, #104]	; (800e300 <pvPortMalloc+0x188>)
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	4b1b      	ldr	r3, [pc, #108]	; (800e308 <pvPortMalloc+0x190>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d203      	bcs.n	800e2aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e2a2:	4b17      	ldr	r3, [pc, #92]	; (800e300 <pvPortMalloc+0x188>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a18      	ldr	r2, [pc, #96]	; (800e308 <pvPortMalloc+0x190>)
 800e2a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ac:	685a      	ldr	r2, [r3, #4]
 800e2ae:	4b13      	ldr	r3, [pc, #76]	; (800e2fc <pvPortMalloc+0x184>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	431a      	orrs	r2, r3
 800e2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e2be:	4b13      	ldr	r3, [pc, #76]	; (800e30c <pvPortMalloc+0x194>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	4a11      	ldr	r2, [pc, #68]	; (800e30c <pvPortMalloc+0x194>)
 800e2c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e2c8:	f7fe fb3a 	bl	800c940 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	f003 0307 	and.w	r3, r3, #7
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00a      	beq.n	800e2ec <pvPortMalloc+0x174>
	__asm volatile
 800e2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2da:	f383 8811 	msr	BASEPRI, r3
 800e2de:	f3bf 8f6f 	isb	sy
 800e2e2:	f3bf 8f4f 	dsb	sy
 800e2e6:	60fb      	str	r3, [r7, #12]
}
 800e2e8:	bf00      	nop
 800e2ea:	e7fe      	b.n	800e2ea <pvPortMalloc+0x172>
	return pvReturn;
 800e2ec:	69fb      	ldr	r3, [r7, #28]
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3728      	adds	r7, #40	; 0x28
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	200063b8 	.word	0x200063b8
 800e2fc:	200063cc 	.word	0x200063cc
 800e300:	200063bc 	.word	0x200063bc
 800e304:	200063b0 	.word	0x200063b0
 800e308:	200063c0 	.word	0x200063c0
 800e30c:	200063c4 	.word	0x200063c4

0800e310 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b086      	sub	sp, #24
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d04d      	beq.n	800e3be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e322:	2308      	movs	r3, #8
 800e324:	425b      	negs	r3, r3
 800e326:	697a      	ldr	r2, [r7, #20]
 800e328:	4413      	add	r3, r2
 800e32a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	685a      	ldr	r2, [r3, #4]
 800e334:	4b24      	ldr	r3, [pc, #144]	; (800e3c8 <vPortFree+0xb8>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4013      	ands	r3, r2
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d10a      	bne.n	800e354 <vPortFree+0x44>
	__asm volatile
 800e33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e342:	f383 8811 	msr	BASEPRI, r3
 800e346:	f3bf 8f6f 	isb	sy
 800e34a:	f3bf 8f4f 	dsb	sy
 800e34e:	60fb      	str	r3, [r7, #12]
}
 800e350:	bf00      	nop
 800e352:	e7fe      	b.n	800e352 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d00a      	beq.n	800e372 <vPortFree+0x62>
	__asm volatile
 800e35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e360:	f383 8811 	msr	BASEPRI, r3
 800e364:	f3bf 8f6f 	isb	sy
 800e368:	f3bf 8f4f 	dsb	sy
 800e36c:	60bb      	str	r3, [r7, #8]
}
 800e36e:	bf00      	nop
 800e370:	e7fe      	b.n	800e370 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	685a      	ldr	r2, [r3, #4]
 800e376:	4b14      	ldr	r3, [pc, #80]	; (800e3c8 <vPortFree+0xb8>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4013      	ands	r3, r2
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d01e      	beq.n	800e3be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d11a      	bne.n	800e3be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	685a      	ldr	r2, [r3, #4]
 800e38c:	4b0e      	ldr	r3, [pc, #56]	; (800e3c8 <vPortFree+0xb8>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	43db      	mvns	r3, r3
 800e392:	401a      	ands	r2, r3
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e398:	f7fe fac4 	bl	800c924 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	685a      	ldr	r2, [r3, #4]
 800e3a0:	4b0a      	ldr	r3, [pc, #40]	; (800e3cc <vPortFree+0xbc>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4413      	add	r3, r2
 800e3a6:	4a09      	ldr	r2, [pc, #36]	; (800e3cc <vPortFree+0xbc>)
 800e3a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e3aa:	6938      	ldr	r0, [r7, #16]
 800e3ac:	f000 f874 	bl	800e498 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e3b0:	4b07      	ldr	r3, [pc, #28]	; (800e3d0 <vPortFree+0xc0>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	4a06      	ldr	r2, [pc, #24]	; (800e3d0 <vPortFree+0xc0>)
 800e3b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e3ba:	f7fe fac1 	bl	800c940 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e3be:	bf00      	nop
 800e3c0:	3718      	adds	r7, #24
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	200063cc 	.word	0x200063cc
 800e3cc:	200063bc 	.word	0x200063bc
 800e3d0:	200063c8 	.word	0x200063c8

0800e3d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b085      	sub	sp, #20
 800e3d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e3da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e3de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e3e0:	4b27      	ldr	r3, [pc, #156]	; (800e480 <prvHeapInit+0xac>)
 800e3e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f003 0307 	and.w	r3, r3, #7
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d00c      	beq.n	800e408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	3307      	adds	r3, #7
 800e3f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f023 0307 	bic.w	r3, r3, #7
 800e3fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e3fc:	68ba      	ldr	r2, [r7, #8]
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	1ad3      	subs	r3, r2, r3
 800e402:	4a1f      	ldr	r2, [pc, #124]	; (800e480 <prvHeapInit+0xac>)
 800e404:	4413      	add	r3, r2
 800e406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e40c:	4a1d      	ldr	r2, [pc, #116]	; (800e484 <prvHeapInit+0xb0>)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e412:	4b1c      	ldr	r3, [pc, #112]	; (800e484 <prvHeapInit+0xb0>)
 800e414:	2200      	movs	r2, #0
 800e416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	68ba      	ldr	r2, [r7, #8]
 800e41c:	4413      	add	r3, r2
 800e41e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e420:	2208      	movs	r2, #8
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	1a9b      	subs	r3, r3, r2
 800e426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	f023 0307 	bic.w	r3, r3, #7
 800e42e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	4a15      	ldr	r2, [pc, #84]	; (800e488 <prvHeapInit+0xb4>)
 800e434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e436:	4b14      	ldr	r3, [pc, #80]	; (800e488 <prvHeapInit+0xb4>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	2200      	movs	r2, #0
 800e43c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e43e:	4b12      	ldr	r3, [pc, #72]	; (800e488 <prvHeapInit+0xb4>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2200      	movs	r2, #0
 800e444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	68fa      	ldr	r2, [r7, #12]
 800e44e:	1ad2      	subs	r2, r2, r3
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e454:	4b0c      	ldr	r3, [pc, #48]	; (800e488 <prvHeapInit+0xb4>)
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	4a0a      	ldr	r2, [pc, #40]	; (800e48c <prvHeapInit+0xb8>)
 800e462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	4a09      	ldr	r2, [pc, #36]	; (800e490 <prvHeapInit+0xbc>)
 800e46a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e46c:	4b09      	ldr	r3, [pc, #36]	; (800e494 <prvHeapInit+0xc0>)
 800e46e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e472:	601a      	str	r2, [r3, #0]
}
 800e474:	bf00      	nop
 800e476:	3714      	adds	r7, #20
 800e478:	46bd      	mov	sp, r7
 800e47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47e:	4770      	bx	lr
 800e480:	200027b0 	.word	0x200027b0
 800e484:	200063b0 	.word	0x200063b0
 800e488:	200063b8 	.word	0x200063b8
 800e48c:	200063c0 	.word	0x200063c0
 800e490:	200063bc 	.word	0x200063bc
 800e494:	200063cc 	.word	0x200063cc

0800e498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e498:	b480      	push	{r7}
 800e49a:	b085      	sub	sp, #20
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e4a0:	4b28      	ldr	r3, [pc, #160]	; (800e544 <prvInsertBlockIntoFreeList+0xac>)
 800e4a2:	60fb      	str	r3, [r7, #12]
 800e4a4:	e002      	b.n	800e4ac <prvInsertBlockIntoFreeList+0x14>
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	60fb      	str	r3, [r7, #12]
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d8f7      	bhi.n	800e4a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	68ba      	ldr	r2, [r7, #8]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d108      	bne.n	800e4da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	685a      	ldr	r2, [r3, #4]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	441a      	add	r2, r3
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	685b      	ldr	r3, [r3, #4]
 800e4e2:	68ba      	ldr	r2, [r7, #8]
 800e4e4:	441a      	add	r2, r3
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d118      	bne.n	800e520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	4b15      	ldr	r3, [pc, #84]	; (800e548 <prvInsertBlockIntoFreeList+0xb0>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d00d      	beq.n	800e516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	685a      	ldr	r2, [r3, #4]
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	441a      	add	r2, r3
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	681a      	ldr	r2, [r3, #0]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	601a      	str	r2, [r3, #0]
 800e514:	e008      	b.n	800e528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e516:	4b0c      	ldr	r3, [pc, #48]	; (800e548 <prvInsertBlockIntoFreeList+0xb0>)
 800e518:	681a      	ldr	r2, [r3, #0]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	601a      	str	r2, [r3, #0]
 800e51e:	e003      	b.n	800e528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681a      	ldr	r2, [r3, #0]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e528:	68fa      	ldr	r2, [r7, #12]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d002      	beq.n	800e536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e536:	bf00      	nop
 800e538:	3714      	adds	r7, #20
 800e53a:	46bd      	mov	sp, r7
 800e53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e540:	4770      	bx	lr
 800e542:	bf00      	nop
 800e544:	200063b0 	.word	0x200063b0
 800e548:	200063b8 	.word	0x200063b8

0800e54c <findslot>:
 800e54c:	4b0a      	ldr	r3, [pc, #40]	; (800e578 <findslot+0x2c>)
 800e54e:	b510      	push	{r4, lr}
 800e550:	4604      	mov	r4, r0
 800e552:	6818      	ldr	r0, [r3, #0]
 800e554:	b118      	cbz	r0, 800e55e <findslot+0x12>
 800e556:	6983      	ldr	r3, [r0, #24]
 800e558:	b90b      	cbnz	r3, 800e55e <findslot+0x12>
 800e55a:	f000 faf9 	bl	800eb50 <__sinit>
 800e55e:	2c13      	cmp	r4, #19
 800e560:	d807      	bhi.n	800e572 <findslot+0x26>
 800e562:	4806      	ldr	r0, [pc, #24]	; (800e57c <findslot+0x30>)
 800e564:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800e568:	3201      	adds	r2, #1
 800e56a:	d002      	beq.n	800e572 <findslot+0x26>
 800e56c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800e570:	bd10      	pop	{r4, pc}
 800e572:	2000      	movs	r0, #0
 800e574:	e7fc      	b.n	800e570 <findslot+0x24>
 800e576:	bf00      	nop
 800e578:	20000080 	.word	0x20000080
 800e57c:	200063dc 	.word	0x200063dc

0800e580 <error>:
 800e580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e582:	4604      	mov	r4, r0
 800e584:	f000 fa86 	bl	800ea94 <__errno>
 800e588:	2613      	movs	r6, #19
 800e58a:	4605      	mov	r5, r0
 800e58c:	2700      	movs	r7, #0
 800e58e:	4630      	mov	r0, r6
 800e590:	4639      	mov	r1, r7
 800e592:	beab      	bkpt	0x00ab
 800e594:	4606      	mov	r6, r0
 800e596:	602e      	str	r6, [r5, #0]
 800e598:	4620      	mov	r0, r4
 800e59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e59c <checkerror>:
 800e59c:	1c43      	adds	r3, r0, #1
 800e59e:	d101      	bne.n	800e5a4 <checkerror+0x8>
 800e5a0:	f7ff bfee 	b.w	800e580 <error>
 800e5a4:	4770      	bx	lr

0800e5a6 <_swiread>:
 800e5a6:	b530      	push	{r4, r5, lr}
 800e5a8:	b085      	sub	sp, #20
 800e5aa:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800e5ae:	9203      	str	r2, [sp, #12]
 800e5b0:	2406      	movs	r4, #6
 800e5b2:	ad01      	add	r5, sp, #4
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	4629      	mov	r1, r5
 800e5b8:	beab      	bkpt	0x00ab
 800e5ba:	4604      	mov	r4, r0
 800e5bc:	4620      	mov	r0, r4
 800e5be:	f7ff ffed 	bl	800e59c <checkerror>
 800e5c2:	b005      	add	sp, #20
 800e5c4:	bd30      	pop	{r4, r5, pc}

0800e5c6 <_read>:
 800e5c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5c8:	4615      	mov	r5, r2
 800e5ca:	9101      	str	r1, [sp, #4]
 800e5cc:	f7ff ffbe 	bl	800e54c <findslot>
 800e5d0:	9901      	ldr	r1, [sp, #4]
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	b938      	cbnz	r0, 800e5e6 <_read+0x20>
 800e5d6:	f000 fa5d 	bl	800ea94 <__errno>
 800e5da:	2309      	movs	r3, #9
 800e5dc:	6003      	str	r3, [r0, #0]
 800e5de:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e2:	b003      	add	sp, #12
 800e5e4:	bd30      	pop	{r4, r5, pc}
 800e5e6:	6800      	ldr	r0, [r0, #0]
 800e5e8:	462a      	mov	r2, r5
 800e5ea:	f7ff ffdc 	bl	800e5a6 <_swiread>
 800e5ee:	1c43      	adds	r3, r0, #1
 800e5f0:	d0f7      	beq.n	800e5e2 <_read+0x1c>
 800e5f2:	6863      	ldr	r3, [r4, #4]
 800e5f4:	1a2a      	subs	r2, r5, r0
 800e5f6:	4413      	add	r3, r2
 800e5f8:	6063      	str	r3, [r4, #4]
 800e5fa:	4610      	mov	r0, r2
 800e5fc:	e7f1      	b.n	800e5e2 <_read+0x1c>

0800e5fe <_swilseek>:
 800e5fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e600:	460c      	mov	r4, r1
 800e602:	4616      	mov	r6, r2
 800e604:	f7ff ffa2 	bl	800e54c <findslot>
 800e608:	4605      	mov	r5, r0
 800e60a:	b940      	cbnz	r0, 800e61e <_swilseek+0x20>
 800e60c:	f000 fa42 	bl	800ea94 <__errno>
 800e610:	2309      	movs	r3, #9
 800e612:	6003      	str	r3, [r0, #0]
 800e614:	f04f 34ff 	mov.w	r4, #4294967295
 800e618:	4620      	mov	r0, r4
 800e61a:	b003      	add	sp, #12
 800e61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e61e:	2e02      	cmp	r6, #2
 800e620:	d903      	bls.n	800e62a <_swilseek+0x2c>
 800e622:	f000 fa37 	bl	800ea94 <__errno>
 800e626:	2316      	movs	r3, #22
 800e628:	e7f3      	b.n	800e612 <_swilseek+0x14>
 800e62a:	2e01      	cmp	r6, #1
 800e62c:	d112      	bne.n	800e654 <_swilseek+0x56>
 800e62e:	6843      	ldr	r3, [r0, #4]
 800e630:	18e4      	adds	r4, r4, r3
 800e632:	d4f6      	bmi.n	800e622 <_swilseek+0x24>
 800e634:	682b      	ldr	r3, [r5, #0]
 800e636:	260a      	movs	r6, #10
 800e638:	e9cd 3400 	strd	r3, r4, [sp]
 800e63c:	466f      	mov	r7, sp
 800e63e:	4630      	mov	r0, r6
 800e640:	4639      	mov	r1, r7
 800e642:	beab      	bkpt	0x00ab
 800e644:	4606      	mov	r6, r0
 800e646:	4630      	mov	r0, r6
 800e648:	f7ff ffa8 	bl	800e59c <checkerror>
 800e64c:	2800      	cmp	r0, #0
 800e64e:	dbe1      	blt.n	800e614 <_swilseek+0x16>
 800e650:	606c      	str	r4, [r5, #4]
 800e652:	e7e1      	b.n	800e618 <_swilseek+0x1a>
 800e654:	2e02      	cmp	r6, #2
 800e656:	d1ed      	bne.n	800e634 <_swilseek+0x36>
 800e658:	6803      	ldr	r3, [r0, #0]
 800e65a:	9300      	str	r3, [sp, #0]
 800e65c:	260c      	movs	r6, #12
 800e65e:	466f      	mov	r7, sp
 800e660:	4630      	mov	r0, r6
 800e662:	4639      	mov	r1, r7
 800e664:	beab      	bkpt	0x00ab
 800e666:	4606      	mov	r6, r0
 800e668:	4630      	mov	r0, r6
 800e66a:	f7ff ff97 	bl	800e59c <checkerror>
 800e66e:	1c43      	adds	r3, r0, #1
 800e670:	d0d0      	beq.n	800e614 <_swilseek+0x16>
 800e672:	4404      	add	r4, r0
 800e674:	e7de      	b.n	800e634 <_swilseek+0x36>

0800e676 <_lseek>:
 800e676:	f7ff bfc2 	b.w	800e5fe <_swilseek>

0800e67a <_swiwrite>:
 800e67a:	b530      	push	{r4, r5, lr}
 800e67c:	b085      	sub	sp, #20
 800e67e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800e682:	9203      	str	r2, [sp, #12]
 800e684:	2405      	movs	r4, #5
 800e686:	ad01      	add	r5, sp, #4
 800e688:	4620      	mov	r0, r4
 800e68a:	4629      	mov	r1, r5
 800e68c:	beab      	bkpt	0x00ab
 800e68e:	4604      	mov	r4, r0
 800e690:	4620      	mov	r0, r4
 800e692:	f7ff ff83 	bl	800e59c <checkerror>
 800e696:	b005      	add	sp, #20
 800e698:	bd30      	pop	{r4, r5, pc}

0800e69a <_write>:
 800e69a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e69c:	4615      	mov	r5, r2
 800e69e:	9101      	str	r1, [sp, #4]
 800e6a0:	f7ff ff54 	bl	800e54c <findslot>
 800e6a4:	9901      	ldr	r1, [sp, #4]
 800e6a6:	4604      	mov	r4, r0
 800e6a8:	b930      	cbnz	r0, 800e6b8 <_write+0x1e>
 800e6aa:	f000 f9f3 	bl	800ea94 <__errno>
 800e6ae:	2309      	movs	r3, #9
 800e6b0:	6003      	str	r3, [r0, #0]
 800e6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6b6:	e012      	b.n	800e6de <_write+0x44>
 800e6b8:	6800      	ldr	r0, [r0, #0]
 800e6ba:	462a      	mov	r2, r5
 800e6bc:	f7ff ffdd 	bl	800e67a <_swiwrite>
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	dbf6      	blt.n	800e6b2 <_write+0x18>
 800e6c4:	6862      	ldr	r2, [r4, #4]
 800e6c6:	1a2b      	subs	r3, r5, r0
 800e6c8:	441a      	add	r2, r3
 800e6ca:	42a8      	cmp	r0, r5
 800e6cc:	6062      	str	r2, [r4, #4]
 800e6ce:	d105      	bne.n	800e6dc <_write+0x42>
 800e6d0:	2000      	movs	r0, #0
 800e6d2:	b003      	add	sp, #12
 800e6d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6d8:	f7ff bf52 	b.w	800e580 <error>
 800e6dc:	4618      	mov	r0, r3
 800e6de:	b003      	add	sp, #12
 800e6e0:	bd30      	pop	{r4, r5, pc}

0800e6e2 <_swiclose>:
 800e6e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6e4:	2402      	movs	r4, #2
 800e6e6:	9001      	str	r0, [sp, #4]
 800e6e8:	ad01      	add	r5, sp, #4
 800e6ea:	4620      	mov	r0, r4
 800e6ec:	4629      	mov	r1, r5
 800e6ee:	beab      	bkpt	0x00ab
 800e6f0:	4604      	mov	r4, r0
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	f7ff ff52 	bl	800e59c <checkerror>
 800e6f8:	b003      	add	sp, #12
 800e6fa:	bd30      	pop	{r4, r5, pc}

0800e6fc <_close>:
 800e6fc:	b538      	push	{r3, r4, r5, lr}
 800e6fe:	4605      	mov	r5, r0
 800e700:	f7ff ff24 	bl	800e54c <findslot>
 800e704:	4604      	mov	r4, r0
 800e706:	b930      	cbnz	r0, 800e716 <_close+0x1a>
 800e708:	f000 f9c4 	bl	800ea94 <__errno>
 800e70c:	2309      	movs	r3, #9
 800e70e:	6003      	str	r3, [r0, #0]
 800e710:	f04f 30ff 	mov.w	r0, #4294967295
 800e714:	bd38      	pop	{r3, r4, r5, pc}
 800e716:	3d01      	subs	r5, #1
 800e718:	2d01      	cmp	r5, #1
 800e71a:	d809      	bhi.n	800e730 <_close+0x34>
 800e71c:	4b09      	ldr	r3, [pc, #36]	; (800e744 <_close+0x48>)
 800e71e:	689a      	ldr	r2, [r3, #8]
 800e720:	691b      	ldr	r3, [r3, #16]
 800e722:	429a      	cmp	r2, r3
 800e724:	d104      	bne.n	800e730 <_close+0x34>
 800e726:	f04f 33ff 	mov.w	r3, #4294967295
 800e72a:	6003      	str	r3, [r0, #0]
 800e72c:	2000      	movs	r0, #0
 800e72e:	e7f1      	b.n	800e714 <_close+0x18>
 800e730:	6820      	ldr	r0, [r4, #0]
 800e732:	f7ff ffd6 	bl	800e6e2 <_swiclose>
 800e736:	2800      	cmp	r0, #0
 800e738:	d1ec      	bne.n	800e714 <_close+0x18>
 800e73a:	f04f 33ff 	mov.w	r3, #4294967295
 800e73e:	6023      	str	r3, [r4, #0]
 800e740:	e7e8      	b.n	800e714 <_close+0x18>
 800e742:	bf00      	nop
 800e744:	200063dc 	.word	0x200063dc

0800e748 <_getpid>:
 800e748:	2001      	movs	r0, #1
 800e74a:	4770      	bx	lr

0800e74c <_swistat>:
 800e74c:	b570      	push	{r4, r5, r6, lr}
 800e74e:	460c      	mov	r4, r1
 800e750:	f7ff fefc 	bl	800e54c <findslot>
 800e754:	4605      	mov	r5, r0
 800e756:	b930      	cbnz	r0, 800e766 <_swistat+0x1a>
 800e758:	f000 f99c 	bl	800ea94 <__errno>
 800e75c:	2309      	movs	r3, #9
 800e75e:	6003      	str	r3, [r0, #0]
 800e760:	f04f 30ff 	mov.w	r0, #4294967295
 800e764:	bd70      	pop	{r4, r5, r6, pc}
 800e766:	6863      	ldr	r3, [r4, #4]
 800e768:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e76c:	6063      	str	r3, [r4, #4]
 800e76e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e772:	64a3      	str	r3, [r4, #72]	; 0x48
 800e774:	260c      	movs	r6, #12
 800e776:	4630      	mov	r0, r6
 800e778:	4629      	mov	r1, r5
 800e77a:	beab      	bkpt	0x00ab
 800e77c:	4605      	mov	r5, r0
 800e77e:	4628      	mov	r0, r5
 800e780:	f7ff ff0c 	bl	800e59c <checkerror>
 800e784:	1c43      	adds	r3, r0, #1
 800e786:	bf1c      	itt	ne
 800e788:	6120      	strne	r0, [r4, #16]
 800e78a:	2000      	movne	r0, #0
 800e78c:	e7ea      	b.n	800e764 <_swistat+0x18>

0800e78e <_fstat>:
 800e78e:	460b      	mov	r3, r1
 800e790:	b510      	push	{r4, lr}
 800e792:	2100      	movs	r1, #0
 800e794:	4604      	mov	r4, r0
 800e796:	2258      	movs	r2, #88	; 0x58
 800e798:	4618      	mov	r0, r3
 800e79a:	f000 faac 	bl	800ecf6 <memset>
 800e79e:	4601      	mov	r1, r0
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7a6:	f7ff bfd1 	b.w	800e74c <_swistat>

0800e7aa <_stat>:
 800e7aa:	b538      	push	{r3, r4, r5, lr}
 800e7ac:	460d      	mov	r5, r1
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	2258      	movs	r2, #88	; 0x58
 800e7b2:	2100      	movs	r1, #0
 800e7b4:	4628      	mov	r0, r5
 800e7b6:	f000 fa9e 	bl	800ecf6 <memset>
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	2100      	movs	r1, #0
 800e7be:	f000 f811 	bl	800e7e4 <_swiopen>
 800e7c2:	1c43      	adds	r3, r0, #1
 800e7c4:	4604      	mov	r4, r0
 800e7c6:	d00b      	beq.n	800e7e0 <_stat+0x36>
 800e7c8:	686b      	ldr	r3, [r5, #4]
 800e7ca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800e7ce:	606b      	str	r3, [r5, #4]
 800e7d0:	4629      	mov	r1, r5
 800e7d2:	f7ff ffbb 	bl	800e74c <_swistat>
 800e7d6:	4605      	mov	r5, r0
 800e7d8:	4620      	mov	r0, r4
 800e7da:	f7ff ff8f 	bl	800e6fc <_close>
 800e7de:	462c      	mov	r4, r5
 800e7e0:	4620      	mov	r0, r4
 800e7e2:	bd38      	pop	{r3, r4, r5, pc}

0800e7e4 <_swiopen>:
 800e7e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7e8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800e894 <_swiopen+0xb0>
 800e7ec:	b097      	sub	sp, #92	; 0x5c
 800e7ee:	4607      	mov	r7, r0
 800e7f0:	460e      	mov	r6, r1
 800e7f2:	2500      	movs	r5, #0
 800e7f4:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 800e7f8:	1c61      	adds	r1, r4, #1
 800e7fa:	d037      	beq.n	800e86c <_swiopen+0x88>
 800e7fc:	3501      	adds	r5, #1
 800e7fe:	2d14      	cmp	r5, #20
 800e800:	d1f8      	bne.n	800e7f4 <_swiopen+0x10>
 800e802:	f000 f947 	bl	800ea94 <__errno>
 800e806:	2318      	movs	r3, #24
 800e808:	6003      	str	r3, [r0, #0]
 800e80a:	f04f 34ff 	mov.w	r4, #4294967295
 800e80e:	e03d      	b.n	800e88c <_swiopen+0xa8>
 800e810:	f3c6 4400 	ubfx	r4, r6, #16, #1
 800e814:	f240 6301 	movw	r3, #1537	; 0x601
 800e818:	07b2      	lsls	r2, r6, #30
 800e81a:	bf48      	it	mi
 800e81c:	f044 0402 	orrmi.w	r4, r4, #2
 800e820:	421e      	tst	r6, r3
 800e822:	bf18      	it	ne
 800e824:	f044 0404 	orrne.w	r4, r4, #4
 800e828:	0733      	lsls	r3, r6, #28
 800e82a:	bf48      	it	mi
 800e82c:	f024 0404 	bicmi.w	r4, r4, #4
 800e830:	4638      	mov	r0, r7
 800e832:	bf48      	it	mi
 800e834:	f044 0408 	orrmi.w	r4, r4, #8
 800e838:	9700      	str	r7, [sp, #0]
 800e83a:	f7f1 fcc9 	bl	80001d0 <strlen>
 800e83e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800e842:	2401      	movs	r4, #1
 800e844:	4620      	mov	r0, r4
 800e846:	4649      	mov	r1, r9
 800e848:	beab      	bkpt	0x00ab
 800e84a:	4604      	mov	r4, r0
 800e84c:	2c00      	cmp	r4, #0
 800e84e:	db08      	blt.n	800e862 <_swiopen+0x7e>
 800e850:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800e854:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800e858:	2300      	movs	r3, #0
 800e85a:	f8c8 3004 	str.w	r3, [r8, #4]
 800e85e:	462c      	mov	r4, r5
 800e860:	e014      	b.n	800e88c <_swiopen+0xa8>
 800e862:	4620      	mov	r0, r4
 800e864:	f7ff fe8c 	bl	800e580 <error>
 800e868:	4604      	mov	r4, r0
 800e86a:	e00f      	b.n	800e88c <_swiopen+0xa8>
 800e86c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800e870:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800e874:	46e9      	mov	r9, sp
 800e876:	d1cb      	bne.n	800e810 <_swiopen+0x2c>
 800e878:	4649      	mov	r1, r9
 800e87a:	4638      	mov	r0, r7
 800e87c:	f7ff ff95 	bl	800e7aa <_stat>
 800e880:	3001      	adds	r0, #1
 800e882:	d0c5      	beq.n	800e810 <_swiopen+0x2c>
 800e884:	f000 f906 	bl	800ea94 <__errno>
 800e888:	2311      	movs	r3, #17
 800e88a:	6003      	str	r3, [r0, #0]
 800e88c:	4620      	mov	r0, r4
 800e88e:	b017      	add	sp, #92	; 0x5c
 800e890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e894:	200063dc 	.word	0x200063dc

0800e898 <_get_semihosting_exts>:
 800e898:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e89c:	4606      	mov	r6, r0
 800e89e:	460f      	mov	r7, r1
 800e8a0:	482a      	ldr	r0, [pc, #168]	; (800e94c <_get_semihosting_exts+0xb4>)
 800e8a2:	2100      	movs	r1, #0
 800e8a4:	4615      	mov	r5, r2
 800e8a6:	f7ff ff9d 	bl	800e7e4 <_swiopen>
 800e8aa:	462a      	mov	r2, r5
 800e8ac:	4604      	mov	r4, r0
 800e8ae:	2100      	movs	r1, #0
 800e8b0:	4630      	mov	r0, r6
 800e8b2:	f000 fa20 	bl	800ecf6 <memset>
 800e8b6:	1c63      	adds	r3, r4, #1
 800e8b8:	d016      	beq.n	800e8e8 <_get_semihosting_exts+0x50>
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	f7ff fe46 	bl	800e54c <findslot>
 800e8c0:	f04f 090c 	mov.w	r9, #12
 800e8c4:	4680      	mov	r8, r0
 800e8c6:	4648      	mov	r0, r9
 800e8c8:	4641      	mov	r1, r8
 800e8ca:	beab      	bkpt	0x00ab
 800e8cc:	4680      	mov	r8, r0
 800e8ce:	4640      	mov	r0, r8
 800e8d0:	f7ff fe64 	bl	800e59c <checkerror>
 800e8d4:	2803      	cmp	r0, #3
 800e8d6:	dd02      	ble.n	800e8de <_get_semihosting_exts+0x46>
 800e8d8:	1ec3      	subs	r3, r0, #3
 800e8da:	42ab      	cmp	r3, r5
 800e8dc:	dc08      	bgt.n	800e8f0 <_get_semihosting_exts+0x58>
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f7ff ff0c 	bl	800e6fc <_close>
 800e8e4:	f04f 34ff 	mov.w	r4, #4294967295
 800e8e8:	4620      	mov	r0, r4
 800e8ea:	b003      	add	sp, #12
 800e8ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8f0:	2204      	movs	r2, #4
 800e8f2:	eb0d 0102 	add.w	r1, sp, r2
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	f7ff fe65 	bl	800e5c6 <_read>
 800e8fc:	2803      	cmp	r0, #3
 800e8fe:	ddee      	ble.n	800e8de <_get_semihosting_exts+0x46>
 800e900:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e904:	2b53      	cmp	r3, #83	; 0x53
 800e906:	d1ea      	bne.n	800e8de <_get_semihosting_exts+0x46>
 800e908:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e90c:	2b48      	cmp	r3, #72	; 0x48
 800e90e:	d1e6      	bne.n	800e8de <_get_semihosting_exts+0x46>
 800e910:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e914:	2b46      	cmp	r3, #70	; 0x46
 800e916:	d1e2      	bne.n	800e8de <_get_semihosting_exts+0x46>
 800e918:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e91c:	2b42      	cmp	r3, #66	; 0x42
 800e91e:	d1de      	bne.n	800e8de <_get_semihosting_exts+0x46>
 800e920:	2201      	movs	r2, #1
 800e922:	4639      	mov	r1, r7
 800e924:	4620      	mov	r0, r4
 800e926:	f7ff fe6a 	bl	800e5fe <_swilseek>
 800e92a:	2800      	cmp	r0, #0
 800e92c:	dbd7      	blt.n	800e8de <_get_semihosting_exts+0x46>
 800e92e:	462a      	mov	r2, r5
 800e930:	4631      	mov	r1, r6
 800e932:	4620      	mov	r0, r4
 800e934:	f7ff fe47 	bl	800e5c6 <_read>
 800e938:	4605      	mov	r5, r0
 800e93a:	4620      	mov	r0, r4
 800e93c:	f7ff fede 	bl	800e6fc <_close>
 800e940:	4628      	mov	r0, r5
 800e942:	f7ff fe2b 	bl	800e59c <checkerror>
 800e946:	4604      	mov	r4, r0
 800e948:	e7ce      	b.n	800e8e8 <_get_semihosting_exts+0x50>
 800e94a:	bf00      	nop
 800e94c:	0801581a 	.word	0x0801581a

0800e950 <initialise_semihosting_exts>:
 800e950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e952:	4d0a      	ldr	r5, [pc, #40]	; (800e97c <initialise_semihosting_exts+0x2c>)
 800e954:	4c0a      	ldr	r4, [pc, #40]	; (800e980 <initialise_semihosting_exts+0x30>)
 800e956:	2100      	movs	r1, #0
 800e958:	2201      	movs	r2, #1
 800e95a:	a801      	add	r0, sp, #4
 800e95c:	6029      	str	r1, [r5, #0]
 800e95e:	6022      	str	r2, [r4, #0]
 800e960:	f7ff ff9a 	bl	800e898 <_get_semihosting_exts>
 800e964:	2800      	cmp	r0, #0
 800e966:	dd07      	ble.n	800e978 <initialise_semihosting_exts+0x28>
 800e968:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e96c:	f003 0201 	and.w	r2, r3, #1
 800e970:	f003 0302 	and.w	r3, r3, #2
 800e974:	602a      	str	r2, [r5, #0]
 800e976:	6023      	str	r3, [r4, #0]
 800e978:	b003      	add	sp, #12
 800e97a:	bd30      	pop	{r4, r5, pc}
 800e97c:	20000078 	.word	0x20000078
 800e980:	2000007c 	.word	0x2000007c

0800e984 <_has_ext_stdout_stderr>:
 800e984:	b510      	push	{r4, lr}
 800e986:	4c04      	ldr	r4, [pc, #16]	; (800e998 <_has_ext_stdout_stderr+0x14>)
 800e988:	6823      	ldr	r3, [r4, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	da01      	bge.n	800e992 <_has_ext_stdout_stderr+0xe>
 800e98e:	f7ff ffdf 	bl	800e950 <initialise_semihosting_exts>
 800e992:	6820      	ldr	r0, [r4, #0]
 800e994:	bd10      	pop	{r4, pc}
 800e996:	bf00      	nop
 800e998:	2000007c 	.word	0x2000007c

0800e99c <initialise_monitor_handles>:
 800e99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9a0:	b085      	sub	sp, #20
 800e9a2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800ea54 <initialise_monitor_handles+0xb8>
 800e9a6:	f8cd 9004 	str.w	r9, [sp, #4]
 800e9aa:	2303      	movs	r3, #3
 800e9ac:	2400      	movs	r4, #0
 800e9ae:	9303      	str	r3, [sp, #12]
 800e9b0:	af01      	add	r7, sp, #4
 800e9b2:	9402      	str	r4, [sp, #8]
 800e9b4:	2501      	movs	r5, #1
 800e9b6:	4628      	mov	r0, r5
 800e9b8:	4639      	mov	r1, r7
 800e9ba:	beab      	bkpt	0x00ab
 800e9bc:	4605      	mov	r5, r0
 800e9be:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800ea58 <initialise_monitor_handles+0xbc>
 800e9c2:	4623      	mov	r3, r4
 800e9c4:	4c20      	ldr	r4, [pc, #128]	; (800ea48 <initialise_monitor_handles+0xac>)
 800e9c6:	f8c8 5000 	str.w	r5, [r8]
 800e9ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e9ce:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	2b14      	cmp	r3, #20
 800e9d6:	d1fa      	bne.n	800e9ce <initialise_monitor_handles+0x32>
 800e9d8:	f7ff ffd4 	bl	800e984 <_has_ext_stdout_stderr>
 800e9dc:	4d1b      	ldr	r5, [pc, #108]	; (800ea4c <initialise_monitor_handles+0xb0>)
 800e9de:	b1d0      	cbz	r0, 800ea16 <initialise_monitor_handles+0x7a>
 800e9e0:	f04f 0a03 	mov.w	sl, #3
 800e9e4:	2304      	movs	r3, #4
 800e9e6:	f8cd 9004 	str.w	r9, [sp, #4]
 800e9ea:	2601      	movs	r6, #1
 800e9ec:	f8cd a00c 	str.w	sl, [sp, #12]
 800e9f0:	9302      	str	r3, [sp, #8]
 800e9f2:	4630      	mov	r0, r6
 800e9f4:	4639      	mov	r1, r7
 800e9f6:	beab      	bkpt	0x00ab
 800e9f8:	4683      	mov	fp, r0
 800e9fa:	4b15      	ldr	r3, [pc, #84]	; (800ea50 <initialise_monitor_handles+0xb4>)
 800e9fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800ea00:	f8c3 b000 	str.w	fp, [r3]
 800ea04:	2308      	movs	r3, #8
 800ea06:	f8cd a00c 	str.w	sl, [sp, #12]
 800ea0a:	9302      	str	r3, [sp, #8]
 800ea0c:	4630      	mov	r0, r6
 800ea0e:	4639      	mov	r1, r7
 800ea10:	beab      	bkpt	0x00ab
 800ea12:	4606      	mov	r6, r0
 800ea14:	602e      	str	r6, [r5, #0]
 800ea16:	682b      	ldr	r3, [r5, #0]
 800ea18:	3301      	adds	r3, #1
 800ea1a:	bf02      	ittt	eq
 800ea1c:	4b0c      	ldreq	r3, [pc, #48]	; (800ea50 <initialise_monitor_handles+0xb4>)
 800ea1e:	681b      	ldreq	r3, [r3, #0]
 800ea20:	602b      	streq	r3, [r5, #0]
 800ea22:	2600      	movs	r6, #0
 800ea24:	f8d8 3000 	ldr.w	r3, [r8]
 800ea28:	6023      	str	r3, [r4, #0]
 800ea2a:	6066      	str	r6, [r4, #4]
 800ea2c:	f7ff ffaa 	bl	800e984 <_has_ext_stdout_stderr>
 800ea30:	b130      	cbz	r0, 800ea40 <initialise_monitor_handles+0xa4>
 800ea32:	4b07      	ldr	r3, [pc, #28]	; (800ea50 <initialise_monitor_handles+0xb4>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800ea3a:	682b      	ldr	r3, [r5, #0]
 800ea3c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800ea40:	b005      	add	sp, #20
 800ea42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea46:	bf00      	nop
 800ea48:	200063dc 	.word	0x200063dc
 800ea4c:	200063d0 	.word	0x200063d0
 800ea50:	200063d8 	.word	0x200063d8
 800ea54:	08015830 	.word	0x08015830
 800ea58:	200063d4 	.word	0x200063d4

0800ea5c <_isatty>:
 800ea5c:	b570      	push	{r4, r5, r6, lr}
 800ea5e:	f7ff fd75 	bl	800e54c <findslot>
 800ea62:	2509      	movs	r5, #9
 800ea64:	4604      	mov	r4, r0
 800ea66:	b920      	cbnz	r0, 800ea72 <_isatty+0x16>
 800ea68:	f000 f814 	bl	800ea94 <__errno>
 800ea6c:	6005      	str	r5, [r0, #0]
 800ea6e:	4620      	mov	r0, r4
 800ea70:	bd70      	pop	{r4, r5, r6, pc}
 800ea72:	4628      	mov	r0, r5
 800ea74:	4621      	mov	r1, r4
 800ea76:	beab      	bkpt	0x00ab
 800ea78:	4604      	mov	r4, r0
 800ea7a:	2c01      	cmp	r4, #1
 800ea7c:	d0f7      	beq.n	800ea6e <_isatty+0x12>
 800ea7e:	f000 f809 	bl	800ea94 <__errno>
 800ea82:	2400      	movs	r4, #0
 800ea84:	4605      	mov	r5, r0
 800ea86:	2613      	movs	r6, #19
 800ea88:	4630      	mov	r0, r6
 800ea8a:	4621      	mov	r1, r4
 800ea8c:	beab      	bkpt	0x00ab
 800ea8e:	4606      	mov	r6, r0
 800ea90:	602e      	str	r6, [r5, #0]
 800ea92:	e7ec      	b.n	800ea6e <_isatty+0x12>

0800ea94 <__errno>:
 800ea94:	4b01      	ldr	r3, [pc, #4]	; (800ea9c <__errno+0x8>)
 800ea96:	6818      	ldr	r0, [r3, #0]
 800ea98:	4770      	bx	lr
 800ea9a:	bf00      	nop
 800ea9c:	20000080 	.word	0x20000080

0800eaa0 <std>:
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	b510      	push	{r4, lr}
 800eaa4:	4604      	mov	r4, r0
 800eaa6:	e9c0 3300 	strd	r3, r3, [r0]
 800eaaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eaae:	6083      	str	r3, [r0, #8]
 800eab0:	8181      	strh	r1, [r0, #12]
 800eab2:	6643      	str	r3, [r0, #100]	; 0x64
 800eab4:	81c2      	strh	r2, [r0, #14]
 800eab6:	6183      	str	r3, [r0, #24]
 800eab8:	4619      	mov	r1, r3
 800eaba:	2208      	movs	r2, #8
 800eabc:	305c      	adds	r0, #92	; 0x5c
 800eabe:	f000 f91a 	bl	800ecf6 <memset>
 800eac2:	4b05      	ldr	r3, [pc, #20]	; (800ead8 <std+0x38>)
 800eac4:	6263      	str	r3, [r4, #36]	; 0x24
 800eac6:	4b05      	ldr	r3, [pc, #20]	; (800eadc <std+0x3c>)
 800eac8:	62a3      	str	r3, [r4, #40]	; 0x28
 800eaca:	4b05      	ldr	r3, [pc, #20]	; (800eae0 <std+0x40>)
 800eacc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eace:	4b05      	ldr	r3, [pc, #20]	; (800eae4 <std+0x44>)
 800ead0:	6224      	str	r4, [r4, #32]
 800ead2:	6323      	str	r3, [r4, #48]	; 0x30
 800ead4:	bd10      	pop	{r4, pc}
 800ead6:	bf00      	nop
 800ead8:	0800f881 	.word	0x0800f881
 800eadc:	0800f8a3 	.word	0x0800f8a3
 800eae0:	0800f8db 	.word	0x0800f8db
 800eae4:	0800f8ff 	.word	0x0800f8ff

0800eae8 <_cleanup_r>:
 800eae8:	4901      	ldr	r1, [pc, #4]	; (800eaf0 <_cleanup_r+0x8>)
 800eaea:	f000 b8af 	b.w	800ec4c <_fwalk_reent>
 800eaee:	bf00      	nop
 800eaf0:	080108d1 	.word	0x080108d1

0800eaf4 <__sfmoreglue>:
 800eaf4:	b570      	push	{r4, r5, r6, lr}
 800eaf6:	2268      	movs	r2, #104	; 0x68
 800eaf8:	1e4d      	subs	r5, r1, #1
 800eafa:	4355      	muls	r5, r2
 800eafc:	460e      	mov	r6, r1
 800eafe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb02:	f000 f921 	bl	800ed48 <_malloc_r>
 800eb06:	4604      	mov	r4, r0
 800eb08:	b140      	cbz	r0, 800eb1c <__sfmoreglue+0x28>
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	e9c0 1600 	strd	r1, r6, [r0]
 800eb10:	300c      	adds	r0, #12
 800eb12:	60a0      	str	r0, [r4, #8]
 800eb14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb18:	f000 f8ed 	bl	800ecf6 <memset>
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	bd70      	pop	{r4, r5, r6, pc}

0800eb20 <__sfp_lock_acquire>:
 800eb20:	4801      	ldr	r0, [pc, #4]	; (800eb28 <__sfp_lock_acquire+0x8>)
 800eb22:	f000 b8d8 	b.w	800ecd6 <__retarget_lock_acquire_recursive>
 800eb26:	bf00      	nop
 800eb28:	2000647d 	.word	0x2000647d

0800eb2c <__sfp_lock_release>:
 800eb2c:	4801      	ldr	r0, [pc, #4]	; (800eb34 <__sfp_lock_release+0x8>)
 800eb2e:	f000 b8d3 	b.w	800ecd8 <__retarget_lock_release_recursive>
 800eb32:	bf00      	nop
 800eb34:	2000647d 	.word	0x2000647d

0800eb38 <__sinit_lock_acquire>:
 800eb38:	4801      	ldr	r0, [pc, #4]	; (800eb40 <__sinit_lock_acquire+0x8>)
 800eb3a:	f000 b8cc 	b.w	800ecd6 <__retarget_lock_acquire_recursive>
 800eb3e:	bf00      	nop
 800eb40:	2000647e 	.word	0x2000647e

0800eb44 <__sinit_lock_release>:
 800eb44:	4801      	ldr	r0, [pc, #4]	; (800eb4c <__sinit_lock_release+0x8>)
 800eb46:	f000 b8c7 	b.w	800ecd8 <__retarget_lock_release_recursive>
 800eb4a:	bf00      	nop
 800eb4c:	2000647e 	.word	0x2000647e

0800eb50 <__sinit>:
 800eb50:	b510      	push	{r4, lr}
 800eb52:	4604      	mov	r4, r0
 800eb54:	f7ff fff0 	bl	800eb38 <__sinit_lock_acquire>
 800eb58:	69a3      	ldr	r3, [r4, #24]
 800eb5a:	b11b      	cbz	r3, 800eb64 <__sinit+0x14>
 800eb5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb60:	f7ff bff0 	b.w	800eb44 <__sinit_lock_release>
 800eb64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eb68:	6523      	str	r3, [r4, #80]	; 0x50
 800eb6a:	4b13      	ldr	r3, [pc, #76]	; (800ebb8 <__sinit+0x68>)
 800eb6c:	4a13      	ldr	r2, [pc, #76]	; (800ebbc <__sinit+0x6c>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	62a2      	str	r2, [r4, #40]	; 0x28
 800eb72:	42a3      	cmp	r3, r4
 800eb74:	bf04      	itt	eq
 800eb76:	2301      	moveq	r3, #1
 800eb78:	61a3      	streq	r3, [r4, #24]
 800eb7a:	4620      	mov	r0, r4
 800eb7c:	f000 f820 	bl	800ebc0 <__sfp>
 800eb80:	6060      	str	r0, [r4, #4]
 800eb82:	4620      	mov	r0, r4
 800eb84:	f000 f81c 	bl	800ebc0 <__sfp>
 800eb88:	60a0      	str	r0, [r4, #8]
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f000 f818 	bl	800ebc0 <__sfp>
 800eb90:	2200      	movs	r2, #0
 800eb92:	60e0      	str	r0, [r4, #12]
 800eb94:	2104      	movs	r1, #4
 800eb96:	6860      	ldr	r0, [r4, #4]
 800eb98:	f7ff ff82 	bl	800eaa0 <std>
 800eb9c:	68a0      	ldr	r0, [r4, #8]
 800eb9e:	2201      	movs	r2, #1
 800eba0:	2109      	movs	r1, #9
 800eba2:	f7ff ff7d 	bl	800eaa0 <std>
 800eba6:	68e0      	ldr	r0, [r4, #12]
 800eba8:	2202      	movs	r2, #2
 800ebaa:	2112      	movs	r1, #18
 800ebac:	f7ff ff78 	bl	800eaa0 <std>
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	61a3      	str	r3, [r4, #24]
 800ebb4:	e7d2      	b.n	800eb5c <__sinit+0xc>
 800ebb6:	bf00      	nop
 800ebb8:	08015894 	.word	0x08015894
 800ebbc:	0800eae9 	.word	0x0800eae9

0800ebc0 <__sfp>:
 800ebc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebc2:	4607      	mov	r7, r0
 800ebc4:	f7ff ffac 	bl	800eb20 <__sfp_lock_acquire>
 800ebc8:	4b1e      	ldr	r3, [pc, #120]	; (800ec44 <__sfp+0x84>)
 800ebca:	681e      	ldr	r6, [r3, #0]
 800ebcc:	69b3      	ldr	r3, [r6, #24]
 800ebce:	b913      	cbnz	r3, 800ebd6 <__sfp+0x16>
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	f7ff ffbd 	bl	800eb50 <__sinit>
 800ebd6:	3648      	adds	r6, #72	; 0x48
 800ebd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ebdc:	3b01      	subs	r3, #1
 800ebde:	d503      	bpl.n	800ebe8 <__sfp+0x28>
 800ebe0:	6833      	ldr	r3, [r6, #0]
 800ebe2:	b30b      	cbz	r3, 800ec28 <__sfp+0x68>
 800ebe4:	6836      	ldr	r6, [r6, #0]
 800ebe6:	e7f7      	b.n	800ebd8 <__sfp+0x18>
 800ebe8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ebec:	b9d5      	cbnz	r5, 800ec24 <__sfp+0x64>
 800ebee:	4b16      	ldr	r3, [pc, #88]	; (800ec48 <__sfp+0x88>)
 800ebf0:	60e3      	str	r3, [r4, #12]
 800ebf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ebf6:	6665      	str	r5, [r4, #100]	; 0x64
 800ebf8:	f000 f86c 	bl	800ecd4 <__retarget_lock_init_recursive>
 800ebfc:	f7ff ff96 	bl	800eb2c <__sfp_lock_release>
 800ec00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec08:	6025      	str	r5, [r4, #0]
 800ec0a:	61a5      	str	r5, [r4, #24]
 800ec0c:	2208      	movs	r2, #8
 800ec0e:	4629      	mov	r1, r5
 800ec10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec14:	f000 f86f 	bl	800ecf6 <memset>
 800ec18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec20:	4620      	mov	r0, r4
 800ec22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec24:	3468      	adds	r4, #104	; 0x68
 800ec26:	e7d9      	b.n	800ebdc <__sfp+0x1c>
 800ec28:	2104      	movs	r1, #4
 800ec2a:	4638      	mov	r0, r7
 800ec2c:	f7ff ff62 	bl	800eaf4 <__sfmoreglue>
 800ec30:	4604      	mov	r4, r0
 800ec32:	6030      	str	r0, [r6, #0]
 800ec34:	2800      	cmp	r0, #0
 800ec36:	d1d5      	bne.n	800ebe4 <__sfp+0x24>
 800ec38:	f7ff ff78 	bl	800eb2c <__sfp_lock_release>
 800ec3c:	230c      	movs	r3, #12
 800ec3e:	603b      	str	r3, [r7, #0]
 800ec40:	e7ee      	b.n	800ec20 <__sfp+0x60>
 800ec42:	bf00      	nop
 800ec44:	08015894 	.word	0x08015894
 800ec48:	ffff0001 	.word	0xffff0001

0800ec4c <_fwalk_reent>:
 800ec4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec50:	4606      	mov	r6, r0
 800ec52:	4688      	mov	r8, r1
 800ec54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ec58:	2700      	movs	r7, #0
 800ec5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec5e:	f1b9 0901 	subs.w	r9, r9, #1
 800ec62:	d505      	bpl.n	800ec70 <_fwalk_reent+0x24>
 800ec64:	6824      	ldr	r4, [r4, #0]
 800ec66:	2c00      	cmp	r4, #0
 800ec68:	d1f7      	bne.n	800ec5a <_fwalk_reent+0xe>
 800ec6a:	4638      	mov	r0, r7
 800ec6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec70:	89ab      	ldrh	r3, [r5, #12]
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d907      	bls.n	800ec86 <_fwalk_reent+0x3a>
 800ec76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	d003      	beq.n	800ec86 <_fwalk_reent+0x3a>
 800ec7e:	4629      	mov	r1, r5
 800ec80:	4630      	mov	r0, r6
 800ec82:	47c0      	blx	r8
 800ec84:	4307      	orrs	r7, r0
 800ec86:	3568      	adds	r5, #104	; 0x68
 800ec88:	e7e9      	b.n	800ec5e <_fwalk_reent+0x12>
	...

0800ec8c <__libc_init_array>:
 800ec8c:	b570      	push	{r4, r5, r6, lr}
 800ec8e:	4d0d      	ldr	r5, [pc, #52]	; (800ecc4 <__libc_init_array+0x38>)
 800ec90:	4c0d      	ldr	r4, [pc, #52]	; (800ecc8 <__libc_init_array+0x3c>)
 800ec92:	1b64      	subs	r4, r4, r5
 800ec94:	10a4      	asrs	r4, r4, #2
 800ec96:	2600      	movs	r6, #0
 800ec98:	42a6      	cmp	r6, r4
 800ec9a:	d109      	bne.n	800ecb0 <__libc_init_array+0x24>
 800ec9c:	4d0b      	ldr	r5, [pc, #44]	; (800eccc <__libc_init_array+0x40>)
 800ec9e:	4c0c      	ldr	r4, [pc, #48]	; (800ecd0 <__libc_init_array+0x44>)
 800eca0:	f002 fea8 	bl	80119f4 <_init>
 800eca4:	1b64      	subs	r4, r4, r5
 800eca6:	10a4      	asrs	r4, r4, #2
 800eca8:	2600      	movs	r6, #0
 800ecaa:	42a6      	cmp	r6, r4
 800ecac:	d105      	bne.n	800ecba <__libc_init_array+0x2e>
 800ecae:	bd70      	pop	{r4, r5, r6, pc}
 800ecb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecb4:	4798      	blx	r3
 800ecb6:	3601      	adds	r6, #1
 800ecb8:	e7ee      	b.n	800ec98 <__libc_init_array+0xc>
 800ecba:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecbe:	4798      	blx	r3
 800ecc0:	3601      	adds	r6, #1
 800ecc2:	e7f2      	b.n	800ecaa <__libc_init_array+0x1e>
 800ecc4:	08015c14 	.word	0x08015c14
 800ecc8:	08015c14 	.word	0x08015c14
 800eccc:	08015c14 	.word	0x08015c14
 800ecd0:	08015c18 	.word	0x08015c18

0800ecd4 <__retarget_lock_init_recursive>:
 800ecd4:	4770      	bx	lr

0800ecd6 <__retarget_lock_acquire_recursive>:
 800ecd6:	4770      	bx	lr

0800ecd8 <__retarget_lock_release_recursive>:
 800ecd8:	4770      	bx	lr

0800ecda <memcpy>:
 800ecda:	440a      	add	r2, r1
 800ecdc:	4291      	cmp	r1, r2
 800ecde:	f100 33ff 	add.w	r3, r0, #4294967295
 800ece2:	d100      	bne.n	800ece6 <memcpy+0xc>
 800ece4:	4770      	bx	lr
 800ece6:	b510      	push	{r4, lr}
 800ece8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecf0:	4291      	cmp	r1, r2
 800ecf2:	d1f9      	bne.n	800ece8 <memcpy+0xe>
 800ecf4:	bd10      	pop	{r4, pc}

0800ecf6 <memset>:
 800ecf6:	4402      	add	r2, r0
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d100      	bne.n	800ed00 <memset+0xa>
 800ecfe:	4770      	bx	lr
 800ed00:	f803 1b01 	strb.w	r1, [r3], #1
 800ed04:	e7f9      	b.n	800ecfa <memset+0x4>
	...

0800ed08 <sbrk_aligned>:
 800ed08:	b570      	push	{r4, r5, r6, lr}
 800ed0a:	4e0e      	ldr	r6, [pc, #56]	; (800ed44 <sbrk_aligned+0x3c>)
 800ed0c:	460c      	mov	r4, r1
 800ed0e:	6831      	ldr	r1, [r6, #0]
 800ed10:	4605      	mov	r5, r0
 800ed12:	b911      	cbnz	r1, 800ed1a <sbrk_aligned+0x12>
 800ed14:	f000 fd84 	bl	800f820 <_sbrk_r>
 800ed18:	6030      	str	r0, [r6, #0]
 800ed1a:	4621      	mov	r1, r4
 800ed1c:	4628      	mov	r0, r5
 800ed1e:	f000 fd7f 	bl	800f820 <_sbrk_r>
 800ed22:	1c43      	adds	r3, r0, #1
 800ed24:	d00a      	beq.n	800ed3c <sbrk_aligned+0x34>
 800ed26:	1cc4      	adds	r4, r0, #3
 800ed28:	f024 0403 	bic.w	r4, r4, #3
 800ed2c:	42a0      	cmp	r0, r4
 800ed2e:	d007      	beq.n	800ed40 <sbrk_aligned+0x38>
 800ed30:	1a21      	subs	r1, r4, r0
 800ed32:	4628      	mov	r0, r5
 800ed34:	f000 fd74 	bl	800f820 <_sbrk_r>
 800ed38:	3001      	adds	r0, #1
 800ed3a:	d101      	bne.n	800ed40 <sbrk_aligned+0x38>
 800ed3c:	f04f 34ff 	mov.w	r4, #4294967295
 800ed40:	4620      	mov	r0, r4
 800ed42:	bd70      	pop	{r4, r5, r6, pc}
 800ed44:	20006484 	.word	0x20006484

0800ed48 <_malloc_r>:
 800ed48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed4c:	1ccd      	adds	r5, r1, #3
 800ed4e:	f025 0503 	bic.w	r5, r5, #3
 800ed52:	3508      	adds	r5, #8
 800ed54:	2d0c      	cmp	r5, #12
 800ed56:	bf38      	it	cc
 800ed58:	250c      	movcc	r5, #12
 800ed5a:	2d00      	cmp	r5, #0
 800ed5c:	4607      	mov	r7, r0
 800ed5e:	db01      	blt.n	800ed64 <_malloc_r+0x1c>
 800ed60:	42a9      	cmp	r1, r5
 800ed62:	d905      	bls.n	800ed70 <_malloc_r+0x28>
 800ed64:	230c      	movs	r3, #12
 800ed66:	603b      	str	r3, [r7, #0]
 800ed68:	2600      	movs	r6, #0
 800ed6a:	4630      	mov	r0, r6
 800ed6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed70:	4e2e      	ldr	r6, [pc, #184]	; (800ee2c <_malloc_r+0xe4>)
 800ed72:	f001 fe6d 	bl	8010a50 <__malloc_lock>
 800ed76:	6833      	ldr	r3, [r6, #0]
 800ed78:	461c      	mov	r4, r3
 800ed7a:	bb34      	cbnz	r4, 800edca <_malloc_r+0x82>
 800ed7c:	4629      	mov	r1, r5
 800ed7e:	4638      	mov	r0, r7
 800ed80:	f7ff ffc2 	bl	800ed08 <sbrk_aligned>
 800ed84:	1c43      	adds	r3, r0, #1
 800ed86:	4604      	mov	r4, r0
 800ed88:	d14d      	bne.n	800ee26 <_malloc_r+0xde>
 800ed8a:	6834      	ldr	r4, [r6, #0]
 800ed8c:	4626      	mov	r6, r4
 800ed8e:	2e00      	cmp	r6, #0
 800ed90:	d140      	bne.n	800ee14 <_malloc_r+0xcc>
 800ed92:	6823      	ldr	r3, [r4, #0]
 800ed94:	4631      	mov	r1, r6
 800ed96:	4638      	mov	r0, r7
 800ed98:	eb04 0803 	add.w	r8, r4, r3
 800ed9c:	f000 fd40 	bl	800f820 <_sbrk_r>
 800eda0:	4580      	cmp	r8, r0
 800eda2:	d13a      	bne.n	800ee1a <_malloc_r+0xd2>
 800eda4:	6821      	ldr	r1, [r4, #0]
 800eda6:	3503      	adds	r5, #3
 800eda8:	1a6d      	subs	r5, r5, r1
 800edaa:	f025 0503 	bic.w	r5, r5, #3
 800edae:	3508      	adds	r5, #8
 800edb0:	2d0c      	cmp	r5, #12
 800edb2:	bf38      	it	cc
 800edb4:	250c      	movcc	r5, #12
 800edb6:	4629      	mov	r1, r5
 800edb8:	4638      	mov	r0, r7
 800edba:	f7ff ffa5 	bl	800ed08 <sbrk_aligned>
 800edbe:	3001      	adds	r0, #1
 800edc0:	d02b      	beq.n	800ee1a <_malloc_r+0xd2>
 800edc2:	6823      	ldr	r3, [r4, #0]
 800edc4:	442b      	add	r3, r5
 800edc6:	6023      	str	r3, [r4, #0]
 800edc8:	e00e      	b.n	800ede8 <_malloc_r+0xa0>
 800edca:	6822      	ldr	r2, [r4, #0]
 800edcc:	1b52      	subs	r2, r2, r5
 800edce:	d41e      	bmi.n	800ee0e <_malloc_r+0xc6>
 800edd0:	2a0b      	cmp	r2, #11
 800edd2:	d916      	bls.n	800ee02 <_malloc_r+0xba>
 800edd4:	1961      	adds	r1, r4, r5
 800edd6:	42a3      	cmp	r3, r4
 800edd8:	6025      	str	r5, [r4, #0]
 800edda:	bf18      	it	ne
 800eddc:	6059      	strne	r1, [r3, #4]
 800edde:	6863      	ldr	r3, [r4, #4]
 800ede0:	bf08      	it	eq
 800ede2:	6031      	streq	r1, [r6, #0]
 800ede4:	5162      	str	r2, [r4, r5]
 800ede6:	604b      	str	r3, [r1, #4]
 800ede8:	4638      	mov	r0, r7
 800edea:	f104 060b 	add.w	r6, r4, #11
 800edee:	f001 fe35 	bl	8010a5c <__malloc_unlock>
 800edf2:	f026 0607 	bic.w	r6, r6, #7
 800edf6:	1d23      	adds	r3, r4, #4
 800edf8:	1af2      	subs	r2, r6, r3
 800edfa:	d0b6      	beq.n	800ed6a <_malloc_r+0x22>
 800edfc:	1b9b      	subs	r3, r3, r6
 800edfe:	50a3      	str	r3, [r4, r2]
 800ee00:	e7b3      	b.n	800ed6a <_malloc_r+0x22>
 800ee02:	6862      	ldr	r2, [r4, #4]
 800ee04:	42a3      	cmp	r3, r4
 800ee06:	bf0c      	ite	eq
 800ee08:	6032      	streq	r2, [r6, #0]
 800ee0a:	605a      	strne	r2, [r3, #4]
 800ee0c:	e7ec      	b.n	800ede8 <_malloc_r+0xa0>
 800ee0e:	4623      	mov	r3, r4
 800ee10:	6864      	ldr	r4, [r4, #4]
 800ee12:	e7b2      	b.n	800ed7a <_malloc_r+0x32>
 800ee14:	4634      	mov	r4, r6
 800ee16:	6876      	ldr	r6, [r6, #4]
 800ee18:	e7b9      	b.n	800ed8e <_malloc_r+0x46>
 800ee1a:	230c      	movs	r3, #12
 800ee1c:	603b      	str	r3, [r7, #0]
 800ee1e:	4638      	mov	r0, r7
 800ee20:	f001 fe1c 	bl	8010a5c <__malloc_unlock>
 800ee24:	e7a1      	b.n	800ed6a <_malloc_r+0x22>
 800ee26:	6025      	str	r5, [r4, #0]
 800ee28:	e7de      	b.n	800ede8 <_malloc_r+0xa0>
 800ee2a:	bf00      	nop
 800ee2c:	20006480 	.word	0x20006480

0800ee30 <__cvt>:
 800ee30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee34:	ec55 4b10 	vmov	r4, r5, d0
 800ee38:	2d00      	cmp	r5, #0
 800ee3a:	460e      	mov	r6, r1
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	462b      	mov	r3, r5
 800ee40:	bfbb      	ittet	lt
 800ee42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ee46:	461d      	movlt	r5, r3
 800ee48:	2300      	movge	r3, #0
 800ee4a:	232d      	movlt	r3, #45	; 0x2d
 800ee4c:	700b      	strb	r3, [r1, #0]
 800ee4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ee54:	4691      	mov	r9, r2
 800ee56:	f023 0820 	bic.w	r8, r3, #32
 800ee5a:	bfbc      	itt	lt
 800ee5c:	4622      	movlt	r2, r4
 800ee5e:	4614      	movlt	r4, r2
 800ee60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ee64:	d005      	beq.n	800ee72 <__cvt+0x42>
 800ee66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ee6a:	d100      	bne.n	800ee6e <__cvt+0x3e>
 800ee6c:	3601      	adds	r6, #1
 800ee6e:	2102      	movs	r1, #2
 800ee70:	e000      	b.n	800ee74 <__cvt+0x44>
 800ee72:	2103      	movs	r1, #3
 800ee74:	ab03      	add	r3, sp, #12
 800ee76:	9301      	str	r3, [sp, #4]
 800ee78:	ab02      	add	r3, sp, #8
 800ee7a:	9300      	str	r3, [sp, #0]
 800ee7c:	ec45 4b10 	vmov	d0, r4, r5
 800ee80:	4653      	mov	r3, sl
 800ee82:	4632      	mov	r2, r6
 800ee84:	f000 feb0 	bl	800fbe8 <_dtoa_r>
 800ee88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ee8c:	4607      	mov	r7, r0
 800ee8e:	d102      	bne.n	800ee96 <__cvt+0x66>
 800ee90:	f019 0f01 	tst.w	r9, #1
 800ee94:	d022      	beq.n	800eedc <__cvt+0xac>
 800ee96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ee9a:	eb07 0906 	add.w	r9, r7, r6
 800ee9e:	d110      	bne.n	800eec2 <__cvt+0x92>
 800eea0:	783b      	ldrb	r3, [r7, #0]
 800eea2:	2b30      	cmp	r3, #48	; 0x30
 800eea4:	d10a      	bne.n	800eebc <__cvt+0x8c>
 800eea6:	2200      	movs	r2, #0
 800eea8:	2300      	movs	r3, #0
 800eeaa:	4620      	mov	r0, r4
 800eeac:	4629      	mov	r1, r5
 800eeae:	f7f1 fe0b 	bl	8000ac8 <__aeabi_dcmpeq>
 800eeb2:	b918      	cbnz	r0, 800eebc <__cvt+0x8c>
 800eeb4:	f1c6 0601 	rsb	r6, r6, #1
 800eeb8:	f8ca 6000 	str.w	r6, [sl]
 800eebc:	f8da 3000 	ldr.w	r3, [sl]
 800eec0:	4499      	add	r9, r3
 800eec2:	2200      	movs	r2, #0
 800eec4:	2300      	movs	r3, #0
 800eec6:	4620      	mov	r0, r4
 800eec8:	4629      	mov	r1, r5
 800eeca:	f7f1 fdfd 	bl	8000ac8 <__aeabi_dcmpeq>
 800eece:	b108      	cbz	r0, 800eed4 <__cvt+0xa4>
 800eed0:	f8cd 900c 	str.w	r9, [sp, #12]
 800eed4:	2230      	movs	r2, #48	; 0x30
 800eed6:	9b03      	ldr	r3, [sp, #12]
 800eed8:	454b      	cmp	r3, r9
 800eeda:	d307      	bcc.n	800eeec <__cvt+0xbc>
 800eedc:	9b03      	ldr	r3, [sp, #12]
 800eede:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eee0:	1bdb      	subs	r3, r3, r7
 800eee2:	4638      	mov	r0, r7
 800eee4:	6013      	str	r3, [r2, #0]
 800eee6:	b004      	add	sp, #16
 800eee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeec:	1c59      	adds	r1, r3, #1
 800eeee:	9103      	str	r1, [sp, #12]
 800eef0:	701a      	strb	r2, [r3, #0]
 800eef2:	e7f0      	b.n	800eed6 <__cvt+0xa6>

0800eef4 <__exponent>:
 800eef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eef6:	4603      	mov	r3, r0
 800eef8:	2900      	cmp	r1, #0
 800eefa:	bfb8      	it	lt
 800eefc:	4249      	neglt	r1, r1
 800eefe:	f803 2b02 	strb.w	r2, [r3], #2
 800ef02:	bfb4      	ite	lt
 800ef04:	222d      	movlt	r2, #45	; 0x2d
 800ef06:	222b      	movge	r2, #43	; 0x2b
 800ef08:	2909      	cmp	r1, #9
 800ef0a:	7042      	strb	r2, [r0, #1]
 800ef0c:	dd2a      	ble.n	800ef64 <__exponent+0x70>
 800ef0e:	f10d 0407 	add.w	r4, sp, #7
 800ef12:	46a4      	mov	ip, r4
 800ef14:	270a      	movs	r7, #10
 800ef16:	46a6      	mov	lr, r4
 800ef18:	460a      	mov	r2, r1
 800ef1a:	fb91 f6f7 	sdiv	r6, r1, r7
 800ef1e:	fb07 1516 	mls	r5, r7, r6, r1
 800ef22:	3530      	adds	r5, #48	; 0x30
 800ef24:	2a63      	cmp	r2, #99	; 0x63
 800ef26:	f104 34ff 	add.w	r4, r4, #4294967295
 800ef2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ef2e:	4631      	mov	r1, r6
 800ef30:	dcf1      	bgt.n	800ef16 <__exponent+0x22>
 800ef32:	3130      	adds	r1, #48	; 0x30
 800ef34:	f1ae 0502 	sub.w	r5, lr, #2
 800ef38:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ef3c:	1c44      	adds	r4, r0, #1
 800ef3e:	4629      	mov	r1, r5
 800ef40:	4561      	cmp	r1, ip
 800ef42:	d30a      	bcc.n	800ef5a <__exponent+0x66>
 800ef44:	f10d 0209 	add.w	r2, sp, #9
 800ef48:	eba2 020e 	sub.w	r2, r2, lr
 800ef4c:	4565      	cmp	r5, ip
 800ef4e:	bf88      	it	hi
 800ef50:	2200      	movhi	r2, #0
 800ef52:	4413      	add	r3, r2
 800ef54:	1a18      	subs	r0, r3, r0
 800ef56:	b003      	add	sp, #12
 800ef58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ef62:	e7ed      	b.n	800ef40 <__exponent+0x4c>
 800ef64:	2330      	movs	r3, #48	; 0x30
 800ef66:	3130      	adds	r1, #48	; 0x30
 800ef68:	7083      	strb	r3, [r0, #2]
 800ef6a:	70c1      	strb	r1, [r0, #3]
 800ef6c:	1d03      	adds	r3, r0, #4
 800ef6e:	e7f1      	b.n	800ef54 <__exponent+0x60>

0800ef70 <_printf_float>:
 800ef70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef74:	ed2d 8b02 	vpush	{d8}
 800ef78:	b08d      	sub	sp, #52	; 0x34
 800ef7a:	460c      	mov	r4, r1
 800ef7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ef80:	4616      	mov	r6, r2
 800ef82:	461f      	mov	r7, r3
 800ef84:	4605      	mov	r5, r0
 800ef86:	f001 fcdf 	bl	8010948 <_localeconv_r>
 800ef8a:	f8d0 a000 	ldr.w	sl, [r0]
 800ef8e:	4650      	mov	r0, sl
 800ef90:	f7f1 f91e 	bl	80001d0 <strlen>
 800ef94:	2300      	movs	r3, #0
 800ef96:	930a      	str	r3, [sp, #40]	; 0x28
 800ef98:	6823      	ldr	r3, [r4, #0]
 800ef9a:	9305      	str	r3, [sp, #20]
 800ef9c:	f8d8 3000 	ldr.w	r3, [r8]
 800efa0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800efa4:	3307      	adds	r3, #7
 800efa6:	f023 0307 	bic.w	r3, r3, #7
 800efaa:	f103 0208 	add.w	r2, r3, #8
 800efae:	f8c8 2000 	str.w	r2, [r8]
 800efb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800efba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800efbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800efc2:	9307      	str	r3, [sp, #28]
 800efc4:	f8cd 8018 	str.w	r8, [sp, #24]
 800efc8:	ee08 0a10 	vmov	s16, r0
 800efcc:	4b9f      	ldr	r3, [pc, #636]	; (800f24c <_printf_float+0x2dc>)
 800efce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800efd2:	f04f 32ff 	mov.w	r2, #4294967295
 800efd6:	f7f1 fda9 	bl	8000b2c <__aeabi_dcmpun>
 800efda:	bb88      	cbnz	r0, 800f040 <_printf_float+0xd0>
 800efdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800efe0:	4b9a      	ldr	r3, [pc, #616]	; (800f24c <_printf_float+0x2dc>)
 800efe2:	f04f 32ff 	mov.w	r2, #4294967295
 800efe6:	f7f1 fd83 	bl	8000af0 <__aeabi_dcmple>
 800efea:	bb48      	cbnz	r0, 800f040 <_printf_float+0xd0>
 800efec:	2200      	movs	r2, #0
 800efee:	2300      	movs	r3, #0
 800eff0:	4640      	mov	r0, r8
 800eff2:	4649      	mov	r1, r9
 800eff4:	f7f1 fd72 	bl	8000adc <__aeabi_dcmplt>
 800eff8:	b110      	cbz	r0, 800f000 <_printf_float+0x90>
 800effa:	232d      	movs	r3, #45	; 0x2d
 800effc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f000:	4b93      	ldr	r3, [pc, #588]	; (800f250 <_printf_float+0x2e0>)
 800f002:	4894      	ldr	r0, [pc, #592]	; (800f254 <_printf_float+0x2e4>)
 800f004:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f008:	bf94      	ite	ls
 800f00a:	4698      	movls	r8, r3
 800f00c:	4680      	movhi	r8, r0
 800f00e:	2303      	movs	r3, #3
 800f010:	6123      	str	r3, [r4, #16]
 800f012:	9b05      	ldr	r3, [sp, #20]
 800f014:	f023 0204 	bic.w	r2, r3, #4
 800f018:	6022      	str	r2, [r4, #0]
 800f01a:	f04f 0900 	mov.w	r9, #0
 800f01e:	9700      	str	r7, [sp, #0]
 800f020:	4633      	mov	r3, r6
 800f022:	aa0b      	add	r2, sp, #44	; 0x2c
 800f024:	4621      	mov	r1, r4
 800f026:	4628      	mov	r0, r5
 800f028:	f000 f9d8 	bl	800f3dc <_printf_common>
 800f02c:	3001      	adds	r0, #1
 800f02e:	f040 8090 	bne.w	800f152 <_printf_float+0x1e2>
 800f032:	f04f 30ff 	mov.w	r0, #4294967295
 800f036:	b00d      	add	sp, #52	; 0x34
 800f038:	ecbd 8b02 	vpop	{d8}
 800f03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f040:	4642      	mov	r2, r8
 800f042:	464b      	mov	r3, r9
 800f044:	4640      	mov	r0, r8
 800f046:	4649      	mov	r1, r9
 800f048:	f7f1 fd70 	bl	8000b2c <__aeabi_dcmpun>
 800f04c:	b140      	cbz	r0, 800f060 <_printf_float+0xf0>
 800f04e:	464b      	mov	r3, r9
 800f050:	2b00      	cmp	r3, #0
 800f052:	bfbc      	itt	lt
 800f054:	232d      	movlt	r3, #45	; 0x2d
 800f056:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f05a:	487f      	ldr	r0, [pc, #508]	; (800f258 <_printf_float+0x2e8>)
 800f05c:	4b7f      	ldr	r3, [pc, #508]	; (800f25c <_printf_float+0x2ec>)
 800f05e:	e7d1      	b.n	800f004 <_printf_float+0x94>
 800f060:	6863      	ldr	r3, [r4, #4]
 800f062:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f066:	9206      	str	r2, [sp, #24]
 800f068:	1c5a      	adds	r2, r3, #1
 800f06a:	d13f      	bne.n	800f0ec <_printf_float+0x17c>
 800f06c:	2306      	movs	r3, #6
 800f06e:	6063      	str	r3, [r4, #4]
 800f070:	9b05      	ldr	r3, [sp, #20]
 800f072:	6861      	ldr	r1, [r4, #4]
 800f074:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f078:	2300      	movs	r3, #0
 800f07a:	9303      	str	r3, [sp, #12]
 800f07c:	ab0a      	add	r3, sp, #40	; 0x28
 800f07e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f082:	ab09      	add	r3, sp, #36	; 0x24
 800f084:	ec49 8b10 	vmov	d0, r8, r9
 800f088:	9300      	str	r3, [sp, #0]
 800f08a:	6022      	str	r2, [r4, #0]
 800f08c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f090:	4628      	mov	r0, r5
 800f092:	f7ff fecd 	bl	800ee30 <__cvt>
 800f096:	9b06      	ldr	r3, [sp, #24]
 800f098:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f09a:	2b47      	cmp	r3, #71	; 0x47
 800f09c:	4680      	mov	r8, r0
 800f09e:	d108      	bne.n	800f0b2 <_printf_float+0x142>
 800f0a0:	1cc8      	adds	r0, r1, #3
 800f0a2:	db02      	blt.n	800f0aa <_printf_float+0x13a>
 800f0a4:	6863      	ldr	r3, [r4, #4]
 800f0a6:	4299      	cmp	r1, r3
 800f0a8:	dd41      	ble.n	800f12e <_printf_float+0x1be>
 800f0aa:	f1ab 0b02 	sub.w	fp, fp, #2
 800f0ae:	fa5f fb8b 	uxtb.w	fp, fp
 800f0b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f0b6:	d820      	bhi.n	800f0fa <_printf_float+0x18a>
 800f0b8:	3901      	subs	r1, #1
 800f0ba:	465a      	mov	r2, fp
 800f0bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f0c0:	9109      	str	r1, [sp, #36]	; 0x24
 800f0c2:	f7ff ff17 	bl	800eef4 <__exponent>
 800f0c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0c8:	1813      	adds	r3, r2, r0
 800f0ca:	2a01      	cmp	r2, #1
 800f0cc:	4681      	mov	r9, r0
 800f0ce:	6123      	str	r3, [r4, #16]
 800f0d0:	dc02      	bgt.n	800f0d8 <_printf_float+0x168>
 800f0d2:	6822      	ldr	r2, [r4, #0]
 800f0d4:	07d2      	lsls	r2, r2, #31
 800f0d6:	d501      	bpl.n	800f0dc <_printf_float+0x16c>
 800f0d8:	3301      	adds	r3, #1
 800f0da:	6123      	str	r3, [r4, #16]
 800f0dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d09c      	beq.n	800f01e <_printf_float+0xae>
 800f0e4:	232d      	movs	r3, #45	; 0x2d
 800f0e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0ea:	e798      	b.n	800f01e <_printf_float+0xae>
 800f0ec:	9a06      	ldr	r2, [sp, #24]
 800f0ee:	2a47      	cmp	r2, #71	; 0x47
 800f0f0:	d1be      	bne.n	800f070 <_printf_float+0x100>
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d1bc      	bne.n	800f070 <_printf_float+0x100>
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	e7b9      	b.n	800f06e <_printf_float+0xfe>
 800f0fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f0fe:	d118      	bne.n	800f132 <_printf_float+0x1c2>
 800f100:	2900      	cmp	r1, #0
 800f102:	6863      	ldr	r3, [r4, #4]
 800f104:	dd0b      	ble.n	800f11e <_printf_float+0x1ae>
 800f106:	6121      	str	r1, [r4, #16]
 800f108:	b913      	cbnz	r3, 800f110 <_printf_float+0x1a0>
 800f10a:	6822      	ldr	r2, [r4, #0]
 800f10c:	07d0      	lsls	r0, r2, #31
 800f10e:	d502      	bpl.n	800f116 <_printf_float+0x1a6>
 800f110:	3301      	adds	r3, #1
 800f112:	440b      	add	r3, r1
 800f114:	6123      	str	r3, [r4, #16]
 800f116:	65a1      	str	r1, [r4, #88]	; 0x58
 800f118:	f04f 0900 	mov.w	r9, #0
 800f11c:	e7de      	b.n	800f0dc <_printf_float+0x16c>
 800f11e:	b913      	cbnz	r3, 800f126 <_printf_float+0x1b6>
 800f120:	6822      	ldr	r2, [r4, #0]
 800f122:	07d2      	lsls	r2, r2, #31
 800f124:	d501      	bpl.n	800f12a <_printf_float+0x1ba>
 800f126:	3302      	adds	r3, #2
 800f128:	e7f4      	b.n	800f114 <_printf_float+0x1a4>
 800f12a:	2301      	movs	r3, #1
 800f12c:	e7f2      	b.n	800f114 <_printf_float+0x1a4>
 800f12e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f134:	4299      	cmp	r1, r3
 800f136:	db05      	blt.n	800f144 <_printf_float+0x1d4>
 800f138:	6823      	ldr	r3, [r4, #0]
 800f13a:	6121      	str	r1, [r4, #16]
 800f13c:	07d8      	lsls	r0, r3, #31
 800f13e:	d5ea      	bpl.n	800f116 <_printf_float+0x1a6>
 800f140:	1c4b      	adds	r3, r1, #1
 800f142:	e7e7      	b.n	800f114 <_printf_float+0x1a4>
 800f144:	2900      	cmp	r1, #0
 800f146:	bfd4      	ite	le
 800f148:	f1c1 0202 	rsble	r2, r1, #2
 800f14c:	2201      	movgt	r2, #1
 800f14e:	4413      	add	r3, r2
 800f150:	e7e0      	b.n	800f114 <_printf_float+0x1a4>
 800f152:	6823      	ldr	r3, [r4, #0]
 800f154:	055a      	lsls	r2, r3, #21
 800f156:	d407      	bmi.n	800f168 <_printf_float+0x1f8>
 800f158:	6923      	ldr	r3, [r4, #16]
 800f15a:	4642      	mov	r2, r8
 800f15c:	4631      	mov	r1, r6
 800f15e:	4628      	mov	r0, r5
 800f160:	47b8      	blx	r7
 800f162:	3001      	adds	r0, #1
 800f164:	d12c      	bne.n	800f1c0 <_printf_float+0x250>
 800f166:	e764      	b.n	800f032 <_printf_float+0xc2>
 800f168:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f16c:	f240 80e0 	bls.w	800f330 <_printf_float+0x3c0>
 800f170:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f174:	2200      	movs	r2, #0
 800f176:	2300      	movs	r3, #0
 800f178:	f7f1 fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 800f17c:	2800      	cmp	r0, #0
 800f17e:	d034      	beq.n	800f1ea <_printf_float+0x27a>
 800f180:	4a37      	ldr	r2, [pc, #220]	; (800f260 <_printf_float+0x2f0>)
 800f182:	2301      	movs	r3, #1
 800f184:	4631      	mov	r1, r6
 800f186:	4628      	mov	r0, r5
 800f188:	47b8      	blx	r7
 800f18a:	3001      	adds	r0, #1
 800f18c:	f43f af51 	beq.w	800f032 <_printf_float+0xc2>
 800f190:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f194:	429a      	cmp	r2, r3
 800f196:	db02      	blt.n	800f19e <_printf_float+0x22e>
 800f198:	6823      	ldr	r3, [r4, #0]
 800f19a:	07d8      	lsls	r0, r3, #31
 800f19c:	d510      	bpl.n	800f1c0 <_printf_float+0x250>
 800f19e:	ee18 3a10 	vmov	r3, s16
 800f1a2:	4652      	mov	r2, sl
 800f1a4:	4631      	mov	r1, r6
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	47b8      	blx	r7
 800f1aa:	3001      	adds	r0, #1
 800f1ac:	f43f af41 	beq.w	800f032 <_printf_float+0xc2>
 800f1b0:	f04f 0800 	mov.w	r8, #0
 800f1b4:	f104 091a 	add.w	r9, r4, #26
 800f1b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1ba:	3b01      	subs	r3, #1
 800f1bc:	4543      	cmp	r3, r8
 800f1be:	dc09      	bgt.n	800f1d4 <_printf_float+0x264>
 800f1c0:	6823      	ldr	r3, [r4, #0]
 800f1c2:	079b      	lsls	r3, r3, #30
 800f1c4:	f100 8105 	bmi.w	800f3d2 <_printf_float+0x462>
 800f1c8:	68e0      	ldr	r0, [r4, #12]
 800f1ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1cc:	4298      	cmp	r0, r3
 800f1ce:	bfb8      	it	lt
 800f1d0:	4618      	movlt	r0, r3
 800f1d2:	e730      	b.n	800f036 <_printf_float+0xc6>
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	464a      	mov	r2, r9
 800f1d8:	4631      	mov	r1, r6
 800f1da:	4628      	mov	r0, r5
 800f1dc:	47b8      	blx	r7
 800f1de:	3001      	adds	r0, #1
 800f1e0:	f43f af27 	beq.w	800f032 <_printf_float+0xc2>
 800f1e4:	f108 0801 	add.w	r8, r8, #1
 800f1e8:	e7e6      	b.n	800f1b8 <_printf_float+0x248>
 800f1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	dc39      	bgt.n	800f264 <_printf_float+0x2f4>
 800f1f0:	4a1b      	ldr	r2, [pc, #108]	; (800f260 <_printf_float+0x2f0>)
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	4631      	mov	r1, r6
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	47b8      	blx	r7
 800f1fa:	3001      	adds	r0, #1
 800f1fc:	f43f af19 	beq.w	800f032 <_printf_float+0xc2>
 800f200:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f204:	4313      	orrs	r3, r2
 800f206:	d102      	bne.n	800f20e <_printf_float+0x29e>
 800f208:	6823      	ldr	r3, [r4, #0]
 800f20a:	07d9      	lsls	r1, r3, #31
 800f20c:	d5d8      	bpl.n	800f1c0 <_printf_float+0x250>
 800f20e:	ee18 3a10 	vmov	r3, s16
 800f212:	4652      	mov	r2, sl
 800f214:	4631      	mov	r1, r6
 800f216:	4628      	mov	r0, r5
 800f218:	47b8      	blx	r7
 800f21a:	3001      	adds	r0, #1
 800f21c:	f43f af09 	beq.w	800f032 <_printf_float+0xc2>
 800f220:	f04f 0900 	mov.w	r9, #0
 800f224:	f104 0a1a 	add.w	sl, r4, #26
 800f228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f22a:	425b      	negs	r3, r3
 800f22c:	454b      	cmp	r3, r9
 800f22e:	dc01      	bgt.n	800f234 <_printf_float+0x2c4>
 800f230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f232:	e792      	b.n	800f15a <_printf_float+0x1ea>
 800f234:	2301      	movs	r3, #1
 800f236:	4652      	mov	r2, sl
 800f238:	4631      	mov	r1, r6
 800f23a:	4628      	mov	r0, r5
 800f23c:	47b8      	blx	r7
 800f23e:	3001      	adds	r0, #1
 800f240:	f43f aef7 	beq.w	800f032 <_printf_float+0xc2>
 800f244:	f109 0901 	add.w	r9, r9, #1
 800f248:	e7ee      	b.n	800f228 <_printf_float+0x2b8>
 800f24a:	bf00      	nop
 800f24c:	7fefffff 	.word	0x7fefffff
 800f250:	08015898 	.word	0x08015898
 800f254:	0801589c 	.word	0x0801589c
 800f258:	080158a4 	.word	0x080158a4
 800f25c:	080158a0 	.word	0x080158a0
 800f260:	080158a8 	.word	0x080158a8
 800f264:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f266:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f268:	429a      	cmp	r2, r3
 800f26a:	bfa8      	it	ge
 800f26c:	461a      	movge	r2, r3
 800f26e:	2a00      	cmp	r2, #0
 800f270:	4691      	mov	r9, r2
 800f272:	dc37      	bgt.n	800f2e4 <_printf_float+0x374>
 800f274:	f04f 0b00 	mov.w	fp, #0
 800f278:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f27c:	f104 021a 	add.w	r2, r4, #26
 800f280:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f282:	9305      	str	r3, [sp, #20]
 800f284:	eba3 0309 	sub.w	r3, r3, r9
 800f288:	455b      	cmp	r3, fp
 800f28a:	dc33      	bgt.n	800f2f4 <_printf_float+0x384>
 800f28c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f290:	429a      	cmp	r2, r3
 800f292:	db3b      	blt.n	800f30c <_printf_float+0x39c>
 800f294:	6823      	ldr	r3, [r4, #0]
 800f296:	07da      	lsls	r2, r3, #31
 800f298:	d438      	bmi.n	800f30c <_printf_float+0x39c>
 800f29a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f29c:	9a05      	ldr	r2, [sp, #20]
 800f29e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f2a0:	1a9a      	subs	r2, r3, r2
 800f2a2:	eba3 0901 	sub.w	r9, r3, r1
 800f2a6:	4591      	cmp	r9, r2
 800f2a8:	bfa8      	it	ge
 800f2aa:	4691      	movge	r9, r2
 800f2ac:	f1b9 0f00 	cmp.w	r9, #0
 800f2b0:	dc35      	bgt.n	800f31e <_printf_float+0x3ae>
 800f2b2:	f04f 0800 	mov.w	r8, #0
 800f2b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f2ba:	f104 0a1a 	add.w	sl, r4, #26
 800f2be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f2c2:	1a9b      	subs	r3, r3, r2
 800f2c4:	eba3 0309 	sub.w	r3, r3, r9
 800f2c8:	4543      	cmp	r3, r8
 800f2ca:	f77f af79 	ble.w	800f1c0 <_printf_float+0x250>
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	4652      	mov	r2, sl
 800f2d2:	4631      	mov	r1, r6
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	47b8      	blx	r7
 800f2d8:	3001      	adds	r0, #1
 800f2da:	f43f aeaa 	beq.w	800f032 <_printf_float+0xc2>
 800f2de:	f108 0801 	add.w	r8, r8, #1
 800f2e2:	e7ec      	b.n	800f2be <_printf_float+0x34e>
 800f2e4:	4613      	mov	r3, r2
 800f2e6:	4631      	mov	r1, r6
 800f2e8:	4642      	mov	r2, r8
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	47b8      	blx	r7
 800f2ee:	3001      	adds	r0, #1
 800f2f0:	d1c0      	bne.n	800f274 <_printf_float+0x304>
 800f2f2:	e69e      	b.n	800f032 <_printf_float+0xc2>
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	4631      	mov	r1, r6
 800f2f8:	4628      	mov	r0, r5
 800f2fa:	9205      	str	r2, [sp, #20]
 800f2fc:	47b8      	blx	r7
 800f2fe:	3001      	adds	r0, #1
 800f300:	f43f ae97 	beq.w	800f032 <_printf_float+0xc2>
 800f304:	9a05      	ldr	r2, [sp, #20]
 800f306:	f10b 0b01 	add.w	fp, fp, #1
 800f30a:	e7b9      	b.n	800f280 <_printf_float+0x310>
 800f30c:	ee18 3a10 	vmov	r3, s16
 800f310:	4652      	mov	r2, sl
 800f312:	4631      	mov	r1, r6
 800f314:	4628      	mov	r0, r5
 800f316:	47b8      	blx	r7
 800f318:	3001      	adds	r0, #1
 800f31a:	d1be      	bne.n	800f29a <_printf_float+0x32a>
 800f31c:	e689      	b.n	800f032 <_printf_float+0xc2>
 800f31e:	9a05      	ldr	r2, [sp, #20]
 800f320:	464b      	mov	r3, r9
 800f322:	4442      	add	r2, r8
 800f324:	4631      	mov	r1, r6
 800f326:	4628      	mov	r0, r5
 800f328:	47b8      	blx	r7
 800f32a:	3001      	adds	r0, #1
 800f32c:	d1c1      	bne.n	800f2b2 <_printf_float+0x342>
 800f32e:	e680      	b.n	800f032 <_printf_float+0xc2>
 800f330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f332:	2a01      	cmp	r2, #1
 800f334:	dc01      	bgt.n	800f33a <_printf_float+0x3ca>
 800f336:	07db      	lsls	r3, r3, #31
 800f338:	d538      	bpl.n	800f3ac <_printf_float+0x43c>
 800f33a:	2301      	movs	r3, #1
 800f33c:	4642      	mov	r2, r8
 800f33e:	4631      	mov	r1, r6
 800f340:	4628      	mov	r0, r5
 800f342:	47b8      	blx	r7
 800f344:	3001      	adds	r0, #1
 800f346:	f43f ae74 	beq.w	800f032 <_printf_float+0xc2>
 800f34a:	ee18 3a10 	vmov	r3, s16
 800f34e:	4652      	mov	r2, sl
 800f350:	4631      	mov	r1, r6
 800f352:	4628      	mov	r0, r5
 800f354:	47b8      	blx	r7
 800f356:	3001      	adds	r0, #1
 800f358:	f43f ae6b 	beq.w	800f032 <_printf_float+0xc2>
 800f35c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f360:	2200      	movs	r2, #0
 800f362:	2300      	movs	r3, #0
 800f364:	f7f1 fbb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800f368:	b9d8      	cbnz	r0, 800f3a2 <_printf_float+0x432>
 800f36a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f36c:	f108 0201 	add.w	r2, r8, #1
 800f370:	3b01      	subs	r3, #1
 800f372:	4631      	mov	r1, r6
 800f374:	4628      	mov	r0, r5
 800f376:	47b8      	blx	r7
 800f378:	3001      	adds	r0, #1
 800f37a:	d10e      	bne.n	800f39a <_printf_float+0x42a>
 800f37c:	e659      	b.n	800f032 <_printf_float+0xc2>
 800f37e:	2301      	movs	r3, #1
 800f380:	4652      	mov	r2, sl
 800f382:	4631      	mov	r1, r6
 800f384:	4628      	mov	r0, r5
 800f386:	47b8      	blx	r7
 800f388:	3001      	adds	r0, #1
 800f38a:	f43f ae52 	beq.w	800f032 <_printf_float+0xc2>
 800f38e:	f108 0801 	add.w	r8, r8, #1
 800f392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f394:	3b01      	subs	r3, #1
 800f396:	4543      	cmp	r3, r8
 800f398:	dcf1      	bgt.n	800f37e <_printf_float+0x40e>
 800f39a:	464b      	mov	r3, r9
 800f39c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f3a0:	e6dc      	b.n	800f15c <_printf_float+0x1ec>
 800f3a2:	f04f 0800 	mov.w	r8, #0
 800f3a6:	f104 0a1a 	add.w	sl, r4, #26
 800f3aa:	e7f2      	b.n	800f392 <_printf_float+0x422>
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	4642      	mov	r2, r8
 800f3b0:	e7df      	b.n	800f372 <_printf_float+0x402>
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	464a      	mov	r2, r9
 800f3b6:	4631      	mov	r1, r6
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	47b8      	blx	r7
 800f3bc:	3001      	adds	r0, #1
 800f3be:	f43f ae38 	beq.w	800f032 <_printf_float+0xc2>
 800f3c2:	f108 0801 	add.w	r8, r8, #1
 800f3c6:	68e3      	ldr	r3, [r4, #12]
 800f3c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f3ca:	1a5b      	subs	r3, r3, r1
 800f3cc:	4543      	cmp	r3, r8
 800f3ce:	dcf0      	bgt.n	800f3b2 <_printf_float+0x442>
 800f3d0:	e6fa      	b.n	800f1c8 <_printf_float+0x258>
 800f3d2:	f04f 0800 	mov.w	r8, #0
 800f3d6:	f104 0919 	add.w	r9, r4, #25
 800f3da:	e7f4      	b.n	800f3c6 <_printf_float+0x456>

0800f3dc <_printf_common>:
 800f3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3e0:	4616      	mov	r6, r2
 800f3e2:	4699      	mov	r9, r3
 800f3e4:	688a      	ldr	r2, [r1, #8]
 800f3e6:	690b      	ldr	r3, [r1, #16]
 800f3e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	bfb8      	it	lt
 800f3f0:	4613      	movlt	r3, r2
 800f3f2:	6033      	str	r3, [r6, #0]
 800f3f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f3f8:	4607      	mov	r7, r0
 800f3fa:	460c      	mov	r4, r1
 800f3fc:	b10a      	cbz	r2, 800f402 <_printf_common+0x26>
 800f3fe:	3301      	adds	r3, #1
 800f400:	6033      	str	r3, [r6, #0]
 800f402:	6823      	ldr	r3, [r4, #0]
 800f404:	0699      	lsls	r1, r3, #26
 800f406:	bf42      	ittt	mi
 800f408:	6833      	ldrmi	r3, [r6, #0]
 800f40a:	3302      	addmi	r3, #2
 800f40c:	6033      	strmi	r3, [r6, #0]
 800f40e:	6825      	ldr	r5, [r4, #0]
 800f410:	f015 0506 	ands.w	r5, r5, #6
 800f414:	d106      	bne.n	800f424 <_printf_common+0x48>
 800f416:	f104 0a19 	add.w	sl, r4, #25
 800f41a:	68e3      	ldr	r3, [r4, #12]
 800f41c:	6832      	ldr	r2, [r6, #0]
 800f41e:	1a9b      	subs	r3, r3, r2
 800f420:	42ab      	cmp	r3, r5
 800f422:	dc26      	bgt.n	800f472 <_printf_common+0x96>
 800f424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f428:	1e13      	subs	r3, r2, #0
 800f42a:	6822      	ldr	r2, [r4, #0]
 800f42c:	bf18      	it	ne
 800f42e:	2301      	movne	r3, #1
 800f430:	0692      	lsls	r2, r2, #26
 800f432:	d42b      	bmi.n	800f48c <_printf_common+0xb0>
 800f434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f438:	4649      	mov	r1, r9
 800f43a:	4638      	mov	r0, r7
 800f43c:	47c0      	blx	r8
 800f43e:	3001      	adds	r0, #1
 800f440:	d01e      	beq.n	800f480 <_printf_common+0xa4>
 800f442:	6823      	ldr	r3, [r4, #0]
 800f444:	68e5      	ldr	r5, [r4, #12]
 800f446:	6832      	ldr	r2, [r6, #0]
 800f448:	f003 0306 	and.w	r3, r3, #6
 800f44c:	2b04      	cmp	r3, #4
 800f44e:	bf08      	it	eq
 800f450:	1aad      	subeq	r5, r5, r2
 800f452:	68a3      	ldr	r3, [r4, #8]
 800f454:	6922      	ldr	r2, [r4, #16]
 800f456:	bf0c      	ite	eq
 800f458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f45c:	2500      	movne	r5, #0
 800f45e:	4293      	cmp	r3, r2
 800f460:	bfc4      	itt	gt
 800f462:	1a9b      	subgt	r3, r3, r2
 800f464:	18ed      	addgt	r5, r5, r3
 800f466:	2600      	movs	r6, #0
 800f468:	341a      	adds	r4, #26
 800f46a:	42b5      	cmp	r5, r6
 800f46c:	d11a      	bne.n	800f4a4 <_printf_common+0xc8>
 800f46e:	2000      	movs	r0, #0
 800f470:	e008      	b.n	800f484 <_printf_common+0xa8>
 800f472:	2301      	movs	r3, #1
 800f474:	4652      	mov	r2, sl
 800f476:	4649      	mov	r1, r9
 800f478:	4638      	mov	r0, r7
 800f47a:	47c0      	blx	r8
 800f47c:	3001      	adds	r0, #1
 800f47e:	d103      	bne.n	800f488 <_printf_common+0xac>
 800f480:	f04f 30ff 	mov.w	r0, #4294967295
 800f484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f488:	3501      	adds	r5, #1
 800f48a:	e7c6      	b.n	800f41a <_printf_common+0x3e>
 800f48c:	18e1      	adds	r1, r4, r3
 800f48e:	1c5a      	adds	r2, r3, #1
 800f490:	2030      	movs	r0, #48	; 0x30
 800f492:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f496:	4422      	add	r2, r4
 800f498:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f49c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f4a0:	3302      	adds	r3, #2
 800f4a2:	e7c7      	b.n	800f434 <_printf_common+0x58>
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	4622      	mov	r2, r4
 800f4a8:	4649      	mov	r1, r9
 800f4aa:	4638      	mov	r0, r7
 800f4ac:	47c0      	blx	r8
 800f4ae:	3001      	adds	r0, #1
 800f4b0:	d0e6      	beq.n	800f480 <_printf_common+0xa4>
 800f4b2:	3601      	adds	r6, #1
 800f4b4:	e7d9      	b.n	800f46a <_printf_common+0x8e>
	...

0800f4b8 <_printf_i>:
 800f4b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4bc:	7e0f      	ldrb	r7, [r1, #24]
 800f4be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f4c0:	2f78      	cmp	r7, #120	; 0x78
 800f4c2:	4691      	mov	r9, r2
 800f4c4:	4680      	mov	r8, r0
 800f4c6:	460c      	mov	r4, r1
 800f4c8:	469a      	mov	sl, r3
 800f4ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f4ce:	d807      	bhi.n	800f4e0 <_printf_i+0x28>
 800f4d0:	2f62      	cmp	r7, #98	; 0x62
 800f4d2:	d80a      	bhi.n	800f4ea <_printf_i+0x32>
 800f4d4:	2f00      	cmp	r7, #0
 800f4d6:	f000 80d8 	beq.w	800f68a <_printf_i+0x1d2>
 800f4da:	2f58      	cmp	r7, #88	; 0x58
 800f4dc:	f000 80a3 	beq.w	800f626 <_printf_i+0x16e>
 800f4e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f4e8:	e03a      	b.n	800f560 <_printf_i+0xa8>
 800f4ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f4ee:	2b15      	cmp	r3, #21
 800f4f0:	d8f6      	bhi.n	800f4e0 <_printf_i+0x28>
 800f4f2:	a101      	add	r1, pc, #4	; (adr r1, 800f4f8 <_printf_i+0x40>)
 800f4f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f4f8:	0800f551 	.word	0x0800f551
 800f4fc:	0800f565 	.word	0x0800f565
 800f500:	0800f4e1 	.word	0x0800f4e1
 800f504:	0800f4e1 	.word	0x0800f4e1
 800f508:	0800f4e1 	.word	0x0800f4e1
 800f50c:	0800f4e1 	.word	0x0800f4e1
 800f510:	0800f565 	.word	0x0800f565
 800f514:	0800f4e1 	.word	0x0800f4e1
 800f518:	0800f4e1 	.word	0x0800f4e1
 800f51c:	0800f4e1 	.word	0x0800f4e1
 800f520:	0800f4e1 	.word	0x0800f4e1
 800f524:	0800f671 	.word	0x0800f671
 800f528:	0800f595 	.word	0x0800f595
 800f52c:	0800f653 	.word	0x0800f653
 800f530:	0800f4e1 	.word	0x0800f4e1
 800f534:	0800f4e1 	.word	0x0800f4e1
 800f538:	0800f693 	.word	0x0800f693
 800f53c:	0800f4e1 	.word	0x0800f4e1
 800f540:	0800f595 	.word	0x0800f595
 800f544:	0800f4e1 	.word	0x0800f4e1
 800f548:	0800f4e1 	.word	0x0800f4e1
 800f54c:	0800f65b 	.word	0x0800f65b
 800f550:	682b      	ldr	r3, [r5, #0]
 800f552:	1d1a      	adds	r2, r3, #4
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	602a      	str	r2, [r5, #0]
 800f558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f55c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f560:	2301      	movs	r3, #1
 800f562:	e0a3      	b.n	800f6ac <_printf_i+0x1f4>
 800f564:	6820      	ldr	r0, [r4, #0]
 800f566:	6829      	ldr	r1, [r5, #0]
 800f568:	0606      	lsls	r6, r0, #24
 800f56a:	f101 0304 	add.w	r3, r1, #4
 800f56e:	d50a      	bpl.n	800f586 <_printf_i+0xce>
 800f570:	680e      	ldr	r6, [r1, #0]
 800f572:	602b      	str	r3, [r5, #0]
 800f574:	2e00      	cmp	r6, #0
 800f576:	da03      	bge.n	800f580 <_printf_i+0xc8>
 800f578:	232d      	movs	r3, #45	; 0x2d
 800f57a:	4276      	negs	r6, r6
 800f57c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f580:	485e      	ldr	r0, [pc, #376]	; (800f6fc <_printf_i+0x244>)
 800f582:	230a      	movs	r3, #10
 800f584:	e019      	b.n	800f5ba <_printf_i+0x102>
 800f586:	680e      	ldr	r6, [r1, #0]
 800f588:	602b      	str	r3, [r5, #0]
 800f58a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f58e:	bf18      	it	ne
 800f590:	b236      	sxthne	r6, r6
 800f592:	e7ef      	b.n	800f574 <_printf_i+0xbc>
 800f594:	682b      	ldr	r3, [r5, #0]
 800f596:	6820      	ldr	r0, [r4, #0]
 800f598:	1d19      	adds	r1, r3, #4
 800f59a:	6029      	str	r1, [r5, #0]
 800f59c:	0601      	lsls	r1, r0, #24
 800f59e:	d501      	bpl.n	800f5a4 <_printf_i+0xec>
 800f5a0:	681e      	ldr	r6, [r3, #0]
 800f5a2:	e002      	b.n	800f5aa <_printf_i+0xf2>
 800f5a4:	0646      	lsls	r6, r0, #25
 800f5a6:	d5fb      	bpl.n	800f5a0 <_printf_i+0xe8>
 800f5a8:	881e      	ldrh	r6, [r3, #0]
 800f5aa:	4854      	ldr	r0, [pc, #336]	; (800f6fc <_printf_i+0x244>)
 800f5ac:	2f6f      	cmp	r7, #111	; 0x6f
 800f5ae:	bf0c      	ite	eq
 800f5b0:	2308      	moveq	r3, #8
 800f5b2:	230a      	movne	r3, #10
 800f5b4:	2100      	movs	r1, #0
 800f5b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f5ba:	6865      	ldr	r5, [r4, #4]
 800f5bc:	60a5      	str	r5, [r4, #8]
 800f5be:	2d00      	cmp	r5, #0
 800f5c0:	bfa2      	ittt	ge
 800f5c2:	6821      	ldrge	r1, [r4, #0]
 800f5c4:	f021 0104 	bicge.w	r1, r1, #4
 800f5c8:	6021      	strge	r1, [r4, #0]
 800f5ca:	b90e      	cbnz	r6, 800f5d0 <_printf_i+0x118>
 800f5cc:	2d00      	cmp	r5, #0
 800f5ce:	d04d      	beq.n	800f66c <_printf_i+0x1b4>
 800f5d0:	4615      	mov	r5, r2
 800f5d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800f5d6:	fb03 6711 	mls	r7, r3, r1, r6
 800f5da:	5dc7      	ldrb	r7, [r0, r7]
 800f5dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f5e0:	4637      	mov	r7, r6
 800f5e2:	42bb      	cmp	r3, r7
 800f5e4:	460e      	mov	r6, r1
 800f5e6:	d9f4      	bls.n	800f5d2 <_printf_i+0x11a>
 800f5e8:	2b08      	cmp	r3, #8
 800f5ea:	d10b      	bne.n	800f604 <_printf_i+0x14c>
 800f5ec:	6823      	ldr	r3, [r4, #0]
 800f5ee:	07de      	lsls	r6, r3, #31
 800f5f0:	d508      	bpl.n	800f604 <_printf_i+0x14c>
 800f5f2:	6923      	ldr	r3, [r4, #16]
 800f5f4:	6861      	ldr	r1, [r4, #4]
 800f5f6:	4299      	cmp	r1, r3
 800f5f8:	bfde      	ittt	le
 800f5fa:	2330      	movle	r3, #48	; 0x30
 800f5fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f600:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f604:	1b52      	subs	r2, r2, r5
 800f606:	6122      	str	r2, [r4, #16]
 800f608:	f8cd a000 	str.w	sl, [sp]
 800f60c:	464b      	mov	r3, r9
 800f60e:	aa03      	add	r2, sp, #12
 800f610:	4621      	mov	r1, r4
 800f612:	4640      	mov	r0, r8
 800f614:	f7ff fee2 	bl	800f3dc <_printf_common>
 800f618:	3001      	adds	r0, #1
 800f61a:	d14c      	bne.n	800f6b6 <_printf_i+0x1fe>
 800f61c:	f04f 30ff 	mov.w	r0, #4294967295
 800f620:	b004      	add	sp, #16
 800f622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f626:	4835      	ldr	r0, [pc, #212]	; (800f6fc <_printf_i+0x244>)
 800f628:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f62c:	6829      	ldr	r1, [r5, #0]
 800f62e:	6823      	ldr	r3, [r4, #0]
 800f630:	f851 6b04 	ldr.w	r6, [r1], #4
 800f634:	6029      	str	r1, [r5, #0]
 800f636:	061d      	lsls	r5, r3, #24
 800f638:	d514      	bpl.n	800f664 <_printf_i+0x1ac>
 800f63a:	07df      	lsls	r7, r3, #31
 800f63c:	bf44      	itt	mi
 800f63e:	f043 0320 	orrmi.w	r3, r3, #32
 800f642:	6023      	strmi	r3, [r4, #0]
 800f644:	b91e      	cbnz	r6, 800f64e <_printf_i+0x196>
 800f646:	6823      	ldr	r3, [r4, #0]
 800f648:	f023 0320 	bic.w	r3, r3, #32
 800f64c:	6023      	str	r3, [r4, #0]
 800f64e:	2310      	movs	r3, #16
 800f650:	e7b0      	b.n	800f5b4 <_printf_i+0xfc>
 800f652:	6823      	ldr	r3, [r4, #0]
 800f654:	f043 0320 	orr.w	r3, r3, #32
 800f658:	6023      	str	r3, [r4, #0]
 800f65a:	2378      	movs	r3, #120	; 0x78
 800f65c:	4828      	ldr	r0, [pc, #160]	; (800f700 <_printf_i+0x248>)
 800f65e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f662:	e7e3      	b.n	800f62c <_printf_i+0x174>
 800f664:	0659      	lsls	r1, r3, #25
 800f666:	bf48      	it	mi
 800f668:	b2b6      	uxthmi	r6, r6
 800f66a:	e7e6      	b.n	800f63a <_printf_i+0x182>
 800f66c:	4615      	mov	r5, r2
 800f66e:	e7bb      	b.n	800f5e8 <_printf_i+0x130>
 800f670:	682b      	ldr	r3, [r5, #0]
 800f672:	6826      	ldr	r6, [r4, #0]
 800f674:	6961      	ldr	r1, [r4, #20]
 800f676:	1d18      	adds	r0, r3, #4
 800f678:	6028      	str	r0, [r5, #0]
 800f67a:	0635      	lsls	r5, r6, #24
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	d501      	bpl.n	800f684 <_printf_i+0x1cc>
 800f680:	6019      	str	r1, [r3, #0]
 800f682:	e002      	b.n	800f68a <_printf_i+0x1d2>
 800f684:	0670      	lsls	r0, r6, #25
 800f686:	d5fb      	bpl.n	800f680 <_printf_i+0x1c8>
 800f688:	8019      	strh	r1, [r3, #0]
 800f68a:	2300      	movs	r3, #0
 800f68c:	6123      	str	r3, [r4, #16]
 800f68e:	4615      	mov	r5, r2
 800f690:	e7ba      	b.n	800f608 <_printf_i+0x150>
 800f692:	682b      	ldr	r3, [r5, #0]
 800f694:	1d1a      	adds	r2, r3, #4
 800f696:	602a      	str	r2, [r5, #0]
 800f698:	681d      	ldr	r5, [r3, #0]
 800f69a:	6862      	ldr	r2, [r4, #4]
 800f69c:	2100      	movs	r1, #0
 800f69e:	4628      	mov	r0, r5
 800f6a0:	f7f0 fd9e 	bl	80001e0 <memchr>
 800f6a4:	b108      	cbz	r0, 800f6aa <_printf_i+0x1f2>
 800f6a6:	1b40      	subs	r0, r0, r5
 800f6a8:	6060      	str	r0, [r4, #4]
 800f6aa:	6863      	ldr	r3, [r4, #4]
 800f6ac:	6123      	str	r3, [r4, #16]
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6b4:	e7a8      	b.n	800f608 <_printf_i+0x150>
 800f6b6:	6923      	ldr	r3, [r4, #16]
 800f6b8:	462a      	mov	r2, r5
 800f6ba:	4649      	mov	r1, r9
 800f6bc:	4640      	mov	r0, r8
 800f6be:	47d0      	blx	sl
 800f6c0:	3001      	adds	r0, #1
 800f6c2:	d0ab      	beq.n	800f61c <_printf_i+0x164>
 800f6c4:	6823      	ldr	r3, [r4, #0]
 800f6c6:	079b      	lsls	r3, r3, #30
 800f6c8:	d413      	bmi.n	800f6f2 <_printf_i+0x23a>
 800f6ca:	68e0      	ldr	r0, [r4, #12]
 800f6cc:	9b03      	ldr	r3, [sp, #12]
 800f6ce:	4298      	cmp	r0, r3
 800f6d0:	bfb8      	it	lt
 800f6d2:	4618      	movlt	r0, r3
 800f6d4:	e7a4      	b.n	800f620 <_printf_i+0x168>
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	4632      	mov	r2, r6
 800f6da:	4649      	mov	r1, r9
 800f6dc:	4640      	mov	r0, r8
 800f6de:	47d0      	blx	sl
 800f6e0:	3001      	adds	r0, #1
 800f6e2:	d09b      	beq.n	800f61c <_printf_i+0x164>
 800f6e4:	3501      	adds	r5, #1
 800f6e6:	68e3      	ldr	r3, [r4, #12]
 800f6e8:	9903      	ldr	r1, [sp, #12]
 800f6ea:	1a5b      	subs	r3, r3, r1
 800f6ec:	42ab      	cmp	r3, r5
 800f6ee:	dcf2      	bgt.n	800f6d6 <_printf_i+0x21e>
 800f6f0:	e7eb      	b.n	800f6ca <_printf_i+0x212>
 800f6f2:	2500      	movs	r5, #0
 800f6f4:	f104 0619 	add.w	r6, r4, #25
 800f6f8:	e7f5      	b.n	800f6e6 <_printf_i+0x22e>
 800f6fa:	bf00      	nop
 800f6fc:	080158aa 	.word	0x080158aa
 800f700:	080158bb 	.word	0x080158bb

0800f704 <iprintf>:
 800f704:	b40f      	push	{r0, r1, r2, r3}
 800f706:	4b0a      	ldr	r3, [pc, #40]	; (800f730 <iprintf+0x2c>)
 800f708:	b513      	push	{r0, r1, r4, lr}
 800f70a:	681c      	ldr	r4, [r3, #0]
 800f70c:	b124      	cbz	r4, 800f718 <iprintf+0x14>
 800f70e:	69a3      	ldr	r3, [r4, #24]
 800f710:	b913      	cbnz	r3, 800f718 <iprintf+0x14>
 800f712:	4620      	mov	r0, r4
 800f714:	f7ff fa1c 	bl	800eb50 <__sinit>
 800f718:	ab05      	add	r3, sp, #20
 800f71a:	9a04      	ldr	r2, [sp, #16]
 800f71c:	68a1      	ldr	r1, [r4, #8]
 800f71e:	9301      	str	r3, [sp, #4]
 800f720:	4620      	mov	r0, r4
 800f722:	f001 ff0d 	bl	8011540 <_vfiprintf_r>
 800f726:	b002      	add	sp, #8
 800f728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f72c:	b004      	add	sp, #16
 800f72e:	4770      	bx	lr
 800f730:	20000080 	.word	0x20000080

0800f734 <_puts_r>:
 800f734:	b570      	push	{r4, r5, r6, lr}
 800f736:	460e      	mov	r6, r1
 800f738:	4605      	mov	r5, r0
 800f73a:	b118      	cbz	r0, 800f744 <_puts_r+0x10>
 800f73c:	6983      	ldr	r3, [r0, #24]
 800f73e:	b90b      	cbnz	r3, 800f744 <_puts_r+0x10>
 800f740:	f7ff fa06 	bl	800eb50 <__sinit>
 800f744:	69ab      	ldr	r3, [r5, #24]
 800f746:	68ac      	ldr	r4, [r5, #8]
 800f748:	b913      	cbnz	r3, 800f750 <_puts_r+0x1c>
 800f74a:	4628      	mov	r0, r5
 800f74c:	f7ff fa00 	bl	800eb50 <__sinit>
 800f750:	4b2c      	ldr	r3, [pc, #176]	; (800f804 <_puts_r+0xd0>)
 800f752:	429c      	cmp	r4, r3
 800f754:	d120      	bne.n	800f798 <_puts_r+0x64>
 800f756:	686c      	ldr	r4, [r5, #4]
 800f758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f75a:	07db      	lsls	r3, r3, #31
 800f75c:	d405      	bmi.n	800f76a <_puts_r+0x36>
 800f75e:	89a3      	ldrh	r3, [r4, #12]
 800f760:	0598      	lsls	r0, r3, #22
 800f762:	d402      	bmi.n	800f76a <_puts_r+0x36>
 800f764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f766:	f7ff fab6 	bl	800ecd6 <__retarget_lock_acquire_recursive>
 800f76a:	89a3      	ldrh	r3, [r4, #12]
 800f76c:	0719      	lsls	r1, r3, #28
 800f76e:	d51d      	bpl.n	800f7ac <_puts_r+0x78>
 800f770:	6923      	ldr	r3, [r4, #16]
 800f772:	b1db      	cbz	r3, 800f7ac <_puts_r+0x78>
 800f774:	3e01      	subs	r6, #1
 800f776:	68a3      	ldr	r3, [r4, #8]
 800f778:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f77c:	3b01      	subs	r3, #1
 800f77e:	60a3      	str	r3, [r4, #8]
 800f780:	bb39      	cbnz	r1, 800f7d2 <_puts_r+0x9e>
 800f782:	2b00      	cmp	r3, #0
 800f784:	da38      	bge.n	800f7f8 <_puts_r+0xc4>
 800f786:	4622      	mov	r2, r4
 800f788:	210a      	movs	r1, #10
 800f78a:	4628      	mov	r0, r5
 800f78c:	f000 f8bc 	bl	800f908 <__swbuf_r>
 800f790:	3001      	adds	r0, #1
 800f792:	d011      	beq.n	800f7b8 <_puts_r+0x84>
 800f794:	250a      	movs	r5, #10
 800f796:	e011      	b.n	800f7bc <_puts_r+0x88>
 800f798:	4b1b      	ldr	r3, [pc, #108]	; (800f808 <_puts_r+0xd4>)
 800f79a:	429c      	cmp	r4, r3
 800f79c:	d101      	bne.n	800f7a2 <_puts_r+0x6e>
 800f79e:	68ac      	ldr	r4, [r5, #8]
 800f7a0:	e7da      	b.n	800f758 <_puts_r+0x24>
 800f7a2:	4b1a      	ldr	r3, [pc, #104]	; (800f80c <_puts_r+0xd8>)
 800f7a4:	429c      	cmp	r4, r3
 800f7a6:	bf08      	it	eq
 800f7a8:	68ec      	ldreq	r4, [r5, #12]
 800f7aa:	e7d5      	b.n	800f758 <_puts_r+0x24>
 800f7ac:	4621      	mov	r1, r4
 800f7ae:	4628      	mov	r0, r5
 800f7b0:	f000 f90e 	bl	800f9d0 <__swsetup_r>
 800f7b4:	2800      	cmp	r0, #0
 800f7b6:	d0dd      	beq.n	800f774 <_puts_r+0x40>
 800f7b8:	f04f 35ff 	mov.w	r5, #4294967295
 800f7bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7be:	07da      	lsls	r2, r3, #31
 800f7c0:	d405      	bmi.n	800f7ce <_puts_r+0x9a>
 800f7c2:	89a3      	ldrh	r3, [r4, #12]
 800f7c4:	059b      	lsls	r3, r3, #22
 800f7c6:	d402      	bmi.n	800f7ce <_puts_r+0x9a>
 800f7c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7ca:	f7ff fa85 	bl	800ecd8 <__retarget_lock_release_recursive>
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	bd70      	pop	{r4, r5, r6, pc}
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	da04      	bge.n	800f7e0 <_puts_r+0xac>
 800f7d6:	69a2      	ldr	r2, [r4, #24]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	dc06      	bgt.n	800f7ea <_puts_r+0xb6>
 800f7dc:	290a      	cmp	r1, #10
 800f7de:	d004      	beq.n	800f7ea <_puts_r+0xb6>
 800f7e0:	6823      	ldr	r3, [r4, #0]
 800f7e2:	1c5a      	adds	r2, r3, #1
 800f7e4:	6022      	str	r2, [r4, #0]
 800f7e6:	7019      	strb	r1, [r3, #0]
 800f7e8:	e7c5      	b.n	800f776 <_puts_r+0x42>
 800f7ea:	4622      	mov	r2, r4
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	f000 f88b 	bl	800f908 <__swbuf_r>
 800f7f2:	3001      	adds	r0, #1
 800f7f4:	d1bf      	bne.n	800f776 <_puts_r+0x42>
 800f7f6:	e7df      	b.n	800f7b8 <_puts_r+0x84>
 800f7f8:	6823      	ldr	r3, [r4, #0]
 800f7fa:	250a      	movs	r5, #10
 800f7fc:	1c5a      	adds	r2, r3, #1
 800f7fe:	6022      	str	r2, [r4, #0]
 800f800:	701d      	strb	r5, [r3, #0]
 800f802:	e7db      	b.n	800f7bc <_puts_r+0x88>
 800f804:	08015854 	.word	0x08015854
 800f808:	08015874 	.word	0x08015874
 800f80c:	08015834 	.word	0x08015834

0800f810 <puts>:
 800f810:	4b02      	ldr	r3, [pc, #8]	; (800f81c <puts+0xc>)
 800f812:	4601      	mov	r1, r0
 800f814:	6818      	ldr	r0, [r3, #0]
 800f816:	f7ff bf8d 	b.w	800f734 <_puts_r>
 800f81a:	bf00      	nop
 800f81c:	20000080 	.word	0x20000080

0800f820 <_sbrk_r>:
 800f820:	b538      	push	{r3, r4, r5, lr}
 800f822:	4d06      	ldr	r5, [pc, #24]	; (800f83c <_sbrk_r+0x1c>)
 800f824:	2300      	movs	r3, #0
 800f826:	4604      	mov	r4, r0
 800f828:	4608      	mov	r0, r1
 800f82a:	602b      	str	r3, [r5, #0]
 800f82c:	f7f3 f836 	bl	800289c <_sbrk>
 800f830:	1c43      	adds	r3, r0, #1
 800f832:	d102      	bne.n	800f83a <_sbrk_r+0x1a>
 800f834:	682b      	ldr	r3, [r5, #0]
 800f836:	b103      	cbz	r3, 800f83a <_sbrk_r+0x1a>
 800f838:	6023      	str	r3, [r4, #0]
 800f83a:	bd38      	pop	{r3, r4, r5, pc}
 800f83c:	20006488 	.word	0x20006488

0800f840 <siprintf>:
 800f840:	b40e      	push	{r1, r2, r3}
 800f842:	b500      	push	{lr}
 800f844:	b09c      	sub	sp, #112	; 0x70
 800f846:	ab1d      	add	r3, sp, #116	; 0x74
 800f848:	9002      	str	r0, [sp, #8]
 800f84a:	9006      	str	r0, [sp, #24]
 800f84c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f850:	4809      	ldr	r0, [pc, #36]	; (800f878 <siprintf+0x38>)
 800f852:	9107      	str	r1, [sp, #28]
 800f854:	9104      	str	r1, [sp, #16]
 800f856:	4909      	ldr	r1, [pc, #36]	; (800f87c <siprintf+0x3c>)
 800f858:	f853 2b04 	ldr.w	r2, [r3], #4
 800f85c:	9105      	str	r1, [sp, #20]
 800f85e:	6800      	ldr	r0, [r0, #0]
 800f860:	9301      	str	r3, [sp, #4]
 800f862:	a902      	add	r1, sp, #8
 800f864:	f001 fd42 	bl	80112ec <_svfiprintf_r>
 800f868:	9b02      	ldr	r3, [sp, #8]
 800f86a:	2200      	movs	r2, #0
 800f86c:	701a      	strb	r2, [r3, #0]
 800f86e:	b01c      	add	sp, #112	; 0x70
 800f870:	f85d eb04 	ldr.w	lr, [sp], #4
 800f874:	b003      	add	sp, #12
 800f876:	4770      	bx	lr
 800f878:	20000080 	.word	0x20000080
 800f87c:	ffff0208 	.word	0xffff0208

0800f880 <__sread>:
 800f880:	b510      	push	{r4, lr}
 800f882:	460c      	mov	r4, r1
 800f884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f888:	f001 ff8a 	bl	80117a0 <_read_r>
 800f88c:	2800      	cmp	r0, #0
 800f88e:	bfab      	itete	ge
 800f890:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f892:	89a3      	ldrhlt	r3, [r4, #12]
 800f894:	181b      	addge	r3, r3, r0
 800f896:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f89a:	bfac      	ite	ge
 800f89c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f89e:	81a3      	strhlt	r3, [r4, #12]
 800f8a0:	bd10      	pop	{r4, pc}

0800f8a2 <__swrite>:
 800f8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a6:	461f      	mov	r7, r3
 800f8a8:	898b      	ldrh	r3, [r1, #12]
 800f8aa:	05db      	lsls	r3, r3, #23
 800f8ac:	4605      	mov	r5, r0
 800f8ae:	460c      	mov	r4, r1
 800f8b0:	4616      	mov	r6, r2
 800f8b2:	d505      	bpl.n	800f8c0 <__swrite+0x1e>
 800f8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8b8:	2302      	movs	r3, #2
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	f001 f848 	bl	8010950 <_lseek_r>
 800f8c0:	89a3      	ldrh	r3, [r4, #12]
 800f8c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f8ca:	81a3      	strh	r3, [r4, #12]
 800f8cc:	4632      	mov	r2, r6
 800f8ce:	463b      	mov	r3, r7
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d6:	f000 b869 	b.w	800f9ac <_write_r>

0800f8da <__sseek>:
 800f8da:	b510      	push	{r4, lr}
 800f8dc:	460c      	mov	r4, r1
 800f8de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8e2:	f001 f835 	bl	8010950 <_lseek_r>
 800f8e6:	1c43      	adds	r3, r0, #1
 800f8e8:	89a3      	ldrh	r3, [r4, #12]
 800f8ea:	bf15      	itete	ne
 800f8ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800f8ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f8f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f8f6:	81a3      	strheq	r3, [r4, #12]
 800f8f8:	bf18      	it	ne
 800f8fa:	81a3      	strhne	r3, [r4, #12]
 800f8fc:	bd10      	pop	{r4, pc}

0800f8fe <__sclose>:
 800f8fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f902:	f000 b8d3 	b.w	800faac <_close_r>
	...

0800f908 <__swbuf_r>:
 800f908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f90a:	460e      	mov	r6, r1
 800f90c:	4614      	mov	r4, r2
 800f90e:	4605      	mov	r5, r0
 800f910:	b118      	cbz	r0, 800f91a <__swbuf_r+0x12>
 800f912:	6983      	ldr	r3, [r0, #24]
 800f914:	b90b      	cbnz	r3, 800f91a <__swbuf_r+0x12>
 800f916:	f7ff f91b 	bl	800eb50 <__sinit>
 800f91a:	4b21      	ldr	r3, [pc, #132]	; (800f9a0 <__swbuf_r+0x98>)
 800f91c:	429c      	cmp	r4, r3
 800f91e:	d12b      	bne.n	800f978 <__swbuf_r+0x70>
 800f920:	686c      	ldr	r4, [r5, #4]
 800f922:	69a3      	ldr	r3, [r4, #24]
 800f924:	60a3      	str	r3, [r4, #8]
 800f926:	89a3      	ldrh	r3, [r4, #12]
 800f928:	071a      	lsls	r2, r3, #28
 800f92a:	d52f      	bpl.n	800f98c <__swbuf_r+0x84>
 800f92c:	6923      	ldr	r3, [r4, #16]
 800f92e:	b36b      	cbz	r3, 800f98c <__swbuf_r+0x84>
 800f930:	6923      	ldr	r3, [r4, #16]
 800f932:	6820      	ldr	r0, [r4, #0]
 800f934:	1ac0      	subs	r0, r0, r3
 800f936:	6963      	ldr	r3, [r4, #20]
 800f938:	b2f6      	uxtb	r6, r6
 800f93a:	4283      	cmp	r3, r0
 800f93c:	4637      	mov	r7, r6
 800f93e:	dc04      	bgt.n	800f94a <__swbuf_r+0x42>
 800f940:	4621      	mov	r1, r4
 800f942:	4628      	mov	r0, r5
 800f944:	f000 ffc4 	bl	80108d0 <_fflush_r>
 800f948:	bb30      	cbnz	r0, 800f998 <__swbuf_r+0x90>
 800f94a:	68a3      	ldr	r3, [r4, #8]
 800f94c:	3b01      	subs	r3, #1
 800f94e:	60a3      	str	r3, [r4, #8]
 800f950:	6823      	ldr	r3, [r4, #0]
 800f952:	1c5a      	adds	r2, r3, #1
 800f954:	6022      	str	r2, [r4, #0]
 800f956:	701e      	strb	r6, [r3, #0]
 800f958:	6963      	ldr	r3, [r4, #20]
 800f95a:	3001      	adds	r0, #1
 800f95c:	4283      	cmp	r3, r0
 800f95e:	d004      	beq.n	800f96a <__swbuf_r+0x62>
 800f960:	89a3      	ldrh	r3, [r4, #12]
 800f962:	07db      	lsls	r3, r3, #31
 800f964:	d506      	bpl.n	800f974 <__swbuf_r+0x6c>
 800f966:	2e0a      	cmp	r6, #10
 800f968:	d104      	bne.n	800f974 <__swbuf_r+0x6c>
 800f96a:	4621      	mov	r1, r4
 800f96c:	4628      	mov	r0, r5
 800f96e:	f000 ffaf 	bl	80108d0 <_fflush_r>
 800f972:	b988      	cbnz	r0, 800f998 <__swbuf_r+0x90>
 800f974:	4638      	mov	r0, r7
 800f976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f978:	4b0a      	ldr	r3, [pc, #40]	; (800f9a4 <__swbuf_r+0x9c>)
 800f97a:	429c      	cmp	r4, r3
 800f97c:	d101      	bne.n	800f982 <__swbuf_r+0x7a>
 800f97e:	68ac      	ldr	r4, [r5, #8]
 800f980:	e7cf      	b.n	800f922 <__swbuf_r+0x1a>
 800f982:	4b09      	ldr	r3, [pc, #36]	; (800f9a8 <__swbuf_r+0xa0>)
 800f984:	429c      	cmp	r4, r3
 800f986:	bf08      	it	eq
 800f988:	68ec      	ldreq	r4, [r5, #12]
 800f98a:	e7ca      	b.n	800f922 <__swbuf_r+0x1a>
 800f98c:	4621      	mov	r1, r4
 800f98e:	4628      	mov	r0, r5
 800f990:	f000 f81e 	bl	800f9d0 <__swsetup_r>
 800f994:	2800      	cmp	r0, #0
 800f996:	d0cb      	beq.n	800f930 <__swbuf_r+0x28>
 800f998:	f04f 37ff 	mov.w	r7, #4294967295
 800f99c:	e7ea      	b.n	800f974 <__swbuf_r+0x6c>
 800f99e:	bf00      	nop
 800f9a0:	08015854 	.word	0x08015854
 800f9a4:	08015874 	.word	0x08015874
 800f9a8:	08015834 	.word	0x08015834

0800f9ac <_write_r>:
 800f9ac:	b538      	push	{r3, r4, r5, lr}
 800f9ae:	4d07      	ldr	r5, [pc, #28]	; (800f9cc <_write_r+0x20>)
 800f9b0:	4604      	mov	r4, r0
 800f9b2:	4608      	mov	r0, r1
 800f9b4:	4611      	mov	r1, r2
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	602a      	str	r2, [r5, #0]
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	f7fe fe6d 	bl	800e69a <_write>
 800f9c0:	1c43      	adds	r3, r0, #1
 800f9c2:	d102      	bne.n	800f9ca <_write_r+0x1e>
 800f9c4:	682b      	ldr	r3, [r5, #0]
 800f9c6:	b103      	cbz	r3, 800f9ca <_write_r+0x1e>
 800f9c8:	6023      	str	r3, [r4, #0]
 800f9ca:	bd38      	pop	{r3, r4, r5, pc}
 800f9cc:	20006488 	.word	0x20006488

0800f9d0 <__swsetup_r>:
 800f9d0:	4b32      	ldr	r3, [pc, #200]	; (800fa9c <__swsetup_r+0xcc>)
 800f9d2:	b570      	push	{r4, r5, r6, lr}
 800f9d4:	681d      	ldr	r5, [r3, #0]
 800f9d6:	4606      	mov	r6, r0
 800f9d8:	460c      	mov	r4, r1
 800f9da:	b125      	cbz	r5, 800f9e6 <__swsetup_r+0x16>
 800f9dc:	69ab      	ldr	r3, [r5, #24]
 800f9de:	b913      	cbnz	r3, 800f9e6 <__swsetup_r+0x16>
 800f9e0:	4628      	mov	r0, r5
 800f9e2:	f7ff f8b5 	bl	800eb50 <__sinit>
 800f9e6:	4b2e      	ldr	r3, [pc, #184]	; (800faa0 <__swsetup_r+0xd0>)
 800f9e8:	429c      	cmp	r4, r3
 800f9ea:	d10f      	bne.n	800fa0c <__swsetup_r+0x3c>
 800f9ec:	686c      	ldr	r4, [r5, #4]
 800f9ee:	89a3      	ldrh	r3, [r4, #12]
 800f9f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f9f4:	0719      	lsls	r1, r3, #28
 800f9f6:	d42c      	bmi.n	800fa52 <__swsetup_r+0x82>
 800f9f8:	06dd      	lsls	r5, r3, #27
 800f9fa:	d411      	bmi.n	800fa20 <__swsetup_r+0x50>
 800f9fc:	2309      	movs	r3, #9
 800f9fe:	6033      	str	r3, [r6, #0]
 800fa00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fa04:	81a3      	strh	r3, [r4, #12]
 800fa06:	f04f 30ff 	mov.w	r0, #4294967295
 800fa0a:	e03e      	b.n	800fa8a <__swsetup_r+0xba>
 800fa0c:	4b25      	ldr	r3, [pc, #148]	; (800faa4 <__swsetup_r+0xd4>)
 800fa0e:	429c      	cmp	r4, r3
 800fa10:	d101      	bne.n	800fa16 <__swsetup_r+0x46>
 800fa12:	68ac      	ldr	r4, [r5, #8]
 800fa14:	e7eb      	b.n	800f9ee <__swsetup_r+0x1e>
 800fa16:	4b24      	ldr	r3, [pc, #144]	; (800faa8 <__swsetup_r+0xd8>)
 800fa18:	429c      	cmp	r4, r3
 800fa1a:	bf08      	it	eq
 800fa1c:	68ec      	ldreq	r4, [r5, #12]
 800fa1e:	e7e6      	b.n	800f9ee <__swsetup_r+0x1e>
 800fa20:	0758      	lsls	r0, r3, #29
 800fa22:	d512      	bpl.n	800fa4a <__swsetup_r+0x7a>
 800fa24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa26:	b141      	cbz	r1, 800fa3a <__swsetup_r+0x6a>
 800fa28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa2c:	4299      	cmp	r1, r3
 800fa2e:	d002      	beq.n	800fa36 <__swsetup_r+0x66>
 800fa30:	4630      	mov	r0, r6
 800fa32:	f001 fbb3 	bl	801119c <_free_r>
 800fa36:	2300      	movs	r3, #0
 800fa38:	6363      	str	r3, [r4, #52]	; 0x34
 800fa3a:	89a3      	ldrh	r3, [r4, #12]
 800fa3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa40:	81a3      	strh	r3, [r4, #12]
 800fa42:	2300      	movs	r3, #0
 800fa44:	6063      	str	r3, [r4, #4]
 800fa46:	6923      	ldr	r3, [r4, #16]
 800fa48:	6023      	str	r3, [r4, #0]
 800fa4a:	89a3      	ldrh	r3, [r4, #12]
 800fa4c:	f043 0308 	orr.w	r3, r3, #8
 800fa50:	81a3      	strh	r3, [r4, #12]
 800fa52:	6923      	ldr	r3, [r4, #16]
 800fa54:	b94b      	cbnz	r3, 800fa6a <__swsetup_r+0x9a>
 800fa56:	89a3      	ldrh	r3, [r4, #12]
 800fa58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fa5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa60:	d003      	beq.n	800fa6a <__swsetup_r+0x9a>
 800fa62:	4621      	mov	r1, r4
 800fa64:	4630      	mov	r0, r6
 800fa66:	f000 ffab 	bl	80109c0 <__smakebuf_r>
 800fa6a:	89a0      	ldrh	r0, [r4, #12]
 800fa6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa70:	f010 0301 	ands.w	r3, r0, #1
 800fa74:	d00a      	beq.n	800fa8c <__swsetup_r+0xbc>
 800fa76:	2300      	movs	r3, #0
 800fa78:	60a3      	str	r3, [r4, #8]
 800fa7a:	6963      	ldr	r3, [r4, #20]
 800fa7c:	425b      	negs	r3, r3
 800fa7e:	61a3      	str	r3, [r4, #24]
 800fa80:	6923      	ldr	r3, [r4, #16]
 800fa82:	b943      	cbnz	r3, 800fa96 <__swsetup_r+0xc6>
 800fa84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fa88:	d1ba      	bne.n	800fa00 <__swsetup_r+0x30>
 800fa8a:	bd70      	pop	{r4, r5, r6, pc}
 800fa8c:	0781      	lsls	r1, r0, #30
 800fa8e:	bf58      	it	pl
 800fa90:	6963      	ldrpl	r3, [r4, #20]
 800fa92:	60a3      	str	r3, [r4, #8]
 800fa94:	e7f4      	b.n	800fa80 <__swsetup_r+0xb0>
 800fa96:	2000      	movs	r0, #0
 800fa98:	e7f7      	b.n	800fa8a <__swsetup_r+0xba>
 800fa9a:	bf00      	nop
 800fa9c:	20000080 	.word	0x20000080
 800faa0:	08015854 	.word	0x08015854
 800faa4:	08015874 	.word	0x08015874
 800faa8:	08015834 	.word	0x08015834

0800faac <_close_r>:
 800faac:	b538      	push	{r3, r4, r5, lr}
 800faae:	4d06      	ldr	r5, [pc, #24]	; (800fac8 <_close_r+0x1c>)
 800fab0:	2300      	movs	r3, #0
 800fab2:	4604      	mov	r4, r0
 800fab4:	4608      	mov	r0, r1
 800fab6:	602b      	str	r3, [r5, #0]
 800fab8:	f7fe fe20 	bl	800e6fc <_close>
 800fabc:	1c43      	adds	r3, r0, #1
 800fabe:	d102      	bne.n	800fac6 <_close_r+0x1a>
 800fac0:	682b      	ldr	r3, [r5, #0]
 800fac2:	b103      	cbz	r3, 800fac6 <_close_r+0x1a>
 800fac4:	6023      	str	r3, [r4, #0]
 800fac6:	bd38      	pop	{r3, r4, r5, pc}
 800fac8:	20006488 	.word	0x20006488

0800facc <quorem>:
 800facc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fad0:	6903      	ldr	r3, [r0, #16]
 800fad2:	690c      	ldr	r4, [r1, #16]
 800fad4:	42a3      	cmp	r3, r4
 800fad6:	4607      	mov	r7, r0
 800fad8:	f2c0 8081 	blt.w	800fbde <quorem+0x112>
 800fadc:	3c01      	subs	r4, #1
 800fade:	f101 0814 	add.w	r8, r1, #20
 800fae2:	f100 0514 	add.w	r5, r0, #20
 800fae6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800faea:	9301      	str	r3, [sp, #4]
 800faec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800faf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800faf4:	3301      	adds	r3, #1
 800faf6:	429a      	cmp	r2, r3
 800faf8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fafc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fb00:	fbb2 f6f3 	udiv	r6, r2, r3
 800fb04:	d331      	bcc.n	800fb6a <quorem+0x9e>
 800fb06:	f04f 0e00 	mov.w	lr, #0
 800fb0a:	4640      	mov	r0, r8
 800fb0c:	46ac      	mov	ip, r5
 800fb0e:	46f2      	mov	sl, lr
 800fb10:	f850 2b04 	ldr.w	r2, [r0], #4
 800fb14:	b293      	uxth	r3, r2
 800fb16:	fb06 e303 	mla	r3, r6, r3, lr
 800fb1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fb1e:	b29b      	uxth	r3, r3
 800fb20:	ebaa 0303 	sub.w	r3, sl, r3
 800fb24:	f8dc a000 	ldr.w	sl, [ip]
 800fb28:	0c12      	lsrs	r2, r2, #16
 800fb2a:	fa13 f38a 	uxtah	r3, r3, sl
 800fb2e:	fb06 e202 	mla	r2, r6, r2, lr
 800fb32:	9300      	str	r3, [sp, #0]
 800fb34:	9b00      	ldr	r3, [sp, #0]
 800fb36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fb3a:	b292      	uxth	r2, r2
 800fb3c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fb40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb44:	f8bd 3000 	ldrh.w	r3, [sp]
 800fb48:	4581      	cmp	r9, r0
 800fb4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb4e:	f84c 3b04 	str.w	r3, [ip], #4
 800fb52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fb56:	d2db      	bcs.n	800fb10 <quorem+0x44>
 800fb58:	f855 300b 	ldr.w	r3, [r5, fp]
 800fb5c:	b92b      	cbnz	r3, 800fb6a <quorem+0x9e>
 800fb5e:	9b01      	ldr	r3, [sp, #4]
 800fb60:	3b04      	subs	r3, #4
 800fb62:	429d      	cmp	r5, r3
 800fb64:	461a      	mov	r2, r3
 800fb66:	d32e      	bcc.n	800fbc6 <quorem+0xfa>
 800fb68:	613c      	str	r4, [r7, #16]
 800fb6a:	4638      	mov	r0, r7
 800fb6c:	f001 f9fe 	bl	8010f6c <__mcmp>
 800fb70:	2800      	cmp	r0, #0
 800fb72:	db24      	blt.n	800fbbe <quorem+0xf2>
 800fb74:	3601      	adds	r6, #1
 800fb76:	4628      	mov	r0, r5
 800fb78:	f04f 0c00 	mov.w	ip, #0
 800fb7c:	f858 2b04 	ldr.w	r2, [r8], #4
 800fb80:	f8d0 e000 	ldr.w	lr, [r0]
 800fb84:	b293      	uxth	r3, r2
 800fb86:	ebac 0303 	sub.w	r3, ip, r3
 800fb8a:	0c12      	lsrs	r2, r2, #16
 800fb8c:	fa13 f38e 	uxtah	r3, r3, lr
 800fb90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fb94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb9e:	45c1      	cmp	r9, r8
 800fba0:	f840 3b04 	str.w	r3, [r0], #4
 800fba4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fba8:	d2e8      	bcs.n	800fb7c <quorem+0xb0>
 800fbaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fbb2:	b922      	cbnz	r2, 800fbbe <quorem+0xf2>
 800fbb4:	3b04      	subs	r3, #4
 800fbb6:	429d      	cmp	r5, r3
 800fbb8:	461a      	mov	r2, r3
 800fbba:	d30a      	bcc.n	800fbd2 <quorem+0x106>
 800fbbc:	613c      	str	r4, [r7, #16]
 800fbbe:	4630      	mov	r0, r6
 800fbc0:	b003      	add	sp, #12
 800fbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbc6:	6812      	ldr	r2, [r2, #0]
 800fbc8:	3b04      	subs	r3, #4
 800fbca:	2a00      	cmp	r2, #0
 800fbcc:	d1cc      	bne.n	800fb68 <quorem+0x9c>
 800fbce:	3c01      	subs	r4, #1
 800fbd0:	e7c7      	b.n	800fb62 <quorem+0x96>
 800fbd2:	6812      	ldr	r2, [r2, #0]
 800fbd4:	3b04      	subs	r3, #4
 800fbd6:	2a00      	cmp	r2, #0
 800fbd8:	d1f0      	bne.n	800fbbc <quorem+0xf0>
 800fbda:	3c01      	subs	r4, #1
 800fbdc:	e7eb      	b.n	800fbb6 <quorem+0xea>
 800fbde:	2000      	movs	r0, #0
 800fbe0:	e7ee      	b.n	800fbc0 <quorem+0xf4>
 800fbe2:	0000      	movs	r0, r0
 800fbe4:	0000      	movs	r0, r0
	...

0800fbe8 <_dtoa_r>:
 800fbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbec:	ed2d 8b04 	vpush	{d8-d9}
 800fbf0:	ec57 6b10 	vmov	r6, r7, d0
 800fbf4:	b093      	sub	sp, #76	; 0x4c
 800fbf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fbf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fbfc:	9106      	str	r1, [sp, #24]
 800fbfe:	ee10 aa10 	vmov	sl, s0
 800fc02:	4604      	mov	r4, r0
 800fc04:	9209      	str	r2, [sp, #36]	; 0x24
 800fc06:	930c      	str	r3, [sp, #48]	; 0x30
 800fc08:	46bb      	mov	fp, r7
 800fc0a:	b975      	cbnz	r5, 800fc2a <_dtoa_r+0x42>
 800fc0c:	2010      	movs	r0, #16
 800fc0e:	f000 ff17 	bl	8010a40 <malloc>
 800fc12:	4602      	mov	r2, r0
 800fc14:	6260      	str	r0, [r4, #36]	; 0x24
 800fc16:	b920      	cbnz	r0, 800fc22 <_dtoa_r+0x3a>
 800fc18:	4ba7      	ldr	r3, [pc, #668]	; (800feb8 <_dtoa_r+0x2d0>)
 800fc1a:	21ea      	movs	r1, #234	; 0xea
 800fc1c:	48a7      	ldr	r0, [pc, #668]	; (800febc <_dtoa_r+0x2d4>)
 800fc1e:	f001 fdd1 	bl	80117c4 <__assert_func>
 800fc22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fc26:	6005      	str	r5, [r0, #0]
 800fc28:	60c5      	str	r5, [r0, #12]
 800fc2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc2c:	6819      	ldr	r1, [r3, #0]
 800fc2e:	b151      	cbz	r1, 800fc46 <_dtoa_r+0x5e>
 800fc30:	685a      	ldr	r2, [r3, #4]
 800fc32:	604a      	str	r2, [r1, #4]
 800fc34:	2301      	movs	r3, #1
 800fc36:	4093      	lsls	r3, r2
 800fc38:	608b      	str	r3, [r1, #8]
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f000 ff54 	bl	8010ae8 <_Bfree>
 800fc40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc42:	2200      	movs	r2, #0
 800fc44:	601a      	str	r2, [r3, #0]
 800fc46:	1e3b      	subs	r3, r7, #0
 800fc48:	bfaa      	itet	ge
 800fc4a:	2300      	movge	r3, #0
 800fc4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fc50:	f8c8 3000 	strge.w	r3, [r8]
 800fc54:	4b9a      	ldr	r3, [pc, #616]	; (800fec0 <_dtoa_r+0x2d8>)
 800fc56:	bfbc      	itt	lt
 800fc58:	2201      	movlt	r2, #1
 800fc5a:	f8c8 2000 	strlt.w	r2, [r8]
 800fc5e:	ea33 030b 	bics.w	r3, r3, fp
 800fc62:	d11b      	bne.n	800fc9c <_dtoa_r+0xb4>
 800fc64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc66:	f242 730f 	movw	r3, #9999	; 0x270f
 800fc6a:	6013      	str	r3, [r2, #0]
 800fc6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fc70:	4333      	orrs	r3, r6
 800fc72:	f000 8592 	beq.w	801079a <_dtoa_r+0xbb2>
 800fc76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc78:	b963      	cbnz	r3, 800fc94 <_dtoa_r+0xac>
 800fc7a:	4b92      	ldr	r3, [pc, #584]	; (800fec4 <_dtoa_r+0x2dc>)
 800fc7c:	e022      	b.n	800fcc4 <_dtoa_r+0xdc>
 800fc7e:	4b92      	ldr	r3, [pc, #584]	; (800fec8 <_dtoa_r+0x2e0>)
 800fc80:	9301      	str	r3, [sp, #4]
 800fc82:	3308      	adds	r3, #8
 800fc84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fc86:	6013      	str	r3, [r2, #0]
 800fc88:	9801      	ldr	r0, [sp, #4]
 800fc8a:	b013      	add	sp, #76	; 0x4c
 800fc8c:	ecbd 8b04 	vpop	{d8-d9}
 800fc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc94:	4b8b      	ldr	r3, [pc, #556]	; (800fec4 <_dtoa_r+0x2dc>)
 800fc96:	9301      	str	r3, [sp, #4]
 800fc98:	3303      	adds	r3, #3
 800fc9a:	e7f3      	b.n	800fc84 <_dtoa_r+0x9c>
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	2300      	movs	r3, #0
 800fca0:	4650      	mov	r0, sl
 800fca2:	4659      	mov	r1, fp
 800fca4:	f7f0 ff10 	bl	8000ac8 <__aeabi_dcmpeq>
 800fca8:	ec4b ab19 	vmov	d9, sl, fp
 800fcac:	4680      	mov	r8, r0
 800fcae:	b158      	cbz	r0, 800fcc8 <_dtoa_r+0xe0>
 800fcb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	6013      	str	r3, [r2, #0]
 800fcb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	f000 856b 	beq.w	8010794 <_dtoa_r+0xbac>
 800fcbe:	4883      	ldr	r0, [pc, #524]	; (800fecc <_dtoa_r+0x2e4>)
 800fcc0:	6018      	str	r0, [r3, #0]
 800fcc2:	1e43      	subs	r3, r0, #1
 800fcc4:	9301      	str	r3, [sp, #4]
 800fcc6:	e7df      	b.n	800fc88 <_dtoa_r+0xa0>
 800fcc8:	ec4b ab10 	vmov	d0, sl, fp
 800fccc:	aa10      	add	r2, sp, #64	; 0x40
 800fcce:	a911      	add	r1, sp, #68	; 0x44
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	f001 f9f1 	bl	80110b8 <__d2b>
 800fcd6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fcda:	ee08 0a10 	vmov	s16, r0
 800fcde:	2d00      	cmp	r5, #0
 800fce0:	f000 8084 	beq.w	800fdec <_dtoa_r+0x204>
 800fce4:	ee19 3a90 	vmov	r3, s19
 800fce8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fcec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fcf0:	4656      	mov	r6, sl
 800fcf2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fcf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fcfa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fcfe:	4b74      	ldr	r3, [pc, #464]	; (800fed0 <_dtoa_r+0x2e8>)
 800fd00:	2200      	movs	r2, #0
 800fd02:	4630      	mov	r0, r6
 800fd04:	4639      	mov	r1, r7
 800fd06:	f7f0 fabf 	bl	8000288 <__aeabi_dsub>
 800fd0a:	a365      	add	r3, pc, #404	; (adr r3, 800fea0 <_dtoa_r+0x2b8>)
 800fd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd10:	f7f0 fc72 	bl	80005f8 <__aeabi_dmul>
 800fd14:	a364      	add	r3, pc, #400	; (adr r3, 800fea8 <_dtoa_r+0x2c0>)
 800fd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1a:	f7f0 fab7 	bl	800028c <__adddf3>
 800fd1e:	4606      	mov	r6, r0
 800fd20:	4628      	mov	r0, r5
 800fd22:	460f      	mov	r7, r1
 800fd24:	f7f0 fbfe 	bl	8000524 <__aeabi_i2d>
 800fd28:	a361      	add	r3, pc, #388	; (adr r3, 800feb0 <_dtoa_r+0x2c8>)
 800fd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2e:	f7f0 fc63 	bl	80005f8 <__aeabi_dmul>
 800fd32:	4602      	mov	r2, r0
 800fd34:	460b      	mov	r3, r1
 800fd36:	4630      	mov	r0, r6
 800fd38:	4639      	mov	r1, r7
 800fd3a:	f7f0 faa7 	bl	800028c <__adddf3>
 800fd3e:	4606      	mov	r6, r0
 800fd40:	460f      	mov	r7, r1
 800fd42:	f7f0 ff09 	bl	8000b58 <__aeabi_d2iz>
 800fd46:	2200      	movs	r2, #0
 800fd48:	9000      	str	r0, [sp, #0]
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	4630      	mov	r0, r6
 800fd4e:	4639      	mov	r1, r7
 800fd50:	f7f0 fec4 	bl	8000adc <__aeabi_dcmplt>
 800fd54:	b150      	cbz	r0, 800fd6c <_dtoa_r+0x184>
 800fd56:	9800      	ldr	r0, [sp, #0]
 800fd58:	f7f0 fbe4 	bl	8000524 <__aeabi_i2d>
 800fd5c:	4632      	mov	r2, r6
 800fd5e:	463b      	mov	r3, r7
 800fd60:	f7f0 feb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd64:	b910      	cbnz	r0, 800fd6c <_dtoa_r+0x184>
 800fd66:	9b00      	ldr	r3, [sp, #0]
 800fd68:	3b01      	subs	r3, #1
 800fd6a:	9300      	str	r3, [sp, #0]
 800fd6c:	9b00      	ldr	r3, [sp, #0]
 800fd6e:	2b16      	cmp	r3, #22
 800fd70:	d85a      	bhi.n	800fe28 <_dtoa_r+0x240>
 800fd72:	9a00      	ldr	r2, [sp, #0]
 800fd74:	4b57      	ldr	r3, [pc, #348]	; (800fed4 <_dtoa_r+0x2ec>)
 800fd76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7e:	ec51 0b19 	vmov	r0, r1, d9
 800fd82:	f7f0 feab 	bl	8000adc <__aeabi_dcmplt>
 800fd86:	2800      	cmp	r0, #0
 800fd88:	d050      	beq.n	800fe2c <_dtoa_r+0x244>
 800fd8a:	9b00      	ldr	r3, [sp, #0]
 800fd8c:	3b01      	subs	r3, #1
 800fd8e:	9300      	str	r3, [sp, #0]
 800fd90:	2300      	movs	r3, #0
 800fd92:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd96:	1b5d      	subs	r5, r3, r5
 800fd98:	1e6b      	subs	r3, r5, #1
 800fd9a:	9305      	str	r3, [sp, #20]
 800fd9c:	bf45      	ittet	mi
 800fd9e:	f1c5 0301 	rsbmi	r3, r5, #1
 800fda2:	9304      	strmi	r3, [sp, #16]
 800fda4:	2300      	movpl	r3, #0
 800fda6:	2300      	movmi	r3, #0
 800fda8:	bf4c      	ite	mi
 800fdaa:	9305      	strmi	r3, [sp, #20]
 800fdac:	9304      	strpl	r3, [sp, #16]
 800fdae:	9b00      	ldr	r3, [sp, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	db3d      	blt.n	800fe30 <_dtoa_r+0x248>
 800fdb4:	9b05      	ldr	r3, [sp, #20]
 800fdb6:	9a00      	ldr	r2, [sp, #0]
 800fdb8:	920a      	str	r2, [sp, #40]	; 0x28
 800fdba:	4413      	add	r3, r2
 800fdbc:	9305      	str	r3, [sp, #20]
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	9307      	str	r3, [sp, #28]
 800fdc2:	9b06      	ldr	r3, [sp, #24]
 800fdc4:	2b09      	cmp	r3, #9
 800fdc6:	f200 8089 	bhi.w	800fedc <_dtoa_r+0x2f4>
 800fdca:	2b05      	cmp	r3, #5
 800fdcc:	bfc4      	itt	gt
 800fdce:	3b04      	subgt	r3, #4
 800fdd0:	9306      	strgt	r3, [sp, #24]
 800fdd2:	9b06      	ldr	r3, [sp, #24]
 800fdd4:	f1a3 0302 	sub.w	r3, r3, #2
 800fdd8:	bfcc      	ite	gt
 800fdda:	2500      	movgt	r5, #0
 800fddc:	2501      	movle	r5, #1
 800fdde:	2b03      	cmp	r3, #3
 800fde0:	f200 8087 	bhi.w	800fef2 <_dtoa_r+0x30a>
 800fde4:	e8df f003 	tbb	[pc, r3]
 800fde8:	59383a2d 	.word	0x59383a2d
 800fdec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fdf0:	441d      	add	r5, r3
 800fdf2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fdf6:	2b20      	cmp	r3, #32
 800fdf8:	bfc1      	itttt	gt
 800fdfa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fdfe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fe02:	fa0b f303 	lslgt.w	r3, fp, r3
 800fe06:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fe0a:	bfda      	itte	le
 800fe0c:	f1c3 0320 	rsble	r3, r3, #32
 800fe10:	fa06 f003 	lslle.w	r0, r6, r3
 800fe14:	4318      	orrgt	r0, r3
 800fe16:	f7f0 fb75 	bl	8000504 <__aeabi_ui2d>
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	4606      	mov	r6, r0
 800fe1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fe22:	3d01      	subs	r5, #1
 800fe24:	930e      	str	r3, [sp, #56]	; 0x38
 800fe26:	e76a      	b.n	800fcfe <_dtoa_r+0x116>
 800fe28:	2301      	movs	r3, #1
 800fe2a:	e7b2      	b.n	800fd92 <_dtoa_r+0x1aa>
 800fe2c:	900b      	str	r0, [sp, #44]	; 0x2c
 800fe2e:	e7b1      	b.n	800fd94 <_dtoa_r+0x1ac>
 800fe30:	9b04      	ldr	r3, [sp, #16]
 800fe32:	9a00      	ldr	r2, [sp, #0]
 800fe34:	1a9b      	subs	r3, r3, r2
 800fe36:	9304      	str	r3, [sp, #16]
 800fe38:	4253      	negs	r3, r2
 800fe3a:	9307      	str	r3, [sp, #28]
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	930a      	str	r3, [sp, #40]	; 0x28
 800fe40:	e7bf      	b.n	800fdc2 <_dtoa_r+0x1da>
 800fe42:	2300      	movs	r3, #0
 800fe44:	9308      	str	r3, [sp, #32]
 800fe46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	dc55      	bgt.n	800fef8 <_dtoa_r+0x310>
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fe52:	461a      	mov	r2, r3
 800fe54:	9209      	str	r2, [sp, #36]	; 0x24
 800fe56:	e00c      	b.n	800fe72 <_dtoa_r+0x28a>
 800fe58:	2301      	movs	r3, #1
 800fe5a:	e7f3      	b.n	800fe44 <_dtoa_r+0x25c>
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe60:	9308      	str	r3, [sp, #32]
 800fe62:	9b00      	ldr	r3, [sp, #0]
 800fe64:	4413      	add	r3, r2
 800fe66:	9302      	str	r3, [sp, #8]
 800fe68:	3301      	adds	r3, #1
 800fe6a:	2b01      	cmp	r3, #1
 800fe6c:	9303      	str	r3, [sp, #12]
 800fe6e:	bfb8      	it	lt
 800fe70:	2301      	movlt	r3, #1
 800fe72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fe74:	2200      	movs	r2, #0
 800fe76:	6042      	str	r2, [r0, #4]
 800fe78:	2204      	movs	r2, #4
 800fe7a:	f102 0614 	add.w	r6, r2, #20
 800fe7e:	429e      	cmp	r6, r3
 800fe80:	6841      	ldr	r1, [r0, #4]
 800fe82:	d93d      	bls.n	800ff00 <_dtoa_r+0x318>
 800fe84:	4620      	mov	r0, r4
 800fe86:	f000 fdef 	bl	8010a68 <_Balloc>
 800fe8a:	9001      	str	r0, [sp, #4]
 800fe8c:	2800      	cmp	r0, #0
 800fe8e:	d13b      	bne.n	800ff08 <_dtoa_r+0x320>
 800fe90:	4b11      	ldr	r3, [pc, #68]	; (800fed8 <_dtoa_r+0x2f0>)
 800fe92:	4602      	mov	r2, r0
 800fe94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fe98:	e6c0      	b.n	800fc1c <_dtoa_r+0x34>
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	e7df      	b.n	800fe5e <_dtoa_r+0x276>
 800fe9e:	bf00      	nop
 800fea0:	636f4361 	.word	0x636f4361
 800fea4:	3fd287a7 	.word	0x3fd287a7
 800fea8:	8b60c8b3 	.word	0x8b60c8b3
 800feac:	3fc68a28 	.word	0x3fc68a28
 800feb0:	509f79fb 	.word	0x509f79fb
 800feb4:	3fd34413 	.word	0x3fd34413
 800feb8:	080158d9 	.word	0x080158d9
 800febc:	080158f0 	.word	0x080158f0
 800fec0:	7ff00000 	.word	0x7ff00000
 800fec4:	080158d5 	.word	0x080158d5
 800fec8:	080158cc 	.word	0x080158cc
 800fecc:	080158a9 	.word	0x080158a9
 800fed0:	3ff80000 	.word	0x3ff80000
 800fed4:	080159e0 	.word	0x080159e0
 800fed8:	0801594b 	.word	0x0801594b
 800fedc:	2501      	movs	r5, #1
 800fede:	2300      	movs	r3, #0
 800fee0:	9306      	str	r3, [sp, #24]
 800fee2:	9508      	str	r5, [sp, #32]
 800fee4:	f04f 33ff 	mov.w	r3, #4294967295
 800fee8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800feec:	2200      	movs	r2, #0
 800feee:	2312      	movs	r3, #18
 800fef0:	e7b0      	b.n	800fe54 <_dtoa_r+0x26c>
 800fef2:	2301      	movs	r3, #1
 800fef4:	9308      	str	r3, [sp, #32]
 800fef6:	e7f5      	b.n	800fee4 <_dtoa_r+0x2fc>
 800fef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fefa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fefe:	e7b8      	b.n	800fe72 <_dtoa_r+0x28a>
 800ff00:	3101      	adds	r1, #1
 800ff02:	6041      	str	r1, [r0, #4]
 800ff04:	0052      	lsls	r2, r2, #1
 800ff06:	e7b8      	b.n	800fe7a <_dtoa_r+0x292>
 800ff08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff0a:	9a01      	ldr	r2, [sp, #4]
 800ff0c:	601a      	str	r2, [r3, #0]
 800ff0e:	9b03      	ldr	r3, [sp, #12]
 800ff10:	2b0e      	cmp	r3, #14
 800ff12:	f200 809d 	bhi.w	8010050 <_dtoa_r+0x468>
 800ff16:	2d00      	cmp	r5, #0
 800ff18:	f000 809a 	beq.w	8010050 <_dtoa_r+0x468>
 800ff1c:	9b00      	ldr	r3, [sp, #0]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	dd32      	ble.n	800ff88 <_dtoa_r+0x3a0>
 800ff22:	4ab7      	ldr	r2, [pc, #732]	; (8010200 <_dtoa_r+0x618>)
 800ff24:	f003 030f 	and.w	r3, r3, #15
 800ff28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ff2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ff30:	9b00      	ldr	r3, [sp, #0]
 800ff32:	05d8      	lsls	r0, r3, #23
 800ff34:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ff38:	d516      	bpl.n	800ff68 <_dtoa_r+0x380>
 800ff3a:	4bb2      	ldr	r3, [pc, #712]	; (8010204 <_dtoa_r+0x61c>)
 800ff3c:	ec51 0b19 	vmov	r0, r1, d9
 800ff40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ff44:	f7f0 fc82 	bl	800084c <__aeabi_ddiv>
 800ff48:	f007 070f 	and.w	r7, r7, #15
 800ff4c:	4682      	mov	sl, r0
 800ff4e:	468b      	mov	fp, r1
 800ff50:	2503      	movs	r5, #3
 800ff52:	4eac      	ldr	r6, [pc, #688]	; (8010204 <_dtoa_r+0x61c>)
 800ff54:	b957      	cbnz	r7, 800ff6c <_dtoa_r+0x384>
 800ff56:	4642      	mov	r2, r8
 800ff58:	464b      	mov	r3, r9
 800ff5a:	4650      	mov	r0, sl
 800ff5c:	4659      	mov	r1, fp
 800ff5e:	f7f0 fc75 	bl	800084c <__aeabi_ddiv>
 800ff62:	4682      	mov	sl, r0
 800ff64:	468b      	mov	fp, r1
 800ff66:	e028      	b.n	800ffba <_dtoa_r+0x3d2>
 800ff68:	2502      	movs	r5, #2
 800ff6a:	e7f2      	b.n	800ff52 <_dtoa_r+0x36a>
 800ff6c:	07f9      	lsls	r1, r7, #31
 800ff6e:	d508      	bpl.n	800ff82 <_dtoa_r+0x39a>
 800ff70:	4640      	mov	r0, r8
 800ff72:	4649      	mov	r1, r9
 800ff74:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ff78:	f7f0 fb3e 	bl	80005f8 <__aeabi_dmul>
 800ff7c:	3501      	adds	r5, #1
 800ff7e:	4680      	mov	r8, r0
 800ff80:	4689      	mov	r9, r1
 800ff82:	107f      	asrs	r7, r7, #1
 800ff84:	3608      	adds	r6, #8
 800ff86:	e7e5      	b.n	800ff54 <_dtoa_r+0x36c>
 800ff88:	f000 809b 	beq.w	80100c2 <_dtoa_r+0x4da>
 800ff8c:	9b00      	ldr	r3, [sp, #0]
 800ff8e:	4f9d      	ldr	r7, [pc, #628]	; (8010204 <_dtoa_r+0x61c>)
 800ff90:	425e      	negs	r6, r3
 800ff92:	4b9b      	ldr	r3, [pc, #620]	; (8010200 <_dtoa_r+0x618>)
 800ff94:	f006 020f 	and.w	r2, r6, #15
 800ff98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa0:	ec51 0b19 	vmov	r0, r1, d9
 800ffa4:	f7f0 fb28 	bl	80005f8 <__aeabi_dmul>
 800ffa8:	1136      	asrs	r6, r6, #4
 800ffaa:	4682      	mov	sl, r0
 800ffac:	468b      	mov	fp, r1
 800ffae:	2300      	movs	r3, #0
 800ffb0:	2502      	movs	r5, #2
 800ffb2:	2e00      	cmp	r6, #0
 800ffb4:	d17a      	bne.n	80100ac <_dtoa_r+0x4c4>
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d1d3      	bne.n	800ff62 <_dtoa_r+0x37a>
 800ffba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	f000 8082 	beq.w	80100c6 <_dtoa_r+0x4de>
 800ffc2:	4b91      	ldr	r3, [pc, #580]	; (8010208 <_dtoa_r+0x620>)
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	4650      	mov	r0, sl
 800ffc8:	4659      	mov	r1, fp
 800ffca:	f7f0 fd87 	bl	8000adc <__aeabi_dcmplt>
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	d079      	beq.n	80100c6 <_dtoa_r+0x4de>
 800ffd2:	9b03      	ldr	r3, [sp, #12]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d076      	beq.n	80100c6 <_dtoa_r+0x4de>
 800ffd8:	9b02      	ldr	r3, [sp, #8]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	dd36      	ble.n	801004c <_dtoa_r+0x464>
 800ffde:	9b00      	ldr	r3, [sp, #0]
 800ffe0:	4650      	mov	r0, sl
 800ffe2:	4659      	mov	r1, fp
 800ffe4:	1e5f      	subs	r7, r3, #1
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	4b88      	ldr	r3, [pc, #544]	; (801020c <_dtoa_r+0x624>)
 800ffea:	f7f0 fb05 	bl	80005f8 <__aeabi_dmul>
 800ffee:	9e02      	ldr	r6, [sp, #8]
 800fff0:	4682      	mov	sl, r0
 800fff2:	468b      	mov	fp, r1
 800fff4:	3501      	adds	r5, #1
 800fff6:	4628      	mov	r0, r5
 800fff8:	f7f0 fa94 	bl	8000524 <__aeabi_i2d>
 800fffc:	4652      	mov	r2, sl
 800fffe:	465b      	mov	r3, fp
 8010000:	f7f0 fafa 	bl	80005f8 <__aeabi_dmul>
 8010004:	4b82      	ldr	r3, [pc, #520]	; (8010210 <_dtoa_r+0x628>)
 8010006:	2200      	movs	r2, #0
 8010008:	f7f0 f940 	bl	800028c <__adddf3>
 801000c:	46d0      	mov	r8, sl
 801000e:	46d9      	mov	r9, fp
 8010010:	4682      	mov	sl, r0
 8010012:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010016:	2e00      	cmp	r6, #0
 8010018:	d158      	bne.n	80100cc <_dtoa_r+0x4e4>
 801001a:	4b7e      	ldr	r3, [pc, #504]	; (8010214 <_dtoa_r+0x62c>)
 801001c:	2200      	movs	r2, #0
 801001e:	4640      	mov	r0, r8
 8010020:	4649      	mov	r1, r9
 8010022:	f7f0 f931 	bl	8000288 <__aeabi_dsub>
 8010026:	4652      	mov	r2, sl
 8010028:	465b      	mov	r3, fp
 801002a:	4680      	mov	r8, r0
 801002c:	4689      	mov	r9, r1
 801002e:	f7f0 fd73 	bl	8000b18 <__aeabi_dcmpgt>
 8010032:	2800      	cmp	r0, #0
 8010034:	f040 8295 	bne.w	8010562 <_dtoa_r+0x97a>
 8010038:	4652      	mov	r2, sl
 801003a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801003e:	4640      	mov	r0, r8
 8010040:	4649      	mov	r1, r9
 8010042:	f7f0 fd4b 	bl	8000adc <__aeabi_dcmplt>
 8010046:	2800      	cmp	r0, #0
 8010048:	f040 8289 	bne.w	801055e <_dtoa_r+0x976>
 801004c:	ec5b ab19 	vmov	sl, fp, d9
 8010050:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010052:	2b00      	cmp	r3, #0
 8010054:	f2c0 8148 	blt.w	80102e8 <_dtoa_r+0x700>
 8010058:	9a00      	ldr	r2, [sp, #0]
 801005a:	2a0e      	cmp	r2, #14
 801005c:	f300 8144 	bgt.w	80102e8 <_dtoa_r+0x700>
 8010060:	4b67      	ldr	r3, [pc, #412]	; (8010200 <_dtoa_r+0x618>)
 8010062:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010066:	e9d3 8900 	ldrd	r8, r9, [r3]
 801006a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801006c:	2b00      	cmp	r3, #0
 801006e:	f280 80d5 	bge.w	801021c <_dtoa_r+0x634>
 8010072:	9b03      	ldr	r3, [sp, #12]
 8010074:	2b00      	cmp	r3, #0
 8010076:	f300 80d1 	bgt.w	801021c <_dtoa_r+0x634>
 801007a:	f040 826f 	bne.w	801055c <_dtoa_r+0x974>
 801007e:	4b65      	ldr	r3, [pc, #404]	; (8010214 <_dtoa_r+0x62c>)
 8010080:	2200      	movs	r2, #0
 8010082:	4640      	mov	r0, r8
 8010084:	4649      	mov	r1, r9
 8010086:	f7f0 fab7 	bl	80005f8 <__aeabi_dmul>
 801008a:	4652      	mov	r2, sl
 801008c:	465b      	mov	r3, fp
 801008e:	f7f0 fd39 	bl	8000b04 <__aeabi_dcmpge>
 8010092:	9e03      	ldr	r6, [sp, #12]
 8010094:	4637      	mov	r7, r6
 8010096:	2800      	cmp	r0, #0
 8010098:	f040 8245 	bne.w	8010526 <_dtoa_r+0x93e>
 801009c:	9d01      	ldr	r5, [sp, #4]
 801009e:	2331      	movs	r3, #49	; 0x31
 80100a0:	f805 3b01 	strb.w	r3, [r5], #1
 80100a4:	9b00      	ldr	r3, [sp, #0]
 80100a6:	3301      	adds	r3, #1
 80100a8:	9300      	str	r3, [sp, #0]
 80100aa:	e240      	b.n	801052e <_dtoa_r+0x946>
 80100ac:	07f2      	lsls	r2, r6, #31
 80100ae:	d505      	bpl.n	80100bc <_dtoa_r+0x4d4>
 80100b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100b4:	f7f0 faa0 	bl	80005f8 <__aeabi_dmul>
 80100b8:	3501      	adds	r5, #1
 80100ba:	2301      	movs	r3, #1
 80100bc:	1076      	asrs	r6, r6, #1
 80100be:	3708      	adds	r7, #8
 80100c0:	e777      	b.n	800ffb2 <_dtoa_r+0x3ca>
 80100c2:	2502      	movs	r5, #2
 80100c4:	e779      	b.n	800ffba <_dtoa_r+0x3d2>
 80100c6:	9f00      	ldr	r7, [sp, #0]
 80100c8:	9e03      	ldr	r6, [sp, #12]
 80100ca:	e794      	b.n	800fff6 <_dtoa_r+0x40e>
 80100cc:	9901      	ldr	r1, [sp, #4]
 80100ce:	4b4c      	ldr	r3, [pc, #304]	; (8010200 <_dtoa_r+0x618>)
 80100d0:	4431      	add	r1, r6
 80100d2:	910d      	str	r1, [sp, #52]	; 0x34
 80100d4:	9908      	ldr	r1, [sp, #32]
 80100d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80100da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80100de:	2900      	cmp	r1, #0
 80100e0:	d043      	beq.n	801016a <_dtoa_r+0x582>
 80100e2:	494d      	ldr	r1, [pc, #308]	; (8010218 <_dtoa_r+0x630>)
 80100e4:	2000      	movs	r0, #0
 80100e6:	f7f0 fbb1 	bl	800084c <__aeabi_ddiv>
 80100ea:	4652      	mov	r2, sl
 80100ec:	465b      	mov	r3, fp
 80100ee:	f7f0 f8cb 	bl	8000288 <__aeabi_dsub>
 80100f2:	9d01      	ldr	r5, [sp, #4]
 80100f4:	4682      	mov	sl, r0
 80100f6:	468b      	mov	fp, r1
 80100f8:	4649      	mov	r1, r9
 80100fa:	4640      	mov	r0, r8
 80100fc:	f7f0 fd2c 	bl	8000b58 <__aeabi_d2iz>
 8010100:	4606      	mov	r6, r0
 8010102:	f7f0 fa0f 	bl	8000524 <__aeabi_i2d>
 8010106:	4602      	mov	r2, r0
 8010108:	460b      	mov	r3, r1
 801010a:	4640      	mov	r0, r8
 801010c:	4649      	mov	r1, r9
 801010e:	f7f0 f8bb 	bl	8000288 <__aeabi_dsub>
 8010112:	3630      	adds	r6, #48	; 0x30
 8010114:	f805 6b01 	strb.w	r6, [r5], #1
 8010118:	4652      	mov	r2, sl
 801011a:	465b      	mov	r3, fp
 801011c:	4680      	mov	r8, r0
 801011e:	4689      	mov	r9, r1
 8010120:	f7f0 fcdc 	bl	8000adc <__aeabi_dcmplt>
 8010124:	2800      	cmp	r0, #0
 8010126:	d163      	bne.n	80101f0 <_dtoa_r+0x608>
 8010128:	4642      	mov	r2, r8
 801012a:	464b      	mov	r3, r9
 801012c:	4936      	ldr	r1, [pc, #216]	; (8010208 <_dtoa_r+0x620>)
 801012e:	2000      	movs	r0, #0
 8010130:	f7f0 f8aa 	bl	8000288 <__aeabi_dsub>
 8010134:	4652      	mov	r2, sl
 8010136:	465b      	mov	r3, fp
 8010138:	f7f0 fcd0 	bl	8000adc <__aeabi_dcmplt>
 801013c:	2800      	cmp	r0, #0
 801013e:	f040 80b5 	bne.w	80102ac <_dtoa_r+0x6c4>
 8010142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010144:	429d      	cmp	r5, r3
 8010146:	d081      	beq.n	801004c <_dtoa_r+0x464>
 8010148:	4b30      	ldr	r3, [pc, #192]	; (801020c <_dtoa_r+0x624>)
 801014a:	2200      	movs	r2, #0
 801014c:	4650      	mov	r0, sl
 801014e:	4659      	mov	r1, fp
 8010150:	f7f0 fa52 	bl	80005f8 <__aeabi_dmul>
 8010154:	4b2d      	ldr	r3, [pc, #180]	; (801020c <_dtoa_r+0x624>)
 8010156:	4682      	mov	sl, r0
 8010158:	468b      	mov	fp, r1
 801015a:	4640      	mov	r0, r8
 801015c:	4649      	mov	r1, r9
 801015e:	2200      	movs	r2, #0
 8010160:	f7f0 fa4a 	bl	80005f8 <__aeabi_dmul>
 8010164:	4680      	mov	r8, r0
 8010166:	4689      	mov	r9, r1
 8010168:	e7c6      	b.n	80100f8 <_dtoa_r+0x510>
 801016a:	4650      	mov	r0, sl
 801016c:	4659      	mov	r1, fp
 801016e:	f7f0 fa43 	bl	80005f8 <__aeabi_dmul>
 8010172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010174:	9d01      	ldr	r5, [sp, #4]
 8010176:	930f      	str	r3, [sp, #60]	; 0x3c
 8010178:	4682      	mov	sl, r0
 801017a:	468b      	mov	fp, r1
 801017c:	4649      	mov	r1, r9
 801017e:	4640      	mov	r0, r8
 8010180:	f7f0 fcea 	bl	8000b58 <__aeabi_d2iz>
 8010184:	4606      	mov	r6, r0
 8010186:	f7f0 f9cd 	bl	8000524 <__aeabi_i2d>
 801018a:	3630      	adds	r6, #48	; 0x30
 801018c:	4602      	mov	r2, r0
 801018e:	460b      	mov	r3, r1
 8010190:	4640      	mov	r0, r8
 8010192:	4649      	mov	r1, r9
 8010194:	f7f0 f878 	bl	8000288 <__aeabi_dsub>
 8010198:	f805 6b01 	strb.w	r6, [r5], #1
 801019c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801019e:	429d      	cmp	r5, r3
 80101a0:	4680      	mov	r8, r0
 80101a2:	4689      	mov	r9, r1
 80101a4:	f04f 0200 	mov.w	r2, #0
 80101a8:	d124      	bne.n	80101f4 <_dtoa_r+0x60c>
 80101aa:	4b1b      	ldr	r3, [pc, #108]	; (8010218 <_dtoa_r+0x630>)
 80101ac:	4650      	mov	r0, sl
 80101ae:	4659      	mov	r1, fp
 80101b0:	f7f0 f86c 	bl	800028c <__adddf3>
 80101b4:	4602      	mov	r2, r0
 80101b6:	460b      	mov	r3, r1
 80101b8:	4640      	mov	r0, r8
 80101ba:	4649      	mov	r1, r9
 80101bc:	f7f0 fcac 	bl	8000b18 <__aeabi_dcmpgt>
 80101c0:	2800      	cmp	r0, #0
 80101c2:	d173      	bne.n	80102ac <_dtoa_r+0x6c4>
 80101c4:	4652      	mov	r2, sl
 80101c6:	465b      	mov	r3, fp
 80101c8:	4913      	ldr	r1, [pc, #76]	; (8010218 <_dtoa_r+0x630>)
 80101ca:	2000      	movs	r0, #0
 80101cc:	f7f0 f85c 	bl	8000288 <__aeabi_dsub>
 80101d0:	4602      	mov	r2, r0
 80101d2:	460b      	mov	r3, r1
 80101d4:	4640      	mov	r0, r8
 80101d6:	4649      	mov	r1, r9
 80101d8:	f7f0 fc80 	bl	8000adc <__aeabi_dcmplt>
 80101dc:	2800      	cmp	r0, #0
 80101de:	f43f af35 	beq.w	801004c <_dtoa_r+0x464>
 80101e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80101e4:	1e6b      	subs	r3, r5, #1
 80101e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80101e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80101ec:	2b30      	cmp	r3, #48	; 0x30
 80101ee:	d0f8      	beq.n	80101e2 <_dtoa_r+0x5fa>
 80101f0:	9700      	str	r7, [sp, #0]
 80101f2:	e049      	b.n	8010288 <_dtoa_r+0x6a0>
 80101f4:	4b05      	ldr	r3, [pc, #20]	; (801020c <_dtoa_r+0x624>)
 80101f6:	f7f0 f9ff 	bl	80005f8 <__aeabi_dmul>
 80101fa:	4680      	mov	r8, r0
 80101fc:	4689      	mov	r9, r1
 80101fe:	e7bd      	b.n	801017c <_dtoa_r+0x594>
 8010200:	080159e0 	.word	0x080159e0
 8010204:	080159b8 	.word	0x080159b8
 8010208:	3ff00000 	.word	0x3ff00000
 801020c:	40240000 	.word	0x40240000
 8010210:	401c0000 	.word	0x401c0000
 8010214:	40140000 	.word	0x40140000
 8010218:	3fe00000 	.word	0x3fe00000
 801021c:	9d01      	ldr	r5, [sp, #4]
 801021e:	4656      	mov	r6, sl
 8010220:	465f      	mov	r7, fp
 8010222:	4642      	mov	r2, r8
 8010224:	464b      	mov	r3, r9
 8010226:	4630      	mov	r0, r6
 8010228:	4639      	mov	r1, r7
 801022a:	f7f0 fb0f 	bl	800084c <__aeabi_ddiv>
 801022e:	f7f0 fc93 	bl	8000b58 <__aeabi_d2iz>
 8010232:	4682      	mov	sl, r0
 8010234:	f7f0 f976 	bl	8000524 <__aeabi_i2d>
 8010238:	4642      	mov	r2, r8
 801023a:	464b      	mov	r3, r9
 801023c:	f7f0 f9dc 	bl	80005f8 <__aeabi_dmul>
 8010240:	4602      	mov	r2, r0
 8010242:	460b      	mov	r3, r1
 8010244:	4630      	mov	r0, r6
 8010246:	4639      	mov	r1, r7
 8010248:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801024c:	f7f0 f81c 	bl	8000288 <__aeabi_dsub>
 8010250:	f805 6b01 	strb.w	r6, [r5], #1
 8010254:	9e01      	ldr	r6, [sp, #4]
 8010256:	9f03      	ldr	r7, [sp, #12]
 8010258:	1bae      	subs	r6, r5, r6
 801025a:	42b7      	cmp	r7, r6
 801025c:	4602      	mov	r2, r0
 801025e:	460b      	mov	r3, r1
 8010260:	d135      	bne.n	80102ce <_dtoa_r+0x6e6>
 8010262:	f7f0 f813 	bl	800028c <__adddf3>
 8010266:	4642      	mov	r2, r8
 8010268:	464b      	mov	r3, r9
 801026a:	4606      	mov	r6, r0
 801026c:	460f      	mov	r7, r1
 801026e:	f7f0 fc53 	bl	8000b18 <__aeabi_dcmpgt>
 8010272:	b9d0      	cbnz	r0, 80102aa <_dtoa_r+0x6c2>
 8010274:	4642      	mov	r2, r8
 8010276:	464b      	mov	r3, r9
 8010278:	4630      	mov	r0, r6
 801027a:	4639      	mov	r1, r7
 801027c:	f7f0 fc24 	bl	8000ac8 <__aeabi_dcmpeq>
 8010280:	b110      	cbz	r0, 8010288 <_dtoa_r+0x6a0>
 8010282:	f01a 0f01 	tst.w	sl, #1
 8010286:	d110      	bne.n	80102aa <_dtoa_r+0x6c2>
 8010288:	4620      	mov	r0, r4
 801028a:	ee18 1a10 	vmov	r1, s16
 801028e:	f000 fc2b 	bl	8010ae8 <_Bfree>
 8010292:	2300      	movs	r3, #0
 8010294:	9800      	ldr	r0, [sp, #0]
 8010296:	702b      	strb	r3, [r5, #0]
 8010298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801029a:	3001      	adds	r0, #1
 801029c:	6018      	str	r0, [r3, #0]
 801029e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	f43f acf1 	beq.w	800fc88 <_dtoa_r+0xa0>
 80102a6:	601d      	str	r5, [r3, #0]
 80102a8:	e4ee      	b.n	800fc88 <_dtoa_r+0xa0>
 80102aa:	9f00      	ldr	r7, [sp, #0]
 80102ac:	462b      	mov	r3, r5
 80102ae:	461d      	mov	r5, r3
 80102b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80102b4:	2a39      	cmp	r2, #57	; 0x39
 80102b6:	d106      	bne.n	80102c6 <_dtoa_r+0x6de>
 80102b8:	9a01      	ldr	r2, [sp, #4]
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d1f7      	bne.n	80102ae <_dtoa_r+0x6c6>
 80102be:	9901      	ldr	r1, [sp, #4]
 80102c0:	2230      	movs	r2, #48	; 0x30
 80102c2:	3701      	adds	r7, #1
 80102c4:	700a      	strb	r2, [r1, #0]
 80102c6:	781a      	ldrb	r2, [r3, #0]
 80102c8:	3201      	adds	r2, #1
 80102ca:	701a      	strb	r2, [r3, #0]
 80102cc:	e790      	b.n	80101f0 <_dtoa_r+0x608>
 80102ce:	4ba6      	ldr	r3, [pc, #664]	; (8010568 <_dtoa_r+0x980>)
 80102d0:	2200      	movs	r2, #0
 80102d2:	f7f0 f991 	bl	80005f8 <__aeabi_dmul>
 80102d6:	2200      	movs	r2, #0
 80102d8:	2300      	movs	r3, #0
 80102da:	4606      	mov	r6, r0
 80102dc:	460f      	mov	r7, r1
 80102de:	f7f0 fbf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80102e2:	2800      	cmp	r0, #0
 80102e4:	d09d      	beq.n	8010222 <_dtoa_r+0x63a>
 80102e6:	e7cf      	b.n	8010288 <_dtoa_r+0x6a0>
 80102e8:	9a08      	ldr	r2, [sp, #32]
 80102ea:	2a00      	cmp	r2, #0
 80102ec:	f000 80d7 	beq.w	801049e <_dtoa_r+0x8b6>
 80102f0:	9a06      	ldr	r2, [sp, #24]
 80102f2:	2a01      	cmp	r2, #1
 80102f4:	f300 80ba 	bgt.w	801046c <_dtoa_r+0x884>
 80102f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80102fa:	2a00      	cmp	r2, #0
 80102fc:	f000 80b2 	beq.w	8010464 <_dtoa_r+0x87c>
 8010300:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010304:	9e07      	ldr	r6, [sp, #28]
 8010306:	9d04      	ldr	r5, [sp, #16]
 8010308:	9a04      	ldr	r2, [sp, #16]
 801030a:	441a      	add	r2, r3
 801030c:	9204      	str	r2, [sp, #16]
 801030e:	9a05      	ldr	r2, [sp, #20]
 8010310:	2101      	movs	r1, #1
 8010312:	441a      	add	r2, r3
 8010314:	4620      	mov	r0, r4
 8010316:	9205      	str	r2, [sp, #20]
 8010318:	f000 fc9e 	bl	8010c58 <__i2b>
 801031c:	4607      	mov	r7, r0
 801031e:	2d00      	cmp	r5, #0
 8010320:	dd0c      	ble.n	801033c <_dtoa_r+0x754>
 8010322:	9b05      	ldr	r3, [sp, #20]
 8010324:	2b00      	cmp	r3, #0
 8010326:	dd09      	ble.n	801033c <_dtoa_r+0x754>
 8010328:	42ab      	cmp	r3, r5
 801032a:	9a04      	ldr	r2, [sp, #16]
 801032c:	bfa8      	it	ge
 801032e:	462b      	movge	r3, r5
 8010330:	1ad2      	subs	r2, r2, r3
 8010332:	9204      	str	r2, [sp, #16]
 8010334:	9a05      	ldr	r2, [sp, #20]
 8010336:	1aed      	subs	r5, r5, r3
 8010338:	1ad3      	subs	r3, r2, r3
 801033a:	9305      	str	r3, [sp, #20]
 801033c:	9b07      	ldr	r3, [sp, #28]
 801033e:	b31b      	cbz	r3, 8010388 <_dtoa_r+0x7a0>
 8010340:	9b08      	ldr	r3, [sp, #32]
 8010342:	2b00      	cmp	r3, #0
 8010344:	f000 80af 	beq.w	80104a6 <_dtoa_r+0x8be>
 8010348:	2e00      	cmp	r6, #0
 801034a:	dd13      	ble.n	8010374 <_dtoa_r+0x78c>
 801034c:	4639      	mov	r1, r7
 801034e:	4632      	mov	r2, r6
 8010350:	4620      	mov	r0, r4
 8010352:	f000 fd41 	bl	8010dd8 <__pow5mult>
 8010356:	ee18 2a10 	vmov	r2, s16
 801035a:	4601      	mov	r1, r0
 801035c:	4607      	mov	r7, r0
 801035e:	4620      	mov	r0, r4
 8010360:	f000 fc90 	bl	8010c84 <__multiply>
 8010364:	ee18 1a10 	vmov	r1, s16
 8010368:	4680      	mov	r8, r0
 801036a:	4620      	mov	r0, r4
 801036c:	f000 fbbc 	bl	8010ae8 <_Bfree>
 8010370:	ee08 8a10 	vmov	s16, r8
 8010374:	9b07      	ldr	r3, [sp, #28]
 8010376:	1b9a      	subs	r2, r3, r6
 8010378:	d006      	beq.n	8010388 <_dtoa_r+0x7a0>
 801037a:	ee18 1a10 	vmov	r1, s16
 801037e:	4620      	mov	r0, r4
 8010380:	f000 fd2a 	bl	8010dd8 <__pow5mult>
 8010384:	ee08 0a10 	vmov	s16, r0
 8010388:	2101      	movs	r1, #1
 801038a:	4620      	mov	r0, r4
 801038c:	f000 fc64 	bl	8010c58 <__i2b>
 8010390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010392:	2b00      	cmp	r3, #0
 8010394:	4606      	mov	r6, r0
 8010396:	f340 8088 	ble.w	80104aa <_dtoa_r+0x8c2>
 801039a:	461a      	mov	r2, r3
 801039c:	4601      	mov	r1, r0
 801039e:	4620      	mov	r0, r4
 80103a0:	f000 fd1a 	bl	8010dd8 <__pow5mult>
 80103a4:	9b06      	ldr	r3, [sp, #24]
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	4606      	mov	r6, r0
 80103aa:	f340 8081 	ble.w	80104b0 <_dtoa_r+0x8c8>
 80103ae:	f04f 0800 	mov.w	r8, #0
 80103b2:	6933      	ldr	r3, [r6, #16]
 80103b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80103b8:	6918      	ldr	r0, [r3, #16]
 80103ba:	f000 fbfd 	bl	8010bb8 <__hi0bits>
 80103be:	f1c0 0020 	rsb	r0, r0, #32
 80103c2:	9b05      	ldr	r3, [sp, #20]
 80103c4:	4418      	add	r0, r3
 80103c6:	f010 001f 	ands.w	r0, r0, #31
 80103ca:	f000 8092 	beq.w	80104f2 <_dtoa_r+0x90a>
 80103ce:	f1c0 0320 	rsb	r3, r0, #32
 80103d2:	2b04      	cmp	r3, #4
 80103d4:	f340 808a 	ble.w	80104ec <_dtoa_r+0x904>
 80103d8:	f1c0 001c 	rsb	r0, r0, #28
 80103dc:	9b04      	ldr	r3, [sp, #16]
 80103de:	4403      	add	r3, r0
 80103e0:	9304      	str	r3, [sp, #16]
 80103e2:	9b05      	ldr	r3, [sp, #20]
 80103e4:	4403      	add	r3, r0
 80103e6:	4405      	add	r5, r0
 80103e8:	9305      	str	r3, [sp, #20]
 80103ea:	9b04      	ldr	r3, [sp, #16]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	dd07      	ble.n	8010400 <_dtoa_r+0x818>
 80103f0:	ee18 1a10 	vmov	r1, s16
 80103f4:	461a      	mov	r2, r3
 80103f6:	4620      	mov	r0, r4
 80103f8:	f000 fd48 	bl	8010e8c <__lshift>
 80103fc:	ee08 0a10 	vmov	s16, r0
 8010400:	9b05      	ldr	r3, [sp, #20]
 8010402:	2b00      	cmp	r3, #0
 8010404:	dd05      	ble.n	8010412 <_dtoa_r+0x82a>
 8010406:	4631      	mov	r1, r6
 8010408:	461a      	mov	r2, r3
 801040a:	4620      	mov	r0, r4
 801040c:	f000 fd3e 	bl	8010e8c <__lshift>
 8010410:	4606      	mov	r6, r0
 8010412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010414:	2b00      	cmp	r3, #0
 8010416:	d06e      	beq.n	80104f6 <_dtoa_r+0x90e>
 8010418:	ee18 0a10 	vmov	r0, s16
 801041c:	4631      	mov	r1, r6
 801041e:	f000 fda5 	bl	8010f6c <__mcmp>
 8010422:	2800      	cmp	r0, #0
 8010424:	da67      	bge.n	80104f6 <_dtoa_r+0x90e>
 8010426:	9b00      	ldr	r3, [sp, #0]
 8010428:	3b01      	subs	r3, #1
 801042a:	ee18 1a10 	vmov	r1, s16
 801042e:	9300      	str	r3, [sp, #0]
 8010430:	220a      	movs	r2, #10
 8010432:	2300      	movs	r3, #0
 8010434:	4620      	mov	r0, r4
 8010436:	f000 fb79 	bl	8010b2c <__multadd>
 801043a:	9b08      	ldr	r3, [sp, #32]
 801043c:	ee08 0a10 	vmov	s16, r0
 8010440:	2b00      	cmp	r3, #0
 8010442:	f000 81b1 	beq.w	80107a8 <_dtoa_r+0xbc0>
 8010446:	2300      	movs	r3, #0
 8010448:	4639      	mov	r1, r7
 801044a:	220a      	movs	r2, #10
 801044c:	4620      	mov	r0, r4
 801044e:	f000 fb6d 	bl	8010b2c <__multadd>
 8010452:	9b02      	ldr	r3, [sp, #8]
 8010454:	2b00      	cmp	r3, #0
 8010456:	4607      	mov	r7, r0
 8010458:	f300 808e 	bgt.w	8010578 <_dtoa_r+0x990>
 801045c:	9b06      	ldr	r3, [sp, #24]
 801045e:	2b02      	cmp	r3, #2
 8010460:	dc51      	bgt.n	8010506 <_dtoa_r+0x91e>
 8010462:	e089      	b.n	8010578 <_dtoa_r+0x990>
 8010464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010466:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801046a:	e74b      	b.n	8010304 <_dtoa_r+0x71c>
 801046c:	9b03      	ldr	r3, [sp, #12]
 801046e:	1e5e      	subs	r6, r3, #1
 8010470:	9b07      	ldr	r3, [sp, #28]
 8010472:	42b3      	cmp	r3, r6
 8010474:	bfbf      	itttt	lt
 8010476:	9b07      	ldrlt	r3, [sp, #28]
 8010478:	9607      	strlt	r6, [sp, #28]
 801047a:	1af2      	sublt	r2, r6, r3
 801047c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801047e:	bfb6      	itet	lt
 8010480:	189b      	addlt	r3, r3, r2
 8010482:	1b9e      	subge	r6, r3, r6
 8010484:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010486:	9b03      	ldr	r3, [sp, #12]
 8010488:	bfb8      	it	lt
 801048a:	2600      	movlt	r6, #0
 801048c:	2b00      	cmp	r3, #0
 801048e:	bfb7      	itett	lt
 8010490:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010494:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010498:	1a9d      	sublt	r5, r3, r2
 801049a:	2300      	movlt	r3, #0
 801049c:	e734      	b.n	8010308 <_dtoa_r+0x720>
 801049e:	9e07      	ldr	r6, [sp, #28]
 80104a0:	9d04      	ldr	r5, [sp, #16]
 80104a2:	9f08      	ldr	r7, [sp, #32]
 80104a4:	e73b      	b.n	801031e <_dtoa_r+0x736>
 80104a6:	9a07      	ldr	r2, [sp, #28]
 80104a8:	e767      	b.n	801037a <_dtoa_r+0x792>
 80104aa:	9b06      	ldr	r3, [sp, #24]
 80104ac:	2b01      	cmp	r3, #1
 80104ae:	dc18      	bgt.n	80104e2 <_dtoa_r+0x8fa>
 80104b0:	f1ba 0f00 	cmp.w	sl, #0
 80104b4:	d115      	bne.n	80104e2 <_dtoa_r+0x8fa>
 80104b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80104ba:	b993      	cbnz	r3, 80104e2 <_dtoa_r+0x8fa>
 80104bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80104c0:	0d1b      	lsrs	r3, r3, #20
 80104c2:	051b      	lsls	r3, r3, #20
 80104c4:	b183      	cbz	r3, 80104e8 <_dtoa_r+0x900>
 80104c6:	9b04      	ldr	r3, [sp, #16]
 80104c8:	3301      	adds	r3, #1
 80104ca:	9304      	str	r3, [sp, #16]
 80104cc:	9b05      	ldr	r3, [sp, #20]
 80104ce:	3301      	adds	r3, #1
 80104d0:	9305      	str	r3, [sp, #20]
 80104d2:	f04f 0801 	mov.w	r8, #1
 80104d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104d8:	2b00      	cmp	r3, #0
 80104da:	f47f af6a 	bne.w	80103b2 <_dtoa_r+0x7ca>
 80104de:	2001      	movs	r0, #1
 80104e0:	e76f      	b.n	80103c2 <_dtoa_r+0x7da>
 80104e2:	f04f 0800 	mov.w	r8, #0
 80104e6:	e7f6      	b.n	80104d6 <_dtoa_r+0x8ee>
 80104e8:	4698      	mov	r8, r3
 80104ea:	e7f4      	b.n	80104d6 <_dtoa_r+0x8ee>
 80104ec:	f43f af7d 	beq.w	80103ea <_dtoa_r+0x802>
 80104f0:	4618      	mov	r0, r3
 80104f2:	301c      	adds	r0, #28
 80104f4:	e772      	b.n	80103dc <_dtoa_r+0x7f4>
 80104f6:	9b03      	ldr	r3, [sp, #12]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	dc37      	bgt.n	801056c <_dtoa_r+0x984>
 80104fc:	9b06      	ldr	r3, [sp, #24]
 80104fe:	2b02      	cmp	r3, #2
 8010500:	dd34      	ble.n	801056c <_dtoa_r+0x984>
 8010502:	9b03      	ldr	r3, [sp, #12]
 8010504:	9302      	str	r3, [sp, #8]
 8010506:	9b02      	ldr	r3, [sp, #8]
 8010508:	b96b      	cbnz	r3, 8010526 <_dtoa_r+0x93e>
 801050a:	4631      	mov	r1, r6
 801050c:	2205      	movs	r2, #5
 801050e:	4620      	mov	r0, r4
 8010510:	f000 fb0c 	bl	8010b2c <__multadd>
 8010514:	4601      	mov	r1, r0
 8010516:	4606      	mov	r6, r0
 8010518:	ee18 0a10 	vmov	r0, s16
 801051c:	f000 fd26 	bl	8010f6c <__mcmp>
 8010520:	2800      	cmp	r0, #0
 8010522:	f73f adbb 	bgt.w	801009c <_dtoa_r+0x4b4>
 8010526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010528:	9d01      	ldr	r5, [sp, #4]
 801052a:	43db      	mvns	r3, r3
 801052c:	9300      	str	r3, [sp, #0]
 801052e:	f04f 0800 	mov.w	r8, #0
 8010532:	4631      	mov	r1, r6
 8010534:	4620      	mov	r0, r4
 8010536:	f000 fad7 	bl	8010ae8 <_Bfree>
 801053a:	2f00      	cmp	r7, #0
 801053c:	f43f aea4 	beq.w	8010288 <_dtoa_r+0x6a0>
 8010540:	f1b8 0f00 	cmp.w	r8, #0
 8010544:	d005      	beq.n	8010552 <_dtoa_r+0x96a>
 8010546:	45b8      	cmp	r8, r7
 8010548:	d003      	beq.n	8010552 <_dtoa_r+0x96a>
 801054a:	4641      	mov	r1, r8
 801054c:	4620      	mov	r0, r4
 801054e:	f000 facb 	bl	8010ae8 <_Bfree>
 8010552:	4639      	mov	r1, r7
 8010554:	4620      	mov	r0, r4
 8010556:	f000 fac7 	bl	8010ae8 <_Bfree>
 801055a:	e695      	b.n	8010288 <_dtoa_r+0x6a0>
 801055c:	2600      	movs	r6, #0
 801055e:	4637      	mov	r7, r6
 8010560:	e7e1      	b.n	8010526 <_dtoa_r+0x93e>
 8010562:	9700      	str	r7, [sp, #0]
 8010564:	4637      	mov	r7, r6
 8010566:	e599      	b.n	801009c <_dtoa_r+0x4b4>
 8010568:	40240000 	.word	0x40240000
 801056c:	9b08      	ldr	r3, [sp, #32]
 801056e:	2b00      	cmp	r3, #0
 8010570:	f000 80ca 	beq.w	8010708 <_dtoa_r+0xb20>
 8010574:	9b03      	ldr	r3, [sp, #12]
 8010576:	9302      	str	r3, [sp, #8]
 8010578:	2d00      	cmp	r5, #0
 801057a:	dd05      	ble.n	8010588 <_dtoa_r+0x9a0>
 801057c:	4639      	mov	r1, r7
 801057e:	462a      	mov	r2, r5
 8010580:	4620      	mov	r0, r4
 8010582:	f000 fc83 	bl	8010e8c <__lshift>
 8010586:	4607      	mov	r7, r0
 8010588:	f1b8 0f00 	cmp.w	r8, #0
 801058c:	d05b      	beq.n	8010646 <_dtoa_r+0xa5e>
 801058e:	6879      	ldr	r1, [r7, #4]
 8010590:	4620      	mov	r0, r4
 8010592:	f000 fa69 	bl	8010a68 <_Balloc>
 8010596:	4605      	mov	r5, r0
 8010598:	b928      	cbnz	r0, 80105a6 <_dtoa_r+0x9be>
 801059a:	4b87      	ldr	r3, [pc, #540]	; (80107b8 <_dtoa_r+0xbd0>)
 801059c:	4602      	mov	r2, r0
 801059e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80105a2:	f7ff bb3b 	b.w	800fc1c <_dtoa_r+0x34>
 80105a6:	693a      	ldr	r2, [r7, #16]
 80105a8:	3202      	adds	r2, #2
 80105aa:	0092      	lsls	r2, r2, #2
 80105ac:	f107 010c 	add.w	r1, r7, #12
 80105b0:	300c      	adds	r0, #12
 80105b2:	f7fe fb92 	bl	800ecda <memcpy>
 80105b6:	2201      	movs	r2, #1
 80105b8:	4629      	mov	r1, r5
 80105ba:	4620      	mov	r0, r4
 80105bc:	f000 fc66 	bl	8010e8c <__lshift>
 80105c0:	9b01      	ldr	r3, [sp, #4]
 80105c2:	f103 0901 	add.w	r9, r3, #1
 80105c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80105ca:	4413      	add	r3, r2
 80105cc:	9305      	str	r3, [sp, #20]
 80105ce:	f00a 0301 	and.w	r3, sl, #1
 80105d2:	46b8      	mov	r8, r7
 80105d4:	9304      	str	r3, [sp, #16]
 80105d6:	4607      	mov	r7, r0
 80105d8:	4631      	mov	r1, r6
 80105da:	ee18 0a10 	vmov	r0, s16
 80105de:	f7ff fa75 	bl	800facc <quorem>
 80105e2:	4641      	mov	r1, r8
 80105e4:	9002      	str	r0, [sp, #8]
 80105e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80105ea:	ee18 0a10 	vmov	r0, s16
 80105ee:	f000 fcbd 	bl	8010f6c <__mcmp>
 80105f2:	463a      	mov	r2, r7
 80105f4:	9003      	str	r0, [sp, #12]
 80105f6:	4631      	mov	r1, r6
 80105f8:	4620      	mov	r0, r4
 80105fa:	f000 fcd3 	bl	8010fa4 <__mdiff>
 80105fe:	68c2      	ldr	r2, [r0, #12]
 8010600:	f109 3bff 	add.w	fp, r9, #4294967295
 8010604:	4605      	mov	r5, r0
 8010606:	bb02      	cbnz	r2, 801064a <_dtoa_r+0xa62>
 8010608:	4601      	mov	r1, r0
 801060a:	ee18 0a10 	vmov	r0, s16
 801060e:	f000 fcad 	bl	8010f6c <__mcmp>
 8010612:	4602      	mov	r2, r0
 8010614:	4629      	mov	r1, r5
 8010616:	4620      	mov	r0, r4
 8010618:	9207      	str	r2, [sp, #28]
 801061a:	f000 fa65 	bl	8010ae8 <_Bfree>
 801061e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010622:	ea43 0102 	orr.w	r1, r3, r2
 8010626:	9b04      	ldr	r3, [sp, #16]
 8010628:	430b      	orrs	r3, r1
 801062a:	464d      	mov	r5, r9
 801062c:	d10f      	bne.n	801064e <_dtoa_r+0xa66>
 801062e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010632:	d02a      	beq.n	801068a <_dtoa_r+0xaa2>
 8010634:	9b03      	ldr	r3, [sp, #12]
 8010636:	2b00      	cmp	r3, #0
 8010638:	dd02      	ble.n	8010640 <_dtoa_r+0xa58>
 801063a:	9b02      	ldr	r3, [sp, #8]
 801063c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010640:	f88b a000 	strb.w	sl, [fp]
 8010644:	e775      	b.n	8010532 <_dtoa_r+0x94a>
 8010646:	4638      	mov	r0, r7
 8010648:	e7ba      	b.n	80105c0 <_dtoa_r+0x9d8>
 801064a:	2201      	movs	r2, #1
 801064c:	e7e2      	b.n	8010614 <_dtoa_r+0xa2c>
 801064e:	9b03      	ldr	r3, [sp, #12]
 8010650:	2b00      	cmp	r3, #0
 8010652:	db04      	blt.n	801065e <_dtoa_r+0xa76>
 8010654:	9906      	ldr	r1, [sp, #24]
 8010656:	430b      	orrs	r3, r1
 8010658:	9904      	ldr	r1, [sp, #16]
 801065a:	430b      	orrs	r3, r1
 801065c:	d122      	bne.n	80106a4 <_dtoa_r+0xabc>
 801065e:	2a00      	cmp	r2, #0
 8010660:	ddee      	ble.n	8010640 <_dtoa_r+0xa58>
 8010662:	ee18 1a10 	vmov	r1, s16
 8010666:	2201      	movs	r2, #1
 8010668:	4620      	mov	r0, r4
 801066a:	f000 fc0f 	bl	8010e8c <__lshift>
 801066e:	4631      	mov	r1, r6
 8010670:	ee08 0a10 	vmov	s16, r0
 8010674:	f000 fc7a 	bl	8010f6c <__mcmp>
 8010678:	2800      	cmp	r0, #0
 801067a:	dc03      	bgt.n	8010684 <_dtoa_r+0xa9c>
 801067c:	d1e0      	bne.n	8010640 <_dtoa_r+0xa58>
 801067e:	f01a 0f01 	tst.w	sl, #1
 8010682:	d0dd      	beq.n	8010640 <_dtoa_r+0xa58>
 8010684:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010688:	d1d7      	bne.n	801063a <_dtoa_r+0xa52>
 801068a:	2339      	movs	r3, #57	; 0x39
 801068c:	f88b 3000 	strb.w	r3, [fp]
 8010690:	462b      	mov	r3, r5
 8010692:	461d      	mov	r5, r3
 8010694:	3b01      	subs	r3, #1
 8010696:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801069a:	2a39      	cmp	r2, #57	; 0x39
 801069c:	d071      	beq.n	8010782 <_dtoa_r+0xb9a>
 801069e:	3201      	adds	r2, #1
 80106a0:	701a      	strb	r2, [r3, #0]
 80106a2:	e746      	b.n	8010532 <_dtoa_r+0x94a>
 80106a4:	2a00      	cmp	r2, #0
 80106a6:	dd07      	ble.n	80106b8 <_dtoa_r+0xad0>
 80106a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80106ac:	d0ed      	beq.n	801068a <_dtoa_r+0xaa2>
 80106ae:	f10a 0301 	add.w	r3, sl, #1
 80106b2:	f88b 3000 	strb.w	r3, [fp]
 80106b6:	e73c      	b.n	8010532 <_dtoa_r+0x94a>
 80106b8:	9b05      	ldr	r3, [sp, #20]
 80106ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80106be:	4599      	cmp	r9, r3
 80106c0:	d047      	beq.n	8010752 <_dtoa_r+0xb6a>
 80106c2:	ee18 1a10 	vmov	r1, s16
 80106c6:	2300      	movs	r3, #0
 80106c8:	220a      	movs	r2, #10
 80106ca:	4620      	mov	r0, r4
 80106cc:	f000 fa2e 	bl	8010b2c <__multadd>
 80106d0:	45b8      	cmp	r8, r7
 80106d2:	ee08 0a10 	vmov	s16, r0
 80106d6:	f04f 0300 	mov.w	r3, #0
 80106da:	f04f 020a 	mov.w	r2, #10
 80106de:	4641      	mov	r1, r8
 80106e0:	4620      	mov	r0, r4
 80106e2:	d106      	bne.n	80106f2 <_dtoa_r+0xb0a>
 80106e4:	f000 fa22 	bl	8010b2c <__multadd>
 80106e8:	4680      	mov	r8, r0
 80106ea:	4607      	mov	r7, r0
 80106ec:	f109 0901 	add.w	r9, r9, #1
 80106f0:	e772      	b.n	80105d8 <_dtoa_r+0x9f0>
 80106f2:	f000 fa1b 	bl	8010b2c <__multadd>
 80106f6:	4639      	mov	r1, r7
 80106f8:	4680      	mov	r8, r0
 80106fa:	2300      	movs	r3, #0
 80106fc:	220a      	movs	r2, #10
 80106fe:	4620      	mov	r0, r4
 8010700:	f000 fa14 	bl	8010b2c <__multadd>
 8010704:	4607      	mov	r7, r0
 8010706:	e7f1      	b.n	80106ec <_dtoa_r+0xb04>
 8010708:	9b03      	ldr	r3, [sp, #12]
 801070a:	9302      	str	r3, [sp, #8]
 801070c:	9d01      	ldr	r5, [sp, #4]
 801070e:	ee18 0a10 	vmov	r0, s16
 8010712:	4631      	mov	r1, r6
 8010714:	f7ff f9da 	bl	800facc <quorem>
 8010718:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801071c:	9b01      	ldr	r3, [sp, #4]
 801071e:	f805 ab01 	strb.w	sl, [r5], #1
 8010722:	1aea      	subs	r2, r5, r3
 8010724:	9b02      	ldr	r3, [sp, #8]
 8010726:	4293      	cmp	r3, r2
 8010728:	dd09      	ble.n	801073e <_dtoa_r+0xb56>
 801072a:	ee18 1a10 	vmov	r1, s16
 801072e:	2300      	movs	r3, #0
 8010730:	220a      	movs	r2, #10
 8010732:	4620      	mov	r0, r4
 8010734:	f000 f9fa 	bl	8010b2c <__multadd>
 8010738:	ee08 0a10 	vmov	s16, r0
 801073c:	e7e7      	b.n	801070e <_dtoa_r+0xb26>
 801073e:	9b02      	ldr	r3, [sp, #8]
 8010740:	2b00      	cmp	r3, #0
 8010742:	bfc8      	it	gt
 8010744:	461d      	movgt	r5, r3
 8010746:	9b01      	ldr	r3, [sp, #4]
 8010748:	bfd8      	it	le
 801074a:	2501      	movle	r5, #1
 801074c:	441d      	add	r5, r3
 801074e:	f04f 0800 	mov.w	r8, #0
 8010752:	ee18 1a10 	vmov	r1, s16
 8010756:	2201      	movs	r2, #1
 8010758:	4620      	mov	r0, r4
 801075a:	f000 fb97 	bl	8010e8c <__lshift>
 801075e:	4631      	mov	r1, r6
 8010760:	ee08 0a10 	vmov	s16, r0
 8010764:	f000 fc02 	bl	8010f6c <__mcmp>
 8010768:	2800      	cmp	r0, #0
 801076a:	dc91      	bgt.n	8010690 <_dtoa_r+0xaa8>
 801076c:	d102      	bne.n	8010774 <_dtoa_r+0xb8c>
 801076e:	f01a 0f01 	tst.w	sl, #1
 8010772:	d18d      	bne.n	8010690 <_dtoa_r+0xaa8>
 8010774:	462b      	mov	r3, r5
 8010776:	461d      	mov	r5, r3
 8010778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801077c:	2a30      	cmp	r2, #48	; 0x30
 801077e:	d0fa      	beq.n	8010776 <_dtoa_r+0xb8e>
 8010780:	e6d7      	b.n	8010532 <_dtoa_r+0x94a>
 8010782:	9a01      	ldr	r2, [sp, #4]
 8010784:	429a      	cmp	r2, r3
 8010786:	d184      	bne.n	8010692 <_dtoa_r+0xaaa>
 8010788:	9b00      	ldr	r3, [sp, #0]
 801078a:	3301      	adds	r3, #1
 801078c:	9300      	str	r3, [sp, #0]
 801078e:	2331      	movs	r3, #49	; 0x31
 8010790:	7013      	strb	r3, [r2, #0]
 8010792:	e6ce      	b.n	8010532 <_dtoa_r+0x94a>
 8010794:	4b09      	ldr	r3, [pc, #36]	; (80107bc <_dtoa_r+0xbd4>)
 8010796:	f7ff ba95 	b.w	800fcc4 <_dtoa_r+0xdc>
 801079a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801079c:	2b00      	cmp	r3, #0
 801079e:	f47f aa6e 	bne.w	800fc7e <_dtoa_r+0x96>
 80107a2:	4b07      	ldr	r3, [pc, #28]	; (80107c0 <_dtoa_r+0xbd8>)
 80107a4:	f7ff ba8e 	b.w	800fcc4 <_dtoa_r+0xdc>
 80107a8:	9b02      	ldr	r3, [sp, #8]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	dcae      	bgt.n	801070c <_dtoa_r+0xb24>
 80107ae:	9b06      	ldr	r3, [sp, #24]
 80107b0:	2b02      	cmp	r3, #2
 80107b2:	f73f aea8 	bgt.w	8010506 <_dtoa_r+0x91e>
 80107b6:	e7a9      	b.n	801070c <_dtoa_r+0xb24>
 80107b8:	0801594b 	.word	0x0801594b
 80107bc:	080158a8 	.word	0x080158a8
 80107c0:	080158cc 	.word	0x080158cc

080107c4 <__sflush_r>:
 80107c4:	898a      	ldrh	r2, [r1, #12]
 80107c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107ca:	4605      	mov	r5, r0
 80107cc:	0710      	lsls	r0, r2, #28
 80107ce:	460c      	mov	r4, r1
 80107d0:	d458      	bmi.n	8010884 <__sflush_r+0xc0>
 80107d2:	684b      	ldr	r3, [r1, #4]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	dc05      	bgt.n	80107e4 <__sflush_r+0x20>
 80107d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80107da:	2b00      	cmp	r3, #0
 80107dc:	dc02      	bgt.n	80107e4 <__sflush_r+0x20>
 80107de:	2000      	movs	r0, #0
 80107e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107e6:	2e00      	cmp	r6, #0
 80107e8:	d0f9      	beq.n	80107de <__sflush_r+0x1a>
 80107ea:	2300      	movs	r3, #0
 80107ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80107f0:	682f      	ldr	r7, [r5, #0]
 80107f2:	602b      	str	r3, [r5, #0]
 80107f4:	d032      	beq.n	801085c <__sflush_r+0x98>
 80107f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80107f8:	89a3      	ldrh	r3, [r4, #12]
 80107fa:	075a      	lsls	r2, r3, #29
 80107fc:	d505      	bpl.n	801080a <__sflush_r+0x46>
 80107fe:	6863      	ldr	r3, [r4, #4]
 8010800:	1ac0      	subs	r0, r0, r3
 8010802:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010804:	b10b      	cbz	r3, 801080a <__sflush_r+0x46>
 8010806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010808:	1ac0      	subs	r0, r0, r3
 801080a:	2300      	movs	r3, #0
 801080c:	4602      	mov	r2, r0
 801080e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010810:	6a21      	ldr	r1, [r4, #32]
 8010812:	4628      	mov	r0, r5
 8010814:	47b0      	blx	r6
 8010816:	1c43      	adds	r3, r0, #1
 8010818:	89a3      	ldrh	r3, [r4, #12]
 801081a:	d106      	bne.n	801082a <__sflush_r+0x66>
 801081c:	6829      	ldr	r1, [r5, #0]
 801081e:	291d      	cmp	r1, #29
 8010820:	d82c      	bhi.n	801087c <__sflush_r+0xb8>
 8010822:	4a2a      	ldr	r2, [pc, #168]	; (80108cc <__sflush_r+0x108>)
 8010824:	40ca      	lsrs	r2, r1
 8010826:	07d6      	lsls	r6, r2, #31
 8010828:	d528      	bpl.n	801087c <__sflush_r+0xb8>
 801082a:	2200      	movs	r2, #0
 801082c:	6062      	str	r2, [r4, #4]
 801082e:	04d9      	lsls	r1, r3, #19
 8010830:	6922      	ldr	r2, [r4, #16]
 8010832:	6022      	str	r2, [r4, #0]
 8010834:	d504      	bpl.n	8010840 <__sflush_r+0x7c>
 8010836:	1c42      	adds	r2, r0, #1
 8010838:	d101      	bne.n	801083e <__sflush_r+0x7a>
 801083a:	682b      	ldr	r3, [r5, #0]
 801083c:	b903      	cbnz	r3, 8010840 <__sflush_r+0x7c>
 801083e:	6560      	str	r0, [r4, #84]	; 0x54
 8010840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010842:	602f      	str	r7, [r5, #0]
 8010844:	2900      	cmp	r1, #0
 8010846:	d0ca      	beq.n	80107de <__sflush_r+0x1a>
 8010848:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801084c:	4299      	cmp	r1, r3
 801084e:	d002      	beq.n	8010856 <__sflush_r+0x92>
 8010850:	4628      	mov	r0, r5
 8010852:	f000 fca3 	bl	801119c <_free_r>
 8010856:	2000      	movs	r0, #0
 8010858:	6360      	str	r0, [r4, #52]	; 0x34
 801085a:	e7c1      	b.n	80107e0 <__sflush_r+0x1c>
 801085c:	6a21      	ldr	r1, [r4, #32]
 801085e:	2301      	movs	r3, #1
 8010860:	4628      	mov	r0, r5
 8010862:	47b0      	blx	r6
 8010864:	1c41      	adds	r1, r0, #1
 8010866:	d1c7      	bne.n	80107f8 <__sflush_r+0x34>
 8010868:	682b      	ldr	r3, [r5, #0]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d0c4      	beq.n	80107f8 <__sflush_r+0x34>
 801086e:	2b1d      	cmp	r3, #29
 8010870:	d001      	beq.n	8010876 <__sflush_r+0xb2>
 8010872:	2b16      	cmp	r3, #22
 8010874:	d101      	bne.n	801087a <__sflush_r+0xb6>
 8010876:	602f      	str	r7, [r5, #0]
 8010878:	e7b1      	b.n	80107de <__sflush_r+0x1a>
 801087a:	89a3      	ldrh	r3, [r4, #12]
 801087c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010880:	81a3      	strh	r3, [r4, #12]
 8010882:	e7ad      	b.n	80107e0 <__sflush_r+0x1c>
 8010884:	690f      	ldr	r7, [r1, #16]
 8010886:	2f00      	cmp	r7, #0
 8010888:	d0a9      	beq.n	80107de <__sflush_r+0x1a>
 801088a:	0793      	lsls	r3, r2, #30
 801088c:	680e      	ldr	r6, [r1, #0]
 801088e:	bf08      	it	eq
 8010890:	694b      	ldreq	r3, [r1, #20]
 8010892:	600f      	str	r7, [r1, #0]
 8010894:	bf18      	it	ne
 8010896:	2300      	movne	r3, #0
 8010898:	eba6 0807 	sub.w	r8, r6, r7
 801089c:	608b      	str	r3, [r1, #8]
 801089e:	f1b8 0f00 	cmp.w	r8, #0
 80108a2:	dd9c      	ble.n	80107de <__sflush_r+0x1a>
 80108a4:	6a21      	ldr	r1, [r4, #32]
 80108a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80108a8:	4643      	mov	r3, r8
 80108aa:	463a      	mov	r2, r7
 80108ac:	4628      	mov	r0, r5
 80108ae:	47b0      	blx	r6
 80108b0:	2800      	cmp	r0, #0
 80108b2:	dc06      	bgt.n	80108c2 <__sflush_r+0xfe>
 80108b4:	89a3      	ldrh	r3, [r4, #12]
 80108b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108ba:	81a3      	strh	r3, [r4, #12]
 80108bc:	f04f 30ff 	mov.w	r0, #4294967295
 80108c0:	e78e      	b.n	80107e0 <__sflush_r+0x1c>
 80108c2:	4407      	add	r7, r0
 80108c4:	eba8 0800 	sub.w	r8, r8, r0
 80108c8:	e7e9      	b.n	801089e <__sflush_r+0xda>
 80108ca:	bf00      	nop
 80108cc:	20400001 	.word	0x20400001

080108d0 <_fflush_r>:
 80108d0:	b538      	push	{r3, r4, r5, lr}
 80108d2:	690b      	ldr	r3, [r1, #16]
 80108d4:	4605      	mov	r5, r0
 80108d6:	460c      	mov	r4, r1
 80108d8:	b913      	cbnz	r3, 80108e0 <_fflush_r+0x10>
 80108da:	2500      	movs	r5, #0
 80108dc:	4628      	mov	r0, r5
 80108de:	bd38      	pop	{r3, r4, r5, pc}
 80108e0:	b118      	cbz	r0, 80108ea <_fflush_r+0x1a>
 80108e2:	6983      	ldr	r3, [r0, #24]
 80108e4:	b90b      	cbnz	r3, 80108ea <_fflush_r+0x1a>
 80108e6:	f7fe f933 	bl	800eb50 <__sinit>
 80108ea:	4b14      	ldr	r3, [pc, #80]	; (801093c <_fflush_r+0x6c>)
 80108ec:	429c      	cmp	r4, r3
 80108ee:	d11b      	bne.n	8010928 <_fflush_r+0x58>
 80108f0:	686c      	ldr	r4, [r5, #4]
 80108f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d0ef      	beq.n	80108da <_fflush_r+0xa>
 80108fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80108fc:	07d0      	lsls	r0, r2, #31
 80108fe:	d404      	bmi.n	801090a <_fflush_r+0x3a>
 8010900:	0599      	lsls	r1, r3, #22
 8010902:	d402      	bmi.n	801090a <_fflush_r+0x3a>
 8010904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010906:	f7fe f9e6 	bl	800ecd6 <__retarget_lock_acquire_recursive>
 801090a:	4628      	mov	r0, r5
 801090c:	4621      	mov	r1, r4
 801090e:	f7ff ff59 	bl	80107c4 <__sflush_r>
 8010912:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010914:	07da      	lsls	r2, r3, #31
 8010916:	4605      	mov	r5, r0
 8010918:	d4e0      	bmi.n	80108dc <_fflush_r+0xc>
 801091a:	89a3      	ldrh	r3, [r4, #12]
 801091c:	059b      	lsls	r3, r3, #22
 801091e:	d4dd      	bmi.n	80108dc <_fflush_r+0xc>
 8010920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010922:	f7fe f9d9 	bl	800ecd8 <__retarget_lock_release_recursive>
 8010926:	e7d9      	b.n	80108dc <_fflush_r+0xc>
 8010928:	4b05      	ldr	r3, [pc, #20]	; (8010940 <_fflush_r+0x70>)
 801092a:	429c      	cmp	r4, r3
 801092c:	d101      	bne.n	8010932 <_fflush_r+0x62>
 801092e:	68ac      	ldr	r4, [r5, #8]
 8010930:	e7df      	b.n	80108f2 <_fflush_r+0x22>
 8010932:	4b04      	ldr	r3, [pc, #16]	; (8010944 <_fflush_r+0x74>)
 8010934:	429c      	cmp	r4, r3
 8010936:	bf08      	it	eq
 8010938:	68ec      	ldreq	r4, [r5, #12]
 801093a:	e7da      	b.n	80108f2 <_fflush_r+0x22>
 801093c:	08015854 	.word	0x08015854
 8010940:	08015874 	.word	0x08015874
 8010944:	08015834 	.word	0x08015834

08010948 <_localeconv_r>:
 8010948:	4800      	ldr	r0, [pc, #0]	; (801094c <_localeconv_r+0x4>)
 801094a:	4770      	bx	lr
 801094c:	200001d4 	.word	0x200001d4

08010950 <_lseek_r>:
 8010950:	b538      	push	{r3, r4, r5, lr}
 8010952:	4d07      	ldr	r5, [pc, #28]	; (8010970 <_lseek_r+0x20>)
 8010954:	4604      	mov	r4, r0
 8010956:	4608      	mov	r0, r1
 8010958:	4611      	mov	r1, r2
 801095a:	2200      	movs	r2, #0
 801095c:	602a      	str	r2, [r5, #0]
 801095e:	461a      	mov	r2, r3
 8010960:	f7fd fe89 	bl	800e676 <_lseek>
 8010964:	1c43      	adds	r3, r0, #1
 8010966:	d102      	bne.n	801096e <_lseek_r+0x1e>
 8010968:	682b      	ldr	r3, [r5, #0]
 801096a:	b103      	cbz	r3, 801096e <_lseek_r+0x1e>
 801096c:	6023      	str	r3, [r4, #0]
 801096e:	bd38      	pop	{r3, r4, r5, pc}
 8010970:	20006488 	.word	0x20006488

08010974 <__swhatbuf_r>:
 8010974:	b570      	push	{r4, r5, r6, lr}
 8010976:	460e      	mov	r6, r1
 8010978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801097c:	2900      	cmp	r1, #0
 801097e:	b096      	sub	sp, #88	; 0x58
 8010980:	4614      	mov	r4, r2
 8010982:	461d      	mov	r5, r3
 8010984:	da08      	bge.n	8010998 <__swhatbuf_r+0x24>
 8010986:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801098a:	2200      	movs	r2, #0
 801098c:	602a      	str	r2, [r5, #0]
 801098e:	061a      	lsls	r2, r3, #24
 8010990:	d410      	bmi.n	80109b4 <__swhatbuf_r+0x40>
 8010992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010996:	e00e      	b.n	80109b6 <__swhatbuf_r+0x42>
 8010998:	466a      	mov	r2, sp
 801099a:	f000 ff43 	bl	8011824 <_fstat_r>
 801099e:	2800      	cmp	r0, #0
 80109a0:	dbf1      	blt.n	8010986 <__swhatbuf_r+0x12>
 80109a2:	9a01      	ldr	r2, [sp, #4]
 80109a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80109a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80109ac:	425a      	negs	r2, r3
 80109ae:	415a      	adcs	r2, r3
 80109b0:	602a      	str	r2, [r5, #0]
 80109b2:	e7ee      	b.n	8010992 <__swhatbuf_r+0x1e>
 80109b4:	2340      	movs	r3, #64	; 0x40
 80109b6:	2000      	movs	r0, #0
 80109b8:	6023      	str	r3, [r4, #0]
 80109ba:	b016      	add	sp, #88	; 0x58
 80109bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080109c0 <__smakebuf_r>:
 80109c0:	898b      	ldrh	r3, [r1, #12]
 80109c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80109c4:	079d      	lsls	r5, r3, #30
 80109c6:	4606      	mov	r6, r0
 80109c8:	460c      	mov	r4, r1
 80109ca:	d507      	bpl.n	80109dc <__smakebuf_r+0x1c>
 80109cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80109d0:	6023      	str	r3, [r4, #0]
 80109d2:	6123      	str	r3, [r4, #16]
 80109d4:	2301      	movs	r3, #1
 80109d6:	6163      	str	r3, [r4, #20]
 80109d8:	b002      	add	sp, #8
 80109da:	bd70      	pop	{r4, r5, r6, pc}
 80109dc:	ab01      	add	r3, sp, #4
 80109de:	466a      	mov	r2, sp
 80109e0:	f7ff ffc8 	bl	8010974 <__swhatbuf_r>
 80109e4:	9900      	ldr	r1, [sp, #0]
 80109e6:	4605      	mov	r5, r0
 80109e8:	4630      	mov	r0, r6
 80109ea:	f7fe f9ad 	bl	800ed48 <_malloc_r>
 80109ee:	b948      	cbnz	r0, 8010a04 <__smakebuf_r+0x44>
 80109f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109f4:	059a      	lsls	r2, r3, #22
 80109f6:	d4ef      	bmi.n	80109d8 <__smakebuf_r+0x18>
 80109f8:	f023 0303 	bic.w	r3, r3, #3
 80109fc:	f043 0302 	orr.w	r3, r3, #2
 8010a00:	81a3      	strh	r3, [r4, #12]
 8010a02:	e7e3      	b.n	80109cc <__smakebuf_r+0xc>
 8010a04:	4b0d      	ldr	r3, [pc, #52]	; (8010a3c <__smakebuf_r+0x7c>)
 8010a06:	62b3      	str	r3, [r6, #40]	; 0x28
 8010a08:	89a3      	ldrh	r3, [r4, #12]
 8010a0a:	6020      	str	r0, [r4, #0]
 8010a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a10:	81a3      	strh	r3, [r4, #12]
 8010a12:	9b00      	ldr	r3, [sp, #0]
 8010a14:	6163      	str	r3, [r4, #20]
 8010a16:	9b01      	ldr	r3, [sp, #4]
 8010a18:	6120      	str	r0, [r4, #16]
 8010a1a:	b15b      	cbz	r3, 8010a34 <__smakebuf_r+0x74>
 8010a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a20:	4630      	mov	r0, r6
 8010a22:	f000 ff11 	bl	8011848 <_isatty_r>
 8010a26:	b128      	cbz	r0, 8010a34 <__smakebuf_r+0x74>
 8010a28:	89a3      	ldrh	r3, [r4, #12]
 8010a2a:	f023 0303 	bic.w	r3, r3, #3
 8010a2e:	f043 0301 	orr.w	r3, r3, #1
 8010a32:	81a3      	strh	r3, [r4, #12]
 8010a34:	89a0      	ldrh	r0, [r4, #12]
 8010a36:	4305      	orrs	r5, r0
 8010a38:	81a5      	strh	r5, [r4, #12]
 8010a3a:	e7cd      	b.n	80109d8 <__smakebuf_r+0x18>
 8010a3c:	0800eae9 	.word	0x0800eae9

08010a40 <malloc>:
 8010a40:	4b02      	ldr	r3, [pc, #8]	; (8010a4c <malloc+0xc>)
 8010a42:	4601      	mov	r1, r0
 8010a44:	6818      	ldr	r0, [r3, #0]
 8010a46:	f7fe b97f 	b.w	800ed48 <_malloc_r>
 8010a4a:	bf00      	nop
 8010a4c:	20000080 	.word	0x20000080

08010a50 <__malloc_lock>:
 8010a50:	4801      	ldr	r0, [pc, #4]	; (8010a58 <__malloc_lock+0x8>)
 8010a52:	f7fe b940 	b.w	800ecd6 <__retarget_lock_acquire_recursive>
 8010a56:	bf00      	nop
 8010a58:	2000647c 	.word	0x2000647c

08010a5c <__malloc_unlock>:
 8010a5c:	4801      	ldr	r0, [pc, #4]	; (8010a64 <__malloc_unlock+0x8>)
 8010a5e:	f7fe b93b 	b.w	800ecd8 <__retarget_lock_release_recursive>
 8010a62:	bf00      	nop
 8010a64:	2000647c 	.word	0x2000647c

08010a68 <_Balloc>:
 8010a68:	b570      	push	{r4, r5, r6, lr}
 8010a6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a6c:	4604      	mov	r4, r0
 8010a6e:	460d      	mov	r5, r1
 8010a70:	b976      	cbnz	r6, 8010a90 <_Balloc+0x28>
 8010a72:	2010      	movs	r0, #16
 8010a74:	f7ff ffe4 	bl	8010a40 <malloc>
 8010a78:	4602      	mov	r2, r0
 8010a7a:	6260      	str	r0, [r4, #36]	; 0x24
 8010a7c:	b920      	cbnz	r0, 8010a88 <_Balloc+0x20>
 8010a7e:	4b18      	ldr	r3, [pc, #96]	; (8010ae0 <_Balloc+0x78>)
 8010a80:	4818      	ldr	r0, [pc, #96]	; (8010ae4 <_Balloc+0x7c>)
 8010a82:	2166      	movs	r1, #102	; 0x66
 8010a84:	f000 fe9e 	bl	80117c4 <__assert_func>
 8010a88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a8c:	6006      	str	r6, [r0, #0]
 8010a8e:	60c6      	str	r6, [r0, #12]
 8010a90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010a92:	68f3      	ldr	r3, [r6, #12]
 8010a94:	b183      	cbz	r3, 8010ab8 <_Balloc+0x50>
 8010a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a98:	68db      	ldr	r3, [r3, #12]
 8010a9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010a9e:	b9b8      	cbnz	r0, 8010ad0 <_Balloc+0x68>
 8010aa0:	2101      	movs	r1, #1
 8010aa2:	fa01 f605 	lsl.w	r6, r1, r5
 8010aa6:	1d72      	adds	r2, r6, #5
 8010aa8:	0092      	lsls	r2, r2, #2
 8010aaa:	4620      	mov	r0, r4
 8010aac:	f000 fb60 	bl	8011170 <_calloc_r>
 8010ab0:	b160      	cbz	r0, 8010acc <_Balloc+0x64>
 8010ab2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010ab6:	e00e      	b.n	8010ad6 <_Balloc+0x6e>
 8010ab8:	2221      	movs	r2, #33	; 0x21
 8010aba:	2104      	movs	r1, #4
 8010abc:	4620      	mov	r0, r4
 8010abe:	f000 fb57 	bl	8011170 <_calloc_r>
 8010ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ac4:	60f0      	str	r0, [r6, #12]
 8010ac6:	68db      	ldr	r3, [r3, #12]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d1e4      	bne.n	8010a96 <_Balloc+0x2e>
 8010acc:	2000      	movs	r0, #0
 8010ace:	bd70      	pop	{r4, r5, r6, pc}
 8010ad0:	6802      	ldr	r2, [r0, #0]
 8010ad2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010adc:	e7f7      	b.n	8010ace <_Balloc+0x66>
 8010ade:	bf00      	nop
 8010ae0:	080158d9 	.word	0x080158d9
 8010ae4:	0801595c 	.word	0x0801595c

08010ae8 <_Bfree>:
 8010ae8:	b570      	push	{r4, r5, r6, lr}
 8010aea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010aec:	4605      	mov	r5, r0
 8010aee:	460c      	mov	r4, r1
 8010af0:	b976      	cbnz	r6, 8010b10 <_Bfree+0x28>
 8010af2:	2010      	movs	r0, #16
 8010af4:	f7ff ffa4 	bl	8010a40 <malloc>
 8010af8:	4602      	mov	r2, r0
 8010afa:	6268      	str	r0, [r5, #36]	; 0x24
 8010afc:	b920      	cbnz	r0, 8010b08 <_Bfree+0x20>
 8010afe:	4b09      	ldr	r3, [pc, #36]	; (8010b24 <_Bfree+0x3c>)
 8010b00:	4809      	ldr	r0, [pc, #36]	; (8010b28 <_Bfree+0x40>)
 8010b02:	218a      	movs	r1, #138	; 0x8a
 8010b04:	f000 fe5e 	bl	80117c4 <__assert_func>
 8010b08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b0c:	6006      	str	r6, [r0, #0]
 8010b0e:	60c6      	str	r6, [r0, #12]
 8010b10:	b13c      	cbz	r4, 8010b22 <_Bfree+0x3a>
 8010b12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010b14:	6862      	ldr	r2, [r4, #4]
 8010b16:	68db      	ldr	r3, [r3, #12]
 8010b18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010b1c:	6021      	str	r1, [r4, #0]
 8010b1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010b22:	bd70      	pop	{r4, r5, r6, pc}
 8010b24:	080158d9 	.word	0x080158d9
 8010b28:	0801595c 	.word	0x0801595c

08010b2c <__multadd>:
 8010b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b30:	690d      	ldr	r5, [r1, #16]
 8010b32:	4607      	mov	r7, r0
 8010b34:	460c      	mov	r4, r1
 8010b36:	461e      	mov	r6, r3
 8010b38:	f101 0c14 	add.w	ip, r1, #20
 8010b3c:	2000      	movs	r0, #0
 8010b3e:	f8dc 3000 	ldr.w	r3, [ip]
 8010b42:	b299      	uxth	r1, r3
 8010b44:	fb02 6101 	mla	r1, r2, r1, r6
 8010b48:	0c1e      	lsrs	r6, r3, #16
 8010b4a:	0c0b      	lsrs	r3, r1, #16
 8010b4c:	fb02 3306 	mla	r3, r2, r6, r3
 8010b50:	b289      	uxth	r1, r1
 8010b52:	3001      	adds	r0, #1
 8010b54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010b58:	4285      	cmp	r5, r0
 8010b5a:	f84c 1b04 	str.w	r1, [ip], #4
 8010b5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010b62:	dcec      	bgt.n	8010b3e <__multadd+0x12>
 8010b64:	b30e      	cbz	r6, 8010baa <__multadd+0x7e>
 8010b66:	68a3      	ldr	r3, [r4, #8]
 8010b68:	42ab      	cmp	r3, r5
 8010b6a:	dc19      	bgt.n	8010ba0 <__multadd+0x74>
 8010b6c:	6861      	ldr	r1, [r4, #4]
 8010b6e:	4638      	mov	r0, r7
 8010b70:	3101      	adds	r1, #1
 8010b72:	f7ff ff79 	bl	8010a68 <_Balloc>
 8010b76:	4680      	mov	r8, r0
 8010b78:	b928      	cbnz	r0, 8010b86 <__multadd+0x5a>
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	4b0c      	ldr	r3, [pc, #48]	; (8010bb0 <__multadd+0x84>)
 8010b7e:	480d      	ldr	r0, [pc, #52]	; (8010bb4 <__multadd+0x88>)
 8010b80:	21b5      	movs	r1, #181	; 0xb5
 8010b82:	f000 fe1f 	bl	80117c4 <__assert_func>
 8010b86:	6922      	ldr	r2, [r4, #16]
 8010b88:	3202      	adds	r2, #2
 8010b8a:	f104 010c 	add.w	r1, r4, #12
 8010b8e:	0092      	lsls	r2, r2, #2
 8010b90:	300c      	adds	r0, #12
 8010b92:	f7fe f8a2 	bl	800ecda <memcpy>
 8010b96:	4621      	mov	r1, r4
 8010b98:	4638      	mov	r0, r7
 8010b9a:	f7ff ffa5 	bl	8010ae8 <_Bfree>
 8010b9e:	4644      	mov	r4, r8
 8010ba0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010ba4:	3501      	adds	r5, #1
 8010ba6:	615e      	str	r6, [r3, #20]
 8010ba8:	6125      	str	r5, [r4, #16]
 8010baa:	4620      	mov	r0, r4
 8010bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bb0:	0801594b 	.word	0x0801594b
 8010bb4:	0801595c 	.word	0x0801595c

08010bb8 <__hi0bits>:
 8010bb8:	0c03      	lsrs	r3, r0, #16
 8010bba:	041b      	lsls	r3, r3, #16
 8010bbc:	b9d3      	cbnz	r3, 8010bf4 <__hi0bits+0x3c>
 8010bbe:	0400      	lsls	r0, r0, #16
 8010bc0:	2310      	movs	r3, #16
 8010bc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010bc6:	bf04      	itt	eq
 8010bc8:	0200      	lsleq	r0, r0, #8
 8010bca:	3308      	addeq	r3, #8
 8010bcc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010bd0:	bf04      	itt	eq
 8010bd2:	0100      	lsleq	r0, r0, #4
 8010bd4:	3304      	addeq	r3, #4
 8010bd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010bda:	bf04      	itt	eq
 8010bdc:	0080      	lsleq	r0, r0, #2
 8010bde:	3302      	addeq	r3, #2
 8010be0:	2800      	cmp	r0, #0
 8010be2:	db05      	blt.n	8010bf0 <__hi0bits+0x38>
 8010be4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010be8:	f103 0301 	add.w	r3, r3, #1
 8010bec:	bf08      	it	eq
 8010bee:	2320      	moveq	r3, #32
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	4770      	bx	lr
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	e7e4      	b.n	8010bc2 <__hi0bits+0xa>

08010bf8 <__lo0bits>:
 8010bf8:	6803      	ldr	r3, [r0, #0]
 8010bfa:	f013 0207 	ands.w	r2, r3, #7
 8010bfe:	4601      	mov	r1, r0
 8010c00:	d00b      	beq.n	8010c1a <__lo0bits+0x22>
 8010c02:	07da      	lsls	r2, r3, #31
 8010c04:	d423      	bmi.n	8010c4e <__lo0bits+0x56>
 8010c06:	0798      	lsls	r0, r3, #30
 8010c08:	bf49      	itett	mi
 8010c0a:	085b      	lsrmi	r3, r3, #1
 8010c0c:	089b      	lsrpl	r3, r3, #2
 8010c0e:	2001      	movmi	r0, #1
 8010c10:	600b      	strmi	r3, [r1, #0]
 8010c12:	bf5c      	itt	pl
 8010c14:	600b      	strpl	r3, [r1, #0]
 8010c16:	2002      	movpl	r0, #2
 8010c18:	4770      	bx	lr
 8010c1a:	b298      	uxth	r0, r3
 8010c1c:	b9a8      	cbnz	r0, 8010c4a <__lo0bits+0x52>
 8010c1e:	0c1b      	lsrs	r3, r3, #16
 8010c20:	2010      	movs	r0, #16
 8010c22:	b2da      	uxtb	r2, r3
 8010c24:	b90a      	cbnz	r2, 8010c2a <__lo0bits+0x32>
 8010c26:	3008      	adds	r0, #8
 8010c28:	0a1b      	lsrs	r3, r3, #8
 8010c2a:	071a      	lsls	r2, r3, #28
 8010c2c:	bf04      	itt	eq
 8010c2e:	091b      	lsreq	r3, r3, #4
 8010c30:	3004      	addeq	r0, #4
 8010c32:	079a      	lsls	r2, r3, #30
 8010c34:	bf04      	itt	eq
 8010c36:	089b      	lsreq	r3, r3, #2
 8010c38:	3002      	addeq	r0, #2
 8010c3a:	07da      	lsls	r2, r3, #31
 8010c3c:	d403      	bmi.n	8010c46 <__lo0bits+0x4e>
 8010c3e:	085b      	lsrs	r3, r3, #1
 8010c40:	f100 0001 	add.w	r0, r0, #1
 8010c44:	d005      	beq.n	8010c52 <__lo0bits+0x5a>
 8010c46:	600b      	str	r3, [r1, #0]
 8010c48:	4770      	bx	lr
 8010c4a:	4610      	mov	r0, r2
 8010c4c:	e7e9      	b.n	8010c22 <__lo0bits+0x2a>
 8010c4e:	2000      	movs	r0, #0
 8010c50:	4770      	bx	lr
 8010c52:	2020      	movs	r0, #32
 8010c54:	4770      	bx	lr
	...

08010c58 <__i2b>:
 8010c58:	b510      	push	{r4, lr}
 8010c5a:	460c      	mov	r4, r1
 8010c5c:	2101      	movs	r1, #1
 8010c5e:	f7ff ff03 	bl	8010a68 <_Balloc>
 8010c62:	4602      	mov	r2, r0
 8010c64:	b928      	cbnz	r0, 8010c72 <__i2b+0x1a>
 8010c66:	4b05      	ldr	r3, [pc, #20]	; (8010c7c <__i2b+0x24>)
 8010c68:	4805      	ldr	r0, [pc, #20]	; (8010c80 <__i2b+0x28>)
 8010c6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010c6e:	f000 fda9 	bl	80117c4 <__assert_func>
 8010c72:	2301      	movs	r3, #1
 8010c74:	6144      	str	r4, [r0, #20]
 8010c76:	6103      	str	r3, [r0, #16]
 8010c78:	bd10      	pop	{r4, pc}
 8010c7a:	bf00      	nop
 8010c7c:	0801594b 	.word	0x0801594b
 8010c80:	0801595c 	.word	0x0801595c

08010c84 <__multiply>:
 8010c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c88:	4691      	mov	r9, r2
 8010c8a:	690a      	ldr	r2, [r1, #16]
 8010c8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c90:	429a      	cmp	r2, r3
 8010c92:	bfb8      	it	lt
 8010c94:	460b      	movlt	r3, r1
 8010c96:	460c      	mov	r4, r1
 8010c98:	bfbc      	itt	lt
 8010c9a:	464c      	movlt	r4, r9
 8010c9c:	4699      	movlt	r9, r3
 8010c9e:	6927      	ldr	r7, [r4, #16]
 8010ca0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010ca4:	68a3      	ldr	r3, [r4, #8]
 8010ca6:	6861      	ldr	r1, [r4, #4]
 8010ca8:	eb07 060a 	add.w	r6, r7, sl
 8010cac:	42b3      	cmp	r3, r6
 8010cae:	b085      	sub	sp, #20
 8010cb0:	bfb8      	it	lt
 8010cb2:	3101      	addlt	r1, #1
 8010cb4:	f7ff fed8 	bl	8010a68 <_Balloc>
 8010cb8:	b930      	cbnz	r0, 8010cc8 <__multiply+0x44>
 8010cba:	4602      	mov	r2, r0
 8010cbc:	4b44      	ldr	r3, [pc, #272]	; (8010dd0 <__multiply+0x14c>)
 8010cbe:	4845      	ldr	r0, [pc, #276]	; (8010dd4 <__multiply+0x150>)
 8010cc0:	f240 115d 	movw	r1, #349	; 0x15d
 8010cc4:	f000 fd7e 	bl	80117c4 <__assert_func>
 8010cc8:	f100 0514 	add.w	r5, r0, #20
 8010ccc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010cd0:	462b      	mov	r3, r5
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	4543      	cmp	r3, r8
 8010cd6:	d321      	bcc.n	8010d1c <__multiply+0x98>
 8010cd8:	f104 0314 	add.w	r3, r4, #20
 8010cdc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010ce0:	f109 0314 	add.w	r3, r9, #20
 8010ce4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010ce8:	9202      	str	r2, [sp, #8]
 8010cea:	1b3a      	subs	r2, r7, r4
 8010cec:	3a15      	subs	r2, #21
 8010cee:	f022 0203 	bic.w	r2, r2, #3
 8010cf2:	3204      	adds	r2, #4
 8010cf4:	f104 0115 	add.w	r1, r4, #21
 8010cf8:	428f      	cmp	r7, r1
 8010cfa:	bf38      	it	cc
 8010cfc:	2204      	movcc	r2, #4
 8010cfe:	9201      	str	r2, [sp, #4]
 8010d00:	9a02      	ldr	r2, [sp, #8]
 8010d02:	9303      	str	r3, [sp, #12]
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d80c      	bhi.n	8010d22 <__multiply+0x9e>
 8010d08:	2e00      	cmp	r6, #0
 8010d0a:	dd03      	ble.n	8010d14 <__multiply+0x90>
 8010d0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d05a      	beq.n	8010dca <__multiply+0x146>
 8010d14:	6106      	str	r6, [r0, #16]
 8010d16:	b005      	add	sp, #20
 8010d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d1c:	f843 2b04 	str.w	r2, [r3], #4
 8010d20:	e7d8      	b.n	8010cd4 <__multiply+0x50>
 8010d22:	f8b3 a000 	ldrh.w	sl, [r3]
 8010d26:	f1ba 0f00 	cmp.w	sl, #0
 8010d2a:	d024      	beq.n	8010d76 <__multiply+0xf2>
 8010d2c:	f104 0e14 	add.w	lr, r4, #20
 8010d30:	46a9      	mov	r9, r5
 8010d32:	f04f 0c00 	mov.w	ip, #0
 8010d36:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010d3a:	f8d9 1000 	ldr.w	r1, [r9]
 8010d3e:	fa1f fb82 	uxth.w	fp, r2
 8010d42:	b289      	uxth	r1, r1
 8010d44:	fb0a 110b 	mla	r1, sl, fp, r1
 8010d48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010d4c:	f8d9 2000 	ldr.w	r2, [r9]
 8010d50:	4461      	add	r1, ip
 8010d52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010d56:	fb0a c20b 	mla	r2, sl, fp, ip
 8010d5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010d5e:	b289      	uxth	r1, r1
 8010d60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010d64:	4577      	cmp	r7, lr
 8010d66:	f849 1b04 	str.w	r1, [r9], #4
 8010d6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010d6e:	d8e2      	bhi.n	8010d36 <__multiply+0xb2>
 8010d70:	9a01      	ldr	r2, [sp, #4]
 8010d72:	f845 c002 	str.w	ip, [r5, r2]
 8010d76:	9a03      	ldr	r2, [sp, #12]
 8010d78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010d7c:	3304      	adds	r3, #4
 8010d7e:	f1b9 0f00 	cmp.w	r9, #0
 8010d82:	d020      	beq.n	8010dc6 <__multiply+0x142>
 8010d84:	6829      	ldr	r1, [r5, #0]
 8010d86:	f104 0c14 	add.w	ip, r4, #20
 8010d8a:	46ae      	mov	lr, r5
 8010d8c:	f04f 0a00 	mov.w	sl, #0
 8010d90:	f8bc b000 	ldrh.w	fp, [ip]
 8010d94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010d98:	fb09 220b 	mla	r2, r9, fp, r2
 8010d9c:	4492      	add	sl, r2
 8010d9e:	b289      	uxth	r1, r1
 8010da0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010da4:	f84e 1b04 	str.w	r1, [lr], #4
 8010da8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010dac:	f8be 1000 	ldrh.w	r1, [lr]
 8010db0:	0c12      	lsrs	r2, r2, #16
 8010db2:	fb09 1102 	mla	r1, r9, r2, r1
 8010db6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010dba:	4567      	cmp	r7, ip
 8010dbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010dc0:	d8e6      	bhi.n	8010d90 <__multiply+0x10c>
 8010dc2:	9a01      	ldr	r2, [sp, #4]
 8010dc4:	50a9      	str	r1, [r5, r2]
 8010dc6:	3504      	adds	r5, #4
 8010dc8:	e79a      	b.n	8010d00 <__multiply+0x7c>
 8010dca:	3e01      	subs	r6, #1
 8010dcc:	e79c      	b.n	8010d08 <__multiply+0x84>
 8010dce:	bf00      	nop
 8010dd0:	0801594b 	.word	0x0801594b
 8010dd4:	0801595c 	.word	0x0801595c

08010dd8 <__pow5mult>:
 8010dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ddc:	4615      	mov	r5, r2
 8010dde:	f012 0203 	ands.w	r2, r2, #3
 8010de2:	4606      	mov	r6, r0
 8010de4:	460f      	mov	r7, r1
 8010de6:	d007      	beq.n	8010df8 <__pow5mult+0x20>
 8010de8:	4c25      	ldr	r4, [pc, #148]	; (8010e80 <__pow5mult+0xa8>)
 8010dea:	3a01      	subs	r2, #1
 8010dec:	2300      	movs	r3, #0
 8010dee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010df2:	f7ff fe9b 	bl	8010b2c <__multadd>
 8010df6:	4607      	mov	r7, r0
 8010df8:	10ad      	asrs	r5, r5, #2
 8010dfa:	d03d      	beq.n	8010e78 <__pow5mult+0xa0>
 8010dfc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010dfe:	b97c      	cbnz	r4, 8010e20 <__pow5mult+0x48>
 8010e00:	2010      	movs	r0, #16
 8010e02:	f7ff fe1d 	bl	8010a40 <malloc>
 8010e06:	4602      	mov	r2, r0
 8010e08:	6270      	str	r0, [r6, #36]	; 0x24
 8010e0a:	b928      	cbnz	r0, 8010e18 <__pow5mult+0x40>
 8010e0c:	4b1d      	ldr	r3, [pc, #116]	; (8010e84 <__pow5mult+0xac>)
 8010e0e:	481e      	ldr	r0, [pc, #120]	; (8010e88 <__pow5mult+0xb0>)
 8010e10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010e14:	f000 fcd6 	bl	80117c4 <__assert_func>
 8010e18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e1c:	6004      	str	r4, [r0, #0]
 8010e1e:	60c4      	str	r4, [r0, #12]
 8010e20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010e24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e28:	b94c      	cbnz	r4, 8010e3e <__pow5mult+0x66>
 8010e2a:	f240 2171 	movw	r1, #625	; 0x271
 8010e2e:	4630      	mov	r0, r6
 8010e30:	f7ff ff12 	bl	8010c58 <__i2b>
 8010e34:	2300      	movs	r3, #0
 8010e36:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e3a:	4604      	mov	r4, r0
 8010e3c:	6003      	str	r3, [r0, #0]
 8010e3e:	f04f 0900 	mov.w	r9, #0
 8010e42:	07eb      	lsls	r3, r5, #31
 8010e44:	d50a      	bpl.n	8010e5c <__pow5mult+0x84>
 8010e46:	4639      	mov	r1, r7
 8010e48:	4622      	mov	r2, r4
 8010e4a:	4630      	mov	r0, r6
 8010e4c:	f7ff ff1a 	bl	8010c84 <__multiply>
 8010e50:	4639      	mov	r1, r7
 8010e52:	4680      	mov	r8, r0
 8010e54:	4630      	mov	r0, r6
 8010e56:	f7ff fe47 	bl	8010ae8 <_Bfree>
 8010e5a:	4647      	mov	r7, r8
 8010e5c:	106d      	asrs	r5, r5, #1
 8010e5e:	d00b      	beq.n	8010e78 <__pow5mult+0xa0>
 8010e60:	6820      	ldr	r0, [r4, #0]
 8010e62:	b938      	cbnz	r0, 8010e74 <__pow5mult+0x9c>
 8010e64:	4622      	mov	r2, r4
 8010e66:	4621      	mov	r1, r4
 8010e68:	4630      	mov	r0, r6
 8010e6a:	f7ff ff0b 	bl	8010c84 <__multiply>
 8010e6e:	6020      	str	r0, [r4, #0]
 8010e70:	f8c0 9000 	str.w	r9, [r0]
 8010e74:	4604      	mov	r4, r0
 8010e76:	e7e4      	b.n	8010e42 <__pow5mult+0x6a>
 8010e78:	4638      	mov	r0, r7
 8010e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e7e:	bf00      	nop
 8010e80:	08015aa8 	.word	0x08015aa8
 8010e84:	080158d9 	.word	0x080158d9
 8010e88:	0801595c 	.word	0x0801595c

08010e8c <__lshift>:
 8010e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e90:	460c      	mov	r4, r1
 8010e92:	6849      	ldr	r1, [r1, #4]
 8010e94:	6923      	ldr	r3, [r4, #16]
 8010e96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010e9a:	68a3      	ldr	r3, [r4, #8]
 8010e9c:	4607      	mov	r7, r0
 8010e9e:	4691      	mov	r9, r2
 8010ea0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010ea4:	f108 0601 	add.w	r6, r8, #1
 8010ea8:	42b3      	cmp	r3, r6
 8010eaa:	db0b      	blt.n	8010ec4 <__lshift+0x38>
 8010eac:	4638      	mov	r0, r7
 8010eae:	f7ff fddb 	bl	8010a68 <_Balloc>
 8010eb2:	4605      	mov	r5, r0
 8010eb4:	b948      	cbnz	r0, 8010eca <__lshift+0x3e>
 8010eb6:	4602      	mov	r2, r0
 8010eb8:	4b2a      	ldr	r3, [pc, #168]	; (8010f64 <__lshift+0xd8>)
 8010eba:	482b      	ldr	r0, [pc, #172]	; (8010f68 <__lshift+0xdc>)
 8010ebc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010ec0:	f000 fc80 	bl	80117c4 <__assert_func>
 8010ec4:	3101      	adds	r1, #1
 8010ec6:	005b      	lsls	r3, r3, #1
 8010ec8:	e7ee      	b.n	8010ea8 <__lshift+0x1c>
 8010eca:	2300      	movs	r3, #0
 8010ecc:	f100 0114 	add.w	r1, r0, #20
 8010ed0:	f100 0210 	add.w	r2, r0, #16
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	4553      	cmp	r3, sl
 8010ed8:	db37      	blt.n	8010f4a <__lshift+0xbe>
 8010eda:	6920      	ldr	r0, [r4, #16]
 8010edc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010ee0:	f104 0314 	add.w	r3, r4, #20
 8010ee4:	f019 091f 	ands.w	r9, r9, #31
 8010ee8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010eec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010ef0:	d02f      	beq.n	8010f52 <__lshift+0xc6>
 8010ef2:	f1c9 0e20 	rsb	lr, r9, #32
 8010ef6:	468a      	mov	sl, r1
 8010ef8:	f04f 0c00 	mov.w	ip, #0
 8010efc:	681a      	ldr	r2, [r3, #0]
 8010efe:	fa02 f209 	lsl.w	r2, r2, r9
 8010f02:	ea42 020c 	orr.w	r2, r2, ip
 8010f06:	f84a 2b04 	str.w	r2, [sl], #4
 8010f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f0e:	4298      	cmp	r0, r3
 8010f10:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010f14:	d8f2      	bhi.n	8010efc <__lshift+0x70>
 8010f16:	1b03      	subs	r3, r0, r4
 8010f18:	3b15      	subs	r3, #21
 8010f1a:	f023 0303 	bic.w	r3, r3, #3
 8010f1e:	3304      	adds	r3, #4
 8010f20:	f104 0215 	add.w	r2, r4, #21
 8010f24:	4290      	cmp	r0, r2
 8010f26:	bf38      	it	cc
 8010f28:	2304      	movcc	r3, #4
 8010f2a:	f841 c003 	str.w	ip, [r1, r3]
 8010f2e:	f1bc 0f00 	cmp.w	ip, #0
 8010f32:	d001      	beq.n	8010f38 <__lshift+0xac>
 8010f34:	f108 0602 	add.w	r6, r8, #2
 8010f38:	3e01      	subs	r6, #1
 8010f3a:	4638      	mov	r0, r7
 8010f3c:	612e      	str	r6, [r5, #16]
 8010f3e:	4621      	mov	r1, r4
 8010f40:	f7ff fdd2 	bl	8010ae8 <_Bfree>
 8010f44:	4628      	mov	r0, r5
 8010f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8010f4e:	3301      	adds	r3, #1
 8010f50:	e7c1      	b.n	8010ed6 <__lshift+0x4a>
 8010f52:	3904      	subs	r1, #4
 8010f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f58:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f5c:	4298      	cmp	r0, r3
 8010f5e:	d8f9      	bhi.n	8010f54 <__lshift+0xc8>
 8010f60:	e7ea      	b.n	8010f38 <__lshift+0xac>
 8010f62:	bf00      	nop
 8010f64:	0801594b 	.word	0x0801594b
 8010f68:	0801595c 	.word	0x0801595c

08010f6c <__mcmp>:
 8010f6c:	b530      	push	{r4, r5, lr}
 8010f6e:	6902      	ldr	r2, [r0, #16]
 8010f70:	690c      	ldr	r4, [r1, #16]
 8010f72:	1b12      	subs	r2, r2, r4
 8010f74:	d10e      	bne.n	8010f94 <__mcmp+0x28>
 8010f76:	f100 0314 	add.w	r3, r0, #20
 8010f7a:	3114      	adds	r1, #20
 8010f7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010f80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010f84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010f88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010f8c:	42a5      	cmp	r5, r4
 8010f8e:	d003      	beq.n	8010f98 <__mcmp+0x2c>
 8010f90:	d305      	bcc.n	8010f9e <__mcmp+0x32>
 8010f92:	2201      	movs	r2, #1
 8010f94:	4610      	mov	r0, r2
 8010f96:	bd30      	pop	{r4, r5, pc}
 8010f98:	4283      	cmp	r3, r0
 8010f9a:	d3f3      	bcc.n	8010f84 <__mcmp+0x18>
 8010f9c:	e7fa      	b.n	8010f94 <__mcmp+0x28>
 8010f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8010fa2:	e7f7      	b.n	8010f94 <__mcmp+0x28>

08010fa4 <__mdiff>:
 8010fa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa8:	460c      	mov	r4, r1
 8010faa:	4606      	mov	r6, r0
 8010fac:	4611      	mov	r1, r2
 8010fae:	4620      	mov	r0, r4
 8010fb0:	4690      	mov	r8, r2
 8010fb2:	f7ff ffdb 	bl	8010f6c <__mcmp>
 8010fb6:	1e05      	subs	r5, r0, #0
 8010fb8:	d110      	bne.n	8010fdc <__mdiff+0x38>
 8010fba:	4629      	mov	r1, r5
 8010fbc:	4630      	mov	r0, r6
 8010fbe:	f7ff fd53 	bl	8010a68 <_Balloc>
 8010fc2:	b930      	cbnz	r0, 8010fd2 <__mdiff+0x2e>
 8010fc4:	4b3a      	ldr	r3, [pc, #232]	; (80110b0 <__mdiff+0x10c>)
 8010fc6:	4602      	mov	r2, r0
 8010fc8:	f240 2132 	movw	r1, #562	; 0x232
 8010fcc:	4839      	ldr	r0, [pc, #228]	; (80110b4 <__mdiff+0x110>)
 8010fce:	f000 fbf9 	bl	80117c4 <__assert_func>
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fdc:	bfa4      	itt	ge
 8010fde:	4643      	movge	r3, r8
 8010fe0:	46a0      	movge	r8, r4
 8010fe2:	4630      	mov	r0, r6
 8010fe4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010fe8:	bfa6      	itte	ge
 8010fea:	461c      	movge	r4, r3
 8010fec:	2500      	movge	r5, #0
 8010fee:	2501      	movlt	r5, #1
 8010ff0:	f7ff fd3a 	bl	8010a68 <_Balloc>
 8010ff4:	b920      	cbnz	r0, 8011000 <__mdiff+0x5c>
 8010ff6:	4b2e      	ldr	r3, [pc, #184]	; (80110b0 <__mdiff+0x10c>)
 8010ff8:	4602      	mov	r2, r0
 8010ffa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010ffe:	e7e5      	b.n	8010fcc <__mdiff+0x28>
 8011000:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011004:	6926      	ldr	r6, [r4, #16]
 8011006:	60c5      	str	r5, [r0, #12]
 8011008:	f104 0914 	add.w	r9, r4, #20
 801100c:	f108 0514 	add.w	r5, r8, #20
 8011010:	f100 0e14 	add.w	lr, r0, #20
 8011014:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011018:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801101c:	f108 0210 	add.w	r2, r8, #16
 8011020:	46f2      	mov	sl, lr
 8011022:	2100      	movs	r1, #0
 8011024:	f859 3b04 	ldr.w	r3, [r9], #4
 8011028:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801102c:	fa1f f883 	uxth.w	r8, r3
 8011030:	fa11 f18b 	uxtah	r1, r1, fp
 8011034:	0c1b      	lsrs	r3, r3, #16
 8011036:	eba1 0808 	sub.w	r8, r1, r8
 801103a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801103e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011042:	fa1f f888 	uxth.w	r8, r8
 8011046:	1419      	asrs	r1, r3, #16
 8011048:	454e      	cmp	r6, r9
 801104a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801104e:	f84a 3b04 	str.w	r3, [sl], #4
 8011052:	d8e7      	bhi.n	8011024 <__mdiff+0x80>
 8011054:	1b33      	subs	r3, r6, r4
 8011056:	3b15      	subs	r3, #21
 8011058:	f023 0303 	bic.w	r3, r3, #3
 801105c:	3304      	adds	r3, #4
 801105e:	3415      	adds	r4, #21
 8011060:	42a6      	cmp	r6, r4
 8011062:	bf38      	it	cc
 8011064:	2304      	movcc	r3, #4
 8011066:	441d      	add	r5, r3
 8011068:	4473      	add	r3, lr
 801106a:	469e      	mov	lr, r3
 801106c:	462e      	mov	r6, r5
 801106e:	4566      	cmp	r6, ip
 8011070:	d30e      	bcc.n	8011090 <__mdiff+0xec>
 8011072:	f10c 0203 	add.w	r2, ip, #3
 8011076:	1b52      	subs	r2, r2, r5
 8011078:	f022 0203 	bic.w	r2, r2, #3
 801107c:	3d03      	subs	r5, #3
 801107e:	45ac      	cmp	ip, r5
 8011080:	bf38      	it	cc
 8011082:	2200      	movcc	r2, #0
 8011084:	441a      	add	r2, r3
 8011086:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801108a:	b17b      	cbz	r3, 80110ac <__mdiff+0x108>
 801108c:	6107      	str	r7, [r0, #16]
 801108e:	e7a3      	b.n	8010fd8 <__mdiff+0x34>
 8011090:	f856 8b04 	ldr.w	r8, [r6], #4
 8011094:	fa11 f288 	uxtah	r2, r1, r8
 8011098:	1414      	asrs	r4, r2, #16
 801109a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801109e:	b292      	uxth	r2, r2
 80110a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80110a4:	f84e 2b04 	str.w	r2, [lr], #4
 80110a8:	1421      	asrs	r1, r4, #16
 80110aa:	e7e0      	b.n	801106e <__mdiff+0xca>
 80110ac:	3f01      	subs	r7, #1
 80110ae:	e7ea      	b.n	8011086 <__mdiff+0xe2>
 80110b0:	0801594b 	.word	0x0801594b
 80110b4:	0801595c 	.word	0x0801595c

080110b8 <__d2b>:
 80110b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80110bc:	4689      	mov	r9, r1
 80110be:	2101      	movs	r1, #1
 80110c0:	ec57 6b10 	vmov	r6, r7, d0
 80110c4:	4690      	mov	r8, r2
 80110c6:	f7ff fccf 	bl	8010a68 <_Balloc>
 80110ca:	4604      	mov	r4, r0
 80110cc:	b930      	cbnz	r0, 80110dc <__d2b+0x24>
 80110ce:	4602      	mov	r2, r0
 80110d0:	4b25      	ldr	r3, [pc, #148]	; (8011168 <__d2b+0xb0>)
 80110d2:	4826      	ldr	r0, [pc, #152]	; (801116c <__d2b+0xb4>)
 80110d4:	f240 310a 	movw	r1, #778	; 0x30a
 80110d8:	f000 fb74 	bl	80117c4 <__assert_func>
 80110dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80110e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80110e4:	bb35      	cbnz	r5, 8011134 <__d2b+0x7c>
 80110e6:	2e00      	cmp	r6, #0
 80110e8:	9301      	str	r3, [sp, #4]
 80110ea:	d028      	beq.n	801113e <__d2b+0x86>
 80110ec:	4668      	mov	r0, sp
 80110ee:	9600      	str	r6, [sp, #0]
 80110f0:	f7ff fd82 	bl	8010bf8 <__lo0bits>
 80110f4:	9900      	ldr	r1, [sp, #0]
 80110f6:	b300      	cbz	r0, 801113a <__d2b+0x82>
 80110f8:	9a01      	ldr	r2, [sp, #4]
 80110fa:	f1c0 0320 	rsb	r3, r0, #32
 80110fe:	fa02 f303 	lsl.w	r3, r2, r3
 8011102:	430b      	orrs	r3, r1
 8011104:	40c2      	lsrs	r2, r0
 8011106:	6163      	str	r3, [r4, #20]
 8011108:	9201      	str	r2, [sp, #4]
 801110a:	9b01      	ldr	r3, [sp, #4]
 801110c:	61a3      	str	r3, [r4, #24]
 801110e:	2b00      	cmp	r3, #0
 8011110:	bf14      	ite	ne
 8011112:	2202      	movne	r2, #2
 8011114:	2201      	moveq	r2, #1
 8011116:	6122      	str	r2, [r4, #16]
 8011118:	b1d5      	cbz	r5, 8011150 <__d2b+0x98>
 801111a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801111e:	4405      	add	r5, r0
 8011120:	f8c9 5000 	str.w	r5, [r9]
 8011124:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011128:	f8c8 0000 	str.w	r0, [r8]
 801112c:	4620      	mov	r0, r4
 801112e:	b003      	add	sp, #12
 8011130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011138:	e7d5      	b.n	80110e6 <__d2b+0x2e>
 801113a:	6161      	str	r1, [r4, #20]
 801113c:	e7e5      	b.n	801110a <__d2b+0x52>
 801113e:	a801      	add	r0, sp, #4
 8011140:	f7ff fd5a 	bl	8010bf8 <__lo0bits>
 8011144:	9b01      	ldr	r3, [sp, #4]
 8011146:	6163      	str	r3, [r4, #20]
 8011148:	2201      	movs	r2, #1
 801114a:	6122      	str	r2, [r4, #16]
 801114c:	3020      	adds	r0, #32
 801114e:	e7e3      	b.n	8011118 <__d2b+0x60>
 8011150:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011154:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011158:	f8c9 0000 	str.w	r0, [r9]
 801115c:	6918      	ldr	r0, [r3, #16]
 801115e:	f7ff fd2b 	bl	8010bb8 <__hi0bits>
 8011162:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011166:	e7df      	b.n	8011128 <__d2b+0x70>
 8011168:	0801594b 	.word	0x0801594b
 801116c:	0801595c 	.word	0x0801595c

08011170 <_calloc_r>:
 8011170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011172:	fba1 2402 	umull	r2, r4, r1, r2
 8011176:	b94c      	cbnz	r4, 801118c <_calloc_r+0x1c>
 8011178:	4611      	mov	r1, r2
 801117a:	9201      	str	r2, [sp, #4]
 801117c:	f7fd fde4 	bl	800ed48 <_malloc_r>
 8011180:	9a01      	ldr	r2, [sp, #4]
 8011182:	4605      	mov	r5, r0
 8011184:	b930      	cbnz	r0, 8011194 <_calloc_r+0x24>
 8011186:	4628      	mov	r0, r5
 8011188:	b003      	add	sp, #12
 801118a:	bd30      	pop	{r4, r5, pc}
 801118c:	220c      	movs	r2, #12
 801118e:	6002      	str	r2, [r0, #0]
 8011190:	2500      	movs	r5, #0
 8011192:	e7f8      	b.n	8011186 <_calloc_r+0x16>
 8011194:	4621      	mov	r1, r4
 8011196:	f7fd fdae 	bl	800ecf6 <memset>
 801119a:	e7f4      	b.n	8011186 <_calloc_r+0x16>

0801119c <_free_r>:
 801119c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801119e:	2900      	cmp	r1, #0
 80111a0:	d044      	beq.n	801122c <_free_r+0x90>
 80111a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111a6:	9001      	str	r0, [sp, #4]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	f1a1 0404 	sub.w	r4, r1, #4
 80111ae:	bfb8      	it	lt
 80111b0:	18e4      	addlt	r4, r4, r3
 80111b2:	f7ff fc4d 	bl	8010a50 <__malloc_lock>
 80111b6:	4a1e      	ldr	r2, [pc, #120]	; (8011230 <_free_r+0x94>)
 80111b8:	9801      	ldr	r0, [sp, #4]
 80111ba:	6813      	ldr	r3, [r2, #0]
 80111bc:	b933      	cbnz	r3, 80111cc <_free_r+0x30>
 80111be:	6063      	str	r3, [r4, #4]
 80111c0:	6014      	str	r4, [r2, #0]
 80111c2:	b003      	add	sp, #12
 80111c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80111c8:	f7ff bc48 	b.w	8010a5c <__malloc_unlock>
 80111cc:	42a3      	cmp	r3, r4
 80111ce:	d908      	bls.n	80111e2 <_free_r+0x46>
 80111d0:	6825      	ldr	r5, [r4, #0]
 80111d2:	1961      	adds	r1, r4, r5
 80111d4:	428b      	cmp	r3, r1
 80111d6:	bf01      	itttt	eq
 80111d8:	6819      	ldreq	r1, [r3, #0]
 80111da:	685b      	ldreq	r3, [r3, #4]
 80111dc:	1949      	addeq	r1, r1, r5
 80111de:	6021      	streq	r1, [r4, #0]
 80111e0:	e7ed      	b.n	80111be <_free_r+0x22>
 80111e2:	461a      	mov	r2, r3
 80111e4:	685b      	ldr	r3, [r3, #4]
 80111e6:	b10b      	cbz	r3, 80111ec <_free_r+0x50>
 80111e8:	42a3      	cmp	r3, r4
 80111ea:	d9fa      	bls.n	80111e2 <_free_r+0x46>
 80111ec:	6811      	ldr	r1, [r2, #0]
 80111ee:	1855      	adds	r5, r2, r1
 80111f0:	42a5      	cmp	r5, r4
 80111f2:	d10b      	bne.n	801120c <_free_r+0x70>
 80111f4:	6824      	ldr	r4, [r4, #0]
 80111f6:	4421      	add	r1, r4
 80111f8:	1854      	adds	r4, r2, r1
 80111fa:	42a3      	cmp	r3, r4
 80111fc:	6011      	str	r1, [r2, #0]
 80111fe:	d1e0      	bne.n	80111c2 <_free_r+0x26>
 8011200:	681c      	ldr	r4, [r3, #0]
 8011202:	685b      	ldr	r3, [r3, #4]
 8011204:	6053      	str	r3, [r2, #4]
 8011206:	4421      	add	r1, r4
 8011208:	6011      	str	r1, [r2, #0]
 801120a:	e7da      	b.n	80111c2 <_free_r+0x26>
 801120c:	d902      	bls.n	8011214 <_free_r+0x78>
 801120e:	230c      	movs	r3, #12
 8011210:	6003      	str	r3, [r0, #0]
 8011212:	e7d6      	b.n	80111c2 <_free_r+0x26>
 8011214:	6825      	ldr	r5, [r4, #0]
 8011216:	1961      	adds	r1, r4, r5
 8011218:	428b      	cmp	r3, r1
 801121a:	bf04      	itt	eq
 801121c:	6819      	ldreq	r1, [r3, #0]
 801121e:	685b      	ldreq	r3, [r3, #4]
 8011220:	6063      	str	r3, [r4, #4]
 8011222:	bf04      	itt	eq
 8011224:	1949      	addeq	r1, r1, r5
 8011226:	6021      	streq	r1, [r4, #0]
 8011228:	6054      	str	r4, [r2, #4]
 801122a:	e7ca      	b.n	80111c2 <_free_r+0x26>
 801122c:	b003      	add	sp, #12
 801122e:	bd30      	pop	{r4, r5, pc}
 8011230:	20006480 	.word	0x20006480

08011234 <__ssputs_r>:
 8011234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011238:	688e      	ldr	r6, [r1, #8]
 801123a:	429e      	cmp	r6, r3
 801123c:	4682      	mov	sl, r0
 801123e:	460c      	mov	r4, r1
 8011240:	4690      	mov	r8, r2
 8011242:	461f      	mov	r7, r3
 8011244:	d838      	bhi.n	80112b8 <__ssputs_r+0x84>
 8011246:	898a      	ldrh	r2, [r1, #12]
 8011248:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801124c:	d032      	beq.n	80112b4 <__ssputs_r+0x80>
 801124e:	6825      	ldr	r5, [r4, #0]
 8011250:	6909      	ldr	r1, [r1, #16]
 8011252:	eba5 0901 	sub.w	r9, r5, r1
 8011256:	6965      	ldr	r5, [r4, #20]
 8011258:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801125c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011260:	3301      	adds	r3, #1
 8011262:	444b      	add	r3, r9
 8011264:	106d      	asrs	r5, r5, #1
 8011266:	429d      	cmp	r5, r3
 8011268:	bf38      	it	cc
 801126a:	461d      	movcc	r5, r3
 801126c:	0553      	lsls	r3, r2, #21
 801126e:	d531      	bpl.n	80112d4 <__ssputs_r+0xa0>
 8011270:	4629      	mov	r1, r5
 8011272:	f7fd fd69 	bl	800ed48 <_malloc_r>
 8011276:	4606      	mov	r6, r0
 8011278:	b950      	cbnz	r0, 8011290 <__ssputs_r+0x5c>
 801127a:	230c      	movs	r3, #12
 801127c:	f8ca 3000 	str.w	r3, [sl]
 8011280:	89a3      	ldrh	r3, [r4, #12]
 8011282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011286:	81a3      	strh	r3, [r4, #12]
 8011288:	f04f 30ff 	mov.w	r0, #4294967295
 801128c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011290:	6921      	ldr	r1, [r4, #16]
 8011292:	464a      	mov	r2, r9
 8011294:	f7fd fd21 	bl	800ecda <memcpy>
 8011298:	89a3      	ldrh	r3, [r4, #12]
 801129a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801129e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112a2:	81a3      	strh	r3, [r4, #12]
 80112a4:	6126      	str	r6, [r4, #16]
 80112a6:	6165      	str	r5, [r4, #20]
 80112a8:	444e      	add	r6, r9
 80112aa:	eba5 0509 	sub.w	r5, r5, r9
 80112ae:	6026      	str	r6, [r4, #0]
 80112b0:	60a5      	str	r5, [r4, #8]
 80112b2:	463e      	mov	r6, r7
 80112b4:	42be      	cmp	r6, r7
 80112b6:	d900      	bls.n	80112ba <__ssputs_r+0x86>
 80112b8:	463e      	mov	r6, r7
 80112ba:	6820      	ldr	r0, [r4, #0]
 80112bc:	4632      	mov	r2, r6
 80112be:	4641      	mov	r1, r8
 80112c0:	f000 fae4 	bl	801188c <memmove>
 80112c4:	68a3      	ldr	r3, [r4, #8]
 80112c6:	1b9b      	subs	r3, r3, r6
 80112c8:	60a3      	str	r3, [r4, #8]
 80112ca:	6823      	ldr	r3, [r4, #0]
 80112cc:	4433      	add	r3, r6
 80112ce:	6023      	str	r3, [r4, #0]
 80112d0:	2000      	movs	r0, #0
 80112d2:	e7db      	b.n	801128c <__ssputs_r+0x58>
 80112d4:	462a      	mov	r2, r5
 80112d6:	f000 faf3 	bl	80118c0 <_realloc_r>
 80112da:	4606      	mov	r6, r0
 80112dc:	2800      	cmp	r0, #0
 80112de:	d1e1      	bne.n	80112a4 <__ssputs_r+0x70>
 80112e0:	6921      	ldr	r1, [r4, #16]
 80112e2:	4650      	mov	r0, sl
 80112e4:	f7ff ff5a 	bl	801119c <_free_r>
 80112e8:	e7c7      	b.n	801127a <__ssputs_r+0x46>
	...

080112ec <_svfiprintf_r>:
 80112ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112f0:	4698      	mov	r8, r3
 80112f2:	898b      	ldrh	r3, [r1, #12]
 80112f4:	061b      	lsls	r3, r3, #24
 80112f6:	b09d      	sub	sp, #116	; 0x74
 80112f8:	4607      	mov	r7, r0
 80112fa:	460d      	mov	r5, r1
 80112fc:	4614      	mov	r4, r2
 80112fe:	d50e      	bpl.n	801131e <_svfiprintf_r+0x32>
 8011300:	690b      	ldr	r3, [r1, #16]
 8011302:	b963      	cbnz	r3, 801131e <_svfiprintf_r+0x32>
 8011304:	2140      	movs	r1, #64	; 0x40
 8011306:	f7fd fd1f 	bl	800ed48 <_malloc_r>
 801130a:	6028      	str	r0, [r5, #0]
 801130c:	6128      	str	r0, [r5, #16]
 801130e:	b920      	cbnz	r0, 801131a <_svfiprintf_r+0x2e>
 8011310:	230c      	movs	r3, #12
 8011312:	603b      	str	r3, [r7, #0]
 8011314:	f04f 30ff 	mov.w	r0, #4294967295
 8011318:	e0d1      	b.n	80114be <_svfiprintf_r+0x1d2>
 801131a:	2340      	movs	r3, #64	; 0x40
 801131c:	616b      	str	r3, [r5, #20]
 801131e:	2300      	movs	r3, #0
 8011320:	9309      	str	r3, [sp, #36]	; 0x24
 8011322:	2320      	movs	r3, #32
 8011324:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011328:	f8cd 800c 	str.w	r8, [sp, #12]
 801132c:	2330      	movs	r3, #48	; 0x30
 801132e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80114d8 <_svfiprintf_r+0x1ec>
 8011332:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011336:	f04f 0901 	mov.w	r9, #1
 801133a:	4623      	mov	r3, r4
 801133c:	469a      	mov	sl, r3
 801133e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011342:	b10a      	cbz	r2, 8011348 <_svfiprintf_r+0x5c>
 8011344:	2a25      	cmp	r2, #37	; 0x25
 8011346:	d1f9      	bne.n	801133c <_svfiprintf_r+0x50>
 8011348:	ebba 0b04 	subs.w	fp, sl, r4
 801134c:	d00b      	beq.n	8011366 <_svfiprintf_r+0x7a>
 801134e:	465b      	mov	r3, fp
 8011350:	4622      	mov	r2, r4
 8011352:	4629      	mov	r1, r5
 8011354:	4638      	mov	r0, r7
 8011356:	f7ff ff6d 	bl	8011234 <__ssputs_r>
 801135a:	3001      	adds	r0, #1
 801135c:	f000 80aa 	beq.w	80114b4 <_svfiprintf_r+0x1c8>
 8011360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011362:	445a      	add	r2, fp
 8011364:	9209      	str	r2, [sp, #36]	; 0x24
 8011366:	f89a 3000 	ldrb.w	r3, [sl]
 801136a:	2b00      	cmp	r3, #0
 801136c:	f000 80a2 	beq.w	80114b4 <_svfiprintf_r+0x1c8>
 8011370:	2300      	movs	r3, #0
 8011372:	f04f 32ff 	mov.w	r2, #4294967295
 8011376:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801137a:	f10a 0a01 	add.w	sl, sl, #1
 801137e:	9304      	str	r3, [sp, #16]
 8011380:	9307      	str	r3, [sp, #28]
 8011382:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011386:	931a      	str	r3, [sp, #104]	; 0x68
 8011388:	4654      	mov	r4, sl
 801138a:	2205      	movs	r2, #5
 801138c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011390:	4851      	ldr	r0, [pc, #324]	; (80114d8 <_svfiprintf_r+0x1ec>)
 8011392:	f7ee ff25 	bl	80001e0 <memchr>
 8011396:	9a04      	ldr	r2, [sp, #16]
 8011398:	b9d8      	cbnz	r0, 80113d2 <_svfiprintf_r+0xe6>
 801139a:	06d0      	lsls	r0, r2, #27
 801139c:	bf44      	itt	mi
 801139e:	2320      	movmi	r3, #32
 80113a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113a4:	0711      	lsls	r1, r2, #28
 80113a6:	bf44      	itt	mi
 80113a8:	232b      	movmi	r3, #43	; 0x2b
 80113aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113ae:	f89a 3000 	ldrb.w	r3, [sl]
 80113b2:	2b2a      	cmp	r3, #42	; 0x2a
 80113b4:	d015      	beq.n	80113e2 <_svfiprintf_r+0xf6>
 80113b6:	9a07      	ldr	r2, [sp, #28]
 80113b8:	4654      	mov	r4, sl
 80113ba:	2000      	movs	r0, #0
 80113bc:	f04f 0c0a 	mov.w	ip, #10
 80113c0:	4621      	mov	r1, r4
 80113c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113c6:	3b30      	subs	r3, #48	; 0x30
 80113c8:	2b09      	cmp	r3, #9
 80113ca:	d94e      	bls.n	801146a <_svfiprintf_r+0x17e>
 80113cc:	b1b0      	cbz	r0, 80113fc <_svfiprintf_r+0x110>
 80113ce:	9207      	str	r2, [sp, #28]
 80113d0:	e014      	b.n	80113fc <_svfiprintf_r+0x110>
 80113d2:	eba0 0308 	sub.w	r3, r0, r8
 80113d6:	fa09 f303 	lsl.w	r3, r9, r3
 80113da:	4313      	orrs	r3, r2
 80113dc:	9304      	str	r3, [sp, #16]
 80113de:	46a2      	mov	sl, r4
 80113e0:	e7d2      	b.n	8011388 <_svfiprintf_r+0x9c>
 80113e2:	9b03      	ldr	r3, [sp, #12]
 80113e4:	1d19      	adds	r1, r3, #4
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	9103      	str	r1, [sp, #12]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	bfbb      	ittet	lt
 80113ee:	425b      	neglt	r3, r3
 80113f0:	f042 0202 	orrlt.w	r2, r2, #2
 80113f4:	9307      	strge	r3, [sp, #28]
 80113f6:	9307      	strlt	r3, [sp, #28]
 80113f8:	bfb8      	it	lt
 80113fa:	9204      	strlt	r2, [sp, #16]
 80113fc:	7823      	ldrb	r3, [r4, #0]
 80113fe:	2b2e      	cmp	r3, #46	; 0x2e
 8011400:	d10c      	bne.n	801141c <_svfiprintf_r+0x130>
 8011402:	7863      	ldrb	r3, [r4, #1]
 8011404:	2b2a      	cmp	r3, #42	; 0x2a
 8011406:	d135      	bne.n	8011474 <_svfiprintf_r+0x188>
 8011408:	9b03      	ldr	r3, [sp, #12]
 801140a:	1d1a      	adds	r2, r3, #4
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	9203      	str	r2, [sp, #12]
 8011410:	2b00      	cmp	r3, #0
 8011412:	bfb8      	it	lt
 8011414:	f04f 33ff 	movlt.w	r3, #4294967295
 8011418:	3402      	adds	r4, #2
 801141a:	9305      	str	r3, [sp, #20]
 801141c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80114e8 <_svfiprintf_r+0x1fc>
 8011420:	7821      	ldrb	r1, [r4, #0]
 8011422:	2203      	movs	r2, #3
 8011424:	4650      	mov	r0, sl
 8011426:	f7ee fedb 	bl	80001e0 <memchr>
 801142a:	b140      	cbz	r0, 801143e <_svfiprintf_r+0x152>
 801142c:	2340      	movs	r3, #64	; 0x40
 801142e:	eba0 000a 	sub.w	r0, r0, sl
 8011432:	fa03 f000 	lsl.w	r0, r3, r0
 8011436:	9b04      	ldr	r3, [sp, #16]
 8011438:	4303      	orrs	r3, r0
 801143a:	3401      	adds	r4, #1
 801143c:	9304      	str	r3, [sp, #16]
 801143e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011442:	4826      	ldr	r0, [pc, #152]	; (80114dc <_svfiprintf_r+0x1f0>)
 8011444:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011448:	2206      	movs	r2, #6
 801144a:	f7ee fec9 	bl	80001e0 <memchr>
 801144e:	2800      	cmp	r0, #0
 8011450:	d038      	beq.n	80114c4 <_svfiprintf_r+0x1d8>
 8011452:	4b23      	ldr	r3, [pc, #140]	; (80114e0 <_svfiprintf_r+0x1f4>)
 8011454:	bb1b      	cbnz	r3, 801149e <_svfiprintf_r+0x1b2>
 8011456:	9b03      	ldr	r3, [sp, #12]
 8011458:	3307      	adds	r3, #7
 801145a:	f023 0307 	bic.w	r3, r3, #7
 801145e:	3308      	adds	r3, #8
 8011460:	9303      	str	r3, [sp, #12]
 8011462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011464:	4433      	add	r3, r6
 8011466:	9309      	str	r3, [sp, #36]	; 0x24
 8011468:	e767      	b.n	801133a <_svfiprintf_r+0x4e>
 801146a:	fb0c 3202 	mla	r2, ip, r2, r3
 801146e:	460c      	mov	r4, r1
 8011470:	2001      	movs	r0, #1
 8011472:	e7a5      	b.n	80113c0 <_svfiprintf_r+0xd4>
 8011474:	2300      	movs	r3, #0
 8011476:	3401      	adds	r4, #1
 8011478:	9305      	str	r3, [sp, #20]
 801147a:	4619      	mov	r1, r3
 801147c:	f04f 0c0a 	mov.w	ip, #10
 8011480:	4620      	mov	r0, r4
 8011482:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011486:	3a30      	subs	r2, #48	; 0x30
 8011488:	2a09      	cmp	r2, #9
 801148a:	d903      	bls.n	8011494 <_svfiprintf_r+0x1a8>
 801148c:	2b00      	cmp	r3, #0
 801148e:	d0c5      	beq.n	801141c <_svfiprintf_r+0x130>
 8011490:	9105      	str	r1, [sp, #20]
 8011492:	e7c3      	b.n	801141c <_svfiprintf_r+0x130>
 8011494:	fb0c 2101 	mla	r1, ip, r1, r2
 8011498:	4604      	mov	r4, r0
 801149a:	2301      	movs	r3, #1
 801149c:	e7f0      	b.n	8011480 <_svfiprintf_r+0x194>
 801149e:	ab03      	add	r3, sp, #12
 80114a0:	9300      	str	r3, [sp, #0]
 80114a2:	462a      	mov	r2, r5
 80114a4:	4b0f      	ldr	r3, [pc, #60]	; (80114e4 <_svfiprintf_r+0x1f8>)
 80114a6:	a904      	add	r1, sp, #16
 80114a8:	4638      	mov	r0, r7
 80114aa:	f7fd fd61 	bl	800ef70 <_printf_float>
 80114ae:	1c42      	adds	r2, r0, #1
 80114b0:	4606      	mov	r6, r0
 80114b2:	d1d6      	bne.n	8011462 <_svfiprintf_r+0x176>
 80114b4:	89ab      	ldrh	r3, [r5, #12]
 80114b6:	065b      	lsls	r3, r3, #25
 80114b8:	f53f af2c 	bmi.w	8011314 <_svfiprintf_r+0x28>
 80114bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114be:	b01d      	add	sp, #116	; 0x74
 80114c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114c4:	ab03      	add	r3, sp, #12
 80114c6:	9300      	str	r3, [sp, #0]
 80114c8:	462a      	mov	r2, r5
 80114ca:	4b06      	ldr	r3, [pc, #24]	; (80114e4 <_svfiprintf_r+0x1f8>)
 80114cc:	a904      	add	r1, sp, #16
 80114ce:	4638      	mov	r0, r7
 80114d0:	f7fd fff2 	bl	800f4b8 <_printf_i>
 80114d4:	e7eb      	b.n	80114ae <_svfiprintf_r+0x1c2>
 80114d6:	bf00      	nop
 80114d8:	08015ab4 	.word	0x08015ab4
 80114dc:	08015abe 	.word	0x08015abe
 80114e0:	0800ef71 	.word	0x0800ef71
 80114e4:	08011235 	.word	0x08011235
 80114e8:	08015aba 	.word	0x08015aba

080114ec <__sfputc_r>:
 80114ec:	6893      	ldr	r3, [r2, #8]
 80114ee:	3b01      	subs	r3, #1
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	b410      	push	{r4}
 80114f4:	6093      	str	r3, [r2, #8]
 80114f6:	da08      	bge.n	801150a <__sfputc_r+0x1e>
 80114f8:	6994      	ldr	r4, [r2, #24]
 80114fa:	42a3      	cmp	r3, r4
 80114fc:	db01      	blt.n	8011502 <__sfputc_r+0x16>
 80114fe:	290a      	cmp	r1, #10
 8011500:	d103      	bne.n	801150a <__sfputc_r+0x1e>
 8011502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011506:	f7fe b9ff 	b.w	800f908 <__swbuf_r>
 801150a:	6813      	ldr	r3, [r2, #0]
 801150c:	1c58      	adds	r0, r3, #1
 801150e:	6010      	str	r0, [r2, #0]
 8011510:	7019      	strb	r1, [r3, #0]
 8011512:	4608      	mov	r0, r1
 8011514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011518:	4770      	bx	lr

0801151a <__sfputs_r>:
 801151a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801151c:	4606      	mov	r6, r0
 801151e:	460f      	mov	r7, r1
 8011520:	4614      	mov	r4, r2
 8011522:	18d5      	adds	r5, r2, r3
 8011524:	42ac      	cmp	r4, r5
 8011526:	d101      	bne.n	801152c <__sfputs_r+0x12>
 8011528:	2000      	movs	r0, #0
 801152a:	e007      	b.n	801153c <__sfputs_r+0x22>
 801152c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011530:	463a      	mov	r2, r7
 8011532:	4630      	mov	r0, r6
 8011534:	f7ff ffda 	bl	80114ec <__sfputc_r>
 8011538:	1c43      	adds	r3, r0, #1
 801153a:	d1f3      	bne.n	8011524 <__sfputs_r+0xa>
 801153c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011540 <_vfiprintf_r>:
 8011540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011544:	460d      	mov	r5, r1
 8011546:	b09d      	sub	sp, #116	; 0x74
 8011548:	4614      	mov	r4, r2
 801154a:	4698      	mov	r8, r3
 801154c:	4606      	mov	r6, r0
 801154e:	b118      	cbz	r0, 8011558 <_vfiprintf_r+0x18>
 8011550:	6983      	ldr	r3, [r0, #24]
 8011552:	b90b      	cbnz	r3, 8011558 <_vfiprintf_r+0x18>
 8011554:	f7fd fafc 	bl	800eb50 <__sinit>
 8011558:	4b89      	ldr	r3, [pc, #548]	; (8011780 <_vfiprintf_r+0x240>)
 801155a:	429d      	cmp	r5, r3
 801155c:	d11b      	bne.n	8011596 <_vfiprintf_r+0x56>
 801155e:	6875      	ldr	r5, [r6, #4]
 8011560:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011562:	07d9      	lsls	r1, r3, #31
 8011564:	d405      	bmi.n	8011572 <_vfiprintf_r+0x32>
 8011566:	89ab      	ldrh	r3, [r5, #12]
 8011568:	059a      	lsls	r2, r3, #22
 801156a:	d402      	bmi.n	8011572 <_vfiprintf_r+0x32>
 801156c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801156e:	f7fd fbb2 	bl	800ecd6 <__retarget_lock_acquire_recursive>
 8011572:	89ab      	ldrh	r3, [r5, #12]
 8011574:	071b      	lsls	r3, r3, #28
 8011576:	d501      	bpl.n	801157c <_vfiprintf_r+0x3c>
 8011578:	692b      	ldr	r3, [r5, #16]
 801157a:	b9eb      	cbnz	r3, 80115b8 <_vfiprintf_r+0x78>
 801157c:	4629      	mov	r1, r5
 801157e:	4630      	mov	r0, r6
 8011580:	f7fe fa26 	bl	800f9d0 <__swsetup_r>
 8011584:	b1c0      	cbz	r0, 80115b8 <_vfiprintf_r+0x78>
 8011586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011588:	07dc      	lsls	r4, r3, #31
 801158a:	d50e      	bpl.n	80115aa <_vfiprintf_r+0x6a>
 801158c:	f04f 30ff 	mov.w	r0, #4294967295
 8011590:	b01d      	add	sp, #116	; 0x74
 8011592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011596:	4b7b      	ldr	r3, [pc, #492]	; (8011784 <_vfiprintf_r+0x244>)
 8011598:	429d      	cmp	r5, r3
 801159a:	d101      	bne.n	80115a0 <_vfiprintf_r+0x60>
 801159c:	68b5      	ldr	r5, [r6, #8]
 801159e:	e7df      	b.n	8011560 <_vfiprintf_r+0x20>
 80115a0:	4b79      	ldr	r3, [pc, #484]	; (8011788 <_vfiprintf_r+0x248>)
 80115a2:	429d      	cmp	r5, r3
 80115a4:	bf08      	it	eq
 80115a6:	68f5      	ldreq	r5, [r6, #12]
 80115a8:	e7da      	b.n	8011560 <_vfiprintf_r+0x20>
 80115aa:	89ab      	ldrh	r3, [r5, #12]
 80115ac:	0598      	lsls	r0, r3, #22
 80115ae:	d4ed      	bmi.n	801158c <_vfiprintf_r+0x4c>
 80115b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115b2:	f7fd fb91 	bl	800ecd8 <__retarget_lock_release_recursive>
 80115b6:	e7e9      	b.n	801158c <_vfiprintf_r+0x4c>
 80115b8:	2300      	movs	r3, #0
 80115ba:	9309      	str	r3, [sp, #36]	; 0x24
 80115bc:	2320      	movs	r3, #32
 80115be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80115c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80115c6:	2330      	movs	r3, #48	; 0x30
 80115c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801178c <_vfiprintf_r+0x24c>
 80115cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80115d0:	f04f 0901 	mov.w	r9, #1
 80115d4:	4623      	mov	r3, r4
 80115d6:	469a      	mov	sl, r3
 80115d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115dc:	b10a      	cbz	r2, 80115e2 <_vfiprintf_r+0xa2>
 80115de:	2a25      	cmp	r2, #37	; 0x25
 80115e0:	d1f9      	bne.n	80115d6 <_vfiprintf_r+0x96>
 80115e2:	ebba 0b04 	subs.w	fp, sl, r4
 80115e6:	d00b      	beq.n	8011600 <_vfiprintf_r+0xc0>
 80115e8:	465b      	mov	r3, fp
 80115ea:	4622      	mov	r2, r4
 80115ec:	4629      	mov	r1, r5
 80115ee:	4630      	mov	r0, r6
 80115f0:	f7ff ff93 	bl	801151a <__sfputs_r>
 80115f4:	3001      	adds	r0, #1
 80115f6:	f000 80aa 	beq.w	801174e <_vfiprintf_r+0x20e>
 80115fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115fc:	445a      	add	r2, fp
 80115fe:	9209      	str	r2, [sp, #36]	; 0x24
 8011600:	f89a 3000 	ldrb.w	r3, [sl]
 8011604:	2b00      	cmp	r3, #0
 8011606:	f000 80a2 	beq.w	801174e <_vfiprintf_r+0x20e>
 801160a:	2300      	movs	r3, #0
 801160c:	f04f 32ff 	mov.w	r2, #4294967295
 8011610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011614:	f10a 0a01 	add.w	sl, sl, #1
 8011618:	9304      	str	r3, [sp, #16]
 801161a:	9307      	str	r3, [sp, #28]
 801161c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011620:	931a      	str	r3, [sp, #104]	; 0x68
 8011622:	4654      	mov	r4, sl
 8011624:	2205      	movs	r2, #5
 8011626:	f814 1b01 	ldrb.w	r1, [r4], #1
 801162a:	4858      	ldr	r0, [pc, #352]	; (801178c <_vfiprintf_r+0x24c>)
 801162c:	f7ee fdd8 	bl	80001e0 <memchr>
 8011630:	9a04      	ldr	r2, [sp, #16]
 8011632:	b9d8      	cbnz	r0, 801166c <_vfiprintf_r+0x12c>
 8011634:	06d1      	lsls	r1, r2, #27
 8011636:	bf44      	itt	mi
 8011638:	2320      	movmi	r3, #32
 801163a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801163e:	0713      	lsls	r3, r2, #28
 8011640:	bf44      	itt	mi
 8011642:	232b      	movmi	r3, #43	; 0x2b
 8011644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011648:	f89a 3000 	ldrb.w	r3, [sl]
 801164c:	2b2a      	cmp	r3, #42	; 0x2a
 801164e:	d015      	beq.n	801167c <_vfiprintf_r+0x13c>
 8011650:	9a07      	ldr	r2, [sp, #28]
 8011652:	4654      	mov	r4, sl
 8011654:	2000      	movs	r0, #0
 8011656:	f04f 0c0a 	mov.w	ip, #10
 801165a:	4621      	mov	r1, r4
 801165c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011660:	3b30      	subs	r3, #48	; 0x30
 8011662:	2b09      	cmp	r3, #9
 8011664:	d94e      	bls.n	8011704 <_vfiprintf_r+0x1c4>
 8011666:	b1b0      	cbz	r0, 8011696 <_vfiprintf_r+0x156>
 8011668:	9207      	str	r2, [sp, #28]
 801166a:	e014      	b.n	8011696 <_vfiprintf_r+0x156>
 801166c:	eba0 0308 	sub.w	r3, r0, r8
 8011670:	fa09 f303 	lsl.w	r3, r9, r3
 8011674:	4313      	orrs	r3, r2
 8011676:	9304      	str	r3, [sp, #16]
 8011678:	46a2      	mov	sl, r4
 801167a:	e7d2      	b.n	8011622 <_vfiprintf_r+0xe2>
 801167c:	9b03      	ldr	r3, [sp, #12]
 801167e:	1d19      	adds	r1, r3, #4
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	9103      	str	r1, [sp, #12]
 8011684:	2b00      	cmp	r3, #0
 8011686:	bfbb      	ittet	lt
 8011688:	425b      	neglt	r3, r3
 801168a:	f042 0202 	orrlt.w	r2, r2, #2
 801168e:	9307      	strge	r3, [sp, #28]
 8011690:	9307      	strlt	r3, [sp, #28]
 8011692:	bfb8      	it	lt
 8011694:	9204      	strlt	r2, [sp, #16]
 8011696:	7823      	ldrb	r3, [r4, #0]
 8011698:	2b2e      	cmp	r3, #46	; 0x2e
 801169a:	d10c      	bne.n	80116b6 <_vfiprintf_r+0x176>
 801169c:	7863      	ldrb	r3, [r4, #1]
 801169e:	2b2a      	cmp	r3, #42	; 0x2a
 80116a0:	d135      	bne.n	801170e <_vfiprintf_r+0x1ce>
 80116a2:	9b03      	ldr	r3, [sp, #12]
 80116a4:	1d1a      	adds	r2, r3, #4
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	9203      	str	r2, [sp, #12]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	bfb8      	it	lt
 80116ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80116b2:	3402      	adds	r4, #2
 80116b4:	9305      	str	r3, [sp, #20]
 80116b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801179c <_vfiprintf_r+0x25c>
 80116ba:	7821      	ldrb	r1, [r4, #0]
 80116bc:	2203      	movs	r2, #3
 80116be:	4650      	mov	r0, sl
 80116c0:	f7ee fd8e 	bl	80001e0 <memchr>
 80116c4:	b140      	cbz	r0, 80116d8 <_vfiprintf_r+0x198>
 80116c6:	2340      	movs	r3, #64	; 0x40
 80116c8:	eba0 000a 	sub.w	r0, r0, sl
 80116cc:	fa03 f000 	lsl.w	r0, r3, r0
 80116d0:	9b04      	ldr	r3, [sp, #16]
 80116d2:	4303      	orrs	r3, r0
 80116d4:	3401      	adds	r4, #1
 80116d6:	9304      	str	r3, [sp, #16]
 80116d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116dc:	482c      	ldr	r0, [pc, #176]	; (8011790 <_vfiprintf_r+0x250>)
 80116de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80116e2:	2206      	movs	r2, #6
 80116e4:	f7ee fd7c 	bl	80001e0 <memchr>
 80116e8:	2800      	cmp	r0, #0
 80116ea:	d03f      	beq.n	801176c <_vfiprintf_r+0x22c>
 80116ec:	4b29      	ldr	r3, [pc, #164]	; (8011794 <_vfiprintf_r+0x254>)
 80116ee:	bb1b      	cbnz	r3, 8011738 <_vfiprintf_r+0x1f8>
 80116f0:	9b03      	ldr	r3, [sp, #12]
 80116f2:	3307      	adds	r3, #7
 80116f4:	f023 0307 	bic.w	r3, r3, #7
 80116f8:	3308      	adds	r3, #8
 80116fa:	9303      	str	r3, [sp, #12]
 80116fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116fe:	443b      	add	r3, r7
 8011700:	9309      	str	r3, [sp, #36]	; 0x24
 8011702:	e767      	b.n	80115d4 <_vfiprintf_r+0x94>
 8011704:	fb0c 3202 	mla	r2, ip, r2, r3
 8011708:	460c      	mov	r4, r1
 801170a:	2001      	movs	r0, #1
 801170c:	e7a5      	b.n	801165a <_vfiprintf_r+0x11a>
 801170e:	2300      	movs	r3, #0
 8011710:	3401      	adds	r4, #1
 8011712:	9305      	str	r3, [sp, #20]
 8011714:	4619      	mov	r1, r3
 8011716:	f04f 0c0a 	mov.w	ip, #10
 801171a:	4620      	mov	r0, r4
 801171c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011720:	3a30      	subs	r2, #48	; 0x30
 8011722:	2a09      	cmp	r2, #9
 8011724:	d903      	bls.n	801172e <_vfiprintf_r+0x1ee>
 8011726:	2b00      	cmp	r3, #0
 8011728:	d0c5      	beq.n	80116b6 <_vfiprintf_r+0x176>
 801172a:	9105      	str	r1, [sp, #20]
 801172c:	e7c3      	b.n	80116b6 <_vfiprintf_r+0x176>
 801172e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011732:	4604      	mov	r4, r0
 8011734:	2301      	movs	r3, #1
 8011736:	e7f0      	b.n	801171a <_vfiprintf_r+0x1da>
 8011738:	ab03      	add	r3, sp, #12
 801173a:	9300      	str	r3, [sp, #0]
 801173c:	462a      	mov	r2, r5
 801173e:	4b16      	ldr	r3, [pc, #88]	; (8011798 <_vfiprintf_r+0x258>)
 8011740:	a904      	add	r1, sp, #16
 8011742:	4630      	mov	r0, r6
 8011744:	f7fd fc14 	bl	800ef70 <_printf_float>
 8011748:	4607      	mov	r7, r0
 801174a:	1c78      	adds	r0, r7, #1
 801174c:	d1d6      	bne.n	80116fc <_vfiprintf_r+0x1bc>
 801174e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011750:	07d9      	lsls	r1, r3, #31
 8011752:	d405      	bmi.n	8011760 <_vfiprintf_r+0x220>
 8011754:	89ab      	ldrh	r3, [r5, #12]
 8011756:	059a      	lsls	r2, r3, #22
 8011758:	d402      	bmi.n	8011760 <_vfiprintf_r+0x220>
 801175a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801175c:	f7fd fabc 	bl	800ecd8 <__retarget_lock_release_recursive>
 8011760:	89ab      	ldrh	r3, [r5, #12]
 8011762:	065b      	lsls	r3, r3, #25
 8011764:	f53f af12 	bmi.w	801158c <_vfiprintf_r+0x4c>
 8011768:	9809      	ldr	r0, [sp, #36]	; 0x24
 801176a:	e711      	b.n	8011590 <_vfiprintf_r+0x50>
 801176c:	ab03      	add	r3, sp, #12
 801176e:	9300      	str	r3, [sp, #0]
 8011770:	462a      	mov	r2, r5
 8011772:	4b09      	ldr	r3, [pc, #36]	; (8011798 <_vfiprintf_r+0x258>)
 8011774:	a904      	add	r1, sp, #16
 8011776:	4630      	mov	r0, r6
 8011778:	f7fd fe9e 	bl	800f4b8 <_printf_i>
 801177c:	e7e4      	b.n	8011748 <_vfiprintf_r+0x208>
 801177e:	bf00      	nop
 8011780:	08015854 	.word	0x08015854
 8011784:	08015874 	.word	0x08015874
 8011788:	08015834 	.word	0x08015834
 801178c:	08015ab4 	.word	0x08015ab4
 8011790:	08015abe 	.word	0x08015abe
 8011794:	0800ef71 	.word	0x0800ef71
 8011798:	0801151b 	.word	0x0801151b
 801179c:	08015aba 	.word	0x08015aba

080117a0 <_read_r>:
 80117a0:	b538      	push	{r3, r4, r5, lr}
 80117a2:	4d07      	ldr	r5, [pc, #28]	; (80117c0 <_read_r+0x20>)
 80117a4:	4604      	mov	r4, r0
 80117a6:	4608      	mov	r0, r1
 80117a8:	4611      	mov	r1, r2
 80117aa:	2200      	movs	r2, #0
 80117ac:	602a      	str	r2, [r5, #0]
 80117ae:	461a      	mov	r2, r3
 80117b0:	f7fc ff09 	bl	800e5c6 <_read>
 80117b4:	1c43      	adds	r3, r0, #1
 80117b6:	d102      	bne.n	80117be <_read_r+0x1e>
 80117b8:	682b      	ldr	r3, [r5, #0]
 80117ba:	b103      	cbz	r3, 80117be <_read_r+0x1e>
 80117bc:	6023      	str	r3, [r4, #0]
 80117be:	bd38      	pop	{r3, r4, r5, pc}
 80117c0:	20006488 	.word	0x20006488

080117c4 <__assert_func>:
 80117c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80117c6:	4614      	mov	r4, r2
 80117c8:	461a      	mov	r2, r3
 80117ca:	4b09      	ldr	r3, [pc, #36]	; (80117f0 <__assert_func+0x2c>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	4605      	mov	r5, r0
 80117d0:	68d8      	ldr	r0, [r3, #12]
 80117d2:	b14c      	cbz	r4, 80117e8 <__assert_func+0x24>
 80117d4:	4b07      	ldr	r3, [pc, #28]	; (80117f4 <__assert_func+0x30>)
 80117d6:	9100      	str	r1, [sp, #0]
 80117d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80117dc:	4906      	ldr	r1, [pc, #24]	; (80117f8 <__assert_func+0x34>)
 80117de:	462b      	mov	r3, r5
 80117e0:	f000 f80e 	bl	8011800 <fiprintf>
 80117e4:	f000 f8a8 	bl	8011938 <abort>
 80117e8:	4b04      	ldr	r3, [pc, #16]	; (80117fc <__assert_func+0x38>)
 80117ea:	461c      	mov	r4, r3
 80117ec:	e7f3      	b.n	80117d6 <__assert_func+0x12>
 80117ee:	bf00      	nop
 80117f0:	20000080 	.word	0x20000080
 80117f4:	08015ac5 	.word	0x08015ac5
 80117f8:	08015ad2 	.word	0x08015ad2
 80117fc:	08015b00 	.word	0x08015b00

08011800 <fiprintf>:
 8011800:	b40e      	push	{r1, r2, r3}
 8011802:	b503      	push	{r0, r1, lr}
 8011804:	4601      	mov	r1, r0
 8011806:	ab03      	add	r3, sp, #12
 8011808:	4805      	ldr	r0, [pc, #20]	; (8011820 <fiprintf+0x20>)
 801180a:	f853 2b04 	ldr.w	r2, [r3], #4
 801180e:	6800      	ldr	r0, [r0, #0]
 8011810:	9301      	str	r3, [sp, #4]
 8011812:	f7ff fe95 	bl	8011540 <_vfiprintf_r>
 8011816:	b002      	add	sp, #8
 8011818:	f85d eb04 	ldr.w	lr, [sp], #4
 801181c:	b003      	add	sp, #12
 801181e:	4770      	bx	lr
 8011820:	20000080 	.word	0x20000080

08011824 <_fstat_r>:
 8011824:	b538      	push	{r3, r4, r5, lr}
 8011826:	4d07      	ldr	r5, [pc, #28]	; (8011844 <_fstat_r+0x20>)
 8011828:	2300      	movs	r3, #0
 801182a:	4604      	mov	r4, r0
 801182c:	4608      	mov	r0, r1
 801182e:	4611      	mov	r1, r2
 8011830:	602b      	str	r3, [r5, #0]
 8011832:	f7fc ffac 	bl	800e78e <_fstat>
 8011836:	1c43      	adds	r3, r0, #1
 8011838:	d102      	bne.n	8011840 <_fstat_r+0x1c>
 801183a:	682b      	ldr	r3, [r5, #0]
 801183c:	b103      	cbz	r3, 8011840 <_fstat_r+0x1c>
 801183e:	6023      	str	r3, [r4, #0]
 8011840:	bd38      	pop	{r3, r4, r5, pc}
 8011842:	bf00      	nop
 8011844:	20006488 	.word	0x20006488

08011848 <_isatty_r>:
 8011848:	b538      	push	{r3, r4, r5, lr}
 801184a:	4d06      	ldr	r5, [pc, #24]	; (8011864 <_isatty_r+0x1c>)
 801184c:	2300      	movs	r3, #0
 801184e:	4604      	mov	r4, r0
 8011850:	4608      	mov	r0, r1
 8011852:	602b      	str	r3, [r5, #0]
 8011854:	f7fd f902 	bl	800ea5c <_isatty>
 8011858:	1c43      	adds	r3, r0, #1
 801185a:	d102      	bne.n	8011862 <_isatty_r+0x1a>
 801185c:	682b      	ldr	r3, [r5, #0]
 801185e:	b103      	cbz	r3, 8011862 <_isatty_r+0x1a>
 8011860:	6023      	str	r3, [r4, #0]
 8011862:	bd38      	pop	{r3, r4, r5, pc}
 8011864:	20006488 	.word	0x20006488

08011868 <__ascii_mbtowc>:
 8011868:	b082      	sub	sp, #8
 801186a:	b901      	cbnz	r1, 801186e <__ascii_mbtowc+0x6>
 801186c:	a901      	add	r1, sp, #4
 801186e:	b142      	cbz	r2, 8011882 <__ascii_mbtowc+0x1a>
 8011870:	b14b      	cbz	r3, 8011886 <__ascii_mbtowc+0x1e>
 8011872:	7813      	ldrb	r3, [r2, #0]
 8011874:	600b      	str	r3, [r1, #0]
 8011876:	7812      	ldrb	r2, [r2, #0]
 8011878:	1e10      	subs	r0, r2, #0
 801187a:	bf18      	it	ne
 801187c:	2001      	movne	r0, #1
 801187e:	b002      	add	sp, #8
 8011880:	4770      	bx	lr
 8011882:	4610      	mov	r0, r2
 8011884:	e7fb      	b.n	801187e <__ascii_mbtowc+0x16>
 8011886:	f06f 0001 	mvn.w	r0, #1
 801188a:	e7f8      	b.n	801187e <__ascii_mbtowc+0x16>

0801188c <memmove>:
 801188c:	4288      	cmp	r0, r1
 801188e:	b510      	push	{r4, lr}
 8011890:	eb01 0402 	add.w	r4, r1, r2
 8011894:	d902      	bls.n	801189c <memmove+0x10>
 8011896:	4284      	cmp	r4, r0
 8011898:	4623      	mov	r3, r4
 801189a:	d807      	bhi.n	80118ac <memmove+0x20>
 801189c:	1e43      	subs	r3, r0, #1
 801189e:	42a1      	cmp	r1, r4
 80118a0:	d008      	beq.n	80118b4 <memmove+0x28>
 80118a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80118a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80118aa:	e7f8      	b.n	801189e <memmove+0x12>
 80118ac:	4402      	add	r2, r0
 80118ae:	4601      	mov	r1, r0
 80118b0:	428a      	cmp	r2, r1
 80118b2:	d100      	bne.n	80118b6 <memmove+0x2a>
 80118b4:	bd10      	pop	{r4, pc}
 80118b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80118ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80118be:	e7f7      	b.n	80118b0 <memmove+0x24>

080118c0 <_realloc_r>:
 80118c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118c4:	4680      	mov	r8, r0
 80118c6:	4614      	mov	r4, r2
 80118c8:	460e      	mov	r6, r1
 80118ca:	b921      	cbnz	r1, 80118d6 <_realloc_r+0x16>
 80118cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118d0:	4611      	mov	r1, r2
 80118d2:	f7fd ba39 	b.w	800ed48 <_malloc_r>
 80118d6:	b92a      	cbnz	r2, 80118e4 <_realloc_r+0x24>
 80118d8:	f7ff fc60 	bl	801119c <_free_r>
 80118dc:	4625      	mov	r5, r4
 80118de:	4628      	mov	r0, r5
 80118e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118e4:	f000 f82f 	bl	8011946 <_malloc_usable_size_r>
 80118e8:	4284      	cmp	r4, r0
 80118ea:	4607      	mov	r7, r0
 80118ec:	d802      	bhi.n	80118f4 <_realloc_r+0x34>
 80118ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80118f2:	d812      	bhi.n	801191a <_realloc_r+0x5a>
 80118f4:	4621      	mov	r1, r4
 80118f6:	4640      	mov	r0, r8
 80118f8:	f7fd fa26 	bl	800ed48 <_malloc_r>
 80118fc:	4605      	mov	r5, r0
 80118fe:	2800      	cmp	r0, #0
 8011900:	d0ed      	beq.n	80118de <_realloc_r+0x1e>
 8011902:	42bc      	cmp	r4, r7
 8011904:	4622      	mov	r2, r4
 8011906:	4631      	mov	r1, r6
 8011908:	bf28      	it	cs
 801190a:	463a      	movcs	r2, r7
 801190c:	f7fd f9e5 	bl	800ecda <memcpy>
 8011910:	4631      	mov	r1, r6
 8011912:	4640      	mov	r0, r8
 8011914:	f7ff fc42 	bl	801119c <_free_r>
 8011918:	e7e1      	b.n	80118de <_realloc_r+0x1e>
 801191a:	4635      	mov	r5, r6
 801191c:	e7df      	b.n	80118de <_realloc_r+0x1e>

0801191e <__ascii_wctomb>:
 801191e:	b149      	cbz	r1, 8011934 <__ascii_wctomb+0x16>
 8011920:	2aff      	cmp	r2, #255	; 0xff
 8011922:	bf85      	ittet	hi
 8011924:	238a      	movhi	r3, #138	; 0x8a
 8011926:	6003      	strhi	r3, [r0, #0]
 8011928:	700a      	strbls	r2, [r1, #0]
 801192a:	f04f 30ff 	movhi.w	r0, #4294967295
 801192e:	bf98      	it	ls
 8011930:	2001      	movls	r0, #1
 8011932:	4770      	bx	lr
 8011934:	4608      	mov	r0, r1
 8011936:	4770      	bx	lr

08011938 <abort>:
 8011938:	b508      	push	{r3, lr}
 801193a:	2006      	movs	r0, #6
 801193c:	f000 f834 	bl	80119a8 <raise>
 8011940:	2001      	movs	r0, #1
 8011942:	f000 f855 	bl	80119f0 <_exit>

08011946 <_malloc_usable_size_r>:
 8011946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801194a:	1f18      	subs	r0, r3, #4
 801194c:	2b00      	cmp	r3, #0
 801194e:	bfbc      	itt	lt
 8011950:	580b      	ldrlt	r3, [r1, r0]
 8011952:	18c0      	addlt	r0, r0, r3
 8011954:	4770      	bx	lr

08011956 <_raise_r>:
 8011956:	291f      	cmp	r1, #31
 8011958:	b538      	push	{r3, r4, r5, lr}
 801195a:	4604      	mov	r4, r0
 801195c:	460d      	mov	r5, r1
 801195e:	d904      	bls.n	801196a <_raise_r+0x14>
 8011960:	2316      	movs	r3, #22
 8011962:	6003      	str	r3, [r0, #0]
 8011964:	f04f 30ff 	mov.w	r0, #4294967295
 8011968:	bd38      	pop	{r3, r4, r5, pc}
 801196a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801196c:	b112      	cbz	r2, 8011974 <_raise_r+0x1e>
 801196e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011972:	b94b      	cbnz	r3, 8011988 <_raise_r+0x32>
 8011974:	4620      	mov	r0, r4
 8011976:	f000 f831 	bl	80119dc <_getpid_r>
 801197a:	462a      	mov	r2, r5
 801197c:	4601      	mov	r1, r0
 801197e:	4620      	mov	r0, r4
 8011980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011984:	f000 b818 	b.w	80119b8 <_kill_r>
 8011988:	2b01      	cmp	r3, #1
 801198a:	d00a      	beq.n	80119a2 <_raise_r+0x4c>
 801198c:	1c59      	adds	r1, r3, #1
 801198e:	d103      	bne.n	8011998 <_raise_r+0x42>
 8011990:	2316      	movs	r3, #22
 8011992:	6003      	str	r3, [r0, #0]
 8011994:	2001      	movs	r0, #1
 8011996:	e7e7      	b.n	8011968 <_raise_r+0x12>
 8011998:	2400      	movs	r4, #0
 801199a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801199e:	4628      	mov	r0, r5
 80119a0:	4798      	blx	r3
 80119a2:	2000      	movs	r0, #0
 80119a4:	e7e0      	b.n	8011968 <_raise_r+0x12>
	...

080119a8 <raise>:
 80119a8:	4b02      	ldr	r3, [pc, #8]	; (80119b4 <raise+0xc>)
 80119aa:	4601      	mov	r1, r0
 80119ac:	6818      	ldr	r0, [r3, #0]
 80119ae:	f7ff bfd2 	b.w	8011956 <_raise_r>
 80119b2:	bf00      	nop
 80119b4:	20000080 	.word	0x20000080

080119b8 <_kill_r>:
 80119b8:	b538      	push	{r3, r4, r5, lr}
 80119ba:	4d07      	ldr	r5, [pc, #28]	; (80119d8 <_kill_r+0x20>)
 80119bc:	2300      	movs	r3, #0
 80119be:	4604      	mov	r4, r0
 80119c0:	4608      	mov	r0, r1
 80119c2:	4611      	mov	r1, r2
 80119c4:	602b      	str	r3, [r5, #0]
 80119c6:	f000 f80b 	bl	80119e0 <_kill>
 80119ca:	1c43      	adds	r3, r0, #1
 80119cc:	d102      	bne.n	80119d4 <_kill_r+0x1c>
 80119ce:	682b      	ldr	r3, [r5, #0]
 80119d0:	b103      	cbz	r3, 80119d4 <_kill_r+0x1c>
 80119d2:	6023      	str	r3, [r4, #0]
 80119d4:	bd38      	pop	{r3, r4, r5, pc}
 80119d6:	bf00      	nop
 80119d8:	20006488 	.word	0x20006488

080119dc <_getpid_r>:
 80119dc:	f7fc beb4 	b.w	800e748 <_getpid>

080119e0 <_kill>:
 80119e0:	4b02      	ldr	r3, [pc, #8]	; (80119ec <_kill+0xc>)
 80119e2:	2258      	movs	r2, #88	; 0x58
 80119e4:	601a      	str	r2, [r3, #0]
 80119e6:	f04f 30ff 	mov.w	r0, #4294967295
 80119ea:	4770      	bx	lr
 80119ec:	20006488 	.word	0x20006488

080119f0 <_exit>:
 80119f0:	e7fe      	b.n	80119f0 <_exit>
	...

080119f4 <_init>:
 80119f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119f6:	bf00      	nop
 80119f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119fa:	bc08      	pop	{r3}
 80119fc:	469e      	mov	lr, r3
 80119fe:	4770      	bx	lr

08011a00 <_fini>:
 8011a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a02:	bf00      	nop
 8011a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a06:	bc08      	pop	{r3}
 8011a08:	469e      	mov	lr, r3
 8011a0a:	4770      	bx	lr
